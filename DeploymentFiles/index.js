(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("fs"), require("https"), require("crypto"), require("events"), require("http"), require("path"), require("stream"), require("url"), require("util"), require("buffer"), require("domain"), require("os"), require("querystring"), require("string_decoder"), require("timers"));
	else if(typeof define === 'function' && define.amd)
		define(["fs", "https", "crypto", "events", "http", "path", "stream", "url", "util", "buffer", "domain", "os", "querystring", "string_decoder", "timers"], factory);
	else if(typeof exports === 'object')
		exports["test"] = factory(require("fs"), require("https"), require("crypto"), require("events"), require("http"), require("path"), require("stream"), require("url"), require("util"), require("buffer"), require("domain"), require("os"), require("querystring"), require("string_decoder"), require("timers"));
	else
		root["test"] = factory(root["fs"], root["https"], root["crypto"], root["events"], root["http"], root["path"], root["stream"], root["url"], root["util"], root["buffer"], root["domain"], root["os"], root["querystring"], root["string_decoder"], root["timers"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_46__, __WEBPACK_EXTERNAL_MODULE_47__, __WEBPACK_EXTERNAL_MODULE_98__, __WEBPACK_EXTERNAL_MODULE_99__, __WEBPACK_EXTERNAL_MODULE_100__, __WEBPACK_EXTERNAL_MODULE_101__, __WEBPACK_EXTERNAL_MODULE_102__, __WEBPACK_EXTERNAL_MODULE_103__, __WEBPACK_EXTERNAL_MODULE_104__, __WEBPACK_EXTERNAL_MODULE_666__, __WEBPACK_EXTERNAL_MODULE_667__, __WEBPACK_EXTERNAL_MODULE_668__, __WEBPACK_EXTERNAL_MODULE_669__, __WEBPACK_EXTERNAL_MODULE_670__, __WEBPACK_EXTERNAL_MODULE_671__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 672);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * The main AWS namespace
 */
var AWS = { util: __webpack_require__(2) };

/**
 * @api private
 * @!macro [new] nobrowser
 *   @note This feature is not supported in the browser environment of the SDK.
 */
var _hidden = {}; _hidden.toString(); // hack to parse macro

module.exports = AWS;

AWS.util.update(AWS, {

  /**
   * @constant
   */
  VERSION: '2.149.0',

  /**
   * @api private
   */
  Signers: {},

  /**
   * @api private
   */
  Protocol: {
    Json: __webpack_require__(32),
    Query: __webpack_require__(61),
    Rest: __webpack_require__(20),
    RestJson: __webpack_require__(62),
    RestXml: __webpack_require__(63)
  },

  /**
   * @api private
   */
  XML: {
    Builder: __webpack_require__(532),
    Parser: null // conditionally set based on environment
  },

  /**
   * @api private
   */
  JSON: {
    Builder: __webpack_require__(30),
    Parser: __webpack_require__(31)
  },

  /**
   * @api private
   */
  Model: {
    Api: __webpack_require__(56),
    Operation: __webpack_require__(58),
    Shape: __webpack_require__(19),
    Paginator: __webpack_require__(59),
    ResourceWaiter: __webpack_require__(60)
  },

  /**
   * @api private
   */
  apiLoader: __webpack_require__(477)
});

__webpack_require__(507);
__webpack_require__(480);

__webpack_require__(29);
__webpack_require__(64);
__webpack_require__(494);
__webpack_require__(503);
__webpack_require__(505);
__webpack_require__(504);
__webpack_require__(526);
__webpack_require__(497);

/**
 * @readonly
 * @return [AWS.SequentialExecutor] a collection of global event listeners that
 *   are attached to every sent request.
 * @see AWS.Request AWS.Request for a list of events to listen for
 * @example Logging the time taken to send a request
 *   AWS.events.on('send', function startSend(resp) {
 *     resp.startTime = new Date().getTime();
 *   }).on('complete', function calculateTime(resp) {
 *     var time = (new Date().getTime() - resp.startTime) / 1000;
 *     console.log('Request took ' + time + ' seconds');
 *   });
 *
 *   new AWS.S3().listBuckets(); // prints 'Request took 0.285 seconds'
 */
AWS.events = new AWS.SequentialExecutor();


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

// node.js specific modules
util.crypto.lib = __webpack_require__(98);
util.Buffer = __webpack_require__(666).Buffer;
util.domain = __webpack_require__(667);
util.stream = __webpack_require__(102);
util.url = __webpack_require__(103);
util.querystring = __webpack_require__(669);
util.environment = 'nodejs';
var AWS;
module.exports = AWS = __webpack_require__(0);

__webpack_require__(52);
__webpack_require__(53);
__webpack_require__(488);
__webpack_require__(489);
__webpack_require__(481);
__webpack_require__(486);

// Load the xml2js XML parser
AWS.XML.Parser = __webpack_require__(533);

// Load Node HTTP client
__webpack_require__(495);

// Load custom credential providers
__webpack_require__(482);
__webpack_require__(483);
__webpack_require__(484);
__webpack_require__(485);
__webpack_require__(487);

var SharedIniFile = __webpack_require__(65);

// Setup default chain providers
// If this changes, please update documentation for
// AWS.CredentialProviderChain.defaultProviders in
// credentials/credential_provider_chain.js
AWS.CredentialProviderChain.defaultProviders = [
  function () { return new AWS.EnvironmentCredentials('AWS'); },
  function () { return new AWS.EnvironmentCredentials('AMAZON'); },
  function () { return new AWS.SharedIniFileCredentials(); },
  function () {
    if (AWS.ECSCredentials.prototype.isConfiguredForEcsCredentials()) {
      return new AWS.ECSCredentials();
    }
    return new AWS.EC2MetadataCredentials();
  }
];

// Update configuration keys
AWS.util.update(AWS.Config.prototype.keys, {
  credentials: function () {
    var credentials = null;
    new AWS.CredentialProviderChain([
      function () { return new AWS.EnvironmentCredentials('AWS'); },
      function () { return new AWS.EnvironmentCredentials('AMAZON'); },
      function () { return new AWS.SharedIniFileCredentials({ disableAssumeRole: true }); }
    ]).resolve(function(err, creds) {
      if (!err) credentials = creds;
    });
    return credentials;
  },
  credentialProvider: function() {
    return new AWS.CredentialProviderChain();
  },
  logger: function () {
    return process.env.AWSJS_DEBUG ? console : null;
  },
  region: function() {
    var env = process.env;
    var region = env.AWS_REGION || env.AMAZON_REGION;
    if (env[AWS.util.configOptInEnv]) {
      var toCheck = [
        {filename: env[AWS.util.sharedCredentialsFileEnv]},
        {isConfig: true, filename: env[AWS.util.sharedConfigFileEnv]}
      ];
      while (!region && toCheck.length) {
        var configFile = new SharedIniFile(toCheck.shift());
        var profile = configFile.getProfile(
          env.AWS_PROFILE || AWS.util.defaultProfile
        );
        region = profile && profile.region;
      }
    }
    return region;
  }
});

// Reset configuration
AWS.config = new AWS.Config();


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint guard-for-in:0 */
var AWS;

/**
 * A set of utility methods for use with the AWS SDK.
 *
 * @!attribute abort
 *   Return this value from an iterator function {each} or {arrayEach}
 *   to break out of the iteration.
 *   @example Breaking out of an iterator function
 *     AWS.util.each({a: 1, b: 2, c: 3}, function(key, value) {
 *       if (key == 'b') return AWS.util.abort;
 *     });
 *   @see each
 *   @see arrayEach
 * @api private
 */
var util = {
  environment: 'nodejs',
  engine: function engine() {
    if (util.isBrowser() && typeof navigator !== 'undefined') {
      return navigator.userAgent;
    } else {
      var engine = process.platform + '/' + process.version;
      if (process.env.AWS_EXECUTION_ENV) {
        engine += ' exec-env/' + process.env.AWS_EXECUTION_ENV;
      }
      return engine;
    }
  },

  userAgent: function userAgent() {
    var name = util.environment;
    var agent = 'aws-sdk-' + name + '/' + __webpack_require__(0).VERSION;
    if (name === 'nodejs') agent += ' ' + util.engine();
    return agent;
  },

  isBrowser: function isBrowser() { return process && process.browser; },
  isNode: function isNode() { return !util.isBrowser(); },
  uriEscape: function uriEscape(string) {
    var output = encodeURIComponent(string);
    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);

    // AWS percent-encodes some extra non-standard characters in a URI
    output = output.replace(/[*]/g, function(ch) {
      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
    });

    return output;
  },

  uriEscapePath: function uriEscapePath(string) {
    var parts = [];
    util.arrayEach(string.split('/'), function (part) {
      parts.push(util.uriEscape(part));
    });
    return parts.join('/');
  },

  urlParse: function urlParse(url) {
    return util.url.parse(url);
  },

  urlFormat: function urlFormat(url) {
    return util.url.format(url);
  },

  queryStringParse: function queryStringParse(qs) {
    return util.querystring.parse(qs);
  },

  queryParamsToString: function queryParamsToString(params) {
    var items = [];
    var escape = util.uriEscape;
    var sortedKeys = Object.keys(params).sort();

    util.arrayEach(sortedKeys, function(name) {
      var value = params[name];
      var ename = escape(name);
      var result = ename + '=';
      if (Array.isArray(value)) {
        var vals = [];
        util.arrayEach(value, function(item) { vals.push(escape(item)); });
        result = ename + '=' + vals.sort().join('&' + ename + '=');
      } else if (value !== undefined && value !== null) {
        result = ename + '=' + escape(value);
      }
      items.push(result);
    });

    return items.join('&');
  },

  readFileSync: function readFileSync(path) {
    if (util.isBrowser()) return null;
    return __webpack_require__(46).readFileSync(path, 'utf-8');
  },

  base64: {
    encode: function encode64(string) {
      if (typeof string === 'number') {
        throw util.error(new Error('Cannot base64 encode number ' + string));
      }
      if (string === null || typeof string === 'undefined') {
        return string;
      }
      var buf = (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string) : new util.Buffer(string);
      return buf.toString('base64');
    },

    decode: function decode64(string) {
      if (typeof string === 'number') {
        throw util.error(new Error('Cannot base64 decode number ' + string));
      }
      if (string === null || typeof string === 'undefined') {
        return string;
      }
      return (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string, 'base64') : new util.Buffer(string, 'base64');
    }

  },

  buffer: {
    toStream: function toStream(buffer) {
      if (!util.Buffer.isBuffer(buffer)) buffer = new util.Buffer(buffer);

      var readable = new (util.stream.Readable)();
      var pos = 0;
      readable._read = function(size) {
        if (pos >= buffer.length) return readable.push(null);

        var end = pos + size;
        if (end > buffer.length) end = buffer.length;
        readable.push(buffer.slice(pos, end));
        pos = end;
      };

      return readable;
    },

    /**
     * Concatenates a list of Buffer objects.
     */
    concat: function(buffers) {
      var length = 0,
          offset = 0,
          buffer = null, i;

      for (i = 0; i < buffers.length; i++) {
        length += buffers[i].length;
      }

      buffer = new util.Buffer(length);

      for (i = 0; i < buffers.length; i++) {
        buffers[i].copy(buffer, offset);
        offset += buffers[i].length;
      }

      return buffer;
    }
  },

  string: {
    byteLength: function byteLength(string) {
      if (string === null || string === undefined) return 0;
      if (typeof string === 'string') string = new util.Buffer(string);

      if (typeof string.byteLength === 'number') {
        return string.byteLength;
      } else if (typeof string.length === 'number') {
        return string.length;
      } else if (typeof string.size === 'number') {
        return string.size;
      } else if (typeof string.path === 'string') {
        return __webpack_require__(46).lstatSync(string.path).size;
      } else {
        throw util.error(new Error('Cannot determine length of ' + string),
          { object: string });
      }
    },

    upperFirst: function upperFirst(string) {
      return string[0].toUpperCase() + string.substr(1);
    },

    lowerFirst: function lowerFirst(string) {
      return string[0].toLowerCase() + string.substr(1);
    }
  },

  ini: {
    parse: function string(ini) {
      var currentSection, map = {};
      util.arrayEach(ini.split(/\r?\n/), function(line) {
        line = line.split(/(^|\s)[;#]/)[0]; // remove comments
        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
        if (section) {
          currentSection = section[1];
        } else if (currentSection) {
          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
          if (item) {
            map[currentSection] = map[currentSection] || {};
            map[currentSection][item[1]] = item[2];
          }
        }
      });

      return map;
    }
  },

  fn: {
    noop: function() {},

    /**
     * Turn a synchronous function into as "async" function by making it call
     * a callback. The underlying function is called with all but the last argument,
     * which is treated as the callback. The callback is passed passed a first argument
     * of null on success to mimick standard node callbacks.
     */
    makeAsync: function makeAsync(fn, expectedArgs) {
      if (expectedArgs && expectedArgs <= fn.length) {
        return fn;
      }

      return function() {
        var args = Array.prototype.slice.call(arguments, 0);
        var callback = args.pop();
        var result = fn.apply(null, args);
        callback(result);
      };
    }
  },

  /**
   * Date and time utility functions.
   */
  date: {

    /**
     * @return [Date] the current JavaScript date object. Since all
     *   AWS services rely on this date object, you can override
     *   this function to provide a special time value to AWS service
     *   requests.
     */
    getDate: function getDate() {
      if (!AWS) AWS = __webpack_require__(0);
      if (AWS.config.systemClockOffset) { // use offset when non-zero
        return new Date(new Date().getTime() + AWS.config.systemClockOffset);
      } else {
        return new Date();
      }
    },

    /**
     * @return [String] the date in ISO-8601 format
     */
    iso8601: function iso8601(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.toISOString().replace(/\.\d{3}Z$/, 'Z');
    },

    /**
     * @return [String] the date in RFC 822 format
     */
    rfc822: function rfc822(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.toUTCString();
    },

    /**
     * @return [Integer] the UNIX timestamp value for the current time
     */
    unixTimestamp: function unixTimestamp(date) {
      if (date === undefined) { date = util.date.getDate(); }
      return date.getTime() / 1000;
    },

    /**
     * @param [String,number,Date] date
     * @return [Date]
     */
    from: function format(date) {
      if (typeof date === 'number') {
        return new Date(date * 1000); // unix timestamp
      } else {
        return new Date(date);
      }
    },

    /**
     * Given a Date or date-like value, this function formats the
     * date into a string of the requested value.
     * @param [String,number,Date] date
     * @param [String] formatter Valid formats are:
     #   * 'iso8601'
     #   * 'rfc822'
     #   * 'unixTimestamp'
     * @return [String]
     */
    format: function format(date, formatter) {
      if (!formatter) formatter = 'iso8601';
      return util.date[formatter](util.date.from(date));
    },

    parseTimestamp: function parseTimestamp(value) {
      if (typeof value === 'number') { // unix timestamp (number)
        return new Date(value * 1000);
      } else if (value.match(/^\d+$/)) { // unix timestamp
        return new Date(value * 1000);
      } else if (value.match(/^\d{4}/)) { // iso8601
        return new Date(value);
      } else if (value.match(/^\w{3},/)) { // rfc822
        return new Date(value);
      } else {
        throw util.error(
          new Error('unhandled timestamp format: ' + value),
          {code: 'TimestampParserError'});
      }
    }

  },

  crypto: {
    crc32Table: [
     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,
     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,
     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,
     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,
     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,
     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,
     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,
     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,
     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,
     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,
     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,
     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,
     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,
     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,
     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,
     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,
     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,
     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,
     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,
     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,
     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,
     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,
     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,
     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,
     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,
     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,
     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,
     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,
     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,
     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,
     0x2D02EF8D],

    crc32: function crc32(data) {
      var tbl = util.crypto.crc32Table;
      var crc = 0 ^ -1;

      if (typeof data === 'string') {
        data = new util.Buffer(data);
      }

      for (var i = 0; i < data.length; i++) {
        var code = data.readUInt8(i);
        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];
      }
      return (crc ^ -1) >>> 0;
    },

    hmac: function hmac(key, string, digest, fn) {
      if (!digest) digest = 'binary';
      if (digest === 'buffer') { digest = undefined; }
      if (!fn) fn = 'sha256';
      if (typeof string === 'string') string = new util.Buffer(string);
      return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
    },

    md5: function md5(data, digest, callback) {
      return util.crypto.hash('md5', data, digest, callback);
    },

    sha256: function sha256(data, digest, callback) {
      return util.crypto.hash('sha256', data, digest, callback);
    },

    hash: function(algorithm, data, digest, callback) {
      var hash = util.crypto.createHash(algorithm);
      if (!digest) { digest = 'binary'; }
      if (digest === 'buffer') { digest = undefined; }
      if (typeof data === 'string') data = new util.Buffer(data);
      var sliceFn = util.arraySliceFn(data);
      var isBuffer = util.Buffer.isBuffer(data);
      //Identifying objects with an ArrayBuffer as buffers
      if (util.isBrowser() && typeof ArrayBuffer !== 'undefined' && data && data.buffer instanceof ArrayBuffer) isBuffer = true;

      if (callback && typeof data === 'object' &&
          typeof data.on === 'function' && !isBuffer) {
        data.on('data', function(chunk) { hash.update(chunk); });
        data.on('error', function(err) { callback(err); });
        data.on('end', function() { callback(null, hash.digest(digest)); });
      } else if (callback && sliceFn && !isBuffer &&
                 typeof FileReader !== 'undefined') {
        // this might be a File/Blob
        var index = 0, size = 1024 * 512;
        var reader = new FileReader();
        reader.onerror = function() {
          callback(new Error('Failed to read data.'));
        };
        reader.onload = function() {
          var buf = new util.Buffer(new Uint8Array(reader.result));
          hash.update(buf);
          index += buf.length;
          reader._continueReading();
        };
        reader._continueReading = function() {
          if (index >= data.size) {
            callback(null, hash.digest(digest));
            return;
          }

          var back = index + size;
          if (back > data.size) back = data.size;
          reader.readAsArrayBuffer(sliceFn.call(data, index, back));
        };

        reader._continueReading();
      } else {
        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {
          data = new util.Buffer(new Uint8Array(data));
        }
        var out = hash.update(data).digest(digest);
        if (callback) callback(null, out);
        return out;
      }
    },

    toHex: function toHex(data) {
      var out = [];
      for (var i = 0; i < data.length; i++) {
        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));
      }
      return out.join('');
    },

    createHash: function createHash(algorithm) {
      return util.crypto.lib.createHash(algorithm);
    }

  },

  /** @!ignore */

  /* Abort constant */
  abort: {},

  each: function each(object, iterFunction) {
    for (var key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        var ret = iterFunction.call(this, key, object[key]);
        if (ret === util.abort) break;
      }
    }
  },

  arrayEach: function arrayEach(array, iterFunction) {
    for (var idx in array) {
      if (Object.prototype.hasOwnProperty.call(array, idx)) {
        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
        if (ret === util.abort) break;
      }
    }
  },

  update: function update(obj1, obj2) {
    util.each(obj2, function iterator(key, item) {
      obj1[key] = item;
    });
    return obj1;
  },

  merge: function merge(obj1, obj2) {
    return util.update(util.copy(obj1), obj2);
  },

  copy: function copy(object) {
    if (object === null || object === undefined) return object;
    var dupe = {};
    // jshint forin:false
    for (var key in object) {
      dupe[key] = object[key];
    }
    return dupe;
  },

  isEmpty: function isEmpty(obj) {
    for (var prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        return false;
      }
    }
    return true;
  },

  arraySliceFn: function arraySliceFn(obj) {
    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
    return typeof fn === 'function' ? fn : null;
  },

  isType: function isType(obj, type) {
    // handle cross-"frame" objects
    if (typeof type === 'function') type = util.typeName(type);
    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
  },

  typeName: function typeName(type) {
    if (Object.prototype.hasOwnProperty.call(type, 'name')) return type.name;
    var str = type.toString();
    var match = str.match(/^\s*function (.+)\(/);
    return match ? match[1] : str;
  },

  error: function error(err, options) {
    var originalError = null;
    if (typeof err.message === 'string' && err.message !== '') {
      if (typeof options === 'string' || (options && options.message)) {
        originalError = util.copy(err);
        originalError.message = err.message;
      }
    }
    err.message = err.message || null;

    if (typeof options === 'string') {
      err.message = options;
    } else if (typeof options === 'object' && options !== null) {
      util.update(err, options);
      if (options.message)
        err.message = options.message;
      if (options.code || options.name)
        err.code = options.code || options.name;
      if (options.stack)
        err.stack = options.stack;
    }

    if (typeof Object.defineProperty === 'function') {
      Object.defineProperty(err, 'name', {writable: true, enumerable: false});
      Object.defineProperty(err, 'message', {enumerable: true});
    }

    err.name = options && options.name || err.name || err.code || 'Error';
    err.time = new Date();

    if (originalError) err.originalError = originalError;

    return err;
  },

  /**
   * @api private
   */
  inherit: function inherit(klass, features) {
    var newObject = null;
    if (features === undefined) {
      features = klass;
      klass = Object;
      newObject = {};
    } else {
      var ctor = function ConstructorWrapper() {};
      ctor.prototype = klass.prototype;
      newObject = new ctor();
    }

    // constructor not supplied, create pass-through ctor
    if (features.constructor === Object) {
      features.constructor = function() {
        if (klass !== Object) {
          return klass.apply(this, arguments);
        }
      };
    }

    features.constructor.prototype = newObject;
    util.update(features.constructor.prototype, features);
    features.constructor.__super__ = klass;
    return features.constructor;
  },

  /**
   * @api private
   */
  mixin: function mixin() {
    var klass = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      // jshint forin:false
      for (var prop in arguments[i].prototype) {
        var fn = arguments[i].prototype[prop];
        if (prop !== 'constructor') {
          klass.prototype[prop] = fn;
        }
      }
    }
    return klass;
  },

  /**
   * @api private
   */
  hideProperties: function hideProperties(obj, props) {
    if (typeof Object.defineProperty !== 'function') return;

    util.arrayEach(props, function (key) {
      Object.defineProperty(obj, key, {
        enumerable: false, writable: true, configurable: true });
    });
  },

  /**
   * @api private
   */
  property: function property(obj, name, value, enumerable, isValue) {
    var opts = {
      configurable: true,
      enumerable: enumerable !== undefined ? enumerable : true
    };
    if (typeof value === 'function' && !isValue) {
      opts.get = value;
    }
    else {
      opts.value = value; opts.writable = true;
    }

    Object.defineProperty(obj, name, opts);
  },

  /**
   * @api private
   */
  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {
    var cachedValue = null;

    // build enumerable attribute for each value with lazy accessor.
    util.property(obj, name, function() {
      if (cachedValue === null) {
        cachedValue = get();
      }
      return cachedValue;
    }, enumerable);
  },

  /**
   * TODO Remove in major version revision
   * This backfill populates response data without the
   * top-level payload name.
   *
   * @api private
   */
  hoistPayloadMember: function hoistPayloadMember(resp) {
    var req = resp.request;
    var operation = req.operation;
    var output = req.service.api.operations[operation].output;
    if (output.payload) {
      var payloadMember = output.members[output.payload];
      var responsePayload = resp.data[output.payload];
      if (payloadMember.type === 'structure') {
        util.each(responsePayload, function(key, value) {
          util.property(resp.data, key, value, false);
        });
      }
    }
  },

  /**
   * Compute SHA-256 checksums of streams
   *
   * @api private
   */
  computeSha256: function computeSha256(body, done) {
    if (util.isNode()) {
      var Stream = util.stream.Stream;
      var fs = __webpack_require__(46);
      if (body instanceof Stream) {
        if (typeof body.path === 'string') { // assume file object
          var settings = {};
          if (typeof body.start === 'number') {
            settings.start = body.start;
          }
          if (typeof body.end === 'number') {
            settings.end = body.end;
          }
          body = fs.createReadStream(body.path, settings);
        } else { // TODO support other stream types
          return done(new Error('Non-file stream objects are ' +
                                'not supported with SigV4'));
        }
      }
    }

    util.crypto.sha256(body, 'hex', function(err, sha) {
      if (err) done(err);
      else done(null, sha);
    });
  },

  /**
   * @api private
   */
  isClockSkewed: function isClockSkewed(serverTime) {
    if (serverTime) {
      util.property(AWS.config, 'isClockSkewed',
        Math.abs(new Date().getTime() - serverTime) >= 300000, false);
      return AWS.config.isClockSkewed;
    }
  },

  applyClockOffset: function applyClockOffset(serverTime) {
    if (serverTime)
      AWS.config.systemClockOffset = serverTime - new Date().getTime();
  },

  /**
   * @api private
   */
  extractRequestId: function extractRequestId(resp) {
    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||
                     resp.httpResponse.headers['x-amzn-requestid'];

    if (!requestId && resp.data && resp.data.ResponseMetadata) {
      requestId = resp.data.ResponseMetadata.RequestId;
    }

    if (requestId) {
      resp.requestId = requestId;
    }

    if (resp.error) {
      resp.error.requestId = requestId;
    }
  },

  /**
   * @api private
   */
  addPromises: function addPromises(constructors, PromiseDependency) {
    if (PromiseDependency === undefined && AWS && AWS.config) {
      PromiseDependency = AWS.config.getPromisesDependency();
    }
    if (PromiseDependency === undefined && typeof Promise !== 'undefined') {
      PromiseDependency = Promise;
    }
    if (typeof PromiseDependency !== 'function') var deletePromises = true;
    if (!Array.isArray(constructors)) constructors = [constructors];

    for (var ind = 0; ind < constructors.length; ind++) {
      var constructor = constructors[ind];
      if (deletePromises) {
        if (constructor.deletePromisesFromClass) {
          constructor.deletePromisesFromClass();
        }
      } else if (constructor.addPromisesToClass) {
        constructor.addPromisesToClass(PromiseDependency);
      }
    }
  },

  /**
   * @api private
   */
  promisifyMethod: function promisifyMethod(methodName, PromiseDependency) {
    return function promise() {
      var self = this;
      return new PromiseDependency(function(resolve, reject) {
        self[methodName](function(err, data) {
          if (err) {
            reject(err);
          } else {
            resolve(data);
          }
        });
      });
    };
  },

  /**
   * @api private
   */
  isDualstackAvailable: function isDualstackAvailable(service) {
    if (!service) return false;
    var metadata = __webpack_require__(283);
    if (typeof service !== 'string') service = service.serviceIdentifier;
    if (typeof service !== 'string' || !metadata.hasOwnProperty(service)) return false;
    return !!metadata[service].dualstackAvailable;
  },

  /**
   * @api private
   */
  calculateRetryDelay: function calculateRetryDelay(retryCount, retryDelayOptions) {
    if (!retryDelayOptions) retryDelayOptions = {};
    var customBackoff = retryDelayOptions.customBackoff || null;
    if (typeof customBackoff === 'function') {
      return customBackoff(retryCount);
    }
    var base = typeof retryDelayOptions.base === 'number' ? retryDelayOptions.base : 100;
    var delay = Math.random() * (Math.pow(2, retryCount) * base);
    return delay;
  },

  /**
   * @api private
   */
  handleRequestWithRetries: function handleRequestWithRetries(httpRequest, options, cb) {
    if (!options) options = {};
    var http = AWS.HttpClient.getInstance();
    var httpOptions = options.httpOptions || {};
    var retryCount = 0;

    var errCallback = function(err) {
      var maxRetries = options.maxRetries || 0;
      if (err && err.code === 'TimeoutError') err.retryable = true;
      if (err && err.retryable && retryCount < maxRetries) {
        retryCount++;
        var delay = util.calculateRetryDelay(retryCount, options.retryDelayOptions);
        setTimeout(sendRequest, delay + (err.retryAfter || 0));
      } else {
        cb(err);
      }
    };

    var sendRequest = function() {
      var data = '';
      http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
        httpResponse.on('data', function(chunk) { data += chunk.toString(); });
        httpResponse.on('end', function() {
          var statusCode = httpResponse.statusCode;
          if (statusCode < 300) {
            cb(null, data);
          } else {
            var retryAfter = parseInt(httpResponse.headers['retry-after'], 10) * 1000 || 0;
            var err = util.error(new Error(),
              { retryable: statusCode >= 500 || statusCode === 429 }
            );
            if (retryAfter && err.retryable) err.retryAfter = retryAfter;
            errCallback(err);
          }
        });
      }, errCallback);
    };

    AWS.util.defer(sendRequest);
  },

  /**
   * @api private
   */
  uuid: {
    v4: function uuidV4() {
      return __webpack_require__(651).v4();
    }
  },

  /**
   * @api private
   */
  convertPayloadToString: function convertPayloadToString(resp) {
    var req = resp.request;
    var operation = req.operation;
    var rules = req.service.api.operations[operation].output || {};
    if (rules.payload && resp.data[rules.payload]) {
      resp.data[rules.payload] = resp.data[rules.payload].toString();
    }
  },

  /**
   * @api private
   */
  defer: function defer(callback) {
    if (typeof process === 'object' && typeof process.nextTick === 'function') {
      process.nextTick(callback);
    } else if (typeof setImmediate === 'function') {
      setImmediate(callback);
    } else {
      setTimeout(callback, 0);
    }
  },

  /**
   * @api private
   */
  defaultProfile: 'default',

  /**
   * @api private
   */
  configOptInEnv: 'AWS_SDK_LOAD_CONFIG',

  /**
   * @api private
   */
  sharedCredentialsFileEnv: 'AWS_SHARED_CREDENTIALS_FILE',

  /**
   * @api private
   */
  sharedConfigFileEnv: 'AWS_CONFIG_FILE'
};

module.exports = util;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssign = __webpack_require__(568),
    baseCreate = __webpack_require__(569);

/**
 * Creates an object that inherits from the `prototype` object. If a
 * `properties` object is given, its own enumerable string keyed properties
 * are assigned to the created object.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */
function create(prototype, properties) {
  var result = baseCreate(prototype);
  return properties == null ? result : baseAssign(result, properties);
}

module.exports = create;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(81);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var consoleLogger = {
  type: 'logger',

  log: function log(args) {
    this._output('log', args);
  },
  warn: function warn(args) {
    this._output('warn', args);
  },
  error: function error(args) {
    this._output('error', args);
  },
  _output: function _output(type, args) {
    if (console && console[type]) console[type].apply(console, Array.prototype.slice.call(args));
  }
};

var Logger = function () {
  function Logger(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Logger);

    this.subs = [];
    this.init(concreteLogger, options);
  }

  Logger.prototype.init = function init(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    this.prefix = options.prefix || 'i18next:';
    this.logger = concreteLogger || consoleLogger;
    this.options = options;
    this.debug = options.debug === false ? false : true;
  };

  Logger.prototype.setDebug = function setDebug(bool) {
    this.debug = bool;
    this.subs.forEach(function (sub) {
      sub.setDebug(bool);
    });
  };

  Logger.prototype.log = function log() {
    this.forward(arguments, 'log', '', true);
  };

  Logger.prototype.warn = function warn() {
    this.forward(arguments, 'warn', '', true);
  };

  Logger.prototype.error = function error() {
    this.forward(arguments, 'error', '');
  };

  Logger.prototype.deprecate = function deprecate() {
    this.forward(arguments, 'warn', 'WARNING DEPRECATED: ', true);
  };

  Logger.prototype.forward = function forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return;
    if (typeof args[0] === 'string') args[0] = prefix + this.prefix + ' ' + args[0];
    this.logger[lvl](args);
  };

  Logger.prototype.create = function create(moduleName) {
    var sub = new Logger(this.logger, _extends({ prefix: this.prefix + ':' + moduleName + ':' }, this.options));
    this.subs.push(sub);

    return sub;
  };

  // createInstance(options = {}) {
  //   return new Logger(options, callback);
  // }

  return Logger;
}();

;

exports.default = new Logger();

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(579),
    getValue = __webpack_require__(602);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class TemplateBuilder {
    constructor() {
        this.template = {};
    }

    /**
     * Sets the title of the template
     * 
     * @param {string} title 
     * @returns 
     * @memberof TemplateBuilder
     */
    setTitle(title) {
        this.template.title = title;
        return this;
    }

    /**
     * Sets the token of the template
     * 
     * @param {string} token 
     * @returns 
     * @memberof TemplateBuilder
     */
    setToken(token) {
        this.template.token = token;
        return this;
    }

    /**
     * Sets the background image of the template
     * 
     * @param {Image} image 
     * @returns 
     * @memberof TemplateBuilder
     */
    setBackgroundImage(image) {
        this.template.backgroundImage = image;
        return this;
    }

    /**
     * Sets the backButton behavior
     * 
     * @param {string} backButtonBehavior 'VISIBLE' or 'HIDDEN'
     * @returns 
     * @memberof TemplateBuilder
     */
    setBackButtonBehavior(backButtonBehavior) {
        this.template.backButton = backButtonBehavior;
        return this;
    }

    /**
     * Builds the template JSON object
     * 
     * @returns 
     * @memberof TemplateBuilder
     */
    build() {
        return this.template;
    }
}

module.exports.TemplateBuilder = TemplateBuilder;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Utility methods for building TextField objects
 * 
 * @class TextUtils
 */
class TextUtils {

    /**
     * Creates a plain TextField object with contents : text
     * 
     * @static
     * @param {string} text contents of plain text object
     * @returns 
     * @memberof TextUtils
     */
    static makePlainText(text) {
        return {
            text : text,
            type : 'PlainText'
        };
    }

    /**
     * Creates a rich TextField object with contents : text
     * 
     * @static
     * @param {string} text 
     * @returns 
     * @memberof TextUtils
     */
    static makeRichText(text) {
        return {
            text : text,
            type : 'RichText'
        };
    }

    /**
     * Creates a textContent
     * 
     * @static
     * @param {{type : string, text : string}} primaryText 
     * @param {{type : string, text : string}} secondaryText 
     * @param {{type : string, text : string}} tertiaryText 
     * @returns 
     * @memberof TextUtils
     */
    static makeTextContent(primaryText, secondaryText, tertiaryText) {
        const textContent = {};
        if(primaryText) {
            textContent.primaryText = primaryText;
        }

        if(secondaryText) {
            textContent.secondaryText = secondaryText;
        }

        if(tertiaryText) {
            textContent.tertiaryText = tertiaryText;
        }

        return textContent;
    }
}

module.exports.TextUtils = TextUtils;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['sts'] = {};
AWS.STS = Service.defineService('sts', ['2011-06-15']);
__webpack_require__(523);
Object.defineProperty(apiLoader.services['sts'], '2011-06-15', {
  get: function get() {
    var model = __webpack_require__(355);
    model.paginators = __webpack_require__(356).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.STS;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isEmpty, isFunction, isObject,
    hasProp = {}.hasOwnProperty;

  isObject = __webpack_require__(5);

  isFunction = __webpack_require__(28);

  isEmpty = __webpack_require__(644);

  XMLElement = null;

  XMLCData = null;

  XMLComment = null;

  XMLDeclaration = null;

  XMLDocType = null;

  XMLRaw = null;

  XMLText = null;

  module.exports = XMLNode = (function() {
    function XMLNode(parent) {
      this.parent = parent;
      this.options = this.parent.options;
      this.stringify = this.parent.stringify;
      if (XMLElement === null) {
        XMLElement = __webpack_require__(94);
        XMLCData = __webpack_require__(90);
        XMLComment = __webpack_require__(91);
        XMLDeclaration = __webpack_require__(92);
        XMLDocType = __webpack_require__(93);
        XMLRaw = __webpack_require__(663);
        XMLText = __webpack_require__(665);
      }
    }

    XMLNode.prototype.element = function(name, attributes, text) {
      var childNode, item, j, k, key, lastChild, len, len1, ref, val;
      lastChild = null;
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (Array.isArray(name)) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          lastChild = this.element(item);
        }
      } else if (isFunction(name)) {
        lastChild = this.element(name.apply());
      } else if (isObject(name)) {
        for (key in name) {
          if (!hasProp.call(name, key)) continue;
          val = name[key];
          if (isFunction(val)) {
            val = val.apply();
          }
          if ((isObject(val)) && (isEmpty(val))) {
            val = null;
          }
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
            for (k = 0, len1 = val.length; k < len1; k++) {
              item = val[k];
              childNode = {};
              childNode[key] = item;
              lastChild = this.element(childNode);
            }
          } else if (isObject(val)) {
            lastChild = this.element(key);
            lastChild.element(val);
          } else {
            lastChild = this.element(key, val);
          }
        }
      } else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);
        } else {
          lastChild = this.node(name, attributes, text);
        }
      }
      if (lastChild == null) {
        throw new Error("Could not create any elements with: " + name);
      }
      return lastChild;
    };

    XMLNode.prototype.insertBefore = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.insertAfter = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.remove = function() {
      var i, ref;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
      return this.parent;
    };

    XMLNode.prototype.node = function(name, attributes, text) {
      var child, ref;
      if (name != null) {
        name = name.valueOf();
      }
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      child = new XMLElement(this, name, attributes);
      if (text != null) {
        child.text(text);
      }
      this.children.push(child);
      return child;
    };

    XMLNode.prototype.text = function(value) {
      var child;
      child = new XMLText(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.raw = function(value) {
      var child;
      child = new XMLRaw(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.declaration = function(version, encoding, standalone) {
      var doc, xmldec;
      doc = this.document();
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
      doc.xmldec = xmldec;
      return doc.root();
    };

    XMLNode.prototype.doctype = function(pubID, sysID) {
      var doc, doctype;
      doc = this.document();
      doctype = new XMLDocType(doc, pubID, sysID);
      doc.doctype = doctype;
      return doctype;
    };

    XMLNode.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLNode.prototype.root = function() {
      var child;
      if (this.isRoot) {
        return this;
      }
      child = this.parent;
      while (!child.isRoot) {
        child = child.parent;
      }
      return child;
    };

    XMLNode.prototype.document = function() {
      return this.root().documentObject;
    };

    XMLNode.prototype.end = function(options) {
      return this.document().toString(options);
    };

    XMLNode.prototype.prev = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLNode.prototype.next = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
      var clonedRoot;
      clonedRoot = xmlbuilder.root().clone();
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot);
      return this;
    };

    XMLNode.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.doc = function() {
      return this.document();
    };

    XMLNode.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLNode.prototype.dtd = function(pubID, sysID) {
      return this.doctype(pubID, sysID);
    };

    XMLNode.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.t = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLNode.prototype.u = function() {
      return this.up();
    };

    return XMLNode;

  })();

}).call(this);


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventEmitter = function () {
	function EventEmitter() {
		_classCallCheck(this, EventEmitter);

		this.observers = {};
	}

	EventEmitter.prototype.on = function on(events, listener) {
		var _this = this;

		events.split(' ').forEach(function (event) {
			_this.observers[event] = _this.observers[event] || [];
			_this.observers[event].push(listener);
		});
	};

	EventEmitter.prototype.off = function off(event, listener) {
		var _this2 = this;

		if (!this.observers[event]) {
			return;
		}

		this.observers[event].forEach(function () {
			if (!listener) {
				delete _this2.observers[event];
			} else {
				var index = _this2.observers[event].indexOf(listener);
				if (index > -1) {
					_this2.observers[event].splice(index, 1);
				}
			}
		});
	};

	EventEmitter.prototype.emit = function emit(event) {
		for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			args[_key - 1] = arguments[_key];
		}

		if (this.observers[event]) {
			this.observers[event].forEach(function (observer) {
				observer.apply(undefined, args);
			});
		}

		if (this.observers['*']) {
			this.observers['*'].forEach(function (observer) {
				var _ref;

				observer.apply(observer, (_ref = [event]).concat.apply(_ref, args));
			});
		}
	};

	return EventEmitter;
}();

exports.default = EventEmitter;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeString = makeString;
exports.copy = copy;
exports.setPath = setPath;
exports.pushPath = pushPath;
exports.getPath = getPath;
exports.deepExtend = deepExtend;
exports.regexEscape = regexEscape;
exports.escape = escape;
function makeString(object) {
  if (object == null) return '';
  return '' + object;
}

function copy(a, s, t) {
  a.forEach(function (m) {
    if (s[m]) t[m] = s[m];
  });
}

function getLastOfPath(object, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
  }

  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
  while (stack.length > 1) {
    if (!object) return {};

    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();
    object = object[key];
  }

  if (!object) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}

function setPath(object, path, newValue) {
  var _getLastOfPath = getLastOfPath(object, path, Object),
      obj = _getLastOfPath.obj,
      k = _getLastOfPath.k;

  obj[k] = newValue;
}

function pushPath(object, path, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path, Object),
      obj = _getLastOfPath2.obj,
      k = _getLastOfPath2.k;

  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}

function getPath(object, path) {
  var _getLastOfPath3 = getLastOfPath(object, path),
      obj = _getLastOfPath3.obj,
      k = _getLastOfPath3.k;

  if (!obj) return undefined;
  return obj[k];
}

function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop in target) {
      // If we reached a leaf string in target or source then replace with source or skip depending on the 'overwrite' switch
      if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
        if (overwrite) target[prop] = source[prop];
      } else {
        deepExtend(target[prop], source[prop], overwrite);
      }
    } else {
      target[prop] = source[prop];
    }
  }return target;
}

function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}

/* eslint-disable */
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': '&quot;',
  "'": '&#39;',
  "/": '&#x2F;'
};
/* eslint-enable */

function escape(data) {
  if (typeof data === 'string') {
    return data.replace(/[&<>"'\/]/g, function (s) {
      return _entityMap[s];
    });
  } else {
    return data;
  }
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(22),
    getRawTag = __webpack_require__(600),
    objectToString = __webpack_require__(625);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(28),
    isLength = __webpack_require__(43);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),
/* 17 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(564),
    baseKeys = __webpack_require__(76),
    isArrayLike = __webpack_require__(16);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var Collection = __webpack_require__(57);

var util = __webpack_require__(2);

function property(obj, name, value) {
  if (value !== null && value !== undefined) {
    util.property.apply(this, arguments);
  }
}

function memoizedProperty(obj, name) {
  if (!obj.constructor.prototype[name]) {
    util.memoizedProperty.apply(this, arguments);
  }
}

function Shape(shape, options, memberName) {
  options = options || {};

  property(this, 'shape', shape.shape);
  property(this, 'api', options.api, false);
  property(this, 'type', shape.type);
  property(this, 'enum', shape.enum);
  property(this, 'min', shape.min);
  property(this, 'max', shape.max);
  property(this, 'pattern', shape.pattern);
  property(this, 'location', shape.location || this.location || 'body');
  property(this, 'name', this.name || shape.xmlName || shape.queryName ||
    shape.locationName || memberName);
  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);
  property(this, 'isComposite', shape.isComposite || false);
  property(this, 'isShape', true, false);
  property(this, 'isQueryName', Boolean(shape.queryName), false);
  property(this, 'isLocationName', Boolean(shape.locationName), false);
  property(this, 'isIdempotent', shape.idempotencyToken === true);
  property(this, 'isJsonValue', shape.jsonvalue === true);
  property(this, 'isSensitive', shape.sensitive === true || shape.prototype && shape.prototype.sensitive === true);

  if (options.documentation) {
    property(this, 'documentation', shape.documentation);
    property(this, 'documentationUrl', shape.documentationUrl);
  }

  if (shape.xmlAttribute) {
    property(this, 'isXmlAttribute', shape.xmlAttribute || false);
  }

  // type conversion and parsing
  property(this, 'defaultValue', null);
  this.toWireFormat = function(value) {
    if (value === null || value === undefined) return '';
    return value;
  };
  this.toType = function(value) { return value; };
}

/**
 * @api private
 */
Shape.normalizedTypes = {
  character: 'string',
  double: 'float',
  long: 'integer',
  short: 'integer',
  biginteger: 'integer',
  bigdecimal: 'float',
  blob: 'binary'
};

/**
 * @api private
 */
Shape.types = {
  'structure': StructureShape,
  'list': ListShape,
  'map': MapShape,
  'boolean': BooleanShape,
  'timestamp': TimestampShape,
  'float': FloatShape,
  'integer': IntegerShape,
  'string': StringShape,
  'base64': Base64Shape,
  'binary': BinaryShape
};

Shape.resolve = function resolve(shape, options) {
  if (shape.shape) {
    var refShape = options.api.shapes[shape.shape];
    if (!refShape) {
      throw new Error('Cannot find shape reference: ' + shape.shape);
    }

    return refShape;
  } else {
    return null;
  }
};

Shape.create = function create(shape, options, memberName) {
  if (shape.isShape) return shape;

  var refShape = Shape.resolve(shape, options);
  if (refShape) {
    var filteredKeys = Object.keys(shape);
    if (!options.documentation) {
      filteredKeys = filteredKeys.filter(function(name) {
        return !name.match(/documentation/);
      });
    }

    // create an inline shape with extra members
    var InlineShape = function() {
      refShape.constructor.call(this, shape, options, memberName);
    };
    InlineShape.prototype = refShape;
    return new InlineShape();
  } else {
    // set type if not set
    if (!shape.type) {
      if (shape.members) shape.type = 'structure';
      else if (shape.member) shape.type = 'list';
      else if (shape.key) shape.type = 'map';
      else shape.type = 'string';
    }

    // normalize types
    var origType = shape.type;
    if (Shape.normalizedTypes[shape.type]) {
      shape.type = Shape.normalizedTypes[shape.type];
    }

    if (Shape.types[shape.type]) {
      return new Shape.types[shape.type](shape, options, memberName);
    } else {
      throw new Error('Unrecognized shape type: ' + origType);
    }
  }
};

function CompositeShape(shape) {
  Shape.apply(this, arguments);
  property(this, 'isComposite', true);

  if (shape.flattened) {
    property(this, 'flattened', shape.flattened || false);
  }
}

function StructureShape(shape, options) {
  var requiredMap = null, firstInit = !this.isShape;

  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return {}; });
    property(this, 'members', {});
    property(this, 'memberNames', []);
    property(this, 'required', []);
    property(this, 'isRequired', function() { return false; });
  }

  if (shape.members) {
    property(this, 'members', new Collection(shape.members, options, function(name, member) {
      return Shape.create(member, options, name);
    }));
    memoizedProperty(this, 'memberNames', function() {
      return shape.xmlOrder || Object.keys(shape.members);
    });
  }

  if (shape.required) {
    property(this, 'required', shape.required);
    property(this, 'isRequired', function(name) {
      if (!requiredMap) {
        requiredMap = {};
        for (var i = 0; i < shape.required.length; i++) {
          requiredMap[shape.required[i]] = true;
        }
      }

      return requiredMap[name];
    }, false, true);
  }

  property(this, 'resultWrapper', shape.resultWrapper || null);

  if (shape.payload) {
    property(this, 'payload', shape.payload);
  }

  if (typeof shape.xmlNamespace === 'string') {
    property(this, 'xmlNamespaceUri', shape.xmlNamespace);
  } else if (typeof shape.xmlNamespace === 'object') {
    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);
    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);
  }
}

function ListShape(shape, options) {
  var self = this, firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return []; });
  }

  if (shape.member) {
    memoizedProperty(this, 'member', function() {
      return Shape.create(shape.member, options);
    });
  }

  if (this.flattened) {
    var oldName = this.name;
    memoizedProperty(this, 'name', function() {
      return self.member.name || oldName;
    });
  }
}

function MapShape(shape, options) {
  var firstInit = !this.isShape;
  CompositeShape.apply(this, arguments);

  if (firstInit) {
    property(this, 'defaultValue', function() { return {}; });
    property(this, 'key', Shape.create({type: 'string'}, options));
    property(this, 'value', Shape.create({type: 'string'}, options));
  }

  if (shape.key) {
    memoizedProperty(this, 'key', function() {
      return Shape.create(shape.key, options);
    });
  }
  if (shape.value) {
    memoizedProperty(this, 'value', function() {
      return Shape.create(shape.value, options);
    });
  }
}

function TimestampShape(shape) {
  var self = this;
  Shape.apply(this, arguments);

  if (this.location === 'header') {
    property(this, 'timestampFormat', 'rfc822');
  } else if (shape.timestampFormat) {
    property(this, 'timestampFormat', shape.timestampFormat);
  } else if (!this.timestampFormat && this.api) {
    if (this.api.timestampFormat) {
      property(this, 'timestampFormat', this.api.timestampFormat);
    } else {
      switch (this.api.protocol) {
        case 'json':
        case 'rest-json':
          property(this, 'timestampFormat', 'unixTimestamp');
          break;
        case 'rest-xml':
        case 'query':
        case 'ec2':
          property(this, 'timestampFormat', 'iso8601');
          break;
      }
    }
  }

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    if (typeof value.toUTCString === 'function') return value;
    return typeof value === 'string' || typeof value === 'number' ?
           util.date.parseTimestamp(value) : null;
  };

  this.toWireFormat = function(value) {
    return util.date.format(value, self.timestampFormat);
  };
}

function StringShape() {
  Shape.apply(this, arguments);

  var nullLessProtocols = ['rest-xml', 'query', 'ec2'];
  this.toType = function(value) {
    value = this.api && nullLessProtocols.indexOf(this.api.protocol) > -1 ?
      value || '' : value;
    if (this.isJsonValue) {
      return JSON.parse(value);
    }

    return value && typeof value.toString === 'function' ?
      value.toString() : value;
  };

  this.toWireFormat = function(value) {
    return this.isJsonValue ? JSON.stringify(value) : value;
  };
}

function FloatShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    return parseFloat(value);
  };
  this.toWireFormat = this.toType;
}

function IntegerShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (value === null || value === undefined) return null;
    return parseInt(value, 10);
  };
  this.toWireFormat = this.toType;
}

function BinaryShape() {
  Shape.apply(this, arguments);
  this.toType = util.base64.decode;
  this.toWireFormat = util.base64.encode;
}

function Base64Shape() {
  BinaryShape.apply(this, arguments);
}

function BooleanShape() {
  Shape.apply(this, arguments);

  this.toType = function(value) {
    if (typeof value === 'boolean') return value;
    if (value === null || value === undefined) return null;
    return value === 'true';
  };
}

/**
 * @api private
 */
Shape.shapes = {
  StructureShape: StructureShape,
  ListShape: ListShape,
  MapShape: MapShape,
  StringShape: StringShape,
  BooleanShape: BooleanShape,
  Base64Shape: Base64Shape
};

module.exports = Shape;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function populateMethod(req) {
  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
}

function generateURI(endpointPath, operationPath, input, params) {
  var uri = [endpointPath, operationPath].join('/');
  uri = uri.replace(/\/+/g, '/');

  var queryString = {}, queryStringSet = false;
  util.each(input.members, function (name, member) {
    var paramValue = params[name];
    if (paramValue === null || paramValue === undefined) return;
    if (member.location === 'uri') {
      var regex = new RegExp('\\{' + member.name + '(\\+)?\\}');
      uri = uri.replace(regex, function(_, plus) {
        var fn = plus ? util.uriEscapePath : util.uriEscape;
        return fn(String(paramValue));
      });
    } else if (member.location === 'querystring') {
      queryStringSet = true;

      if (member.type === 'list') {
        queryString[member.name] = paramValue.map(function(val) {
          return util.uriEscape(String(val));
        });
      } else if (member.type === 'map') {
        util.each(paramValue, function(key, value) {
          if (Array.isArray(value)) {
            queryString[key] = value.map(function(val) {
              return util.uriEscape(String(val));
            });
          } else {
            queryString[key] = util.uriEscape(String(value));
          }
        });
      } else {
        queryString[member.name] = util.uriEscape(String(paramValue));
      }
    }
  });

  if (queryStringSet) {
    uri += (uri.indexOf('?') >= 0 ? '&' : '?');
    var parts = [];
    util.arrayEach(Object.keys(queryString).sort(), function(key) {
      if (!Array.isArray(queryString[key])) {
        queryString[key] = [queryString[key]];
      }
      for (var i = 0; i < queryString[key].length; i++) {
        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);
      }
    });
    uri += parts.join('&');
  }

  return uri;
}

function populateURI(req) {
  var operation = req.service.api.operations[req.operation];
  var input = operation.input;

  var uri = generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
  req.httpRequest.path = uri;
}

function populateHeaders(req) {
  var operation = req.service.api.operations[req.operation];
  util.each(operation.input.members, function (name, member) {
    var value = req.params[name];
    if (value === null || value === undefined) return;

    if (member.location === 'headers' && member.type === 'map') {
      util.each(value, function(key, memberValue) {
        req.httpRequest.headers[member.name + key] = memberValue;
      });
    } else if (member.location === 'header') {
      value = member.toWireFormat(value).toString();
      if (member.isJsonValue) {
        value = util.base64.encode(value);
      }
      req.httpRequest.headers[member.name] = value;
    }
  });
}

function buildRequest(req) {
  populateMethod(req);
  populateURI(req);
  populateHeaders(req);
}

function extractError() {
}

function extractData(resp) {
  var req = resp.request;
  var data = {};
  var r = resp.httpResponse;
  var operation = req.service.api.operations[req.operation];
  var output = operation.output;

  // normalize headers names to lower-cased keys for matching
  var headers = {};
  util.each(r.headers, function (k, v) {
    headers[k.toLowerCase()] = v;
  });

  util.each(output.members, function(name, member) {
    var header = (member.name || name).toLowerCase();
    if (member.location === 'headers' && member.type === 'map') {
      data[name] = {};
      var location = member.isLocationName ? member.name : '';
      var pattern = new RegExp('^' + location + '(.+)', 'i');
      util.each(r.headers, function (k, v) {
        var result = k.match(pattern);
        if (result !== null) {
          data[name][result[1]] = v;
        }
      });
    } else if (member.location === 'header') {
      if (headers[header] !== undefined) {
        var value = member.isJsonValue ?
          util.base64.decode(headers[header]) :
          headers[header];
        data[name] = member.toType(value);
      }
    } else if (member.location === 'statusCode') {
      data[name] = parseInt(r.statusCode, 10);
    }
  });

  resp.data = data;
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData,
  generateURI: generateURI
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(611),
    listCacheDelete = __webpack_require__(612),
    listCacheGet = __webpack_require__(613),
    listCacheHas = __webpack_require__(614),
    listCacheSet = __webpack_require__(615);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(6);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(27);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(609);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(8);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(44);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(15),
    isObject = __webpack_require__(5);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * The endpoint that a service will talk to, for example,
 * `'https://ec2.ap-southeast-1.amazonaws.com'`. If
 * you need to override an endpoint for a service, you can
 * set the endpoint on a service by passing the endpoint
 * object with the `endpoint` option key:
 *
 * ```javascript
 * var ep = new AWS.Endpoint('awsproxy.example.com');
 * var s3 = new AWS.S3({endpoint: ep});
 * s3.service.endpoint.hostname == 'awsproxy.example.com'
 * ```
 *
 * Note that if you do not specify a protocol, the protocol will
 * be selected based on your current {AWS.config} configuration.
 *
 * @!attribute protocol
 *   @return [String] the protocol (http or https) of the endpoint
 *     URL
 * @!attribute hostname
 *   @return [String] the host portion of the endpoint, e.g.,
 *     example.com
 * @!attribute host
 *   @return [String] the host portion of the endpoint including
 *     the port, e.g., example.com:80
 * @!attribute port
 *   @return [Integer] the port of the endpoint
 * @!attribute href
 *   @return [String] the full URL of the endpoint
 */
AWS.Endpoint = inherit({

  /**
   * @overload Endpoint(endpoint)
   *   Constructs a new endpoint given an endpoint URL. If the
   *   URL omits a protocol (http or https), the default protocol
   *   set in the global {AWS.config} will be used.
   *   @param endpoint [String] the URL to construct an endpoint from
   */
  constructor: function Endpoint(endpoint, config) {
    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);

    if (typeof endpoint === 'undefined' || endpoint === null) {
      throw new Error('Invalid endpoint: ' + endpoint);
    } else if (typeof endpoint !== 'string') {
      return AWS.util.copy(endpoint);
    }

    if (!endpoint.match(/^http/)) {
      var useSSL = config && config.sslEnabled !== undefined ?
        config.sslEnabled : AWS.config.sslEnabled;
      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
    }

    AWS.util.update(this, AWS.util.urlParse(endpoint));

    // Ensure the port property is set as an integer
    if (this.port) {
      this.port = parseInt(this.port, 10);
    } else {
      this.port = this.protocol === 'https:' ? 443 : 80;
    }
  }

});

/**
 * The low level HTTP request object, encapsulating all HTTP header
 * and body data sent by a service request.
 *
 * @!attribute method
 *   @return [String] the HTTP method of the request
 * @!attribute path
 *   @return [String] the path portion of the URI, e.g.,
 *     "/list/?start=5&num=10"
 * @!attribute headers
 *   @return [map<String,String>]
 *     a map of header keys and their respective values
 * @!attribute body
 *   @return [String] the request body payload
 * @!attribute endpoint
 *   @return [AWS.Endpoint] the endpoint for the request
 * @!attribute region
 *   @api private
 *   @return [String] the region, for signing purposes only.
 */
AWS.HttpRequest = inherit({

  /**
   * @api private
   */
  constructor: function HttpRequest(endpoint, region) {
    endpoint = new AWS.Endpoint(endpoint);
    this.method = 'POST';
    this.path = endpoint.path || '/';
    this.headers = {};
    this.body = '';
    this.endpoint = endpoint;
    this.region = region;
    this._userAgent = '';
    this.setUserAgent();
  },

  /**
   * @api private
   */
  setUserAgent: function setUserAgent() {
    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();
  },

  getUserAgentHeaderName: function getUserAgentHeaderName() {
    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';
    return prefix + 'User-Agent';
  },

  /**
   * @api private
   */
  appendToUserAgent: function appendToUserAgent(agentPartial) {
    if (typeof agentPartial === 'string' && agentPartial) {
      this._userAgent += ' ' + agentPartial;
    }
    this.headers[this.getUserAgentHeaderName()] = this._userAgent;
  },

  /**
   * @api private
   */
  getUserAgent: function getUserAgent() {
    return this._userAgent;
  },

  /**
   * @return [String] the part of the {path} excluding the
   *   query string
   */
  pathname: function pathname() {
    return this.path.split('?', 1)[0];
  },

  /**
   * @return [String] the query string portion of the {path}
   */
  search: function search() {
    var query = this.path.split('?', 2)[1];
    if (query) {
      query = AWS.util.queryStringParse(query);
      return AWS.util.queryParamsToString(query);
    }
    return '';
  }

});

/**
 * The low level HTTP response object, encapsulating all HTTP header
 * and body data returned from the request.
 *
 * @!attribute statusCode
 *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)
 * @!attribute headers
 *   @return [map<String,String>]
 *      a map of response header keys and their respective values
 * @!attribute body
 *   @return [String] the response body payload
 * @!attribute [r] streaming
 *   @return [Boolean] whether this response is being streamed at a low-level.
 *     Defaults to `false` (buffered reads). Do not modify this manually, use
 *     {createUnbufferedStream} to convert the stream to unbuffered mode
 *     instead.
 */
AWS.HttpResponse = inherit({

  /**
   * @api private
   */
  constructor: function HttpResponse() {
    this.statusCode = undefined;
    this.headers = {};
    this.body = undefined;
    this.streaming = false;
    this.stream = null;
  },

  /**
   * Disables buffering on the HTTP response and returns the stream for reading.
   * @return [Stream, XMLHttpRequest, null] the underlying stream object.
   *   Use this object to directly read data off of the stream.
   * @note This object is only available after the {AWS.Request~httpHeaders}
   *   event has fired. This method must be called prior to
   *   {AWS.Request~httpData}.
   * @example Taking control of a stream
   *   request.on('httpHeaders', function(statusCode, headers) {
   *     if (statusCode < 300) {
   *       if (headers.etag === 'xyz') {
   *         // pipe the stream, disabling buffering
   *         var stream = this.response.httpResponse.createUnbufferedStream();
   *         stream.pipe(process.stdout);
   *       } else { // abort this request and set a better error message
   *         this.abort();
   *         this.response.error = new Error('Invalid ETag');
   *       }
   *     }
   *   }).send(console.log);
   */
  createUnbufferedStream: function createUnbufferedStream() {
    this.streaming = true;
    return this.stream;
  }
});


AWS.HttpClient = inherit({});

/**
 * @api private
 */
AWS.HttpClient.getInstance = function getInstance() {
  if (this.singleton === undefined) {
    this.singleton = new this();
  }
  return this.singleton;
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function JsonBuilder() { }

JsonBuilder.prototype.build = function(value, shape) {
  return JSON.stringify(translate(value, shape));
};

function translate(value, shape) {
  if (!shape || value === undefined || value === null) return undefined;

  switch (shape.type) {
    case 'structure': return translateStructure(value, shape);
    case 'map': return translateMap(value, shape);
    case 'list': return translateList(value, shape);
    default: return translateScalar(value, shape);
  }
}

function translateStructure(structure, shape) {
  var struct = {};
  util.each(structure, function(name, value) {
    var memberShape = shape.members[name];
    if (memberShape) {
      if (memberShape.location !== 'body') return;
      var locationName = memberShape.isLocationName ? memberShape.name : name;
      var result = translate(value, memberShape);
      if (result !== undefined) struct[locationName] = result;
    }
  });
  return struct;
}

function translateList(list, shape) {
  var out = [];
  util.arrayEach(list, function(value) {
    var result = translate(value, shape.member);
    if (result !== undefined) out.push(result);
  });
  return out;
}

function translateMap(map, shape) {
  var out = {};
  util.each(map, function(key, value) {
    var result = translate(value, shape.value);
    if (result !== undefined) out[key] = result;
  });
  return out;
}

function translateScalar(value, shape) {
  return shape.toWireFormat(value);
}

module.exports = JsonBuilder;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function JsonParser() { }

JsonParser.prototype.parse = function(value, shape) {
  return translate(JSON.parse(value), shape);
};

function translate(value, shape) {
  if (!shape || value === undefined) return undefined;

  switch (shape.type) {
    case 'structure': return translateStructure(value, shape);
    case 'map': return translateMap(value, shape);
    case 'list': return translateList(value, shape);
    default: return translateScalar(value, shape);
  }
}

function translateStructure(structure, shape) {
  if (structure == null) return undefined;

  var struct = {};
  var shapeMembers = shape.members;
  util.each(shapeMembers, function(name, memberShape) {
    var locationName = memberShape.isLocationName ? memberShape.name : name;
    if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
      var value = structure[locationName];
      var result = translate(value, memberShape);
      if (result !== undefined) struct[name] = result;
    }
  });
  return struct;
}

function translateList(list, shape) {
  if (list == null) return undefined;

  var out = [];
  util.arrayEach(list, function(value) {
    var result = translate(value, shape.member);
    if (result === undefined) out.push(null);
    else out.push(result);
  });
  return out;
}

function translateMap(map, shape) {
  if (map == null) return undefined;

  var out = {};
  util.each(map, function(key, value) {
    var result = translate(value, shape.value);
    if (result === undefined) out[key] = null;
    else out[key] = result;
  });
  return out;
}

function translateScalar(value, shape) {
  return shape.toType(value);
}

module.exports = JsonParser;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var JsonBuilder = __webpack_require__(30);
var JsonParser = __webpack_require__(31);

function buildRequest(req) {
  var httpRequest = req.httpRequest;
  var api = req.service.api;
  var target = api.targetPrefix + '.' + api.operations[req.operation].name;
  var version = api.jsonVersion || '1.0';
  var input = api.operations[req.operation].input;
  var builder = new JsonBuilder();

  if (version === 1) version = '1.0';
  httpRequest.body = builder.build(req.params || {}, input);
  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;
  httpRequest.headers['X-Amz-Target'] = target;
}

function extractError(resp) {
  var error = {};
  var httpResponse = resp.httpResponse;

  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';
  if (typeof error.code === 'string') {
    error.code = error.code.split(':')[0];
  }

  if (httpResponse.body.length > 0) {
    try {
      var e = JSON.parse(httpResponse.body.toString());
      if (e.__type || e.code) {
        error.code = (e.__type || e.code).split('#').pop();
      }
      if (error.code === 'RequestEntityTooLarge') {
        error.message = 'Request body must be less than 1 MB';
      } else {
        error.message = (e.message || e.Message || null);
      }
    } catch (e) {
      error.statusCode = httpResponse.statusCode;
      error.message = httpResponse.statusMessage;
    }
  } else {
    error.statusCode = httpResponse.statusCode;
    error.message = httpResponse.statusCode.toString();
  }

  resp.error = util.error(new Error(), error);
}

function extractData(resp) {
  var body = resp.httpResponse.body.toString() || '{}';
  if (resp.request.service.config.convertResponseTypes === false) {
    resp.data = JSON.parse(body);
  } else {
    var operation = resp.request.service.api.operations[resp.request.operation];
    var shape = operation.output || {};
    var parser = new JsonParser();
    resp.data = parser.parse(body, shape);
  }
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isVowel = isVowel;
exports.arpaToIpa = arpaToIpa;
var ipa = exports.ipa = {};
ipa.AA = "ɑ";
ipa.AE = "æ";
ipa.AH = "ʌ";
ipa.AO = "ɔ";
ipa.AW = "aʊ";
ipa.AY = "aɪ";
ipa.B = "b";
ipa.CH = "tʃ";
ipa.D = "d";
ipa.DH = "ð";
ipa.EH = "ɛ";
ipa.ER = "ɝ";
ipa.EY = "eɪ";
ipa.F = "f";
ipa.G = "ɡ";
ipa.HH = "h";
ipa.IH = "ɪ";
ipa.IY = "i";
ipa.JH = "dʒ";
ipa.K = "k";
ipa.L = "l";
ipa.M = "m";
ipa.N = "n";
ipa.NG = "ŋ";
ipa.OW = "oʊ";
ipa.OY = "ɔɪ";
ipa.P = "p";
ipa.R = "ɹ";
ipa.S = "s";
ipa.SH = "ʃ";
ipa.T = "t";
ipa.TH = "θ";
ipa.UH = "ʊ";
ipa.UW = "u";
ipa.V = "v";
ipa.W = "w";
ipa.Y = "j";
ipa.Z = "z";
ipa.ZH = "ʒ";

var vowelList = ["AA", "AE", "AH", "AO", "AW", "AY", "EH", "ER", "EY", "IH", "IY", "OW", "OY", "UH", "UW"];
var vowelPhonemes = exports.vowelPhonemes = {};
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = vowelList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var vowel = _step.value;

    vowelPhonemes[vowel] = true;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

function isVowel(phoneme) {
  if (vowelPhonemes[phoneme.substring(0, 2)]) {
    return true;
  } else {
    return false;
  }
}

function arpaToIpa(pron) {
  var ipaPron = [];
  for (var i = 0; i < pron.length; i++) {
    if (vowelPhonemes[pron[i].substring(0, 2)]) {
      ipaPron[i] = ipa[pron[i].substring(0, 2)];
      if (pron[i].charAt(2) == "1") {
        ipaPron[i] = "ˈ" + ipaPron[i];
      } else if (pron[i].charAt(2) == "2") {
        ipaPron[i] = "ˌ";
      }
    } else {
      ipaPron[i] = ipa[pron[i]];
    }
  }
  var ipaString = ipaPron.join("");
  return ipaString;
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

(function(exports) {
  "use strict";

  function isArray(obj) {
    if (obj !== null) {
      return Object.prototype.toString.call(obj) === "[object Array]";
    } else {
      return false;
    }
  }

  function isObject(obj) {
    if (obj !== null) {
      return Object.prototype.toString.call(obj) === "[object Object]";
    } else {
      return false;
    }
  }

  function strictDeepEqual(first, second) {
    // Check the scalar case first.
    if (first === second) {
      return true;
    }

    // Check if they are the same type.
    var firstType = Object.prototype.toString.call(first);
    if (firstType !== Object.prototype.toString.call(second)) {
      return false;
    }
    // We know that first and second have the same type so we can just check the
    // first type from now on.
    if (isArray(first) === true) {
      // Short circuit if they're not the same length;
      if (first.length !== second.length) {
        return false;
      }
      for (var i = 0; i < first.length; i++) {
        if (strictDeepEqual(first[i], second[i]) === false) {
          return false;
        }
      }
      return true;
    }
    if (isObject(first) === true) {
      // An object is equal if it has the same key/value pairs.
      var keysSeen = {};
      for (var key in first) {
        if (hasOwnProperty.call(first, key)) {
          if (strictDeepEqual(first[key], second[key]) === false) {
            return false;
          }
          keysSeen[key] = true;
        }
      }
      // Now check that there aren't any keys in second that weren't
      // in first.
      for (var key2 in second) {
        if (hasOwnProperty.call(second, key2)) {
          if (keysSeen[key2] !== true) {
            return false;
          }
        }
      }
      return true;
    }
    return false;
  }

  function isFalse(obj) {
    // From the spec:
    // A false value corresponds to the following values:
    // Empty list
    // Empty object
    // Empty string
    // False boolean
    // null value

    // First check the scalar values.
    if (obj === "" || obj === false || obj === null) {
        return true;
    } else if (isArray(obj) && obj.length === 0) {
        // Check for an empty array.
        return true;
    } else if (isObject(obj)) {
        // Check for an empty object.
        for (var key in obj) {
            // If there are any keys, then
            // the object is not empty so the object
            // is not false.
            if (obj.hasOwnProperty(key)) {
              return false;
            }
        }
        return true;
    } else {
        return false;
    }
  }

  function objValues(obj) {
    var keys = Object.keys(obj);
    var values = [];
    for (var i = 0; i < keys.length; i++) {
      values.push(obj[keys[i]]);
    }
    return values;
  }

  function merge(a, b) {
      var merged = {};
      for (var key in a) {
          merged[key] = a[key];
      }
      for (var key2 in b) {
          merged[key2] = b[key2];
      }
      return merged;
  }

  var trimLeft;
  if (typeof String.prototype.trimLeft === "function") {
    trimLeft = function(str) {
      return str.trimLeft();
    };
  } else {
    trimLeft = function(str) {
      return str.match(/^\s*(.*)/)[1];
    };
  }

  // Type constants used to define functions.
  var TYPE_NUMBER = 0;
  var TYPE_ANY = 1;
  var TYPE_STRING = 2;
  var TYPE_ARRAY = 3;
  var TYPE_OBJECT = 4;
  var TYPE_BOOLEAN = 5;
  var TYPE_EXPREF = 6;
  var TYPE_NULL = 7;
  var TYPE_ARRAY_NUMBER = 8;
  var TYPE_ARRAY_STRING = 9;

  var TOK_EOF = "EOF";
  var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
  var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
  var TOK_RBRACKET = "Rbracket";
  var TOK_RPAREN = "Rparen";
  var TOK_COMMA = "Comma";
  var TOK_COLON = "Colon";
  var TOK_RBRACE = "Rbrace";
  var TOK_NUMBER = "Number";
  var TOK_CURRENT = "Current";
  var TOK_EXPREF = "Expref";
  var TOK_PIPE = "Pipe";
  var TOK_OR = "Or";
  var TOK_AND = "And";
  var TOK_EQ = "EQ";
  var TOK_GT = "GT";
  var TOK_LT = "LT";
  var TOK_GTE = "GTE";
  var TOK_LTE = "LTE";
  var TOK_NE = "NE";
  var TOK_FLATTEN = "Flatten";
  var TOK_STAR = "Star";
  var TOK_FILTER = "Filter";
  var TOK_DOT = "Dot";
  var TOK_NOT = "Not";
  var TOK_LBRACE = "Lbrace";
  var TOK_LBRACKET = "Lbracket";
  var TOK_LPAREN= "Lparen";
  var TOK_LITERAL= "Literal";

  // The "&", "[", "<", ">" tokens
  // are not in basicToken because
  // there are two token variants
  // ("&&", "[?", "<=", ">=").  This is specially handled
  // below.

  var basicTokens = {
    ".": TOK_DOT,
    "*": TOK_STAR,
    ",": TOK_COMMA,
    ":": TOK_COLON,
    "{": TOK_LBRACE,
    "}": TOK_RBRACE,
    "]": TOK_RBRACKET,
    "(": TOK_LPAREN,
    ")": TOK_RPAREN,
    "@": TOK_CURRENT
  };

  var operatorStartToken = {
      "<": true,
      ">": true,
      "=": true,
      "!": true
  };

  var skipChars = {
      " ": true,
      "\t": true,
      "\n": true
  };


  function isAlpha(ch) {
      return (ch >= "a" && ch <= "z") ||
             (ch >= "A" && ch <= "Z") ||
             ch === "_";
  }

  function isNum(ch) {
      return (ch >= "0" && ch <= "9") ||
             ch === "-";
  }
  function isAlphaNum(ch) {
      return (ch >= "a" && ch <= "z") ||
             (ch >= "A" && ch <= "Z") ||
             (ch >= "0" && ch <= "9") ||
             ch === "_";
  }

  function Lexer() {
  }
  Lexer.prototype = {
      tokenize: function(stream) {
          var tokens = [];
          this._current = 0;
          var start;
          var identifier;
          var token;
          while (this._current < stream.length) {
              if (isAlpha(stream[this._current])) {
                  start = this._current;
                  identifier = this._consumeUnquotedIdentifier(stream);
                  tokens.push({type: TOK_UNQUOTEDIDENTIFIER,
                               value: identifier,
                               start: start});
              } else if (basicTokens[stream[this._current]] !== undefined) {
                  tokens.push({type: basicTokens[stream[this._current]],
                              value: stream[this._current],
                              start: this._current});
                  this._current++;
              } else if (isNum(stream[this._current])) {
                  token = this._consumeNumber(stream);
                  tokens.push(token);
              } else if (stream[this._current] === "[") {
                  // No need to increment this._current.  This happens
                  // in _consumeLBracket
                  token = this._consumeLBracket(stream);
                  tokens.push(token);
              } else if (stream[this._current] === "\"") {
                  start = this._current;
                  identifier = this._consumeQuotedIdentifier(stream);
                  tokens.push({type: TOK_QUOTEDIDENTIFIER,
                               value: identifier,
                               start: start});
              } else if (stream[this._current] === "'") {
                  start = this._current;
                  identifier = this._consumeRawStringLiteral(stream);
                  tokens.push({type: TOK_LITERAL,
                               value: identifier,
                               start: start});
              } else if (stream[this._current] === "`") {
                  start = this._current;
                  var literal = this._consumeLiteral(stream);
                  tokens.push({type: TOK_LITERAL,
                               value: literal,
                               start: start});
              } else if (operatorStartToken[stream[this._current]] !== undefined) {
                  tokens.push(this._consumeOperator(stream));
              } else if (skipChars[stream[this._current]] !== undefined) {
                  // Ignore whitespace.
                  this._current++;
              } else if (stream[this._current] === "&") {
                  start = this._current;
                  this._current++;
                  if (stream[this._current] === "&") {
                      this._current++;
                      tokens.push({type: TOK_AND, value: "&&", start: start});
                  } else {
                      tokens.push({type: TOK_EXPREF, value: "&", start: start});
                  }
              } else if (stream[this._current] === "|") {
                  start = this._current;
                  this._current++;
                  if (stream[this._current] === "|") {
                      this._current++;
                      tokens.push({type: TOK_OR, value: "||", start: start});
                  } else {
                      tokens.push({type: TOK_PIPE, value: "|", start: start});
                  }
              } else {
                  var error = new Error("Unknown character:" + stream[this._current]);
                  error.name = "LexerError";
                  throw error;
              }
          }
          return tokens;
      },

      _consumeUnquotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          while (this._current < stream.length && isAlphaNum(stream[this._current])) {
              this._current++;
          }
          return stream.slice(start, this._current);
      },

      _consumeQuotedIdentifier: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== "\"" && this._current < maxLength) {
              // You can escape a double quote and you can escape an escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "\"")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          this._current++;
          return JSON.parse(stream.slice(start, this._current));
      },

      _consumeRawStringLiteral: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (stream[this._current] !== "'" && this._current < maxLength) {
              // You can escape a single quote and you can escape an escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "'")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          this._current++;
          var literal = stream.slice(start + 1, this._current - 1);
          return literal.replace("\\'", "'");
      },

      _consumeNumber: function(stream) {
          var start = this._current;
          this._current++;
          var maxLength = stream.length;
          while (isNum(stream[this._current]) && this._current < maxLength) {
              this._current++;
          }
          var value = parseInt(stream.slice(start, this._current));
          return {type: TOK_NUMBER, value: value, start: start};
      },

      _consumeLBracket: function(stream) {
          var start = this._current;
          this._current++;
          if (stream[this._current] === "?") {
              this._current++;
              return {type: TOK_FILTER, value: "[?", start: start};
          } else if (stream[this._current] === "]") {
              this._current++;
              return {type: TOK_FLATTEN, value: "[]", start: start};
          } else {
              return {type: TOK_LBRACKET, value: "[", start: start};
          }
      },

      _consumeOperator: function(stream) {
          var start = this._current;
          var startingChar = stream[start];
          this._current++;
          if (startingChar === "!") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_NE, value: "!=", start: start};
              } else {
                return {type: TOK_NOT, value: "!", start: start};
              }
          } else if (startingChar === "<") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_LTE, value: "<=", start: start};
              } else {
                  return {type: TOK_LT, value: "<", start: start};
              }
          } else if (startingChar === ">") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_GTE, value: ">=", start: start};
              } else {
                  return {type: TOK_GT, value: ">", start: start};
              }
          } else if (startingChar === "=") {
              if (stream[this._current] === "=") {
                  this._current++;
                  return {type: TOK_EQ, value: "==", start: start};
              }
          }
      },

      _consumeLiteral: function(stream) {
          this._current++;
          var start = this._current;
          var maxLength = stream.length;
          var literal;
          while(stream[this._current] !== "`" && this._current < maxLength) {
              // You can escape a literal char or you can escape the escape.
              var current = this._current;
              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
                                               stream[current + 1] === "`")) {
                  current += 2;
              } else {
                  current++;
              }
              this._current = current;
          }
          var literalString = trimLeft(stream.slice(start, this._current));
          literalString = literalString.replace("\\`", "`");
          if (this._looksLikeJSON(literalString)) {
              literal = JSON.parse(literalString);
          } else {
              // Try to JSON parse it as "<literal>"
              literal = JSON.parse("\"" + literalString + "\"");
          }
          // +1 gets us to the ending "`", +1 to move on to the next char.
          this._current++;
          return literal;
      },

      _looksLikeJSON: function(literalString) {
          var startingChars = "[{\"";
          var jsonLiterals = ["true", "false", "null"];
          var numberLooking = "-0123456789";

          if (literalString === "") {
              return false;
          } else if (startingChars.indexOf(literalString[0]) >= 0) {
              return true;
          } else if (jsonLiterals.indexOf(literalString) >= 0) {
              return true;
          } else if (numberLooking.indexOf(literalString[0]) >= 0) {
              try {
                  JSON.parse(literalString);
                  return true;
              } catch (ex) {
                  return false;
              }
          } else {
              return false;
          }
      }
  };

      var bindingPower = {};
      bindingPower[TOK_EOF] = 0;
      bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
      bindingPower[TOK_RBRACKET] = 0;
      bindingPower[TOK_RPAREN] = 0;
      bindingPower[TOK_COMMA] = 0;
      bindingPower[TOK_RBRACE] = 0;
      bindingPower[TOK_NUMBER] = 0;
      bindingPower[TOK_CURRENT] = 0;
      bindingPower[TOK_EXPREF] = 0;
      bindingPower[TOK_PIPE] = 1;
      bindingPower[TOK_OR] = 2;
      bindingPower[TOK_AND] = 3;
      bindingPower[TOK_EQ] = 5;
      bindingPower[TOK_GT] = 5;
      bindingPower[TOK_LT] = 5;
      bindingPower[TOK_GTE] = 5;
      bindingPower[TOK_LTE] = 5;
      bindingPower[TOK_NE] = 5;
      bindingPower[TOK_FLATTEN] = 9;
      bindingPower[TOK_STAR] = 20;
      bindingPower[TOK_FILTER] = 21;
      bindingPower[TOK_DOT] = 40;
      bindingPower[TOK_NOT] = 45;
      bindingPower[TOK_LBRACE] = 50;
      bindingPower[TOK_LBRACKET] = 55;
      bindingPower[TOK_LPAREN] = 60;

  function Parser() {
  }

  Parser.prototype = {
      parse: function(expression) {
          this._loadTokens(expression);
          this.index = 0;
          var ast = this.expression(0);
          if (this._lookahead(0) !== TOK_EOF) {
              var t = this._lookaheadToken(0);
              var error = new Error(
                  "Unexpected token type: " + t.type + ", value: " + t.value);
              error.name = "ParserError";
              throw error;
          }
          return ast;
      },

      _loadTokens: function(expression) {
          var lexer = new Lexer();
          var tokens = lexer.tokenize(expression);
          tokens.push({type: TOK_EOF, value: "", start: expression.length});
          this.tokens = tokens;
      },

      expression: function(rbp) {
          var leftToken = this._lookaheadToken(0);
          this._advance();
          var left = this.nud(leftToken);
          var currentToken = this._lookahead(0);
          while (rbp < bindingPower[currentToken]) {
              this._advance();
              left = this.led(currentToken, left);
              currentToken = this._lookahead(0);
          }
          return left;
      },

      _lookahead: function(number) {
          return this.tokens[this.index + number].type;
      },

      _lookaheadToken: function(number) {
          return this.tokens[this.index + number];
      },

      _advance: function() {
          this.index++;
      },

      nud: function(token) {
        var left;
        var right;
        var expression;
        switch (token.type) {
          case TOK_LITERAL:
            return {type: "Literal", value: token.value};
          case TOK_UNQUOTEDIDENTIFIER:
            return {type: "Field", name: token.value};
          case TOK_QUOTEDIDENTIFIER:
            var node = {type: "Field", name: token.value};
            if (this._lookahead(0) === TOK_LPAREN) {
                throw new Error("Quoted identifier not allowed for function names.");
            } else {
                return node;
            }
            break;
          case TOK_NOT:
            right = this.expression(bindingPower.Not);
            return {type: "NotExpression", children: [right]};
          case TOK_STAR:
            left = {type: "Identity"};
            right = null;
            if (this._lookahead(0) === TOK_RBRACKET) {
                // This can happen in a multiselect,
                // [a, b, *]
                right = {type: "Identity"};
            } else {
                right = this._parseProjectionRHS(bindingPower.Star);
            }
            return {type: "ValueProjection", children: [left, right]};
          case TOK_FILTER:
            return this.led(token.type, {type: "Identity"});
          case TOK_LBRACE:
            return this._parseMultiselectHash();
          case TOK_FLATTEN:
            left = {type: TOK_FLATTEN, children: [{type: "Identity"}]};
            right = this._parseProjectionRHS(bindingPower.Flatten);
            return {type: "Projection", children: [left, right]};
          case TOK_LBRACKET:
            if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice({type: "Identity"}, right);
            } else if (this._lookahead(0) === TOK_STAR &&
                       this._lookahead(1) === TOK_RBRACKET) {
                this._advance();
                this._advance();
                right = this._parseProjectionRHS(bindingPower.Star);
                return {type: "Projection",
                        children: [{type: "Identity"}, right]};
            } else {
                return this._parseMultiselectList();
            }
            break;
          case TOK_CURRENT:
            return {type: TOK_CURRENT};
          case TOK_EXPREF:
            expression = this.expression(bindingPower.Expref);
            return {type: "ExpressionReference", children: [expression]};
          case TOK_LPAREN:
            var args = [];
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = {type: TOK_CURRENT};
                this._advance();
              } else {
                expression = this.expression(0);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            return args[0];
          default:
            this._errorToken(token);
        }
      },

      led: function(tokenName, left) {
        var right;
        switch(tokenName) {
          case TOK_DOT:
            var rbp = bindingPower.Dot;
            if (this._lookahead(0) !== TOK_STAR) {
                right = this._parseDotRHS(rbp);
                return {type: "Subexpression", children: [left, right]};
            } else {
                // Creating a projection.
                this._advance();
                right = this._parseProjectionRHS(rbp);
                return {type: "ValueProjection", children: [left, right]};
            }
            break;
          case TOK_PIPE:
            right = this.expression(bindingPower.Pipe);
            return {type: TOK_PIPE, children: [left, right]};
          case TOK_OR:
            right = this.expression(bindingPower.Or);
            return {type: "OrExpression", children: [left, right]};
          case TOK_AND:
            right = this.expression(bindingPower.And);
            return {type: "AndExpression", children: [left, right]};
          case TOK_LPAREN:
            var name = left.name;
            var args = [];
            var expression, node;
            while (this._lookahead(0) !== TOK_RPAREN) {
              if (this._lookahead(0) === TOK_CURRENT) {
                expression = {type: TOK_CURRENT};
                this._advance();
              } else {
                expression = this.expression(0);
              }
              if (this._lookahead(0) === TOK_COMMA) {
                this._match(TOK_COMMA);
              }
              args.push(expression);
            }
            this._match(TOK_RPAREN);
            node = {type: "Function", name: name, children: args};
            return node;
          case TOK_FILTER:
            var condition = this.expression(0);
            this._match(TOK_RBRACKET);
            if (this._lookahead(0) === TOK_FLATTEN) {
              right = {type: "Identity"};
            } else {
              right = this._parseProjectionRHS(bindingPower.Filter);
            }
            return {type: "FilterProjection", children: [left, right, condition]};
          case TOK_FLATTEN:
            var leftNode = {type: TOK_FLATTEN, children: [left]};
            var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
            return {type: "Projection", children: [leftNode, rightNode]};
          case TOK_EQ:
          case TOK_NE:
          case TOK_GT:
          case TOK_GTE:
          case TOK_LT:
          case TOK_LTE:
            return this._parseComparator(left, tokenName);
          case TOK_LBRACKET:
            var token = this._lookaheadToken(0);
            if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
                right = this._parseIndexExpression();
                return this._projectIfSlice(left, right);
            } else {
                this._match(TOK_STAR);
                this._match(TOK_RBRACKET);
                right = this._parseProjectionRHS(bindingPower.Star);
                return {type: "Projection", children: [left, right]};
            }
            break;
          default:
            this._errorToken(this._lookaheadToken(0));
        }
      },

      _match: function(tokenType) {
          if (this._lookahead(0) === tokenType) {
              this._advance();
          } else {
              var t = this._lookaheadToken(0);
              var error = new Error("Expected " + tokenType + ", got: " + t.type);
              error.name = "ParserError";
              throw error;
          }
      },

      _errorToken: function(token) {
          var error = new Error("Invalid token (" +
                                token.type + "): \"" +
                                token.value + "\"");
          error.name = "ParserError";
          throw error;
      },


      _parseIndexExpression: function() {
          if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
              return this._parseSliceExpression();
          } else {
              var node = {
                  type: "Index",
                  value: this._lookaheadToken(0).value};
              this._advance();
              this._match(TOK_RBRACKET);
              return node;
          }
      },

      _projectIfSlice: function(left, right) {
          var indexExpr = {type: "IndexExpression", children: [left, right]};
          if (right.type === "Slice") {
              return {
                  type: "Projection",
                  children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
              };
          } else {
              return indexExpr;
          }
      },

      _parseSliceExpression: function() {
          // [start:end:step] where each part is optional, as well as the last
          // colon.
          var parts = [null, null, null];
          var index = 0;
          var currentToken = this._lookahead(0);
          while (currentToken !== TOK_RBRACKET && index < 3) {
              if (currentToken === TOK_COLON) {
                  index++;
                  this._advance();
              } else if (currentToken === TOK_NUMBER) {
                  parts[index] = this._lookaheadToken(0).value;
                  this._advance();
              } else {
                  var t = this._lookahead(0);
                  var error = new Error("Syntax error, unexpected token: " +
                                        t.value + "(" + t.type + ")");
                  error.name = "Parsererror";
                  throw error;
              }
              currentToken = this._lookahead(0);
          }
          this._match(TOK_RBRACKET);
          return {
              type: "Slice",
              children: parts
          };
      },

      _parseComparator: function(left, comparator) {
        var right = this.expression(bindingPower[comparator]);
        return {type: "Comparator", name: comparator, children: [left, right]};
      },

      _parseDotRHS: function(rbp) {
          var lookahead = this._lookahead(0);
          var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
          if (exprTokens.indexOf(lookahead) >= 0) {
              return this.expression(rbp);
          } else if (lookahead === TOK_LBRACKET) {
              this._match(TOK_LBRACKET);
              return this._parseMultiselectList();
          } else if (lookahead === TOK_LBRACE) {
              this._match(TOK_LBRACE);
              return this._parseMultiselectHash();
          }
      },

      _parseProjectionRHS: function(rbp) {
          var right;
          if (bindingPower[this._lookahead(0)] < 10) {
              right = {type: "Identity"};
          } else if (this._lookahead(0) === TOK_LBRACKET) {
              right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_FILTER) {
              right = this.expression(rbp);
          } else if (this._lookahead(0) === TOK_DOT) {
              this._match(TOK_DOT);
              right = this._parseDotRHS(rbp);
          } else {
              var t = this._lookaheadToken(0);
              var error = new Error("Sytanx error, unexpected token: " +
                                    t.value + "(" + t.type + ")");
              error.name = "ParserError";
              throw error;
          }
          return right;
      },

      _parseMultiselectList: function() {
          var expressions = [];
          while (this._lookahead(0) !== TOK_RBRACKET) {
              var expression = this.expression(0);
              expressions.push(expression);
              if (this._lookahead(0) === TOK_COMMA) {
                  this._match(TOK_COMMA);
                  if (this._lookahead(0) === TOK_RBRACKET) {
                    throw new Error("Unexpected token Rbracket");
                  }
              }
          }
          this._match(TOK_RBRACKET);
          return {type: "MultiSelectList", children: expressions};
      },

      _parseMultiselectHash: function() {
        var pairs = [];
        var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
        var keyToken, keyName, value, node;
        for (;;) {
          keyToken = this._lookaheadToken(0);
          if (identifierTypes.indexOf(keyToken.type) < 0) {
            throw new Error("Expecting an identifier token, got: " +
                            keyToken.type);
          }
          keyName = keyToken.value;
          this._advance();
          this._match(TOK_COLON);
          value = this.expression(0);
          node = {type: "KeyValuePair", name: keyName, value: value};
          pairs.push(node);
          if (this._lookahead(0) === TOK_COMMA) {
            this._match(TOK_COMMA);
          } else if (this._lookahead(0) === TOK_RBRACE) {
            this._match(TOK_RBRACE);
            break;
          }
        }
        return {type: "MultiSelectHash", children: pairs};
      }
  };


  function TreeInterpreter(runtime) {
    this.runtime = runtime;
  }

  TreeInterpreter.prototype = {
      search: function(node, value) {
          return this.visit(node, value);
      },

      visit: function(node, value) {
          var matched, current, result, first, second, field, left, right, collected, i;
          switch (node.type) {
            case "Field":
              if (value === null ) {
                  return null;
              } else if (isObject(value)) {
                  field = value[node.name];
                  if (field === undefined) {
                      return null;
                  } else {
                      return field;
                  }
              } else {
                return null;
              }
              break;
            case "Subexpression":
              result = this.visit(node.children[0], value);
              for (i = 1; i < node.children.length; i++) {
                  result = this.visit(node.children[1], result);
                  if (result === null) {
                      return null;
                  }
              }
              return result;
            case "IndexExpression":
              left = this.visit(node.children[0], value);
              right = this.visit(node.children[1], left);
              return right;
            case "Index":
              if (!isArray(value)) {
                return null;
              }
              var index = node.value;
              if (index < 0) {
                index = value.length + index;
              }
              result = value[index];
              if (result === undefined) {
                result = null;
              }
              return result;
            case "Slice":
              if (!isArray(value)) {
                return null;
              }
              var sliceParams = node.children.slice(0);
              var computed = this.computeSliceParams(value.length, sliceParams);
              var start = computed[0];
              var stop = computed[1];
              var step = computed[2];
              result = [];
              if (step > 0) {
                  for (i = start; i < stop; i += step) {
                      result.push(value[i]);
                  }
              } else {
                  for (i = start; i > stop; i += step) {
                      result.push(value[i]);
                  }
              }
              return result;
            case "Projection":
              // Evaluate left child.
              var base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              collected = [];
              for (i = 0; i < base.length; i++) {
                current = this.visit(node.children[1], base[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "ValueProjection":
              // Evaluate left child.
              base = this.visit(node.children[0], value);
              if (!isObject(base)) {
                return null;
              }
              collected = [];
              var values = objValues(base);
              for (i = 0; i < values.length; i++) {
                current = this.visit(node.children[1], values[i]);
                if (current !== null) {
                  collected.push(current);
                }
              }
              return collected;
            case "FilterProjection":
              base = this.visit(node.children[0], value);
              if (!isArray(base)) {
                return null;
              }
              var filtered = [];
              var finalResults = [];
              for (i = 0; i < base.length; i++) {
                matched = this.visit(node.children[2], base[i]);
                if (!isFalse(matched)) {
                  filtered.push(base[i]);
                }
              }
              for (var j = 0; j < filtered.length; j++) {
                current = this.visit(node.children[1], filtered[j]);
                if (current !== null) {
                  finalResults.push(current);
                }
              }
              return finalResults;
            case "Comparator":
              first = this.visit(node.children[0], value);
              second = this.visit(node.children[1], value);
              switch(node.name) {
                case TOK_EQ:
                  result = strictDeepEqual(first, second);
                  break;
                case TOK_NE:
                  result = !strictDeepEqual(first, second);
                  break;
                case TOK_GT:
                  result = first > second;
                  break;
                case TOK_GTE:
                  result = first >= second;
                  break;
                case TOK_LT:
                  result = first < second;
                  break;
                case TOK_LTE:
                  result = first <= second;
                  break;
                default:
                  throw new Error("Unknown comparator: " + node.name);
              }
              return result;
            case TOK_FLATTEN:
              var original = this.visit(node.children[0], value);
              if (!isArray(original)) {
                return null;
              }
              var merged = [];
              for (i = 0; i < original.length; i++) {
                current = original[i];
                if (isArray(current)) {
                  merged.push.apply(merged, current);
                } else {
                  merged.push(current);
                }
              }
              return merged;
            case "Identity":
              return value;
            case "MultiSelectList":
              if (value === null) {
                return null;
              }
              collected = [];
              for (i = 0; i < node.children.length; i++) {
                  collected.push(this.visit(node.children[i], value));
              }
              return collected;
            case "MultiSelectHash":
              if (value === null) {
                return null;
              }
              collected = {};
              var child;
              for (i = 0; i < node.children.length; i++) {
                child = node.children[i];
                collected[child.name] = this.visit(child.value, value);
              }
              return collected;
            case "OrExpression":
              matched = this.visit(node.children[0], value);
              if (isFalse(matched)) {
                  matched = this.visit(node.children[1], value);
              }
              return matched;
            case "AndExpression":
              first = this.visit(node.children[0], value);

              if (isFalse(first) === true) {
                return first;
              }
              return this.visit(node.children[1], value);
            case "NotExpression":
              first = this.visit(node.children[0], value);
              return isFalse(first);
            case "Literal":
              return node.value;
            case TOK_PIPE:
              left = this.visit(node.children[0], value);
              return this.visit(node.children[1], left);
            case TOK_CURRENT:
              return value;
            case "Function":
              var resolvedArgs = [];
              for (i = 0; i < node.children.length; i++) {
                  resolvedArgs.push(this.visit(node.children[i], value));
              }
              return this.runtime.callFunction(node.name, resolvedArgs);
            case "ExpressionReference":
              var refNode = node.children[0];
              // Tag the node with a specific attribute so the type
              // checker verify the type.
              refNode.jmespathType = TOK_EXPREF;
              return refNode;
            default:
              throw new Error("Unknown node type: " + node.type);
          }
      },

      computeSliceParams: function(arrayLength, sliceParams) {
        var start = sliceParams[0];
        var stop = sliceParams[1];
        var step = sliceParams[2];
        var computed = [null, null, null];
        if (step === null) {
          step = 1;
        } else if (step === 0) {
          var error = new Error("Invalid slice, step cannot be 0");
          error.name = "RuntimeError";
          throw error;
        }
        var stepValueNegative = step < 0 ? true : false;

        if (start === null) {
            start = stepValueNegative ? arrayLength - 1 : 0;
        } else {
            start = this.capSliceRange(arrayLength, start, step);
        }

        if (stop === null) {
            stop = stepValueNegative ? -1 : arrayLength;
        } else {
            stop = this.capSliceRange(arrayLength, stop, step);
        }
        computed[0] = start;
        computed[1] = stop;
        computed[2] = step;
        return computed;
      },

      capSliceRange: function(arrayLength, actualValue, step) {
          if (actualValue < 0) {
              actualValue += arrayLength;
              if (actualValue < 0) {
                  actualValue = step < 0 ? -1 : 0;
              }
          } else if (actualValue >= arrayLength) {
              actualValue = step < 0 ? arrayLength - 1 : arrayLength;
          }
          return actualValue;
      }

  };

  function Runtime(interpreter) {
    this._interpreter = interpreter;
    this.functionTable = {
        // name: [function, <signature>]
        // The <signature> can be:
        //
        // {
        //   args: [[type1, type2], [type1, type2]],
        //   variadic: true|false
        // }
        //
        // Each arg in the arg list is a list of valid types
        // (if the function is overloaded and supports multiple
        // types.  If the type is "any" then no type checking
        // occurs on the argument.  Variadic is optional
        // and if not provided is assumed to be false.
        abs: {_func: this._functionAbs, _signature: [{types: [TYPE_NUMBER]}]},
        avg: {_func: this._functionAvg, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
        ceil: {_func: this._functionCeil, _signature: [{types: [TYPE_NUMBER]}]},
        contains: {
            _func: this._functionContains,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]},
                        {types: [TYPE_ANY]}]},
        "ends_with": {
            _func: this._functionEndsWith,
            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
        floor: {_func: this._functionFloor, _signature: [{types: [TYPE_NUMBER]}]},
        length: {
            _func: this._functionLength,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT]}]},
        map: {
            _func: this._functionMap,
            _signature: [{types: [TYPE_EXPREF]}, {types: [TYPE_ARRAY]}]},
        max: {
            _func: this._functionMax,
            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
        "merge": {
            _func: this._functionMerge,
            _signature: [{types: [TYPE_OBJECT], variadic: true}]
        },
        "max_by": {
          _func: this._functionMaxBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        sum: {_func: this._functionSum, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
        "starts_with": {
            _func: this._functionStartsWith,
            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
        min: {
            _func: this._functionMin,
            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
        "min_by": {
          _func: this._functionMinBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        type: {_func: this._functionType, _signature: [{types: [TYPE_ANY]}]},
        keys: {_func: this._functionKeys, _signature: [{types: [TYPE_OBJECT]}]},
        values: {_func: this._functionValues, _signature: [{types: [TYPE_OBJECT]}]},
        sort: {_func: this._functionSort, _signature: [{types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER]}]},
        "sort_by": {
          _func: this._functionSortBy,
          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
        },
        join: {
            _func: this._functionJoin,
            _signature: [
                {types: [TYPE_STRING]},
                {types: [TYPE_ARRAY_STRING]}
            ]
        },
        reverse: {
            _func: this._functionReverse,
            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]}]},
        "to_array": {_func: this._functionToArray, _signature: [{types: [TYPE_ANY]}]},
        "to_string": {_func: this._functionToString, _signature: [{types: [TYPE_ANY]}]},
        "to_number": {_func: this._functionToNumber, _signature: [{types: [TYPE_ANY]}]},
        "not_null": {
            _func: this._functionNotNull,
            _signature: [{types: [TYPE_ANY], variadic: true}]
        }
    };
  }

  Runtime.prototype = {
    callFunction: function(name, resolvedArgs) {
      var functionEntry = this.functionTable[name];
      if (functionEntry === undefined) {
          throw new Error("Unknown function: " + name + "()");
      }
      this._validateArgs(name, resolvedArgs, functionEntry._signature);
      return functionEntry._func.call(this, resolvedArgs);
    },

    _validateArgs: function(name, args, signature) {
        // Validating the args requires validating
        // the correct arity and the correct type of each arg.
        // If the last argument is declared as variadic, then we need
        // a minimum number of args to be required.  Otherwise it has to
        // be an exact amount.
        var pluralized;
        if (signature[signature.length - 1].variadic) {
            if (args.length < signature.length) {
                pluralized = signature.length === 1 ? " argument" : " arguments";
                throw new Error("ArgumentError: " + name + "() " +
                                "takes at least" + signature.length + pluralized +
                                " but received " + args.length);
            }
        } else if (args.length !== signature.length) {
            pluralized = signature.length === 1 ? " argument" : " arguments";
            throw new Error("ArgumentError: " + name + "() " +
                            "takes " + signature.length + pluralized +
                            " but received " + args.length);
        }
        var currentSpec;
        var actualType;
        var typeMatched;
        for (var i = 0; i < signature.length; i++) {
            typeMatched = false;
            currentSpec = signature[i].types;
            actualType = this._getTypeName(args[i]);
            for (var j = 0; j < currentSpec.length; j++) {
                if (this._typeMatches(actualType, currentSpec[j], args[i])) {
                    typeMatched = true;
                    break;
                }
            }
            if (!typeMatched) {
                throw new Error("TypeError: " + name + "() " +
                                "expected argument " + (i + 1) +
                                " to be type " + currentSpec +
                                " but received type " + actualType +
                                " instead.");
            }
        }
    },

    _typeMatches: function(actual, expected, argValue) {
        if (expected === TYPE_ANY) {
            return true;
        }
        if (expected === TYPE_ARRAY_STRING ||
            expected === TYPE_ARRAY_NUMBER ||
            expected === TYPE_ARRAY) {
            // The expected type can either just be array,
            // or it can require a specific subtype (array of numbers).
            //
            // The simplest case is if "array" with no subtype is specified.
            if (expected === TYPE_ARRAY) {
                return actual === TYPE_ARRAY;
            } else if (actual === TYPE_ARRAY) {
                // Otherwise we need to check subtypes.
                // I think this has potential to be improved.
                var subtype;
                if (expected === TYPE_ARRAY_NUMBER) {
                  subtype = TYPE_NUMBER;
                } else if (expected === TYPE_ARRAY_STRING) {
                  subtype = TYPE_STRING;
                }
                for (var i = 0; i < argValue.length; i++) {
                    if (!this._typeMatches(
                            this._getTypeName(argValue[i]), subtype,
                                             argValue[i])) {
                        return false;
                    }
                }
                return true;
            }
        } else {
            return actual === expected;
        }
    },
    _getTypeName: function(obj) {
        switch (Object.prototype.toString.call(obj)) {
            case "[object String]":
              return TYPE_STRING;
            case "[object Number]":
              return TYPE_NUMBER;
            case "[object Array]":
              return TYPE_ARRAY;
            case "[object Boolean]":
              return TYPE_BOOLEAN;
            case "[object Null]":
              return TYPE_NULL;
            case "[object Object]":
              // Check if it's an expref.  If it has, it's been
              // tagged with a jmespathType attr of 'Expref';
              if (obj.jmespathType === TOK_EXPREF) {
                return TYPE_EXPREF;
              } else {
                return TYPE_OBJECT;
              }
        }
    },

    _functionStartsWith: function(resolvedArgs) {
        return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
    },

    _functionEndsWith: function(resolvedArgs) {
        var searchStr = resolvedArgs[0];
        var suffix = resolvedArgs[1];
        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
    },

    _functionReverse: function(resolvedArgs) {
        var typeName = this._getTypeName(resolvedArgs[0]);
        if (typeName === TYPE_STRING) {
          var originalStr = resolvedArgs[0];
          var reversedStr = "";
          for (var i = originalStr.length - 1; i >= 0; i--) {
              reversedStr += originalStr[i];
          }
          return reversedStr;
        } else {
          var reversedArray = resolvedArgs[0].slice(0);
          reversedArray.reverse();
          return reversedArray;
        }
    },

    _functionAbs: function(resolvedArgs) {
      return Math.abs(resolvedArgs[0]);
    },

    _functionCeil: function(resolvedArgs) {
        return Math.ceil(resolvedArgs[0]);
    },

    _functionAvg: function(resolvedArgs) {
        var sum = 0;
        var inputArray = resolvedArgs[0];
        for (var i = 0; i < inputArray.length; i++) {
            sum += inputArray[i];
        }
        return sum / inputArray.length;
    },

    _functionContains: function(resolvedArgs) {
        return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
    },

    _functionFloor: function(resolvedArgs) {
        return Math.floor(resolvedArgs[0]);
    },

    _functionLength: function(resolvedArgs) {
       if (!isObject(resolvedArgs[0])) {
         return resolvedArgs[0].length;
       } else {
         // As far as I can tell, there's no way to get the length
         // of an object without O(n) iteration through the object.
         return Object.keys(resolvedArgs[0]).length;
       }
    },

    _functionMap: function(resolvedArgs) {
      var mapped = [];
      var interpreter = this._interpreter;
      var exprefNode = resolvedArgs[0];
      var elements = resolvedArgs[1];
      for (var i = 0; i < elements.length; i++) {
          mapped.push(interpreter.visit(exprefNode, elements[i]));
      }
      return mapped;
    },

    _functionMerge: function(resolvedArgs) {
      var merged = {};
      for (var i = 0; i < resolvedArgs.length; i++) {
        var current = resolvedArgs[i];
        for (var key in current) {
          merged[key] = current[key];
        }
      }
      return merged;
    },

    _functionMax: function(resolvedArgs) {
      if (resolvedArgs[0].length > 0) {
        var typeName = this._getTypeName(resolvedArgs[0][0]);
        if (typeName === TYPE_NUMBER) {
          return Math.max.apply(Math, resolvedArgs[0]);
        } else {
          var elements = resolvedArgs[0];
          var maxElement = elements[0];
          for (var i = 1; i < elements.length; i++) {
              if (maxElement.localeCompare(elements[i]) < 0) {
                  maxElement = elements[i];
              }
          }
          return maxElement;
        }
      } else {
          return null;
      }
    },

    _functionMin: function(resolvedArgs) {
      if (resolvedArgs[0].length > 0) {
        var typeName = this._getTypeName(resolvedArgs[0][0]);
        if (typeName === TYPE_NUMBER) {
          return Math.min.apply(Math, resolvedArgs[0]);
        } else {
          var elements = resolvedArgs[0];
          var minElement = elements[0];
          for (var i = 1; i < elements.length; i++) {
              if (elements[i].localeCompare(minElement) < 0) {
                  minElement = elements[i];
              }
          }
          return minElement;
        }
      } else {
        return null;
      }
    },

    _functionSum: function(resolvedArgs) {
      var sum = 0;
      var listToSum = resolvedArgs[0];
      for (var i = 0; i < listToSum.length; i++) {
        sum += listToSum[i];
      }
      return sum;
    },

    _functionType: function(resolvedArgs) {
        switch (this._getTypeName(resolvedArgs[0])) {
          case TYPE_NUMBER:
            return "number";
          case TYPE_STRING:
            return "string";
          case TYPE_ARRAY:
            return "array";
          case TYPE_OBJECT:
            return "object";
          case TYPE_BOOLEAN:
            return "boolean";
          case TYPE_EXPREF:
            return "expref";
          case TYPE_NULL:
            return "null";
        }
    },

    _functionKeys: function(resolvedArgs) {
        return Object.keys(resolvedArgs[0]);
    },

    _functionValues: function(resolvedArgs) {
        var obj = resolvedArgs[0];
        var keys = Object.keys(obj);
        var values = [];
        for (var i = 0; i < keys.length; i++) {
            values.push(obj[keys[i]]);
        }
        return values;
    },

    _functionJoin: function(resolvedArgs) {
        var joinChar = resolvedArgs[0];
        var listJoin = resolvedArgs[1];
        return listJoin.join(joinChar);
    },

    _functionToArray: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
            return resolvedArgs[0];
        } else {
            return [resolvedArgs[0]];
        }
    },

    _functionToString: function(resolvedArgs) {
        if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
            return resolvedArgs[0];
        } else {
            return JSON.stringify(resolvedArgs[0]);
        }
    },

    _functionToNumber: function(resolvedArgs) {
        var typeName = this._getTypeName(resolvedArgs[0]);
        var convertedValue;
        if (typeName === TYPE_NUMBER) {
            return resolvedArgs[0];
        } else if (typeName === TYPE_STRING) {
            convertedValue = +resolvedArgs[0];
            if (!isNaN(convertedValue)) {
                return convertedValue;
            }
        }
        return null;
    },

    _functionNotNull: function(resolvedArgs) {
        for (var i = 0; i < resolvedArgs.length; i++) {
            if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
                return resolvedArgs[i];
            }
        }
        return null;
    },

    _functionSort: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        sortedArray.sort();
        return sortedArray;
    },

    _functionSortBy: function(resolvedArgs) {
        var sortedArray = resolvedArgs[0].slice(0);
        if (sortedArray.length === 0) {
            return sortedArray;
        }
        var interpreter = this._interpreter;
        var exprefNode = resolvedArgs[1];
        var requiredType = this._getTypeName(
            interpreter.visit(exprefNode, sortedArray[0]));
        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
            throw new Error("TypeError");
        }
        var that = this;
        // In order to get a stable sort out of an unstable
        // sort algorithm, we decorate/sort/undecorate (DSU)
        // by creating a new list of [index, element] pairs.
        // In the cmp function, if the evaluated elements are
        // equal, then the index will be used as the tiebreaker.
        // After the decorated list has been sorted, it will be
        // undecorated to extract the original elements.
        var decorated = [];
        for (var i = 0; i < sortedArray.length; i++) {
          decorated.push([i, sortedArray[i]]);
        }
        decorated.sort(function(a, b) {
          var exprA = interpreter.visit(exprefNode, a[1]);
          var exprB = interpreter.visit(exprefNode, b[1]);
          if (that._getTypeName(exprA) !== requiredType) {
              throw new Error(
                  "TypeError: expected " + requiredType + ", received " +
                  that._getTypeName(exprA));
          } else if (that._getTypeName(exprB) !== requiredType) {
              throw new Error(
                  "TypeError: expected " + requiredType + ", received " +
                  that._getTypeName(exprB));
          }
          if (exprA > exprB) {
            return 1;
          } else if (exprA < exprB) {
            return -1;
          } else {
            // If they're equal compare the items by their
            // order to maintain relative order of equal keys
            // (i.e. to get a stable sort).
            return a[0] - b[0];
          }
        });
        // Undecorate: extract out the original list elements.
        for (var j = 0; j < decorated.length; j++) {
          sortedArray[j] = decorated[j][1];
        }
        return sortedArray;
    },

    _functionMaxBy: function(resolvedArgs) {
      var exprefNode = resolvedArgs[1];
      var resolvedArray = resolvedArgs[0];
      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
      var maxNumber = -Infinity;
      var maxRecord;
      var current;
      for (var i = 0; i < resolvedArray.length; i++) {
        current = keyFunction(resolvedArray[i]);
        if (current > maxNumber) {
          maxNumber = current;
          maxRecord = resolvedArray[i];
        }
      }
      return maxRecord;
    },

    _functionMinBy: function(resolvedArgs) {
      var exprefNode = resolvedArgs[1];
      var resolvedArray = resolvedArgs[0];
      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
      var minNumber = Infinity;
      var minRecord;
      var current;
      for (var i = 0; i < resolvedArray.length; i++) {
        current = keyFunction(resolvedArray[i]);
        if (current < minNumber) {
          minNumber = current;
          minRecord = resolvedArray[i];
        }
      }
      return minRecord;
    },

    createKeyFunction: function(exprefNode, allowedTypes) {
      var that = this;
      var interpreter = this._interpreter;
      var keyFunc = function(x) {
        var current = interpreter.visit(exprefNode, x);
        if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
          var msg = "TypeError: expected one of " + allowedTypes +
                    ", received " + that._getTypeName(current);
          throw new Error(msg);
        }
        return current;
      };
      return keyFunc;
    }

  };

  function compile(stream) {
    var parser = new Parser();
    var ast = parser.parse(stream);
    return ast;
  }

  function tokenize(stream) {
      var lexer = new Lexer();
      return lexer.tokenize(stream);
  }

  function search(data, expression) {
      var parser = new Parser();
      // This needs to be improved.  Both the interpreter and runtime depend on
      // each other.  The runtime needs the interpreter to support exprefs.
      // There's likely a clean way to avoid the cyclic dependency.
      var runtime = new Runtime();
      var interpreter = new TreeInterpreter(runtime);
      runtime._interpreter = interpreter;
      var node = parser.parse(expression);
      return interpreter.search(node, data);
  }

  exports.tokenize = tokenize;
  exports.compile = compile;
  exports.search = search;
  exports.strictDeepEqual = strictDeepEqual;
})( false ? this.jmespath = {} : exports);


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(8),
    root = __webpack_require__(6);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(616),
    mapCacheDelete = __webpack_require__(617),
    mapCacheGet = __webpack_require__(618),
    mapCacheHas = __webpack_require__(619),
    mapCacheSet = __webpack_require__(620);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),
/* 37 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(4),
    isSymbol = __webpack_require__(44);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),
/* 40 */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(576),
    isObjectLike = __webpack_require__(17);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(6),
    stubFalse = __webpack_require__(648);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89)(module)))

/***/ }),
/* 43 */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(15),
    isObjectLike = __webpack_require__(17);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(580),
    baseUnary = __webpack_require__(590),
    nodeUtil = __webpack_require__(624);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aws = __webpack_require__(478);
var doc;

module.exports = (function() {
    return {
        get: function(table, userId, callback) {
            if(!table) {
                callback('DynamoDB Table name is not set.', null);
            }

            if(!doc) {
                doc = new aws.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});
            }

            var params = {
                Key: {
                    userId: userId
                },
                TableName: table,
                ConsistentRead: true
            };

            doc.get(params, function(err, data){
                if(err) {
                    console.log('get error: ' + JSON.stringify(err, null, 4));

                    if(err.code === 'ResourceNotFoundException') {
                        var dynamoClient = new aws.DynamoDB();
                        newTableParams.TableName = table;
                        dynamoClient.createTable(newTableParams, function (err, data) {
                            if(err) {
                                console.log('Error creating table: ' + JSON.stringify(err, null, 4));
                            }
                            console.log('Creating table ' + table + ':\n' + JSON.stringify(data));
                            callback(err, {});
                        });
                    } else {
                        callback(err, null);
                    }
                } else {
                    if(isEmptyObject(data)) {
                        callback(null, {});
                    } else {
                        callback(null, data.Item.mapAttr);
                    }
                }
            });
        },

        set: function(table, userId, data, callback) {
            if(!table) {
                callback('DynamoDB Table name is not set.', null);
            }

            if(!doc) {
                doc = new aws.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});
            }

            var params = {
                Item: {
                    userId: userId,
                    mapAttr: data
                },
                TableName: table
            };

            doc.put(params, function(err, data) {
                if(err) {
                    console.log('Error during DynamoDB put:' + err);
                }
                callback(err, data);
            });
        }
    };
})();

function isEmptyObject(obj) {
    return !Object.keys(obj).length;
}

var newTableParams = {
    AttributeDefinitions: [
        {
            AttributeName: 'userId',
            AttributeType: 'S'
        }
    ],
    KeySchema: [
        {
            AttributeName: 'userId',
            KeyType: 'HASH'
        }
    ],
    ProvisionedThroughput: {
        ReadCapacityUnits: 5,
        WriteCapacityUnits: 5
    }
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @typedef { hostname : string, port : string, path : string, protocol : string, headers : string, method : string } ApiClientOptions
 * @typedef { statusCode : string, statusText : string, body : Object, headers : Object } ApiClientResponse
 */

const http = __webpack_require__(100);
const https = __webpack_require__(47);
const url = __webpack_require__(103);

const HTTPS_PROTOCOL = 'https:';

class ApiClient {

    /**
     * Make a POST API call to the specified uri with headers and optional body
     * @param {string} uri http(s?) endpoint to call
     * @param {Object} headers Key value pair of headers
     * @param {string} body post body to send
     * @returns {Promise<ApiClientResponse>}
     * @memberof ApiClient
     */
    post(uri, headers, body) {
        const options = this.__buildOptions(uri, headers, 'POST');
        return this.__dispatch(options, body);
    }

    /**
     * Make a PUT API call to the specified uri with headers and optional body
     * @param {string} uri http(s?) endpoint to call
     * @param {Object} headers Key value pair of headers
     * @param {string} body post body to send
     * @returns {Promise<ApiClientResponse>}
     * @memberof ApiClient
     */
    put(uri, headers, body) {
        const options = this.__buildOptions(uri, headers, 'PUT');
        return this.__dispatch(options, body);
    }

    /**
     * Make a GET API call to the specified uri with headers
     * @param {string} uri http(s?) endpoint to call
     * @param {Object} headers key value pair of headers
     * @returns {Promise<ApiClientResponse>}
     * @memberof ApiClient
     */
    get(uri, headers) {
        const options = this.__buildOptions(uri, headers, 'GET');
        return this.__dispatch(options);
    }

    /**
     * Make a DELETE API call to the specified uri with headers
     * @param {string} uri http(s?) endpoint to call
     * @param {Object} headers key value pair of headers
     * @returns {Promise<ApiClientResponse>}
     */
    delete(uri, headers) {
        const options = this.__buildOptions(uri, headers, 'DELETE');
        return this.__dispatch(options);
    }

    /**
     * @param {string} uri
     * @param {Object} headers
     * @param {string} method
     * @returns {ApiClientOptions}
     * @memberof ApiClient
     */
    __buildOptions(uri, headers, method) {
        const urlObj = url.parse(uri);
        return {
            hostname : urlObj.hostname,
            port : urlObj.port,
            path : urlObj.path,
            protocol : urlObj.protocol,
            headers : headers,
            method : method
        };
    }

    /**
     * Makes an API call given the specified api client options
     * @private
     * @param {ApiClientOptions} options
     * @param {string} body
     * @returns {Promise<ApiClientResponse>}
     * @memberof ApiClient
     */
    __dispatch(options, body) {
        return new Promise((resolve, reject) => {
            const protocol = options.protocol === HTTPS_PROTOCOL ? https : http;
            const clientRequest = protocol.request(options, (response) => {
                const chunks = [];
                response.on('data', (chunk) => {
                    chunks.push(chunk);
                });

                response.on('end', () => {
                    const responseStr = chunks.join('');
                    const responseObj = {
                        statusCode : response.statusCode,
                        statusText : response.statusText,
                        body : responseStr,
                        headers : response.headers
                    };

                    resolve(responseObj);
                });
            });

            clientRequest.on('error', (err) => {
                reject(err);
            });

            if(body) {
                clientRequest.write(body);
            }

            clientRequest.end();
        });
    }
}

module.exports.ApiClient = ApiClient;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class ServiceError extends Error {
    constructor(statusCode, message) {
        super(message);
        this.name = 'ServiceError';
        this.statusCode = statusCode;
        Error.captureStackTrace(this, ServiceError);
    }
}

module.exports.ServiceError = ServiceError;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cognitoidentity'] = {};
AWS.CognitoIdentity = Service.defineService('cognitoidentity', ['2014-06-30']);
__webpack_require__(511);
Object.defineProperty(apiLoader.services['cognitoidentity'], '2014-06-30', {
  get: function get() {
    var model = __webpack_require__(174);
    model.paginators = __webpack_require__(175).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CognitoIdentity;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * Represents your AWS security credentials, specifically the
 * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.
 * Creating a `Credentials` object allows you to pass around your
 * security information to configuration and service objects.
 *
 * Note that this class typically does not need to be constructed manually,
 * as the {AWS.Config} and {AWS.Service} classes both accept simple
 * options hashes with the three keys. These structures will be converted
 * into Credentials objects automatically.
 *
 * ## Expiring and Refreshing Credentials
 *
 * Occasionally credentials can expire in the middle of a long-running
 * application. In this case, the SDK will automatically attempt to
 * refresh the credentials from the storage location if the Credentials
 * class implements the {refresh} method.
 *
 * If you are implementing a credential storage location, you
 * will want to create a subclass of the `Credentials` class and
 * override the {refresh} method. This method allows credentials to be
 * retrieved from the backing store, be it a file system, database, or
 * some network storage. The method should reset the credential attributes
 * on the object.
 *
 * @!attribute expired
 *   @return [Boolean] whether the credentials have been expired and
 *     require a refresh. Used in conjunction with {expireTime}.
 * @!attribute expireTime
 *   @return [Date] a time when credentials should be considered expired. Used
 *     in conjunction with {expired}.
 * @!attribute accessKeyId
 *   @return [String] the AWS access key ID
 * @!attribute secretAccessKey
 *   @return [String] the AWS secret access key
 * @!attribute sessionToken
 *   @return [String] an optional AWS session token
 */
AWS.Credentials = AWS.util.inherit({
  /**
   * A credentials object can be created using positional arguments or an options
   * hash.
   *
   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)
   *   Creates a Credentials object with a given set of credential information
   *   as positional arguments.
   *   @param accessKeyId [String] the AWS access key ID
   *   @param secretAccessKey [String] the AWS secret access key
   *   @param sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials('akid', 'secret', 'session');
   * @overload AWS.Credentials(options)
   *   Creates a Credentials object with a given set of credential information
   *   as an options hash.
   *   @option options accessKeyId [String] the AWS access key ID
   *   @option options secretAccessKey [String] the AWS secret access key
   *   @option options sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials({
   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'
   *     });
   */
  constructor: function Credentials() {
    // hide secretAccessKey from being displayed with util.inspect
    AWS.util.hideProperties(this, ['secretAccessKey']);

    this.expired = false;
    this.expireTime = null;
    if (arguments.length === 1 && typeof arguments[0] === 'object') {
      var creds = arguments[0].credentials || arguments[0];
      this.accessKeyId = creds.accessKeyId;
      this.secretAccessKey = creds.secretAccessKey;
      this.sessionToken = creds.sessionToken;
    } else {
      this.accessKeyId = arguments[0];
      this.secretAccessKey = arguments[1];
      this.sessionToken = arguments[2];
    }
  },

  /**
   * @return [Integer] the number of seconds before {expireTime} during which
   *   the credentials will be considered expired.
   */
  expiryWindow: 15,

  /**
   * @return [Boolean] whether the credentials object should call {refresh}
   * @note Subclasses should override this method to provide custom refresh
   *   logic.
   */
  needsRefresh: function needsRefresh() {
    var currentTime = AWS.util.date.getDate().getTime();
    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);

    if (this.expireTime && adjustedTime > this.expireTime) {
      return true;
    } else {
      return this.expired || !this.accessKeyId || !this.secretAccessKey;
    }
  },

  /**
   * Gets the existing credentials, refreshing them if they are not yet loaded
   * or have expired. Users should call this method before using {refresh},
   * as this will not attempt to reload credentials when they are already
   * loaded into the object.
   *
   * @callback callback function(err)
   *   When this callback is called with no error, it means either credentials
   *   do not need to be refreshed or refreshed credentials information has
   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
   *   and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   */
  get: function get(callback) {
    var self = this;
    if (this.needsRefresh()) {
      this.refresh(function(err) {
        if (!err) self.expired = false; // reset expired flag
        if (callback) callback(err);
      });
    } else if (callback) {
      callback();
    }
  },

  /**
   * @!method  getPromise()
   *   Returns a 'thenable' promise.
   *   Gets the existing credentials, refreshing them if they are not yet loaded
   *   or have expired. Users should call this method before using {refresh},
   *   as this will not attempt to reload credentials when they are already
   *   loaded into the object.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function()
   *     Called if the promise is fulfilled. When this callback is called, it
   *     means either credentials do not need to be refreshed or refreshed
   *     credentials information has been loaded into the object (as the
   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @callback rejectedCallback function(err)
   *     Called if the promise is rejected.
   *     @param err [Error] if an error occurred, this value will be filled
   *   @return [Promise] A promise that represents the state of the `get` call.
   *   @example Calling the `getPromise` method.
   *     var promise = credProvider.getPromise();
   *     promise.then(function() { ... }, function(err) { ... });
   */

  /**
   * @!method  refreshPromise()
   *   Returns a 'thenable' promise.
   *   Refreshes the credentials. Users should call {get} before attempting
   *   to forcibly refresh credentials.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function()
   *     Called if the promise is fulfilled. When this callback is called, it
   *     means refreshed credentials information has been loaded into the object
   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @callback rejectedCallback function(err)
   *     Called if the promise is rejected.
   *     @param err [Error] if an error occurred, this value will be filled
   *   @return [Promise] A promise that represents the state of the `refresh` call.
   *   @example Calling the `refreshPromise` method.
   *     var promise = credProvider.refreshPromise();
   *     promise.then(function() { ... }, function(err) { ... });
   */

  /**
   * Refreshes the credentials. Users should call {get} before attempting
   * to forcibly refresh credentials.
   *
   * @callback callback function(err)
   *   When this callback is called with no error, it means refreshed
   *   credentials information has been loaded into the object (as the
   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @note Subclasses should override this class to reset the
   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}
   *   on the credentials object and then call the callback with
   *   any error information.
   * @see get
   */
  refresh: function refresh(callback) {
    this.expired = false;
    callback();
  }
});

/**
 * @api private
 */
AWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);
  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);
};

/**
 * @api private
 */
AWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.getPromise;
  delete this.prototype.refreshPromise;
};

AWS.util.addPromises(AWS.Credentials);


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * Creates a credential provider chain that searches for AWS credentials
 * in a list of credential providers specified by the {providers} property.
 *
 * By default, the chain will use the {defaultProviders} to resolve credentials.
 * These providers will look in the environment using the
 * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.
 *
 * ## Setting Providers
 *
 * Each provider in the {providers} list should be a function that returns
 * a {AWS.Credentials} object, or a hardcoded credentials object. The function
 * form allows for delayed execution of the credential construction.
 *
 * ## Resolving Credentials from a Chain
 *
 * Call {resolve} to return the first valid credential object that can be
 * loaded by the provider chain.
 *
 * For example, to resolve a chain with a custom provider that checks a file
 * on disk after the set of {defaultProviders}:
 *
 * ```javascript
 * var diskProvider = new AWS.FileSystemCredentials('./creds.json');
 * var chain = new AWS.CredentialProviderChain();
 * chain.providers.push(diskProvider);
 * chain.resolve();
 * ```
 *
 * The above code will return the `diskProvider` object if the
 * file contains credentials and the `defaultProviders` do not contain
 * any credential settings.
 *
 * @!attribute providers
 *   @return [Array<AWS.Credentials, Function>]
 *     a list of credentials objects or functions that return credentials
 *     objects. If the provider is a function, the function will be
 *     executed lazily when the provider needs to be checked for valid
 *     credentials. By default, this object will be set to the
 *     {defaultProviders}.
 *   @see defaultProviders
 */
AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {

  /**
   * Creates a new CredentialProviderChain with a default set of providers
   * specified by {defaultProviders}.
   */
  constructor: function CredentialProviderChain(providers) {
    if (providers) {
      this.providers = providers;
    } else {
      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
    }
  },

  /**
   * @!method  resolvePromise()
   *   Returns a 'thenable' promise.
   *   Resolves the provider chain by searching for the first set of
   *   credentials in {providers}.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function(credentials)
   *     Called if the promise is fulfilled and the provider resolves the chain
   *     to a credentials object
   *     @param credentials [AWS.Credentials] the credentials object resolved
   *       by the provider chain.
   *   @callback rejectedCallback function(error)
   *     Called if the promise is rejected.
   *     @param err [Error] the error object returned if no credentials are found.
   *   @return [Promise] A promise that represents the state of the `resolve` method call.
   *   @example Calling the `resolvePromise` method.
   *     var promise = chain.resolvePromise();
   *     promise.then(function(credentials) { ... }, function(err) { ... });
   */

  /**
   * Resolves the provider chain by searching for the first set of
   * credentials in {providers}.
   *
   * @callback callback function(err, credentials)
   *   Called when the provider resolves the chain to a credentials object
   *   or null if no credentials can be found.
   *
   *   @param err [Error] the error object returned if no credentials are
   *     found.
   *   @param credentials [AWS.Credentials] the credentials object resolved
   *     by the provider chain.
   * @return [AWS.CredentialProviderChain] the provider, for chaining.
   */
  resolve: function resolve(callback) {
    if (this.providers.length === 0) {
      callback(new Error('No providers'));
      return this;
    }

    var index = 0;
    var providers = this.providers.slice(0);

    function resolveNext(err, creds) {
      if ((!err && creds) || index === providers.length) {
        callback(err, creds);
        return;
      }

      var provider = providers[index++];
      if (typeof provider === 'function') {
        creds = provider.call();
      } else {
        creds = provider;
      }

      if (creds.get) {
        creds.get(function(getErr) {
          resolveNext(getErr, getErr ? null : creds);
        });
      } else {
        resolveNext(null, creds);
      }
    }

    resolveNext();
    return this;
  }
});

/**
 * The default set of providers used by a vanilla CredentialProviderChain.
 *
 * In the browser:
 *
 * ```javascript
 * AWS.CredentialProviderChain.defaultProviders = []
 * ```
 *
 * In Node.js:
 *
 * ```javascript
 * AWS.CredentialProviderChain.defaultProviders = [
 *   function () { return new AWS.EnvironmentCredentials('AWS'); },
 *   function () { return new AWS.EnvironmentCredentials('AMAZON'); },
 *   function () { return new AWS.SharedIniFileCredentials(); },
 *   function () {
 *     // if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI is set
 *       return new AWS.ECSCredentials();
 *     // else
 *       return new AWS.EC2MetadataCredentials();
 *   }
 * ]
 * ```
 */
AWS.CredentialProviderChain.defaultProviders = [];

/**
 * @api private
 */
AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);
};

/**
 * @api private
 */
AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.resolvePromise;
};

AWS.util.addPromises(AWS.CredentialProviderChain);


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(0).util;
var typeOf = __webpack_require__(55).typeOf;

var memberTypeToSetType = {
  'String': 'String',
  'Number': 'Number',
  'NumberValue': 'Number',
  'Binary': 'Binary'
};

/**
 * @api private
 */
var DynamoDBSet = util.inherit({

  constructor: function Set(list, options) {
    options = options || {};
    this.initialize(list, options.validate);
  },

  initialize: function(list, validate) {
    var self = this;
    self.values = [].concat(list);
    self.detectType();
    if (validate) {
      self.validate();
    }
  },

  detectType: function() {
    this.type = memberTypeToSetType[typeOf(this.values[0])];
    if (!this.type) {
      throw util.error(new Error(), {
        code: 'InvalidSetType',
        message: 'Sets can contain string, number, or binary values'
      });
    }
  },

  validate: function() {
    var self = this;
    var length = self.values.length;
    var values = self.values;
    for (var i = 0; i < length; i++) {
      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {
        throw util.error(new Error(), {
          code: 'InvalidType',
          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'
        });
      }
    }
  }

});

module.exports = DynamoDBSet;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(0).util;

function typeOf(data) {
  if (data === null && typeof data === 'object') {
    return 'null';
  } else if (data !== undefined && isBinary(data)) {
    return 'Binary';
  } else if (data !== undefined && data.constructor) {
    return util.typeName(data.constructor);
  } else if (data !== undefined && typeof data === 'object') {
    // this object is the result of Object.create(null), hence the absence of a
    // defined constructor
    return 'Object';
  } else {
    return 'undefined';
  }
}

function isBinary(data) {
  var types = [
    'Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView',
    'Int8Array', 'Uint8Array', 'Uint8ClampedArray',
    'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',
    'Float32Array', 'Float64Array'
  ];
  if (util.isNode()) {
    var Stream = util.stream.Stream;
    if (util.Buffer.isBuffer(data) || data instanceof Stream) {
      return true;
    }
  }

  for (var i = 0; i < types.length; i++) {
    if (data !== undefined && data.constructor) {
      if (util.isType(data, types[i])) return true;
      if (util.typeName(data.constructor) === types[i]) return true;
    }
  }

  return false;
}

module.exports = {
  typeOf: typeOf,
  isBinary: isBinary
};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var Collection = __webpack_require__(57);
var Operation = __webpack_require__(58);
var Shape = __webpack_require__(19);
var Paginator = __webpack_require__(59);
var ResourceWaiter = __webpack_require__(60);

var util = __webpack_require__(2);
var property = util.property;
var memoizedProperty = util.memoizedProperty;

function Api(api, options) {
  api = api || {};
  options = options || {};
  options.api = this;

  api.metadata = api.metadata || {};

  property(this, 'isApi', true, false);
  property(this, 'apiVersion', api.metadata.apiVersion);
  property(this, 'endpointPrefix', api.metadata.endpointPrefix);
  property(this, 'signingName', api.metadata.signingName);
  property(this, 'globalEndpoint', api.metadata.globalEndpoint);
  property(this, 'signatureVersion', api.metadata.signatureVersion);
  property(this, 'jsonVersion', api.metadata.jsonVersion);
  property(this, 'targetPrefix', api.metadata.targetPrefix);
  property(this, 'protocol', api.metadata.protocol);
  property(this, 'timestampFormat', api.metadata.timestampFormat);
  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);
  property(this, 'abbreviation', api.metadata.serviceAbbreviation);
  property(this, 'fullName', api.metadata.serviceFullName);

  memoizedProperty(this, 'className', function() {
    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
    if (!name) return null;

    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, '');
    if (name === 'ElasticLoadBalancing') name = 'ELB';
    return name;
  });

  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {
    return new Operation(name, operation, options);
  }, util.string.lowerFirst));

  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {
    return Shape.create(shape, options);
  }));

  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {
    return new Paginator(name, paginator, options);
  }));

  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {
    return new ResourceWaiter(name, waiter, options);
  }, util.string.lowerFirst));

  if (options.documentation) {
    property(this, 'documentation', api.documentation);
    property(this, 'documentationUrl', api.documentationUrl);
  }
}

module.exports = Api;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var memoizedProperty = __webpack_require__(2).memoizedProperty;

function memoize(name, value, fn, nameTr) {
  memoizedProperty(this, nameTr(name), function() {
    return fn(name, value);
  });
}

function Collection(iterable, options, fn, nameTr) {
  nameTr = nameTr || String;
  var self = this;

  for (var id in iterable) {
    if (Object.prototype.hasOwnProperty.call(iterable, id)) {
      memoize.call(self, id, iterable[id], fn, nameTr);
    }
  }
}

module.exports = Collection;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var Shape = __webpack_require__(19);

var util = __webpack_require__(2);
var property = util.property;
var memoizedProperty = util.memoizedProperty;

function Operation(name, operation, options) {
  var self = this;
  options = options || {};

  property(this, 'name', operation.name || name);
  property(this, 'api', options.api, false);

  operation.http = operation.http || {};
  property(this, 'httpMethod', operation.http.method || 'POST');
  property(this, 'httpPath', operation.http.requestUri || '/');
  property(this, 'authtype', operation.authtype || '');

  memoizedProperty(this, 'input', function() {
    if (!operation.input) {
      return new Shape.create({type: 'structure'}, options);
    }
    return Shape.create(operation.input, options);
  });

  memoizedProperty(this, 'output', function() {
    if (!operation.output) {
      return new Shape.create({type: 'structure'}, options);
    }
    return Shape.create(operation.output, options);
  });

  memoizedProperty(this, 'errors', function() {
    var list = [];
    if (!operation.errors) return null;

    for (var i = 0; i < operation.errors.length; i++) {
      list.push(Shape.create(operation.errors[i], options));
    }

    return list;
  });

  memoizedProperty(this, 'paginator', function() {
    return options.api.paginators[name];
  });

  if (options.documentation) {
    property(this, 'documentation', operation.documentation);
    property(this, 'documentationUrl', operation.documentationUrl);
  }

  // idempotentMembers only tracks top-level input shapes
  memoizedProperty(this, 'idempotentMembers', function() {
    var idempotentMembers = [];
    var input = self.input;
    var members = input.members;
    if (!input.members) {
      return idempotentMembers;
    }
    for (var name in members) {
      if (!members.hasOwnProperty(name)) {
        continue;
      }
      if (members[name].isIdempotent === true) {
        idempotentMembers.push(name);
      }
    }
    return idempotentMembers;
  });

}

module.exports = Operation;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var property = __webpack_require__(2).property;

function Paginator(name, paginator) {
  property(this, 'inputToken', paginator.input_token);
  property(this, 'limitKey', paginator.limit_key);
  property(this, 'moreResults', paginator.more_results);
  property(this, 'outputToken', paginator.output_token);
  property(this, 'resultKey', paginator.result_key);
}

module.exports = Paginator;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var property = util.property;

function ResourceWaiter(name, waiter, options) {
  options = options || {};
  property(this, 'name', name);
  property(this, 'api', options.api, false);

  if (waiter.operation) {
    property(this, 'operation', util.string.lowerFirst(waiter.operation));
  }

  var self = this;
  var keys = [
    'type',
    'description',
    'delay',
    'maxAttempts',
    'acceptors'
  ];

  keys.forEach(function(key) {
    var value = waiter[key];
    if (value) {
      property(self, key, value);
    }
  });
}

module.exports = ResourceWaiter;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var util = __webpack_require__(2);
var QueryParamSerializer = __webpack_require__(499);
var Shape = __webpack_require__(19);

function buildRequest(req) {
  var operation = req.service.api.operations[req.operation];
  var httpRequest = req.httpRequest;
  httpRequest.headers['Content-Type'] =
    'application/x-www-form-urlencoded; charset=utf-8';
  httpRequest.params = {
    Version: req.service.api.apiVersion,
    Action: operation.name
  };

  // convert the request parameters into a list of query params,
  // e.g. Deeply.NestedParam.0.Name=value
  var builder = new QueryParamSerializer();
  builder.serialize(req.params, operation.input, function(name, value) {
    httpRequest.params[name] = value;
  });
  httpRequest.body = util.queryParamsToString(httpRequest.params);
}

function extractError(resp) {
  var data, body = resp.httpResponse.body.toString();
  if (body.match('<UnknownOperationException')) {
    data = {
      Code: 'UnknownOperation',
      Message: 'Unknown operation ' + resp.request.operation
    };
  } else {
    try {
      data = new AWS.XML.Parser().parse(body);
    } catch (e) {
      data = {
        Code: resp.httpResponse.statusCode,
        Message: resp.httpResponse.statusMessage
      };
    }
  }

  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;
  if (data.Errors) data = data.Errors;
  if (data.Error) data = data.Error;
  if (data.Code) {
    resp.error = util.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}

function extractData(resp) {
  var req = resp.request;
  var operation = req.service.api.operations[req.operation];
  var shape = operation.output || {};
  var origRules = shape;

  if (origRules.resultWrapper) {
    var tmp = Shape.create({type: 'structure'});
    tmp.members[origRules.resultWrapper] = shape;
    tmp.memberNames = [origRules.resultWrapper];
    util.property(shape, 'name', shape.resultWrapper);
    shape = tmp;
  }

  var parser = new AWS.XML.Parser();

  // TODO: Refactor XML Parser to parse RequestId from response.
  if (shape && shape.members && !shape.members._XAMZRequestId) {
    var requestIdShape = Shape.create(
      { type: 'string' },
      { api: { protocol: 'query' } },
      'requestId'
    );
    shape.members._XAMZRequestId = requestIdShape;
  }

  var data = parser.parse(resp.httpResponse.body.toString(), shape);
  resp.requestId = data._XAMZRequestId || data.requestId;

  if (data._XAMZRequestId) delete data._XAMZRequestId;

  if (origRules.resultWrapper) {
    if (data[origRules.resultWrapper]) {
      util.update(data, data[origRules.resultWrapper]);
      delete data[origRules.resultWrapper];
    }
  }

  resp.data = data;
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var Rest = __webpack_require__(20);
var Json = __webpack_require__(32);
var JsonBuilder = __webpack_require__(30);
var JsonParser = __webpack_require__(31);

function populateBody(req) {
  var builder = new JsonBuilder();
  var input = req.service.api.operations[req.operation].input;

  if (input.payload) {
    var params = {};
    var payloadShape = input.members[input.payload];
    params = req.params[input.payload];
    if (params === undefined) return;

    if (payloadShape.type === 'structure') {
      req.httpRequest.body = builder.build(params, payloadShape);
      applyContentTypeHeader(req);
    } else { // non-JSON payload
      req.httpRequest.body = params;
    }
  } else {
    req.httpRequest.body = builder.build(req.params, input);
    applyContentTypeHeader(req);
  }
}

function applyContentTypeHeader(req) {
  if (!req.httpRequest.headers['Content-Type']) {
    req.httpRequest.headers['Content-Type'] = 'application/json';
  }
}

function buildRequest(req) {
  Rest.buildRequest(req);

  // never send body payload on GET/HEAD/DELETE
  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {
    populateBody(req);
  }
}

function extractError(resp) {
  Json.extractError(resp);
}

function extractData(resp) {
  Rest.extractData(resp);

  var req = resp.request;
  var rules = req.service.api.operations[req.operation].output || {};
  if (rules.payload) {
    var payloadMember = rules.members[rules.payload];
    var body = resp.httpResponse.body;
    if (payloadMember.type === 'structure' || payloadMember.type === 'list') {
      var parser = new JsonParser();
      resp.data[rules.payload] = parser.parse(body, payloadMember);
    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {
      resp.data[rules.payload] = body;
    } else {
      resp.data[rules.payload] = payloadMember.toType(body);
    }
  } else {
    var data = resp.data;
    Json.extractData(resp);
    resp.data = util.merge(data, resp.data);
  }
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var util = __webpack_require__(2);
var Rest = __webpack_require__(20);

function populateBody(req) {
  var input = req.service.api.operations[req.operation].input;
  var builder = new AWS.XML.Builder();
  var params = req.params;

  var payload = input.payload;
  if (payload) {
    var payloadMember = input.members[payload];
    params = params[payload];
    if (params === undefined) return;

    if (payloadMember.type === 'structure') {
      var rootElement = payloadMember.name;
      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
    } else { // non-xml payload
      req.httpRequest.body = params;
    }
  } else {
    req.httpRequest.body = builder.toXML(params, input, input.name ||
      input.shape || util.string.upperFirst(req.operation) + 'Request');
  }
}

function buildRequest(req) {
  Rest.buildRequest(req);

  // never send body payload on GET/HEAD
  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {
    populateBody(req);
  }
}

function extractError(resp) {
  Rest.extractError(resp);

  var data;
  try {
    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());
  } catch (e) {
    data = {
      Code: resp.httpResponse.statusCode,
      Message: resp.httpResponse.statusMessage
    };
  }

  if (data.Errors) data = data.Errors;
  if (data.Error) data = data.Error;
  if (data.Code) {
    resp.error = util.error(new Error(), {
      code: data.Code,
      message: data.Message
    });
  } else {
    resp.error = util.error(new Error(), {
      code: resp.httpResponse.statusCode,
      message: null
    });
  }
}

function extractData(resp) {
  Rest.extractData(resp);

  var parser;
  var req = resp.request;
  var body = resp.httpResponse.body;
  var operation = req.service.api.operations[req.operation];
  var output = operation.output;

  var payload = output.payload;
  if (payload) {
    var payloadMember = output.members[payload];
    if (payloadMember.type === 'structure') {
      parser = new AWS.XML.Parser();
      resp.data[payload] = parser.parse(body.toString(), payloadMember);
    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {
      resp.data[payload] = body;
    } else {
      resp.data[payload] = payloadMember.toType(body);
    }
  } else if (body.length > 0) {
    parser = new AWS.XML.Parser();
    var data = parser.parse(body.toString(), output);
    util.update(resp.data, data);
  }
}

module.exports = {
  buildRequest: buildRequest,
  extractError: extractError,
  extractData: extractData
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 * @!method on(eventName, callback)
 *   Registers an event listener callback for the event given by `eventName`.
 *   Parameters passed to the callback function depend on the individual event
 *   being triggered. See the event documentation for those parameters.
 *
 *   @param eventName [String] the event name to register the listener for
 *   @param callback [Function] the listener callback function
 *   @return [AWS.SequentialExecutor] the same object for chaining
 */
AWS.SequentialExecutor = AWS.util.inherit({

  constructor: function SequentialExecutor() {
    this._events = {};
  },

  /**
   * @api private
   */
  listeners: function listeners(eventName) {
    return this._events[eventName] ? this._events[eventName].slice(0) : [];
  },

  on: function on(eventName, listener) {
    if (this._events[eventName]) {
      this._events[eventName].push(listener);
    } else {
      this._events[eventName] = [listener];
    }
    return this;
  },

  /**
   * @api private
   */
  onAsync: function onAsync(eventName, listener) {
    listener._isAsync = true;
    return this.on(eventName, listener);
  },

  removeListener: function removeListener(eventName, listener) {
    var listeners = this._events[eventName];
    if (listeners) {
      var length = listeners.length;
      var position = -1;
      for (var i = 0; i < length; ++i) {
        if (listeners[i] === listener) {
          position = i;
        }
      }
      if (position > -1) {
        listeners.splice(position, 1);
      }
    }
    return this;
  },

  removeAllListeners: function removeAllListeners(eventName) {
    if (eventName) {
      delete this._events[eventName];
    } else {
      this._events = {};
    }
    return this;
  },

  /**
   * @api private
   */
  emit: function emit(eventName, eventArgs, doneCallback) {
    if (!doneCallback) doneCallback = function() { };
    var listeners = this.listeners(eventName);
    var count = listeners.length;
    this.callListeners(listeners, eventArgs, doneCallback);
    return count > 0;
  },

  /**
   * @api private
   */
  callListeners: function callListeners(listeners, args, doneCallback, prevError) {
    var self = this;
    var error = prevError || null;

    function callNextListener(err) {
      if (err) {
        error = AWS.util.error(error || new Error(), err);
        if (self._haltHandlersOnError) {
          return doneCallback.call(self, error);
        }
      }
      self.callListeners(listeners, args, doneCallback, error);
    }

    while (listeners.length > 0) {
      var listener = listeners.shift();
      if (listener._isAsync) { // asynchronous listener
        listener.apply(self, args.concat([callNextListener]));
        return; // stop here, callNextListener will continue
      } else { // synchronous listener
        try {
          listener.apply(self, args);
        } catch (err) {
          error = AWS.util.error(error || new Error(), err);
        }
        if (error && self._haltHandlersOnError) {
          doneCallback.call(self, error);
          return;
        }
      }
    }
    doneCallback.call(self, error);
  },

  /**
   * Adds or copies a set of listeners from another list of
   * listeners or SequentialExecutor object.
   *
   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]
   *   a list of events and callbacks, or an event emitter object
   *   containing listeners to add to this emitter object.
   * @return [AWS.SequentialExecutor] the emitter object, for chaining.
   * @example Adding listeners from a map of listeners
   *   emitter.addListeners({
   *     event1: [function() { ... }, function() { ... }],
   *     event2: [function() { ... }]
   *   });
   *   emitter.emit('event1'); // emitter has event1
   *   emitter.emit('event2'); // emitter has event2
   * @example Adding listeners from another emitter object
   *   var emitter1 = new AWS.SequentialExecutor();
   *   emitter1.on('event1', function() { ... });
   *   emitter1.on('event2', function() { ... });
   *   var emitter2 = new AWS.SequentialExecutor();
   *   emitter2.addListeners(emitter1);
   *   emitter2.emit('event1'); // emitter2 has event1
   *   emitter2.emit('event2'); // emitter2 has event2
   */
  addListeners: function addListeners(listeners) {
    var self = this;

    // extract listeners if parameter is an SequentialExecutor object
    if (listeners._events) listeners = listeners._events;

    AWS.util.each(listeners, function(event, callbacks) {
      if (typeof callbacks === 'function') callbacks = [callbacks];
      AWS.util.arrayEach(callbacks, function(callback) {
        self.on(event, callback);
      });
    });

    return self;
  },

  /**
   * Registers an event with {on} and saves the callback handle function
   * as a property on the emitter object using a given `name`.
   *
   * @param name [String] the property name to set on this object containing
   *   the callback function handle so that the listener can be removed in
   *   the future.
   * @param (see on)
   * @return (see on)
   * @example Adding a named listener DATA_CALLBACK
   *   var listener = function() { doSomething(); };
   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);
   *
   *   // the following prints: true
   *   console.log(emitter.DATA_CALLBACK == listener);
   */
  addNamedListener: function addNamedListener(name, eventName, callback) {
    this[name] = callback;
    this.addListener(eventName, callback);
    return this;
  },

  /**
   * @api private
   */
  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {
    callback._isAsync = true;
    return this.addNamedListener(name, eventName, callback);
  },

  /**
   * Helper method to add a set of named listeners using
   * {addNamedListener}. The callback contains a parameter
   * with a handle to the `addNamedListener` method.
   *
   * @callback callback function(add)
   *   The callback function is called immediately in order to provide
   *   the `add` function to the block. This simplifies the addition of
   *   a large group of named listeners.
   *   @param add [Function] the {addNamedListener} function to call
   *     when registering listeners.
   * @example Adding a set of named listeners
   *   emitter.addNamedListeners(function(add) {
   *     add('DATA_CALLBACK', 'data', function() { ... });
   *     add('OTHER', 'otherEvent', function() { ... });
   *     add('LAST', 'lastEvent', function() { ... });
   *   });
   *
   *   // these properties are now set:
   *   emitter.DATA_CALLBACK;
   *   emitter.OTHER;
   *   emitter.LAST;
   */
  addNamedListeners: function addNamedListeners(callback) {
    var self = this;
    callback(
      function() {
        self.addNamedListener.apply(self, arguments);
      },
      function() {
        self.addNamedAsyncListener.apply(self, arguments);
      }
    );
    return this;
  }
});

/**
 * {on} is the prefered method.
 * @api private
 */
AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;

module.exports = AWS.SequentialExecutor;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var os = __webpack_require__(668);
var path = __webpack_require__(101);

/**
 * @api private
 */
module.exports = AWS.util.inherit({
  constructor: function SharedIniFile(options) {
    options = options || {};

    this.isConfig = options.isConfig === true;
    this.filename = options.filename || this.getDefaultFilepath();
  },

  ensureFileLoaded: function loadFile() {
    if (!this.parsedContents) {
      this.parsedContents = AWS.util.ini.parse(
        AWS.util.readFileSync(this.filename)
      );
    }
  },

  getDefaultFilepath: function getDefaultFilepath() {
    return path.join(
      this.getHomeDir(),
      '.aws',
      this.isConfig ? 'config' : 'credentials'
    );
  },

  getHomeDir: function getHomeDir() {
    var env = process.env;
    var home = env.HOME ||
      env.USERPROFILE ||
      (env.HOMEPATH ? ((env.HOMEDRIVE || 'C:/') + env.HOMEPATH) : null);

    if (home) {
      return home;
    }

    if (typeof os.homedir === 'function') {
      return os.homedir();
    }

    throw AWS.util.error(
      new Error('Cannot load credentials, HOME path not set')
    );
  },

  getProfile: function loadProfile(profile) {
    this.ensureFileLoaded();

    var profileIndex = profile !== AWS.util.defaultProfile && this.isConfig ?
      'profile ' + profile : profile;

    return this.parsedContents[profileIndex];
  },

  getProfiles: function loadProfileNames() {
    this.ensureFileLoaded();
    var isConfig = this.isConfig;

    return Object.keys(this.parsedContents).map(function(profileName) {
      if (isConfig) {
        return profileName.replace(/^profile\s/, '');
      }

      return profileName;
    });
  }
});


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    var datetime = AWS.util.date.rfc822(date);

    this.request.headers['X-Amz-Date'] = datetime;

    if (credentials.sessionToken) {
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }

    this.request.headers['X-Amzn-Authorization'] =
      this.authorization(credentials, datetime);

  },

  authorization: function authorization(credentials) {
    return 'AWS3 ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'SignedHeaders=' + this.signedHeaders() + ',' +
      'Signature=' + this.signature(credentials);
  },

  signedHeaders: function signedHeaders() {
    var headers = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      headers.push(h.toLowerCase());
    });
    return headers.sort().join(';');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = this.request.headers;
    var parts = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());
    });
    return parts.sort().join('\n') + '\n';
  },

  headersToSign: function headersToSign() {
    var headers = [];
    AWS.util.each(this.request.headers, function iterator(k) {
      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {
        headers.push(k);
      }
    });
    return headers;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push('/');
    parts.push('');
    parts.push(this.canonicalHeaders());
    parts.push(this.request.body);
    return AWS.util.crypto.sha256(parts.join('\n'));
  }

});

module.exports = AWS.Signers.V3;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 */
var cachedSecret = {};

/**
 * @api private
 */
var cacheQueue = [];

/**
 * @api private
 */
var maxCacheEntries = 50;

/**
 * @api private
 */
var v4Identifier = 'aws4_request';

module.exports = {
  /**
   * @api private
   *
   * @param date [String]
   * @param region [String]
   * @param serviceName [String]
   * @return [String]
   */
  createScope: function createScope(date, region, serviceName) {
    return [
      date.substr(0, 8),
      region,
      serviceName,
      v4Identifier
    ].join('/');
  },

  /**
   * @api private
   *
   * @param credentials [Credentials]
   * @param date [String]
   * @param region [String]
   * @param service [String]
   * @param shouldCache [Boolean]
   * @return [String]
   */
  getSigningKey: function getSigningKey(
    credentials,
    date,
    region,
    service,
    shouldCache
  ) {
    var credsIdentifier = AWS.util.crypto
      .hmac(credentials.secretAccessKey, credentials.accessKeyId, 'base64');
    var cacheKey = [credsIdentifier, date, region, service].join('_');
    shouldCache = shouldCache !== false;
    if (shouldCache && (cacheKey in cachedSecret)) {
      return cachedSecret[cacheKey];
    }

    var kDate = AWS.util.crypto.hmac(
      'AWS4' + credentials.secretAccessKey,
      date,
      'buffer'
    );
    var kRegion = AWS.util.crypto.hmac(kDate, region, 'buffer');
    var kService = AWS.util.crypto.hmac(kRegion, service, 'buffer');

    var signingKey = AWS.util.crypto.hmac(kService, v4Identifier, 'buffer');
    if (shouldCache) {
      cachedSecret[cacheKey] = signingKey;
      cacheQueue.push(cacheKey);
      if (cacheQueue.length > maxCacheEntries) {
        // remove the oldest entry (not the least recently used)
        delete cachedSecret[cacheQueue.shift()];
      }
    }

    return signingKey;
  },

  /**
   * @api private
   *
   * Empties the derived signing key cache. Made available for testing purposes
   * only.
   */
  emptyCache: function emptyCache() {
    cachedSecret = {};
    cacheQueue = [];
  }
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRhymes = getRhymes;
function getRhymes() {
  return rhymes;
}
var rhymes = { "AIRCRAFT": ["EH1", "R", "K", "R", "AE2", "F", "T"], "AIRFARE": ["EH1", "R", "F", "EH2", "R"], "AIRLINE": ["EH1", "R", "L", "AY2", "N"], "AIRLINES": ["EH1", "R", "L", "AY2", "N", "Z"], "AIRPLANE": ["EH1", "R", "P", "L", "EY2", "N"], "AIRPORT": ["EH1", "R", "P", "AO2", "R", "T"], "AIRPORTS": ["EH1", "R", "P", "AO2", "R", "T", "S"], "AKA": ["AA1", "K", "AH0"], "AL": ["AE1", "L"], "ALA": ["AE1", "L", "AH0"], "ALABAMA": ["AE2", "L", "AH0", "B", "AE1", "M", "AH0"], "ALAN": ["AE1", "L", "AH0", "N"], "ALARM": ["AH0", "L", "AA1", "R", "M"], "ALASKA": ["AH0", "L", "AE1", "S", "K", "AH0"], "ALBANIA": ["AE0", "L", "B", "EY1", "N", "IY0", "AH0"], "ALBANY": ["AO1", "L", "B", "AH0", "N", "IY0"], "ALBERT": ["AE1", "L", "B", "ER0", "T"], "ALBERTA": ["AE0", "L", "B", "ER1", "T", "AH0"], "ALBUM": ["AE1", "L", "B", "AH0", "M"], "ALBUMS": ["AE1", "L", "B", "AH0", "M", "Z"], "ALBUQUERQUE": ["AE1", "L", "B", "AH0", "K", "ER0", "K", "IY0"], "ALCOHOL": ["AE1", "L", "K", "AH0", "HH", "AA2", "L"], "ALERT": ["AH0", "L", "ER1", "T"], "ALERTS": ["AH0", "L", "ER1", "T", "S"], "ALEX": ["AE1", "L", "AH0", "K", "S"], "ALEXANDER": ["AE2", "L", "IH0", "G", "Z", "AE1", "N", "D", "ER0"], "ALEXANDRIA": ["AE2", "L", "AH0", "G", "Z", "AE1", "N", "D", "R", "IY0", "AH0"], "ALFRED": ["AE1", "L", "F", "R", "IH0", "D"], "ALGEBRA": ["AE1", "L", "JH", "AH0", "B", "R", "AH0"], "ALGERIA": ["AE0", "L", "JH", "IH1", "R", "IY0", "AH0"], "ALGORITHM": ["AE1", "L", "G", "ER0", "IH2", "DH", "AH0", "M"], "ALGORITHMS": ["AE1", "L", "G", "ER0", "IH2", "DH", "AH0", "M", "Z"], "ALI": ["AA1", "L", "IY0"], "ALIAS": ["EY1", "L", "IY0", "AH0", "S"], "ALICE": ["AE1", "L", "IH0", "S"], "ALIEN": ["EY1", "L", "IY0", "AH0", "N"], "ALIGN": ["AH0", "L", "AY1", "N"], "ALIGNMENT": ["AH0", "L", "AY1", "N", "M", "AH0", "N", "T"], "ALIKE": ["AH0", "L", "AY1", "K"], "ALIVE": ["AH0", "L", "AY1", "V"], "ALL": ["AO1", "L"], "ALLAH": ["AA1", "L", "AH0"], "ALLAN": ["AE1", "L", "AH0", "N"], "ALLEGED": ["AH0", "L", "EH1", "JH", "D"], "ALLEN": ["AE1", "L", "AH0", "N"], "ALLERGY": ["AE1", "L", "ER0", "JH", "IY0"], "ALLIANCE": ["AH0", "L", "AY1", "AH0", "N", "S"], "ALLIED": ["AH0", "L", "AY1", "D"], "ALLOCATED": ["AE1", "L", "AH0", "K", "EY2", "T", "IH0", "D"], "ALLOCATION": ["AE2", "L", "AH0", "K", "EY1", "SH", "AH0", "N"], "ALLOW": ["AH0", "L", "AW1"], "ALLOWANCE": ["AH0", "L", "AW1", "AH0", "N", "S"], "ALLOWED": ["AH0", "L", "AW1", "D"], "ALLOWING": ["AH0", "L", "AW1", "IH0", "NG"], "ALLOWS": ["AH0", "L", "AW1", "Z"], "ALLOY": ["AE1", "L", "OY2"], "ALMOST": ["AO1", "L", "M", "OW2", "S", "T"], "ALONE": ["AH0", "L", "OW1", "N"], "ALONG": ["AH0", "L", "AO1", "NG"], "ALOT": ["AH0", "L", "AA1", "T"], "ALPHA": ["AE1", "L", "F", "AH0"], "ALPHABETICAL": ["AE2", "L", "F", "AH0", "B", "EH1", "T", "IH0", "K", "AH0", "L"], "ALPINE": ["AE1", "L", "P", "AY2", "N"], "ALREADY": ["AO0", "L", "R", "EH1", "D", "IY0"], "ALSO": ["AO1", "L", "S", "OW0"], "ALT": ["AA1", "L", "T"], "ALTER": ["AO1", "L", "T", "ER0"], "ALTERED": ["AO1", "L", "T", "ER0", "D"], "ALTERNATE": ["AO1", "L", "T", "ER0", "N", "AH0", "T"], "ALTERNATIVE": ["AO0", "L", "T", "ER1", "N", "AH0", "T", "IH0", "V"], "ALTERNATIVELY": ["AO0", "L", "T", "ER1", "N", "AH0", "T", "IH0", "V", "L", "IY0"], "ALTERNATIVES": ["AO0", "L", "T", "ER1", "N", "AH0", "T", "IH0", "V", "Z"], "ALTHOUGH": ["AO2", "L", "DH", "OW1"], "ALTO": ["AE1", "L", "T", "OW0"], "ALUMINIUM": ["AH0", "L", "UW1", "M", "IH0", "N", "AH0", "M"], "ALUMINUM": ["AH0", "L", "UW1", "M", "AH0", "N", "AH0", "M"], "ALUMNI": ["AH0", "L", "AH1", "M", "N", "AY2"], "ALWAYS": ["AO1", "L", "W", "EY2", "Z"], "AM": ["AE1", "M"], "AMANDA": ["AH0", "M", "AE1", "N", "D", "AH0"], "AMATEUR": ["AE1", "M", "AH0", "CH", "ER2"], "AMAZING": ["AH0", "M", "EY1", "Z", "IH0", "NG"], "AMAZON": ["AE1", "M", "AH0", "Z", "AA2", "N"], "AMBASSADOR": ["AE0", "M", "B", "AE1", "S", "AH0", "D", "ER0"], "AMBER": ["AE1", "M", "B", "ER0"], "AMBIENT": ["AE1", "M", "B", "IY0", "AH0", "N", "T"], "AMD": ["EY1", "EH2", "M", "D", "IY1"], "AMEND": ["AH0", "M", "EH1", "N", "D"], "AMENDED": ["AH0", "M", "EH1", "N", "D", "IH0", "D"], "AMENDMENT": ["AH0", "M", "EH1", "N", "D", "M", "AH0", "N", "T"], "AMENDMENTS": ["AH0", "M", "EH1", "N", "D", "M", "AH0", "N", "T", "S"], "AMENITIES": ["AH0", "M", "EH1", "N", "AH0", "T", "IY0", "Z"], "AMERICA": ["AH0", "M", "EH1", "R", "IH0", "K", "AH0"], "AMERICAN": ["AH0", "M", "EH1", "R", "IH0", "K", "AH0", "N"], "AMERICANS": ["AH0", "M", "EH1", "R", "IH0", "K", "AH0", "N", "Z"], "AMERICAS": ["AH0", "M", "EH1", "R", "IH0", "K", "AH0", "Z"], "AMINO": ["AH0", "M", "IY1", "N", "OW0"], "AMONG": ["AH0", "M", "AH1", "NG"], "AMONGST": ["AH0", "M", "AH1", "NG", "S", "T"], "AMOUNT": ["AH0", "M", "AW1", "N", "T"], "AMOUNTS": ["AH0", "M", "AW1", "N", "T", "S"], "AMP": ["AE1", "M", "P"], "AMPLIFIER": ["AE1", "M", "P", "L", "AH0", "F", "AY2", "ER0"], "AMSTERDAM": ["AE1", "M", "S", "T", "ER0", "D", "AE2", "M"], "AMY": ["EY1", "M", "IY0"], "AN": ["AE1", "N"], "ANA": ["AA1", "N", "AH0"], "ANAHEIM": ["AE1", "N", "AH0", "HH", "AY2", "M"], "ANAL": ["EY1", "N", "AH0", "L"], "ANALOG": ["AE1", "N", "AH0", "L", "AO2", "G"], "ANALYSES": ["AE0", "N", "AE1", "L", "IH0", "S", "IY2", "Z"], "ANALYSIS": ["AE0", "N", "AE1", "L", "IH0", "S", "IH0", "S"], "ANALYST": ["AE1", "N", "AH0", "L", "IH0", "S", "T"], "ANALYSTS": ["AE1", "N", "AH0", "L", "IH0", "S", "T", "S"], "ANALYTICAL": ["AE2", "N", "AH0", "L", "IH1", "T", "IH0", "K", "AH0", "L"], "ANALYZE": ["AE1", "N", "AH0", "L", "AY2", "Z"], "ANALYZED": ["AE1", "N", "AH0", "L", "AY2", "Z", "D"], "ANATOMY": ["AH0", "N", "AE1", "T", "AH0", "M", "IY0"], "ANCHOR": ["AE1", "NG", "K", "ER0"], "ANCIENT": ["EY1", "N", "CH", "AH0", "N", "T"], "AND": ["AH0", "N", "D"], "ANDERSON": ["AE1", "N", "D", "ER0", "S", "AH0", "N"], "ANDORRA": ["AE0", "N", "D", "AO1", "R", "AH0"], "ANDREA": ["AE1", "N", "D", "R", "IY2", "AH0"], "ANDREAS": ["AA0", "N", "D", "R", "EY1", "AH0", "S"], "ANDREW": ["AE1", "N", "D", "R", "UW0"], "ANDREWS": ["AE1", "N", "D", "R", "UW2", "Z"], "ANDY": ["AE1", "N", "D", "IY0"], "ANGEL": ["EY1", "N", "JH", "AH0", "L"], "ANGELA": ["AE1", "N", "JH", "AH0", "L", "AH0"], "ANGELES": ["AE1", "N", "JH", "AH0", "L", "IH0", "S"], "ANGELS": ["EY1", "N", "JH", "AH0", "L", "Z"], "ANGER": ["AE1", "NG", "G", "ER0"], "ANGLE": ["AE1", "NG", "G", "AH0", "L"], "ANGOLA": ["AE0", "NG", "G", "OW1", "L", "AH0"], "ANGRY": ["AE1", "NG", "G", "R", "IY0"], "ANIMAL": ["AE1", "N", "AH0", "M", "AH0", "L"], "ANIMALS": ["AE1", "N", "AH0", "M", "AH0", "L", "Z"], "ANIMATED": ["AE1", "N", "AH0", "M", "EY2", "T", "IH0", "D"], "ANIMATION": ["AE2", "N", "AH0", "M", "EY1", "SH", "AH0", "N"], "ANN": ["AE1", "N"], "ANNA": ["AE1", "N", "AH0"], "ANNE": ["AE1", "N"], "ANNEX": ["AE1", "N", "EH2", "K", "S"], "ANNIE": ["AE1", "N", "IY0"], "ANNIVERSARY": ["AE2", "N", "AH0", "V", "ER1", "S", "ER0", "IY0"], "ANNOTATED": ["AE2", "N", "AH0", "T", "EY1", "T", "IH0", "D"], "ANNOTATION": ["AE2", "N", "AH0", "T", "EY1", "SH", "AH0", "N"], "ANNOUNCE": ["AH0", "N", "AW1", "N", "S"], "ANNOUNCED": ["AH0", "N", "AW1", "N", "S", "T"], "ANNOUNCEMENT": ["AH0", "N", "AW1", "N", "S", "M", "EH0", "N", "T"], "ANNOUNCEMENTS": ["AH0", "N", "AW1", "N", "S", "M", "EH0", "N", "T", "S"], "ANNOUNCES": ["AH0", "N", "AW1", "N", "S", "IH0", "Z"], "ANNOYING": ["AH0", "N", "OY1", "IH0", "NG"], "ANNUAL": ["AE1", "N", "Y", "UW0", "AH0", "L"], "ANNUALLY": ["AE1", "N", "Y", "UW0", "AH0", "L", "IY0"], "ANONYMOUS": ["AH0", "N", "AA1", "N", "AH0", "M", "AH0", "S"], "ANOTHER": ["AH0", "N", "AH1", "DH", "ER0"], "ANSWER": ["AE1", "N", "S", "ER0"], "ANSWERED": ["AE1", "N", "S", "ER0", "D"], "ANSWERING": ["AE1", "N", "S", "ER0", "IH0", "NG"], "ANSWERS": ["AE1", "N", "S", "ER0", "Z"], "ANT": ["AE1", "N", "T"], "ANTARCTICA": ["AE2", "N", "T", "AA1", "R", "K", "T", "IH0", "K", "AH0"], "ANTENNA": ["AE0", "N", "T", "EH1", "N", "AH0"], "ANTHONY": ["AE1", "N", "TH", "AO0", "N", "IY2"], "ANTHROPOLOGY": ["AE2", "N", "TH", "R", "AH0", "P", "AA1", "L", "AH0", "JH", "IY0"], "ANTI": ["AE1", "N", "T", "IY2"], "ANTIBODIES": ["AE1", "N", "T", "IH0", "B", "AA2", "D", "IY0", "Z"], "ANTIBODY": ["AE1", "N", "T", "IH0", "B", "AA2", "D", "IY0"], "ANTICIPATED": ["AE0", "N", "T", "IH1", "S", "AH0", "P", "EY2", "T", "AH0", "D"], "ANTIGUA": ["AE0", "N", "T", "IY1", "G", "W", "AH0"], "ANTIQUE": ["AE0", "N", "T", "IY1", "K"], "ANTIQUES": ["AE0", "N", "T", "IY1", "K", "S"], "ANTONIO": ["AE0", "N", "T", "OW1", "N", "IY0", "OW0"], "ANXIETY": ["AE0", "NG", "Z", "AY1", "AH0", "T", "IY0"], "ANY": ["EH1", "N", "IY0"], "ANYBODY": ["EH1", "N", "IY0", "B", "AH0", "D", "IY0"], "ANYMORE": ["EH2", "N", "IY0", "M", "AO1", "R"], "ANYONE": ["EH1", "N", "IY0", "W", "AH2", "N"], "ANYTHING": ["EH1", "N", "IY0", "TH", "IH2", "NG"], "ANYTIME": ["EH1", "N", "IY0", "T", "AY2", "M"], "ANYWAY": ["EH1", "N", "IY0", "W", "EY2"], "ANYWHERE": ["EH1", "N", "IY0", "W", "EH2", "R"], "AOL": ["EY1", "OW1", "EH1", "L"], "AP": ["EY2", "P", "IY1"], "APACHE": ["AH0", "P", "AE1", "CH", "IY0"], "APART": ["AH0", "P", "AA1", "R", "T"], "APARTMENT": ["AH0", "P", "AA1", "R", "T", "M", "AH0", "N", "T"], "APARTMENTS": ["AH0", "P", "AA1", "R", "T", "M", "AH0", "N", "T", "S"], "APOLLO": ["AH0", "P", "AA1", "L", "OW0"], "APP": ["AE1", "P"], "APPARATUS": ["AE2", "P", "ER0", "AE1", "T", "AH0", "S"], "APPAREL": ["AH0", "P", "AE1", "R", "AH0", "L"], "APPARENT": ["AH0", "P", "EH1", "R", "AH0", "N", "T"], "APPARENTLY": ["AH0", "P", "EH1", "R", "AH0", "N", "T", "L", "IY0"], "APPEAL": ["AH0", "P", "IY1", "L"], "APPEALS": ["AH0", "P", "IY1", "L", "Z"], "APPEAR": ["AH0", "P", "IH1", "R"], "APPEARANCE": ["AH0", "P", "IH1", "R", "AH0", "N", "S"], "APPEARED": ["AH0", "P", "IH1", "R", "D"], "APPEARING": ["AH0", "P", "IH1", "R", "IH0", "NG"], "APPEARS": ["AH0", "P", "IH1", "R", "Z"], "APPENDIX": ["AH0", "P", "EH1", "N", "D", "IH0", "K", "S"], "APPLE": ["AE1", "P", "AH0", "L"], "APPLIANCE": ["AH0", "P", "L", "AY1", "AH0", "N", "S"], "APPLIANCES": ["AH0", "P", "L", "AY1", "AH0", "N", "S", "IH0", "Z"], "APPLICABLE": ["AE1", "P", "L", "AH0", "K", "AH0", "B", "AH0", "L"], "APPLICANT": ["AE1", "P", "L", "IH0", "K", "AH0", "N", "T"], "APPLICANTS": ["AE1", "P", "L", "IH0", "K", "AH0", "N", "T", "S"], "APPLICATION": ["AE2", "P", "L", "AH0", "K", "EY1", "SH", "AH0", "N"], "APPLICATIONS": ["AE2", "P", "L", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "APPLIED": ["AH0", "P", "L", "AY1", "D"], "APPLIES": ["AH0", "P", "L", "AY1", "Z"], "APPLY": ["AH0", "P", "L", "AY1"], "APPLYING": ["AH0", "P", "L", "AY1", "IH0", "NG"], "APPOINTED": ["AH0", "P", "OY1", "N", "T", "AH0", "D"], "APPOINTMENT": ["AH0", "P", "OY1", "N", "T", "M", "AH0", "N", "T"], "APPOINTMENTS": ["AH0", "P", "OY1", "N", "T", "M", "AH0", "N", "T", "S"], "APPRAISAL": ["AH0", "P", "R", "EY1", "Z", "AH0", "L"], "APPRECIATE": ["AH0", "P", "R", "IY1", "SH", "IY0", "EY2", "T"], "APPRECIATED": ["AH0", "P", "R", "IY1", "SH", "IY0", "EY2", "T", "IH0", "D"], "APPRECIATION": ["AH0", "P", "R", "IY2", "SH", "IY0", "EY1", "SH", "AH0", "N"], "APPROACH": ["AH0", "P", "R", "OW1", "CH"], "APPROACHES": ["AH0", "P", "R", "OW1", "CH", "IH0", "Z"], "APPROPRIATE": ["AH0", "P", "R", "OW1", "P", "R", "IY0", "AH0", "T"], "APPROPRIATIONS": ["AH0", "P", "R", "OW2", "P", "R", "IY0", "EY1", "SH", "AH0", "N", "Z"], "APPROVAL": ["AH0", "P", "R", "UW1", "V", "AH0", "L"], "APPROVE": ["AH0", "P", "R", "UW1", "V"], "APPROVED": ["AH0", "P", "R", "UW1", "V", "D"], "APPROXIMATE": ["AH0", "P", "R", "AA1", "K", "S", "AH0", "M", "AH0", "T"], "APPROXIMATELY": ["AH0", "P", "R", "AA1", "K", "S", "AH0", "M", "AH0", "T", "L", "IY0"], "APPS": ["AE1", "P", "S"], "APRIL": ["EY1", "P", "R", "AH0", "L"], "APT": ["AE1", "P", "T"], "AQUA": ["AE1", "K", "W", "AH0"], "AQUARIUM": ["AH0", "K", "W", "EH1", "R", "IY0", "AH0", "M"], "AQUATIC": ["AH0", "K", "W", "AA1", "T", "IH0", "K"], "AR": ["AA1", "R"], "ARAB": ["AE1", "R", "AH0", "B"], "ARABIA": ["AH0", "R", "EY1", "B", "IY0", "AH0"], "ARABIC": ["AE1", "R", "AH0", "B", "IH0", "K"], "ARBITRARY": ["AA1", "R", "B", "AH0", "T", "R", "EH2", "R", "IY0"], "ARBITRATION": ["AA2", "R", "B", "IH0", "T", "R", "EY1", "SH", "AH0", "N"], "ARC": ["AA1", "R", "K"], "ARCADE": ["AA0", "R", "K", "EY1", "D"], "ARCH": ["AA1", "R", "CH"], "ARCHITECT": ["AA1", "R", "K", "AH0", "T", "EH2", "K", "T"], "ARCHITECTS": ["AA1", "R", "K", "AH0", "T", "EH2", "K", "T", "S"], "ARCHITECTURAL": ["AA2", "R", "K", "AH0", "T", "EH1", "K", "CH", "ER0", "AH0", "L"], "ARCHITECTURE": ["AA1", "R", "K", "AH0", "T", "EH2", "K", "CH", "ER0"], "ARCHIVE": ["AA1", "R", "K", "AY2", "V"], "ARCHIVES": ["AA1", "R", "K", "AY2", "V", "Z"], "ARCTIC": ["AA1", "R", "K", "T", "IH0", "K"], "ARE": ["AA1", "R"], "AREA": ["EH1", "R", "IY0", "AH0"], "AREAS": ["EH1", "R", "IY0", "AH0", "Z"], "ARENA": ["ER0", "IY1", "N", "AH0"], "ARGENTINA": ["AA2", "R", "JH", "AH0", "N", "T", "IY1", "N", "AH0"], "ARGUE": ["AA1", "R", "G", "Y", "UW0"], "ARGUED": ["AA1", "R", "G", "Y", "UW0", "D"], "ARGUMENT": ["AA1", "R", "G", "Y", "AH0", "M", "AH0", "N", "T"], "ARGUMENTS": ["AA1", "R", "G", "Y", "AH0", "M", "AH0", "N", "T", "S"], "ARISE": ["ER0", "AY1", "Z"], "ARISING": ["ER0", "AY1", "Z", "IH0", "NG"], "ARIZONA": ["EH2", "R", "IH0", "Z", "OW1", "N", "AH0"], "ARKANSAS": ["AA1", "R", "K", "AH0", "N", "S", "AA2"], "ARLINGTON": ["AA1", "R", "L", "IH0", "NG", "T", "AH0", "N"], "ARM": ["AA1", "R", "M"], "ARMED": ["AA1", "R", "M", "D"], "ARMENIA": ["AA0", "R", "M", "IY1", "N", "IY0", "AH0"], "ARMOR": ["AA1", "R", "M", "ER0"], "ARMS": ["AA1", "R", "M", "Z"], "ARMSTRONG": ["AA1", "R", "M", "S", "T", "R", "AA2", "NG"], "ARMY": ["AA1", "R", "M", "IY0"], "ARNOLD": ["AA1", "R", "N", "AH0", "L", "D"], "AROUND": ["ER0", "AW1", "N", "D"], "ARRANGE": ["ER0", "EY1", "N", "JH"], "ARRANGED": ["ER0", "EY1", "N", "JH", "D"], "ARRANGEMENT": ["ER0", "EY1", "N", "JH", "M", "AH0", "N", "T"], "ARRANGEMENTS": ["ER0", "EY1", "N", "JH", "M", "AH0", "N", "T", "S"], "ARRAY": ["ER0", "EY1"], "ARREST": ["ER0", "EH1", "S", "T"], "ARRESTED": ["ER0", "EH1", "S", "T", "AH0", "D"], "ARRIVAL": ["ER0", "AY1", "V", "AH0", "L"], "ARRIVALS": ["ER0", "AY1", "V", "AH0", "L", "Z"], "ARRIVE": ["ER0", "AY1", "V"], "ARRIVED": ["ER0", "AY1", "V", "D"], "ARRIVES": ["ER0", "AY1", "V", "Z"], "ARROW": ["AE1", "R", "OW0"], "ART": ["AA1", "R", "T"], "ARTHRITIS": ["AA0", "R", "TH", "R", "AY1", "T", "AH0", "S"], "ARTHUR": ["AA1", "R", "TH", "ER0"], "ARTICLE": ["AA1", "R", "T", "AH0", "K", "AH0", "L"], "ARTICLES": ["AA1", "R", "T", "AH0", "K", "AH0", "L", "Z"], "ARTIFICIAL": ["AA2", "R", "T", "AH0", "F", "IH1", "SH", "AH0", "L"], "ARTIST": ["AA1", "R", "T", "AH0", "S", "T"], "ARTISTIC": ["AA0", "R", "T", "IH1", "S", "T", "IH0", "K"], "ARTISTS": ["AA1", "R", "T", "IH0", "S", "T", "S"], "ARTS": ["AA1", "R", "T", "S"], "ARTWORK": ["AA1", "R", "T", "W", "ER2", "K"], "ARUBA": ["ER0", "UW1", "B", "AH0"], "AS": ["AE1", "Z"], "ASBESTOS": ["AE0", "S", "B", "EH1", "S", "T", "AH0", "S"], "ASCII": ["AE1", "S", "K", "IY0"], "ASH": ["AE1", "SH"], "ASHLEY": ["AE1", "SH", "L", "IY0"], "ASIA": ["EY1", "ZH", "AH0"], "ASIAN": ["EY1", "ZH", "AH0", "N"], "ASIDE": ["AH0", "S", "AY1", "D"], "ASK": ["AE1", "S", "K"], "ASKED": ["AE1", "S", "K", "T"], "ASKING": ["AE1", "S", "K", "IH0", "NG"], "ASKS": ["AE1", "S", "K", "S"], "ASP": ["AE1", "S", "P"], "ASPECT": ["AE1", "S", "P", "EH2", "K", "T"], "ASPECTS": ["AE1", "S", "P", "EH2", "K", "T", "S"], "ASS": ["AE1", "S"], "ASSAULT": ["AH0", "S", "AO1", "L", "T"], "ASSEMBLED": ["AH0", "S", "EH1", "M", "B", "AH0", "L", "D"], "ASSEMBLY": ["AH0", "S", "EH1", "M", "B", "L", "IY0"], "ASSESS": ["AH0", "S", "EH1", "S"], "ASSESSED": ["AH0", "S", "EH1", "S", "T"], "ASSESSING": ["AH0", "S", "EH1", "S", "IH0", "NG"], "ASSESSMENT": ["AH0", "S", "EH1", "S", "M", "AH0", "N", "T"], "ASSESSMENTS": ["AH0", "S", "EH1", "S", "M", "AH0", "N", "T", "S"], "ASSET": ["AE1", "S", "EH2", "T"], "ASSETS": ["AE1", "S", "EH2", "T", "S"], "ASSIGN": ["AH0", "S", "AY1", "N"], "ASSIGNED": ["AH0", "S", "AY1", "N", "D"], "ASSIGNMENT": ["AH0", "S", "AY1", "N", "M", "AH0", "N", "T"], "ASSIGNMENTS": ["AH0", "S", "AY1", "N", "M", "AH0", "N", "T", "S"], "ASSIST": ["AH0", "S", "IH1", "S", "T"], "ASSISTANCE": ["AH0", "S", "IH1", "S", "T", "AH0", "N", "S"], "ASSISTANT": ["AH0", "S", "IH1", "S", "T", "AH0", "N", "T"], "ASSISTED": ["AH0", "S", "IH1", "S", "T", "AH0", "D"], "ASSISTS": ["AH0", "S", "IH1", "S", "T", "S"], "ASSOCIATE": ["AH0", "S", "OW1", "S", "IY0", "AH0", "T"], "ASSOCIATED": ["AH0", "S", "OW1", "S", "IY0", "EY2", "T", "AH0", "D"], "ASSOCIATES": ["AH0", "S", "OW1", "S", "IY0", "AH0", "T", "S"], "ASSOCIATION": ["AH0", "S", "OW2", "S", "IY0", "EY1", "SH", "AH0", "N"], "ASSOCIATIONS": ["AH0", "S", "OW2", "S", "IY0", "EY1", "SH", "AH0", "N", "Z"], "ASSUME": ["AH0", "S", "UW1", "M"], "ASSUMED": ["AH0", "S", "UW1", "M", "D"], "ASSUMES": ["AH0", "S", "UW1", "M", "Z"], "ASSUMING": ["AH0", "S", "UW1", "M", "IH0", "NG"], "ASSUMPTION": ["AH0", "S", "AH1", "M", "P", "SH", "AH0", "N"], "ASSUMPTIONS": ["AH0", "S", "AH1", "M", "P", "SH", "AH0", "N", "Z"], "ASSURANCE": ["AH0", "SH", "UH1", "R", "AH0", "N", "S"], "ASSURE": ["AH0", "SH", "UH1", "R"], "ASSURED": ["AH0", "SH", "UH1", "R", "D"], "ASTHMA": ["AE1", "Z", "M", "AH0"], "ASTROLOGY": ["AH0", "S", "T", "R", "AA1", "L", "AH0", "JH", "IY0"], "ASTRONOMY": ["AH0", "S", "T", "R", "AA1", "N", "AH0", "M", "IY0"], "AT": ["AE1", "T"], "ATA": ["AA1", "T", "AH0"], "ATE": ["EY1", "T"], "ATHENS": ["AE1", "TH", "AH0", "N", "Z"], "ATHLETES": ["AE1", "TH", "L", "IY2", "T", "S"], "ATHLETIC": ["AE0", "TH", "L", "EH1", "T", "IH0", "K"], "ATHLETICS": ["AE0", "TH", "L", "EH1", "T", "IH0", "K", "S"], "ATLANTA": ["AE0", "T", "L", "AE1", "N", "T", "AH0"], "ATLANTIC": ["AH0", "T", "L", "AE1", "N", "T", "IH0", "K"], "ATLAS": ["AE1", "T", "L", "AH0", "S"], "ATM": ["EY1", "T", "IY2", "EH1", "M"], "ATMOSPHERE": ["AE1", "T", "M", "AH0", "S", "F", "IH2", "R"], "ATMOSPHERIC": ["AE2", "T", "M", "AH0", "S", "F", "EH1", "R", "IH0", "K"], "ATOM": ["AE1", "T", "AH0", "M"], "ATOMIC": ["AH0", "T", "AA1", "M", "IH0", "K"], "ATTACH": ["AH0", "T", "AE1", "CH"], "ATTACHED": ["AH0", "T", "AE1", "CH", "T"], "ATTACHMENT": ["AH0", "T", "AE1", "CH", "M", "AH0", "N", "T"], "ATTACHMENTS": ["AH0", "T", "AE1", "CH", "M", "AH0", "N", "T", "S"], "ATTACK": ["AH0", "T", "AE1", "K"], "ATTACKED": ["AH0", "T", "AE1", "K", "T"], "ATTACKS": ["AH0", "T", "AE1", "K", "S"], "ATTEMPT": ["AH0", "T", "EH1", "M", "P", "T"], "ATTEMPTED": ["AH0", "T", "EH1", "M", "P", "T", "AH0", "D"], "ATTEMPTING": ["AH0", "T", "EH1", "M", "P", "T", "IH0", "NG"], "ATTEMPTS": ["AH0", "T", "EH1", "M", "P", "T", "S"], "ATTEND": ["AH0", "T", "EH1", "N", "D"], "ATTENDANCE": ["AH0", "T", "EH1", "N", "D", "AH0", "N", "S"], "ATTENDED": ["AH0", "T", "EH1", "N", "D", "AH0", "D"], "ATTENDING": ["AH0", "T", "EH1", "N", "D", "IH0", "NG"], "ATTENTION": ["AH0", "T", "EH1", "N", "SH", "AH0", "N"], "ATTITUDE": ["AE1", "T", "AH0", "T", "UW2", "D"], "ATTITUDES": ["AE1", "T", "AH0", "T", "UW2", "D", "Z"], "ATTORNEY": ["AH0", "T", "ER1", "N", "IY0"], "ATTORNEYS": ["AH0", "T", "ER1", "N", "IY0", "Z"], "ATTRACT": ["AH0", "T", "R", "AE1", "K", "T"], "ATTRACTION": ["AH0", "T", "R", "AE1", "K", "SH", "AH0", "N"], "ATTRACTIONS": ["AH0", "T", "R", "AE1", "K", "SH", "AH0", "N", "Z"], "ATTRACTIVE": ["AH0", "T", "R", "AE1", "K", "T", "IH0", "V"], "ATTRIBUTE": ["AH0", "T", "R", "IH1", "B", "Y", "UW2", "T"], "ATTRIBUTES": ["AH0", "T", "R", "IH1", "B", "Y", "UW2", "T", "S"], "AU": ["OW1"], "AUBURN": ["AA1", "B", "ER0", "N"], "AUCKLAND": ["AA1", "K", "L", "AH0", "N", "D"], "AUCTION": ["AA1", "K", "SH", "AH0", "N"], "AUCTIONS": ["AA1", "K", "SH", "AH0", "N", "Z"], "AUD": ["AO1", "D"], "AUDI": ["AO1", "D", "IY0"], "AUDIENCE": ["AA1", "D", "IY0", "AH0", "N", "S"], "AUDIO": ["AA1", "D", "IY0", "OW2"], "AUDIT": ["AO1", "D", "IH0", "T"], "AUDITOR": ["AO1", "D", "IH0", "T", "ER0"], "AUG": ["AO1", "G", "AH0", "S", "T"], "AUGUST": ["AA1", "G", "AH0", "S", "T"], "AURORA": ["ER0", "AO1", "R", "AH0"], "AUS": ["AW1", "Z"], "AUSTIN": ["AO1", "S", "T", "AH0", "N"], "AUSTRALIA": ["AO0", "S", "T", "R", "EY1", "L", "Y", "AH0"], "AUSTRALIAN": ["AO0", "S", "T", "R", "EY1", "L", "Y", "AH0", "N"], "AUSTRIA": ["AO1", "S", "T", "R", "IY0", "AH0"], "AUTHENTIC": ["AH0", "TH", "EH1", "N", "T", "IH0", "K"], "AUTHENTICATION": ["AO0", "TH", "EH2", "N", "T", "AH0", "K", "EY1", "SH", "AH0", "N"], "AUTHOR": ["AO1", "TH", "ER0"], "AUTHORITIES": ["AH0", "TH", "AO1", "R", "AH0", "T", "IY0", "Z"], "AUTHORITY": ["AH0", "TH", "AO1", "R", "AH0", "T", "IY0"], "AUTHORIZATION": ["AO2", "TH", "ER0", "AH0", "Z", "EY1", "SH", "AH0", "N"], "AUTHORIZED": ["AO1", "TH", "ER0", "AY2", "Z", "D"], "AUTHORS": ["AO1", "TH", "ER0", "Z"], "AUTO": ["AO1", "T", "OW0"], "AUTOMATED": ["AO1", "T", "AH0", "M", "EY2", "T", "IH0", "D"], "AUTOMATIC": ["AO2", "T", "AH0", "M", "AE1", "T", "IH0", "K"], "AUTOMATICALLY": ["AO2", "T", "AH0", "M", "AE1", "T", "IH0", "K", "L", "IY0"], "AUTOMATION": ["AO0", "T", "AH0", "M", "EY1", "SH", "AH0", "N"], "AUTOMOBILE": ["AO1", "T", "AH0", "M", "OW0", "B", "IY2", "L"], "AUTOMOBILES": ["AO1", "T", "AH0", "M", "OW0", "B", "IY2", "L", "Z"], "AUTOMOTIVE": ["AO2", "T", "AH0", "M", "OW1", "T", "IH0", "V"], "AUTOS": ["AO1", "T", "OW0", "Z"], "AUTUMN": ["AO1", "T", "AH0", "M"], "AV": ["EY2", "V", "IY1"], "AVAILABILITY": ["AH0", "V", "EY2", "L", "AH0", "B", "IH1", "L", "AH0", "T", "IY0"], "AVAILABLE": ["AH0", "V", "EY1", "L", "AH0", "B", "AH0", "L"], "AVATAR": ["AE1", "V", "AH0", "T", "AA2", "R"], "AVE": ["AA1", "V", "EY2"], "AVENUE": ["AE1", "V", "AH0", "N", "UW2"], "AVERAGE": ["AE1", "V", "ER0", "IH0", "JH"], "AVI": ["AA1", "V", "IY0"], "AVIATION": ["EY2", "V", "IY0", "EY1", "SH", "AH0", "N"], "AVOID": ["AH0", "V", "OY1", "D"], "AVOIDING": ["AH0", "V", "OY1", "D", "IH0", "NG"], "AVON": ["EY1", "V", "AA0", "N"], "AW": ["AO1"], "AWARD": ["AH0", "W", "AO1", "R", "D"], "AWARDED": ["AH0", "W", "AO1", "R", "D", "IH0", "D"], "AWARDS": ["AH0", "W", "AO1", "R", "D", "Z"], "AWARE": ["AH0", "W", "EH1", "R"], "AWARENESS": ["AH0", "W", "EH1", "R", "N", "AH0", "S"], "AWAY": ["AH0", "W", "EY1"], "AWESOME": ["AO1", "S", "AH0", "M"], "AWFUL": ["AO1", "F", "AH0", "L"], "AXIS": ["AE1", "K", "S", "AH0", "S"], "AYE": ["AY1"], "AZERBAIJAN": ["AA2", "Z", "ER0", "B", "AY0", "JH", "AA1", "N"], "B": ["B", "IY1"], "BA": ["B", "IY2", "EY1"], "BABE": ["B", "EY1", "B"], "BABES": ["B", "EY1", "B", "Z"], "BABIES": ["B", "EY1", "B", "IY0", "Z"], "BABY": ["B", "EY1", "B", "IY0"], "BACHELOR": ["B", "AE1", "CH", "AH0", "L", "ER0"], "BACK": ["B", "AE1", "K"], "BACKED": ["B", "AE1", "K", "T"], "BACKGROUND": ["B", "AE1", "K", "G", "R", "AW2", "N", "D"], "BACKGROUNDS": ["B", "AE1", "K", "G", "R", "AW2", "N", "D", "Z"], "BACKING": ["B", "AE1", "K", "IH0", "NG"], "BACKUP": ["B", "AE1", "K", "AH2", "P"], "BACON": ["B", "EY1", "K", "AH0", "N"], "BACTERIA": ["B", "AE0", "K", "T", "IH1", "R", "IY0", "AH0"], "BACTERIAL": ["B", "AE0", "K", "T", "IH1", "R", "IY0", "AH0", "L"], "BAD": ["B", "AE1", "D"], "BADGE": ["B", "AE1", "JH"], "BADLY": ["B", "AE1", "D", "L", "IY0"], "BAG": ["B", "AE1", "G"], "BAGHDAD": ["B", "AE1", "G", "D", "AE0", "D"], "BAGS": ["B", "AE1", "G", "Z"], "BAHAMAS": ["B", "AH0", "HH", "AA1", "M", "AH0", "Z"], "BAHRAIN": ["B", "AA0", "R", "EY1", "N"], "BAILEY": ["B", "EY1", "L", "IY0"], "BAKER": ["B", "EY1", "K", "ER0"], "BAKING": ["B", "EY1", "K", "IH0", "NG"], "BALANCE": ["B", "AE1", "L", "AH0", "N", "S"], "BALANCED": ["B", "AE1", "L", "AH0", "N", "S", "T"], "BALD": ["B", "AO1", "L", "D"], "BALI": ["B", "AA1", "L", "IY0"], "BALL": ["B", "AO1", "L"], "BALLET": ["B", "AE0", "L", "EY1"], "BALLOON": ["B", "AH0", "L", "UW1", "N"], "BALLOT": ["B", "AE1", "L", "AH0", "T"], "BALLS": ["B", "AO1", "L", "Z"], "BALTIMORE": ["B", "AO1", "L", "T", "AH0", "M", "AO2", "R"], "BAN": ["B", "AE1", "N"], "BANANA": ["B", "AH0", "N", "AE1", "N", "AH0"], "BAND": ["B", "AE1", "N", "D"], "BANDS": ["B", "AE1", "N", "D", "Z"], "BANDWIDTH": ["B", "AE1", "N", "D", "W", "IH0", "D", "TH"], "BANG": ["B", "AE1", "NG"], "BANGKOK": ["B", "AE0", "NG", "K", "AA1", "K"], "BANGLADESH": ["B", "AE1", "NG", "L", "AH0", "D", "EH2", "SH"], "BANK": ["B", "AE1", "NG", "K"], "BANKING": ["B", "AE1", "NG", "K", "IH0", "NG"], "BANKRUPTCY": ["B", "AE1", "NG", "K", "R", "AH0", "P", "S", "IY0"], "BANKS": ["B", "AE1", "NG", "K", "S"], "BANNED": ["B", "AE1", "N", "D"], "BANNER": ["B", "AE1", "N", "ER0"], "BANNERS": ["B", "AE1", "N", "ER0", "Z"], "BAPTIST": ["B", "AE1", "P", "T", "AH0", "S", "T"], "BAR": ["B", "AA1", "R"], "BARBADOS": ["B", "AA0", "R", "B", "EY1", "D", "OW0", "S"], "BARBARA": ["B", "AA1", "R", "B", "ER0", "AH0"], "BARBIE": ["B", "AA1", "R", "B", "IY0"], "BARCELONA": ["B", "AA2", "R", "S", "IH0", "L", "OW1", "N", "AH0"], "BARE": ["B", "EH1", "R"], "BARELY": ["B", "EH1", "R", "L", "IY0"], "BARGAIN": ["B", "AA1", "R", "G", "AH0", "N"], "BARGAINS": ["B", "AA1", "R", "G", "AH0", "N", "Z"], "BARN": ["B", "AA1", "R", "N"], "BARNES": ["B", "AA1", "R", "N", "Z"], "BARREL": ["B", "AE1", "R", "AH0", "L"], "BARRIER": ["B", "AE1", "R", "IY0", "ER0"], "BARRIERS": ["B", "AE1", "R", "IY0", "ER0", "Z"], "BARRY": ["B", "AE1", "R", "IY0"], "BARS": ["B", "AA1", "R", "Z"], "BASE": ["B", "EY1", "S"], "BASEBALL": ["B", "EY1", "S", "B", "AO1", "L"], "BASED": ["B", "EY1", "S", "T"], "BASELINE": ["B", "EY1", "S", "L", "AY2", "N"], "BASEMENT": ["B", "EY1", "S", "M", "AH0", "N", "T"], "BASES": ["B", "EY1", "S", "AH0", "Z"], "BASIC": ["B", "EY1", "S", "IH0", "K"], "BASICALLY": ["B", "EY1", "S", "IH0", "K", "L", "IY0"], "BASICS": ["B", "EY1", "S", "IH0", "K", "S"], "BASIN": ["B", "EY1", "S", "AH0", "N"], "BASIS": ["B", "EY1", "S", "AH0", "S"], "BASKET": ["B", "AE1", "S", "K", "AH0", "T"], "BASKETBALL": ["B", "AE1", "S", "K", "AH0", "T", "B", "AO2", "L"], "BASKETS": ["B", "AE1", "S", "K", "AH0", "T", "S"], "BASS": ["B", "AE1", "S"], "BAT": ["B", "AE1", "T"], "BATCH": ["B", "AE1", "CH"], "BATH": ["B", "AE1", "TH"], "BATHROOM": ["B", "AE1", "TH", "R", "UW2", "M"], "BATHROOMS": ["B", "AE1", "TH", "R", "UW2", "M", "Z"], "BATHS": ["B", "AE1", "TH", "S"], "BATMAN": ["B", "AE1", "T", "M", "AE2", "N"], "BATTERIES": ["B", "AE1", "T", "ER0", "IY0", "Z"], "BATTERY": ["B", "AE1", "T", "ER0", "IY0"], "BATTLE": ["B", "AE1", "T", "AH0", "L"], "BATTLEFIELD": ["B", "AE1", "T", "AH0", "L", "F", "IY2", "L", "D"], "BAY": ["B", "EY1"], "BBC": ["B", "IY2", "B", "IY0", "S", "IY1"], "BE": ["B", "IY1"], "BEACH": ["B", "IY1", "CH"], "BEACHES": ["B", "IY1", "CH", "AH0", "Z"], "BEADS": ["B", "IY1", "D", "Z"], "BEAM": ["B", "IY1", "M"], "BEAN": ["B", "IY1", "N"], "BEANS": ["B", "IY1", "N", "Z"], "BEAR": ["B", "EH1", "R"], "BEARING": ["B", "EH1", "R", "IH0", "NG"], "BEARS": ["B", "EH1", "R", "Z"], "BEAST": ["B", "IY1", "S", "T"], "BEAT": ["B", "IY1", "T"], "BEATLES": ["B", "IY1", "T", "AH0", "L", "Z"], "BEATS": ["B", "IY1", "T", "S"], "BEAUTIFUL": ["B", "Y", "UW1", "T", "AH0", "F", "AH0", "L"], "BEAUTIFULLY": ["B", "Y", "UW1", "T", "AH0", "F", "L", "IY0"], "BEAUTY": ["B", "Y", "UW1", "T", "IY0"], "BEAVER": ["B", "IY1", "V", "ER0"], "BECAME": ["B", "IH0", "K", "EY1", "M"], "BECAUSE": ["B", "IH0", "K", "AO1", "Z"], "BECOME": ["B", "IH0", "K", "AH1", "M"], "BECOMES": ["B", "IH0", "K", "AH1", "M", "Z"], "BECOMING": ["B", "IH0", "K", "AH1", "M", "IH0", "NG"], "BED": ["B", "EH1", "D"], "BEDDING": ["B", "EH1", "D", "IH0", "NG"], "BEDFORD": ["B", "EH1", "D", "F", "ER0", "D"], "BEDROOM": ["B", "EH1", "D", "R", "UW2", "M"], "BEDROOMS": ["B", "EH1", "D", "R", "UW2", "M", "Z"], "BEDS": ["B", "EH1", "D", "Z"], "BEE": ["B", "IY1"], "BEEF": ["B", "IY1", "F"], "BEEN": ["B", "IH1", "N"], "BEER": ["B", "IH1", "R"], "BEFORE": ["B", "IH0", "F", "AO1", "R"], "BEGAN": ["B", "IH0", "G", "AE1", "N"], "BEGIN": ["B", "IH0", "G", "IH1", "N"], "BEGINNER": ["B", "IH0", "G", "IH1", "N", "ER0"], "BEGINNERS": ["B", "IH0", "G", "IH1", "N", "ER0", "Z"], "BEGINNING": ["B", "IH0", "G", "IH1", "N", "IH0", "NG"], "BEGINS": ["B", "IH0", "G", "IH1", "N", "Z"], "BEGUN": ["B", "IH0", "G", "AH1", "N"], "BEHALF": ["B", "IH0", "HH", "AE1", "F"], "BEHAVIOR": ["B", "IH0", "HH", "EY1", "V", "Y", "ER0"], "BEHAVIORAL": ["B", "IH0", "HH", "EY1", "V", "Y", "ER0", "AH0", "L"], "BEHAVIOUR": ["B", "IH0", "HH", "EY1", "V", "Y", "ER0"], "BEHIND": ["B", "IH0", "HH", "AY1", "N", "D"], "BEIJING": ["B", "EY2", "ZH", "IH1", "NG"], "BEING": ["B", "IY1", "IH0", "NG"], "BEINGS": ["B", "IY1", "IH0", "NG", "Z"], "BELARUS": ["B", "EH2", "L", "AA0", "R", "UH1", "S"], "BELFAST": ["B", "EH1", "L", "F", "AE2", "S", "T"], "BELGIUM": ["B", "EH1", "L", "JH", "AH0", "M"], "BELIEF": ["B", "IH0", "L", "IY1", "F"], "BELIEFS": ["B", "IH0", "L", "IY1", "F", "S"], "BELIEVE": ["B", "IH0", "L", "IY1", "V"], "BELIEVED": ["B", "IH0", "L", "IY1", "V", "D"], "BELIEVES": ["B", "IH0", "L", "IY1", "V", "Z"], "BELIZE": ["B", "EH0", "L", "IY1", "Z"], "BELKIN": ["B", "EH1", "L", "K", "IH0", "N"], "BELL": ["B", "EH1", "L"], "BELLE": ["B", "EH1", "L"], "BELLY": ["B", "EH1", "L", "IY0"], "BELONG": ["B", "IH0", "L", "AO1", "NG"], "BELONGS": ["B", "IH0", "L", "AO1", "NG", "Z"], "BELOW": ["B", "IH0", "L", "OW1"], "BELT": ["B", "EH1", "L", "T"], "BELTS": ["B", "EH1", "L", "T", "S"], "BEN": ["B", "EH1", "N"], "BENCH": ["B", "EH1", "N", "CH"], "BENCHMARK": ["B", "EH1", "N", "CH", "M", "AA2", "R", "K"], "BEND": ["B", "EH1", "N", "D"], "BENEATH": ["B", "IH0", "N", "IY1", "TH"], "BENEFICIAL": ["B", "EH2", "N", "AH0", "F", "IH1", "SH", "AH0", "L"], "BENEFIT": ["B", "EH1", "N", "AH0", "F", "IH0", "T"], "BENEFITS": ["B", "EH1", "N", "AH0", "F", "IH0", "T", "S"], "BENJAMIN": ["B", "EH1", "N", "JH", "AH0", "M", "AH0", "N"], "BENNETT": ["B", "EH1", "N", "AH0", "T"], "BENZ": ["B", "EH1", "N", "Z"], "BERKELEY": ["B", "ER1", "K", "L", "IY0"], "BERLIN": ["B", "ER0", "L", "IH1", "N"], "BERMUDA": ["B", "ER0", "M", "Y", "UW1", "D", "AH0"], "BERNARD": ["B", "ER0", "N", "AA1", "R", "D"], "BERRY": ["B", "EH1", "R", "IY0"], "BESIDE": ["B", "IH0", "S", "AY1", "D"], "BESIDES": ["B", "IH0", "S", "AY1", "D", "Z"], "BEST": ["B", "EH1", "S", "T"], "BESTIALITY": ["B", "EH0", "S", "CH", "AE1", "L", "IH0", "T", "IY0"], "BESTSELLERS": ["B", "EH1", "S", "T", "S", "EH1", "L", "ER0", "Z"], "BET": ["B", "EH1", "T"], "BETA": ["B", "EY1", "T", "AH0"], "BETH": ["B", "EH1", "TH"], "BETTER": ["B", "EH1", "T", "ER0"], "BETTING": ["B", "EH1", "T", "IH0", "NG"], "BETTY": ["B", "EH1", "T", "IY0"], "BETWEEN": ["B", "IH0", "T", "W", "IY1", "N"], "BEVERAGE": ["B", "EH1", "V", "ER0", "IH0", "JH"], "BEVERAGES": ["B", "EH1", "V", "R", "IH0", "JH", "IH0", "Z"], "BEVERLY": ["B", "EH1", "V", "ER0", "L", "IY0"], "BEYOND": ["B", "IH0", "AA1", "N", "D"], "BHUTAN": ["B", "UW2", "T", "AE1", "N"], "BI": ["B", "AY1"], "BIAS": ["B", "AY1", "AH0", "S"], "BIBLE": ["B", "AY1", "B", "AH0", "L"], "BIBLICAL": ["B", "IH1", "B", "L", "AH0", "K", "AH0", "L"], "BIBLIOGRAPHY": ["B", "IH2", "B", "L", "IY0", "AA1", "G", "R", "AH0", "F", "IY0"], "BICYCLE": ["B", "AY1", "S", "IH0", "K", "AH0", "L"], "BID": ["B", "IH1", "D"], "BIDDER": ["B", "IH1", "D", "ER0"], "BIDDING": ["B", "IH1", "D", "IH0", "NG"], "BIDS": ["B", "IH1", "D", "Z"], "BIG": ["B", "IH1", "G"], "BIGGER": ["B", "IH1", "G", "ER0"], "BIGGEST": ["B", "IH1", "G", "AH0", "S", "T"], "BIKE": ["B", "AY1", "K"], "BIKES": ["B", "AY1", "K", "S"], "BIKINI": ["B", "IH0", "K", "IY1", "N", "IY0"], "BILL": ["B", "IH1", "L"], "BILLING": ["B", "IH1", "L", "IH0", "NG"], "BILLION": ["B", "IH1", "L", "Y", "AH0", "N"], "BILLS": ["B", "IH1", "L", "Z"], "BILLY": ["B", "IH1", "L", "IY0"], "BIN": ["B", "IH1", "N"], "BINARY": ["B", "AY1", "N", "AH0", "R", "IY2"], "BIND": ["B", "AY1", "N", "D"], "BINDING": ["B", "AY1", "N", "D", "IH0", "NG"], "BINGO": ["B", "IH1", "NG", "G", "OW0"], "BIO": ["B", "AY2", "OW1"], "BIODIVERSITY": ["B", "AY2", "OW0", "D", "AY0", "V", "ER1", "S", "AH0", "T", "IY0"], "BIOGRAPHIES": ["B", "AY0", "AA1", "G", "R", "AH0", "F", "IY0", "Z"], "BIOGRAPHY": ["B", "AY0", "AA1", "G", "R", "AH0", "F", "IY0"], "BIOLOGICAL": ["B", "AY2", "AH0", "L", "AA1", "JH", "IH0", "K", "AH0", "L"], "BIOLOGY": ["B", "AY0", "AA1", "L", "AH0", "JH", "IY0"], "BIOS": ["B", "AY1", "OW0", "S"], "BIOTECHNOLOGY": ["B", "AY2", "OW0", "T", "EH2", "K", "N", "AA1", "L", "AH0", "JH", "IY0"], "BIRD": ["B", "ER1", "D"], "BIRDS": ["B", "ER1", "D", "Z"], "BIRMINGHAM": ["B", "ER1", "M", "IH0", "NG", "HH", "AE2", "M"], "BIRTH": ["B", "ER1", "TH"], "BIRTHDAY": ["B", "ER1", "TH", "D", "EY2"], "BISHOP": ["B", "IH1", "SH", "AH0", "P"], "BIT": ["B", "IH1", "T"], "BITCH": ["B", "IH1", "CH"], "BITE": ["B", "AY1", "T"], "BITS": ["B", "IH1", "T", "S"], "BIZ": ["B", "IH1", "Z"], "BIZARRE": ["B", "AH0", "Z", "AA1", "R"], "BLACK": ["B", "L", "AE1", "K"], "BLACKBERRY": ["B", "L", "AE1", "K", "B", "EH2", "R", "IY0"], "BLACKJACK": ["B", "L", "AE1", "K", "JH", "AE2", "K"], "BLACKS": ["B", "L", "AE1", "K", "S"], "BLADE": ["B", "L", "EY1", "D"], "BLADES": ["B", "L", "EY1", "D", "Z"], "BLAH": ["B", "L", "AA1"], "BLAIR": ["B", "L", "EH1", "R"], "BLAKE": ["B", "L", "EY1", "K"], "BLAME": ["B", "L", "EY1", "M"], "BLANK": ["B", "L", "AE1", "NG", "K"], "BLANKET": ["B", "L", "AE1", "NG", "K", "AH0", "T"], "BLAST": ["B", "L", "AE1", "S", "T"], "BLEEDING": ["B", "L", "IY1", "D", "IH0", "NG"], "BLEND": ["B", "L", "EH1", "N", "D"], "BLESS": ["B", "L", "EH1", "S"], "BLESSED": ["B", "L", "EH1", "S", "T"], "BLIND": ["B", "L", "AY1", "N", "D"], "BLINK": ["B", "L", "IH1", "NG", "K"], "BLOCK": ["B", "L", "AA1", "K"], "BLOCKED": ["B", "L", "AA1", "K", "T"], "BLOCKING": ["B", "L", "AA1", "K", "IH0", "NG"], "BLOCKS": ["B", "L", "AA1", "K", "S"], "BLOG": ["B", "L", "AO1", "G"], "BLOGGER": ["B", "L", "AO1", "G", "ER0"], "BLOGGERS": ["B", "L", "AO1", "G", "ER0", "Z"], "BLOGGING": ["B", "L", "AO1", "G", "IH0", "NG"], "BLOGS": ["B", "L", "AO1", "G", "Z"], "BLOND": ["B", "L", "AA1", "N", "D"], "BLONDE": ["B", "L", "AA1", "N", "D"], "BLOOD": ["B", "L", "AH1", "D"], "BLOODY": ["B", "L", "AH1", "D", "IY0"], "BLOOM": ["B", "L", "UW1", "M"], "BLOOMBERG": ["B", "L", "UW1", "M", "B", "ER0", "G"], "BLOW": ["B", "L", "OW1"], "BLOWING": ["B", "L", "OW1", "IH0", "NG"], "BLOWJOB": ["B", "L", "OW1", "JH", "AA2", "B"], "BLUE": ["B", "L", "UW1"], "BLUES": ["B", "L", "UW1", "Z"], "BLUETOOTH": ["B", "L", "UW1", "T", "UW2", "TH"], "BLVD": ["B", "UH1", "L", "AH0", "V", "AA2", "R", "D"], "BMW": ["B", "IY1", "EH2", "M", "D", "AH1", "B", "AH0", "L", "Y", "UW0"], "BO": ["B", "OW1"], "BOARD": ["B", "AO1", "R", "D"], "BOARDS": ["B", "AO1", "R", "D", "Z"], "BOAT": ["B", "OW1", "T"], "BOATING": ["B", "OW1", "T", "IH0", "NG"], "BOATS": ["B", "OW1", "T", "S"], "BOB": ["B", "AA1", "B"], "BOBBY": ["B", "AA1", "B", "IY0"], "BODIES": ["B", "AA1", "D", "IY0", "Z"], "BODY": ["B", "AA1", "D", "IY0"], "BOLD": ["B", "OW1", "L", "D"], "BOLIVIA": ["B", "AH0", "L", "IH1", "V", "IY0", "AH0"], "BOLT": ["B", "OW1", "L", "T"], "BOMB": ["B", "AA1", "M"], "BON": ["B", "AA1", "N"], "BOND": ["B", "AA1", "N", "D"], "BONDAGE": ["B", "AA1", "N", "D", "IH0", "JH"], "BONDS": ["B", "AA1", "N", "D", "Z"], "BONE": ["B", "OW1", "N"], "BONES": ["B", "OW1", "N", "Z"], "BONUS": ["B", "OW1", "N", "AH0", "S"], "BOOB": ["B", "UW1", "B"], "BOOBS": ["B", "UW1", "B", "Z"], "BOOK": ["B", "UH1", "K"], "BOOKING": ["B", "UH1", "K", "IH0", "NG"], "BOOKINGS": ["B", "UH1", "K", "IH0", "NG", "Z"], "BOOKMARK": ["B", "UH1", "K", "M", "AA0", "R", "K"], "BOOKMARKS": ["B", "UH1", "K", "M", "AA0", "R", "K", "S"], "BOOKS": ["B", "UH1", "K", "S"], "BOOKSTORE": ["B", "UH1", "K", "S", "T", "AO2", "R"], "BOOLEAN": ["B", "UW0", "L", "IY1", "AH0", "N"], "BOOM": ["B", "UW1", "M"], "BOOST": ["B", "UW1", "S", "T"], "BOOT": ["B", "UW1", "T"], "BOOTH": ["B", "UW1", "TH"], "BOOTS": ["B", "UW1", "T", "S"], "BOOTY": ["B", "UW1", "T", "IY0"], "BORDER": ["B", "AO1", "R", "D", "ER0"], "BORDERS": ["B", "AO1", "R", "D", "ER0", "Z"], "BORED": ["B", "AO1", "R", "D"], "BORING": ["B", "AO1", "R", "IH0", "NG"], "BORN": ["B", "AO1", "R", "N"], "BOROUGH": ["B", "ER1", "OW2"], "BOSNIA": ["B", "AA1", "Z", "N", "IY0", "AH0"], "BOSS": ["B", "AA1", "S"], "BOSTON": ["B", "AA1", "S", "T", "AH0", "N"], "BOTH": ["B", "OW1", "TH"], "BOTHER": ["B", "AA1", "DH", "ER0"], "BOTSWANA": ["B", "AA0", "T", "S", "W", "AA1", "N", "AH0"], "BOTTLE": ["B", "AA1", "T", "AH0", "L"], "BOTTLES": ["B", "AA1", "T", "AH0", "L", "Z"], "BOTTOM": ["B", "AA1", "T", "AH0", "M"], "BOUGHT": ["B", "AA1", "T"], "BOULDER": ["B", "OW1", "L", "D", "ER0"], "BOULEVARD": ["B", "UH1", "L", "AH0", "V", "AA2", "R", "D"], "BOUND": ["B", "AW1", "N", "D"], "BOUNDARIES": ["B", "AW1", "N", "D", "ER0", "IY0", "Z"], "BOUNDARY": ["B", "AW1", "N", "D", "ER0", "IY0"], "BOUQUET": ["B", "UW0", "K", "EY1"], "BOUTIQUE": ["B", "UW0", "T", "IY1", "K"], "BOW": ["B", "AW1"], "BOWL": ["B", "OW1", "L"], "BOWLING": ["B", "OW1", "L", "IH0", "NG"], "BOX": ["B", "AA1", "K", "S"], "BOXED": ["B", "AA1", "K", "S", "T"], "BOXES": ["B", "AA1", "K", "S", "AH0", "Z"], "BOXING": ["B", "AA1", "K", "S", "IH0", "NG"], "BOY": ["B", "OY1"], "BOYS": ["B", "OY1", "Z"], "BRA": ["B", "R", "AA1"], "BRACELET": ["B", "R", "EY1", "S", "L", "AH0", "T"], "BRACELETS": ["B", "R", "EY1", "S", "L", "IH0", "T", "S"], "BRACKET": ["B", "R", "AE1", "K", "IH0", "T"], "BRAD": ["B", "R", "AE1", "D"], "BRADFORD": ["B", "R", "AE1", "D", "F", "ER0", "D"], "BRADLEY": ["B", "R", "AE1", "D", "L", "IY0"], "BRAIN": ["B", "R", "EY1", "N"], "BRAKE": ["B", "R", "EY1", "K"], "BRAKES": ["B", "R", "EY1", "K", "S"], "BRANCH": ["B", "R", "AE1", "N", "CH"], "BRANCHES": ["B", "R", "AE1", "N", "CH", "AH0", "Z"], "BRAND": ["B", "R", "AE1", "N", "D"], "BRANDON": ["B", "R", "AE1", "N", "D", "AH0", "N"], "BRANDS": ["B", "R", "AE1", "N", "D", "Z"], "BRAS": ["B", "R", "AE1", "S"], "BRASS": ["B", "R", "AE1", "S"], "BRAVE": ["B", "R", "EY1", "V"], "BRAZIL": ["B", "R", "AH0", "Z", "IH1", "L"], "BRAZILIAN": ["B", "R", "AH0", "Z", "IH1", "L", "Y", "AH0", "N"], "BREACH": ["B", "R", "IY1", "CH"], "BREAD": ["B", "R", "EH1", "D"], "BREAK": ["B", "R", "EY1", "K"], "BREAKDOWN": ["B", "R", "EY1", "K", "D", "AW2", "N"], "BREAKFAST": ["B", "R", "EH1", "K", "F", "AH0", "S", "T"], "BREAKING": ["B", "R", "EY1", "K", "IH0", "NG"], "BREAKS": ["B", "R", "EY1", "K", "S"], "BREAST": ["B", "R", "EH1", "S", "T"], "BREASTS": ["B", "R", "EH1", "S", "T", "S"], "BREATH": ["B", "R", "EH1", "TH"], "BREATHING": ["B", "R", "IY1", "DH", "IH0", "NG"], "BREED": ["B", "R", "IY1", "D"], "BREEDING": ["B", "R", "IY1", "D", "IH0", "NG"], "BREEDS": ["B", "R", "IY1", "D", "Z"], "BRIAN": ["B", "R", "AY1", "AH0", "N"], "BRICK": ["B", "R", "IH1", "K"], "BRIDAL": ["B", "R", "AY1", "D", "AH0", "L"], "BRIDE": ["B", "R", "AY1", "D"], "BRIDGE": ["B", "R", "IH1", "JH"], "BRIDGES": ["B", "R", "IH1", "JH", "AH0", "Z"], "BRIEF": ["B", "R", "IY1", "F"], "BRIEFING": ["B", "R", "IY1", "F", "IH0", "NG"], "BRIEFLY": ["B", "R", "IY1", "F", "L", "IY0"], "BRIEFS": ["B", "R", "IY1", "F", "S"], "BRIGHT": ["B", "R", "AY1", "T"], "BRIGHTON": ["B", "R", "AY1", "T", "AH0", "N"], "BRILLIANT": ["B", "R", "IH1", "L", "Y", "AH0", "N", "T"], "BRING": ["B", "R", "IH1", "NG"], "BRINGING": ["B", "R", "IH1", "NG", "IH0", "NG"], "BRINGS": ["B", "R", "IH1", "NG", "Z"], "BRISBANE": ["B", "R", "IH1", "Z", "B", "EY2", "N"], "BRISTOL": ["B", "R", "IH1", "S", "T", "AH0", "L"], "BRITAIN": ["B", "R", "IH1", "T", "AH0", "N"], "BRITANNICA": ["B", "R", "IH0", "T", "AE1", "N", "IH0", "K", "AH0"], "BRITISH": ["B", "R", "IH1", "T", "IH0", "SH"], "BRITNEY": ["B", "R", "IH1", "T", "N", "IY2"], "BROAD": ["B", "R", "AO1", "D"], "BROADBAND": ["B", "R", "AO1", "D", "B", "AE2", "N", "D"], "BROADCAST": ["B", "R", "AO1", "D", "K", "AE2", "S", "T"], "BROADCASTING": ["B", "R", "AO1", "D", "K", "AE2", "S", "T", "IH0", "NG"], "BROADER": ["B", "R", "AO1", "D", "ER0"], "BROADWAY": ["B", "R", "AO1", "D", "W", "EY2"], "BROCHURE": ["B", "R", "OW0", "SH", "UH1", "R"], "BROCHURES": ["B", "R", "OW0", "SH", "UH1", "R", "Z"], "BROKE": ["B", "R", "OW1", "K"], "BROKEN": ["B", "R", "OW1", "K", "AH0", "N"], "BROKER": ["B", "R", "OW1", "K", "ER0"], "BROKERS": ["B", "R", "OW1", "K", "ER0", "Z"], "BRONZE": ["B", "R", "AA1", "N", "Z"], "BROOK": ["B", "R", "UH1", "K"], "BROOKLYN": ["B", "R", "UH1", "K", "L", "AH0", "N"], "BROOKS": ["B", "R", "UH1", "K", "S"], "BROTHER": ["B", "R", "AH1", "DH", "ER0"], "BROTHERS": ["B", "R", "AH1", "DH", "ER0", "Z"], "BROUGHT": ["B", "R", "AO1", "T"], "BROWN": ["B", "R", "AW1", "N"], "BROWSE": ["B", "R", "AW1", "Z"], "BROWSER": ["B", "R", "AW1", "Z", "ER0"], "BROWSERS": ["B", "R", "AW1", "Z", "ER0", "Z"], "BROWSING": ["B", "R", "AW1", "Z", "IH0", "NG"], "BRUCE": ["B", "R", "UW1", "S"], "BRUNEI": ["B", "R", "UW0", "N", "AY1"], "BRUNETTE": ["B", "R", "UW0", "N", "EH1", "T"], "BRUNSWICK": ["B", "R", "AH1", "N", "Z", "W", "IH0", "K"], "BRUSH": ["B", "R", "AH1", "SH"], "BRUSSELS": ["B", "R", "AH1", "S", "AH0", "L", "Z"], "BRUTAL": ["B", "R", "UW1", "T", "AH0", "L"], "BRYAN": ["B", "R", "AY1", "AH0", "N"], "BRYANT": ["B", "R", "AY1", "AH0", "N", "T"], "BT": ["B", "IY1", "T", "IY1"], "BUBBLE": ["B", "AH1", "B", "AH0", "L"], "BUCK": ["B", "AH1", "K"], "BUCKS": ["B", "AH1", "K", "S"], "BUDAPEST": ["B", "UW1", "D", "AH0", "P", "EH2", "S", "T"], "BUDDY": ["B", "AH1", "D", "IY0"], "BUDGET": ["B", "AH1", "JH", "IH0", "T"], "BUDGETS": ["B", "AH1", "JH", "IH0", "T", "S"], "BUFFALO": ["B", "AH1", "F", "AH0", "L", "OW2"], "BUFFER": ["B", "AH1", "F", "ER0"], "BUG": ["B", "AH1", "G"], "BUGS": ["B", "AH1", "G", "Z"], "BUILD": ["B", "IH1", "L", "D"], "BUILDER": ["B", "IH1", "L", "D", "ER0"], "BUILDERS": ["B", "IH1", "L", "D", "ER0", "Z"], "BUILDING": ["B", "IH1", "L", "D", "IH0", "NG"], "BUILDINGS": ["B", "IH1", "L", "D", "IH0", "NG", "Z"], "BUILDS": ["B", "IH1", "L", "D", "Z"], "BUILT": ["B", "IH1", "L", "T"], "BULGARIA": ["B", "AH0", "L", "G", "EH1", "R", "IY0", "AH0"], "BULGARIAN": ["B", "AH0", "L", "G", "EH1", "R", "IY0", "AH0", "N"], "BULK": ["B", "AH1", "L", "K"], "BULL": ["B", "UH1", "L"], "BULLET": ["B", "UH1", "L", "AH0", "T"], "BULLETIN": ["B", "UH1", "L", "IH0", "T", "AH0", "N"], "BUMPER": ["B", "AH1", "M", "P", "ER0"], "BUNCH": ["B", "AH1", "N", "CH"], "BUNDLE": ["B", "AH1", "N", "D", "AH0", "L"], "BUNNY": ["B", "AH1", "N", "IY0"], "BURDEN": ["B", "ER1", "D", "AH0", "N"], "BUREAU": ["B", "Y", "UH1", "R", "OW0"], "BURIED": ["B", "EH1", "R", "IY0", "D"], "BURKE": ["B", "ER1", "K"], "BURLINGTON": ["B", "ER1", "L", "IH0", "NG", "T", "AH0", "N"], "BURN": ["B", "ER1", "N"], "BURNER": ["B", "ER1", "N", "ER0"], "BURNING": ["B", "ER1", "N", "IH0", "NG"], "BURNS": ["B", "ER1", "N", "Z"], "BURST": ["B", "ER1", "S", "T"], "BURTON": ["B", "ER1", "T", "AH0", "N"], "BUS": ["B", "AH1", "S"], "BUSES": ["B", "AH1", "S", "IH0", "Z"], "BUSH": ["B", "UH1", "SH"], "BUSINESS": ["B", "IH1", "Z", "N", "AH0", "S"], "BUSINESSES": ["B", "IH1", "Z", "N", "AH0", "S", "AH0", "Z"], "BUSTY": ["B", "AH1", "S", "T", "IY0"], "BUSY": ["B", "IH1", "Z", "IY0"], "BUT": ["B", "AH1", "T"], "BUTLER": ["B", "AH1", "T", "L", "ER0"], "BUTT": ["B", "AH1", "T"], "BUTTER": ["B", "AH1", "T", "ER0"], "BUTTERFLY": ["B", "AH1", "T", "ER0", "F", "L", "AY2"], "BUTTON": ["B", "AH1", "T", "AH0", "N"], "BUTTONS": ["B", "AH1", "T", "AH0", "N", "Z"], "BUTTS": ["B", "AH1", "T", "S"], "BUY": ["B", "AY1"], "BUYER": ["B", "AY1", "ER0"], "BUYERS": ["B", "AY1", "ER0", "Z"], "BUYING": ["B", "AY1", "IH0", "NG"], "BUYS": ["B", "AY1", "Z"], "BUZZ": ["B", "AH1", "Z"], "BY": ["B", "AY1"], "BYE": ["B", "AY1"], "BYTE": ["B", "AY1", "T"], "BYTES": ["B", "AY1", "T", "S"], "C": ["S", "IY1"], "CA": ["K", "AH1"], "CAB": ["K", "AE1", "B"], "CABIN": ["K", "AE1", "B", "AH0", "N"], "CABINET": ["K", "AE1", "B", "AH0", "N", "AH0", "T"], "CABINETS": ["K", "AE1", "B", "AH0", "N", "AH0", "T", "S"], "CABLE": ["K", "EY1", "B", "AH0", "L"], "CABLES": ["K", "EY1", "B", "AH0", "L", "Z"], "CACHE": ["K", "AE1", "SH"], "CACHED": ["K", "AE1", "SH", "T"], "CAD": ["K", "AE1", "D"], "CADILLAC": ["K", "AE1", "D", "AH0", "L", "AE2", "K"], "CAFE": ["K", "AH0", "F", "EY1"], "CAGE": ["K", "EY1", "JH"], "CAKE": ["K", "EY1", "K"], "CAKES": ["K", "EY1", "K", "S"], "CAL": ["K", "AE1", "L"], "CALCIUM": ["K", "AE1", "L", "S", "IY0", "AH0", "M"], "CALCULATE": ["K", "AE1", "L", "K", "Y", "AH0", "L", "EY2", "T"], "CALCULATED": ["K", "AE1", "L", "K", "Y", "AH0", "L", "EY2", "T", "AH0", "D"], "CALCULATION": ["K", "AE2", "L", "K", "Y", "AH0", "L", "EY1", "SH", "AH0", "N"], "CALCULATIONS": ["K", "AE2", "L", "K", "Y", "AH0", "L", "EY1", "SH", "AH0", "N", "Z"], "CALCULATOR": ["K", "AE1", "L", "K", "Y", "AH0", "L", "EY2", "T", "ER0"], "CALCULATORS": ["K", "AE1", "L", "K", "Y", "AH0", "L", "EY2", "T", "ER0", "Z"], "CALENDAR": ["K", "AE1", "L", "AH0", "N", "D", "ER0"], "CALENDARS": ["K", "AE1", "L", "AH0", "N", "D", "ER0", "Z"], "CALGARY": ["K", "AE1", "L", "G", "ER0", "IY0"], "CALIBRATION": ["K", "AE2", "L", "AH0", "B", "R", "EY1", "SH", "AH0", "N"], "CALIF": ["K", "AE1", "L", "IH0", "F"], "CALIFORNIA": ["K", "AE2", "L", "AH0", "F", "AO1", "R", "N", "Y", "AH0"], "CALL": ["K", "AO1", "L"], "CALLED": ["K", "AO1", "L", "D"], "CALLING": ["K", "AO1", "L", "IH0", "NG"], "CALLS": ["K", "AO1", "L", "Z"], "CALM": ["K", "AA1", "M"], "CALVIN": ["K", "AE1", "L", "V", "AH0", "N"], "CAM": ["K", "AE1", "M"], "CAMBODIA": ["K", "AE2", "M", "B", "OW1", "D", "IY0", "AH0"], "CAMBRIDGE": ["K", "EY1", "M", "B", "R", "IH0", "JH"], "CAMCORDER": ["K", "AE1", "M", "K", "AO2", "R", "D", "ER0"], "CAMCORDERS": ["K", "AE1", "M", "K", "AO2", "R", "D", "ER0", "Z"], "CAME": ["K", "EY1", "M"], "CAMEL": ["K", "AE1", "M", "AH0", "L"], "CAMERA": ["K", "AE1", "M", "ER0", "AH0"], "CAMERAS": ["K", "AE1", "M", "ER0", "AH0", "Z"], "CAMERON": ["K", "AE1", "M", "ER0", "AH0", "N"], "CAMEROON": ["K", "AE1", "M", "ER0", "UW2", "N"], "CAMP": ["K", "AE1", "M", "P"], "CAMPAIGN": ["K", "AE0", "M", "P", "EY1", "N"], "CAMPAIGNS": ["K", "AE0", "M", "P", "EY1", "N", "Z"], "CAMPBELL": ["K", "AE1", "M", "B", "AH0", "L"], "CAMPING": ["K", "AE1", "M", "P", "IH0", "NG"], "CAMPS": ["K", "AE1", "M", "P", "S"], "CAMPUS": ["K", "AE1", "M", "P", "AH0", "S"], "CAN": ["K", "AE1", "N"], "CANADA": ["K", "AE1", "N", "AH0", "D", "AH0"], "CANADIAN": ["K", "AH0", "N", "EY1", "D", "IY0", "AH0", "N"], "CANAL": ["K", "AH0", "N", "AE1", "L"], "CANBERRA": ["K", "AE2", "N", "B", "EH1", "R", "AH0"], "CANCEL": ["K", "AE1", "N", "S", "AH0", "L"], "CANCELLATION": ["K", "AE2", "N", "S", "AH0", "L", "EY1", "SH", "AH0", "N"], "CANCELLED": ["K", "AE1", "N", "S", "AH0", "L", "D"], "CANCER": ["K", "AE1", "N", "S", "ER0"], "CANDIDATE": ["K", "AE1", "N", "D", "AH0", "D", "EY0", "T"], "CANDIDATES": ["K", "AE1", "N", "D", "AH0", "D", "EY0", "T", "S"], "CANDLE": ["K", "AE1", "N", "D", "AH0", "L"], "CANDLES": ["K", "AE1", "N", "D", "AH0", "L", "Z"], "CANDY": ["K", "AE1", "N", "D", "IY0"], "CANNON": ["K", "AE1", "N", "AH0", "N"], "CANON": ["K", "AE1", "N", "AH0", "N"], "CANT": ["K", "AE1", "N", "T"], "CANVAS": ["K", "AE1", "N", "V", "AH0", "S"], "CANYON": ["K", "AE1", "N", "Y", "AH0", "N"], "CAP": ["K", "AE1", "P"], "CAPABILITIES": ["K", "EY2", "P", "AH0", "B", "IH1", "L", "AH0", "T", "IY0", "Z"], "CAPABILITY": ["K", "EY2", "P", "AH0", "B", "IH1", "L", "AH0", "T", "IY0"], "CAPABLE": ["K", "EY1", "P", "AH0", "B", "AH0", "L"], "CAPACITY": ["K", "AH0", "P", "AE1", "S", "AH0", "T", "IY0"], "CAPE": ["K", "EY1", "P"], "CAPITAL": ["K", "AE1", "P", "IH0", "T", "AH0", "L"], "CAPITOL": ["K", "AE1", "P", "IH0", "T", "AH0", "L"], "CAPS": ["K", "AE1", "P", "S"], "CAPTAIN": ["K", "AE1", "P", "T", "AH0", "N"], "CAPTURE": ["K", "AE1", "P", "CH", "ER0"], "CAPTURED": ["K", "AE1", "P", "CH", "ER0", "D"], "CAR": ["K", "AA1", "R"], "CARBON": ["K", "AA1", "R", "B", "AH0", "N"], "CARD": ["K", "AA1", "R", "D"], "CARDIAC": ["K", "AA1", "R", "D", "IY0", "AE2", "K"], "CARDIFF": ["K", "AA1", "R", "D", "IH0", "F"], "CARDIOVASCULAR": ["K", "AA2", "R", "D", "IY0", "OW0", "V", "AE1", "S", "K", "Y", "AH0", "L", "ER0"], "CARDS": ["K", "AA1", "R", "D", "Z"], "CARE": ["K", "EH1", "R"], "CAREER": ["K", "ER0", "IH1", "R"], "CAREERS": ["K", "ER0", "IH1", "R", "Z"], "CAREFUL": ["K", "EH1", "R", "F", "AH0", "L"], "CAREFULLY": ["K", "EH1", "R", "F", "AH0", "L", "IY0"], "CAREY": ["K", "EH1", "R", "IY0"], "CARGO": ["K", "AA1", "R", "G", "OW2"], "CARIBBEAN": ["K", "EH0", "R", "IH1", "B", "IY2", "AH0", "N"], "CARING": ["K", "EH1", "R", "IH0", "NG"], "CARL": ["K", "AA1", "R", "L"], "CARLO": ["K", "AA1", "R", "L", "OW0"], "CARLOS": ["K", "AA1", "R", "L", "OW0", "S"], "CARMEN": ["K", "AA1", "R", "M", "AH0", "N"], "CARNIVAL": ["K", "AA1", "R", "N", "AH0", "V", "AH0", "L"], "CAROL": ["K", "AE1", "R", "AH0", "L"], "CAROLINA": ["K", "EH2", "R", "AH0", "L", "AY1", "N", "AH0"], "CAROLINE": ["K", "EH1", "R", "AH0", "L", "AY2", "N"], "CARPET": ["K", "AA1", "R", "P", "AH0", "T"], "CARRIED": ["K", "AE1", "R", "IY0", "D"], "CARRIER": ["K", "AE1", "R", "IY0", "ER0"], "CARRIERS": ["K", "AE1", "R", "IY0", "ER0", "Z"], "CARRIES": ["K", "AE1", "R", "IY0", "Z"], "CARROLL": ["K", "AE1", "R", "AH0", "L"], "CARRY": ["K", "AE1", "R", "IY0"], "CARRYING": ["K", "AE1", "R", "IY0", "IH0", "NG"], "CARS": ["K", "AA1", "R", "Z"], "CART": ["K", "AA1", "R", "T"], "CARTER": ["K", "AA1", "R", "T", "ER0"], "CARTOON": ["K", "AA0", "R", "T", "UW1", "N"], "CARTOONS": ["K", "AA0", "R", "T", "UW1", "N", "Z"], "CARTRIDGE": ["K", "AA1", "R", "T", "R", "AH0", "JH"], "CARTRIDGES": ["K", "AA1", "R", "T", "R", "AH0", "JH", "AH0", "Z"], "CAS": ["K", "AE1", "S"], "CASA": ["K", "AA1", "S", "AH0"], "CASE": ["K", "EY1", "S"], "CASES": ["K", "EY1", "S", "AH0", "Z"], "CASEY": ["K", "EY1", "S", "IY0"], "CASH": ["K", "AE1", "SH"], "CASHIERS": ["K", "AE2", "SH", "IH1", "R", "Z"], "CASINO": ["K", "AH0", "S", "IY1", "N", "OW0"], "CASINOS": ["K", "AH0", "S", "IY1", "N", "OW0", "Z"], "CASIO": ["K", "AE1", "S", "IY0", "OW0"], "CASSETTE": ["K", "AH0", "S", "EH1", "T"], "CAST": ["K", "AE1", "S", "T"], "CASTING": ["K", "AE1", "S", "T", "IH0", "NG"], "CASTLE": ["K", "AE1", "S", "AH0", "L"], "CASUAL": ["K", "AE1", "ZH", "AH0", "W", "AH0", "L"], "CAT": ["K", "AE1", "T"], "CATALOG": ["K", "AE1", "T", "AH0", "L", "AO0", "G"], "CATALOGS": ["K", "AE1", "T", "AH0", "L", "AO0", "G", "Z"], "CATALOGUE": ["K", "AE1", "T", "AH0", "L", "AO2", "G"], "CATALYST": ["K", "AE1", "T", "AH0", "L", "IH2", "S", "T"], "CATCH": ["K", "AE1", "CH"], "CATEGORIES": ["K", "AE1", "T", "AH0", "G", "AO2", "R", "IY0", "Z"], "CATEGORY": ["K", "AE1", "T", "AH0", "G", "AO2", "R", "IY0"], "CATERING": ["K", "EY1", "T", "ER0", "IH0", "NG"], "CATHEDRAL": ["K", "AH0", "TH", "IY1", "D", "R", "AH0", "L"], "CATHERINE": ["K", "AE1", "TH", "ER0", "AH0", "N"], "CATHOLIC": ["K", "AE1", "TH", "L", "IH0", "K"], "CATS": ["K", "AE1", "T", "S"], "CATTLE": ["K", "AE1", "T", "AH0", "L"], "CAUGHT": ["K", "AA1", "T"], "CAUSE": ["K", "AA1", "Z"], "CAUSED": ["K", "AA1", "Z", "D"], "CAUSES": ["K", "AA1", "Z", "AH0", "Z"], "CAUSING": ["K", "AA1", "Z", "IH0", "NG"], "CAUTION": ["K", "AA1", "SH", "AH0", "N"], "CAVE": ["K", "EY1", "V"], "CAYMAN": ["K", "EY1", "M", "AH0", "N"], "CBS": ["S", "IY1", "B", "IY2", "EH2", "S"], "CC": ["S", "IY1", "S", "IY1"], "CD": ["S", "IY1", "D", "IY1"], "CDS": ["S", "IY1", "D", "IY1", "Z"], "CEDAR": ["S", "IY1", "D", "ER0"], "CEILING": ["S", "IY1", "L", "IH0", "NG"], "CELEBRATE": ["S", "EH1", "L", "AH0", "B", "R", "EY2", "T"], "CELEBRATION": ["S", "EH2", "L", "AH0", "B", "R", "EY1", "SH", "AH0", "N"], "CELEBRITIES": ["S", "AH0", "L", "EH1", "B", "R", "IH0", "T", "IY0", "Z"], "CELEBRITY": ["S", "AH0", "L", "EH1", "B", "R", "IH0", "T", "IY0"], "CELEBS": ["S", "AH0", "L", "EH1", "B", "Z"], "CELL": ["S", "EH1", "L"], "CELLS": ["S", "EH1", "L", "Z"], "CELLULAR": ["S", "EH1", "L", "Y", "AH0", "L", "ER0"], "CELTIC": ["S", "EH1", "L", "T", "IH0", "K"], "CEMENT": ["S", "AH0", "M", "EH1", "N", "T"], "CEMETERY": ["S", "EH1", "M", "AH0", "T", "EH2", "R", "IY0"], "CENSUS": ["S", "EH1", "N", "S", "AH0", "S"], "CENT": ["S", "EH1", "N", "T"], "CENTER": ["S", "EH1", "N", "T", "ER0"], "CENTERED": ["S", "EH1", "N", "T", "ER0", "D"], "CENTERS": ["S", "EH1", "N", "T", "ER0", "Z"], "CENTRAL": ["S", "EH1", "N", "T", "R", "AH0", "L"], "CENTRE": ["S", "EH1", "N", "T", "ER0"], "CENTRES": ["S", "EH1", "N", "T", "ER0", "Z"], "CENTS": ["S", "EH1", "N", "T", "S"], "CENTURIES": ["S", "EH1", "N", "CH", "ER0", "IY0", "Z"], "CENTURY": ["S", "EH1", "N", "CH", "ER0", "IY0"], "CEO": ["S", "IY1", "IY2", "OW1"], "CERAMIC": ["S", "ER0", "AE1", "M", "IH0", "K"], "CEREMONY": ["S", "EH1", "R", "AH0", "M", "OW2", "N", "IY0"], "CERTAIN": ["S", "ER1", "T", "AH0", "N"], "CERTAINLY": ["S", "ER1", "T", "AH0", "N", "L", "IY0"], "CERTIFICATE": ["S", "ER0", "T", "IH1", "F", "IH0", "K", "AH0", "T"], "CERTIFICATES": ["S", "ER0", "T", "IH1", "F", "IH0", "K", "AH0", "T", "S"], "CERTIFICATION": ["S", "ER2", "T", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N"], "CERTIFIED": ["S", "ER1", "T", "AH0", "F", "AY2", "D"], "CHAD": ["CH", "AE1", "D"], "CHAIN": ["CH", "EY1", "N"], "CHAINS": ["CH", "EY1", "N", "Z"], "CHAIR": ["CH", "EH1", "R"], "CHAIRMAN": ["CH", "EH1", "R", "M", "AH0", "N"], "CHAIRS": ["CH", "EH1", "R", "Z"], "CHALLENGE": ["CH", "AE1", "L", "AH0", "N", "JH"], "CHALLENGED": ["CH", "AE1", "L", "AH0", "N", "JH", "D"], "CHALLENGES": ["CH", "AE1", "L", "AH0", "N", "JH", "IH0", "Z"], "CHALLENGING": ["CH", "AE1", "L", "AH0", "N", "JH", "IH0", "NG"], "CHAMBER": ["CH", "EY1", "M", "B", "ER0"], "CHAMBERS": ["CH", "EY1", "M", "B", "ER0", "Z"], "CHAMPAGNE": ["SH", "AE0", "M", "P", "EY1", "N"], "CHAMPION": ["CH", "AE1", "M", "P", "IY0", "AH0", "N"], "CHAMPIONS": ["CH", "AE1", "M", "P", "IY0", "AH0", "N", "Z"], "CHAMPIONSHIP": ["CH", "AE1", "M", "P", "IY0", "AH0", "N", "SH", "IH2", "P"], "CHAMPIONSHIPS": ["CH", "AE1", "M", "P", "IY0", "AH0", "N", "SH", "IH2", "P", "S"], "CHAN": ["CH", "AE1", "N"], "CHANCE": ["CH", "AE1", "N", "S"], "CHANCELLOR": ["CH", "AE1", "N", "S", "AH0", "L", "ER0"], "CHANCES": ["CH", "AE1", "N", "S", "AH0", "Z"], "CHANGE": ["CH", "EY1", "N", "JH"], "CHANGED": ["CH", "EY1", "N", "JH", "D"], "CHANGES": ["CH", "EY1", "N", "JH", "AH0", "Z"], "CHANGING": ["CH", "EY1", "N", "JH", "IH0", "NG"], "CHANNEL": ["CH", "AE1", "N", "AH0", "L"], "CHANNELS": ["CH", "AE1", "N", "AH0", "L", "Z"], "CHAOS": ["K", "EY1", "AA0", "S"], "CHAPEL": ["CH", "AE1", "P", "AH0", "L"], "CHAPTER": ["CH", "AE1", "P", "T", "ER0"], "CHAPTERS": ["CH", "AE1", "P", "T", "ER0", "Z"], "CHAR": ["CH", "AA1", "R"], "CHARACTER": ["K", "EH1", "R", "IH0", "K", "T", "ER0"], "CHARACTERISTIC": ["K", "EH2", "R", "IH0", "K", "T", "ER0", "IH1", "S", "T", "IH0", "K"], "CHARACTERISTICS": ["K", "EH2", "R", "IH0", "K", "T", "ER0", "IH1", "S", "T", "IH0", "K", "S"], "CHARACTERIZATION": ["K", "EH2", "R", "IH0", "K", "T", "ER0", "IH0", "Z", "EY1", "SH", "AH0", "N"], "CHARACTERIZED": ["K", "EH1", "R", "IH0", "K", "T", "ER0", "AY2", "Z", "D"], "CHARACTERS": ["K", "AE1", "R", "IH0", "K", "T", "ER0", "Z"], "CHARGE": ["CH", "AA1", "R", "JH"], "CHARGED": ["CH", "AA1", "R", "JH", "D"], "CHARGER": ["CH", "AA1", "R", "JH", "ER0"], "CHARGERS": ["CH", "AA1", "R", "JH", "ER0", "Z"], "CHARGES": ["CH", "AA1", "R", "JH", "IH0", "Z"], "CHARGING": ["CH", "AA1", "R", "JH", "IH0", "NG"], "CHARITABLE": ["CH", "AE1", "R", "AH0", "T", "AH0", "B", "AH0", "L"], "CHARITY": ["CH", "EH1", "R", "IH0", "T", "IY0"], "CHARLES": ["CH", "AA1", "R", "L", "Z"], "CHARLESTON": ["CH", "AA1", "R", "L", "S", "T", "AH0", "N"], "CHARLIE": ["CH", "AA1", "R", "L", "IY0"], "CHARLOTTE": ["SH", "AA1", "R", "L", "AH0", "T"], "CHARM": ["CH", "AA1", "R", "M"], "CHARMING": ["CH", "AA1", "R", "M", "IH0", "NG"], "CHARMS": ["CH", "AA1", "R", "M", "Z"], "CHART": ["CH", "AA1", "R", "T"], "CHARTER": ["CH", "AA1", "R", "T", "ER0"], "CHARTS": ["CH", "AA1", "R", "T", "S"], "CHASE": ["CH", "EY1", "S"], "CHASSIS": ["CH", "AE1", "S", "IY0"], "CHAT": ["CH", "AE1", "T"], "CHEAP": ["CH", "IY1", "P"], "CHEAPER": ["CH", "IY1", "P", "ER0"], "CHEAPEST": ["CH", "IY1", "P", "AH0", "S", "T"], "CHEAT": ["CH", "IY1", "T"], "CHEATS": ["CH", "IY1", "T", "S"], "CHECK": ["CH", "EH1", "K"], "CHECKED": ["CH", "EH1", "K", "T"], "CHECKING": ["CH", "EH1", "K", "IH0", "NG"], "CHECKLIST": ["CH", "EH1", "K", "L", "IH2", "S", "T"], "CHECKOUT": ["CH", "EH1", "K", "AW2", "T"], "CHECKS": ["CH", "EH1", "K", "S"], "CHEERS": ["CH", "IH1", "R", "Z"], "CHEESE": ["CH", "IY1", "Z"], "CHEF": ["SH", "EH1", "F"], "CHELSEA": ["CH", "EH1", "L", "S", "IY0"], "CHEM": ["K", "EH1", "M"], "CHEMICAL": ["K", "EH1", "M", "IH0", "K", "AH0", "L"], "CHEMICALS": ["K", "EH1", "M", "IH0", "K", "AH0", "L", "Z"], "CHEMISTRY": ["K", "EH1", "M", "IH0", "S", "T", "R", "IY0"], "CHEN": ["CH", "EH1", "N"], "CHEQUE": ["CH", "EH1", "K"], "CHERRY": ["CH", "EH1", "R", "IY0"], "CHESS": ["CH", "EH1", "S"], "CHEST": ["CH", "EH1", "S", "T"], "CHESTER": ["CH", "EH1", "S", "T", "ER0"], "CHEVROLET": ["SH", "EH2", "V", "R", "OW0", "L", "EY1"], "CHEVY": ["SH", "EH1", "V", "IY2"], "CHI": ["K", "AY1"], "CHICAGO": ["SH", "AH0", "K", "AA1", "G", "OW2"], "CHICK": ["CH", "IH1", "K"], "CHICKEN": ["CH", "IH1", "K", "AH0", "N"], "CHICKS": ["CH", "IH1", "K", "S"], "CHIEF": ["CH", "IY1", "F"], "CHILD": ["CH", "AY1", "L", "D"], "CHILDHOOD": ["CH", "AY1", "L", "D", "HH", "UH2", "D"], "CHILDREN": ["CH", "IH1", "L", "D", "R", "AH0", "N"], "CHILDRENS": ["CH", "IH1", "L", "D", "R", "AH0", "N", "Z"], "CHILE": ["CH", "IH1", "L", "IY0"], "CHINA": ["CH", "AY1", "N", "AH0"], "CHINESE": ["CH", "AY0", "N", "IY1", "Z"], "CHIP": ["CH", "IH1", "P"], "CHIPS": ["CH", "IH1", "P", "S"], "CHO": ["CH", "OW1"], "CHOCOLATE": ["CH", "AO1", "K", "L", "AH0", "T"], "CHOICE": ["CH", "OY1", "S"], "CHOICES": ["CH", "OY1", "S", "AH0", "Z"], "CHOIR": ["K", "W", "AY1", "ER0"], "CHOLESTEROL": ["K", "AH0", "L", "EH1", "S", "T", "ER0", "AO2", "L"], "CHOOSE": ["CH", "UW1", "Z"], "CHOOSING": ["CH", "UW1", "Z", "IH0", "NG"], "CHORUS": ["K", "AO1", "R", "AH0", "S"], "CHOSE": ["CH", "OW1", "Z"], "CHOSEN": ["CH", "OW1", "Z", "AH0", "N"], "CHRIS": ["K", "R", "IH1", "S"], "CHRIST": ["K", "R", "AY1", "S", "T"], "CHRISTIAN": ["K", "R", "IH1", "S", "CH", "AH0", "N"], "CHRISTIANITY": ["K", "R", "IH2", "S", "CH", "IY0", "AE1", "N", "IH0", "T", "IY0"], "CHRISTIANS": ["K", "R", "IH1", "S", "CH", "AH0", "N", "Z"], "CHRISTINA": ["K", "R", "IH0", "S", "T", "IY1", "N", "AH0"], "CHRISTINE": ["K", "R", "IH0", "S", "T", "IY1", "N"], "CHRISTMAS": ["K", "R", "IH1", "S", "M", "AH0", "S"], "CHRISTOPHER": ["K", "R", "IH1", "S", "T", "AH0", "F", "ER0"], "CHROME": ["K", "R", "OW1", "M"], "CHRONIC": ["K", "R", "AA1", "N", "IH0", "K"], "CHRONICLE": ["K", "R", "AA1", "N", "IH0", "K", "AH0", "L"], "CHRONICLES": ["K", "R", "AA1", "N", "IH0", "K", "AH0", "L", "Z"], "CHRYSLER": ["K", "R", "AY1", "S", "L", "ER0"], "CHUBBY": ["CH", "AH1", "B", "IY0"], "CHUCK": ["CH", "AH1", "K"], "CHURCH": ["CH", "ER1", "CH"], "CHURCHES": ["CH", "ER1", "CH", "IH0", "Z"], "CIA": ["S", "IY1", "AY1", "EY1"], "CIAO": ["CH", "AW1"], "CIGARETTE": ["S", "IH2", "G", "AH0", "R", "EH1", "T"], "CIGARETTES": ["S", "IH2", "G", "AH0", "R", "EH1", "T", "S"], "CINCINNATI": ["S", "IH2", "N", "S", "AH0", "N", "AE1", "T", "IY0"], "CINDY": ["S", "IH1", "N", "D", "IY0"], "CINEMA": ["S", "IH1", "N", "AH0", "M", "AH0"], "CIRCLE": ["S", "ER1", "K", "AH0", "L"], "CIRCLES": ["S", "ER1", "K", "AH0", "L", "Z"], "CIRCUIT": ["S", "ER1", "K", "AH0", "T"], "CIRCUITS": ["S", "ER1", "K", "AH0", "T", "S"], "CIRCULAR": ["S", "ER1", "K", "Y", "AH0", "L", "ER0"], "CIRCULATION": ["S", "ER1", "K", "Y", "AH0", "L", "EY2", "SH", "AH0", "N"], "CIRCUMSTANCES": ["S", "ER1", "K", "AH0", "M", "S", "T", "AE2", "N", "S", "AH0", "Z"], "CIRCUS": ["S", "ER1", "K", "AH0", "S"], "CISCO": ["S", "IH1", "S", "K", "OW2"], "CITATION": ["S", "AY0", "T", "EY1", "SH", "AH0", "N"], "CITATIONS": ["S", "AY0", "T", "EY1", "SH", "AH0", "N", "Z"], "CITE": ["S", "AY1", "T"], "CITED": ["S", "AY1", "T", "AH0", "D"], "CITIES": ["S", "IH1", "T", "IY0", "Z"], "CITIZEN": ["S", "IH1", "T", "AH0", "Z", "AH0", "N"], "CITIZENS": ["S", "IH1", "T", "AH0", "Z", "AH0", "N", "Z"], "CITIZENSHIP": ["S", "IH1", "T", "IH0", "Z", "AH0", "N", "SH", "IH2", "P"], "CITY": ["S", "IH1", "T", "IY0"], "CIVIC": ["S", "IH1", "V", "IH0", "K"], "CIVIL": ["S", "IH1", "V", "AH0", "L"], "CIVILIAN": ["S", "AH0", "V", "IH1", "L", "Y", "AH0", "N"], "CIVILIZATION": ["S", "IH2", "V", "AH0", "L", "IH0", "Z", "EY1", "SH", "AH0", "N"], "CLAIM": ["K", "L", "EY1", "M"], "CLAIMED": ["K", "L", "EY1", "M", "D"], "CLAIMS": ["K", "L", "EY1", "M", "Z"], "CLAIRE": ["K", "L", "EH1", "R"], "CLAN": ["K", "L", "AE1", "N"], "CLARA": ["K", "L", "AE1", "R", "AH0"], "CLARITY": ["K", "L", "EH1", "R", "AH0", "T", "IY0"], "CLARK": ["K", "L", "AA1", "R", "K"], "CLARKE": ["K", "L", "AA1", "R", "K"], "CLASS": ["K", "L", "AE1", "S"], "CLASSES": ["K", "L", "AE1", "S", "AH0", "Z"], "CLASSIC": ["K", "L", "AE1", "S", "IH0", "K"], "CLASSICAL": ["K", "L", "AE1", "S", "IH0", "K", "AH0", "L"], "CLASSICS": ["K", "L", "AE1", "S", "IH0", "K", "S"], "CLASSIFICATION": ["K", "L", "AE2", "S", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N"], "CLASSIFIED": ["K", "L", "AE1", "S", "AH0", "F", "AY2", "D"], "CLASSROOM": ["K", "L", "AE1", "S", "R", "UW2", "M"], "CLAUSE": ["K", "L", "AO1", "Z"], "CLAY": ["K", "L", "EY1"], "CLEAN": ["K", "L", "IY1", "N"], "CLEANER": ["K", "L", "IY1", "N", "ER0"], "CLEANERS": ["K", "L", "IY1", "N", "ER0", "Z"], "CLEANING": ["K", "L", "IY1", "N", "IH0", "NG"], "CLEANUP": ["K", "L", "IY1", "N", "AH2", "P"], "CLEAR": ["K", "L", "IH1", "R"], "CLEARANCE": ["K", "L", "IH1", "R", "AH0", "N", "S"], "CLEARED": ["K", "L", "IH1", "R", "D"], "CLEARING": ["K", "L", "IH1", "R", "IH0", "NG"], "CLEARLY": ["K", "L", "IH1", "R", "L", "IY0"], "CLERK": ["K", "L", "ER1", "K"], "CLEVELAND": ["K", "L", "IY1", "V", "L", "AH0", "N", "D"], "CLICK": ["K", "L", "IH1", "K"], "CLICKING": ["K", "L", "IH1", "K", "IH0", "NG"], "CLICKS": ["K", "L", "IH1", "K", "S"], "CLIENT": ["K", "L", "AY1", "AH0", "N", "T"], "CLIENTS": ["K", "L", "AY1", "AH0", "N", "T", "S"], "CLIFF": ["K", "L", "IH1", "F"], "CLIMATE": ["K", "L", "AY1", "M", "AH0", "T"], "CLIMB": ["K", "L", "AY1", "M"], "CLIMBING": ["K", "L", "AY1", "M", "IH0", "NG"], "CLINIC": ["K", "L", "IH1", "N", "IH0", "K"], "CLINICAL": ["K", "L", "IH1", "N", "AH0", "K", "AH0", "L"], "CLINICS": ["K", "L", "IH1", "N", "IH0", "K", "S"], "CLINTON": ["K", "L", "IH1", "N", "T", "AH0", "N"], "CLIP": ["K", "L", "IH1", "P"], "CLIPS": ["K", "L", "IH1", "P", "S"], "CLOCK": ["K", "L", "AA1", "K"], "CLOCKS": ["K", "L", "AA1", "K", "S"], "CLONE": ["K", "L", "OW1", "N"], "CLOSE": ["K", "L", "OW1", "S"], "CLOSED": ["K", "L", "OW1", "Z", "D"], "CLOSELY": ["K", "L", "OW1", "S", "L", "IY0"], "CLOSER": ["K", "L", "OW1", "S", "ER0"], "CLOSES": ["K", "L", "OW1", "Z", "IH0", "Z"], "CLOSEST": ["K", "L", "OW1", "S", "AH0", "S", "T"], "CLOSING": ["K", "L", "OW1", "Z", "IH0", "NG"], "CLOSURE": ["K", "L", "OW1", "ZH", "ER0"], "CLOTH": ["K", "L", "AO1", "TH"], "CLOTHES": ["K", "L", "OW1", "DH", "Z"], "CLOTHING": ["K", "L", "OW1", "DH", "IH0", "NG"], "CLOUD": ["K", "L", "AW1", "D"], "CLOUDS": ["K", "L", "AW1", "D", "Z"], "CLOUDY": ["K", "L", "AW1", "D", "IY0"], "CLUB": ["K", "L", "AH1", "B"], "CLUBS": ["K", "L", "AH1", "B", "Z"], "CLUSTER": ["K", "L", "AH1", "S", "T", "ER0"], "CLUSTERS": ["K", "L", "AH1", "S", "T", "ER0", "Z"], "CNN": ["S", "IY1", "EH1", "N", "EH1", "N"], "CO": ["K", "OW1"], "COACH": ["K", "OW1", "CH"], "COACHES": ["K", "OW1", "CH", "IH0", "Z"], "COACHING": ["K", "OW1", "CH", "IH0", "NG"], "COAL": ["K", "OW1", "L"], "COALITION": ["K", "OW2", "AH0", "L", "IH1", "SH", "AH0", "N"], "COAST": ["K", "OW1", "S", "T"], "COASTAL": ["K", "OW1", "S", "T", "AH0", "L"], "COAT": ["K", "OW1", "T"], "COATED": ["K", "OW1", "T", "AH0", "D"], "COATING": ["K", "OW1", "T", "IH0", "NG"], "COCK": ["K", "AA1", "K"], "COCKS": ["K", "AA1", "K", "S"], "COD": ["K", "AA1", "D"], "CODE": ["K", "OW1", "D"], "CODES": ["K", "OW1", "D", "Z"], "CODING": ["K", "OW1", "D", "IH0", "NG"], "COFFEE": ["K", "AA1", "F", "IY0"], "COGNITIVE": ["K", "AA1", "G", "N", "IH0", "T", "IH0", "V"], "COHEN": ["K", "OW1", "AH0", "N"], "COIN": ["K", "OY1", "N"], "COINS": ["K", "OY1", "N", "Z"], "COLD": ["K", "OW1", "L", "D"], "COLE": ["K", "OW1", "L"], "COLEMAN": ["K", "OW1", "L", "M", "AH0", "N"], "COLIN": ["K", "OW1", "L", "IH0", "N"], "COLLABORATION": ["K", "AH0", "L", "AE2", "B", "ER0", "EY1", "SH", "AH0", "N"], "COLLABORATIVE": ["K", "AH0", "L", "AE1", "B", "ER0", "EY2", "T", "IH0", "V"], "COLLAPSE": ["K", "AH0", "L", "AE1", "P", "S"], "COLLAR": ["K", "AA1", "L", "ER0"], "COLLEAGUE": ["K", "AA1", "L", "IY0", "G"], "COLLEAGUES": ["K", "AA1", "L", "IY0", "G", "Z"], "COLLECT": ["K", "AH0", "L", "EH1", "K", "T"], "COLLECTED": ["K", "AH0", "L", "EH1", "K", "T", "AH0", "D"], "COLLECTIBLE": ["K", "AH0", "L", "EH1", "K", "T", "AH0", "B", "AH0", "L"], "COLLECTIBLES": ["K", "AH0", "L", "EH1", "K", "T", "AH0", "B", "AH0", "L", "Z"], "COLLECTING": ["K", "AH0", "L", "EH1", "K", "T", "IH0", "NG"], "COLLECTION": ["K", "AH0", "L", "EH1", "K", "SH", "AH0", "N"], "COLLECTIONS": ["K", "AH0", "L", "EH1", "K", "SH", "AH0", "N", "Z"], "COLLECTIVE": ["K", "AH0", "L", "EH1", "K", "T", "IH0", "V"], "COLLECTOR": ["K", "AH0", "L", "EH1", "K", "T", "ER0"], "COLLECTORS": ["K", "AH0", "L", "EH1", "K", "T", "ER0", "Z"], "COLLEGE": ["K", "AA1", "L", "IH0", "JH"], "COLLEGES": ["K", "AA1", "L", "IH0", "JH", "IH0", "Z"], "COLLINS": ["K", "AA1", "L", "IH0", "N", "Z"], "COLOGNE": ["K", "AH0", "L", "OW1", "N"], "COLOMBIA": ["K", "AH0", "L", "AH1", "M", "B", "IY0", "AH0"], "COLON": ["K", "OW1", "L", "AH0", "N"], "COLONIAL": ["K", "AH0", "L", "OW1", "N", "IY0", "AH0", "L"], "COLONY": ["K", "AA1", "L", "AH0", "N", "IY0"], "COLOR": ["K", "AH1", "L", "ER0"], "COLORADO": ["K", "AA2", "L", "ER0", "AA1", "D", "OW0"], "COLORED": ["K", "AH1", "L", "ER0", "D"], "COLORS": ["K", "AH1", "L", "ER0", "Z"], "COLOUR": ["K", "AH1", "L", "ER0"], "COLUMBIA": ["K", "AH0", "L", "AH1", "M", "B", "IY0", "AH0"], "COLUMBUS": ["K", "AH0", "L", "AH1", "M", "B", "AH0", "S"], "COLUMN": ["K", "AA1", "L", "AH0", "M"], "COLUMNISTS": ["K", "AA1", "L", "AH0", "M", "N", "AH0", "S", "T", "S"], "COLUMNS": ["K", "AA1", "L", "AH0", "M", "Z"], "COM": ["K", "AA1", "M"], "COMBAT": ["K", "AA1", "M", "B", "AE0", "T"], "COMBINATION": ["K", "AA2", "M", "B", "AH0", "N", "EY1", "SH", "AH0", "N"], "COMBINATIONS": ["K", "AA2", "M", "B", "AH0", "N", "EY1", "SH", "AH0", "N", "Z"], "COMBINE": ["K", "AA1", "M", "B", "AY0", "N"], "COMBINED": ["K", "AH0", "M", "B", "AY1", "N", "D"], "COMBINES": ["K", "AH0", "M", "B", "AY1", "N", "Z"], "COMBINING": ["K", "AH0", "M", "B", "AY1", "N", "IH0", "NG"], "COMBO": ["K", "AA1", "M", "B", "OW2"], "COME": ["K", "AH1", "M"], "COMEDY": ["K", "AA1", "M", "AH0", "D", "IY0"], "COMES": ["K", "AH1", "M", "Z"], "COMFORT": ["K", "AH1", "M", "F", "ER0", "T"], "COMFORTABLE": ["K", "AH1", "M", "F", "ER0", "T", "AH0", "B", "AH0", "L"], "COMIC": ["K", "AA1", "M", "IH0", "K"], "COMICS": ["K", "AA1", "M", "IH0", "K", "S"], "COMING": ["K", "AH1", "M", "IH0", "NG"], "COMM": ["K", "AA1", "M"], "COMMAND": ["K", "AH0", "M", "AE1", "N", "D"], "COMMANDER": ["K", "AH0", "M", "AE1", "N", "D", "ER0"], "COMMANDS": ["K", "AH0", "M", "AE1", "N", "D", "Z"], "COMMENT": ["K", "AA1", "M", "EH0", "N", "T"], "COMMENTARY": ["K", "AA1", "M", "AH0", "N", "T", "EH2", "R", "IY0"], "COMMENTED": ["K", "AA1", "M", "EH0", "N", "T", "AH0", "D"], "COMMENTS": ["K", "AA1", "M", "EH0", "N", "T", "S"], "COMMERCE": ["K", "AA1", "M", "ER0", "S"], "COMMERCIAL": ["K", "AH0", "M", "ER1", "SH", "AH0", "L"], "COMMISSION": ["K", "AH0", "M", "IH1", "SH", "AH0", "N"], "COMMISSIONER": ["K", "AH0", "M", "IH1", "SH", "AH0", "N", "ER0"], "COMMISSIONERS": ["K", "AH0", "M", "IH1", "SH", "AH0", "N", "ER0", "Z"], "COMMISSIONS": ["K", "AH0", "M", "IH1", "SH", "AH0", "N", "Z"], "COMMIT": ["K", "AH0", "M", "IH1", "T"], "COMMITMENT": ["K", "AH0", "M", "IH1", "T", "M", "AH0", "N", "T"], "COMMITMENTS": ["K", "AH0", "M", "IH1", "T", "M", "AH0", "N", "T", "S"], "COMMITTED": ["K", "AH0", "M", "IH1", "T", "IH0", "D"], "COMMITTEE": ["K", "AH0", "M", "IH1", "T", "IY0"], "COMMITTEES": ["K", "AH0", "M", "IH1", "T", "IY0", "Z"], "COMMODITIES": ["K", "AH0", "M", "AA1", "D", "AH0", "T", "IY0", "Z"], "COMMODITY": ["K", "AH0", "M", "AA1", "D", "AH0", "T", "IY0"], "COMMON": ["K", "AA1", "M", "AH0", "N"], "COMMONLY": ["K", "AA1", "M", "AH0", "N", "L", "IY0"], "COMMONS": ["K", "AA1", "M", "AH0", "N", "Z"], "COMMONWEALTH": ["K", "AA1", "M", "AH0", "N", "W", "EH2", "L", "TH"], "COMMUNICATE": ["K", "AH0", "M", "Y", "UW1", "N", "AH0", "K", "EY2", "T"], "COMMUNICATION": ["K", "AH0", "M", "Y", "UW2", "N", "AH0", "K", "EY1", "SH", "AH0", "N"], "COMMUNICATIONS": ["K", "AH0", "M", "Y", "UW2", "N", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "COMMUNIST": ["K", "AA1", "M", "Y", "AH0", "N", "AH0", "S", "T"], "COMMUNITIES": ["K", "AH0", "M", "Y", "UW1", "N", "AH0", "T", "IY0", "Z"], "COMMUNITY": ["K", "AH0", "M", "Y", "UW1", "N", "AH0", "T", "IY0"], "COMP": ["K", "AA1", "M", "P"], "COMPACT": ["K", "AA1", "M", "P", "AE0", "K", "T"], "COMPANIES": ["K", "AH1", "M", "P", "AH0", "N", "IY2", "Z"], "COMPANION": ["K", "AH0", "M", "P", "AE1", "N", "Y", "AH0", "N"], "COMPANY": ["K", "AH1", "M", "P", "AH0", "N", "IY2"], "COMPAQ": ["K", "AA1", "M", "P", "AE2", "K"], "COMPARABLE": ["K", "AA1", "M", "P", "R", "AH0", "B", "AH0", "L"], "COMPARATIVE": ["K", "AH0", "M", "P", "AE1", "R", "AH0", "T", "IH0", "V"], "COMPARE": ["K", "AH0", "M", "P", "EH1", "R"], "COMPARED": ["K", "AH0", "M", "P", "EH1", "R", "D"], "COMPARING": ["K", "AH0", "M", "P", "EH1", "R", "IH0", "NG"], "COMPARISON": ["K", "AH0", "M", "P", "EH1", "R", "AH0", "S", "AH0", "N"], "COMPARISONS": ["K", "AH0", "M", "P", "EH1", "R", "AH0", "S", "AH0", "N", "Z"], "COMPATIBILITY": ["K", "AH0", "M", "P", "AE2", "T", "AH0", "B", "IH1", "L", "AH0", "T", "IY2"], "COMPATIBLE": ["K", "AH0", "M", "P", "AE1", "T", "AH0", "B", "AH0", "L"], "COMPENSATION": ["K", "AA2", "M", "P", "AH0", "N", "S", "EY1", "SH", "AH0", "N"], "COMPETE": ["K", "AH0", "M", "P", "IY1", "T"], "COMPETENT": ["K", "AA1", "M", "P", "AH0", "T", "IH0", "N", "T"], "COMPETING": ["K", "AH0", "M", "P", "IY1", "T", "IH0", "NG"], "COMPETITION": ["K", "AA2", "M", "P", "AH0", "T", "IH1", "SH", "AH0", "N"], "COMPETITIONS": ["K", "AA2", "M", "P", "AH0", "T", "IH1", "SH", "AH0", "N", "Z"], "COMPETITIVE": ["K", "AH0", "M", "P", "EH1", "T", "AH0", "T", "IH0", "V"], "COMPETITORS": ["K", "AH0", "M", "P", "EH1", "T", "AH0", "T", "ER0", "Z"], "COMPILATION": ["K", "AA2", "M", "P", "AH0", "L", "EY1", "SH", "AH0", "N"], "COMPILE": ["K", "AH0", "M", "P", "AY1", "L"], "COMPILED": ["K", "AH0", "M", "P", "AY1", "L", "D"], "COMPILER": ["K", "AH0", "M", "P", "AY1", "L", "ER0"], "COMPLAINT": ["K", "AH0", "M", "P", "L", "EY1", "N", "T"], "COMPLAINTS": ["K", "AH0", "M", "P", "L", "EY1", "N", "T", "S"], "COMPLEMENT": ["K", "AA1", "M", "P", "L", "AH0", "M", "AH0", "N", "T"], "COMPLETE": ["K", "AH0", "M", "P", "L", "IY1", "T"], "COMPLETED": ["K", "AH0", "M", "P", "L", "IY1", "T", "AH0", "D"], "COMPLETELY": ["K", "AH0", "M", "P", "L", "IY1", "T", "L", "IY0"], "COMPLETING": ["K", "AH0", "M", "P", "L", "IY1", "T", "IH0", "NG"], "COMPLETION": ["K", "AH0", "M", "P", "L", "IY1", "SH", "AH0", "N"], "COMPLEX": ["K", "AA1", "M", "P", "L", "EH0", "K", "S"], "COMPLEXITY": ["K", "AH0", "M", "P", "L", "EH1", "K", "S", "AH0", "T", "IY0"], "COMPLIANCE": ["K", "AH0", "M", "P", "L", "AY1", "AH0", "N", "S"], "COMPLIANT": ["K", "AH0", "M", "P", "L", "AY1", "AH0", "N", "T"], "COMPLICATED": ["K", "AA1", "M", "P", "L", "AH0", "K", "EY2", "T", "AH0", "D"], "COMPLICATIONS": ["K", "AA2", "M", "P", "L", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "COMPLIMENTARY": ["K", "AA2", "M", "P", "L", "AH0", "M", "EH1", "N", "T", "ER0", "IY0"], "COMPLY": ["K", "AH0", "M", "P", "L", "AY1"], "COMPONENT": ["K", "AH0", "M", "P", "OW1", "N", "AH0", "N", "T"], "COMPONENTS": ["K", "AH0", "M", "P", "OW1", "N", "AH0", "N", "T", "S"], "COMPOSED": ["K", "AH0", "M", "P", "OW1", "Z", "D"], "COMPOSER": ["K", "AH0", "M", "P", "OW1", "Z", "ER0"], "COMPOSITE": ["K", "AH0", "M", "P", "AA1", "Z", "AH0", "T"], "COMPOSITION": ["K", "AA2", "M", "P", "AH0", "Z", "IH1", "SH", "AH0", "N"], "COMPOUND": ["K", "AA1", "M", "P", "AW0", "N", "D"], "COMPOUNDS": ["K", "AA1", "M", "P", "AW0", "N", "D", "Z"], "COMPREHENSIVE": ["K", "AA2", "M", "P", "R", "IY0", "HH", "EH1", "N", "S", "IH0", "V"], "COMPRESSED": ["K", "AH0", "M", "P", "R", "EH1", "S", "T"], "COMPRESSION": ["K", "AH0", "M", "P", "R", "EH1", "SH", "AH0", "N"], "COMPROMISE": ["K", "AA1", "M", "P", "R", "AH0", "M", "AY2", "Z"], "COMPUTATION": ["K", "AA2", "M", "P", "Y", "AH0", "T", "EY1", "SH", "AH0", "N"], "COMPUTATIONAL": ["K", "AA2", "M", "P", "Y", "UW0", "T", "EY1", "SH", "AH0", "N", "AH0", "L"], "COMPUTE": ["K", "AH0", "M", "P", "Y", "UW1", "T"], "COMPUTED": ["K", "AH0", "M", "P", "Y", "UW1", "T", "AH0", "D"], "COMPUTER": ["K", "AH0", "M", "P", "Y", "UW1", "T", "ER0"], "COMPUTERS": ["K", "AH0", "M", "P", "Y", "UW1", "T", "ER0", "Z"], "COMPUTING": ["K", "AH0", "M", "P", "Y", "UW1", "T", "IH0", "NG"], "CON": ["K", "AA1", "N"], "CONCENTRATE": ["K", "AA1", "N", "S", "AH0", "N", "T", "R", "EY2", "T"], "CONCENTRATION": ["K", "AA2", "N", "S", "AH0", "N", "T", "R", "EY1", "SH", "AH0", "N"], "CONCENTRATIONS": ["K", "AA2", "N", "S", "AH0", "N", "T", "R", "EY1", "SH", "AH0", "N", "Z"], "CONCEPT": ["K", "AA1", "N", "S", "EH0", "P", "T"], "CONCEPTS": ["K", "AA1", "N", "S", "EH0", "P", "T", "S"], "CONCEPTUAL": ["K", "AH0", "N", "S", "EH1", "P", "CH", "UW0", "AH0", "L"], "CONCERN": ["K", "AH0", "N", "S", "ER1", "N"], "CONCERNED": ["K", "AH0", "N", "S", "ER1", "N", "D"], "CONCERNING": ["K", "AH0", "N", "S", "ER1", "N", "IH0", "NG"], "CONCERNS": ["K", "AH0", "N", "S", "ER1", "N", "Z"], "CONCERT": ["K", "AA1", "N", "S", "ER0", "T"], "CONCERTS": ["K", "AA1", "N", "S", "ER0", "T", "S"], "CONCLUDE": ["K", "AH0", "N", "K", "L", "UW1", "D"], "CONCLUDED": ["K", "AH0", "N", "K", "L", "UW1", "D", "AH0", "D"], "CONCLUSION": ["K", "AH0", "N", "K", "L", "UW1", "ZH", "AH0", "N"], "CONCLUSIONS": ["K", "AH0", "N", "K", "L", "UW1", "ZH", "AH0", "N", "Z"], "CONCORD": ["K", "AA1", "N", "K", "AO2", "R", "D"], "CONCRETE": ["K", "AH0", "N", "K", "R", "IY1", "T"], "CONDITION": ["K", "AH0", "N", "D", "IH1", "SH", "AH0", "N"], "CONDITIONAL": ["K", "AH0", "N", "D", "IH1", "SH", "AH0", "N", "AH0", "L"], "CONDITIONING": ["K", "AH0", "N", "D", "IH1", "SH", "AH0", "N", "IH0", "NG"], "CONDITIONS": ["K", "AH0", "N", "D", "IH1", "SH", "AH0", "N", "Z"], "CONDO": ["K", "AA1", "N", "D", "OW0"], "CONDOS": ["K", "AA1", "N", "D", "OW0", "Z"], "CONDUCT": ["K", "AA1", "N", "D", "AH0", "K", "T"], "CONDUCTED": ["K", "AH0", "N", "D", "AH1", "K", "T", "AH0", "D"], "CONDUCTING": ["K", "AH0", "N", "D", "AH1", "K", "T", "IH0", "NG"], "CONFERENCE": ["K", "AA1", "N", "F", "ER0", "AH0", "N", "S"], "CONFERENCES": ["K", "AA1", "N", "F", "ER0", "AH0", "N", "S", "AH0", "Z"], "CONFERENCING": ["K", "AA1", "N", "F", "R", "AH0", "N", "S", "IH0", "NG"], "CONFIDENCE": ["K", "AA1", "N", "F", "AH0", "D", "EH0", "N", "S"], "CONFIDENT": ["K", "AA1", "N", "F", "AH0", "D", "AH0", "N", "T"], "CONFIDENTIAL": ["K", "AA2", "N", "F", "AH0", "D", "EH1", "N", "SH", "AH0", "L"], "CONFIDENTIALITY": ["K", "AA2", "N", "F", "AH0", "D", "EH2", "N", "SH", "IY0", "AE1", "L", "AH0", "T", "IY0"], "CONFIGURATION": ["K", "AH0", "N", "F", "IH2", "G", "Y", "ER0", "EY1", "SH", "AH0", "N"], "CONFIGURE": ["K", "AH0", "N", "F", "IH1", "G", "Y", "ER0"], "CONFIGURED": ["K", "AH0", "N", "F", "IH1", "G", "Y", "ER0", "D"], "CONFIGURING": ["K", "AH0", "N", "F", "IH1", "G", "Y", "ER0", "IH0", "NG"], "CONFIRM": ["K", "AH0", "N", "F", "ER1", "M"], "CONFIRMATION": ["K", "AA2", "N", "F", "ER0", "M", "EY1", "SH", "AH0", "N"], "CONFIRMED": ["K", "AH0", "N", "F", "ER1", "M", "D"], "CONFLICT": ["K", "AA1", "N", "F", "L", "IH0", "K", "T"], "CONFLICTS": ["K", "AH0", "N", "F", "L", "IH1", "K", "T", "S"], "CONFUSED": ["K", "AH0", "N", "F", "Y", "UW1", "Z", "D"], "CONFUSION": ["K", "AH0", "N", "F", "Y", "UW1", "ZH", "AH0", "N"], "CONGO": ["K", "AA1", "NG", "G", "OW0"], "CONGRATULATIONS": ["K", "AH0", "N", "G", "R", "AE2", "CH", "AH0", "L", "EY1", "SH", "AH0", "N", "Z"], "CONGRESS": ["K", "AA1", "NG", "G", "R", "AH0", "S"], "CONGRESSIONAL": ["K", "AH0", "N", "G", "R", "EH1", "SH", "AH0", "N", "AH0", "L"], "CONJUNCTION": ["K", "AH0", "N", "JH", "AH1", "NG", "K", "SH", "AH0", "N"], "CONNECT": ["K", "AH0", "N", "EH1", "K", "T"], "CONNECTED": ["K", "AH0", "N", "EH1", "K", "T", "IH0", "D"], "CONNECTICUT": ["K", "AH0", "N", "EH1", "T", "AH0", "K", "AH0", "T"], "CONNECTING": ["K", "AH0", "N", "EH1", "K", "T", "IH0", "NG"], "CONNECTION": ["K", "AH0", "N", "EH1", "K", "SH", "AH0", "N"], "CONNECTIONS": ["K", "AH0", "N", "EH1", "K", "SH", "AH0", "N", "Z"], "CONNECTIVITY": ["K", "AH0", "N", "EH0", "K", "T", "IH1", "V", "IH0", "T", "IY0"], "CONNECTOR": ["K", "AH0", "N", "EH1", "K", "T", "ER0"], "CONNECTORS": ["K", "AH0", "N", "EH1", "K", "T", "ER0", "Z"], "CONS": ["K", "AA1", "N", "Z"], "CONSCIOUS": ["K", "AA1", "N", "SH", "AH0", "S"], "CONSCIOUSNESS": ["K", "AA1", "N", "SH", "AH0", "S", "N", "AH0", "S"], "CONSECUTIVE": ["K", "AH0", "N", "S", "EH1", "K", "Y", "AH0", "T", "IH0", "V"], "CONSENSUS": ["K", "AH0", "N", "S", "EH1", "N", "S", "AH0", "S"], "CONSENT": ["K", "AH0", "N", "S", "EH1", "N", "T"], "CONSEQUENCE": ["K", "AA1", "N", "S", "AH0", "K", "W", "AH0", "N", "S"], "CONSEQUENCES": ["K", "AA1", "N", "S", "AH0", "K", "W", "EH2", "N", "S", "AH0", "Z"], "CONSEQUENTLY": ["K", "AA1", "N", "S", "AH0", "K", "W", "AH0", "N", "T", "L", "IY0"], "CONSERVATION": ["K", "AA2", "N", "S", "ER0", "V", "EY1", "SH", "AH0", "N"], "CONSERVATIVE": ["K", "AH0", "N", "S", "ER1", "V", "AH0", "T", "IH0", "V"], "CONSIDER": ["K", "AH0", "N", "S", "IH1", "D", "ER0"], "CONSIDERABLE": ["K", "AH0", "N", "S", "IH1", "D", "ER0", "AH0", "B", "AH0", "L"], "CONSIDERATION": ["K", "AH0", "N", "S", "IH2", "D", "ER0", "EY1", "SH", "AH0", "N"], "CONSIDERATIONS": ["K", "AH0", "N", "S", "IH2", "D", "ER0", "EY1", "SH", "AH0", "N", "Z"], "CONSIDERED": ["K", "AH0", "N", "S", "IH1", "D", "ER0", "D"], "CONSIDERING": ["K", "AH0", "N", "S", "IH1", "D", "ER0", "IH0", "NG"], "CONSIDERS": ["K", "AH0", "N", "S", "IH1", "D", "ER0", "Z"], "CONSIST": ["K", "AH0", "N", "S", "IH1", "S", "T"], "CONSISTENCY": ["K", "AH0", "N", "S", "IH1", "S", "T", "AH0", "N", "S", "IY0"], "CONSISTENT": ["K", "AH0", "N", "S", "IH1", "S", "T", "AH0", "N", "T"], "CONSISTENTLY": ["K", "AH0", "N", "S", "IH1", "S", "T", "AH0", "N", "T", "L", "IY0"], "CONSISTING": ["K", "AH0", "N", "S", "IH1", "S", "T", "IH0", "NG"], "CONSISTS": ["K", "AH0", "N", "S", "IH1", "S", "T", "S"], "CONSOLE": ["K", "AA1", "N", "S", "OW0", "L"], "CONSOLES": ["K", "AH0", "N", "S", "OW1", "L", "Z"], "CONSOLIDATED": ["K", "AH0", "N", "S", "AA1", "L", "AH0", "D", "EY2", "T", "AH0", "D"], "CONSOLIDATION": ["K", "AH0", "N", "S", "AA2", "L", "AH0", "D", "EY1", "SH", "AH0", "N"], "CONSORTIUM": ["K", "AH0", "N", "S", "AO1", "R", "SH", "IY0", "AH0", "M"], "CONSPIRACY": ["K", "AH0", "N", "S", "P", "IH1", "R", "AH0", "S", "IY0"], "CONSTANT": ["K", "AA1", "N", "S", "T", "AH0", "N", "T"], "CONSTANTLY": ["K", "AA1", "N", "S", "T", "AH0", "N", "T", "L", "IY0"], "CONSTITUTE": ["K", "AA1", "N", "S", "T", "AH0", "T", "UW2", "T"], "CONSTITUTES": ["K", "AA1", "N", "S", "T", "AH0", "T", "UW2", "T", "S"], "CONSTITUTION": ["K", "AA2", "N", "S", "T", "AH0", "T", "UW1", "SH", "AH0", "N"], "CONSTITUTIONAL": ["K", "AA2", "N", "S", "T", "AH0", "T", "UW1", "SH", "AH0", "N", "AH0", "L"], "CONSTRAINT": ["K", "AH0", "N", "S", "T", "R", "EY1", "N", "T"], "CONSTRAINTS": ["K", "AH0", "N", "S", "T", "R", "EY1", "N", "T", "S"], "CONSTRUCT": ["K", "AH0", "N", "S", "T", "R", "AH1", "K", "T"], "CONSTRUCTED": ["K", "AH0", "N", "S", "T", "R", "AH1", "K", "T", "AH0", "D"], "CONSTRUCTION": ["K", "AH0", "N", "S", "T", "R", "AH1", "K", "SH", "AH0", "N"], "CONSULT": ["K", "AH0", "N", "S", "AH1", "L", "T"], "CONSULTANCY": ["K", "AH0", "N", "S", "AH1", "L", "T", "AH0", "N", "S", "IY0"], "CONSULTANT": ["K", "AH0", "N", "S", "AH1", "L", "T", "AH0", "N", "T"], "CONSULTANTS": ["K", "AH0", "N", "S", "AH1", "L", "T", "AH0", "N", "T", "S"], "CONSULTATION": ["K", "AA2", "N", "S", "AH0", "L", "T", "EY1", "SH", "AH0", "N"], "CONSULTING": ["K", "AH0", "N", "S", "AH1", "L", "T", "IH0", "NG"], "CONSUMER": ["K", "AH0", "N", "S", "UW1", "M", "ER0"], "CONSUMERS": ["K", "AH0", "N", "S", "UW1", "M", "ER0", "Z"], "CONSUMPTION": ["K", "AH0", "N", "S", "AH1", "M", "P", "SH", "AH0", "N"], "CONTACT": ["K", "AA1", "N", "T", "AE2", "K", "T"], "CONTACTED": ["K", "AA1", "N", "T", "AE2", "K", "T", "IH0", "D"], "CONTACTING": ["K", "AA1", "N", "T", "AE2", "K", "T", "IH0", "NG"], "CONTACTS": ["K", "AA1", "N", "T", "AE2", "K", "T", "S"], "CONTAIN": ["K", "AH0", "N", "T", "EY1", "N"], "CONTAINED": ["K", "AH0", "N", "T", "EY1", "N", "D"], "CONTAINER": ["K", "AH0", "N", "T", "EY1", "N", "ER0"], "CONTAINERS": ["K", "AH0", "N", "T", "EY1", "N", "ER0", "Z"], "CONTAINING": ["K", "AH0", "N", "T", "EY1", "N", "IH0", "NG"], "CONTAINS": ["K", "AH0", "N", "T", "EY1", "N", "Z"], "CONTAMINATION": ["K", "AH0", "N", "T", "AE2", "M", "AH0", "N", "EY1", "SH", "AH0", "N"], "CONTEMPORARY": ["K", "AH0", "N", "T", "EH1", "M", "P", "ER0", "EH2", "R", "IY0"], "CONTENT": ["K", "AA1", "N", "T", "EH0", "N", "T"], "CONTENTS": ["K", "AA1", "N", "T", "EH0", "N", "T", "S"], "CONTEST": ["K", "AA1", "N", "T", "EH0", "S", "T"], "CONTESTS": ["K", "AA1", "N", "T", "EH0", "S", "T", "S"], "CONTEXT": ["K", "AA1", "N", "T", "EH0", "K", "S", "T"], "CONTINENT": ["K", "AA1", "N", "T", "AH0", "N", "AH0", "N", "T"], "CONTINENTAL": ["K", "AA2", "N", "T", "AH0", "N", "EH1", "N", "T", "AH0", "L"], "CONTINUALLY": ["K", "AH0", "N", "T", "IH1", "N", "Y", "UW0", "AH0", "L", "IY0"], "CONTINUE": ["K", "AH0", "N", "T", "IH1", "N", "Y", "UW0"], "CONTINUED": ["K", "AH0", "N", "T", "IH1", "N", "Y", "UW0", "D"], "CONTINUES": ["K", "AH0", "N", "T", "IH1", "N", "Y", "UW0", "Z"], "CONTINUING": ["K", "AH0", "N", "T", "IH1", "N", "Y", "UW0", "IH0", "NG"], "CONTINUITY": ["K", "AA2", "N", "T", "AH0", "N", "UW1", "AH0", "T", "IY0"], "CONTINUOUS": ["K", "AH0", "N", "T", "IH1", "N", "Y", "UW0", "AH0", "S"], "CONTINUOUSLY": ["K", "AH0", "N", "T", "IH1", "N", "Y", "UW0", "AH0", "S", "L", "IY0"], "CONTRACT": ["K", "AA1", "N", "T", "R", "AE2", "K", "T"], "CONTRACTING": ["K", "AA1", "N", "T", "R", "AE0", "K", "T", "IH0", "NG"], "CONTRACTOR": ["K", "AA1", "N", "T", "R", "AE2", "K", "T", "ER0"], "CONTRACTORS": ["K", "AA1", "N", "T", "R", "AE2", "K", "T", "ER0", "Z"], "CONTRACTS": ["K", "AA1", "N", "T", "R", "AE2", "K", "T", "S"], "CONTRARY": ["K", "AA1", "N", "T", "R", "EH0", "R", "IY0"], "CONTRAST": ["K", "AA1", "N", "T", "R", "AE0", "S", "T"], "CONTRIBUTE": ["K", "AH0", "N", "T", "R", "IH1", "B", "Y", "UW0", "T"], "CONTRIBUTED": ["K", "AH0", "N", "T", "R", "IH1", "B", "Y", "UW0", "T", "IH0", "D"], "CONTRIBUTING": ["K", "AH0", "N", "T", "R", "IH1", "B", "Y", "UW0", "T", "IH0", "NG"], "CONTRIBUTION": ["K", "AA2", "N", "T", "R", "AH0", "B", "Y", "UW1", "SH", "AH0", "N"], "CONTRIBUTIONS": ["K", "AA2", "N", "T", "R", "AH0", "B", "Y", "UW1", "SH", "AH0", "N", "Z"], "CONTRIBUTOR": ["K", "AH0", "N", "T", "R", "IH1", "B", "Y", "AH0", "T", "ER0"], "CONTRIBUTORS": ["K", "AH0", "N", "T", "R", "IH1", "B", "Y", "AH0", "T", "ER0", "Z"], "CONTROL": ["K", "AH0", "N", "T", "R", "OW1", "L"], "CONTROLLED": ["K", "AH0", "N", "T", "R", "OW1", "L", "D"], "CONTROLLER": ["K", "AH0", "N", "T", "R", "OW1", "L", "ER0"], "CONTROLLERS": ["K", "AH0", "N", "T", "R", "OW1", "L", "ER0", "Z"], "CONTROLLING": ["K", "AH0", "N", "T", "R", "OW1", "L", "IH0", "NG"], "CONTROLS": ["K", "AH0", "N", "T", "R", "OW1", "L", "Z"], "CONTROVERSIAL": ["K", "AA2", "N", "T", "R", "AH0", "V", "ER1", "SH", "AH0", "L"], "CONTROVERSY": ["K", "AA1", "N", "T", "R", "AH0", "V", "ER2", "S", "IY0"], "CONVENIENCE": ["K", "AH0", "N", "V", "IY1", "N", "Y", "AH0", "N", "S"], "CONVENIENT": ["K", "AH0", "N", "V", "IY1", "N", "Y", "AH0", "N", "T"], "CONVENTION": ["K", "AH0", "N", "V", "EH1", "N", "SH", "AH0", "N"], "CONVENTIONAL": ["K", "AH0", "N", "V", "EH1", "N", "SH", "AH0", "N", "AH0", "L"], "CONVENTIONS": ["K", "AH0", "N", "V", "EH1", "N", "SH", "AH0", "N", "Z"], "CONVERGENCE": ["K", "AH0", "N", "V", "ER1", "JH", "AH0", "N", "S"], "CONVERSATION": ["K", "AA2", "N", "V", "ER0", "S", "EY1", "SH", "AH0", "N"], "CONVERSATIONS": ["K", "AA2", "N", "V", "ER0", "S", "EY1", "SH", "AH0", "N", "Z"], "CONVERSION": ["K", "AH0", "N", "V", "ER1", "ZH", "AH0", "N"], "CONVERT": ["K", "AA1", "N", "V", "ER0", "T"], "CONVERTED": ["K", "AH0", "N", "V", "ER1", "T", "IH0", "D"], "CONVERTER": ["K", "AH0", "N", "V", "ER1", "T", "ER0"], "CONVERTIBLE": ["K", "AH0", "N", "V", "ER1", "T", "AH0", "B", "AH0", "L"], "CONVICTED": ["K", "AH0", "N", "V", "IH1", "K", "T", "AH0", "D"], "CONVICTION": ["K", "AH0", "N", "V", "IH1", "K", "SH", "AH0", "N"], "CONVINCED": ["K", "AH0", "N", "V", "IH1", "N", "S", "T"], "COOK": ["K", "UH1", "K"], "COOKBOOK": ["K", "UH1", "K", "B", "UH2", "K"], "COOKED": ["K", "UH1", "K", "T"], "COOKIE": ["K", "UH1", "K", "IY0"], "COOKIES": ["K", "UH1", "K", "IY0", "Z"], "COOKING": ["K", "UH1", "K", "IH0", "NG"], "COOL": ["K", "UW1", "L"], "COOLER": ["K", "UW1", "L", "ER0"], "COOLING": ["K", "UW1", "L", "IH0", "NG"], "COOPER": ["K", "UW1", "P", "ER0"], "COOPERATION": ["K", "OW0", "AA2", "P", "ER0", "EY1", "SH", "AH0", "N"], "COOPERATIVE": ["K", "OW0", "AA1", "P", "ER0", "EY2", "T", "IH0", "V"], "COORDINATE": ["K", "OW0", "AO1", "R", "D", "AH0", "N", "AH0", "T"], "COORDINATED": ["K", "OW0", "AO1", "R", "D", "AH0", "N", "EY0", "T", "IH0", "D"], "COORDINATES": ["K", "OW0", "AO1", "R", "D", "AH0", "N", "AH0", "T", "S"], "COORDINATION": ["K", "OW0", "AO2", "R", "D", "AH0", "N", "EY1", "SH", "AH0", "N"], "COORDINATOR": ["K", "OW0", "AO1", "R", "D", "AH0", "N", "EY2", "T", "ER0"], "COP": ["K", "AA1", "P"], "COPE": ["K", "OW1", "P"], "COPIED": ["K", "AA1", "P", "IY0", "D"], "COPIES": ["K", "AA1", "P", "IY0", "Z"], "COPPER": ["K", "AA1", "P", "ER0"], "COPY": ["K", "AA1", "P", "IY0"], "COPYING": ["K", "AA1", "P", "IY0", "IH0", "NG"], "COPYRIGHT": ["K", "AA1", "P", "IY0", "R", "AY2", "T"], "COPYRIGHTED": ["K", "AA1", "P", "IY0", "R", "AY2", "T", "IH0", "D"], "COPYRIGHTS": ["K", "AA1", "P", "IY0", "R", "AY2", "T", "S"], "CORAL": ["K", "AO1", "R", "AH0", "L"], "CORD": ["K", "AO1", "R", "D"], "CORDLESS": ["K", "AO1", "R", "D", "L", "AH0", "S"], "CORE": ["K", "AO1", "R"], "CORK": ["K", "AO1", "R", "K"], "CORN": ["K", "AO1", "R", "N"], "CORNELL": ["K", "AO0", "R", "N", "EH1", "L"], "CORNER": ["K", "AO1", "R", "N", "ER0"], "CORNERS": ["K", "AO1", "R", "N", "ER0", "Z"], "CORNWALL": ["K", "AO1", "R", "N", "W", "AO0", "L"], "CORP": ["K", "AO1", "R", "P"], "CORPORATE": ["K", "AO1", "R", "P", "ER0", "AH0", "T"], "CORPORATION": ["K", "AO2", "R", "P", "ER0", "EY1", "SH", "AH0", "N"], "CORPORATIONS": ["K", "AO2", "R", "P", "ER0", "EY1", "SH", "AH0", "N", "Z"], "CORPS": ["K", "AO1", "R"], "CORPUS": ["K", "AO1", "R", "P", "AH0", "S"], "CORRECT": ["K", "ER0", "EH1", "K", "T"], "CORRECTED": ["K", "ER0", "EH1", "K", "T", "AH0", "D"], "CORRECTION": ["K", "ER0", "EH1", "K", "SH", "AH0", "N"], "CORRECTIONS": ["K", "ER0", "EH1", "K", "SH", "AH0", "N", "Z"], "CORRECTLY": ["K", "ER0", "EH1", "K", "T", "L", "IY0"], "CORRELATION": ["K", "AO2", "R", "AH0", "L", "EY1", "SH", "AH0", "N"], "CORRESPONDENCE": ["K", "AO2", "R", "AH0", "S", "P", "AA1", "N", "D", "AH0", "N", "S"], "CORRESPONDING": ["K", "AO2", "R", "AH0", "S", "P", "AA1", "N", "D", "IH0", "NG"], "CORRUPTION": ["K", "ER0", "AH1", "P", "SH", "AH0", "N"], "COS": ["K", "AO1", "S"], "COSMETIC": ["K", "AA0", "Z", "M", "EH1", "T", "IH0", "K"], "COSMETICS": ["K", "AA0", "Z", "M", "EH1", "T", "IH0", "K", "S"], "COST": ["K", "AA1", "S", "T"], "COSTA": ["K", "AO1", "S", "T", "AA0"], "COSTS": ["K", "AA1", "S", "T", "S"], "COSTUME": ["K", "AA0", "S", "T", "UW1", "M"], "COSTUMES": ["K", "AA0", "S", "T", "UW1", "M", "Z"], "COTTAGE": ["K", "AA1", "T", "AH0", "JH"], "COTTAGES": ["K", "AA1", "T", "IH0", "JH", "IH0", "Z"], "COTTON": ["K", "AA1", "T", "AH0", "N"], "COULD": ["K", "UH1", "D"], "COUNCIL": ["K", "AW1", "N", "S", "AH0", "L"], "COUNCILS": ["K", "AW1", "N", "S", "IH0", "L", "Z"], "COUNSEL": ["K", "AW1", "N", "S", "AH0", "L"], "COUNSELING": ["K", "AW1", "N", "S", "AH0", "L", "IH0", "NG"], "COUNT": ["K", "AW1", "N", "T"], "COUNTED": ["K", "AW1", "N", "T", "IH0", "D"], "COUNTER": ["K", "AW1", "N", "T", "ER0"], "COUNTERS": ["K", "AW1", "N", "T", "ER0", "Z"], "COUNTIES": ["K", "AW1", "N", "T", "IY0", "Z"], "COUNTING": ["K", "AW1", "N", "T", "IH0", "NG"], "COUNTRIES": ["K", "AH1", "N", "T", "R", "IY0", "Z"], "COUNTRY": ["K", "AH1", "N", "T", "R", "IY0"], "COUNTS": ["K", "AW1", "N", "T", "S"], "COUNTY": ["K", "AW1", "N", "T", "IY0"], "COUPLE": ["K", "AH1", "P", "AH0", "L"], "COUPLED": ["K", "AH1", "P", "AH0", "L", "D"], "COUPLES": ["K", "AH1", "P", "AH0", "L", "Z"], "COUPON": ["K", "UW1", "P", "AO2", "N"], "COUPONS": ["K", "UW1", "P", "AO2", "N", "Z"], "COURAGE": ["K", "ER1", "IH0", "JH"], "COURIER": ["K", "ER1", "IY0", "ER0"], "COURSE": ["K", "AO1", "R", "S"], "COURSES": ["K", "AO1", "R", "S", "AH0", "Z"], "COURT": ["K", "AO1", "R", "T"], "COURTESY": ["K", "ER1", "T", "AH0", "S", "IY0"], "COURTS": ["K", "AO1", "R", "T", "S"], "COVE": ["K", "OW1", "V"], "COVER": ["K", "AH1", "V", "ER0"], "COVERAGE": ["K", "AH1", "V", "ER0", "AH0", "JH"], "COVERED": ["K", "AH1", "V", "ER0", "D"], "COVERING": ["K", "AH1", "V", "ER0", "IH0", "NG"], "COVERS": ["K", "AH1", "V", "ER0", "Z"], "COW": ["K", "AW1"], "COWBOY": ["K", "AW1", "B", "OY2"], "COX": ["K", "AA1", "K", "S"], "CRACK": ["K", "R", "AE1", "K"], "CRADLE": ["K", "R", "EY1", "D", "AH0", "L"], "CRAFT": ["K", "R", "AE1", "F", "T"], "CRAFTS": ["K", "R", "AE1", "F", "T", "S"], "CRAIG": ["K", "R", "EY1", "G"], "CRAP": ["K", "R", "AE1", "P"], "CRAPS": ["K", "R", "AE1", "P", "S"], "CRASH": ["K", "R", "AE1", "SH"], "CRAWFORD": ["K", "R", "AO1", "F", "ER0", "D"], "CRAZY": ["K", "R", "EY1", "Z", "IY0"], "CREAM": ["K", "R", "IY1", "M"], "CREATE": ["K", "R", "IY0", "EY1", "T"], "CREATED": ["K", "R", "IY0", "EY1", "T", "AH0", "D"], "CREATES": ["K", "R", "IY0", "EY1", "T", "S"], "CREATING": ["K", "R", "IY0", "EY1", "T", "IH0", "NG"], "CREATION": ["K", "R", "IY0", "EY1", "SH", "AH0", "N"], "CREATIONS": ["K", "R", "IY0", "EY1", "SH", "AH0", "N", "Z"], "CREATIVE": ["K", "R", "IY0", "EY1", "T", "IH0", "V"], "CREATIVITY": ["K", "R", "IY2", "EY0", "T", "IH1", "V", "AH0", "T", "IY0"], "CREATOR": ["K", "R", "IY0", "EY1", "T", "ER0"], "CREATURE": ["K", "R", "IY1", "CH", "ER0"], "CREATURES": ["K", "R", "IY1", "CH", "ER0", "Z"], "CREDIT": ["K", "R", "EH1", "D", "AH0", "T"], "CREDITS": ["K", "R", "EH1", "D", "IH0", "T", "S"], "CREEK": ["K", "R", "IY1", "K"], "CREST": ["K", "R", "EH1", "S", "T"], "CREW": ["K", "R", "UW1"], "CRICKET": ["K", "R", "IH1", "K", "IH0", "T"], "CRIME": ["K", "R", "AY1", "M"], "CRIMES": ["K", "R", "AY1", "M", "Z"], "CRIMINAL": ["K", "R", "IH1", "M", "AH0", "N", "AH0", "L"], "CRISIS": ["K", "R", "AY1", "S", "AH0", "S"], "CRITERIA": ["K", "R", "AY0", "T", "IH1", "R", "IY0", "AH0"], "CRITERION": ["K", "R", "AY0", "T", "IH1", "R", "IY0", "AH0", "N"], "CRITICAL": ["K", "R", "IH1", "T", "IH0", "K", "AH0", "L"], "CRITICISM": ["K", "R", "IH1", "T", "IH0", "S", "IH2", "Z", "AH0", "M"], "CRITICS": ["K", "R", "IH1", "T", "IH0", "K", "S"], "CROATIA": ["K", "R", "OW0", "EY1", "SH", "AH0"], "CROP": ["K", "R", "AA1", "P"], "CROPS": ["K", "R", "AA1", "P", "S"], "CROSS": ["K", "R", "AO1", "S"], "CROSSING": ["K", "R", "AO1", "S", "IH0", "NG"], "CROSSWORD": ["K", "R", "AO1", "S", "W", "ER2", "D"], "CROWD": ["K", "R", "AW1", "D"], "CROWN": ["K", "R", "AW1", "N"], "CRUCIAL": ["K", "R", "UW1", "SH", "AH0", "L"], "CRUDE": ["K", "R", "UW1", "D"], "CRUISE": ["K", "R", "UW1", "Z"], "CRUISES": ["K", "R", "UW1", "Z", "IH0", "Z"], "CRUZ": ["K", "R", "UW1", "Z"], "CRY": ["K", "R", "AY1"], "CRYSTAL": ["K", "R", "IH1", "S", "T", "AH0", "L"], "CT": ["K", "AO1", "R", "T"], "CUBA": ["K", "Y", "UW1", "B", "AH0"], "CUBE": ["K", "Y", "UW1", "B"], "CUBIC": ["K", "Y", "UW1", "B", "IH0", "K"], "CUISINE": ["K", "W", "IH0", "Z", "IY1", "N"], "CULT": ["K", "AH1", "L", "T"], "CULTURAL": ["K", "AH1", "L", "CH", "ER0", "AH0", "L"], "CULTURE": ["K", "AH1", "L", "CH", "ER0"], "CULTURES": ["K", "AH1", "L", "CH", "ER0", "Z"], "CUM": ["K", "AH1", "M"], "CUMULATIVE": ["K", "Y", "UW1", "M", "Y", "AH0", "L", "AH0", "T", "IH0", "V"], "CUNT": ["K", "AH1", "N", "T"], "CUP": ["K", "AH1", "P"], "CUPS": ["K", "AH1", "P", "S"], "CURE": ["K", "Y", "UH1", "R"], "CURIOUS": ["K", "Y", "UH1", "R", "IY0", "AH0", "S"], "CURRENCIES": ["K", "ER1", "AH0", "N", "S", "IY0", "Z"], "CURRENCY": ["K", "ER1", "AH0", "N", "S", "IY0"], "CURRENT": ["K", "ER1", "AH0", "N", "T"], "CURRENTLY": ["K", "ER1", "AH0", "N", "T", "L", "IY0"], "CURRICULUM": ["K", "ER0", "IH1", "K", "Y", "AH0", "L", "AH0", "M"], "CURSOR": ["K", "ER1", "S", "ER0"], "CURTIS": ["K", "ER1", "T", "AH0", "S"], "CURVE": ["K", "ER1", "V"], "CURVES": ["K", "ER1", "V", "Z"], "CUSTODY": ["K", "AH1", "S", "T", "AH0", "D", "IY0"], "CUSTOM": ["K", "AH1", "S", "T", "AH0", "M"], "CUSTOMER": ["K", "AH1", "S", "T", "AH0", "M", "ER0"], "CUSTOMERS": ["K", "AH1", "S", "T", "AH0", "M", "ER0", "Z"], "CUSTOMIZE": ["K", "AH1", "S", "T", "AH0", "M", "AY2", "Z"], "CUSTOMIZED": ["K", "AH1", "S", "T", "AH0", "M", "AY2", "Z", "D"], "CUSTOMS": ["K", "AH1", "S", "T", "AH0", "M", "Z"], "CUT": ["K", "AH1", "T"], "CUTE": ["K", "Y", "UW1", "T"], "CUTS": ["K", "AH1", "T", "S"], "CUTTING": ["K", "AH1", "T", "IH0", "NG"], "CYBER": ["S", "AY1", "B", "ER0"], "CYCLE": ["S", "AY1", "K", "AH0", "L"], "CYCLES": ["S", "AY1", "K", "AH0", "L", "Z"], "CYCLING": ["S", "AY1", "K", "AH0", "L", "IH0", "NG"], "CYLINDER": ["S", "IH1", "L", "AH0", "N", "D", "ER0"], "CYPRUS": ["S", "AY1", "P", "R", "AH0", "S"], "CZECH": ["CH", "EH1", "K"], "D": ["D", "IY1"], "DA": ["D", "AA1"], "DAD": ["D", "AE1", "D"], "DADDY": ["D", "AE1", "D", "IY0"], "DAILY": ["D", "EY1", "L", "IY0"], "DAIRY": ["D", "EH1", "R", "IY0"], "DAISY": ["D", "EY1", "Z", "IY0"], "DAKOTA": ["D", "AH0", "K", "OW1", "T", "AH0"], "DALE": ["D", "EY1", "L"], "DALLAS": ["D", "AE1", "L", "AH0", "S"], "DAM": ["D", "AE1", "M"], "DAMAGE": ["D", "AE1", "M", "AH0", "JH"], "DAMAGED": ["D", "AE1", "M", "AH0", "JH", "D"], "DAMAGES": ["D", "AE1", "M", "AH0", "JH", "AH0", "Z"], "DAME": ["D", "EY1", "M"], "DAMN": ["D", "AE1", "M"], "DAN": ["D", "AE1", "N"], "DANA": ["D", "EY1", "N", "AH0"], "DANCE": ["D", "AE1", "N", "S"], "DANCING": ["D", "AE1", "N", "S", "IH0", "NG"], "DANGER": ["D", "EY1", "N", "JH", "ER0"], "DANGEROUS": ["D", "EY1", "N", "JH", "ER0", "AH0", "S"], "DANIEL": ["D", "AE1", "N", "Y", "AH0", "L"], "DANISH": ["D", "EY1", "N", "IH0", "SH"], "DANNY": ["D", "AE1", "N", "IY0"], "DARE": ["D", "EH1", "R"], "DARK": ["D", "AA1", "R", "K"], "DARKNESS": ["D", "AA1", "R", "K", "N", "AH0", "S"], "DARWIN": ["D", "AA1", "R", "W", "IH0", "N"], "DAS": ["D", "AE1", "S"], "DASH": ["D", "AE1", "SH"], "DAT": ["D", "AE1", "T"], "DATA": ["D", "EY1", "T", "AH0"], "DATABASE": ["D", "EY1", "T", "AH0", "B", "EY2", "S"], "DATABASES": ["D", "EY1", "T", "AH0", "B", "EY2", "S", "IH0", "Z"], "DATE": ["D", "EY1", "T"], "DATED": ["D", "EY1", "T", "IH0", "D"], "DATES": ["D", "EY1", "T", "S"], "DATING": ["D", "EY1", "T", "IH0", "NG"], "DAUGHTER": ["D", "AO1", "T", "ER0"], "DAUGHTERS": ["D", "AO1", "T", "ER0", "Z"], "DAVE": ["D", "EY1", "V"], "DAVID": ["D", "EY1", "V", "IH0", "D"], "DAVIDSON": ["D", "EY1", "V", "IH0", "D", "S", "AH0", "N"], "DAVIS": ["D", "EY1", "V", "AH0", "S"], "DAWN": ["D", "AO1", "N"], "DAY": ["D", "EY1"], "DAYS": ["D", "EY1", "Z"], "DAYTON": ["D", "EY1", "T", "AH0", "N"], "DC": ["D", "IY2", "S", "IY1"], "DE": ["D", "IY1"], "DEAD": ["D", "EH1", "D"], "DEADLINE": ["D", "EH1", "D", "L", "AY2", "N"], "DEADLY": ["D", "EH1", "D", "L", "IY0"], "DEAF": ["D", "EH1", "F"], "DEAL": ["D", "IY1", "L"], "DEALER": ["D", "IY1", "L", "ER0"], "DEALERS": ["D", "IY1", "L", "ER0", "Z"], "DEALING": ["D", "IY1", "L", "IH0", "NG"], "DEALS": ["D", "IY1", "L", "Z"], "DEALT": ["D", "EH1", "L", "T"], "DEAN": ["D", "IY1", "N"], "DEAR": ["D", "IH1", "R"], "DEATH": ["D", "EH1", "TH"], "DEATHS": ["D", "EH1", "TH", "S"], "DEBATE": ["D", "AH0", "B", "EY1", "T"], "DEBORAH": ["D", "EH1", "B", "ER0", "AH0"], "DEBT": ["D", "EH1", "T"], "DEBUG": ["D", "IY0", "B", "AH1", "G"], "DEBUT": ["D", "EY0", "B", "Y", "UW1"], "DEC": ["D", "EH1", "K"], "DECADE": ["D", "EH0", "K", "EY1", "D"], "DECADES": ["D", "EH0", "K", "EY1", "D", "Z"], "DECEMBER": ["D", "IH0", "S", "EH1", "M", "B", "ER0"], "DECENT": ["D", "IY1", "S", "AH0", "N", "T"], "DECIDE": ["D", "IH2", "S", "AY1", "D"], "DECIDED": ["D", "IH2", "S", "AY1", "D", "IH0", "D"], "DECIMAL": ["D", "EH1", "S", "AH0", "M", "AH0", "L"], "DECISION": ["D", "IH0", "S", "IH1", "ZH", "AH0", "N"], "DECISIONS": ["D", "IH0", "S", "IH1", "ZH", "AH0", "N", "Z"], "DECK": ["D", "EH1", "K"], "DECLARATION": ["D", "EH2", "K", "L", "ER0", "EY1", "SH", "AH0", "N"], "DECLARE": ["D", "IH0", "K", "L", "EH1", "R"], "DECLARED": ["D", "IH0", "K", "L", "EH1", "R", "D"], "DECLINE": ["D", "IH0", "K", "L", "AY1", "N"], "DECLINED": ["D", "IH0", "K", "L", "AY1", "N", "D"], "DECOR": ["D", "IH0", "K", "AO1", "R"], "DECORATING": ["D", "EH1", "K", "ER0", "EY2", "T", "IH0", "NG"], "DECORATIVE": ["D", "EH1", "K", "R", "AH0", "T", "IH0", "V"], "DECREASE": ["D", "IH0", "K", "R", "IY1", "S"], "DECREASED": ["D", "IH0", "K", "R", "IY1", "S", "T"], "DEDICATED": ["D", "EH1", "D", "AH0", "K", "EY0", "T", "AH0", "D"], "DEE": ["D", "IY1"], "DEEMED": ["D", "IY1", "M", "D"], "DEEP": ["D", "IY1", "P"], "DEEPER": ["D", "IY1", "P", "ER0"], "DEEPLY": ["D", "IY1", "P", "L", "IY0"], "DEER": ["D", "IH1", "R"], "DEFAULT": ["D", "IH0", "F", "AO1", "L", "T"], "DEFEAT": ["D", "IH0", "F", "IY1", "T"], "DEFECTS": ["D", "IY1", "F", "EH0", "K", "T", "S"], "DEFENCE": ["D", "IH0", "F", "EH1", "N", "S"], "DEFEND": ["D", "IH0", "F", "EH1", "N", "D"], "DEFENDANT": ["D", "IH0", "F", "EH1", "N", "D", "AH0", "N", "T"], "DEFENSE": ["D", "IH0", "F", "EH1", "N", "S"], "DEFENSIVE": ["D", "IH0", "F", "EH1", "N", "S", "IH0", "V"], "DEFERRED": ["D", "IH0", "F", "ER1", "D"], "DEFICIT": ["D", "EH1", "F", "AH0", "S", "AH0", "T"], "DEFINE": ["D", "IH0", "F", "AY1", "N"], "DEFINED": ["D", "IH0", "F", "AY1", "N", "D"], "DEFINES": ["D", "IH0", "F", "AY1", "N", "Z"], "DEFINING": ["D", "IH0", "F", "AY1", "N", "IH0", "NG"], "DEFINITELY": ["D", "EH1", "F", "AH0", "N", "AH0", "T", "L", "IY0"], "DEFINITION": ["D", "EH2", "F", "AH0", "N", "IH1", "SH", "AH0", "N"], "DEFINITIONS": ["D", "EH2", "F", "AH0", "N", "IH1", "SH", "AH0", "N", "Z"], "DEGREE": ["D", "IH0", "G", "R", "IY1"], "DEGREES": ["D", "IH0", "G", "R", "IY1", "Z"], "DEL": ["D", "EH1", "L"], "DELAWARE": ["D", "EH1", "L", "AH0", "W", "EH2", "R"], "DELAY": ["D", "IH0", "L", "EY1"], "DELAYED": ["D", "IH0", "L", "EY1", "D"], "DELAYS": ["D", "IH0", "L", "EY1", "Z"], "DELEGATION": ["D", "EH2", "L", "AH0", "G", "EY1", "SH", "AH0", "N"], "DELETE": ["D", "IH0", "L", "IY1", "T"], "DELETED": ["D", "IH0", "L", "IY1", "T", "AH0", "D"], "DELHI": ["D", "EH1", "L", "IY0"], "DELICIOUS": ["D", "IH0", "L", "IH1", "SH", "AH0", "S"], "DELIGHT": ["D", "IH0", "L", "AY1", "T"], "DELIVER": ["D", "IH0", "L", "IH1", "V", "ER0"], "DELIVERED": ["D", "IH0", "L", "IH1", "V", "ER0", "D"], "DELIVERING": ["D", "IH0", "L", "IH1", "V", "ER0", "IH0", "NG"], "DELIVERS": ["D", "IH0", "L", "IH1", "V", "ER0", "Z"], "DELIVERY": ["D", "IH0", "L", "IH1", "V", "ER0", "IY0"], "DELL": ["D", "EH1", "L"], "DELTA": ["D", "EH1", "L", "T", "AH0"], "DELUXE": ["D", "AH0", "L", "AH1", "K", "S"], "DEMAND": ["D", "IH0", "M", "AE1", "N", "D"], "DEMANDING": ["D", "IH0", "M", "AE1", "N", "D", "IH0", "NG"], "DEMANDS": ["D", "IH0", "M", "AE1", "N", "D", "Z"], "DEMO": ["D", "EH1", "M", "OW0"], "DEMOCRACY": ["D", "IH0", "M", "AA1", "K", "R", "AH0", "S", "IY0"], "DEMOCRAT": ["D", "EH1", "M", "AH0", "K", "R", "AE2", "T"], "DEMOCRATIC": ["D", "EH2", "M", "AH0", "K", "R", "AE1", "T", "IH0", "K"], "DEMOCRATS": ["D", "EH1", "M", "AH0", "K", "R", "AE2", "T", "S"], "DEMOGRAPHIC": ["D", "EH2", "M", "AH0", "G", "R", "AE1", "F", "IH0", "K"], "DEMONSTRATE": ["D", "EH1", "M", "AH0", "N", "S", "T", "R", "EY2", "T"], "DEMONSTRATED": ["D", "EH1", "M", "AH0", "N", "S", "T", "R", "EY2", "T", "AH0", "D"], "DEMONSTRATES": ["D", "EH1", "M", "AH0", "N", "S", "T", "R", "EY2", "T", "S"], "DEMONSTRATION": ["D", "EH2", "M", "AH0", "N", "S", "T", "R", "EY1", "SH", "AH0", "N"], "DEN": ["D", "EH1", "N"], "DENIAL": ["D", "IH0", "N", "AY1", "AH0", "L"], "DENIED": ["D", "IH0", "N", "AY1", "D"], "DENMARK": ["D", "EH1", "N", "M", "AA2", "R", "K"], "DENNIS": ["D", "EH1", "N", "IH0", "S"], "DENSE": ["D", "EH1", "N", "S"], "DENSITY": ["D", "EH1", "N", "S", "AH0", "T", "IY0"], "DENTAL": ["D", "EH1", "N", "T", "AH0", "L"], "DENTISTS": ["D", "EH1", "N", "T", "IH0", "S", "T", "S"], "DENVER": ["D", "EH1", "N", "V", "ER0"], "DENY": ["D", "IH0", "N", "AY1"], "DEPARTMENT": ["D", "IH0", "P", "AA1", "R", "T", "M", "AH0", "N", "T"], "DEPARTMENTAL": ["D", "IH0", "P", "AA2", "R", "T", "M", "EH1", "N", "AH0", "L"], "DEPARTMENTS": ["D", "IH0", "P", "AA1", "R", "T", "M", "AH0", "N", "T", "S"], "DEPARTURE": ["D", "IH0", "P", "AA1", "R", "CH", "ER0"], "DEPEND": ["D", "IH0", "P", "EH1", "N", "D"], "DEPENDENCE": ["D", "IH0", "P", "EH1", "N", "D", "AH0", "N", "S"], "DEPENDENT": ["D", "IH0", "P", "EH1", "N", "D", "AH0", "N", "T"], "DEPENDING": ["D", "IH0", "P", "EH1", "N", "D", "IH0", "NG"], "DEPENDS": ["D", "IH0", "P", "EH1", "N", "D", "Z"], "DEPLOYMENT": ["D", "IH0", "P", "L", "OY1", "M", "AH0", "N", "T"], "DEPOSIT": ["D", "AH0", "P", "AA1", "Z", "IH0", "T"], "DEPOSITS": ["D", "AH0", "P", "AA1", "Z", "IH0", "T", "S"], "DEPOT": ["D", "IY1", "P", "OW0"], "DEPRESSION": ["D", "IH0", "P", "R", "EH1", "SH", "AH0", "N"], "DEPTH": ["D", "EH1", "P", "TH"], "DEPUTY": ["D", "EH1", "P", "Y", "AH0", "T", "IY0"], "DER": ["D", "ER1"], "DERBY": ["D", "ER1", "B", "IY0"], "DEREK": ["D", "EH1", "R", "IH0", "K"], "DERIVED": ["D", "ER0", "AY1", "V", "D"], "DES": ["D", "EH1", "S"], "DESCENDING": ["D", "IH0", "S", "EH1", "N", "D", "IH0", "NG"], "DESCRIBE": ["D", "IH0", "S", "K", "R", "AY1", "B"], "DESCRIBED": ["D", "IH0", "S", "K", "R", "AY1", "B", "D"], "DESCRIBES": ["D", "IH0", "S", "K", "R", "AY1", "B", "Z"], "DESCRIBING": ["D", "IH0", "S", "K", "R", "AY1", "B", "IH0", "NG"], "DESCRIPTION": ["D", "IH0", "S", "K", "R", "IH1", "P", "SH", "AH0", "N"], "DESCRIPTIONS": ["D", "IH0", "S", "K", "R", "IH1", "P", "SH", "AH0", "N", "Z"], "DESERT": ["D", "EH1", "Z", "ER0", "T"], "DESERVE": ["D", "IH0", "Z", "ER1", "V"], "DESIGN": ["D", "IH0", "Z", "AY1", "N"], "DESIGNATED": ["D", "EH1", "Z", "IH0", "G", "N", "EY2", "T", "IH0", "D"], "DESIGNATION": ["D", "EH2", "Z", "AH0", "G", "N", "EY1", "SH", "AH0", "N"], "DESIGNED": ["D", "IH0", "Z", "AY1", "N", "D"], "DESIGNER": ["D", "IH0", "Z", "AY1", "N", "ER0"], "DESIGNERS": ["D", "IH0", "Z", "AY1", "N", "ER0", "Z"], "DESIGNING": ["D", "IH0", "Z", "AY1", "N", "IH0", "NG"], "DESIGNS": ["D", "IH0", "Z", "AY1", "N", "Z"], "DESIRABLE": ["D", "IH0", "Z", "AY1", "R", "AH0", "B", "AH0", "L"], "DESIRE": ["D", "IH0", "Z", "AY1", "ER0"], "DESIRED": ["D", "IH0", "Z", "AY1", "ER0", "D"], "DESK": ["D", "EH1", "S", "K"], "DESKTOP": ["D", "EH1", "S", "K", "T", "AA2", "P"], "DESKTOPS": ["D", "EH1", "S", "K", "T", "AA2", "P", "S"], "DESPERATE": ["D", "EH1", "S", "P", "R", "IH0", "T"], "DESPITE": ["D", "IH0", "S", "P", "AY1", "T"], "DESTINATION": ["D", "EH2", "S", "T", "AH0", "N", "EY1", "SH", "AH0", "N"], "DESTINATIONS": ["D", "EH2", "S", "T", "AH0", "N", "EY1", "SH", "AH0", "N", "Z"], "DESTINY": ["D", "EH1", "S", "T", "AH0", "N", "IY0"], "DESTROY": ["D", "IH0", "S", "T", "R", "OY1"], "DESTROYED": ["D", "IH0", "S", "T", "R", "OY1", "D"], "DESTRUCTION": ["D", "IH0", "S", "T", "R", "AH1", "K", "SH", "AH0", "N"], "DETAIL": ["D", "IH0", "T", "EY1", "L"], "DETAILED": ["D", "IH0", "T", "EY1", "L", "D"], "DETAILS": ["D", "IH0", "T", "EY1", "L", "Z"], "DETECT": ["D", "IH0", "T", "EH1", "K", "T"], "DETECTED": ["D", "IH0", "T", "EH1", "K", "T", "AH0", "D"], "DETECTION": ["D", "IH0", "T", "EH1", "K", "SH", "AH0", "N"], "DETECTIVE": ["D", "IH0", "T", "EH1", "K", "T", "IH0", "V"], "DETECTOR": ["D", "IH0", "T", "EH1", "K", "T", "ER0"], "DETERMINATION": ["D", "IH0", "T", "ER2", "M", "AH0", "N", "EY1", "SH", "AH0", "N"], "DETERMINE": ["D", "AH0", "T", "ER1", "M", "AH0", "N"], "DETERMINED": ["D", "IH0", "T", "ER1", "M", "AH0", "N", "D"], "DETERMINES": ["D", "AH0", "T", "ER1", "M", "AH0", "N", "Z"], "DETERMINING": ["D", "IH0", "T", "ER1", "M", "AH0", "N", "IH0", "NG"], "DETROIT": ["D", "IH0", "T", "R", "OY1", "T"], "DEUTSCH": ["D", "OY1", "CH"], "DEUTSCHE": ["D", "OY1", "CH"], "DEUTSCHLAND": ["D", "OY1", "CH", "L", "AE0", "N", "D"], "DEV": ["D", "EH1", "V"], "DEVELOP": ["D", "IH0", "V", "EH1", "L", "AH0", "P"], "DEVELOPED": ["D", "IH0", "V", "EH1", "L", "AH0", "P", "T"], "DEVELOPER": ["D", "IH0", "V", "EH1", "L", "AH0", "P", "ER0"], "DEVELOPERS": ["D", "IH0", "V", "EH1", "L", "AH0", "P", "ER0", "Z"], "DEVELOPING": ["D", "IH0", "V", "EH1", "L", "AH0", "P", "IH0", "NG"], "DEVELOPMENT": ["D", "IH0", "V", "EH1", "L", "AH0", "P", "M", "AH0", "N", "T"], "DEVELOPMENTAL": ["D", "IH0", "V", "EH2", "L", "AH0", "P", "M", "EH1", "N", "T", "AH0", "L"], "DEVELOPMENTS": ["D", "IH0", "V", "EH1", "L", "AH0", "P", "M", "AH0", "N", "T", "S"], "DEVELOPS": ["D", "IH0", "V", "EH1", "L", "AH0", "P", "S"], "DEVIANT": ["D", "IY1", "V", "IY0", "AH0", "N", "T"], "DEVIATION": ["D", "IY2", "V", "IY0", "EY1", "SH", "AH0", "N"], "DEVICE": ["D", "IH0", "V", "AY1", "S"], "DEVICES": ["D", "IH0", "V", "AY1", "S", "AH0", "Z"], "DEVIL": ["D", "EH1", "V", "AH0", "L"], "DEVON": ["D", "EH1", "V", "AH0", "N"], "DEVOTED": ["D", "IH0", "V", "OW1", "T", "AH0", "D"], "DI": ["D", "IY1"], "DIABETES": ["D", "AY2", "AH0", "B", "IY1", "T", "IY0", "Z"], "DIAGNOSIS": ["D", "AY2", "AH0", "G", "N", "OW1", "S", "AH0", "S"], "DIAGNOSTIC": ["D", "AY2", "AH0", "G", "N", "AA1", "S", "T", "IH0", "K"], "DIAGRAM": ["D", "AY1", "AH0", "G", "R", "AE2", "M"], "DIAL": ["D", "AY1", "AH0", "L"], "DIALOG": ["D", "AY1", "AH0", "L", "AO0", "G"], "DIALOGUE": ["D", "AY1", "AH0", "L", "AO2", "G"], "DIAMETER": ["D", "AY0", "AE1", "M", "AH0", "T", "ER0"], "DIAMOND": ["D", "AY1", "M", "AH0", "N", "D"], "DIAMONDS": ["D", "AY1", "M", "AH0", "N", "D", "Z"], "DIANA": ["D", "AY0", "AE1", "N", "AH0"], "DIANE": ["D", "AY0", "AE1", "N"], "DIARY": ["D", "AY1", "ER0", "IY0"], "DICE": ["D", "AY1", "S"], "DICK": ["D", "IH1", "K"], "DICKE": ["D", "IH1", "K"], "DICKS": ["D", "IH1", "K", "S"], "DICTIONARIES": ["D", "IH1", "K", "SH", "AH0", "N", "EH2", "R", "IY0", "Z"], "DICTIONARY": ["D", "IH1", "K", "SH", "AH0", "N", "EH2", "R", "IY0"], "DID": ["D", "IH1", "D"], "DIE": ["D", "AY1"], "DIED": ["D", "AY1", "D"], "DIEGO": ["D", "IY0", "EY1", "G", "OW0"], "DIES": ["D", "AY1", "Z"], "DIESEL": ["D", "IY1", "S", "AH0", "L"], "DIET": ["D", "AY1", "AH0", "T"], "DIETARY": ["D", "AY1", "AH0", "T", "EH2", "R", "IY0"], "DIFF": ["D", "IH1", "F"], "DIFFER": ["D", "IH1", "F", "ER0"], "DIFFERENCE": ["D", "IH1", "F", "ER0", "AH0", "N", "S"], "DIFFERENCES": ["D", "IH1", "F", "ER0", "AH0", "N", "S", "IH0", "Z"], "DIFFERENT": ["D", "IH1", "F", "ER0", "AH0", "N", "T"], "DIFFERENTIAL": ["D", "IH2", "F", "ER0", "EH1", "N", "SH", "AH0", "L"], "DIFFERENTLY": ["D", "IH1", "F", "R", "AH0", "N", "T", "L", "IY0"], "DIFFICULT": ["D", "IH1", "F", "AH0", "K", "AH0", "L", "T"], "DIFFICULTIES": ["D", "IH1", "F", "AH0", "K", "AH0", "L", "T", "IY0", "Z"], "DIFFICULTY": ["D", "IH1", "F", "AH0", "K", "AH0", "L", "T", "IY0"], "DIG": ["D", "IH1", "G"], "DIGEST": ["D", "AY0", "JH", "EH1", "S", "T"], "DIGIT": ["D", "IH1", "JH", "AH0", "T"], "DIGITAL": ["D", "IH1", "JH", "AH0", "T", "AH0", "L"], "DILDO": ["D", "IH1", "L", "D", "OW2"], "DILDOS": ["D", "IH1", "L", "D", "OW2", "Z"], "DIM": ["D", "IH1", "M"], "DIMENSION": ["D", "IH0", "M", "EH1", "N", "SH", "AH0", "N"], "DIMENSIONAL": ["D", "IH0", "M", "EH1", "N", "SH", "AH0", "N", "AH0", "L"], "DIMENSIONS": ["D", "IH0", "M", "EH1", "N", "SH", "AH0", "N", "Z"], "DINING": ["D", "AY1", "N", "IH0", "NG"], "DINNER": ["D", "IH1", "N", "ER0"], "DIP": ["D", "IH1", "P"], "DIPLOMA": ["D", "IH0", "P", "L", "OW1", "M", "AA0"], "DIRECT": ["D", "ER0", "EH1", "K", "T"], "DIRECTED": ["D", "ER0", "EH1", "K", "T", "AH0", "D"], "DIRECTION": ["D", "ER0", "EH1", "K", "SH", "AH0", "N"], "DIRECTIONS": ["D", "ER0", "EH1", "K", "SH", "AH0", "N", "Z"], "DIRECTIVE": ["D", "ER0", "EH1", "K", "T", "IH0", "V"], "DIRECTLY": ["D", "ER0", "EH1", "K", "T", "L", "IY0"], "DIRECTOR": ["D", "ER0", "EH1", "K", "T", "ER0"], "DIRECTORIES": ["D", "AY0", "R", "EH1", "K", "T", "ER0", "IY0", "Z"], "DIRECTORS": ["D", "ER0", "EH1", "K", "T", "ER0", "Z"], "DIRECTORY": ["D", "ER0", "EH1", "K", "T", "ER0", "IY0"], "DIRT": ["D", "ER1", "T"], "DIRTY": ["D", "ER1", "T", "IY0"], "DIS": ["D", "IH1", "S"], "DISABILITIES": ["D", "IH0", "S", "AH0", "B", "IH1", "L", "AH0", "T", "IY0", "Z"], "DISABILITY": ["D", "IH2", "S", "AH0", "B", "IH1", "L", "IH0", "T", "IY0"], "DISABLE": ["D", "IH0", "S", "EY1", "B", "AH0", "L"], "DISABLED": ["D", "IH0", "S", "EY1", "B", "AH0", "L", "D"], "DISAGREE": ["D", "IH0", "S", "AH0", "G", "R", "IY1"], "DISAPPOINTED": ["D", "IH2", "S", "AH0", "P", "OY1", "N", "T", "IH0", "D"], "DISASTER": ["D", "IH0", "Z", "AE1", "S", "T", "ER0"], "DISC": ["D", "IH1", "S", "K"], "DISCHARGE": ["D", "IH0", "S", "CH", "AA1", "R", "JH"], "DISCIPLINARY": ["D", "IH1", "S", "AH0", "P", "L", "AH0", "N", "EH2", "R", "IY0"], "DISCIPLINE": ["D", "IH1", "S", "AH0", "P", "L", "AH0", "N"], "DISCIPLINES": ["D", "IH1", "S", "AH0", "P", "L", "AH0", "N", "Z"], "DISCLAIMER": ["D", "IH0", "S", "K", "L", "EY1", "M", "ER0"], "DISCLAIMERS": ["D", "IH0", "S", "K", "L", "EY1", "M", "ER0", "Z"], "DISCLOSE": ["D", "IH0", "S", "K", "L", "OW1", "Z"], "DISCLOSURE": ["D", "IH0", "S", "K", "L", "OW1", "ZH", "ER0"], "DISCO": ["D", "IH1", "S", "K", "OW0"], "DISCOUNT": ["D", "IH0", "S", "K", "AW1", "N", "T"], "DISCOUNTED": ["D", "IH1", "S", "K", "AW2", "N", "T", "IH0", "D"], "DISCOUNTS": ["D", "IH0", "S", "K", "AW1", "N", "T", "S"], "DISCOVER": ["D", "IH0", "S", "K", "AH1", "V", "ER0"], "DISCOVERED": ["D", "IH0", "S", "K", "AH1", "V", "ER0", "D"], "DISCOVERY": ["D", "IH0", "S", "K", "AH1", "V", "ER0", "IY0"], "DISCRETE": ["D", "IH0", "S", "K", "R", "IY1", "T"], "DISCRETION": ["D", "IH0", "S", "K", "R", "EH1", "SH", "AH0", "N"], "DISCRIMINATION": ["D", "IH0", "S", "K", "R", "IH2", "M", "AH0", "N", "EY1", "SH", "AH0", "N"], "DISCS": ["D", "IH1", "S", "K", "S"], "DISCUSS": ["D", "IH0", "S", "K", "AH1", "S"], "DISCUSSED": ["D", "IH0", "S", "K", "AH1", "S", "T"], "DISCUSSES": ["D", "IH0", "S", "K", "AH1", "S", "AH0", "Z"], "DISCUSSING": ["D", "IH0", "S", "K", "AH1", "S", "IH0", "NG"], "DISCUSSION": ["D", "IH0", "S", "K", "AH1", "SH", "AH0", "N"], "DISCUSSIONS": ["D", "IH0", "S", "K", "AH1", "SH", "AH0", "N", "Z"], "DISEASE": ["D", "IH0", "Z", "IY1", "Z"], "DISEASES": ["D", "IH0", "Z", "IY1", "Z", "AH0", "Z"], "DISH": ["D", "IH1", "SH"], "DISHES": ["D", "IH1", "SH", "AH0", "Z"], "DISK": ["D", "IH1", "S", "K"], "DISKS": ["D", "IH1", "S", "K", "S"], "DISNEY": ["D", "IH1", "Z", "N", "IY0"], "DISORDER": ["D", "IH0", "S", "AO1", "R", "D", "ER0"], "DISORDERS": ["D", "IH0", "S", "AO1", "R", "D", "ER0", "Z"], "DISPATCH": ["D", "IH0", "S", "P", "AE1", "CH"], "DISPATCHED": ["D", "IH0", "S", "P", "AE1", "CH", "T"], "DISPLAY": ["D", "IH0", "S", "P", "L", "EY1"], "DISPLAYED": ["D", "IH0", "S", "P", "L", "EY1", "D"], "DISPLAYING": ["D", "IH0", "S", "P", "L", "EY1", "IH0", "NG"], "DISPLAYS": ["D", "IH0", "S", "P", "L", "EY1", "Z"], "DISPOSAL": ["D", "IH0", "S", "P", "OW1", "Z", "AH0", "L"], "DISPOSITION": ["D", "IH2", "S", "P", "AH0", "Z", "IH1", "SH", "AH0", "N"], "DISPUTE": ["D", "IH0", "S", "P", "Y", "UW1", "T"], "DISPUTES": ["D", "IH0", "S", "P", "Y", "UW1", "T", "S"], "DISTANCE": ["D", "IH1", "S", "T", "AH0", "N", "S"], "DISTANCES": ["D", "IH1", "S", "T", "AH0", "N", "S", "AH0", "Z"], "DISTANT": ["D", "IH1", "S", "T", "AH0", "N", "T"], "DISTINCT": ["D", "IH0", "S", "T", "IH1", "NG", "K", "T"], "DISTINCTION": ["D", "IH0", "S", "T", "IH1", "NG", "K", "SH", "AH0", "N"], "DISTINGUISHED": ["D", "IH0", "S", "T", "IH1", "NG", "G", "W", "IH0", "SH", "T"], "DISTRIBUTE": ["D", "IH0", "S", "T", "R", "IH1", "B", "Y", "UW0", "T"], "DISTRIBUTED": ["D", "IH0", "S", "T", "R", "IH1", "B", "Y", "AH0", "T", "AH0", "D"], "DISTRIBUTION": ["D", "IH2", "S", "T", "R", "AH0", "B", "Y", "UW1", "SH", "AH0", "N"], "DISTRIBUTIONS": ["D", "IH2", "S", "T", "R", "AH0", "B", "Y", "UW1", "SH", "AH0", "N", "Z"], "DISTRIBUTOR": ["D", "IH0", "S", "T", "R", "IH1", "B", "Y", "AH0", "T", "ER0"], "DISTRIBUTORS": ["D", "IH0", "S", "T", "R", "IH1", "B", "Y", "AH0", "T", "ER0", "Z"], "DISTRICT": ["D", "IH1", "S", "T", "R", "IH0", "K", "T"], "DISTRICTS": ["D", "IH1", "S", "T", "R", "IH0", "K", "T", "S"], "DISTURBED": ["D", "IH0", "S", "T", "ER1", "B", "D"], "DIVE": ["D", "AY1", "V"], "DIVERSE": ["D", "AY0", "V", "ER1", "S"], "DIVERSITY": ["D", "IH0", "V", "ER1", "S", "IH0", "T", "IY0"], "DIVIDE": ["D", "IH0", "V", "AY1", "D"], "DIVIDED": ["D", "IH0", "V", "AY1", "D", "IH0", "D"], "DIVIDEND": ["D", "IH1", "V", "IH0", "D", "EH2", "N", "D"], "DIVINE": ["D", "IH0", "V", "AY1", "N"], "DIVING": ["D", "AY1", "V", "IH0", "NG"], "DIVISION": ["D", "IH0", "V", "IH1", "ZH", "AH0", "N"], "DIVISIONS": ["D", "IH0", "V", "IH1", "ZH", "AH0", "N", "Z"], "DIVORCE": ["D", "IH0", "V", "AO1", "R", "S"], "DK": ["D", "IY1", "K", "EY1"], "DNA": ["D", "IY1", "EH2", "N", "EY1"], "DO": ["D", "UW1"], "DOC": ["D", "AA1", "K"], "DOCK": ["D", "AA1", "K"], "DOCS": ["D", "AA1", "K", "S"], "DOCTOR": ["D", "AA1", "K", "T", "ER0"], "DOCTORS": ["D", "AA1", "K", "T", "ER0", "Z"], "DOCTRINE": ["D", "AA1", "K", "T", "R", "AH0", "N"], "DOCUMENT": ["D", "AA1", "K", "Y", "AH0", "M", "EH0", "N", "T"], "DOCUMENTARY": ["D", "AA2", "K", "Y", "AH0", "M", "EH1", "N", "T", "ER0", "IY0"], "DOCUMENTATION": ["D", "AA2", "K", "Y", "AH0", "M", "EH0", "N", "T", "EY1", "SH", "AH0", "N"], "DOCUMENTED": ["D", "AA1", "K", "Y", "AH0", "M", "EH2", "N", "T", "AH0", "D"], "DOCUMENTS": ["D", "AA1", "K", "Y", "AH0", "M", "AH0", "N", "T", "S"], "DODGE": ["D", "AA1", "JH"], "DOE": ["D", "OW1"], "DOES": ["D", "AH1", "Z"], "DOG": ["D", "AO1", "G"], "DOGS": ["D", "AA1", "G", "Z"], "DOING": ["D", "UW1", "IH0", "NG"], "DOLL": ["D", "AA1", "L"], "DOLLAR": ["D", "AA1", "L", "ER0"], "DOLLARS": ["D", "AA1", "L", "ER0", "Z"], "DOLLS": ["D", "AA1", "L", "Z"], "DOM": ["D", "AA1", "M"], "DOMAIN": ["D", "OW0", "M", "EY1", "N"], "DOMAINS": ["D", "OW0", "M", "EY1", "N", "Z"], "DOME": ["D", "OW1", "M"], "DOMESTIC": ["D", "AH0", "M", "EH1", "S", "T", "IH0", "K"], "DOMINANT": ["D", "AA1", "M", "AH0", "N", "AH0", "N", "T"], "DOMINICAN": ["D", "AH0", "M", "IH1", "N", "AH0", "K", "AH0", "N"], "DON": ["D", "AA1", "N"], "DONALD": ["D", "AA1", "N", "AH0", "L", "D"], "DONATE": ["D", "OW1", "N", "EY2", "T"], "DONATED": ["D", "OW1", "N", "EY2", "T", "AH0", "D"], "DONATION": ["D", "OW0", "N", "EY1", "SH", "AH0", "N"], "DONATIONS": ["D", "OW0", "N", "EY1", "SH", "AH0", "N", "Z"], "DONE": ["D", "AH1", "N"], "DONNA": ["D", "AA1", "N", "AH0"], "DONOR": ["D", "OW1", "N", "ER0"], "DONORS": ["D", "OW1", "N", "ER0", "Z"], "DOOM": ["D", "UW1", "M"], "DOOR": ["D", "AO1", "R"], "DOORS": ["D", "AO1", "R", "Z"], "DOS": ["D", "AO1", "S"], "DOSAGE": ["D", "OW1", "S", "AH0", "JH"], "DOSE": ["D", "OW1", "S"], "DOT": ["D", "AA1", "T"], "DOUBLE": ["D", "AH1", "B", "AH0", "L"], "DOUBT": ["D", "AW1", "T"], "DOUG": ["D", "AH1", "G"], "DOUGLAS": ["D", "AH1", "G", "L", "AH0", "S"], "DOVER": ["D", "OW1", "V", "ER0"], "DOW": ["D", "AW1"], "DOWN": ["D", "AW1", "N"], "DOWNLOAD": ["D", "AW1", "N", "L", "OW2", "D"], "DOWNLOADED": ["D", "AW1", "N", "L", "OW2", "D", "IH0", "D"], "DOWNLOADING": ["D", "AW1", "N", "L", "OW2", "D", "IH0", "NG"], "DOWNLOADS": ["D", "AW1", "N", "L", "OW2", "D", "Z"], "DOWNTOWN": ["D", "AW1", "N", "T", "AW1", "N"], "DOZEN": ["D", "AH1", "Z", "AH0", "N"], "DOZENS": ["D", "AH1", "Z", "AH0", "N", "Z"], "DR": ["D", "R", "AY1", "V"], "DRAFT": ["D", "R", "AE1", "F", "T"], "DRAG": ["D", "R", "AE1", "G"], "DRAGON": ["D", "R", "AE1", "G", "AH0", "N"], "DRAIN": ["D", "R", "EY1", "N"], "DRAINAGE": ["D", "R", "EY1", "N", "AH0", "JH"], "DRAMA": ["D", "R", "AA1", "M", "AH0"], "DRAMATIC": ["D", "R", "AH0", "M", "AE1", "T", "IH0", "K"], "DRAMATICALLY": ["D", "R", "AH0", "M", "AE1", "T", "IH0", "K", "L", "IY0"], "DRAW": ["D", "R", "AO1"], "DRAWING": ["D", "R", "AO1", "IH0", "NG"], "DRAWINGS": ["D", "R", "AO1", "IH0", "NG", "Z"], "DRAWN": ["D", "R", "AO1", "N"], "DRAWS": ["D", "R", "AO1", "Z"], "DREAM": ["D", "R", "IY1", "M"], "DREAMS": ["D", "R", "IY1", "M", "Z"], "DRESS": ["D", "R", "EH1", "S"], "DRESSED": ["D", "R", "EH1", "S", "T"], "DRESSES": ["D", "R", "EH1", "S", "AH0", "Z"], "DRESSING": ["D", "R", "EH1", "S", "IH0", "NG"], "DREW": ["D", "R", "UW1"], "DRIED": ["D", "R", "AY1", "D"], "DRILL": ["D", "R", "IH1", "L"], "DRILLING": ["D", "R", "IH1", "L", "IH0", "NG"], "DRINK": ["D", "R", "IH1", "NG", "K"], "DRINKING": ["D", "R", "IH1", "NG", "K", "IH0", "NG"], "DRINKS": ["D", "R", "IH1", "NG", "K", "S"], "DRIVE": ["D", "R", "AY1", "V"], "DRIVEN": ["D", "R", "IH1", "V", "AH0", "N"], "DRIVER": ["D", "R", "AY1", "V", "ER0"], "DRIVERS": ["D", "R", "AY1", "V", "ER0", "Z"], "DRIVES": ["D", "R", "AY1", "V", "Z"], "DRIVING": ["D", "R", "AY1", "V", "IH0", "NG"], "DROP": ["D", "R", "AA1", "P"], "DROPPED": ["D", "R", "AA1", "P", "T"], "DROPS": ["D", "R", "AA1", "P", "S"], "DROVE": ["D", "R", "OW1", "V"], "DRUG": ["D", "R", "AH1", "G"], "DRUGS": ["D", "R", "AH1", "G", "Z"], "DRUM": ["D", "R", "AH1", "M"], "DRUMS": ["D", "R", "AH1", "M", "Z"], "DRUNK": ["D", "R", "AH1", "NG", "K"], "DRY": ["D", "R", "AY1"], "DRYER": ["D", "R", "AY1", "ER0"], "DU": ["D", "UW1"], "DUAL": ["D", "UW1", "AH0", "L"], "DUBAI": ["D", "UW0", "B", "AY1"], "DUBLIN": ["D", "AH1", "B", "L", "IH0", "N"], "DUCK": ["D", "AH1", "K"], "DUDE": ["D", "UW1", "D"], "DUE": ["D", "UW1"], "DUI": ["D", "IY1", "Y", "UW1", "AY1"], "DUKE": ["D", "UW1", "K"], "DUMB": ["D", "AH1", "M"], "DUMP": ["D", "AH1", "M", "P"], "DUNCAN": ["D", "AH1", "NG", "K", "AH0", "N"], "DUO": ["D", "UW1", "OW0"], "DUPLICATE": ["D", "UW1", "P", "L", "AH0", "K", "AH0", "T"], "DURABLE": ["D", "UH1", "R", "AH0", "B", "AH0", "L"], "DURATION": ["D", "UH1", "R", "EY1", "SH", "AH0", "N"], "DURHAM": ["D", "ER1", "AH0", "M"], "DURING": ["D", "UH1", "R", "IH0", "NG"], "DUST": ["D", "AH1", "S", "T"], "DUTCH": ["D", "AH1", "CH"], "DUTIES": ["D", "UW1", "T", "IY0", "Z"], "DUTY": ["D", "UW1", "T", "IY0"], "DVD": ["D", "IY2", "V", "IY2", "D", "IY1"], "DVDS": ["D", "IY2", "V", "IY2", "D", "IY1", "Z"], "DYING": ["D", "AY1", "IH0", "NG"], "DYLAN": ["D", "IH1", "L", "AH0", "N"], "DYNAMIC": ["D", "AY0", "N", "AE1", "M", "IH0", "K"], "DYNAMICS": ["D", "AY0", "N", "AE1", "M", "IH0", "K", "S"], "E": ["IY1"], "EACH": ["IY1", "CH"], "EAGLE": ["IY1", "G", "AH0", "L"], "EAGLES": ["IY1", "G", "AH0", "L", "Z"], "EAR": ["IY1", "R"], "EARL": ["ER1", "L"], "EARLIER": ["ER1", "L", "IY0", "ER0"], "EARLIEST": ["ER1", "L", "IY0", "AH0", "S", "T"], "EARLY": ["ER1", "L", "IY0"], "EARN": ["ER1", "N"], "EARNED": ["ER1", "N", "D"], "EARNING": ["ER1", "N", "IH0", "NG"], "EARNINGS": ["ER1", "N", "IH0", "NG", "Z"], "EARRINGS": ["IH1", "R", "IH0", "NG", "Z"], "EARS": ["IH1", "R", "Z"], "EARTH": ["ER1", "TH"], "EARTHQUAKE": ["ER1", "TH", "K", "W", "EY2", "K"], "EASE": ["IY1", "Z"], "EASIER": ["IY1", "Z", "IY0", "ER0"], "EASILY": ["IY1", "Z", "AH0", "L", "IY0"], "EAST": ["IY1", "S", "T"], "EASTER": ["IY1", "S", "T", "ER0"], "EASTERN": ["IY1", "S", "T", "ER0", "N"], "EASY": ["IY1", "Z", "IY0"], "EAT": ["IY1", "T"], "EATING": ["IY1", "T", "IH0", "NG"], "EAU": ["OW1"], "EBAY": ["IY1", "B", "EY2"], "EBONY": ["EH1", "B", "AH0", "N", "IY0"], "ECHO": ["EH1", "K", "OW0"], "ECLIPSE": ["IH0", "K", "L", "IH1", "P", "S"], "ECO": ["IY1", "K", "OW0"], "ECOLOGICAL": ["IY0", "K", "AH0", "L", "AA1", "JH", "IH0", "K", "AH0", "L"], "ECOLOGY": ["IH0", "K", "AA1", "L", "AH0", "JH", "IY0"], "ECONOMIC": ["EH2", "K", "AH0", "N", "AA1", "M", "IH0", "K"], "ECONOMICS": ["EH2", "K", "AH0", "N", "AA1", "M", "IH0", "K", "S"], "ECONOMIES": ["IH0", "K", "AA1", "N", "AH0", "M", "IY0", "Z"], "ECONOMY": ["IH0", "K", "AA1", "N", "AH0", "M", "IY0"], "ECUADOR": ["EH1", "K", "W", "AH0", "D", "AO2", "R"], "ED": ["EH1", "D"], "EDDIE": ["EH1", "D", "IY0"], "EDEN": ["IY1", "D", "AH0", "N"], "EDGAR": ["EH1", "D", "G", "ER0"], "EDGE": ["EH1", "JH"], "EDGES": ["EH1", "JH", "AH0", "Z"], "EDINBURGH": ["EH1", "D", "AH0", "N", "B", "ER0", "OW0"], "EDIT": ["EH1", "D", "AH0", "T"], "EDITED": ["EH1", "D", "AH0", "T", "AH0", "D"], "EDITING": ["EH1", "D", "AH0", "T", "IH0", "NG"], "EDITION": ["AH0", "D", "IH1", "SH", "AH0", "N"], "EDITIONS": ["IH0", "D", "IH1", "SH", "AH0", "N", "Z"], "EDITOR": ["EH1", "D", "AH0", "T", "ER0"], "EDITORIAL": ["EH2", "D", "AH0", "T", "AO1", "R", "IY0", "AH0", "L"], "EDITORIALS": ["EH2", "D", "AH0", "T", "AO1", "R", "IY0", "AH0", "L", "Z"], "EDITORS": ["EH1", "D", "IH0", "T", "ER0", "Z"], "EDMONTON": ["EH1", "D", "M", "AH0", "N", "T", "AH0", "N"], "EDUCATED": ["EH1", "JH", "AH0", "K", "EY2", "T", "IH0", "D"], "EDUCATION": ["EH2", "JH", "AH0", "K", "EY1", "SH", "AH0", "N"], "EDUCATIONAL": ["EH2", "JH", "AH0", "K", "EY1", "SH", "AH0", "N", "AH0", "L"], "EDUCATORS": ["EH1", "JH", "AH0", "K", "EY2", "T", "ER0", "Z"], "EDWARD": ["EH1", "D", "W", "ER0", "D"], "EDWARDS": ["EH1", "D", "W", "ER0", "D", "Z"], "EE": ["IY1"], "EFFECT": ["IH0", "F", "EH1", "K", "T"], "EFFECTIVE": ["IH0", "F", "EH1", "K", "T", "IH0", "V"], "EFFECTIVELY": ["IH0", "F", "EH1", "K", "T", "IH0", "V", "L", "IY0"], "EFFECTIVENESS": ["IH0", "F", "EH1", "K", "T", "IH0", "V", "N", "AH0", "S"], "EFFECTS": ["IH0", "F", "EH1", "K", "T", "S"], "EFFICIENCY": ["IH0", "F", "IH1", "SH", "AH0", "N", "S", "IY0"], "EFFICIENT": ["IH0", "F", "IH1", "SH", "AH0", "N", "T"], "EFFICIENTLY": ["IH0", "F", "IH1", "SH", "AH0", "N", "T", "L", "IY0"], "EFFORT": ["EH1", "F", "ER0", "T"], "EFFORTS": ["EH1", "F", "ER0", "T", "S"], "EGG": ["EH1", "G"], "EGGS": ["EH1", "G", "Z"], "EGYPT": ["IY1", "JH", "AH0", "P", "T"], "EGYPTIAN": ["IH0", "JH", "IH1", "P", "SH", "AH0", "N"], "EH": ["EH1"], "EIGHT": ["EY1", "T"], "EITHER": ["IY1", "DH", "ER0"], "EJACULATION": ["IY0", "JH", "AE2", "K", "Y", "UW0", "L", "EY1", "SH", "AH0", "N"], "EL": ["EH1", "L"], "ELDER": ["EH1", "L", "D", "ER0"], "ELDERLY": ["EH1", "L", "D", "ER0", "L", "IY0"], "ELECT": ["IH0", "L", "EH1", "K", "T"], "ELECTED": ["IH0", "L", "EH1", "K", "T", "AH0", "D"], "ELECTION": ["IH0", "L", "EH1", "K", "SH", "AH0", "N"], "ELECTIONS": ["IH0", "L", "EH1", "K", "SH", "AH0", "N", "Z"], "ELECTORAL": ["IH0", "L", "EH1", "K", "T", "ER0", "AH0", "L"], "ELECTRIC": ["IH0", "L", "EH1", "K", "T", "R", "IH0", "K"], "ELECTRICAL": ["IH0", "L", "EH1", "K", "T", "R", "IH0", "K", "AH0", "L"], "ELECTRICITY": ["IH0", "L", "EH2", "K", "T", "R", "IH1", "S", "AH0", "T", "IY0"], "ELECTRO": ["IH0", "L", "EH1", "K", "T", "R", "OW0"], "ELECTRON": ["IH2", "L", "EH1", "K", "T", "R", "AA0", "N"], "ELECTRONIC": ["IH2", "L", "EH2", "K", "T", "R", "AA1", "N", "IH0", "K"], "ELECTRONICS": ["IH2", "L", "EH2", "K", "T", "R", "AA1", "N", "IH0", "K", "S"], "ELEGANT": ["EH1", "L", "AH0", "G", "AH0", "N", "T"], "ELEMENT": ["EH1", "L", "AH0", "M", "AH0", "N", "T"], "ELEMENTARY": ["EH2", "L", "AH0", "M", "EH1", "N", "T", "R", "IY0"], "ELEMENTS": ["EH1", "L", "AH0", "M", "AH0", "N", "T", "S"], "ELEPHANT": ["EH1", "L", "AH0", "F", "AH0", "N", "T"], "ELEVATION": ["EH2", "L", "AH0", "V", "EY1", "SH", "AH0", "N"], "ELEVEN": ["IH0", "L", "EH1", "V", "AH0", "N"], "ELIGIBILITY": ["EH2", "L", "IH0", "JH", "AH0", "B", "IH1", "L", "IH0", "T", "IY0"], "ELIGIBLE": ["EH1", "L", "AH0", "JH", "AH0", "B", "AH0", "L"], "ELIMINATE": ["IH0", "L", "IH1", "M", "AH0", "N", "EY2", "T"], "ELIMINATION": ["IH0", "L", "IH2", "M", "AH0", "N", "EY1", "SH", "AH0", "N"], "ELITE": ["IH0", "L", "IY1", "T"], "ELIZABETH": ["IH0", "L", "IH1", "Z", "AH0", "B", "AH0", "TH"], "ELLEN": ["EH1", "L", "AH0", "N"], "ELLIOTT": ["EH1", "L", "IY0", "AH0", "T"], "ELLIS": ["EH1", "L", "IH0", "S"], "ELSE": ["EH1", "L", "S"], "ELSEWHERE": ["EH1", "L", "S", "W", "EH2", "R"], "ELVIS": ["EH1", "L", "V", "IH0", "S"], "EM": ["EH1", "M"], "EMAIL": ["IY0", "M", "EY1", "L"], "EMAILS": ["IY0", "M", "EY1", "L", "Z"], "EMBASSY": ["EH1", "M", "B", "AH0", "S", "IY0"], "EMBEDDED": ["EH0", "M", "B", "EH1", "D", "IH0", "D"], "EMERALD": ["EH1", "M", "R", "AH0", "L", "D"], "EMERGENCY": ["IH0", "M", "ER1", "JH", "AH0", "N", "S", "IY0"], "EMERGING": ["IH0", "M", "ER1", "JH", "IH0", "NG"], "EMILY": ["EH1", "M", "IH0", "L", "IY0"], "EMIRATES": ["EH1", "M", "ER0", "AH0", "T", "S"], "EMISSION": ["IH0", "M", "IH1", "SH", "AH0", "N"], "EMISSIONS": ["IH0", "M", "IH1", "SH", "AH0", "N", "Z"], "EMMA": ["EH1", "M", "AH0"], "EMOTIONAL": ["IH0", "M", "OW1", "SH", "AH0", "N", "AH0", "L"], "EMOTIONS": ["IH0", "M", "OW1", "SH", "AH0", "N", "Z"], "EMPEROR": ["EH1", "M", "P", "ER0", "ER0"], "EMPHASIS": ["EH1", "M", "F", "AH0", "S", "IH0", "S"], "EMPIRE": ["EH1", "M", "P", "AY0", "ER0"], "EMPIRICAL": ["EH2", "M", "P", "IH1", "R", "IH0", "K", "AH0", "L"], "EMPLOY": ["EH0", "M", "P", "L", "OY1"], "EMPLOYED": ["EH0", "M", "P", "L", "OY1", "D"], "EMPLOYEE": ["EH0", "M", "P", "L", "OY1", "IY0"], "EMPLOYEES": ["EH0", "M", "P", "L", "OY1", "IY0", "Z"], "EMPLOYER": ["EH0", "M", "P", "L", "OY1", "ER0"], "EMPLOYERS": ["EH0", "M", "P", "L", "OY1", "ER0", "Z"], "EMPLOYMENT": ["EH0", "M", "P", "L", "OY1", "M", "AH0", "N", "T"], "EMPTY": ["EH1", "M", "P", "T", "IY0"], "EN": ["EH1", "N"], "ENABLE": ["EH0", "N", "EY1", "B", "AH0", "L"], "ENABLED": ["EH0", "N", "EY1", "B", "AH0", "L", "D"], "ENABLES": ["EH0", "N", "EY1", "B", "AH0", "L", "Z"], "ENABLING": ["EH0", "N", "EY1", "B", "AH0", "L", "IH0", "NG"], "ENCLOSED": ["EH0", "N", "K", "L", "OW1", "Z", "D"], "ENCLOSURE": ["EH0", "N", "K", "L", "OW1", "ZH", "ER0"], "ENCODING": ["EH0", "N", "K", "OW1", "D", "IH0", "NG"], "ENCOUNTER": ["IH0", "N", "K", "AW1", "N", "T", "ER0"], "ENCOUNTERED": ["IH0", "N", "K", "AW1", "N", "T", "ER0", "D"], "ENCOURAGE": ["EH0", "N", "K", "ER1", "IH0", "JH"], "ENCOURAGED": ["EH0", "N", "K", "ER1", "IH0", "JH", "D"], "ENCOURAGES": ["EH0", "N", "K", "ER1", "IH0", "JH", "IH0", "Z"], "ENCOURAGING": ["EH0", "N", "K", "ER1", "IH0", "JH", "IH0", "NG"], "ENCRYPTION": ["EH0", "N", "K", "R", "IH1", "P", "SH", "AH0", "N"], "ENCYCLOPEDIA": ["IH0", "N", "S", "AY2", "K", "L", "AH0", "P", "IY1", "D", "IY0", "AH0"], "END": ["EH1", "N", "D"], "ENDANGERED": ["EH0", "N", "D", "EY1", "N", "JH", "ER0", "D"], "ENDED": ["EH1", "N", "D", "AH0", "D"], "ENDING": ["EH1", "N", "D", "IH0", "NG"], "ENDLESS": ["EH1", "N", "D", "L", "AH0", "S"], "ENDORSED": ["EH0", "N", "D", "AO1", "R", "S", "T"], "ENDORSEMENT": ["EH0", "N", "D", "AO1", "R", "S", "M", "AH0", "N", "T"], "ENDS": ["EH1", "N", "D", "Z"], "ENEMIES": ["EH1", "N", "AH0", "M", "IY0", "Z"], "ENEMY": ["EH1", "N", "AH0", "M", "IY0"], "ENERGY": ["EH1", "N", "ER0", "JH", "IY0"], "ENFORCEMENT": ["EH0", "N", "F", "AO1", "R", "S", "M", "AH0", "N", "T"], "ENG": ["EH1", "NG"], "ENGAGE": ["IH0", "N", "G", "EY1", "JH"], "ENGAGED": ["IH0", "N", "G", "EY1", "JH", "D"], "ENGAGEMENT": ["EH0", "N", "G", "EY1", "JH", "M", "AH0", "N", "T"], "ENGAGING": ["IH0", "N", "G", "EY1", "JH", "IH0", "NG"], "ENGINE": ["EH1", "N", "JH", "AH0", "N"], "ENGINEER": ["EH1", "N", "JH", "AH0", "N", "IH1", "R"], "ENGINEERING": ["EH1", "N", "JH", "AH0", "N", "IH1", "R", "IH0", "NG"], "ENGINEERS": ["EH1", "N", "JH", "AH0", "N", "IH1", "R", "Z"], "ENGINES": ["EH1", "N", "JH", "AH0", "N", "Z"], "ENGLAND": ["IH1", "NG", "G", "L", "AH0", "N", "D"], "ENGLISH": ["IH1", "NG", "G", "L", "IH0", "SH"], "ENHANCE": ["EH0", "N", "HH", "AE1", "N", "S"], "ENHANCED": ["EH0", "N", "HH", "AE1", "N", "S", "T"], "ENHANCEMENT": ["EH0", "N", "HH", "AE1", "N", "S", "M", "AH0", "N", "T"], "ENHANCEMENTS": ["EH0", "N", "HH", "AE1", "N", "S", "M", "AH0", "N", "T", "S"], "ENHANCING": ["EH0", "N", "HH", "AE1", "N", "S", "IH0", "NG"], "ENJOY": ["EH2", "N", "JH", "OY1"], "ENJOYED": ["EH2", "N", "JH", "OY1", "D"], "ENJOYING": ["EH2", "N", "JH", "OY1", "IH0", "NG"], "ENLARGE": ["EH2", "N", "L", "AA1", "R", "JH"], "ENLARGEMENT": ["EH2", "N", "L", "AA1", "R", "JH", "M", "AH0", "N", "T"], "ENORMOUS": ["IH0", "N", "AO1", "R", "M", "AH0", "S"], "ENOUGH": ["IH0", "N", "AH1", "F"], "ENQUIRY": ["IH0", "N", "K", "W", "AY1", "R", "IY2"], "ENROLLED": ["EH0", "N", "R", "OW1", "L", "D"], "ENROLLMENT": ["EH0", "N", "R", "OW1", "L", "M", "AH0", "N", "T"], "ENSEMBLE": ["AA0", "N", "S", "AA1", "M", "B", "AH0", "L"], "ENSURE": ["EH0", "N", "SH", "UH1", "R"], "ENSURES": ["EH0", "N", "SH", "UH1", "R", "Z"], "ENSURING": ["EH0", "N", "SH", "UH1", "R", "IH0", "NG"], "ENT": ["EH1", "N", "T"], "ENTER": ["EH1", "N", "T", "ER0"], "ENTERED": ["EH1", "N", "T", "ER0", "D"], "ENTERING": ["EH1", "N", "T", "ER0", "IH0", "NG"], "ENTERPRISE": ["EH1", "N", "T", "ER0", "P", "R", "AY2", "Z"], "ENTERPRISES": ["EH1", "N", "T", "ER0", "P", "R", "AY2", "Z", "IH0", "Z"], "ENTERS": ["EH1", "N", "T", "ER0", "Z"], "ENTERTAINING": ["EH2", "N", "T", "ER0", "T", "EY1", "N", "IH0", "NG"], "ENTERTAINMENT": ["EH2", "N", "T", "ER0", "T", "EY1", "N", "M", "AH0", "N", "T"], "ENTIRE": ["IH0", "N", "T", "AY1", "ER0"], "ENTIRELY": ["IH0", "N", "T", "AY1", "ER0", "L", "IY0"], "ENTITIES": ["EH1", "N", "T", "IH0", "T", "IY0", "Z"], "ENTITLED": ["EH0", "N", "T", "AY1", "T", "AH0", "L", "D"], "ENTITY": ["EH1", "N", "T", "AH0", "T", "IY0"], "ENTRANCE": ["EH1", "N", "T", "R", "AH0", "N", "S"], "ENTREPRENEUR": ["AA2", "N", "T", "R", "AH0", "P", "R", "AH0", "N", "ER1"], "ENTREPRENEURS": ["AA2", "N", "T", "R", "AH0", "P", "R", "AH0", "N", "ER1", "Z"], "ENTRIES": ["EH1", "N", "T", "R", "IY0", "Z"], "ENTRY": ["EH1", "N", "T", "R", "IY0"], "ENVELOPE": ["EH1", "N", "V", "AH0", "L", "OW2", "P"], "ENVIRONMENT": ["IH0", "N", "V", "AY1", "R", "AH0", "N", "M", "AH0", "N", "T"], "ENVIRONMENTAL": ["IH0", "N", "V", "AY2", "R", "AH0", "N", "M", "EH1", "N", "T", "AH0", "L"], "ENVIRONMENTS": ["IH0", "N", "V", "AY1", "R", "AH0", "N", "M", "AH0", "N", "T", "S"], "ENZYME": ["EH1", "N", "Z", "AY2", "M"], "EOS": ["IY1", "AO2", "S"], "EPIC": ["EH1", "P", "IH0", "K"], "EPISODE": ["EH1", "P", "IH0", "S", "OW2", "D"], "EPISODES": ["EH1", "P", "IH0", "S", "OW2", "D", "Z"], "EPSON": ["EH1", "P", "S", "AH0", "N"], "EQUAL": ["IY1", "K", "W", "AH0", "L"], "EQUALITY": ["IH0", "K", "W", "AA1", "L", "AH0", "T", "IY0"], "EQUALLY": ["IY1", "K", "W", "AH0", "L", "IY0"], "EQUATION": ["IH0", "K", "W", "EY1", "ZH", "AH0", "N"], "EQUATIONS": ["IH0", "K", "W", "EY1", "ZH", "AH0", "N", "Z"], "EQUILIBRIUM": ["IY2", "K", "W", "AH0", "L", "IH1", "B", "R", "IY0", "AH0", "M"], "EQUIPMENT": ["IH0", "K", "W", "IH1", "P", "M", "AH0", "N", "T"], "EQUIPPED": ["IH0", "K", "W", "IH1", "P", "T"], "EQUITY": ["EH1", "K", "W", "AH0", "T", "IY0"], "EQUIVALENT": ["IH0", "K", "W", "IH1", "V", "AH0", "L", "AH0", "N", "T"], "ER": ["ER0"], "ERA": ["EH1", "R", "AH0"], "ERIC": ["EH1", "R", "IH0", "K"], "ERICSSON": ["EH1", "R", "IH0", "K", "S", "AH0", "N"], "ERIK": ["EH1", "R", "IH0", "K"], "EROTIC": ["IH0", "R", "AA1", "T", "IH0", "K"], "EROTICA": ["IH0", "R", "AA1", "T", "IH0", "K", "AH0"], "ERROR": ["EH1", "R", "ER0"], "ERRORS": ["EH1", "R", "ER0", "Z"], "ES": ["EH1", "S"], "ESCAPE": ["IH0", "S", "K", "EY1", "P"], "ESCORT": ["EH0", "S", "K", "AO1", "R", "T"], "ESCORTS": ["EH1", "S", "K", "AO0", "R", "T", "S"], "ESPECIALLY": ["AH0", "S", "P", "EH1", "SH", "L", "IY0"], "ESSAY": ["EH0", "S", "EY1"], "ESSAYS": ["EH0", "S", "EY1", "Z"], "ESSENCE": ["EH1", "S", "AH0", "N", "S"], "ESSENTIAL": ["EH0", "S", "EH1", "N", "SH", "AH0", "L"], "ESSENTIALLY": ["EH0", "S", "EH1", "N", "SH", "AH0", "L", "IY0"], "ESSENTIALS": ["EH0", "S", "EH1", "N", "SH", "AH0", "L", "Z"], "ESSEX": ["EH1", "S", "IH0", "K", "S"], "EST": ["EH1", "S", "T"], "ESTABLISH": ["IH0", "S", "T", "AE1", "B", "L", "IH0", "SH"], "ESTABLISHED": ["IH0", "S", "T", "AE1", "B", "L", "IH0", "SH", "T"], "ESTABLISHING": ["IH0", "S", "T", "AE1", "B", "L", "IH0", "SH", "IH0", "NG"], "ESTABLISHMENT": ["IH0", "S", "T", "AE1", "B", "L", "IH0", "SH", "M", "AH0", "N", "T"], "ESTATE": ["EH0", "S", "T", "EY1", "T"], "ESTATES": ["EH0", "S", "T", "EY1", "T", "S"], "ESTIMATE": ["EH1", "S", "T", "AH0", "M", "AH0", "T"], "ESTIMATED": ["EH1", "S", "T", "AH0", "M", "EY2", "T", "AH0", "D"], "ESTIMATES": ["EH1", "S", "T", "AH0", "M", "AH0", "T", "S"], "ESTIMATION": ["EH2", "S", "T", "AH0", "M", "EY1", "SH", "AH0", "N"], "ESTONIA": ["EH0", "S", "T", "OW1", "N", "IY0", "AH0"], "ET": ["EH1", "T"], "ETC": ["EH2", "T", "S", "EH1", "T", "ER0", "AH0"], "ETERNAL": ["IH0", "T", "ER1", "N", "AH0", "L"], "ETHERNET": ["IY1", "TH", "ER0", "N", "EH2", "T"], "ETHICAL": ["EH1", "TH", "IH0", "K", "AH0", "L"], "ETHICS": ["EH1", "TH", "IH0", "K", "S"], "ETHIOPIA": ["IY2", "TH", "IY0", "OW1", "P", "IY0", "AH0"], "ETHNIC": ["EH1", "TH", "N", "IH0", "K"], "EUGENE": ["Y", "UW0", "JH", "IY1", "N"], "EURO": ["Y", "UW1", "R", "OW0"], "EUROPE": ["Y", "UH1", "R", "AH0", "P"], "EUROPEAN": ["Y", "UH2", "R", "AH0", "P", "IY1", "AH0", "N"], "EUROS": ["Y", "UW1", "R", "OW2", "Z"], "EV": ["EH1", "V"], "EVA": ["EY1", "V", "AH0"], "EVALUATE": ["IH0", "V", "AE1", "L", "Y", "UW0", "EY2", "T"], "EVALUATED": ["IH0", "V", "AE1", "L", "Y", "UW0", "EY2", "T", "AH0", "D"], "EVALUATING": ["IH0", "V", "AE1", "L", "Y", "UW0", "EY2", "T", "IH0", "NG"], "EVALUATION": ["IH0", "V", "AE2", "L", "Y", "UW0", "EY1", "SH", "AH0", "N"], "EVALUATIONS": ["IH0", "V", "AE2", "L", "Y", "UW0", "EY1", "SH", "AH0", "N", "Z"], "EVANESCENCE": ["EH2", "V", "AH0", "N", "EH1", "S", "AH0", "N", "S"], "EVANS": ["EH1", "V", "AH0", "N", "Z"], "EVE": ["IY1", "V"], "EVEN": ["IY1", "V", "IH0", "N"], "EVENING": ["IY1", "V", "N", "IH0", "NG"], "EVENT": ["IH0", "V", "EH1", "N", "T"], "EVENTS": ["IH0", "V", "EH1", "N", "T", "S"], "EVENTUALLY": ["IH0", "V", "EH1", "N", "CH", "AH0", "W", "AH0", "L", "IY0"], "EVER": ["EH1", "V", "ER0"], "EVERY": ["EH1", "V", "ER0", "IY0"], "EVERYBODY": ["EH1", "V", "R", "IY0", "B", "AA2", "D", "IY0"], "EVERYDAY": ["EH1", "V", "R", "IY0", "D", "EY1"], "EVERYONE": ["EH1", "V", "R", "IY0", "W", "AH2", "N"], "EVERYTHING": ["EH1", "V", "R", "IY0", "TH", "IH2", "NG"], "EVERYWHERE": ["EH1", "V", "R", "IY0", "W", "EH2", "R"], "EVIDENCE": ["EH1", "V", "AH0", "D", "AH0", "N", "S"], "EVIDENT": ["EH1", "V", "AH0", "D", "AH0", "N", "T"], "EVIL": ["IY1", "V", "AH0", "L"], "EVOLUTION": ["EH2", "V", "AH0", "L", "UW1", "SH", "AH0", "N"], "EX": ["EH1", "K", "S"], "EXACT": ["IH0", "G", "Z", "AE1", "K", "T"], "EXACTLY": ["IH0", "G", "Z", "AE1", "K", "T", "L", "IY0"], "EXAM": ["IH0", "G", "Z", "AE1", "M"], "EXAMINATION": ["IH0", "G", "Z", "AE2", "M", "AH0", "N", "EY1", "SH", "AH0", "N"], "EXAMINATIONS": ["IH0", "G", "Z", "AE2", "M", "AH0", "N", "EY1", "SH", "AH0", "N", "Z"], "EXAMINE": ["IH0", "G", "Z", "AE1", "M", "IH0", "N"], "EXAMINED": ["IH0", "G", "Z", "AE1", "M", "AH0", "N", "D"], "EXAMINES": ["IH0", "G", "Z", "AE1", "M", "AH0", "N", "Z"], "EXAMINING": ["IH0", "G", "Z", "AE1", "M", "IH0", "N", "IH0", "NG"], "EXAMPLE": ["IH0", "G", "Z", "AE1", "M", "P", "AH0", "L"], "EXAMPLES": ["IH0", "G", "Z", "AE1", "M", "P", "AH0", "L", "Z"], "EXAMS": ["IH0", "G", "Z", "AE1", "M", "Z"], "EXCEED": ["IH0", "K", "S", "IY1", "D"], "EXCEL": ["IH0", "K", "S", "EH1", "L"], "EXCELLENCE": ["EH1", "K", "S", "AH0", "L", "AH0", "N", "S"], "EXCELLENT": ["EH1", "K", "S", "AH0", "L", "AH0", "N", "T"], "EXCEPT": ["IH0", "K", "S", "EH1", "P", "T"], "EXCEPTION": ["IH0", "K", "S", "EH1", "P", "SH", "AH0", "N"], "EXCEPTIONAL": ["IH0", "K", "S", "EH1", "P", "SH", "AH0", "N", "AH0", "L"], "EXCEPTIONS": ["IH0", "K", "S", "EH1", "P", "SH", "AH0", "N", "Z"], "EXCERPT": ["EH1", "K", "S", "ER0", "P", "T"], "EXCESS": ["EH1", "K", "S", "EH2", "S"], "EXCESSIVE": ["IH0", "K", "S", "EH1", "S", "IH0", "V"], "EXCHANGE": ["IH0", "K", "S", "CH", "EY1", "N", "JH"], "EXCHANGES": ["IH0", "K", "S", "CH", "EY1", "N", "JH", "AH0", "Z"], "EXCITED": ["IH0", "K", "S", "AY1", "T", "AH0", "D"], "EXCITEMENT": ["IH0", "K", "S", "AY1", "T", "M", "AH0", "N", "T"], "EXCITING": ["IH0", "K", "S", "AY1", "T", "IH0", "NG"], "EXCLUDE": ["IH0", "K", "S", "K", "L", "UW1", "D"], "EXCLUDED": ["IH0", "K", "S", "K", "L", "UW1", "D", "AH0", "D"], "EXCLUDING": ["IH0", "K", "S", "K", "L", "UW1", "D", "IH0", "NG"], "EXCLUSION": ["IH0", "K", "S", "K", "L", "UW1", "ZH", "AH0", "N"], "EXCLUSIVE": ["IH0", "K", "S", "K", "L", "UW1", "S", "IH0", "V"], "EXCLUSIVELY": ["IH0", "K", "S", "K", "L", "UW1", "S", "IH0", "V", "L", "IY0"], "EXCUSE": ["IH0", "K", "S", "K", "Y", "UW1", "S"], "EXEC": ["EH2", "G", "Z", "EH1", "K"], "EXECUTE": ["EH1", "K", "S", "AH0", "K", "Y", "UW2", "T"], "EXECUTED": ["EH1", "K", "S", "AH0", "K", "Y", "UW2", "T", "IH0", "D"], "EXECUTION": ["EH2", "K", "S", "AH0", "K", "Y", "UW1", "SH", "AH0", "N"], "EXECUTIVE": ["IH0", "G", "Z", "EH1", "K", "Y", "AH0", "T", "IH0", "V"], "EXECUTIVES": ["IH0", "G", "Z", "EH1", "K", "Y", "AH0", "T", "IH0", "V", "Z"], "EXEMPT": ["IH0", "G", "Z", "EH1", "M", "P", "T"], "EXEMPTION": ["IH0", "G", "Z", "EH1", "M", "P", "SH", "AH0", "N"], "EXERCISE": ["EH1", "K", "S", "ER0", "S", "AY2", "Z"], "EXERCISES": ["EH1", "K", "S", "ER0", "S", "AY2", "Z", "IH0", "Z"], "EXHAUST": ["IH0", "G", "Z", "AO1", "S", "T"], "EXHIBIT": ["IH0", "G", "Z", "IH1", "B", "IH0", "T"], "EXHIBITION": ["EH2", "K", "S", "AH0", "B", "IH1", "SH", "AH0", "N"], "EXHIBITIONS": ["EH2", "K", "S", "AH0", "B", "IH1", "SH", "AH0", "N", "Z"], "EXHIBITS": ["IH0", "G", "Z", "IH1", "B", "AH0", "T", "S"], "EXIST": ["IH0", "G", "Z", "IH1", "S", "T"], "EXISTED": ["IH0", "G", "Z", "IH1", "S", "T", "AH0", "D"], "EXISTENCE": ["EH0", "G", "Z", "IH1", "S", "T", "AH0", "N", "S"], "EXISTING": ["IH0", "G", "Z", "IH1", "S", "T", "IH0", "NG"], "EXISTS": ["IH0", "G", "Z", "IH1", "S", "T", "S"], "EXIT": ["EH1", "G", "Z", "IH0", "T"], "EXOTIC": ["IH0", "G", "Z", "AA1", "T", "IH0", "K"], "EXPAND": ["IH0", "K", "S", "P", "AE1", "N", "D"], "EXPANDED": ["IH0", "K", "S", "P", "AE1", "N", "D", "AH0", "D"], "EXPANDING": ["IH0", "K", "S", "P", "AE1", "N", "D", "IH0", "NG"], "EXPANSION": ["IH0", "K", "S", "P", "AE1", "N", "SH", "AH0", "N"], "EXPECT": ["IH0", "K", "S", "P", "EH1", "K", "T"], "EXPECTATIONS": ["EH2", "K", "S", "P", "EH0", "K", "T", "EY1", "SH", "AH0", "N", "Z"], "EXPECTED": ["IH0", "K", "S", "P", "EH1", "K", "T", "AH0", "D"], "EXPECTS": ["IH0", "K", "S", "P", "EH1", "K", "T", "S"], "EXPEDIA": ["EH0", "K", "S", "P", "IY1", "D", "IY0", "AH0"], "EXPENDITURE": ["IH0", "K", "S", "P", "EH1", "N", "D", "AH0", "CH", "ER0"], "EXPENDITURES": ["IH0", "K", "S", "P", "EH1", "N", "D", "AH0", "CH", "ER0", "Z"], "EXPENSE": ["IH0", "K", "S", "P", "EH1", "N", "S"], "EXPENSES": ["IH0", "K", "S", "P", "EH1", "N", "S", "IH0", "Z"], "EXPENSIVE": ["IH0", "K", "S", "P", "EH1", "N", "S", "IH0", "V"], "EXPERIENCE": ["IH0", "K", "S", "P", "IH1", "R", "IY0", "AH0", "N", "S"], "EXPERIENCED": ["IH0", "K", "S", "P", "IH1", "R", "IY0", "AH0", "N", "S", "T"], "EXPERIENCES": ["IH0", "K", "S", "P", "IH1", "R", "IY0", "AH0", "N", "S", "IH0", "Z"], "EXPERIENCING": ["IH0", "K", "S", "P", "IH1", "R", "IY0", "AH0", "N", "S", "IH0", "NG"], "EXPERIMENT": ["IH0", "K", "S", "P", "EH1", "R", "AH0", "M", "AH0", "N", "T"], "EXPERIMENTAL": ["IH0", "K", "S", "P", "EH2", "R", "IH0", "M", "EH1", "N", "T", "AH0", "L"], "EXPERIMENTS": ["IH0", "K", "S", "P", "EH1", "R", "AH0", "M", "AH0", "N", "T", "S"], "EXPERT": ["EH1", "K", "S", "P", "ER0", "T"], "EXPERTISE": ["EH2", "K", "S", "P", "ER0", "T", "IY1", "Z"], "EXPERTS": ["EH1", "K", "S", "P", "ER0", "T", "S"], "EXPIRATION": ["EH2", "K", "S", "P", "ER0", "EY1", "SH", "AH0", "N"], "EXPIRED": ["IH0", "K", "S", "P", "AY1", "R", "D"], "EXPIRES": ["IH0", "K", "S", "P", "AY1", "ER0", "Z"], "EXPLAIN": ["IH0", "K", "S", "P", "L", "EY1", "N"], "EXPLAINED": ["IH0", "K", "S", "P", "L", "EY1", "N", "D"], "EXPLAINING": ["IH0", "K", "S", "P", "L", "EY1", "N", "IH0", "NG"], "EXPLAINS": ["IH0", "K", "S", "P", "L", "EY1", "N", "Z"], "EXPLANATION": ["EH2", "K", "S", "P", "L", "AH0", "N", "EY1", "SH", "AH0", "N"], "EXPLICIT": ["IH0", "K", "S", "P", "L", "IH1", "S", "AH0", "T"], "EXPLICITLY": ["IH0", "K", "S", "P", "L", "IH1", "S", "AH0", "T", "L", "IY0"], "EXPLORATION": ["EH2", "K", "S", "P", "L", "ER0", "EY1", "SH", "AH0", "N"], "EXPLORE": ["IH0", "K", "S", "P", "L", "AO1", "R"], "EXPLORER": ["IH0", "K", "S", "P", "L", "AO1", "R", "ER0"], "EXPLORING": ["IH0", "K", "S", "P", "L", "AO1", "R", "IH0", "NG"], "EXPLOSION": ["IH0", "K", "S", "P", "L", "OW1", "ZH", "AH0", "N"], "EXPO": ["EH1", "K", "S", "P", "OW0"], "EXPORT": ["EH1", "K", "S", "P", "AO0", "R", "T"], "EXPORTS": ["EH1", "K", "S", "P", "AO0", "R", "T", "S"], "EXPOSED": ["IH0", "K", "S", "P", "OW1", "Z", "D"], "EXPOSURE": ["IH0", "K", "S", "P", "OW1", "ZH", "ER0"], "EXPRESS": ["IH0", "K", "S", "P", "R", "EH1", "S"], "EXPRESSED": ["IH0", "K", "S", "P", "R", "EH1", "S", "T"], "EXPRESSION": ["IH0", "K", "S", "P", "R", "EH1", "SH", "AH0", "N"], "EXPRESSIONS": ["IH0", "K", "S", "P", "R", "EH1", "SH", "AH0", "N", "Z"], "EXTEND": ["IH0", "K", "S", "T", "EH1", "N", "D"], "EXTENDED": ["IH0", "K", "S", "T", "EH1", "N", "D", "AH0", "D"], "EXTENDING": ["IH0", "K", "S", "T", "EH1", "N", "D", "IH0", "NG"], "EXTENDS": ["IH0", "K", "S", "T", "EH1", "N", "D", "Z"], "EXTENSION": ["IH0", "K", "S", "T", "EH1", "N", "SH", "AH0", "N"], "EXTENSIONS": ["IH0", "K", "S", "T", "EH1", "N", "SH", "AH0", "N", "Z"], "EXTENSIVE": ["IH0", "K", "S", "T", "EH1", "N", "S", "IH0", "V"], "EXTENT": ["IH0", "K", "S", "T", "EH1", "N", "T"], "EXTERIOR": ["IH0", "K", "S", "T", "IH1", "R", "IY0", "ER0"], "EXTERNAL": ["IH0", "K", "S", "T", "ER1", "N", "AH0", "L"], "EXTRA": ["EH1", "K", "S", "T", "R", "AH0"], "EXTRACT": ["EH1", "K", "S", "T", "R", "AE2", "K", "T"], "EXTRACTION": ["EH0", "K", "S", "T", "R", "AE1", "K", "SH", "AH0", "N"], "EXTRAORDINARY": ["EH2", "K", "S", "T", "R", "AH0", "AO1", "R", "D", "AH0", "N", "EH2", "R", "IY0"], "EXTRAS": ["EH1", "K", "S", "T", "R", "AH0", "Z"], "EXTREME": ["IH0", "K", "S", "T", "R", "IY1", "M"], "EXTREMELY": ["IH0", "K", "S", "T", "R", "IY1", "M", "L", "IY0"], "EYE": ["AY1"], "EYED": ["AY1", "D"], "EYES": ["AY1", "Z"], "F": ["EH1", "F"], "FABRIC": ["F", "AE1", "B", "R", "IH0", "K"], "FABRICS": ["F", "AE1", "B", "R", "IH0", "K", "S"], "FABULOUS": ["F", "AE1", "B", "Y", "AH0", "L", "AH0", "S"], "FACE": ["F", "EY1", "S"], "FACED": ["F", "EY1", "S", "T"], "FACES": ["F", "EY1", "S", "AH0", "Z"], "FACIAL": ["F", "EY1", "SH", "AH0", "L"], "FACILITATE": ["F", "AH0", "S", "IH1", "L", "AH0", "T", "EY2", "T"], "FACILITIES": ["F", "AH0", "S", "IH1", "L", "AH0", "T", "IY0", "Z"], "FACILITY": ["F", "AH0", "S", "IH1", "L", "IH0", "T", "IY0"], "FACING": ["F", "EY1", "S", "IH0", "NG"], "FACT": ["F", "AE1", "K", "T"], "FACTOR": ["F", "AE1", "K", "T", "ER0"], "FACTORS": ["F", "AE1", "K", "T", "ER0", "Z"], "FACTORY": ["F", "AE1", "K", "T", "ER0", "IY0"], "FACTS": ["F", "AE1", "K", "T", "S"], "FACULTY": ["F", "AE1", "K", "AH0", "L", "T", "IY0"], "FAIL": ["F", "EY1", "L"], "FAILED": ["F", "EY1", "L", "D"], "FAILING": ["F", "EY1", "L", "IH0", "NG"], "FAILS": ["F", "EY1", "L", "Z"], "FAILURE": ["F", "EY1", "L", "Y", "ER0"], "FAILURES": ["F", "EY1", "L", "Y", "ER0", "Z"], "FAIR": ["F", "EH1", "R"], "FAIRFIELD": ["F", "EH1", "R", "F", "IY2", "L", "D"], "FAIRLY": ["F", "EH1", "R", "L", "IY0"], "FAIRY": ["F", "EH1", "R", "IY0"], "FAITH": ["F", "EY1", "TH"], "FAKE": ["F", "EY1", "K"], "FALL": ["F", "AO1", "L"], "FALLEN": ["F", "AA1", "L", "AH0", "N"], "FALLING": ["F", "AA1", "L", "IH0", "NG"], "FALLS": ["F", "AO1", "L", "Z"], "FALSE": ["F", "AO1", "L", "S"], "FAME": ["F", "EY1", "M"], "FAMILIAR": ["F", "AH0", "M", "IH1", "L", "Y", "ER0"], "FAMILIES": ["F", "AE1", "M", "AH0", "L", "IY0", "Z"], "FAMILY": ["F", "AE1", "M", "AH0", "L", "IY0"], "FAMOUS": ["F", "EY1", "M", "AH0", "S"], "FAN": ["F", "AE1", "N"], "FANCY": ["F", "AE1", "N", "S", "IY0"], "FANS": ["F", "AE1", "N", "Z"], "FANTASTIC": ["F", "AE0", "N", "T", "AE1", "S", "T", "IH0", "K"], "FANTASY": ["F", "AE1", "N", "T", "AH0", "S", "IY0"], "FAR": ["F", "AA1", "R"], "FARE": ["F", "EH1", "R"], "FARES": ["F", "EH1", "R", "Z"], "FARM": ["F", "AA1", "R", "M"], "FARMER": ["F", "AA1", "R", "M", "ER0"], "FARMERS": ["F", "AA1", "R", "M", "ER0", "Z"], "FARMING": ["F", "AA1", "R", "M", "IH0", "NG"], "FARMS": ["F", "AA1", "R", "M", "Z"], "FASCINATING": ["F", "AE1", "S", "AH0", "N", "EY2", "T", "IH0", "NG"], "FASHION": ["F", "AE1", "SH", "AH0", "N"], "FAST": ["F", "AE1", "S", "T"], "FASTER": ["F", "AE1", "S", "T", "ER0"], "FASTEST": ["F", "AE1", "S", "T", "AH0", "S", "T"], "FAT": ["F", "AE1", "T"], "FATAL": ["F", "EY1", "T", "AH0", "L"], "FATE": ["F", "EY1", "T"], "FATHER": ["F", "AA1", "DH", "ER0"], "FATHERS": ["F", "AA1", "DH", "ER0", "Z"], "FATTY": ["F", "AE1", "T", "IY0"], "FAULT": ["F", "AO1", "L", "T"], "FAVOR": ["F", "EY1", "V", "ER0"], "FAVORITE": ["F", "EY1", "V", "ER0", "IH0", "T"], "FAVORITES": ["F", "EY1", "V", "ER0", "IH0", "T", "S"], "FAVORS": ["F", "EY1", "V", "ER0", "Z"], "FAVOUR": ["F", "EY1", "V", "ER0"], "FAVOURITE": ["F", "EY1", "V", "ER0", "IH0", "T"], "FAX": ["F", "AE1", "K", "S"], "FBI": ["EH1", "F", "B", "IY1", "AY1"], "FE": ["F", "EY1"], "FEAR": ["F", "IH1", "R"], "FEARS": ["F", "IH1", "R", "Z"], "FEAT": ["F", "IY1", "T"], "FEATURE": ["F", "IY1", "CH", "ER0"], "FEATURED": ["F", "IY1", "CH", "ER0", "D"], "FEATURES": ["F", "IY1", "CH", "ER0", "Z"], "FEATURING": ["F", "IY1", "CH", "ER0", "IH0", "NG"], "FEB": ["F", "EH1", "B", "Y", "AH0", "W", "EH2", "R", "IY0"], "FEBRUARY": ["F", "EH1", "B", "Y", "AH0", "W", "EH2", "R", "IY0"], "FED": ["F", "EH1", "D"], "FEDERAL": ["F", "EH1", "D", "ER0", "AH0", "L"], "FEDERATION": ["F", "EH2", "D", "ER0", "EY1", "SH", "AH0", "N"], "FEE": ["F", "IY1"], "FEED": ["F", "IY1", "D"], "FEEDBACK": ["F", "IY1", "D", "B", "AE2", "K"], "FEEDING": ["F", "IY1", "D", "IH0", "NG"], "FEEDS": ["F", "IY1", "D", "Z"], "FEEL": ["F", "IY1", "L"], "FEELING": ["F", "IY1", "L", "IH0", "NG"], "FEELINGS": ["F", "IY1", "L", "IH0", "NG", "Z"], "FEELS": ["F", "IY1", "L", "Z"], "FEES": ["F", "IY1", "Z"], "FEET": ["F", "IY1", "T"], "FELL": ["F", "EH1", "L"], "FELLOW": ["F", "EH1", "L", "OW0"], "FELLOWSHIP": ["F", "EH1", "L", "OW0", "SH", "IH2", "P"], "FELT": ["F", "EH1", "L", "T"], "FEMALE": ["F", "IY1", "M", "EY2", "L"], "FEMALES": ["F", "IY1", "M", "EY2", "L", "Z"], "FENCE": ["F", "EH1", "N", "S"], "FERRARI": ["F", "ER0", "AA1", "R", "IY0"], "FERRY": ["F", "EH1", "R", "IY0"], "FESTIVAL": ["F", "EH1", "S", "T", "AH0", "V", "AH0", "L"], "FESTIVALS": ["F", "EH1", "S", "T", "AH0", "V", "AH0", "L", "Z"], "FETISH": ["F", "EH1", "T", "IH0", "SH"], "FEVER": ["F", "IY1", "V", "ER0"], "FEW": ["F", "Y", "UW1"], "FEWER": ["F", "Y", "UW1", "ER0"], "FI": ["F", "AY1"], "FIBER": ["F", "AY1", "B", "ER0"], "FIBRE": ["F", "AY1", "B", "ER0"], "FICTION": ["F", "IH1", "K", "SH", "AH0", "N"], "FIELD": ["F", "IY1", "L", "D"], "FIELDS": ["F", "IY1", "L", "D", "Z"], "FIFTEEN": ["F", "IH0", "F", "T", "IY1", "N"], "FIFTH": ["F", "IH1", "F", "TH"], "FIFTY": ["F", "IH1", "F", "T", "IY0"], "FIG": ["F", "IH1", "G"], "FIGHT": ["F", "AY1", "T"], "FIGHTER": ["F", "AY1", "T", "ER0"], "FIGHTERS": ["F", "AY1", "T", "ER0", "Z"], "FIGHTING": ["F", "AY1", "T", "IH0", "NG"], "FIGURE": ["F", "IH1", "G", "Y", "ER0"], "FIGURED": ["F", "IH1", "G", "Y", "ER0", "D"], "FIGURES": ["F", "IH1", "G", "Y", "ER0", "Z"], "FIJI": ["F", "IY1", "JH", "IY0"], "FILE": ["F", "AY1", "L"], "FILED": ["F", "AY1", "L", "D"], "FILES": ["F", "AY1", "L", "Z"], "FILING": ["F", "AY1", "L", "IH0", "NG"], "FILL": ["F", "IH1", "L"], "FILLED": ["F", "IH1", "L", "D"], "FILLING": ["F", "IH1", "L", "IH0", "NG"], "FILM": ["F", "IH1", "L", "M"], "FILMS": ["F", "IH1", "L", "M", "Z"], "FILTER": ["F", "IH1", "L", "T", "ER0"], "FILTERING": ["F", "IH1", "L", "T", "ER0", "IH0", "NG"], "FILTERS": ["F", "IH1", "L", "T", "ER0", "Z"], "FIN": ["F", "IH1", "N"], "FINAL": ["F", "AY1", "N", "AH0", "L"], "FINALLY": ["F", "AY1", "N", "AH0", "L", "IY0"], "FINALS": ["F", "AY1", "N", "AH0", "L", "Z"], "FINANCE": ["F", "AH0", "N", "AE1", "N", "S"], "FINANCES": ["F", "IH0", "N", "AE1", "N", "S", "IH0", "Z"], "FINANCIAL": ["F", "AH0", "N", "AE1", "N", "SH", "AH0", "L"], "FINANCING": ["F", "AH0", "N", "AE1", "N", "S", "IH0", "NG"], "FIND": ["F", "AY1", "N", "D"], "FINDER": ["F", "AY1", "N", "D", "ER0"], "FINDING": ["F", "AY1", "N", "D", "IH0", "NG"], "FINDINGS": ["F", "AY1", "N", "D", "IH0", "NG", "Z"], "FINDS": ["F", "AY1", "N", "D", "Z"], "FINE": ["F", "AY1", "N"], "FINEST": ["F", "AY1", "N", "AH0", "S", "T"], "FINGER": ["F", "IH1", "NG", "G", "ER0"], "FINGERING": ["F", "IH1", "NG", "G", "ER0", "IH0", "NG"], "FINGERS": ["F", "IH1", "NG", "G", "ER0", "Z"], "FINISH": ["F", "IH1", "N", "IH0", "SH"], "FINISHED": ["F", "IH1", "N", "IH0", "SH", "T"], "FINISHING": ["F", "IH1", "N", "IH0", "SH", "IH0", "NG"], "FINITE": ["F", "AY1", "N", "AY2", "T"], "FINLAND": ["F", "IH1", "N", "L", "AE2", "N", "D"], "FINNISH": ["F", "IH1", "N", "IH0", "SH"], "FIRE": ["F", "AY1", "ER0"], "FIRED": ["F", "AY1", "ER0", "D"], "FIREPLACE": ["F", "AY1", "ER0", "P", "L", "EY2", "S"], "FIRES": ["F", "AY1", "ER0", "Z"], "FIREWALL": ["F", "AY1", "R", "W", "AA0", "L"], "FIRM": ["F", "ER1", "M"], "FIRMS": ["F", "ER1", "M", "Z"], "FIRST": ["F", "ER1", "S", "T"], "FISCAL": ["F", "IH1", "S", "K", "AH0", "L"], "FISH": ["F", "IH1", "SH"], "FISHER": ["F", "IH1", "SH", "ER0"], "FISHERIES": ["F", "IH1", "SH", "ER0", "IY0", "Z"], "FISHING": ["F", "IH1", "SH", "IH0", "NG"], "FIST": ["F", "IH1", "S", "T"], "FIT": ["F", "IH1", "T"], "FITNESS": ["F", "IH1", "T", "N", "AH0", "S"], "FITS": ["F", "IH1", "T", "S"], "FITTED": ["F", "IH1", "T", "AH0", "D"], "FITTING": ["F", "IH1", "T", "IH0", "NG"], "FIVE": ["F", "AY1", "V"], "FIX": ["F", "IH1", "K", "S"], "FIXED": ["F", "IH1", "K", "S", "T"], "FIXES": ["F", "IH1", "K", "S", "IH0", "Z"], "FIXTURES": ["F", "IH1", "K", "S", "CH", "ER0", "Z"], "FLAG": ["F", "L", "AE1", "G"], "FLAGS": ["F", "L", "AE1", "G", "Z"], "FLAME": ["F", "L", "EY1", "M"], "FLASH": ["F", "L", "AE1", "SH"], "FLASHERS": ["F", "L", "AE1", "SH", "ER0", "Z"], "FLASHING": ["F", "L", "AE1", "SH", "IH0", "NG"], "FLAT": ["F", "L", "AE1", "T"], "FLAVOR": ["F", "L", "EY1", "V", "ER0"], "FLEECE": ["F", "L", "IY1", "S"], "FLEET": ["F", "L", "IY1", "T"], "FLESH": ["F", "L", "EH1", "SH"], "FLEX": ["F", "L", "EH1", "K", "S"], "FLEXIBILITY": ["F", "L", "EH2", "K", "S", "AH0", "B", "IH1", "L", "AH0", "T", "IY0"], "FLEXIBLE": ["F", "L", "EH1", "K", "S", "AH0", "B", "AH0", "L"], "FLICKR": ["F", "L", "IH1", "K", "ER0"], "FLIGHT": ["F", "L", "AY1", "T"], "FLIGHTS": ["F", "L", "AY1", "T", "S"], "FLIP": ["F", "L", "IH1", "P"], "FLOAT": ["F", "L", "OW1", "T"], "FLOATING": ["F", "L", "OW1", "T", "IH0", "NG"], "FLOOD": ["F", "L", "AH1", "D"], "FLOOR": ["F", "L", "AO1", "R"], "FLOORING": ["F", "L", "AO1", "R", "IH0", "NG"], "FLOORS": ["F", "L", "AO1", "R", "Z"], "FLOPPY": ["F", "L", "AA1", "P", "IY0"], "FLORAL": ["F", "L", "AO1", "R", "AH0", "L"], "FLORENCE": ["F", "L", "AO1", "R", "AH0", "N", "S"], "FLORIDA": ["F", "L", "AO1", "R", "AH0", "D", "AH0"], "FLORIST": ["F", "L", "AA1", "R", "IH0", "S", "T"], "FLORISTS": ["F", "L", "AO1", "R", "IH0", "S", "T", "S"], "FLOUR": ["F", "L", "AW1", "ER0"], "FLOW": ["F", "L", "OW1"], "FLOWER": ["F", "L", "AW1", "ER0"], "FLOWERS": ["F", "L", "AW1", "ER0", "Z"], "FLOWS": ["F", "L", "OW1", "Z"], "FLOYD": ["F", "L", "OY1", "D"], "FLU": ["F", "L", "UW1"], "FLUID": ["F", "L", "UW1", "AH0", "D"], "FLUSH": ["F", "L", "AH1", "SH"], "FLUX": ["F", "L", "AH1", "K", "S"], "FLY": ["F", "L", "AY1"], "FLYER": ["F", "L", "AY1", "ER0"], "FLYING": ["F", "L", "AY1", "IH0", "NG"], "FM": ["EH1", "F", "EH1", "M"], "FOAM": ["F", "OW1", "M"], "FOCAL": ["F", "OW1", "K", "AH0", "L"], "FOCUS": ["F", "OW1", "K", "AH0", "S"], "FOCUSED": ["F", "OW1", "K", "AH0", "S", "T"], "FOCUSES": ["F", "OW1", "K", "AH0", "S", "IH0", "Z"], "FOCUSING": ["F", "OW1", "K", "AH0", "S", "IH0", "NG"], "FOG": ["F", "AA1", "G"], "FOLD": ["F", "OW1", "L", "D"], "FOLDER": ["F", "OW1", "L", "D", "ER0"], "FOLDERS": ["F", "OW1", "L", "D", "ER0", "Z"], "FOLDING": ["F", "OW1", "L", "D", "IH0", "NG"], "FOLK": ["F", "OW1", "K"], "FOLKS": ["F", "OW1", "K", "S"], "FOLLOW": ["F", "AA1", "L", "OW0"], "FOLLOWED": ["F", "AA1", "L", "OW0", "D"], "FOLLOWING": ["F", "AA1", "L", "OW0", "IH0", "NG"], "FOLLOWS": ["F", "AA1", "L", "OW0", "Z"], "FONT": ["F", "AA1", "N", "T"], "FONTS": ["F", "AA1", "N", "T", "S"], "FOO": ["F", "UW1"], "FOOD": ["F", "UW1", "D"], "FOODS": ["F", "UW1", "D", "Z"], "FOOL": ["F", "UW1", "L"], "FOOT": ["F", "UH1", "T"], "FOOTAGE": ["F", "UH1", "T", "IH0", "JH"], "FOOTBALL": ["F", "UH1", "T", "B", "AO2", "L"], "FOOTWEAR": ["F", "UH1", "T", "W", "EH2", "R"], "FOR": ["F", "AO1", "R"], "FORBES": ["F", "AO1", "R", "B", "Z"], "FORBIDDEN": ["F", "AO1", "R", "B", "IH0", "D", "AH0", "N"], "FORCE": ["F", "AO1", "R", "S"], "FORCED": ["F", "AO1", "R", "S", "T"], "FORCES": ["F", "AO1", "R", "S", "IH0", "Z"], "FORD": ["F", "AO1", "R", "D"], "FORECAST": ["F", "AO1", "R", "K", "AE2", "S", "T"], "FORECASTS": ["F", "AO0", "R", "K", "AE1", "S", "T", "S"], "FOREIGN": ["F", "AO1", "R", "AH0", "N"], "FOREST": ["F", "AO1", "R", "AH0", "S", "T"], "FORESTRY": ["F", "AO1", "R", "AH0", "S", "T", "R", "IY0"], "FORESTS": ["F", "AO1", "R", "AH0", "S", "T", "S"], "FOREVER": ["F", "ER0", "EH1", "V", "ER0"], "FORGE": ["F", "AO1", "R", "JH"], "FORGET": ["F", "ER0", "G", "EH1", "T"], "FORGOT": ["F", "ER0", "G", "AA1", "T"], "FORGOTTEN": ["F", "ER0", "G", "AA1", "T", "AH0", "N"], "FORK": ["F", "AO1", "R", "K"], "FORM": ["F", "AO1", "R", "M"], "FORMAL": ["F", "AO1", "R", "M", "AH0", "L"], "FORMAT": ["F", "AO1", "R", "M", "AE2", "T"], "FORMATION": ["F", "AO0", "R", "M", "EY1", "SH", "AH0", "N"], "FORMATS": ["F", "AO1", "R", "M", "AE2", "T", "S"], "FORMED": ["F", "AO1", "R", "M", "D"], "FORMER": ["F", "AO1", "R", "M", "ER0"], "FORMERLY": ["F", "AO1", "R", "M", "ER0", "L", "IY0"], "FORMING": ["F", "AO1", "R", "M", "IH0", "NG"], "FORMS": ["F", "AO1", "R", "M", "Z"], "FORMULA": ["F", "AO1", "R", "M", "Y", "AH0", "L", "AH0"], "FORT": ["F", "AO1", "R", "T"], "FORTH": ["F", "AO1", "R", "TH"], "FORTUNE": ["F", "AO1", "R", "CH", "AH0", "N"], "FORTY": ["F", "AO1", "R", "T", "IY0"], "FORUM": ["F", "AO1", "R", "AH0", "M"], "FORUMS": ["F", "AO1", "R", "AH0", "M", "Z"], "FORWARD": ["F", "AO1", "R", "W", "ER0", "D"], "FORWARDING": ["F", "AO1", "R", "W", "ER0", "D", "IH0", "NG"], "FOSSIL": ["F", "AA1", "S", "AH0", "L"], "FOSTER": ["F", "AA1", "S", "T", "ER0"], "FOUGHT": ["F", "AO1", "T"], "FOUL": ["F", "AW1", "L"], "FOUND": ["F", "AW1", "N", "D"], "FOUNDATION": ["F", "AW0", "N", "D", "EY1", "SH", "AH0", "N"], "FOUNDATIONS": ["F", "AW0", "N", "D", "EY1", "SH", "AH0", "N", "Z"], "FOUNDED": ["F", "AW1", "N", "D", "IH0", "D"], "FOUNDER": ["F", "AW1", "N", "D", "ER0"], "FOUNTAIN": ["F", "AW1", "N", "T", "AH0", "N"], "FOUR": ["F", "AO1", "R"], "FOURTH": ["F", "AO1", "R", "TH"], "FOX": ["F", "AA1", "K", "S"], "FRACTION": ["F", "R", "AE1", "K", "SH", "AH0", "N"], "FRAGRANCE": ["F", "R", "EY1", "G", "R", "AH0", "N", "S"], "FRAGRANCES": ["F", "R", "EY1", "G", "R", "AH0", "N", "S", "IH0", "Z"], "FRAME": ["F", "R", "EY1", "M"], "FRAMED": ["F", "R", "EY1", "M", "D"], "FRAMES": ["F", "R", "EY1", "M", "Z"], "FRAMEWORK": ["F", "R", "EY1", "M", "W", "ER2", "K"], "FRAMING": ["F", "R", "EY1", "M", "IH0", "NG"], "FRANCE": ["F", "R", "AE1", "N", "S"], "FRANCHISE": ["F", "R", "AE1", "N", "CH", "AY2", "Z"], "FRANCIS": ["F", "R", "AE1", "N", "S", "AH0", "S"], "FRANCISCO": ["F", "R", "AE0", "N", "S", "IH1", "S", "K", "OW0"], "FRANK": ["F", "R", "AE1", "NG", "K"], "FRANKFURT": ["F", "R", "AE1", "NG", "K", "F", "ER0", "T"], "FRANKLIN": ["F", "R", "AE1", "NG", "K", "L", "IH0", "N"], "FRASER": ["F", "R", "EY1", "Z", "ER0"], "FRAUD": ["F", "R", "AO1", "D"], "FRED": ["F", "R", "EH1", "D"], "FREDERICK": ["F", "R", "EH1", "D", "R", "IH0", "K"], "FREE": ["F", "R", "IY1"], "FREEDOM": ["F", "R", "IY1", "D", "AH0", "M"], "FREELANCE": ["F", "R", "IY1", "L", "AE2", "N", "S"], "FREELY": ["F", "R", "IY1", "L", "IY0"], "FREEWARE": ["F", "R", "IY1", "W", "EH2", "R"], "FREEZE": ["F", "R", "IY1", "Z"], "FREIGHT": ["F", "R", "EY1", "T"], "FRENCH": ["F", "R", "EH1", "N", "CH"], "FREQUENCIES": ["F", "R", "IY1", "K", "W", "AH0", "N", "S", "IY0", "Z"], "FREQUENCY": ["F", "R", "IY1", "K", "W", "AH0", "N", "S", "IY0"], "FREQUENT": ["F", "R", "IY1", "K", "W", "AH0", "N", "T"], "FREQUENTLY": ["F", "R", "IY1", "K", "W", "AH0", "N", "T", "L", "IY0"], "FRESH": ["F", "R", "EH1", "SH"], "FRIDAY": ["F", "R", "AY1", "D", "IY0"], "FRIDGE": ["F", "R", "IH1", "JH"], "FRIEND": ["F", "R", "EH1", "N", "D"], "FRIENDLY": ["F", "R", "EH1", "N", "D", "L", "IY0"], "FRIENDS": ["F", "R", "EH1", "N", "D", "Z"], "FRIENDSHIP": ["F", "R", "EH1", "N", "D", "SH", "IH0", "P"], "FROG": ["F", "R", "AA1", "G"], "FROM": ["F", "R", "AH1", "M"], "FRONT": ["F", "R", "AH1", "N", "T"], "FRONTIER": ["F", "R", "AH0", "N", "T", "IH1", "R"], "FROST": ["F", "R", "AO1", "S", "T"], "FROZEN": ["F", "R", "OW1", "Z", "AH0", "N"], "FRUIT": ["F", "R", "UW1", "T"], "FRUITS": ["F", "R", "UW1", "T", "S"], "FU": ["F", "UW1"], "FUCK": ["F", "AH1", "K"], "FUCKED": ["F", "AH1", "K", "T"], "FUCKING": ["F", "AH1", "K", "IH0", "NG"], "FUEL": ["F", "Y", "UW1", "AH0", "L"], "FUJI": ["F", "UW1", "JH", "IY0"], "FUJITSU": ["F", "UW0", "JH", "IH1", "T", "S", "UW0"], "FULL": ["F", "UH1", "L"], "FULLY": ["F", "UH1", "L", "IY0"], "FUN": ["F", "AH1", "N"], "FUNCTION": ["F", "AH1", "NG", "K", "SH", "AH0", "N"], "FUNCTIONAL": ["F", "AH1", "NG", "K", "SH", "AH0", "N", "AH0", "L"], "FUNCTIONALITY": ["F", "AH2", "NG", "K", "SH", "AH0", "N", "AE1", "L", "IH0", "T", "IY0"], "FUNCTIONING": ["F", "AH1", "NG", "K", "SH", "AH0", "N", "IH0", "NG"], "FUNCTIONS": ["F", "AH1", "NG", "K", "SH", "AH0", "N", "Z"], "FUND": ["F", "AH1", "N", "D"], "FUNDAMENTAL": ["F", "AH2", "N", "D", "AH0", "M", "EH1", "N", "T", "AH0", "L"], "FUNDAMENTALS": ["F", "AH2", "N", "D", "AH0", "M", "EH1", "N", "T", "AH0", "L", "Z"], "FUNDED": ["F", "AH1", "N", "D", "AH0", "D"], "FUNDING": ["F", "AH1", "N", "D", "IH0", "NG"], "FUNDRAISING": ["F", "AH1", "N", "D", "R", "EY2", "S", "IH0", "NG"], "FUNDS": ["F", "AH1", "N", "D", "Z"], "FUNERAL": ["F", "Y", "UW1", "N", "ER0", "AH0", "L"], "FUNK": ["F", "AH1", "NG", "K"], "FUNKY": ["F", "AH1", "NG", "K", "IY0"], "FUNNY": ["F", "AH1", "N", "IY0"], "FUR": ["F", "ER1"], "FURNISHED": ["F", "ER1", "N", "IH0", "SH", "T"], "FURNISHINGS": ["F", "ER1", "N", "IH0", "SH", "IH0", "NG", "Z"], "FURNITURE": ["F", "ER1", "N", "IH0", "CH", "ER0"], "FURTHER": ["F", "ER1", "DH", "ER0"], "FURTHERMORE": ["F", "ER1", "DH", "ER0", "M", "AO2", "R"], "FUSION": ["F", "Y", "UW1", "ZH", "AH0", "N"], "FUTURE": ["F", "Y", "UW1", "CH", "ER0"], "FUTURES": ["F", "Y", "UW1", "CH", "ER0", "Z"], "FUZZY": ["F", "AH1", "Z", "IY0"], "G": ["JH", "IY1"], "GA": ["G", "AA1"], "GABRIEL": ["G", "EY1", "B", "R", "IY0", "AH0", "L"], "GADGETS": ["G", "AE1", "JH", "AH0", "T", "S"], "GAGE": ["G", "EY1", "JH"], "GAIN": ["G", "EY1", "N"], "GAINED": ["G", "EY1", "N", "D"], "GAINS": ["G", "EY1", "N", "Z"], "GALAXY": ["G", "AE1", "L", "AH0", "K", "S", "IY0"], "GALE": ["G", "EY1", "L"], "GALLERIES": ["G", "AE1", "L", "ER0", "IY0", "Z"], "GALLERY": ["G", "AE1", "L", "ER0", "IY0"], "GAMBLING": ["G", "AE1", "M", "B", "AH0", "L", "IH0", "NG"], "GAME": ["G", "EY1", "M"], "GAMES": ["G", "EY1", "M", "Z"], "GAMING": ["G", "EY1", "M", "IH0", "NG"], "GAMMA": ["G", "AE1", "M", "AH0"], "GANG": ["G", "AE1", "NG"], "GAP": ["G", "AE1", "P"], "GAPS": ["G", "AE1", "P", "S"], "GARAGE": ["G", "ER0", "AA1", "ZH"], "GARBAGE": ["G", "AA1", "R", "B", "IH0", "JH"], "GARCIA": ["G", "AA2", "R", "S", "IY1", "AH0"], "GARDEN": ["G", "AA1", "R", "D", "AH0", "N"], "GARDENING": ["G", "AA1", "R", "D", "AH0", "N", "IH0", "NG"], "GARDENS": ["G", "AA1", "R", "D", "AH0", "N", "Z"], "GARLIC": ["G", "AA1", "R", "L", "IH0", "K"], "GARY": ["G", "EH1", "R", "IY0"], "GAS": ["G", "AE1", "S"], "GASOLINE": ["G", "AE1", "S", "AH0", "L", "IY2", "N"], "GATE": ["G", "EY1", "T"], "GATES": ["G", "EY1", "T", "S"], "GATEWAY": ["G", "EY1", "T", "W", "EY2"], "GATHER": ["G", "AE1", "DH", "ER0"], "GATHERED": ["G", "AE1", "DH", "ER0", "D"], "GATHERING": ["G", "AE1", "DH", "ER0", "IH0", "NG"], "GAUGE": ["G", "EY1", "JH"], "GAVE": ["G", "EY1", "V"], "GAY": ["G", "EY1"], "GAYS": ["G", "EY1", "Z"], "GAZETTE": ["G", "AH0", "Z", "EH1", "T"], "GEAR": ["G", "IH1", "R"], "GEEK": ["G", "IY1", "K"], "GEL": ["JH", "EH1", "L"], "GEM": ["JH", "EH1", "M"], "GEN": ["JH", "EH1", "N"], "GENDER": ["JH", "EH1", "N", "D", "ER0"], "GENE": ["JH", "IY1", "N"], "GENEALOGY": ["JH", "IY2", "N", "IY0", "AA1", "L", "AH0", "JH", "IY0"], "GENERAL": ["JH", "EH1", "N", "ER0", "AH0", "L"], "GENERALLY": ["JH", "EH1", "N", "ER0", "AH0", "L", "IY0"], "GENERATE": ["JH", "EH1", "N", "ER0", "EY2", "T"], "GENERATED": ["JH", "EH1", "N", "ER0", "EY2", "T", "AH0", "D"], "GENERATES": ["JH", "EH1", "N", "ER0", "EY2", "T", "S"], "GENERATING": ["JH", "EH1", "N", "ER0", "EY2", "T", "IH0", "NG"], "GENERATION": ["JH", "EH2", "N", "ER0", "EY1", "SH", "AH0", "N"], "GENERATIONS": ["JH", "EH2", "N", "ER0", "EY1", "SH", "AH0", "N", "Z"], "GENERATOR": ["JH", "EH1", "N", "ER0", "EY2", "T", "ER0"], "GENERATORS": ["JH", "EH1", "N", "ER0", "EY2", "T", "ER0", "Z"], "GENERIC": ["JH", "AH0", "N", "EH1", "R", "IH0", "K"], "GENEROUS": ["JH", "EH1", "N", "ER0", "AH0", "S"], "GENES": ["JH", "IY1", "N", "Z"], "GENESIS": ["JH", "EH1", "N", "AH0", "S", "AH0", "S"], "GENETIC": ["JH", "AH0", "N", "EH1", "T", "IH0", "K"], "GENETICS": ["JH", "AH0", "N", "EH1", "T", "IH0", "K", "S"], "GENEVA": ["JH", "AH0", "N", "IY1", "V", "AH0"], "GENIUS": ["JH", "IY1", "N", "Y", "AH0", "S"], "GENOME": ["JH", "IY1", "N", "OW2", "M"], "GENRE": ["ZH", "AA1", "N", "R", "AH0"], "GENRES": ["ZH", "AA1", "N", "R", "AH0", "Z"], "GENTLE": ["JH", "EH1", "N", "T", "AH0", "L"], "GENTLEMAN": ["JH", "EH1", "N", "T", "AH0", "L", "M", "AH0", "N"], "GENTLY": ["JH", "EH1", "N", "T", "L", "IY0"], "GENUINE": ["JH", "EH1", "N", "Y", "UW0", "AH0", "N"], "GEO": ["JH", "IY1", "OW0"], "GEOGRAPHIC": ["JH", "IY2", "AH0", "G", "R", "AE1", "F", "IH0", "K"], "GEOGRAPHICAL": ["JH", "IY2", "AH0", "G", "R", "AE1", "F", "IH0", "K", "AH0", "L"], "GEOGRAPHY": ["JH", "IY0", "AA1", "G", "R", "AH0", "F", "IY0"], "GEOLOGICAL": ["JH", "IY2", "AH0", "L", "AA1", "JH", "IH0", "K", "AH0", "L"], "GEOLOGY": ["JH", "IY0", "AA1", "L", "AH0", "JH", "IY0"], "GEOMETRY": ["JH", "IY0", "AA1", "M", "AH0", "T", "R", "IY0"], "GEORGE": ["JH", "AO1", "R", "JH"], "GEORGIA": ["JH", "AO1", "R", "JH", "AH0"], "GERALD": ["JH", "EH1", "R", "AH0", "L", "D"], "GERMAN": ["JH", "ER1", "M", "AH0", "N"], "GERMANY": ["JH", "ER1", "M", "AH0", "N", "IY0"], "GET": ["G", "EH1", "T"], "GETS": ["G", "EH1", "T", "S"], "GETTING": ["G", "EH1", "T", "IH0", "NG"], "GHANA": ["G", "AE1", "N", "AH0"], "GHOST": ["G", "OW1", "S", "T"], "GIANT": ["JH", "AY1", "AH0", "N", "T"], "GIANTS": ["JH", "AY1", "AH0", "N", "T", "S"], "GIBRALTAR": ["JH", "IH0", "B", "R", "AO1", "L", "T", "ER0"], "GIBSON": ["G", "IH1", "B", "S", "AH0", "N"], "GIFT": ["G", "IH1", "F", "T"], "GIFTS": ["G", "IH1", "F", "T", "S"], "GIG": ["G", "IH1", "G"], "GILBERT": ["G", "IH1", "L", "B", "ER0", "T"], "GIRL": ["G", "ER1", "L"], "GIRLFRIEND": ["G", "ER1", "L", "F", "R", "EH2", "N", "D"], "GIRLS": ["G", "ER1", "L", "Z"], "GIVE": ["G", "IH1", "V"], "GIVEN": ["G", "IH1", "V", "AH0", "N"], "GIVES": ["G", "IH1", "V", "Z"], "GIVING": ["G", "IH1", "V", "IH0", "NG"], "GLAD": ["G", "L", "AE1", "D"], "GLANCE": ["G", "L", "AE1", "N", "S"], "GLASGOW": ["G", "L", "AE1", "S", "K", "OW2"], "GLASS": ["G", "L", "AE1", "S"], "GLASSES": ["G", "L", "AE1", "S", "AH0", "Z"], "GLEN": ["G", "L", "EH1", "N"], "GLENN": ["G", "L", "EH1", "N"], "GLOBAL": ["G", "L", "OW1", "B", "AH0", "L"], "GLOBE": ["G", "L", "OW1", "B"], "GLORY": ["G", "L", "AO1", "R", "IY0"], "GLOSSARY": ["G", "L", "AO1", "S", "ER0", "IY0"], "GLOVES": ["G", "L", "AH1", "V", "Z"], "GLOW": ["G", "L", "OW1"], "GLUCOSE": ["G", "L", "UW1", "K", "OW2", "S"], "GMBH": ["G", "AH0", "M"], "GNOME": ["N", "OW1", "M"], "GNU": ["N", "UW1"], "GO": ["G", "OW1"], "GOAL": ["G", "OW1", "L"], "GOALS": ["G", "OW1", "L", "Z"], "GOAT": ["G", "OW1", "T"], "GOD": ["G", "AA1", "D"], "GODS": ["G", "AA1", "D", "Z"], "GOES": ["G", "OW1", "Z"], "GOING": ["G", "OW1", "IH0", "NG"], "GOLD": ["G", "OW1", "L", "D"], "GOLDEN": ["G", "OW1", "L", "D", "AH0", "N"], "GOLF": ["G", "AA1", "L", "F"], "GONE": ["G", "AO1", "N"], "GONNA": ["G", "AA1", "N", "AH0"], "GOOD": ["G", "UH1", "D"], "GOODS": ["G", "UH1", "D", "Z"], "GOOGLE": ["G", "UW1", "G", "AH0", "L"], "GORDON": ["G", "AO1", "R", "D", "AH0", "N"], "GORE": ["G", "AO1", "R"], "GORGEOUS": ["G", "AO1", "R", "JH", "AH0", "S"], "GOSPEL": ["G", "AA1", "S", "P", "AH0", "L"], "GOSSIP": ["G", "AA1", "S", "AH0", "P"], "GOT": ["G", "AA1", "T"], "GOTHIC": ["G", "AA1", "TH", "IH0", "K"], "GOTO": ["G", "OW1", "T", "UW2"], "GOTTA": ["G", "AA1", "T", "AH0"], "GOTTEN": ["G", "AA1", "T", "AH0", "N"], "GOURMET": ["G", "UH1", "R", "M", "EY2"], "GOV": ["G", "AH1", "V"], "GOVERNANCE": ["G", "AH1", "V", "ER0", "N", "AH0", "N", "S"], "GOVERNING": ["G", "AH1", "V", "ER0", "N", "IH0", "NG"], "GOVERNMENT": ["G", "AH1", "V", "ER0", "N", "M", "AH0", "N", "T"], "GOVERNMENTAL": ["G", "AH1", "V", "ER0", "M", "EH2", "N", "T", "AH0", "L"], "GOVERNMENTS": ["G", "AH1", "V", "ER0", "N", "M", "AH0", "N", "T", "S"], "GOVERNOR": ["G", "AH1", "V", "ER0", "N", "ER0"], "GPS": ["G", "IY1", "P", "IY0", "EH1", "S"], "GRAB": ["G", "R", "AE1", "B"], "GRACE": ["G", "R", "EY1", "S"], "GRAD": ["G", "R", "AE1", "D"], "GRADE": ["G", "R", "EY1", "D"], "GRADES": ["G", "R", "EY1", "D", "Z"], "GRADUALLY": ["G", "R", "AE1", "JH", "UW0", "AH0", "L", "IY0"], "GRADUATE": ["G", "R", "AE1", "JH", "AH0", "W", "AH0", "T"], "GRADUATED": ["G", "R", "AE1", "JH", "UW0", "EY2", "T", "IH0", "D"], "GRADUATES": ["G", "R", "AE1", "JH", "AH0", "W", "AH0", "T", "S"], "GRADUATION": ["G", "R", "AE2", "JH", "UW0", "EY1", "SH", "AH0", "N"], "GRAHAM": ["G", "R", "EY1", "AH0", "M"], "GRAIN": ["G", "R", "EY1", "N"], "GRAMMAR": ["G", "R", "AE1", "M", "ER0"], "GRAMS": ["G", "R", "AE1", "M", "Z"], "GRAND": ["G", "R", "AE1", "N", "D"], "GRANDE": ["G", "R", "AE1", "N", "D"], "GRANNY": ["G", "R", "AE1", "N", "IY0"], "GRANT": ["G", "R", "AE1", "N", "T"], "GRANTED": ["G", "R", "AE1", "N", "T", "AH0", "D"], "GRANTS": ["G", "R", "AE1", "N", "T", "S"], "GRAPH": ["G", "R", "AE1", "F"], "GRAPHIC": ["G", "R", "AE1", "F", "IH0", "K"], "GRAPHICAL": ["G", "R", "AE1", "F", "IH0", "K", "AH0", "L"], "GRAPHICS": ["G", "R", "AE1", "F", "IH0", "K", "S"], "GRAPHS": ["G", "R", "AE1", "F", "S"], "GRAS": ["G", "R", "AE1", "S"], "GRASS": ["G", "R", "AE1", "S"], "GRATEFUL": ["G", "R", "EY1", "T", "F", "AH0", "L"], "GRATIS": ["G", "R", "AE1", "T", "AH0", "S"], "GRAVE": ["G", "R", "EY1", "V"], "GRAVITY": ["G", "R", "AE1", "V", "AH0", "T", "IY0"], "GRAY": ["G", "R", "EY1"], "GREAT": ["G", "R", "EY1", "T"], "GREATER": ["G", "R", "EY1", "T", "ER0"], "GREATEST": ["G", "R", "EY1", "T", "AH0", "S", "T"], "GREATLY": ["G", "R", "EY1", "T", "L", "IY0"], "GREECE": ["G", "R", "IY1", "S"], "GREEK": ["G", "R", "IY1", "K"], "GREEN": ["G", "R", "IY1", "N"], "GREENE": ["G", "R", "IY1", "N"], "GREENHOUSE": ["G", "R", "IY1", "N", "HH", "AW2", "S"], "GREENSBORO": ["G", "R", "IY1", "N", "Z", "B", "ER0", "R", "OW0"], "GREETING": ["G", "R", "IY1", "T", "IH0", "NG"], "GREETINGS": ["G", "R", "IY1", "T", "IH0", "NG", "Z"], "GREG": ["G", "R", "EH1", "G"], "GREGORY": ["G", "R", "EH1", "G", "ER0", "IY0"], "GRENADA": ["G", "R", "IH0", "N", "EY1", "D", "AH0"], "GREW": ["G", "R", "UW1"], "GREY": ["G", "R", "EY1"], "GRID": ["G", "R", "IH1", "D"], "GRIFFIN": ["G", "R", "IH1", "F", "IH0", "N"], "GRILL": ["G", "R", "IH1", "L"], "GRIP": ["G", "R", "IH1", "P"], "GROCERY": ["G", "R", "OW1", "S", "ER0", "IY0"], "GROOVE": ["G", "R", "UW1", "V"], "GROSS": ["G", "R", "OW1", "S"], "GROUND": ["G", "R", "AW1", "N", "D"], "GROUNDS": ["G", "R", "AW1", "N", "D", "Z"], "GROUNDWATER": ["G", "R", "AW1", "N", "D", "W", "AA2", "T", "ER0"], "GROUP": ["G", "R", "UW1", "P"], "GROUPS": ["G", "R", "UW1", "P", "S"], "GROVE": ["G", "R", "OW1", "V"], "GROW": ["G", "R", "OW1"], "GROWING": ["G", "R", "OW1", "IH0", "NG"], "GROWN": ["G", "R", "OW1", "N"], "GROWS": ["G", "R", "OW1", "Z"], "GROWTH": ["G", "R", "OW1", "TH"], "GUAM": ["G", "W", "AA1", "M"], "GUARANTEE": ["G", "EH2", "R", "AH0", "N", "T", "IY1"], "GUARANTEED": ["G", "EH2", "R", "AH0", "N", "T", "IY1", "D"], "GUARANTEES": ["G", "EH2", "R", "AH0", "N", "T", "IY1", "Z"], "GUARD": ["G", "AA1", "R", "D"], "GUARDIAN": ["G", "AA1", "R", "D", "IY0", "AH0", "N"], "GUARDS": ["G", "AA1", "R", "D", "Z"], "GUATEMALA": ["G", "W", "AA2", "T", "AH0", "M", "AA1", "L", "AH0"], "GUESS": ["G", "EH1", "S"], "GUEST": ["G", "EH1", "S", "T"], "GUESTS": ["G", "EH1", "S", "T", "S"], "GUIDANCE": ["G", "AY1", "D", "AH0", "N", "S"], "GUIDE": ["G", "AY1", "D"], "GUIDED": ["G", "AY1", "D", "AH0", "D"], "GUIDELINES": ["G", "AY1", "D", "L", "AY2", "N", "Z"], "GUIDES": ["G", "AY1", "D", "Z"], "GUILD": ["G", "IH1", "L", "D"], "GUILTY": ["G", "IH1", "L", "T", "IY0"], "GUINEA": ["G", "IH1", "N", "IY0"], "GUITAR": ["G", "IH0", "T", "AA1", "R"], "GUITARS": ["G", "IH0", "T", "AA1", "R", "Z"], "GULF": ["G", "AH1", "L", "F"], "GUN": ["G", "AH1", "N"], "GUNS": ["G", "AH1", "N", "Z"], "GURU": ["G", "UW1", "R", "UW2"], "GUY": ["G", "AY1"], "GUYANA": ["G", "AY2", "AA1", "N", "AH0"], "GUYS": ["G", "AY1", "Z"], "GYM": ["JH", "IH1", "M"], "H": ["EY1", "CH"], "HA": ["HH", "AA1"], "HABITAT": ["HH", "AE1", "B", "AH0", "T", "AE2", "T"], "HABITS": ["HH", "AE1", "B", "AH0", "T", "S"], "HACK": ["HH", "AE1", "K"], "HACKER": ["HH", "AE1", "K", "ER0"], "HAD": ["HH", "AE1", "D"], "HAIR": ["HH", "EH1", "R"], "HAIRY": ["HH", "EH1", "R", "IY0"], "HAITI": ["HH", "EY1", "T", "IY0"], "HALF": ["HH", "AE1", "F"], "HALIFAX": ["HH", "AE1", "L", "IH0", "F", "AE2", "K", "S"], "HALL": ["HH", "AO1", "L"], "HALLOWEEN": ["HH", "AE2", "L", "AH0", "W", "IY1", "N"], "HALO": ["HH", "EY1", "L", "OW0"], "HAM": ["HH", "AE1", "M"], "HAMBURG": ["HH", "AE1", "M", "B", "ER0", "G"], "HAMILTON": ["HH", "AE1", "M", "AH0", "L", "T", "AH0", "N"], "HAMMER": ["HH", "AE1", "M", "ER0"], "HAMPSHIRE": ["HH", "AE1", "M", "P", "SH", "ER0"], "HAMPTON": ["HH", "AE1", "M", "P", "T", "AH0", "N"], "HAND": ["HH", "AE1", "N", "D"], "HANDBAGS": ["HH", "AE1", "N", "D", "B", "AE2", "G", "Z"], "HANDBOOK": ["HH", "AE1", "N", "D", "B", "UH2", "K"], "HANDED": ["HH", "AE1", "N", "D", "AH0", "D"], "HANDHELD": ["HH", "AE1", "N", "D", "HH", "EH1", "L", "D"], "HANDLE": ["HH", "AE1", "N", "D", "AH0", "L"], "HANDLED": ["HH", "AE1", "N", "D", "AH0", "L", "D"], "HANDLES": ["HH", "AE1", "N", "D", "AH0", "L", "Z"], "HANDLING": ["HH", "AE1", "N", "D", "L", "IH0", "NG"], "HANDMADE": ["HH", "AE1", "N", "D", "M", "EY1", "D"], "HANDS": ["HH", "AE1", "N", "D", "Z"], "HANDY": ["HH", "AE1", "N", "D", "IY0"], "HANG": ["HH", "AE1", "NG"], "HANGING": ["HH", "AE1", "NG", "IH0", "NG"], "HANS": ["HH", "AA1", "N", "S"], "HANSEN": ["HH", "AE1", "N", "S", "AH0", "N"], "HAPPEN": ["HH", "AE1", "P", "AH0", "N"], "HAPPENED": ["HH", "AE1", "P", "AH0", "N", "D"], "HAPPENING": ["HH", "AE1", "P", "AH0", "N", "IH0", "NG"], "HAPPENS": ["HH", "AE1", "P", "AH0", "N", "Z"], "HAPPINESS": ["HH", "AE1", "P", "IY0", "N", "AH0", "S"], "HAPPY": ["HH", "AE1", "P", "IY0"], "HARASSMENT": ["HH", "ER0", "AE1", "S", "M", "AH0", "N", "T"], "HARBOR": ["HH", "AA1", "R", "B", "ER0"], "HARBOUR": ["HH", "AA1", "R", "B", "ER0"], "HARD": ["HH", "AA1", "R", "D"], "HARDCORE": ["HH", "AA1", "R", "D", "K", "AO1", "R"], "HARDCOVER": ["HH", "AA1", "R", "D", "K", "AH2", "V", "ER0"], "HARDER": ["HH", "AA1", "R", "D", "ER0"], "HARDLY": ["HH", "AA1", "R", "D", "L", "IY0"], "HARDWARE": ["HH", "AA1", "R", "D", "W", "EH2", "R"], "HARDWOOD": ["HH", "AA1", "R", "D", "W", "UH2", "D"], "HARLEY": ["HH", "AA1", "R", "L", "IY0"], "HARM": ["HH", "AA1", "R", "M"], "HARMFUL": ["HH", "AA1", "R", "M", "F", "AH0", "L"], "HARMONY": ["HH", "AA1", "R", "M", "AH0", "N", "IY0"], "HAROLD": ["HH", "EH1", "R", "AH0", "L", "D"], "HARPER": ["HH", "AA1", "R", "P", "ER0"], "HARRIS": ["HH", "EH1", "R", "IH0", "S"], "HARRISON": ["HH", "EH1", "R", "IH0", "S", "AH0", "N"], "HARRY": ["HH", "EH1", "R", "IY0"], "HART": ["HH", "AA1", "R", "T"], "HARTFORD": ["HH", "AA1", "R", "T", "F", "ER0", "D"], "HARVARD": ["HH", "AA1", "R", "V", "ER0", "D"], "HARVEST": ["HH", "AA1", "R", "V", "AH0", "S", "T"], "HARVEY": ["HH", "AA1", "R", "V", "IY0"], "HAS": ["HH", "AE1", "Z"], "HASH": ["HH", "AE1", "SH"], "HAT": ["HH", "AE1", "T"], "HATE": ["HH", "EY1", "T"], "HATS": ["HH", "AE1", "T", "S"], "HAVE": ["HH", "AE1", "V"], "HAVEN": ["HH", "EY1", "V", "AH0", "N"], "HAVING": ["HH", "AE1", "V", "IH0", "NG"], "HAWAII": ["HH", "AH0", "W", "AY1", "IY2"], "HAWAIIAN": ["HH", "AH0", "W", "AY1", "AH0", "N"], "HAWK": ["HH", "AO1", "K"], "HAY": ["HH", "EY1"], "HAYES": ["HH", "EY1", "Z"], "HAZARD": ["HH", "AE1", "Z", "ER0", "D"], "HAZARDOUS": ["HH", "AE1", "Z", "ER0", "D", "AH0", "S"], "HAZARDS": ["HH", "AE1", "Z", "ER0", "D", "Z"], "HE": ["HH", "IY1"], "HEAD": ["HH", "EH1", "D"], "HEADED": ["HH", "EH1", "D", "AH0", "D"], "HEADER": ["HH", "EH1", "D", "ER0"], "HEADERS": ["HH", "EH1", "D", "ER0", "Z"], "HEADING": ["HH", "EH1", "D", "IH0", "NG"], "HEADLINE": ["HH", "EH1", "D", "L", "AY2", "N"], "HEADLINES": ["HH", "EH1", "D", "L", "AY2", "N", "Z"], "HEADPHONES": ["HH", "EH1", "D", "F", "OW2", "N", "Z"], "HEADQUARTERS": ["HH", "EH1", "D", "K", "W", "AO2", "R", "T", "ER0", "Z"], "HEADS": ["HH", "EH1", "D", "Z"], "HEADSET": ["HH", "EH1", "D", "S", "EH2", "T"], "HEALING": ["HH", "IY1", "L", "IH0", "NG"], "HEALTH": ["HH", "EH1", "L", "TH"], "HEALTHCARE": ["HH", "EH1", "L", "TH", "K", "EH2", "R"], "HEALTHY": ["HH", "EH1", "L", "TH", "IY0"], "HEAR": ["HH", "IY1", "R"], "HEARD": ["HH", "ER1", "D"], "HEARING": ["HH", "IY1", "R", "IH0", "NG"], "HEARINGS": ["HH", "IY1", "R", "IH0", "NG", "Z"], "HEART": ["HH", "AA1", "R", "T"], "HEARTS": ["HH", "AA1", "R", "T", "S"], "HEAT": ["HH", "IY1", "T"], "HEATED": ["HH", "IY1", "T", "AH0", "D"], "HEATER": ["HH", "IY1", "T", "ER0"], "HEATH": ["HH", "IY1", "TH"], "HEATHER": ["HH", "EH1", "DH", "ER0"], "HEATING": ["HH", "IY1", "T", "IH0", "NG"], "HEAVEN": ["HH", "EH1", "V", "AH0", "N"], "HEAVILY": ["HH", "EH1", "V", "AH0", "L", "IY0"], "HEAVY": ["HH", "EH1", "V", "IY0"], "HEBREW": ["HH", "IY1", "B", "R", "UW0"], "HEEL": ["HH", "IY1", "L"], "HEIGHT": ["HH", "AY1", "T"], "HEIGHTS": ["HH", "AY1", "T", "S"], "HELD": ["HH", "EH1", "L", "D"], "HELEN": ["HH", "EH1", "L", "AH0", "N"], "HELENA": ["HH", "EH1", "L", "AH0", "N", "AH0"], "HELICOPTER": ["HH", "EH1", "L", "IH0", "K", "AA2", "P", "T", "ER0"], "HELL": ["HH", "EH1", "L"], "HELLO": ["HH", "EH0", "L", "OW1"], "HELMET": ["HH", "EH1", "L", "M", "AH0", "T"], "HELP": ["HH", "EH1", "L", "P"], "HELPED": ["HH", "EH1", "L", "P", "T"], "HELPFUL": ["HH", "EH1", "L", "P", "F", "AH0", "L"], "HELPING": ["HH", "EH1", "L", "P", "IH0", "NG"], "HELPS": ["HH", "EH1", "L", "P", "S"], "HENCE": ["HH", "EH1", "N", "S"], "HENDERSON": ["HH", "EH1", "N", "D", "ER0", "S", "AH0", "N"], "HENRY": ["HH", "EH1", "N", "R", "IY0"], "HEPATITIS": ["HH", "EH2", "P", "AH0", "T", "AY1", "T", "AH0", "S"], "HER": ["HH", "ER1"], "HERALD": ["HH", "EH1", "R", "AH0", "L", "D"], "HERB": ["ER1", "B"], "HERBAL": ["ER1", "B", "AH0", "L"], "HERBS": ["ER1", "B", "Z"], "HERE": ["HH", "IY1", "R"], "HEREBY": ["HH", "IH0", "R", "B", "AY1"], "HEREIN": ["HH", "IH0", "R", "IH1", "N"], "HERITAGE": ["HH", "EH1", "R", "AH0", "T", "AH0", "JH"], "HERO": ["HH", "IH1", "R", "OW0"], "HEROES": ["HH", "IH1", "R", "OW0", "Z"], "HERSELF": ["HH", "ER0", "S", "EH1", "L", "F"], "HEWLETT": ["HH", "Y", "UW1", "L", "IH0", "T"], "HEY": ["HH", "EY1"], "HI": ["HH", "AY1"], "HIDDEN": ["HH", "IH1", "D", "AH0", "N"], "HIDE": ["HH", "AY1", "D"], "HIERARCHY": ["HH", "AY1", "ER0", "AA2", "R", "K", "IY0"], "HIGH": ["HH", "AY1"], "HIGHER": ["HH", "AY1", "ER0"], "HIGHEST": ["HH", "AY1", "AH0", "S", "T"], "HIGHLAND": ["HH", "AY1", "L", "AH0", "N", "D"], "HIGHLIGHT": ["HH", "AY1", "L", "AY2", "T"], "HIGHLIGHTED": ["HH", "AY1", "L", "AY2", "T", "IH0", "D"], "HIGHLIGHTS": ["HH", "AY1", "L", "AY2", "T", "S"], "HIGHLY": ["HH", "AY1", "L", "IY0"], "HIGHS": ["HH", "AY1", "Z"], "HIGHWAY": ["HH", "AY1", "W", "EY2"], "HIGHWAYS": ["HH", "AY1", "W", "EY2", "Z"], "HIKING": ["HH", "AY1", "K", "IH0", "NG"], "HILL": ["HH", "IH1", "L"], "HILLS": ["HH", "IH1", "L", "Z"], "HILTON": ["HH", "IH1", "L", "T", "AH0", "N"], "HIM": ["HH", "IH1", "M"], "HIMSELF": ["HH", "IH0", "M", "S", "EH1", "L", "F"], "HINDU": ["HH", "IH1", "N", "D", "UW2"], "HINT": ["HH", "IH1", "N", "T"], "HINTS": ["HH", "IH1", "N", "T", "S"], "HIP": ["HH", "IH1", "P"], "HIRE": ["HH", "AY1", "ER0"], "HIRED": ["HH", "AY1", "ER0", "D"], "HIRING": ["HH", "AY1", "R", "IH0", "NG"], "HIS": ["HH", "IH1", "Z"], "HISPANIC": ["HH", "IH0", "S", "P", "AE1", "N", "IH0", "K"], "HISTORIC": ["HH", "IH0", "S", "T", "AO1", "R", "IH0", "K"], "HISTORICAL": ["HH", "IH0", "S", "T", "AO1", "R", "IH0", "K", "AH0", "L"], "HISTORY": ["HH", "IH1", "S", "T", "ER0", "IY0"], "HIT": ["HH", "IH1", "T"], "HITACHI": ["HH", "IH0", "T", "AA1", "CH", "IY0"], "HITS": ["HH", "IH1", "T", "S"], "HITTING": ["HH", "IH1", "T", "IH0", "NG"], "HO": ["HH", "OW1"], "HOBBIES": ["HH", "AA1", "B", "IY0", "Z"], "HOBBY": ["HH", "AA1", "B", "IY0"], "HOCKEY": ["HH", "AA1", "K", "IY0"], "HOLD": ["HH", "OW1", "L", "D"], "HOLDER": ["HH", "OW1", "L", "D", "ER0"], "HOLDERS": ["HH", "OW1", "L", "D", "ER0", "Z"], "HOLDING": ["HH", "OW1", "L", "D", "IH0", "NG"], "HOLDINGS": ["HH", "OW1", "L", "D", "IH0", "NG", "Z"], "HOLDS": ["HH", "OW1", "L", "D", "Z"], "HOLE": ["HH", "OW1", "L"], "HOLES": ["HH", "OW1", "L", "Z"], "HOLIDAY": ["HH", "AA1", "L", "AH0", "D", "EY2"], "HOLIDAYS": ["HH", "AA1", "L", "AH0", "D", "EY2", "Z"], "HOLLAND": ["HH", "AA1", "L", "AH0", "N", "D"], "HOLLOW": ["HH", "AA1", "L", "OW0"], "HOLLY": ["HH", "AA1", "L", "IY0"], "HOLLYWOOD": ["HH", "AA1", "L", "IY0", "W", "UH2", "D"], "HOLMES": ["HH", "OW1", "M", "Z"], "HOLOCAUST": ["HH", "AO1", "L", "AH0", "K", "AO2", "S", "T"], "HOLY": ["HH", "OW1", "L", "IY0"], "HOME": ["HH", "OW1", "M"], "HOMELAND": ["HH", "OW1", "M", "L", "AE2", "N", "D"], "HOMELESS": ["HH", "OW1", "M", "L", "AH0", "S"], "HOMES": ["HH", "OW1", "M", "Z"], "HOMETOWN": ["HH", "OW1", "M", "T", "AW2", "N"], "HOMEWORK": ["HH", "OW1", "M", "W", "ER2", "K"], "HON": ["HH", "AA1", "N"], "HONDA": ["HH", "AO1", "N", "D", "AH0"], "HONDURAS": ["HH", "AA0", "N", "D", "UH1", "R", "AH0", "S"], "HONEST": ["AA1", "N", "AH0", "S", "T"], "HONEY": ["HH", "AH1", "N", "IY0"], "HONG": ["HH", "AO1", "NG"], "HONOLULU": ["HH", "AA2", "N", "AH0", "L", "UW1", "L", "UW0"], "HONOR": ["AA1", "N", "ER0"], "HONORS": ["AA1", "N", "ER0", "Z"], "HOOD": ["HH", "UH1", "D"], "HOOK": ["HH", "UH1", "K"], "HOP": ["HH", "AA1", "P"], "HOPE": ["HH", "OW1", "P"], "HOPED": ["HH", "OW1", "P", "T"], "HOPEFULLY": ["HH", "OW1", "P", "F", "AH0", "L", "IY0"], "HOPES": ["HH", "OW1", "P", "S"], "HOPING": ["HH", "OW1", "P", "IH0", "NG"], "HOPKINS": ["HH", "AA1", "P", "K", "IH0", "N", "Z"], "HORIZON": ["HH", "ER0", "AY1", "Z", "AH0", "N"], "HORIZONTAL": ["HH", "AO2", "R", "AH0", "Z", "AA1", "N", "T", "AH0", "L"], "HORMONE": ["HH", "AO1", "R", "M", "OW2", "N"], "HORN": ["HH", "AO1", "R", "N"], "HORNY": ["HH", "AO1", "R", "N", "IY0"], "HORRIBLE": ["HH", "AO1", "R", "AH0", "B", "AH0", "L"], "HORROR": ["HH", "AO1", "R", "ER0"], "HORSE": ["HH", "AO1", "R", "S"], "HORSES": ["HH", "AO1", "R", "S", "AH0", "Z"], "HOSE": ["HH", "OW1", "Z"], "HOSPITAL": ["HH", "AA1", "S", "P", "IH2", "T", "AH0", "L"], "HOSPITALITY": ["HH", "AA2", "S", "P", "AH0", "T", "AE1", "L", "AH0", "T", "IY0"], "HOSPITALS": ["HH", "AA1", "S", "P", "IH2", "T", "AH0", "L", "Z"], "HOST": ["HH", "OW1", "S", "T"], "HOSTED": ["HH", "OW1", "S", "T", "IH0", "D"], "HOSTEL": ["HH", "AA1", "S", "T", "AH0", "L"], "HOSTELS": ["HH", "AA1", "S", "T", "AH0", "L", "Z"], "HOSTING": ["HH", "OW1", "S", "T", "IH0", "NG"], "HOSTS": ["HH", "OW1", "S", "T", "S"], "HOT": ["HH", "AA1", "T"], "HOTEL": ["HH", "OW0", "T", "EH1", "L"], "HOTELS": ["HH", "OW0", "T", "EH1", "L", "Z"], "HOTTEST": ["HH", "AA1", "T", "AH0", "S", "T"], "HOUR": ["AW1", "ER0"], "HOURLY": ["AW1", "R", "L", "IY0"], "HOURS": ["AW1", "ER0", "Z"], "HOUSE": ["HH", "AW1", "S"], "HOUSEHOLD": ["HH", "AW1", "S", "HH", "OW2", "L", "D"], "HOUSEHOLDS": ["HH", "AW1", "S", "HH", "OW2", "L", "D", "Z"], "HOUSES": ["HH", "AW1", "S", "AH0", "Z"], "HOUSEWARES": ["HH", "AW1", "S", "W", "EH2", "R", "Z"], "HOUSEWIVES": ["HH", "AW1", "S", "W", "AY2", "V", "Z"], "HOUSING": ["HH", "AW1", "Z", "IH0", "NG"], "HOUSTON": ["HH", "Y", "UW1", "S", "T", "AH0", "N"], "HOW": ["HH", "AW1"], "HOWARD": ["HH", "AW1", "ER0", "D"], "HOWEVER": ["HH", "AW2", "EH1", "V", "ER0"], "HU": ["HH", "UW1"], "HUB": ["HH", "AH1", "B"], "HUDSON": ["HH", "AH1", "D", "S", "AH0", "N"], "HUGE": ["HH", "Y", "UW1", "JH"], "HUGH": ["HH", "Y", "UW1"], "HUGHES": ["HH", "Y", "UW1", "Z"], "HUGO": ["HH", "Y", "UW1", "G", "OW0"], "HULL": ["HH", "AH1", "L"], "HUMAN": ["HH", "Y", "UW1", "M", "AH0", "N"], "HUMANITARIAN": ["HH", "Y", "UW2", "M", "AE2", "N", "AH0", "T", "EH1", "R", "IY0", "AH0", "N"], "HUMANITIES": ["HH", "Y", "UW0", "M", "AE1", "N", "IH0", "T", "IY0", "Z"], "HUMANITY": ["HH", "Y", "UW0", "M", "AE1", "N", "IH0", "T", "IY0"], "HUMANS": ["HH", "Y", "UW1", "M", "AH0", "N", "Z"], "HUMIDITY": ["HH", "Y", "UW0", "M", "IH1", "D", "AH0", "T", "IY0"], "HUMOR": ["HH", "Y", "UW1", "M", "ER0"], "HUNDRED": ["HH", "AH1", "N", "D", "R", "AH0", "D"], "HUNDREDS": ["HH", "AH1", "N", "D", "R", "AH0", "D", "Z"], "HUNG": ["HH", "AH1", "NG"], "HUNGARIAN": ["HH", "AH0", "NG", "G", "EH1", "R", "IY0", "AH0", "N"], "HUNGARY": ["HH", "AH1", "NG", "G", "ER0", "IY0"], "HUNGER": ["HH", "AH1", "NG", "G", "ER0"], "HUNGRY": ["HH", "AH1", "NG", "G", "R", "IY0"], "HUNT": ["HH", "AH1", "N", "T"], "HUNTER": ["HH", "AH1", "N", "T", "ER0"], "HUNTING": ["HH", "AH1", "N", "T", "IH0", "NG"], "HUNTINGTON": ["HH", "AH1", "N", "T", "IH0", "NG", "T", "AH0", "N"], "HURRICANE": ["HH", "ER1", "AH0", "K", "EY2", "N"], "HURT": ["HH", "ER1", "T"], "HUSBAND": ["HH", "AH1", "Z", "B", "AH0", "N", "D"], "HYBRID": ["HH", "AY1", "B", "R", "AH0", "D"], "HYDRAULIC": ["HH", "AY0", "D", "R", "AO1", "L", "IH0", "K"], "HYDROGEN": ["HH", "AY1", "D", "R", "AH0", "JH", "AH0", "N"], "HYGIENE": ["HH", "AY1", "JH", "IY2", "N"], "HYPOTHESIS": ["HH", "AY0", "P", "AA1", "TH", "AH0", "S", "AH0", "S"], "HYPOTHETICAL": ["HH", "AY2", "P", "AH0", "TH", "EH1", "T", "AH0", "K", "AH0", "L"], "HYUNDAI": ["HH", "Y", "AH1", "N", "D", "EY2"], "I": ["AY1"], "IA": ["IY1", "AH0"], "IAN": ["IY1", "AH0", "N"], "ICE": ["AY1", "S"], "ICELAND": ["AY1", "S", "L", "AH0", "N", "D"], "ICON": ["AY1", "K", "AA0", "N"], "ICONS": ["AY1", "K", "AA2", "N", "Z"], "ID": ["IH1", "D"], "IDAHO": ["AY1", "D", "AH0", "HH", "OW2"], "IDE": ["AY1", "D"], "IDEA": ["AY0", "D", "IY1", "AH0"], "IDEAL": ["AY0", "D", "IY1", "L"], "IDEAS": ["AY0", "D", "IY1", "AH0", "Z"], "IDENTICAL": ["AY0", "D", "EH1", "N", "T", "IH0", "K", "AH0", "L"], "IDENTIFICATION": ["AY0", "D", "EH2", "N", "T", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N"], "IDENTIFIED": ["AY0", "D", "EH1", "N", "T", "AH0", "F", "AY2", "D"], "IDENTIFIER": ["AY0", "D", "EH1", "N", "T", "AH0", "F", "AY2", "ER0"], "IDENTIFIES": ["AY0", "D", "EH1", "N", "T", "AH0", "F", "AY2", "Z"], "IDENTIFY": ["AY0", "D", "EH1", "N", "T", "AH0", "F", "AY2"], "IDENTIFYING": ["AY0", "D", "EH1", "N", "T", "AH0", "F", "AY2", "IH0", "NG"], "IDENTITY": ["AY0", "D", "EH1", "N", "T", "AH0", "T", "IY2"], "IDLE": ["AY1", "D", "AH0", "L"], "IDOL": ["AY1", "D", "AH0", "L"], "IDS": ["AY1", "D", "IY1", "Z"], "IF": ["IH1", "F"], "IGNORE": ["IH2", "G", "N", "AO1", "R"], "IGNORED": ["IH2", "G", "N", "AO1", "R", "D"], "IL": ["IH1", "L"], "ILL": ["IH1", "L"], "ILLEGAL": ["IH2", "L", "IY1", "G", "AH0", "L"], "ILLINOIS": ["IH2", "L", "AH0", "N", "OY1"], "ILLNESS": ["IH1", "L", "N", "AH0", "S"], "ILLUSTRATED": ["IH1", "L", "AH0", "S", "T", "R", "EY2", "T", "AH0", "D"], "ILLUSTRATION": ["IH2", "L", "AH0", "S", "T", "R", "EY1", "SH", "AH0", "N"], "ILLUSTRATIONS": ["IH2", "L", "AH0", "S", "T", "R", "EY1", "SH", "AH0", "N", "Z"], "IM": ["IH1", "M"], "IMAGE": ["IH1", "M", "AH0", "JH"], "IMAGES": ["IH1", "M", "AH0", "JH", "AH0", "Z"], "IMAGINATION": ["IH2", "M", "AE2", "JH", "AH0", "N", "EY1", "SH", "AH0", "N"], "IMAGINE": ["IH2", "M", "AE1", "JH", "AH0", "N"], "IMAGING": ["IH1", "M", "IH0", "JH", "IH0", "NG"], "IMMEDIATE": ["IH2", "M", "IY1", "D", "IY2", "AH0", "T"], "IMMEDIATELY": ["IH2", "M", "IY1", "D", "IY2", "AH0", "T", "L", "IY0"], "IMMIGRANTS": ["IH1", "M", "AH0", "G", "R", "AH0", "N", "T", "S"], "IMMIGRATION": ["IH2", "M", "AH0", "G", "R", "EY1", "SH", "AH0", "N"], "IMMUNE": ["IH2", "M", "Y", "UW1", "N"], "IMMUNOLOGY": ["IH2", "M", "Y", "UW0", "N", "AA1", "L", "AH0", "JH", "IY0"], "IMPACT": ["IH2", "M", "P", "AE1", "K", "T"], "IMPACTS": ["IH2", "M", "P", "AE1", "K", "T", "S"], "IMPAIRED": ["IH2", "M", "P", "EH1", "R", "D"], "IMPERIAL": ["IH2", "M", "P", "IH1", "R", "IY0", "AH0", "L"], "IMPLEMENT": ["IH1", "M", "P", "L", "AH0", "M", "AH0", "N", "T"], "IMPLEMENTATION": ["IH2", "M", "P", "L", "AH0", "M", "EH0", "N", "T", "EY1", "SH", "AH0", "N"], "IMPLEMENTED": ["IH1", "M", "P", "L", "AH0", "M", "EH2", "N", "T", "AH0", "D"], "IMPLEMENTING": ["IH1", "M", "P", "L", "AH0", "M", "EH2", "N", "T", "IH0", "NG"], "IMPLICATIONS": ["IH2", "M", "P", "L", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "IMPLIED": ["IH2", "M", "P", "L", "AY1", "D"], "IMPLIES": ["IH2", "M", "P", "L", "AY1", "Z"], "IMPORT": ["IH2", "M", "P", "AO1", "R", "T"], "IMPORTANCE": ["IH2", "M", "P", "AO1", "R", "T", "AH0", "N", "S"], "IMPORTANT": ["IH2", "M", "P", "AO1", "R", "T", "AH0", "N", "T"], "IMPORTANTLY": ["IH2", "M", "P", "AO1", "R", "T", "AH0", "N", "T", "L", "IY0"], "IMPORTED": ["IH2", "M", "P", "AO1", "R", "T", "IH0", "D"], "IMPORTS": ["IH2", "M", "P", "AO1", "R", "T", "S"], "IMPOSE": ["IH2", "M", "P", "OW1", "Z"], "IMPOSED": ["IH2", "M", "P", "OW1", "Z", "D"], "IMPOSSIBLE": ["IH2", "M", "P", "AA1", "S", "AH0", "B", "AH0", "L"], "IMPRESSED": ["IH2", "M", "P", "R", "EH1", "S", "T"], "IMPRESSION": ["IH2", "M", "P", "R", "EH1", "SH", "AH0", "N"], "IMPRESSIVE": ["IH2", "M", "P", "R", "EH1", "S", "IH0", "V"], "IMPROVE": ["IH2", "M", "P", "R", "UW1", "V"], "IMPROVED": ["IH2", "M", "P", "R", "UW1", "V", "D"], "IMPROVEMENT": ["IH2", "M", "P", "R", "UW1", "V", "M", "AH0", "N", "T"], "IMPROVEMENTS": ["IH2", "M", "P", "R", "UW1", "V", "M", "AH0", "N", "T", "S"], "IMPROVING": ["IH2", "M", "P", "R", "UW1", "V", "IH0", "NG"], "IN": ["IH0", "N"], "INAPPROPRIATE": ["IH2", "N", "AH0", "P", "R", "OW1", "P", "R", "IY0", "IH0", "T"], "INC": ["IH1", "NG", "K"], "INCENTIVE": ["IH2", "N", "S", "EH1", "N", "T", "IH0", "V"], "INCENTIVES": ["IH2", "N", "S", "EH1", "N", "T", "IH0", "V", "Z"], "INCEST": ["IH1", "N", "S", "EH2", "S", "T"], "INCH": ["IH1", "N", "CH"], "INCHES": ["IH1", "N", "CH", "AH0", "Z"], "INCIDENCE": ["IH1", "N", "S", "AH0", "D", "AH0", "N", "S"], "INCIDENT": ["IH1", "N", "S", "AH0", "D", "AH0", "N", "T"], "INCIDENTS": ["IH1", "N", "S", "AH0", "D", "AH0", "N", "T", "S"], "INCLUDE": ["IH2", "N", "K", "L", "UW1", "D"], "INCLUDED": ["IH2", "N", "K", "L", "UW1", "D", "AH0", "D"], "INCLUDES": ["IH2", "N", "K", "L", "UW1", "D", "Z"], "INCLUDING": ["IH2", "N", "K", "L", "UW1", "D", "IH0", "NG"], "INCLUSION": ["IH2", "N", "K", "L", "UW1", "ZH", "AH0", "N"], "INCLUSIVE": ["IH2", "N", "K", "L", "UW1", "S", "IH0", "V"], "INCOME": ["IH1", "N", "K", "AH2", "M"], "INCOMING": ["IH1", "N", "K", "AH2", "M", "IH0", "NG"], "INCOMPLETE": ["IH2", "N", "K", "AH0", "M", "P", "L", "IY1", "T"], "INCORPORATE": ["IH2", "N", "K", "AO1", "R", "P", "ER0", "EY2", "T"], "INCORPORATED": ["IH2", "N", "K", "AO1", "R", "P", "ER0", "EY2", "T", "IH0", "D"], "INCORRECT": ["IH2", "N", "K", "ER0", "EH1", "K", "T"], "INCREASE": ["IH2", "N", "K", "R", "IY1", "S"], "INCREASED": ["IH2", "N", "K", "R", "IY1", "S", "T"], "INCREASES": ["IH2", "N", "K", "R", "IY1", "S", "IH0", "Z"], "INCREASING": ["IH2", "N", "K", "R", "IY1", "S", "IH0", "NG"], "INCREASINGLY": ["IH2", "N", "K", "R", "IY1", "S", "IH0", "NG", "G", "L", "IY0"], "INCREDIBLE": ["IH2", "N", "K", "R", "EH1", "D", "AH0", "B", "AH0", "L"], "INCURRED": ["IH2", "N", "K", "ER1", "D"], "INDEED": ["IH2", "N", "D", "IY1", "D"], "INDEPENDENCE": ["IH2", "N", "D", "IH0", "P", "EH1", "N", "D", "AH0", "N", "S"], "INDEPENDENT": ["IH2", "N", "D", "IH0", "P", "EH1", "N", "D", "AH0", "N", "T"], "INDEPENDENTLY": ["IH2", "N", "D", "IH0", "P", "EH1", "N", "D", "AH0", "N", "T", "L", "IY0"], "INDEX": ["IH1", "N", "D", "EH0", "K", "S"], "INDEXED": ["IH1", "N", "D", "EH0", "K", "S", "T"], "INDEXES": ["IH1", "N", "D", "EH0", "K", "S", "IH0", "Z"], "INDIA": ["IH1", "N", "D", "IY0", "AH0"], "INDIAN": ["IH1", "N", "D", "IY0", "AH0", "N"], "INDIANA": ["IH2", "N", "D", "IY0", "AE1", "N", "AH0"], "INDIANAPOLIS": ["IH2", "N", "D", "IY0", "AH0", "N", "AE1", "P", "AH0", "L", "IH0", "S"], "INDIANS": ["IH1", "N", "D", "IY0", "AH0", "N", "Z"], "INDICATE": ["IH1", "N", "D", "AH0", "K", "EY2", "T"], "INDICATED": ["IH1", "N", "D", "AH0", "K", "EY2", "T", "AH0", "D"], "INDICATES": ["IH1", "N", "D", "IH0", "K", "EY2", "T", "S"], "INDICATING": ["IH1", "N", "D", "AH0", "K", "EY2", "T", "IH0", "NG"], "INDICATION": ["IH2", "N", "D", "AH0", "K", "EY1", "SH", "AH0", "N"], "INDICATOR": ["IH1", "N", "D", "AH0", "K", "EY2", "T", "ER0"], "INDICATORS": ["IH1", "N", "D", "AH0", "K", "EY2", "T", "ER0", "Z"], "INDICES": ["IH1", "N", "D", "IH0", "S", "IY2", "Z"], "INDIE": ["IH1", "N", "D", "IY0"], "INDIGENOUS": ["IH2", "N", "D", "IH1", "JH", "AH0", "N", "AH0", "S"], "INDIRECT": ["IH2", "N", "D", "ER0", "EH1", "K", "T"], "INDIVIDUAL": ["IH2", "N", "D", "AH0", "V", "IH1", "JH", "AH0", "W", "AH0", "L"], "INDIVIDUALLY": ["IH2", "N", "D", "IH0", "V", "IH1", "JH", "UW0", "AH0", "L", "IY0"], "INDIVIDUALS": ["IH2", "N", "D", "AH0", "V", "IH1", "JH", "AH0", "W", "AH0", "L", "Z"], "INDONESIA": ["IH2", "N", "D", "OW0", "N", "IY1", "ZH", "AH0"], "INDONESIAN": ["IH2", "N", "D", "OW0", "N", "IY1", "ZH", "AH0", "N"], "INDOOR": ["IH1", "N", "D", "AO2", "R"], "INDUCED": ["IH2", "N", "D", "UW1", "S", "T"], "INDUCTION": ["IH2", "N", "D", "AH1", "K", "SH", "AH0", "N"], "INDUSTRIAL": ["IH2", "N", "D", "AH1", "S", "T", "R", "IY0", "AH0", "L"], "INDUSTRIES": ["IH1", "N", "D", "AH0", "S", "T", "R", "IY0", "Z"], "INDUSTRY": ["IH1", "N", "D", "AH0", "S", "T", "R", "IY0"], "INEXPENSIVE": ["IH2", "N", "IH0", "K", "S", "P", "EH1", "N", "S", "IH0", "V"], "INFANT": ["IH1", "N", "F", "AH0", "N", "T"], "INFANTS": ["IH1", "N", "F", "AH0", "N", "T", "S"], "INFECTED": ["IH2", "N", "F", "EH1", "K", "T", "IH0", "D"], "INFECTION": ["IH2", "N", "F", "EH1", "K", "SH", "AH0", "N"], "INFECTIONS": ["IH2", "N", "F", "EH1", "K", "SH", "AH0", "N", "Z"], "INFECTIOUS": ["IH2", "N", "F", "EH1", "K", "SH", "AH0", "S"], "INFINITE": ["IH1", "N", "F", "AH0", "N", "AH0", "T"], "INFLATION": ["IH2", "N", "F", "L", "EY1", "SH", "AH0", "N"], "INFLUENCE": ["IH1", "N", "F", "L", "UW0", "AH0", "N", "S"], "INFLUENCED": ["IH1", "N", "F", "L", "UW0", "AH0", "N", "S", "T"], "INFLUENCES": ["IH1", "N", "F", "L", "UW2", "AH0", "N", "S", "IH0", "Z"], "INFO": ["IH1", "N", "F", "OW0"], "INFORM": ["IH2", "N", "F", "AO1", "R", "M"], "INFORMAL": ["IH2", "N", "F", "AO1", "R", "M", "AH0", "L"], "INFORMATION": ["IH2", "N", "F", "AO2", "R", "M", "EY1", "SH", "AH0", "N"], "INFORMATIONAL": ["IH2", "N", "F", "AO1", "R", "M", "EY2", "SH", "AH0", "N", "AH0", "L"], "INFORMATIVE": ["IH2", "N", "F", "AO1", "R", "M", "AH0", "T", "IH0", "V"], "INFORMED": ["IH2", "N", "F", "AO1", "R", "M", "D"], "INFRARED": ["IH2", "N", "F", "R", "ER0", "EH1", "D"], "INFRASTRUCTURE": ["IH2", "N", "F", "R", "AH0", "S", "T", "R", "AH1", "K", "CH", "ER0"], "ING": ["IH1", "NG"], "INGREDIENTS": ["IH2", "N", "G", "R", "IY1", "D", "IY0", "AH0", "N", "T", "S"], "INHERITED": ["IH2", "N", "HH", "EH1", "R", "AH0", "T", "IH0", "D"], "INITIAL": ["IH2", "N", "IH1", "SH", "AH0", "L"], "INITIALLY": ["IH2", "N", "IH1", "SH", "AH0", "L", "IY0"], "INITIATED": ["IH2", "N", "IH1", "SH", "IY0", "EY2", "T", "AH0", "D"], "INITIATIVE": ["IH2", "N", "IH1", "SH", "AH0", "T", "IH0", "V"], "INITIATIVES": ["IH2", "N", "IH1", "SH", "AH0", "T", "IH0", "V", "Z"], "INJECTION": ["IH2", "N", "JH", "EH1", "K", "SH", "AH0", "N"], "INJURED": ["IH1", "N", "JH", "ER0", "D"], "INJURIES": ["IH1", "N", "JH", "ER0", "IY0", "Z"], "INJURY": ["IH1", "N", "JH", "ER0", "IY0"], "INK": ["IH1", "NG", "K"], "INKJET": ["IH1", "NG", "K", "JH", "EH2", "T"], "INN": ["IH1", "N"], "INNER": ["IH1", "N", "ER0"], "INNOCENT": ["IH1", "N", "AH0", "S", "AH0", "N", "T"], "INNOVATION": ["IH2", "N", "AH0", "V", "EY1", "SH", "AH0", "N"], "INNOVATIONS": ["IH2", "N", "AH0", "V", "EY1", "SH", "AH0", "N", "Z"], "INNOVATIVE": ["IH1", "N", "AH0", "V", "EY2", "T", "IH0", "V"], "INNS": ["IH1", "N", "Z"], "INPUT": ["IH1", "N", "P", "UH2", "T"], "INPUTS": ["IH1", "N", "P", "UH2", "T", "S"], "INQUIRE": ["IH2", "N", "K", "W", "AY1", "R"], "INQUIRIES": ["IH2", "N", "K", "W", "AY1", "ER0", "IY0", "Z"], "INQUIRY": ["IH2", "N", "K", "W", "AY1", "R", "IY2"], "INS": ["IH1", "N", "Z"], "INSECTS": ["IH1", "N", "S", "EH2", "K", "T", "S"], "INSERT": ["IH2", "N", "S", "ER1", "T"], "INSERTED": ["IH2", "N", "S", "ER1", "T", "AH0", "D"], "INSERTION": ["IH2", "N", "S", "ER1", "SH", "AH0", "N"], "INSIDE": ["IH2", "N", "S", "AY1", "D"], "INSIDER": ["IH2", "N", "S", "AY1", "D", "ER0"], "INSIGHT": ["IH1", "N", "S", "AY2", "T"], "INSIGHTS": ["IH1", "N", "S", "AY2", "T", "S"], "INSPECTION": ["IH2", "N", "S", "P", "EH1", "K", "SH", "AH0", "N"], "INSPECTIONS": ["IH2", "N", "S", "P", "EH1", "K", "SH", "AH0", "N", "Z"], "INSPECTOR": ["IH2", "N", "S", "P", "EH1", "K", "T", "ER0"], "INSPIRATION": ["IH2", "N", "S", "P", "ER0", "EY1", "SH", "AH0", "N"], "INSPIRED": ["IH2", "N", "S", "P", "AY1", "ER0", "D"], "INSTALL": ["IH2", "N", "S", "T", "AO1", "L"], "INSTALLATION": ["IH2", "N", "S", "T", "AH0", "L", "EY1", "SH", "AH0", "N"], "INSTALLATIONS": ["IH2", "N", "S", "T", "AH0", "L", "EY1", "SH", "AH0", "N", "Z"], "INSTALLED": ["IH2", "N", "S", "T", "AO1", "L", "D"], "INSTALLING": ["IH2", "N", "S", "T", "AO1", "L", "IH0", "NG"], "INSTANCE": ["IH1", "N", "S", "T", "AH0", "N", "S"], "INSTANCES": ["IH1", "N", "S", "T", "AH0", "N", "S", "AH0", "Z"], "INSTANT": ["IH1", "N", "S", "T", "AH0", "N", "T"], "INSTANTLY": ["IH1", "N", "S", "T", "AH0", "N", "T", "L", "IY0"], "INSTEAD": ["IH2", "N", "S", "T", "EH1", "D"], "INSTITUTE": ["IH1", "N", "S", "T", "IH0", "T", "UW2", "T"], "INSTITUTES": ["IH1", "N", "S", "T", "IH0", "T", "UW2", "T", "S"], "INSTITUTION": ["IH2", "N", "S", "T", "IH0", "T", "UW1", "SH", "AH0", "N"], "INSTITUTIONAL": ["IH2", "N", "S", "T", "IH0", "T", "UW1", "SH", "AH0", "N", "AH0", "L"], "INSTITUTIONS": ["IH2", "N", "S", "T", "IH0", "T", "UW1", "SH", "AH0", "N", "Z"], "INSTRUCTION": ["IH2", "N", "S", "T", "R", "AH1", "K", "SH", "AH0", "N"], "INSTRUCTIONAL": ["IH2", "N", "S", "T", "R", "AH1", "K", "SH", "AH0", "N", "AH0", "L"], "INSTRUCTIONS": ["IH2", "N", "S", "T", "R", "AH1", "K", "SH", "AH0", "N", "Z"], "INSTRUCTOR": ["IH2", "N", "S", "T", "R", "AH1", "K", "T", "ER0"], "INSTRUCTORS": ["IH2", "N", "S", "T", "R", "AH1", "K", "T", "ER0", "Z"], "INSTRUMENT": ["IH1", "N", "S", "T", "R", "AH0", "M", "AH0", "N", "T"], "INSTRUMENTAL": ["IH2", "N", "S", "T", "R", "AH0", "M", "EH1", "N", "T", "AH0", "L"], "INSTRUMENTATION": ["IH2", "N", "S", "T", "R", "AH0", "M", "EH2", "N", "T", "EY1", "SH", "AH0", "N"], "INSTRUMENTS": ["IH1", "N", "S", "T", "R", "AH0", "M", "AH0", "N", "T", "S"], "INSULIN": ["IH1", "N", "S", "AH0", "L", "AH0", "N"], "INSURANCE": ["IH2", "N", "SH", "UH1", "R", "AH0", "N", "S"], "INSURED": ["IH2", "N", "SH", "UH1", "R", "D"], "INTAKE": ["IH1", "N", "T", "EY2", "K"], "INTEGER": ["IH1", "N", "T", "AH0", "JH", "ER0"], "INTEGRAL": ["IH1", "N", "T", "AH0", "G", "R", "AH0", "L"], "INTEGRATE": ["IH1", "N", "T", "AH0", "G", "R", "EY2", "T"], "INTEGRATED": ["IH1", "N", "T", "AH0", "G", "R", "EY2", "T", "AH0", "D"], "INTEGRATING": ["IH1", "N", "T", "AH0", "G", "R", "EY2", "T", "IH0", "NG"], "INTEGRATION": ["IH2", "N", "T", "AH0", "G", "R", "EY1", "SH", "AH0", "N"], "INTEGRITY": ["IH2", "N", "T", "EH1", "G", "R", "AH0", "T", "IY0"], "INTEL": ["IH2", "N", "T", "EH1", "L"], "INTELLECTUAL": ["IH2", "N", "T", "AH0", "L", "EH1", "K", "CH", "UW0", "AH0", "L"], "INTELLIGENCE": ["IH2", "N", "T", "EH1", "L", "AH0", "JH", "AH0", "N", "S"], "INTELLIGENT": ["IH2", "N", "T", "EH1", "L", "AH0", "JH", "AH0", "N", "T"], "INTEND": ["IH2", "N", "T", "EH1", "N", "D"], "INTENDED": ["IH2", "N", "T", "EH1", "N", "D", "IH0", "D"], "INTENSE": ["IH2", "N", "T", "EH1", "N", "S"], "INTENSITY": ["IH2", "N", "T", "EH1", "N", "S", "IH0", "T", "IY0"], "INTENSIVE": ["IH2", "N", "T", "EH1", "N", "S", "IH0", "V"], "INTENT": ["IH2", "N", "T", "EH1", "N", "T"], "INTENTION": ["IH2", "N", "T", "EH1", "N", "CH", "AH0", "N"], "INTER": ["IH2", "N", "T", "ER1"], "INTERACT": ["IH2", "N", "T", "ER0", "AE1", "K", "T"], "INTERACTION": ["IH2", "N", "T", "ER0", "AE1", "K", "SH", "AH0", "N"], "INTERACTIONS": ["IH2", "N", "T", "ER0", "AE1", "K", "SH", "AH0", "N", "Z"], "INTERACTIVE": ["IH2", "N", "T", "ER0", "AE1", "K", "T", "IH0", "V"], "INTEREST": ["IH1", "N", "T", "AH0", "R", "EH2", "S", "T"], "INTERESTED": ["IH1", "N", "T", "AH0", "R", "EH2", "S", "T", "IH0", "D"], "INTERESTING": ["IH1", "N", "T", "AH0", "R", "EH2", "S", "T", "IH0", "NG"], "INTERESTS": ["IH1", "N", "T", "R", "AH0", "S", "T", "S"], "INTERFACE": ["IH1", "N", "T", "ER0", "F", "EY2", "S"], "INTERFACES": ["IH1", "N", "T", "ER0", "F", "EY2", "S", "IH0", "Z"], "INTERFERENCE": ["IH2", "N", "T", "ER0", "F", "IH1", "R", "AH0", "N", "S"], "INTERIM": ["IH1", "N", "T", "ER0", "AH0", "M"], "INTERIOR": ["IH2", "N", "T", "IH1", "R", "IY0", "ER0"], "INTERMEDIATE": ["IH2", "N", "T", "ER0", "M", "IY1", "D", "IY0", "IH0", "T"], "INTERNAL": ["IH2", "N", "T", "ER1", "N", "AH0", "L"], "INTERNATIONAL": ["IH2", "N", "T", "ER0", "N", "AE1", "SH", "AH0", "N", "AA0", "L"], "INTERNATIONALLY": ["IH2", "N", "T", "ER0", "N", "AE1", "SH", "AH0", "N", "AA0", "L", "IY0"], "INTERNET": ["IH1", "N", "T", "ER0", "N", "EH2", "T"], "INTERNSHIP": ["IH1", "N", "T", "ER0", "N", "SH", "IH2", "P"], "INTERPRETATION": ["IH2", "N", "T", "ER2", "P", "R", "IH0", "T", "EY1", "SH", "AH0", "N"], "INTERPRETED": ["IH2", "N", "T", "ER1", "P", "R", "AH0", "T", "AH0", "D"], "INTERRACIAL": ["IH2", "N", "T", "ER0", "R", "EY1", "SH", "AH0", "L"], "INTERSECTION": ["IH2", "N", "T", "ER0", "S", "EH1", "K", "SH", "AH0", "N"], "INTERSTATE": ["IH2", "N", "T", "ER0", "S", "T", "EY1", "T"], "INTERVAL": ["IH1", "N", "T", "ER0", "V", "AH0", "L"], "INTERVALS": ["IH1", "N", "T", "ER0", "V", "AH0", "L", "Z"], "INTERVENTION": ["IH2", "N", "T", "ER0", "V", "EH1", "N", "SH", "AH0", "N"], "INTERVENTIONS": ["IH2", "N", "T", "ER0", "V", "EH1", "N", "SH", "AH0", "N", "Z"], "INTERVIEW": ["IH1", "N", "T", "ER0", "V", "Y", "UW2"], "INTERVIEWS": ["IH1", "N", "T", "ER0", "V", "Y", "UW2", "Z"], "INTIMATE": ["IH1", "N", "T", "AH0", "M", "AH0", "T"], "INTO": ["IH1", "N", "T", "UW0"], "INTRO": ["IH1", "N", "T", "R", "OW0"], "INTRODUCE": ["IH2", "N", "T", "R", "AH0", "D", "UW1", "S"], "INTRODUCED": ["IH2", "N", "T", "R", "AH0", "D", "UW1", "S", "T"], "INTRODUCES": ["IH2", "N", "T", "R", "AH0", "D", "UW1", "S", "IH0", "Z"], "INTRODUCING": ["IH2", "N", "T", "R", "AH0", "D", "UW1", "S", "IH0", "NG"], "INTRODUCTION": ["IH2", "N", "T", "R", "AH0", "D", "AH1", "K", "SH", "AH0", "N"], "INTRODUCTORY": ["IH2", "N", "T", "R", "AH0", "D", "AH1", "K", "T", "ER0", "IY0"], "INVALID": ["IH1", "N", "V", "AH0", "L", "AH0", "D"], "INVASION": ["IH2", "N", "V", "EY1", "ZH", "AH0", "N"], "INVENTION": ["IH2", "N", "V", "EH1", "N", "SH", "AH0", "N"], "INVENTORY": ["IH2", "N", "V", "AH0", "N", "T", "AO1", "R", "IY0"], "INVEST": ["IH2", "N", "V", "EH1", "S", "T"], "INVESTIGATE": ["IH2", "N", "V", "EH1", "S", "T", "AH0", "G", "EY2", "T"], "INVESTIGATED": ["IH2", "N", "V", "EH1", "S", "T", "AH0", "G", "EY2", "T", "AH0", "D"], "INVESTIGATION": ["IH2", "N", "V", "EH2", "S", "T", "AH0", "G", "EY1", "SH", "AH0", "N"], "INVESTIGATIONS": ["IH2", "N", "V", "EH2", "S", "T", "AH0", "G", "EY1", "SH", "AH0", "N", "Z"], "INVESTIGATOR": ["IH2", "N", "V", "EH1", "S", "T", "AH0", "G", "EY2", "T", "ER0"], "INVESTIGATORS": ["IH2", "N", "V", "EH1", "S", "T", "AH0", "G", "EY2", "T", "ER0", "Z"], "INVESTING": ["IH2", "N", "V", "EH1", "S", "T", "IH0", "NG"], "INVESTMENT": ["IH2", "N", "V", "EH1", "S", "T", "M", "AH0", "N", "T"], "INVESTMENTS": ["IH2", "N", "V", "EH1", "S", "T", "M", "AH0", "N", "T", "S"], "INVESTOR": ["IH2", "N", "V", "EH1", "S", "T", "ER0"], "INVESTORS": ["IH2", "N", "V", "EH1", "S", "T", "ER0", "Z"], "INVISIBLE": ["IH2", "N", "V", "IH1", "Z", "AH0", "B", "AH0", "L"], "INVITATION": ["IH2", "N", "V", "IH0", "T", "EY1", "SH", "AH0", "N"], "INVITATIONS": ["IH2", "N", "V", "IH0", "T", "EY1", "SH", "AH0", "N", "Z"], "INVITE": ["IH2", "N", "V", "AY1", "T"], "INVITED": ["IH2", "N", "V", "AY1", "T", "AH0", "D"], "INVOICE": ["IH1", "N", "V", "OY0", "S"], "INVOLVE": ["IH2", "N", "V", "AA1", "L", "V"], "INVOLVED": ["IH2", "N", "V", "AA1", "L", "V", "D"], "INVOLVEMENT": ["IH2", "N", "V", "AA1", "L", "V", "M", "AH0", "N", "T"], "INVOLVES": ["IH2", "N", "V", "AA1", "L", "V", "Z"], "INVOLVING": ["IH2", "N", "V", "AA1", "L", "V", "IH0", "NG"], "IO": ["AY1", "OW0"], "ION": ["AY1", "AA2", "N"], "IOWA": ["AY1", "AH0", "W", "AH0"], "IP": ["AY2", "P", "IY2"], "IPOD": ["AY1", "P", "AO2", "D"], "IRA": ["AY1", "R", "AH0"], "IRAN": ["IH2", "R", "AA1", "N"], "IRAQ": ["IH2", "R", "AA1", "K"], "IRAQI": ["IH2", "R", "AE1", "K", "IY0"], "IRELAND": ["AY1", "ER0", "L", "AH0", "N", "D"], "IRISH": ["AY1", "R", "IH0", "SH"], "IRON": ["AY1", "ER0", "N"], "IRRIGATION": ["IH2", "R", "AH0", "G", "EY1", "SH", "AH0", "N"], "IRS": ["AY1", "AA2", "R", "EH1", "S"], "IS": ["IH1", "Z"], "ISA": ["IY1", "S", "AH0"], "ISAAC": ["AY1", "Z", "AH0", "K"], "ISLAM": ["IH2", "S", "L", "AA1", "M"], "ISLAMIC": ["IH2", "Z", "L", "AA1", "M", "IH0", "K"], "ISLAND": ["AY1", "L", "AH0", "N", "D"], "ISLANDS": ["AY1", "L", "AH0", "N", "D", "Z"], "ISLE": ["AY1", "L"], "ISOLATED": ["AY1", "S", "AH0", "L", "EY2", "T", "AH0", "D"], "ISOLATION": ["AY2", "S", "AH0", "L", "EY1", "SH", "AH0", "N"], "ISRAEL": ["IH1", "Z", "R", "IY0", "AH0", "L"], "ISRAELI": ["IH2", "Z", "R", "EY1", "L", "IY0"], "ISSUE": ["IH1", "SH", "UW0"], "ISSUED": ["IH1", "SH", "UW0", "D"], "ISSUES": ["IH1", "SH", "UW0", "Z"], "ISTANBUL": ["IH2", "S", "T", "AA0", "N", "B", "UW1", "L"], "IT": ["IH1", "T"], "ITALIA": ["IY0", "T", "AE1", "L", "IY0", "AH0"], "ITALIAN": ["IH2", "T", "AE1", "L", "Y", "AH0", "N"], "ITALIANO": ["IH2", "T", "AA0", "L", "IY0", "AA1", "N", "OW0"], "ITALIC": ["AY0", "T", "AE1", "L", "IH0", "K"], "ITALY": ["IH1", "T", "AH0", "L", "IY0"], "ITEM": ["AY1", "T", "AH0", "M"], "ITEMS": ["AY1", "T", "AH0", "M", "Z"], "ITS": ["IH1", "T", "S"], "ITSELF": ["IH2", "T", "S", "EH1", "L", "F"], "ITUNES": ["AY1", "T", "UW2", "N", "Z"], "IVORY": ["AY1", "V", "ER0", "IY0"], "J": ["JH", "EY1"], "JA": ["Y", "AA1"], "JACK": ["JH", "AE1", "K"], "JACKET": ["JH", "AE1", "K", "AH0", "T"], "JACKETS": ["JH", "AE1", "K", "IH0", "T", "S"], "JACKIE": ["JH", "AE1", "K", "IY0"], "JACKSON": ["JH", "AE1", "K", "S", "AH0", "N"], "JACKSONVILLE": ["JH", "AE1", "K", "S", "AH0", "N", "V", "IH2", "L"], "JACOB": ["JH", "EY1", "K", "AH0", "B"], "JADE": ["JH", "EY1", "D"], "JAGUAR": ["JH", "AE1", "G", "W", "AA2", "R"], "JAIL": ["JH", "EY1", "L"], "JAKE": ["JH", "EY1", "K"], "JAM": ["JH", "AE1", "M"], "JAMAICA": ["JH", "AH0", "M", "EY1", "K", "AH0"], "JAMES": ["JH", "EY1", "M", "Z"], "JAMIE": ["JH", "EY1", "M", "IY0"], "JAN": ["JH", "AE1", "N"], "JANE": ["JH", "EY1", "N"], "JANET": ["JH", "AE1", "N", "AH0", "T"], "JANUARY": ["JH", "AE1", "N", "Y", "UW0", "EH2", "R", "IY0"], "JAPAN": ["JH", "AH0", "P", "AE1", "N"], "JAPANESE": ["JH", "AE2", "P", "AH0", "N", "IY1", "Z"], "JAR": ["JH", "AA1", "R"], "JASON": ["JH", "EY1", "S", "AH0", "N"], "JAVA": ["JH", "AA1", "V", "AH0"], "JAVASCRIPT": ["JH", "AA1", "V", "AH0", "S", "K", "R", "IH2", "P", "T"], "JAY": ["JH", "EY1"], "JAZZ": ["JH", "AE1", "Z"], "JE": ["JH", "IY1"], "JEAN": ["JH", "IY1", "N"], "JEANS": ["JH", "IY1", "N", "Z"], "JEEP": ["JH", "IY1", "P"], "JEFF": ["JH", "EH1", "F"], "JEFFERSON": ["JH", "EH1", "F", "ER0", "S", "AH0", "N"], "JEFFREY": ["JH", "EH1", "F", "R", "IY0"], "JENNIFER": ["JH", "EH1", "N", "AH0", "F", "ER0"], "JENNY": ["JH", "EH1", "N", "IY0"], "JEREMY": ["JH", "EH1", "R", "AH0", "M", "IY2"], "JERRY": ["JH", "EH1", "R", "IY0"], "JERSEY": ["JH", "ER1", "Z", "IY0"], "JERUSALEM": ["JH", "ER0", "UW1", "S", "AH0", "L", "AH0", "M"], "JESSE": ["JH", "EH1", "S", "IY0"], "JESSICA": ["JH", "EH1", "S", "IH0", "K", "AH0"], "JESUS": ["JH", "IY1", "Z", "AH0", "S"], "JET": ["JH", "EH1", "T"], "JETS": ["JH", "EH1", "T", "S"], "JEWEL": ["JH", "UW1", "AH0", "L"], "JEWELRY": ["JH", "UW1", "AH0", "L", "R", "IY0"], "JEWISH": ["JH", "UW1", "IH0", "SH"], "JEWS": ["JH", "UW1", "Z"], "JILL": ["JH", "IH1", "L"], "JIM": ["JH", "IH1", "M"], "JIMMY": ["JH", "IH1", "M", "IY0"], "JO": ["JH", "OW1"], "JOAN": ["JH", "OW1", "N"], "JOB": ["JH", "AA1", "B"], "JOBS": ["JH", "AA1", "B", "Z"], "JOE": ["JH", "OW1"], "JOEL": ["JH", "OW1", "AH0", "L"], "JOHN": ["JH", "AA1", "N"], "JOHNNY": ["JH", "AA1", "N", "IY0"], "JOHNS": ["JH", "AA1", "N", "Z"], "JOHNSON": ["JH", "AA1", "N", "S", "AH0", "N"], "JOHNSTON": ["JH", "AA1", "N", "S", "T", "AH0", "N"], "JOIN": ["JH", "OY1", "N"], "JOINED": ["JH", "OY1", "N", "D"], "JOINING": ["JH", "OY1", "N", "IH0", "NG"], "JOINS": ["JH", "OY1", "N", "Z"], "JOINT": ["JH", "OY1", "N", "T"], "JOKE": ["JH", "OW1", "K"], "JOKES": ["JH", "OW1", "K", "S"], "JON": ["JH", "AA1", "N"], "JONATHAN": ["JH", "AA1", "N", "AH0", "TH", "AH0", "N"], "JONES": ["JH", "OW1", "N", "Z"], "JORDAN": ["JH", "AO1", "R", "D", "AH0", "N"], "JOSE": ["HH", "OW2", "Z", "EY1"], "JOSEPH": ["JH", "OW1", "S", "AH0", "F"], "JOSH": ["JH", "AA1", "SH"], "JOSHUA": ["JH", "AA1", "SH", "UW2", "AH0"], "JOURNAL": ["JH", "ER1", "N", "AH0", "L"], "JOURNALISM": ["JH", "ER1", "N", "AH0", "L", "IH2", "Z", "AH0", "M"], "JOURNALIST": ["JH", "ER1", "N", "AH0", "L", "AH0", "S", "T"], "JOURNALISTS": ["JH", "ER1", "N", "AH0", "L", "AH0", "S", "T", "S"], "JOURNALS": ["JH", "ER1", "N", "AH0", "L", "Z"], "JOURNEY": ["JH", "ER1", "N", "IY0"], "JOY": ["JH", "OY1"], "JOYCE": ["JH", "OY1", "S"], "JUAN": ["W", "AA1", "N"], "JUDGE": ["JH", "AH1", "JH"], "JUDGES": ["JH", "AH1", "JH", "IH0", "Z"], "JUDGMENT": ["JH", "AH1", "JH", "M", "AH0", "N", "T"], "JUDICIAL": ["JH", "UW0", "D", "IH1", "SH", "AH0", "L"], "JUDY": ["JH", "UW1", "D", "IY0"], "JUICE": ["JH", "UW1", "S"], "JULIA": ["JH", "UW1", "L", "Y", "AH0"], "JULIAN": ["JH", "UW1", "L", "IY0", "AH0", "N"], "JULIE": ["JH", "UW1", "L", "IY0"], "JULY": ["JH", "UW2", "L", "AY1"], "JUMP": ["JH", "AH1", "M", "P"], "JUMPING": ["JH", "AH1", "M", "P", "IH0", "NG"], "JUN": ["JH", "AH1", "N"], "JUNCTION": ["JH", "AH1", "NG", "K", "SH", "AH0", "N"], "JUNE": ["JH", "UW1", "N"], "JUNGLE": ["JH", "AH1", "NG", "G", "AH0", "L"], "JUNIOR": ["JH", "UW1", "N", "Y", "ER0"], "JUNK": ["JH", "AH1", "NG", "K"], "JURISDICTION": ["JH", "UH2", "R", "AH0", "S", "D", "IH1", "K", "SH", "AH0", "N"], "JURY": ["JH", "UH1", "R", "IY0"], "JUST": ["JH", "AH1", "S", "T"], "JUSTICE": ["JH", "AH1", "S", "T", "AH0", "S"], "JUSTIFY": ["JH", "AH1", "S", "T", "AH0", "F", "AY2"], "JUSTIN": ["JH", "AH1", "S", "T", "AH0", "N"], "JUVENILE": ["JH", "UW1", "V", "AH0", "N", "AH0", "L"], "K": ["K", "EY1"], "KA": ["K", "AA1"], "KAI": ["K", "AY1"], "KANSAS": ["K", "AE1", "N", "Z", "AH0", "S"], "KARAOKE": ["K", "EH2", "R", "IY0", "OW1", "K", "IY0"], "KAREN": ["K", "EH1", "R", "AH0", "N"], "KARL": ["K", "AA1", "R", "L"], "KARMA": ["K", "AA1", "R", "M", "AH0"], "KATE": ["K", "EY1", "T"], "KATHY": ["K", "AE1", "TH", "IY0"], "KATIE": ["K", "EY1", "T", "IY0"], "KATRINA": ["K", "AH0", "T", "R", "IY1", "N", "AH0"], "KAY": ["K", "EY1"], "KAZAKHSTAN": ["K", "AA2", "Z", "AA0", "K", "S", "T", "AA1", "N"], "KEEN": ["K", "IY1", "N"], "KEEP": ["K", "IY1", "P"], "KEEPING": ["K", "IY1", "P", "IH0", "NG"], "KEEPS": ["K", "IY1", "P", "S"], "KEITH": ["K", "IY1", "TH"], "KELLY": ["K", "EH1", "L", "IY0"], "KEN": ["K", "EH1", "N"], "KENNEDY": ["K", "EH1", "N", "AH0", "D", "IY0"], "KENNETH": ["K", "EH1", "N", "IH0", "TH"], "KENNY": ["K", "EH1", "N", "IY2"], "KENO": ["K", "IY1", "N", "OW0"], "KENT": ["K", "EH1", "N", "T"], "KENTUCKY": ["K", "AH0", "N", "T", "AH1", "K", "IY0"], "KENYA": ["K", "EH1", "N", "Y", "AH0"], "KEPT": ["K", "EH1", "P", "T"], "KERNEL": ["K", "ER1", "N", "AH0", "L"], "KERRY": ["K", "EH1", "R", "IY0"], "KEVIN": ["K", "EH1", "V", "IH0", "N"], "KEY": ["K", "IY1"], "KEYBOARD": ["K", "IY1", "B", "AO2", "R", "D"], "KEYBOARDS": ["K", "IY1", "B", "AO2", "R", "D", "Z"], "KEYS": ["K", "IY1", "Z"], "KEYWORD": ["K", "IY1", "W", "ER2", "D"], "KEYWORDS": ["K", "IY1", "W", "ER2", "D", "Z"], "KICK": ["K", "IH1", "K"], "KID": ["K", "IH1", "D"], "KIDNEY": ["K", "IH1", "D", "N", "IY0"], "KIDS": ["K", "IH1", "D", "Z"], "KILL": ["K", "IH1", "L"], "KILLED": ["K", "IH1", "L", "D"], "KILLER": ["K", "IH1", "L", "ER0"], "KILLING": ["K", "IH1", "L", "IH0", "NG"], "KILLS": ["K", "IH1", "L", "Z"], "KILOMETERS": ["K", "AH0", "L", "AA1", "M", "AH2", "T", "ER0", "Z"], "KIM": ["K", "IH1", "M"], "KIND": ["K", "AY1", "N", "D"], "KINDA": ["K", "IH1", "N", "D", "AH0"], "KINDS": ["K", "AY1", "N", "D", "Z"], "KING": ["K", "IH1", "NG"], "KINGDOM": ["K", "IH1", "NG", "D", "AH0", "M"], "KINGS": ["K", "IH1", "NG", "Z"], "KINGSTON": ["K", "IH1", "NG", "S", "T", "AH0", "N"], "KIRK": ["K", "ER1", "K"], "KISS": ["K", "IH1", "S"], "KISSING": ["K", "IH1", "S", "IH0", "NG"], "KIT": ["K", "IH1", "T"], "KITCHEN": ["K", "IH1", "CH", "AH0", "N"], "KITS": ["K", "IH1", "T", "S"], "KITTY": ["K", "IH1", "T", "IY0"], "KLEIN": ["K", "L", "AY1", "N"], "KNEE": ["N", "IY1"], "KNEW": ["N", "UW1"], "KNIFE": ["N", "AY1", "F"], "KNIGHT": ["N", "AY1", "T"], "KNIGHTS": ["N", "AY1", "T", "S"], "KNIT": ["N", "IH1", "T"], "KNITTING": ["N", "IH1", "T", "IH0", "NG"], "KNIVES": ["N", "AY1", "V", "Z"], "KNOCK": ["N", "AA1", "K"], "KNOW": ["N", "OW1"], "KNOWING": ["N", "OW1", "IH0", "NG"], "KNOWLEDGE": ["N", "AA1", "L", "AH0", "JH"], "KNOWN": ["N", "OW1", "N"], "KNOWS": ["N", "OW1", "Z"], "KO": ["K", "OW1"], "KODAK": ["K", "OW1", "D", "AE2", "K"], "KONG": ["K", "AO1", "NG"], "KOREA": ["K", "AO2", "R", "IY1", "AH0"], "KOREAN": ["K", "AO2", "R", "IY1", "AH0", "N"], "KRUGER": ["K", "R", "UW1", "G", "ER0"], "KURT": ["K", "ER1", "T"], "KUWAIT": ["K", "UW0", "W", "EY1", "T"], "KYLE": ["K", "AY1", "L"], "L": ["EH1", "L"], "LA": ["L", "AA1"], "LAB": ["L", "AE1", "B"], "LABEL": ["L", "EY1", "B", "AH0", "L"], "LABELED": ["L", "EY1", "B", "AH0", "L", "D"], "LABELS": ["L", "EY1", "B", "AH0", "L", "Z"], "LABOR": ["L", "EY1", "B", "ER0"], "LABORATORIES": ["L", "AE1", "B", "R", "AH0", "T", "AO2", "R", "IY0", "Z"], "LABORATORY": ["L", "AE1", "B", "R", "AH0", "T", "AO2", "R", "IY0"], "LABOUR": ["L", "EY1", "B", "ER0"], "LABS": ["L", "AE1", "B", "Z"], "LACE": ["L", "EY1", "S"], "LACK": ["L", "AE1", "K"], "LADDER": ["L", "AE1", "D", "ER0"], "LADEN": ["L", "EY1", "D", "AH0", "N"], "LADIES": ["L", "EY1", "D", "IY0", "Z"], "LADY": ["L", "EY1", "D", "IY0"], "LAFAYETTE": ["L", "AA2", "F", "IY0", "EH1", "T"], "LAID": ["L", "EY1", "D"], "LAKE": ["L", "EY1", "K"], "LAKES": ["L", "EY1", "K", "S"], "LAMB": ["L", "AE1", "M"], "LAMBDA": ["L", "AE1", "M", "D", "AH0"], "LAMP": ["L", "AE1", "M", "P"], "LAMPS": ["L", "AE1", "M", "P", "S"], "LAN": ["L", "AE1", "N"], "LANCASTER": ["L", "AE1", "N", "K", "AE2", "S", "T", "ER0"], "LANCE": ["L", "AE1", "N", "S"], "LAND": ["L", "AE1", "N", "D"], "LANDING": ["L", "AE1", "N", "D", "IH0", "NG"], "LANDS": ["L", "AE1", "N", "D", "Z"], "LANDSCAPE": ["L", "AE1", "N", "D", "S", "K", "EY2", "P"], "LANDSCAPES": ["L", "AE1", "N", "D", "S", "K", "EY2", "P", "S"], "LANE": ["L", "EY1", "N"], "LANES": ["L", "EY1", "N", "Z"], "LANG": ["L", "AE1", "NG"], "LANGUAGE": ["L", "AE1", "NG", "G", "W", "AH0", "JH"], "LANGUAGES": ["L", "AE1", "NG", "G", "W", "AH0", "JH", "AH0", "Z"], "LANKA": ["L", "AE1", "NG", "K", "AH0"], "LAP": ["L", "AE1", "P"], "LAPTOP": ["L", "AE1", "P", "T", "AA2", "P"], "LAPTOPS": ["L", "AE1", "P", "T", "AA2", "P", "S"], "LARGE": ["L", "AA1", "R", "JH"], "LARGELY": ["L", "AA1", "R", "JH", "L", "IY0"], "LARGER": ["L", "AA1", "R", "JH", "ER0"], "LARGEST": ["L", "AA1", "R", "JH", "AH0", "S", "T"], "LARRY": ["L", "EH1", "R", "IY0"], "LAS": ["L", "AA1", "S"], "LASER": ["L", "EY1", "Z", "ER0"], "LAST": ["L", "AE1", "S", "T"], "LASTING": ["L", "AE1", "S", "T", "IH0", "NG"], "LAT": ["L", "AA1", "T"], "LATE": ["L", "EY1", "T"], "LATELY": ["L", "EY1", "T", "L", "IY0"], "LATER": ["L", "EY1", "T", "ER0"], "LATEST": ["L", "EY1", "T", "AH0", "S", "T"], "LATEX": ["L", "EY1", "T", "EH2", "K", "S"], "LATIN": ["L", "AE1", "T", "AH0", "N"], "LATINA": ["L", "AA0", "T", "IY1", "N", "AH0"], "LATINO": ["L", "AA0", "T", "IY1", "N", "OW0"], "LATITUDE": ["L", "AE1", "T", "AH0", "T", "UW2", "D"], "LATTER": ["L", "AE1", "T", "ER0"], "LATVIA": ["L", "AE1", "T", "V", "IY0", "AH0"], "LAUDERDALE": ["L", "AO1", "D", "ER0", "D", "EY2", "L"], "LAUGH": ["L", "AE1", "F"], "LAUGHING": ["L", "AE1", "F", "IH0", "NG"], "LAUNCH": ["L", "AO1", "N", "CH"], "LAUNCHED": ["L", "AO1", "N", "CH", "T"], "LAUNCHES": ["L", "AO1", "N", "CH", "AH0", "Z"], "LAUNDRY": ["L", "AO1", "N", "D", "R", "IY0"], "LAURA": ["L", "AO1", "R", "AH0"], "LAUREN": ["L", "AO1", "R", "AH0", "N"], "LAW": ["L", "AO1"], "LAWN": ["L", "AO1", "N"], "LAWRENCE": ["L", "AO1", "R", "AH0", "N", "S"], "LAWS": ["L", "AO1", "Z"], "LAWSUIT": ["L", "AO1", "S", "UW2", "T"], "LAWYER": ["L", "AO1", "Y", "ER0"], "LAWYERS": ["L", "AO1", "Y", "ER0", "Z"], "LAY": ["L", "EY1"], "LAYER": ["L", "EY1", "ER0"], "LAYERS": ["L", "EY1", "ER0", "Z"], "LAYOUT": ["L", "EY1", "AW2", "T"], "LAZY": ["L", "EY1", "Z", "IY0"], "LB": ["P", "AW1", "N", "D"], "LBS": ["P", "AW1", "N", "D", "Z"], "LE": ["L", "AH0"], "LEAD": ["L", "EH1", "D"], "LEADER": ["L", "IY1", "D", "ER0"], "LEADERS": ["L", "IY1", "D", "ER0", "Z"], "LEADERSHIP": ["L", "IY1", "D", "ER0", "SH", "IH2", "P"], "LEADING": ["L", "IY1", "D", "IH0", "NG"], "LEADS": ["L", "IY1", "D", "Z"], "LEAF": ["L", "IY1", "F"], "LEAGUE": ["L", "IY1", "G"], "LEAN": ["L", "IY1", "N"], "LEARN": ["L", "ER1", "N"], "LEARNED": ["L", "ER1", "N", "D"], "LEARNERS": ["L", "ER1", "N", "ER0", "Z"], "LEARNING": ["L", "ER1", "N", "IH0", "NG"], "LEASE": ["L", "IY1", "S"], "LEASING": ["L", "IY1", "S", "IH0", "NG"], "LEAST": ["L", "IY1", "S", "T"], "LEATHER": ["L", "EH1", "DH", "ER0"], "LEAVE": ["L", "IY1", "V"], "LEAVES": ["L", "IY1", "V", "Z"], "LEAVING": ["L", "IY1", "V", "IH0", "NG"], "LEBANON": ["L", "EH1", "B", "AH0", "N", "AH0", "N"], "LECTURE": ["L", "EH1", "K", "CH", "ER0"], "LECTURES": ["L", "EH1", "K", "CH", "ER0", "Z"], "LED": ["L", "EH1", "D"], "LEE": ["L", "IY1"], "LEEDS": ["L", "IY1", "D", "Z"], "LEFT": ["L", "EH1", "F", "T"], "LEG": ["L", "EH1", "G"], "LEGACY": ["L", "EH1", "G", "AH0", "S", "IY0"], "LEGAL": ["L", "IY1", "G", "AH0", "L"], "LEGALLY": ["L", "IY1", "G", "AH0", "L", "IY0"], "LEGEND": ["L", "EH1", "JH", "AH0", "N", "D"], "LEGENDARY": ["L", "EH1", "JH", "AH0", "N", "D", "EH2", "R", "IY0"], "LEGENDS": ["L", "EH1", "JH", "AH0", "N", "D", "Z"], "LEGISLATION": ["L", "EH2", "JH", "AH0", "S", "L", "EY1", "SH", "AH0", "N"], "LEGISLATIVE": ["L", "EH1", "JH", "AH0", "S", "L", "EY2", "T", "IH0", "V"], "LEGISLATURE": ["L", "EH1", "JH", "AH0", "S", "L", "EY2", "CH", "ER0"], "LEGITIMATE": ["L", "AH0", "JH", "IH1", "T", "AH0", "M", "AH0", "T"], "LEGS": ["L", "EH1", "G", "Z"], "LEISURE": ["L", "EH1", "ZH", "ER0"], "LEMON": ["L", "EH1", "M", "AH0", "N"], "LEN": ["L", "EH1", "N"], "LENDER": ["L", "EH1", "N", "D", "ER0"], "LENDERS": ["L", "EH1", "N", "D", "ER0", "Z"], "LENDING": ["L", "EH1", "N", "D", "IH0", "NG"], "LENGTH": ["L", "EH1", "NG", "K", "TH"], "LENS": ["L", "EH1", "N", "Z"], "LENSES": ["L", "EH1", "N", "Z", "AH0", "Z"], "LEO": ["L", "IY1", "OW0"], "LEON": ["L", "IY1", "AA0", "N"], "LEONARD": ["L", "EH1", "N", "ER0", "D"], "LEONE": ["L", "IY0", "OW1", "N"], "LES": ["L", "EH1", "S"], "LESBIAN": ["L", "EH1", "Z", "B", "IY0", "AH0", "N"], "LESBIANS": ["L", "EH1", "Z", "B", "IY0", "AH0", "N", "Z"], "LESLIE": ["L", "EH1", "S", "L", "IY0"], "LESS": ["L", "EH1", "S"], "LESSER": ["L", "EH1", "S", "ER0"], "LESSON": ["L", "EH1", "S", "AH0", "N"], "LESSONS": ["L", "EH1", "S", "AH0", "N", "Z"], "LET": ["L", "EH1", "T"], "LETS": ["L", "EH1", "T", "S"], "LETTER": ["L", "EH1", "T", "ER0"], "LETTERS": ["L", "EH1", "T", "ER0", "Z"], "LETTING": ["L", "EH1", "T", "IH0", "NG"], "LEU": ["L", "UW1"], "LEVEL": ["L", "EH1", "V", "AH0", "L"], "LEVELS": ["L", "EH1", "V", "AH0", "L", "Z"], "LEVY": ["L", "EH1", "V", "IY0"], "LEWIS": ["L", "UW1", "IH0", "S"], "LEXINGTON": ["L", "EH1", "K", "S", "IH0", "NG", "T", "AH0", "N"], "LEXMARK": ["L", "EH1", "K", "S", "M", "AA2", "R", "K"], "LEXUS": ["L", "EH1", "K", "S", "AH0", "S"], "LI": ["L", "IY1"], "LIABILITIES": ["L", "AY2", "AH0", "B", "IH1", "L", "AH0", "T", "IY0", "Z"], "LIABILITY": ["L", "AY2", "AH0", "B", "IH1", "L", "IH0", "T", "IY0"], "LIABLE": ["L", "AY1", "AH0", "B", "AH0", "L"], "LIB": ["L", "IH1", "B"], "LIBERAL": ["L", "IH1", "B", "ER2", "AH0", "L"], "LIBERIA": ["L", "AY2", "B", "IH1", "R", "IY2", "AH0"], "LIBERTY": ["L", "IH1", "B", "ER0", "T", "IY2"], "LIBRARIAN": ["L", "AY0", "B", "R", "EH1", "R", "IY2", "AH0", "N"], "LIBRARIES": ["L", "AY1", "B", "R", "EH0", "R", "IY2", "Z"], "LIBRARY": ["L", "AY1", "B", "R", "EH0", "R", "IY2"], "LICENCE": ["L", "AY1", "S", "AH0", "N", "S"], "LICENSE": ["L", "AY1", "S", "AH0", "N", "S"], "LICENSED": ["L", "AY1", "S", "AH0", "N", "S", "T"], "LICENSES": ["L", "AY1", "S", "AH0", "N", "S", "IH0", "Z"], "LICENSING": ["L", "AY1", "S", "AH0", "N", "S", "IH0", "NG"], "LICKING": ["L", "IH1", "K", "IH0", "NG"], "LID": ["L", "IH1", "D"], "LIE": ["L", "AY1"], "LIECHTENSTEIN": ["L", "IH1", "K", "T", "AH0", "N", "S", "T", "AY2", "N"], "LIES": ["L", "AY1", "Z"], "LIFE": ["L", "AY1", "F"], "LIFESTYLE": ["L", "AY1", "F", "S", "T", "AY2", "L"], "LIFETIME": ["L", "AY1", "F", "T", "AY2", "M"], "LIFT": ["L", "IH1", "F", "T"], "LIGHT": ["L", "AY1", "T"], "LIGHTER": ["L", "AY1", "T", "ER0"], "LIGHTING": ["L", "AY1", "T", "IH0", "NG"], "LIGHTNING": ["L", "AY1", "T", "N", "IH0", "NG"], "LIGHTS": ["L", "AY1", "T", "S"], "LIGHTWEIGHT": ["L", "AY1", "T", "W", "EY1", "T"], "LIKE": ["L", "AY1", "K"], "LIKED": ["L", "AY1", "K", "T"], "LIKELIHOOD": ["L", "AY1", "K", "L", "IY0", "HH", "UH2", "D"], "LIKELY": ["L", "AY1", "K", "L", "IY0"], "LIKES": ["L", "AY1", "K", "S"], "LIKEWISE": ["L", "AY1", "K", "W", "AY2", "Z"], "LIL": ["L", "IH1", "L"], "LIME": ["L", "AY1", "M"], "LIMIT": ["L", "IH1", "M", "AH0", "T"], "LIMITATION": ["L", "IH2", "M", "IH0", "T", "EY1", "SH", "AH0", "N"], "LIMITATIONS": ["L", "IH2", "M", "IH0", "T", "EY1", "SH", "AH0", "N", "Z"], "LIMITED": ["L", "IH1", "M", "AH0", "T", "AH0", "D"], "LIMITING": ["L", "IH1", "M", "AH0", "T", "IH0", "NG"], "LIMITS": ["L", "IH1", "M", "AH0", "T", "S"], "LIMOUSINES": ["L", "IH1", "M", "AH0", "Z", "IY2", "N", "Z"], "LINCOLN": ["L", "IH1", "NG", "K", "AH0", "N"], "LINDA": ["L", "IH1", "N", "D", "AH0"], "LINDSAY": ["L", "IH1", "N", "D", "Z", "IY0"], "LINE": ["L", "AY1", "N"], "LINEAR": ["L", "IH1", "N", "IY0", "ER0"], "LINED": ["L", "AY1", "N", "D"], "LINES": ["L", "AY1", "N", "Z"], "LINGERIE": ["L", "AA1", "N", "ZH", "ER0", "EY2"], "LINK": ["L", "IH1", "NG", "K"], "LINKED": ["L", "IH1", "NG", "K", "T"], "LINKING": ["L", "IH1", "NG", "K", "IH0", "NG"], "LINKS": ["L", "IH1", "NG", "K", "S"], "LINUX": ["L", "IH1", "N", "AH0", "K", "S"], "LION": ["L", "AY1", "AH0", "N"], "LIONS": ["L", "AY1", "AH0", "N", "Z"], "LIP": ["L", "IH1", "P"], "LIPS": ["L", "IH1", "P", "S"], "LIQUID": ["L", "IH1", "K", "W", "AH0", "D"], "LISA": ["L", "IY1", "S", "AH0"], "LIST": ["L", "IH1", "S", "T"], "LISTED": ["L", "IH1", "S", "T", "AH0", "D"], "LISTEN": ["L", "IH1", "S", "AH0", "N"], "LISTENING": ["L", "IH1", "S", "AH0", "N", "IH0", "NG"], "LISTING": ["L", "IH1", "S", "T", "IH0", "NG"], "LISTINGS": ["L", "IH1", "S", "T", "IH0", "NG", "Z"], "LISTS": ["L", "IH1", "S", "T", "S"], "LIT": ["L", "IH1", "T"], "LITE": ["L", "AY1", "T"], "LITERACY": ["L", "IH1", "T", "ER0", "AH0", "S", "IY0"], "LITERALLY": ["L", "IH1", "T", "ER0", "AH0", "L", "IY0"], "LITERARY": ["L", "IH1", "T", "ER0", "EH2", "R", "IY0"], "LITERATURE": ["L", "IH1", "T", "ER0", "AH0", "CH", "ER0"], "LITHUANIA": ["L", "IH2", "TH", "AH0", "W", "EY1", "N", "IY0", "AH0"], "LITIGATION": ["L", "IH2", "T", "AH0", "G", "EY1", "SH", "AH0", "N"], "LITTLE": ["L", "IH1", "T", "AH0", "L"], "LIVE": ["L", "AY1", "V"], "LIVED": ["L", "IH1", "V", "D"], "LIVER": ["L", "IH1", "V", "ER0"], "LIVERPOOL": ["L", "IH1", "V", "ER0", "P", "UW2", "L"], "LIVES": ["L", "IH1", "V", "Z"], "LIVESTOCK": ["L", "AY1", "V", "S", "T", "AA2", "K"], "LIVING": ["L", "IH1", "V", "IH0", "NG"], "LIZ": ["L", "IH1", "Z"], "LLOYD": ["L", "OY1", "D"], "LN": ["L", "EY1", "N"], "LO": ["L", "OW1"], "LOAD": ["L", "OW1", "D"], "LOADED": ["L", "OW1", "D", "AH0", "D"], "LOADING": ["L", "OW1", "D", "IH0", "NG"], "LOADS": ["L", "OW1", "D", "Z"], "LOAN": ["L", "OW1", "N"], "LOANS": ["L", "OW1", "N", "Z"], "LOBBY": ["L", "AA1", "B", "IY0"], "LOCAL": ["L", "OW1", "K", "AH0", "L"], "LOCALE": ["L", "OW0", "K", "AE1", "L"], "LOCALLY": ["L", "OW1", "K", "AH0", "L", "IY0"], "LOCATE": ["L", "OW1", "K", "EY2", "T"], "LOCATED": ["L", "OW1", "K", "EY2", "T", "AH0", "D"], "LOCATION": ["L", "OW0", "K", "EY1", "SH", "AH0", "N"], "LOCATIONS": ["L", "OW0", "K", "EY1", "SH", "AH0", "N", "Z"], "LOCATOR": ["L", "OW1", "K", "EY2", "T", "ER0"], "LOCK": ["L", "AA1", "K"], "LOCKED": ["L", "AA1", "K", "T"], "LOCKING": ["L", "AA1", "K", "IH0", "NG"], "LOCKS": ["L", "AA1", "K", "S"], "LODGE": ["L", "AA1", "JH"], "LODGING": ["L", "AA1", "JH", "IH0", "NG"], "LOG": ["L", "AO1", "G"], "LOGAN": ["L", "OW1", "G", "AH0", "N"], "LOGGED": ["L", "AO1", "G", "D"], "LOGGING": ["L", "AO1", "G", "IH0", "NG"], "LOGIC": ["L", "AA1", "JH", "IH0", "K"], "LOGICAL": ["L", "AA1", "JH", "IH0", "K", "AH0", "L"], "LOGISTICS": ["L", "AH0", "JH", "IH1", "S", "T", "IH0", "K", "S"], "LOGO": ["L", "OW1", "G", "OW0"], "LOGOS": ["L", "OW1", "G", "OW2", "Z"], "LOGS": ["L", "AO1", "G", "Z"], "LOL": ["L", "AO1", "L"], "LOLITA": ["L", "OW0", "L", "IY1", "T", "AH0"], "LONDON": ["L", "AH1", "N", "D", "AH0", "N"], "LONE": ["L", "OW1", "N"], "LONELY": ["L", "OW1", "N", "L", "IY0"], "LONG": ["L", "AO1", "NG"], "LONGER": ["L", "AO1", "NG", "G", "ER0"], "LONGEST": ["L", "AO1", "NG", "G", "AH0", "S", "T"], "LONGITUDE": ["L", "AA1", "N", "JH", "AH0", "T", "UW2", "D"], "LOOK": ["L", "UH1", "K"], "LOOKED": ["L", "UH1", "K", "T"], "LOOKING": ["L", "UH1", "K", "IH0", "NG"], "LOOKS": ["L", "UH1", "K", "S"], "LOOKUP": ["L", "UH1", "K", "AH0", "P"], "LOOP": ["L", "UW1", "P"], "LOOPS": ["L", "UW1", "P", "S"], "LOOSE": ["L", "UW1", "S"], "LOPEZ": ["L", "OW1", "P", "EH0", "Z"], "LORD": ["L", "AO1", "R", "D"], "LOS": ["L", "OW1", "S"], "LOSE": ["L", "UW1", "Z"], "LOSING": ["L", "UW1", "Z", "IH0", "NG"], "LOSS": ["L", "AO1", "S"], "LOSSES": ["L", "AO1", "S", "AH0", "Z"], "LOST": ["L", "AO1", "S", "T"], "LOT": ["L", "AA1", "T"], "LOTS": ["L", "AA1", "T", "S"], "LOTTERY": ["L", "AA1", "T", "ER0", "IY0"], "LOTUS": ["L", "OW1", "T", "AH0", "S"], "LOU": ["L", "UW1"], "LOUD": ["L", "AW1", "D"], "LOUIS": ["L", "UW1", "IH0", "S"], "LOUISE": ["L", "UW0", "IY1", "Z"], "LOUISIANA": ["L", "UW0", "IY2", "Z", "IY0", "AE1", "N", "AH0"], "LOUISVILLE": ["L", "UW1", "IY0", "V", "IH2", "L"], "LOUNGE": ["L", "AW1", "N", "JH"], "LOVE": ["L", "AH1", "V"], "LOVED": ["L", "AH1", "V", "D"], "LOVELY": ["L", "AH1", "V", "L", "IY0"], "LOVER": ["L", "AH1", "V", "ER0"], "LOVERS": ["L", "AH1", "V", "ER0", "Z"], "LOVES": ["L", "AH1", "V", "Z"], "LOVING": ["L", "AH1", "V", "IH0", "NG"], "LOW": ["L", "OW1"], "LOWER": ["L", "OW1", "ER0"], "LOWEST": ["L", "OW1", "AH0", "S", "T"], "LOWS": ["L", "OW1", "Z"], "LP": ["EH1", "L", "P", "IY1"], "LS": ["EH1", "L", "EH1", "S"], "LTD": ["L", "IH1", "M", "IH0", "T", "IH0", "D"], "LU": ["L", "UW1"], "LUCAS": ["L", "UW1", "K", "AH0", "S"], "LUCIA": ["L", "UW1", "SH", "AH0"], "LUCK": ["L", "AH1", "K"], "LUCKY": ["L", "AH1", "K", "IY0"], "LUCY": ["L", "UW1", "S", "IY0"], "LUGGAGE": ["L", "AH1", "G", "AH0", "JH"], "LUIS": ["L", "UW0", "IY1", "S"], "LUKE": ["L", "UW1", "K"], "LUNCH": ["L", "AH1", "N", "CH"], "LUNG": ["L", "AH1", "NG"], "LUTHER": ["L", "UW1", "TH", "ER0"], "LUXEMBOURG": ["L", "AH1", "K", "S", "AH0", "M", "B", "AO2", "R", "G"], "LUXURY": ["L", "AH1", "G", "ZH", "ER0", "IY0"], "LYCOS": ["L", "AY1", "K", "OW0", "S"], "LYING": ["L", "AY1", "IH0", "NG"], "LYNN": ["L", "IH1", "N"], "LYRIC": ["L", "IH1", "R", "IH0", "K"], "LYRICS": ["L", "IH1", "R", "IH0", "K", "S"], "M": ["EH1", "M"], "MA": ["M", "AA1"], "MAC": ["M", "AE1", "K"], "MACEDONIA": ["M", "AE2", "S", "AH0", "D", "OW1", "N", "IY0", "AH0"], "MACHINE": ["M", "AH0", "SH", "IY1", "N"], "MACHINERY": ["M", "AH0", "SH", "IY1", "N", "ER0", "IY0"], "MACHINES": ["M", "AH0", "SH", "IY1", "N", "Z"], "MACINTOSH": ["M", "AE1", "K", "AH0", "N", "T", "AO2", "SH"], "MACRO": ["M", "AE1", "K", "R", "OW0"], "MACROMEDIA": ["M", "AE2", "K", "R", "OW0", "M", "IY1", "D", "IY0", "AH0"], "MAD": ["M", "AE1", "D"], "MADAGASCAR": ["M", "AE2", "D", "AH0", "G", "AE1", "S", "K", "ER0"], "MADE": ["M", "EY1", "D"], "MADISON": ["M", "AE1", "D", "AH0", "S", "AH0", "N"], "MADNESS": ["M", "AE1", "D", "N", "AH0", "S"], "MADONNA": ["M", "AH0", "D", "AA1", "N", "AH0"], "MADRID": ["M", "AH0", "D", "R", "IH1", "D"], "MAE": ["M", "EY1"], "MAG": ["M", "AE1", "G"], "MAGAZINE": ["M", "AE1", "G", "AH0", "Z", "IY2", "N"], "MAGAZINES": ["M", "AE1", "G", "AH0", "Z", "IY2", "N", "Z"], "MAGIC": ["M", "AE1", "JH", "IH0", "K"], "MAGICAL": ["M", "AE1", "JH", "IH0", "K", "AH0", "L"], "MAGNET": ["M", "AE1", "G", "N", "AH0", "T"], "MAGNETIC": ["M", "AE0", "G", "N", "EH1", "T", "IH0", "K"], "MAGNIFICENT": ["M", "AE0", "G", "N", "IH1", "F", "AH0", "S", "AH0", "N", "T"], "MAGNITUDE": ["M", "AE1", "G", "N", "AH0", "T", "UW2", "D"], "MAI": ["M", "AY1"], "MAIDEN": ["M", "EY1", "D", "AH0", "N"], "MAIL": ["M", "EY1", "L"], "MAILED": ["M", "EY1", "L", "D"], "MAILING": ["M", "EY1", "L", "IH0", "NG"], "MAILMAN": ["M", "EY1", "L", "M", "AE2", "N"], "MAILS": ["M", "EY1", "L", "Z"], "MAIN": ["M", "EY1", "N"], "MAINE": ["M", "EY1", "N"], "MAINLAND": ["M", "EY1", "N", "L", "AE2", "N", "D"], "MAINLY": ["M", "EY1", "N", "L", "IY0"], "MAINSTREAM": ["M", "EY1", "N", "S", "T", "R", "IY2", "M"], "MAINTAIN": ["M", "EY0", "N", "T", "EY1", "N"], "MAINTAINED": ["M", "EY0", "N", "T", "EY1", "N", "D"], "MAINTAINING": ["M", "EY0", "N", "T", "EY1", "N", "IH0", "NG"], "MAINTAINS": ["M", "EY0", "N", "T", "EY1", "N", "Z"], "MAINTENANCE": ["M", "EY1", "N", "T", "AH0", "N", "AH0", "N", "S"], "MAJOR": ["M", "EY1", "JH", "ER0"], "MAJORITY": ["M", "AH0", "JH", "AO1", "R", "AH0", "T", "IY0"], "MAKE": ["M", "EY1", "K"], "MAKER": ["M", "EY1", "K", "ER0"], "MAKERS": ["M", "EY1", "K", "ER0", "Z"], "MAKES": ["M", "EY1", "K", "S"], "MAKEUP": ["M", "EY1", "K", "AH2", "P"], "MAKING": ["M", "EY1", "K", "IH0", "NG"], "MALAWI": ["M", "AH0", "L", "AA1", "W", "IY0"], "MALAYSIA": ["M", "AH0", "L", "EY1", "ZH", "AH0"], "MALDIVES": ["M", "AO1", "L", "D", "AY2", "V", "Z"], "MALE": ["M", "EY1", "L"], "MALES": ["M", "EY1", "L", "Z"], "MALI": ["M", "AA1", "L", "IY0"], "MALL": ["M", "AO1", "L"], "MALPRACTICE": ["M", "AE0", "L", "P", "R", "AE1", "K", "T", "AH0", "S"], "MALTA": ["M", "AO1", "L", "T", "AH0"], "MAMBO": ["M", "AA1", "M", "B", "OW0"], "MAN": ["M", "AE1", "N"], "MANAGE": ["M", "AE1", "N", "AH0", "JH"], "MANAGED": ["M", "AE1", "N", "AH0", "JH", "D"], "MANAGEMENT": ["M", "AE1", "N", "AH0", "JH", "M", "AH0", "N", "T"], "MANAGER": ["M", "AE1", "N", "AH0", "JH", "ER0"], "MANAGERS": ["M", "AE1", "N", "AH0", "JH", "ER0", "Z"], "MANAGING": ["M", "AE1", "N", "AH0", "JH", "IH0", "NG"], "MANCHESTER": ["M", "AE1", "N", "CH", "EH2", "S", "T", "ER0"], "MANDATE": ["M", "AE1", "N", "D", "EY2", "T"], "MANDATORY": ["M", "AE1", "N", "D", "AH0", "T", "AO2", "R", "IY0"], "MANGA": ["M", "AE1", "NG", "G", "AH0"], "MANHATTAN": ["M", "AE0", "N", "HH", "AE1", "T", "AH0", "N"], "MANITOBA": ["M", "AE2", "N", "IH0", "T", "OW1", "B", "AH0"], "MANNER": ["M", "AE1", "N", "ER0"], "MANOR": ["M", "AE1", "N", "ER0"], "MANUAL": ["M", "AE1", "N", "Y", "UW0", "AH0", "L"], "MANUALLY": ["M", "AE1", "N", "Y", "UW0", "AH0", "L", "IY0"], "MANUALS": ["M", "AE1", "N", "Y", "UW0", "AH0", "L", "Z"], "MANUFACTURE": ["M", "AE2", "N", "Y", "AH0", "F", "AE1", "K", "CH", "ER0"], "MANUFACTURED": ["M", "AE2", "N", "Y", "AH0", "F", "AE1", "K", "CH", "ER0", "D"], "MANUFACTURER": ["M", "AE2", "N", "Y", "AH0", "F", "AE1", "K", "CH", "ER0", "ER0"], "MANUFACTURERS": ["M", "AE2", "N", "Y", "AH0", "F", "AE1", "K", "CH", "ER0", "ER0", "Z"], "MANUFACTURING": ["M", "AE2", "N", "Y", "AH0", "F", "AE1", "K", "CH", "ER0", "IH0", "NG"], "MANY": ["M", "EH1", "N", "IY0"], "MAP": ["M", "AE1", "P"], "MAPLE": ["M", "EY1", "P", "AH0", "L"], "MAPPING": ["M", "AE1", "P", "IH0", "NG"], "MAPS": ["M", "AE1", "P", "S"], "MAR": ["M", "AA1", "R"], "MARATHON": ["M", "EH1", "R", "AH0", "TH", "AA2", "N"], "MARBLE": ["M", "AA1", "R", "B", "AH0", "L"], "MARC": ["M", "AA1", "R", "K"], "MARCH": ["M", "AA1", "R", "CH"], "MARCO": ["M", "AA1", "R", "K", "OW0"], "MARCUS": ["M", "AA1", "R", "K", "AH0", "S"], "MARDI": ["M", "AA1", "R", "D", "IY0"], "MARGARET": ["M", "AA1", "R", "G", "ER0", "IH0", "T"], "MARGIN": ["M", "AA1", "R", "JH", "AH0", "N"], "MARIA": ["M", "ER0", "IY1", "AH0"], "MARIAH": ["M", "ER0", "AY1", "AH0"], "MARIE": ["M", "ER0", "IY1"], "MARIJUANA": ["M", "EH2", "R", "AH0", "W", "AA1", "N", "AH0"], "MARILYN": ["M", "EH1", "R", "AH0", "L", "AH0", "N"], "MARINA": ["M", "ER0", "IY1", "N", "AH0"], "MARINE": ["M", "ER0", "IY1", "N"], "MARIO": ["M", "AA1", "R", "IY0", "OW0"], "MARION": ["M", "EH1", "R", "IY0", "AH0", "N"], "MARITIME": ["M", "AE1", "R", "AH0", "T", "AY2", "M"], "MARK": ["M", "AA1", "R", "K"], "MARKED": ["M", "AA1", "R", "K", "T"], "MARKER": ["M", "AA1", "R", "K", "ER0"], "MARKERS": ["M", "AA1", "R", "K", "ER0", "Z"], "MARKET": ["M", "AA1", "R", "K", "AH0", "T"], "MARKETING": ["M", "AA1", "R", "K", "AH0", "T", "IH0", "NG"], "MARKETPLACE": ["M", "AA1", "R", "K", "AH0", "T", "P", "L", "EY2", "S"], "MARKETS": ["M", "AA1", "R", "K", "AH0", "T", "S"], "MARKING": ["M", "AA1", "R", "K", "IH0", "NG"], "MARKS": ["M", "AA1", "R", "K", "S"], "MARRIAGE": ["M", "EH1", "R", "IH0", "JH"], "MARRIED": ["M", "EH1", "R", "IY0", "D"], "MARRIOTT": ["M", "EH1", "R", "IY0", "AH0", "T"], "MARS": ["M", "AA1", "R", "Z"], "MARSHALL": ["M", "AA1", "R", "SH", "AH0", "L"], "MART": ["M", "AA1", "R", "T"], "MARTHA": ["M", "AA1", "R", "TH", "AH0"], "MARTIAL": ["M", "AA1", "R", "SH", "AH0", "L"], "MARTIN": ["M", "AA1", "R", "T", "AH0", "N"], "MARVEL": ["M", "AA1", "R", "V", "AH0", "L"], "MARY": ["M", "EH1", "R", "IY0"], "MARYLAND": ["M", "EH1", "R", "AH0", "L", "AH0", "N", "D"], "MAS": ["M", "AA1", "Z"], "MASK": ["M", "AE1", "S", "K"], "MASON": ["M", "EY1", "S", "AH0", "N"], "MASS": ["M", "AE1", "S"], "MASSACHUSETTS": ["M", "AE2", "S", "AH0", "CH", "UW1", "S", "AH0", "T", "S"], "MASSAGE": ["M", "AH0", "S", "AA1", "ZH"], "MASSIVE": ["M", "AE1", "S", "IH0", "V"], "MASTER": ["M", "AE1", "S", "T", "ER0"], "MASTERCARD": ["M", "AE1", "S", "T", "ER0", "K", "AA2", "R", "D"], "MASTERS": ["M", "AE1", "S", "T", "ER0", "Z"], "MASTURBATING": ["M", "AE1", "S", "T", "ER0", "B", "EY2", "T", "IH0", "NG"], "MASTURBATION": ["M", "AE2", "S", "T", "ER0", "B", "EY1", "SH", "AH0", "N"], "MAT": ["M", "AE1", "T"], "MATCH": ["M", "AE1", "CH"], "MATCHED": ["M", "AE1", "CH", "T"], "MATCHES": ["M", "AE1", "CH", "AH0", "Z"], "MATCHING": ["M", "AE1", "CH", "IH0", "NG"], "MATE": ["M", "EY1", "T"], "MATERIAL": ["M", "AH0", "T", "IH1", "R", "IY0", "AH0", "L"], "MATERIALS": ["M", "AH0", "T", "IH1", "R", "IY0", "AH0", "L", "Z"], "MATERNITY": ["M", "AH0", "T", "ER1", "N", "IH0", "T", "IY0"], "MATH": ["M", "AE1", "TH"], "MATHEMATICAL": ["M", "AE2", "TH", "AH0", "M", "AE1", "T", "IH0", "K", "AH0", "L"], "MATHEMATICS": ["M", "AE2", "TH", "AH0", "M", "AE1", "T", "IH0", "K", "S"], "MATING": ["M", "EY1", "T", "IH0", "NG"], "MATRIX": ["M", "EY1", "T", "R", "IH0", "K", "S"], "MATS": ["M", "AE1", "T", "S"], "MATT": ["M", "AE1", "T"], "MATTER": ["M", "AE1", "T", "ER0"], "MATTERS": ["M", "AE1", "T", "ER0", "Z"], "MATTHEW": ["M", "AE1", "TH", "Y", "UW0"], "MATTRESS": ["M", "AE1", "T", "R", "AH0", "S"], "MATURE": ["M", "AH0", "CH", "UH1", "R"], "MAUI": ["M", "AW1", "IY0"], "MAURITIUS": ["M", "AO0", "R", "IH1", "T", "IY0", "AH0", "S"], "MAX": ["M", "AE1", "K", "S"], "MAXIMIZE": ["M", "AE1", "K", "S", "AH0", "M", "AY2", "Z"], "MAXIMUM": ["M", "AE1", "K", "S", "AH0", "M", "AH0", "M"], "MAY": ["M", "EY1"], "MAYBE": ["M", "EY1", "B", "IY0"], "MAYOR": ["M", "EY1", "ER0"], "MAZDA": ["M", "AA1", "Z", "D", "AH0"], "MBA": ["EH1", "M", "B", "IY1", "EY1"], "MC": ["M", "IH0", "K"], "MCDONALD": ["M", "AH0", "K", "D", "AA1", "N", "AH0", "L", "D"], "ME": ["M", "IY1"], "MEAL": ["M", "IY1", "L"], "MEALS": ["M", "IY1", "L", "Z"], "MEAN": ["M", "IY1", "N"], "MEANING": ["M", "IY1", "N", "IH0", "NG"], "MEANINGFUL": ["M", "IY1", "N", "IH0", "NG", "F", "AH0", "L"], "MEANS": ["M", "IY1", "N", "Z"], "MEANT": ["M", "EH1", "N", "T"], "MEANWHILE": ["M", "IY1", "N", "W", "AY2", "L"], "MEASURE": ["M", "EH1", "ZH", "ER0"], "MEASURED": ["M", "EH1", "ZH", "ER0", "D"], "MEASUREMENT": ["M", "EH1", "ZH", "ER0", "M", "AH0", "N", "T"], "MEASUREMENTS": ["M", "EH1", "ZH", "ER0", "M", "AH0", "N", "T", "S"], "MEASURES": ["M", "EH1", "ZH", "ER0", "Z"], "MEASURING": ["M", "EH1", "ZH", "ER0", "IH0", "NG"], "MEAT": ["M", "IY1", "T"], "MECHANICAL": ["M", "AH0", "K", "AE1", "N", "IH0", "K", "AH0", "L"], "MECHANICS": ["M", "AH0", "K", "AE1", "N", "IH0", "K", "S"], "MECHANISM": ["M", "EH1", "K", "AH0", "N", "IH2", "Z", "AH0", "M"], "MECHANISMS": ["M", "EH1", "K", "AH0", "N", "IH2", "Z", "AH0", "M", "Z"], "MED": ["M", "EH1", "D"], "MEDAL": ["M", "EH1", "D", "AH0", "L"], "MEDIA": ["M", "IY1", "D", "IY0", "AH0"], "MEDIAN": ["M", "IY1", "D", "IY0", "AH0", "N"], "MEDICAID": ["M", "EH1", "D", "AH0", "K", "EY2", "D"], "MEDICAL": ["M", "EH1", "D", "AH0", "K", "AH0", "L"], "MEDICARE": ["M", "EH1", "D", "AH0", "K", "EH2", "R"], "MEDICATION": ["M", "EH2", "D", "AH0", "K", "EY1", "SH", "AH0", "N"], "MEDICATIONS": ["M", "EH2", "D", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "MEDICINE": ["M", "EH1", "D", "AH0", "S", "AH0", "N"], "MEDICINES": ["M", "EH1", "D", "AH0", "S", "AH0", "N", "Z"], "MEDIEVAL": ["M", "IH0", "D", "IY1", "V", "AH0", "L"], "MEDITATION": ["M", "EH2", "D", "AH0", "T", "EY1", "SH", "AH0", "N"], "MEDITERRANEAN": ["M", "EH2", "D", "AH0", "T", "ER0", "EY1", "N", "IY0", "AH0", "N"], "MEDIUM": ["M", "IY1", "D", "IY0", "AH0", "M"], "MEET": ["M", "IY1", "T"], "MEETING": ["M", "IY1", "T", "IH0", "NG"], "MEETINGS": ["M", "IY1", "T", "IH0", "NG", "Z"], "MEETS": ["M", "IY1", "T", "S"], "MEGA": ["M", "EH1", "G", "AH0"], "MEL": ["M", "EH1", "L"], "MELBOURNE": ["M", "EH1", "L", "B", "ER0", "N"], "MELISSA": ["M", "AH0", "L", "IH1", "S", "AH0"], "MEMBER": ["M", "EH1", "M", "B", "ER0"], "MEMBERS": ["M", "EH1", "M", "B", "ER0", "Z"], "MEMBERSHIP": ["M", "EH1", "M", "B", "ER0", "SH", "IH2", "P"], "MEMBRANE": ["M", "EH1", "M", "B", "R", "EY2", "N"], "MEMO": ["M", "EH1", "M", "OW2"], "MEMORABILIA": ["M", "EH2", "M", "ER0", "AH0", "B", "IY1", "L", "Y", "AH0"], "MEMORIAL": ["M", "AH0", "M", "AO1", "R", "IY0", "AH0", "L"], "MEMORIES": ["M", "EH1", "M", "ER0", "IY0", "Z"], "MEMORY": ["M", "EH1", "M", "ER0", "IY0"], "MEMPHIS": ["M", "EH1", "M", "F", "AH0", "S"], "MEN": ["M", "EH1", "N"], "MENS": ["M", "EH1", "N", "Z"], "MENTAL": ["M", "EH1", "N", "T", "AH0", "L"], "MENTION": ["M", "EH1", "N", "SH", "AH0", "N"], "MENTIONED": ["M", "EH1", "N", "SH", "AH0", "N", "D"], "MENTOR": ["M", "EH1", "N", "T", "AO2", "R"], "MENU": ["M", "EH1", "N", "Y", "UW0"], "MENUS": ["M", "EH1", "N", "Y", "UW0", "Z"], "MERCEDES": ["M", "ER0", "S", "EY1", "D", "IY0", "Z"], "MERCHANDISE": ["M", "ER1", "CH", "AH0", "N", "D", "AY2", "Z"], "MERCHANT": ["M", "ER1", "CH", "AH0", "N", "T"], "MERCHANTS": ["M", "ER1", "CH", "AH0", "N", "T", "S"], "MERCURY": ["M", "ER1", "K", "Y", "ER0", "IY0"], "MERCY": ["M", "ER1", "S", "IY0"], "MERE": ["M", "IH1", "R"], "MERELY": ["M", "IH1", "R", "L", "IY0"], "MERGE": ["M", "ER1", "JH"], "MERGER": ["M", "ER1", "JH", "ER0"], "MERIT": ["M", "EH1", "R", "AH0", "T"], "MERRY": ["M", "EH1", "R", "IY0"], "MESA": ["M", "EY1", "S", "AH0"], "MESH": ["M", "EH1", "SH"], "MESS": ["M", "EH1", "S"], "MESSAGE": ["M", "EH1", "S", "AH0", "JH"], "MESSAGES": ["M", "EH1", "S", "AH0", "JH", "AH0", "Z"], "MESSAGING": ["M", "EH1", "S", "IH0", "JH", "IH0", "NG"], "MESSENGER": ["M", "EH1", "S", "AH0", "N", "JH", "ER0"], "MET": ["M", "EH1", "T"], "META": ["M", "IY1", "T", "AH0"], "METABOLISM": ["M", "AH0", "T", "AE1", "B", "AH0", "L", "IH2", "Z", "AH0", "M"], "METAL": ["M", "EH1", "T", "AH0", "L"], "METALLIC": ["M", "AH0", "T", "AE1", "L", "IH0", "K"], "METALLICA": ["M", "AH0", "T", "AE1", "L", "IH0", "K", "AH0"], "METALS": ["M", "EH1", "T", "AH0", "L", "Z"], "METER": ["M", "IY1", "T", "ER0"], "METERS": ["M", "IY1", "T", "ER0", "Z"], "METHOD": ["M", "EH1", "TH", "AH0", "D"], "METHODOLOGY": ["M", "EH2", "TH", "AH0", "D", "AA1", "L", "AH0", "JH", "IY0"], "METHODS": ["M", "EH1", "TH", "AH0", "D", "Z"], "METRES": ["M", "IY1", "T", "ER0", "Z"], "METRIC": ["M", "EH1", "T", "R", "IH0", "K"], "METRO": ["M", "EH1", "T", "R", "OW2"], "METROPOLITAN": ["M", "EH2", "T", "R", "AH0", "P", "AA1", "L", "AH0", "T", "AH0", "N"], "MEXICAN": ["M", "EH1", "K", "S", "AH0", "K", "AH0", "N"], "MEXICO": ["M", "EH1", "K", "S", "AH0", "K", "OW2"], "MEYER": ["M", "AY1", "ER0"], "MH": ["EH1", "M", "EY1", "CH"], "MI": ["M", "IY1"], "MIA": ["M", "IY1", "AH0"], "MIAMI": ["M", "AY0", "AE1", "M", "IY0"], "MIC": ["M", "IH1", "K"], "MICE": ["M", "AY1", "S"], "MICHAEL": ["M", "AY1", "K", "AH0", "L"], "MICHEL": ["M", "IH0", "SH", "EH1", "L"], "MICHELLE": ["M", "IH0", "SH", "EH1", "L"], "MICHIGAN": ["M", "IH1", "SH", "IH0", "G", "AH0", "N"], "MICRO": ["M", "AY1", "K", "R", "OW2"], "MICROPHONE": ["M", "AY1", "K", "R", "AH0", "F", "OW2", "N"], "MICROSOFT": ["M", "AY1", "K", "R", "OW2", "S", "AO1", "F", "T"], "MICROWAVE": ["M", "AY1", "K", "R", "AH0", "W", "EY2", "V"], "MID": ["M", "IH1", "D"], "MIDDLE": ["M", "IH1", "D", "AH0", "L"], "MIDI": ["M", "IY1", "D", "IY0"], "MIDLANDS": ["M", "IH1", "D", "L", "AE2", "N", "D", "Z"], "MIDNIGHT": ["M", "IH1", "D", "N", "AY2", "T"], "MIDWEST": ["M", "IH2", "D", "W", "EH1", "S", "T"], "MIGHT": ["M", "AY1", "T"], "MIGHTY": ["M", "AY1", "T", "IY0"], "MIGRATION": ["M", "AY0", "G", "R", "EY1", "SH", "AH0", "N"], "MIKE": ["M", "AY1", "K"], "MIL": ["M", "IH1", "L"], "MILAN": ["M", "AH0", "L", "AA1", "N"], "MILD": ["M", "AY1", "L", "D"], "MILE": ["M", "AY1", "L"], "MILEAGE": ["M", "AY1", "L", "AH0", "JH"], "MILES": ["M", "AY1", "L", "Z"], "MILITARY": ["M", "IH1", "L", "AH0", "T", "EH2", "R", "IY0"], "MILK": ["M", "IH1", "L", "K"], "MILL": ["M", "IH1", "L"], "MILLENNIUM": ["M", "AH0", "L", "EH1", "N", "IY0", "AH0", "M"], "MILLER": ["M", "IH1", "L", "ER0"], "MILLION": ["M", "IH1", "L", "Y", "AH0", "N"], "MILLIONS": ["M", "IH1", "L", "Y", "AH0", "N", "Z"], "MILLS": ["M", "IH1", "L", "Z"], "MILTON": ["M", "IH1", "L", "T", "AH0", "N"], "MILWAUKEE": ["M", "IH0", "L", "W", "AO1", "K", "IY0"], "MIME": ["M", "AY1", "M"], "MIN": ["M", "IH1", "N"], "MIND": ["M", "AY1", "N", "D"], "MINDS": ["M", "AY1", "N", "D", "Z"], "MINE": ["M", "AY1", "N"], "MINERAL": ["M", "IH1", "N", "ER0", "AH0", "L"], "MINERALS": ["M", "IH1", "N", "ER0", "AH0", "L", "Z"], "MINES": ["M", "AY1", "N", "Z"], "MINI": ["M", "IH1", "N", "IY0"], "MINIATURE": ["M", "IH1", "N", "IY0", "AH0", "CH", "UH2", "R"], "MINIMAL": ["M", "IH1", "N", "AH0", "M", "AH0", "L"], "MINIMIZE": ["M", "IH1", "N", "AH0", "M", "AY2", "Z"], "MINIMUM": ["M", "IH1", "N", "AH0", "M", "AH0", "M"], "MINING": ["M", "AY1", "N", "IH0", "NG"], "MINISTER": ["M", "IH1", "N", "AH0", "S", "T", "ER0"], "MINISTERS": ["M", "IH1", "N", "AH0", "S", "T", "ER0", "Z"], "MINISTRIES": ["M", "IH1", "N", "IH0", "S", "T", "R", "IY0", "Z"], "MINISTRY": ["M", "IH1", "N", "AH0", "S", "T", "R", "IY0"], "MINNEAPOLIS": ["M", "IH2", "N", "IY0", "AE1", "P", "AH0", "L", "IH0", "S"], "MINNESOTA": ["M", "IH2", "N", "IH0", "S", "OW1", "T", "AH0"], "MINOLTA": ["M", "IH0", "N", "AA1", "L", "T", "AH2"], "MINOR": ["M", "AY1", "N", "ER0"], "MINORITY": ["M", "AY0", "N", "AO1", "R", "AH0", "T", "IY0"], "MINT": ["M", "IH1", "N", "T"], "MINUS": ["M", "AY1", "N", "AH0", "S"], "MINUTE": ["M", "IH1", "N", "AH0", "T"], "MINUTES": ["M", "IH1", "N", "AH0", "T", "S"], "MIRACLE": ["M", "IH1", "R", "AH0", "K", "AH0", "L"], "MIRROR": ["M", "IH1", "R", "ER0"], "MIRRORS": ["M", "IH1", "R", "ER0", "Z"], "MISCELLANEOUS": ["M", "IH2", "S", "AH0", "L", "EY1", "N", "IY0", "AH0", "S"], "MISS": ["M", "IH1", "S"], "MISSED": ["M", "IH1", "S", "T"], "MISSILE": ["M", "IH1", "S", "AH0", "L"], "MISSING": ["M", "IH1", "S", "IH0", "NG"], "MISSION": ["M", "IH1", "SH", "AH0", "N"], "MISSIONS": ["M", "IH1", "SH", "AH0", "N", "Z"], "MISSISSIPPI": ["M", "IH2", "S", "IH0", "S", "IH1", "P", "IY0"], "MISSOURI": ["M", "AH0", "Z", "UH1", "R", "IY0"], "MISTAKE": ["M", "IH0", "S", "T", "EY1", "K"], "MISTAKES": ["M", "IH0", "S", "T", "EY1", "K", "S"], "MISTRESS": ["M", "IH1", "S", "T", "R", "AH0", "S"], "MIT": ["EH1", "M", "AY1", "T", "IY1"], "MITCHELL": ["M", "IH1", "CH", "AH0", "L"], "MITSUBISHI": ["M", "IH2", "T", "S", "UW2", "B", "IY1", "SH", "IY0"], "MIX": ["M", "IH1", "K", "S"], "MIXED": ["M", "IH1", "K", "S", "T"], "MIXER": ["M", "IH1", "K", "S", "ER0"], "MIXING": ["M", "IH1", "K", "S", "IH0", "NG"], "MIXTURE": ["M", "IH1", "K", "S", "CH", "ER0"], "MO": ["M", "OW1"], "MOBILE": ["M", "OW1", "B", "AH0", "L"], "MOBILES": ["M", "OW1", "B", "AH0", "L", "Z"], "MOBILITY": ["M", "OW0", "B", "IH1", "L", "AH0", "T", "IY0"], "MOD": ["M", "AO1", "D"], "MODE": ["M", "OW1", "D"], "MODEL": ["M", "AA1", "D", "AH0", "L"], "MODELING": ["M", "AA1", "D", "AH0", "L", "IH0", "NG"], "MODELS": ["M", "AA1", "D", "AH0", "L", "Z"], "MODEM": ["M", "OW1", "D", "AH0", "M"], "MODEMS": ["M", "OW1", "D", "AH0", "M", "Z"], "MODERATE": ["M", "AA1", "D", "ER0", "AH0", "T"], "MODERATOR": ["M", "AA1", "D", "ER0", "EY2", "T", "ER0"], "MODERATORS": ["M", "AA1", "D", "ER0", "EY2", "T", "ER0", "Z"], "MODERN": ["M", "AA1", "D", "ER0", "N"], "MODES": ["M", "OW1", "D", "Z"], "MODIFICATION": ["M", "AA2", "D", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N"], "MODIFICATIONS": ["M", "AA2", "D", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "MODIFIED": ["M", "AA1", "D", "AH0", "F", "AY2", "D"], "MODIFY": ["M", "AA1", "D", "AH0", "F", "AY2"], "MODULAR": ["M", "AA1", "JH", "AH0", "L", "ER0"], "MODULE": ["M", "AA1", "JH", "UW0", "L"], "MODULES": ["M", "AA1", "JH", "UW0", "L", "Z"], "MOISTURE": ["M", "OY1", "S", "CH", "ER0"], "MOLD": ["M", "OW1", "L", "D"], "MOLDOVA": ["M", "OW2", "L", "D", "OW1", "V", "AH0"], "MOLECULAR": ["M", "AH0", "L", "EH1", "K", "Y", "AH0", "L", "ER0"], "MOLECULES": ["M", "AA1", "L", "AH0", "K", "Y", "UW2", "L", "Z"], "MOM": ["M", "AA1", "M"], "MOMENT": ["M", "OW1", "M", "AH0", "N", "T"], "MOMENTS": ["M", "OW1", "M", "AH0", "N", "T", "S"], "MOMENTUM": ["M", "OW0", "M", "EH1", "N", "T", "AH0", "M"], "MOMS": ["M", "AA1", "M", "Z"], "MON": ["M", "OW1", "N"], "MONACO": ["M", "AA1", "N", "AH0", "K", "OW2"], "MONDAY": ["M", "AH1", "N", "D", "IY0"], "MONETARY": ["M", "AA1", "N", "AH0", "T", "EH2", "R", "IY0"], "MONEY": ["M", "AH1", "N", "IY0"], "MONGOLIA": ["M", "AA0", "NG", "G", "OW1", "L", "IY0", "AH0"], "MONICA": ["M", "AA1", "N", "IH0", "K", "AH0"], "MONITOR": ["M", "AA1", "N", "AH0", "T", "ER0"], "MONITORED": ["M", "AA1", "N", "AH0", "T", "ER0", "D"], "MONITORING": ["M", "AA1", "N", "AH0", "T", "ER0", "IH0", "NG"], "MONITORS": ["M", "AA1", "N", "AH0", "T", "ER0", "Z"], "MONKEY": ["M", "AH1", "NG", "K", "IY0"], "MONO": ["M", "OW1", "N", "OW0"], "MONROE": ["M", "AH0", "N", "R", "OW1"], "MONSTER": ["M", "AA1", "N", "S", "T", "ER0"], "MONTANA": ["M", "AA0", "N", "T", "AE1", "N", "AH0"], "MONTE": ["M", "AA1", "N", "T", "IY0"], "MONTGOMERY": ["M", "AA0", "N", "T", "G", "AH1", "M", "R", "IY0"], "MONTH": ["M", "AH1", "N", "TH"], "MONTHLY": ["M", "AH1", "N", "TH", "L", "IY0"], "MONTHS": ["M", "AH1", "N", "TH", "S"], "MONTREAL": ["M", "AH2", "N", "T", "R", "IY0", "AO1", "L"], "MOOD": ["M", "UW1", "D"], "MOON": ["M", "UW1", "N"], "MOORE": ["M", "UH1", "R"], "MORAL": ["M", "AO1", "R", "AH0", "L"], "MORE": ["M", "AO1", "R"], "MOREOVER": ["M", "AO0", "R", "OW1", "V", "ER0"], "MORGAN": ["M", "AO1", "R", "G", "AH0", "N"], "MORNING": ["M", "AO1", "R", "N", "IH0", "NG"], "MOROCCO": ["M", "ER0", "AA1", "K", "OW0"], "MORRIS": ["M", "AO1", "R", "AH0", "S"], "MORRISON": ["M", "AO1", "R", "IH0", "S", "AH0", "N"], "MORTALITY": ["M", "AO0", "R", "T", "AE1", "L", "AH0", "T", "IY0"], "MORTGAGE": ["M", "AO1", "R", "G", "AH0", "JH"], "MORTGAGES": ["M", "AO1", "R", "G", "AH0", "JH", "AH0", "Z"], "MOSCOW": ["M", "AA1", "S", "K", "OW2"], "MOSES": ["M", "OW1", "Z", "AH0", "S"], "MOSS": ["M", "AO1", "S"], "MOST": ["M", "OW1", "S", "T"], "MOSTLY": ["M", "OW1", "S", "T", "L", "IY0"], "MOTEL": ["M", "OW0", "T", "EH1", "L"], "MOTELS": ["M", "OW0", "T", "EH1", "L", "Z"], "MOTHER": ["M", "AH1", "DH", "ER0"], "MOTHERS": ["M", "AH1", "DH", "ER0", "Z"], "MOTION": ["M", "OW1", "SH", "AH0", "N"], "MOTIVATED": ["M", "OW1", "T", "AH0", "V", "EY2", "T", "AH0", "D"], "MOTIVATION": ["M", "OW2", "T", "AH0", "V", "EY1", "SH", "AH0", "N"], "MOTOR": ["M", "OW1", "T", "ER0"], "MOTORCYCLE": ["M", "OW1", "T", "ER0", "S", "AY2", "K", "AH0", "L"], "MOTORCYCLES": ["M", "OW1", "T", "ER0", "S", "AY2", "K", "AH0", "L", "Z"], "MOTOROLA": ["M", "OW2", "T", "ER0", "OW1", "L", "AH0"], "MOTORS": ["M", "OW1", "T", "ER0", "Z"], "MOUNT": ["M", "AW1", "N", "T"], "MOUNTAIN": ["M", "AW1", "N", "T", "AH0", "N"], "MOUNTAINS": ["M", "AW1", "N", "T", "AH0", "N", "Z"], "MOUNTED": ["M", "AW1", "N", "T", "AH0", "D"], "MOUNTING": ["M", "AW1", "N", "T", "IH0", "NG"], "MOUNTS": ["M", "AW1", "N", "T", "S"], "MOUSE": ["M", "AW1", "S"], "MOUTH": ["M", "AW1", "TH"], "MOVE": ["M", "UW1", "V"], "MOVED": ["M", "UW1", "V", "D"], "MOVEMENT": ["M", "UW1", "V", "M", "AH0", "N", "T"], "MOVEMENTS": ["M", "UW1", "V", "M", "AH0", "N", "T", "S"], "MOVERS": ["M", "UW1", "V", "ER0", "Z"], "MOVES": ["M", "UW1", "V", "Z"], "MOVIE": ["M", "UW1", "V", "IY0"], "MOVIES": ["M", "UW1", "V", "IY0", "Z"], "MOVING": ["M", "UW1", "V", "IH0", "NG"], "MOZAMBIQUE": ["M", "OW2", "Z", "AE0", "M", "B", "IY1", "K"], "MPEG": ["EH1", "M", "P", "EH2", "G"], "MPG": ["EH1", "M", "P", "IY1", "JH", "IY1"], "MPH": ["EH1", "M", "P", "IY1", "EY1", "CH"], "MR": ["M", "IH1", "S", "T", "ER0"], "MRS": ["M", "IH1", "S", "IH0", "Z"], "MS": ["M", "IH1", "Z"], "MT": ["M", "AW1", "N", "T"], "MTV": ["EH1", "M", "T", "IY1", "V", "IY1"], "MU": ["M", "UW1"], "MUCH": ["M", "AH1", "CH"], "MUD": ["M", "AH1", "D"], "MUG": ["M", "AH1", "G"], "MULTI": ["M", "AH1", "L", "T", "IY0"], "MULTIMEDIA": ["M", "AH2", "L", "T", "IY0", "M", "IY1", "D", "IY0", "AH0"], "MULTIPLE": ["M", "AH1", "L", "T", "AH0", "P", "AH0", "L"], "MUMBAI": ["M", "UH2", "M", "B", "AY1"], "MUNICH": ["M", "Y", "UW1", "N", "IH0", "K"], "MUNICIPAL": ["M", "Y", "UW0", "N", "IH1", "S", "AH0", "P", "AH0", "L"], "MUNICIPALITY": ["M", "Y", "UW2", "N", "IH0", "S", "AH0", "P", "AE1", "L", "AH0", "T", "IY0"], "MURDER": ["M", "ER1", "D", "ER0"], "MURPHY": ["M", "ER1", "F", "IY0"], "MURRAY": ["M", "ER1", "IY0"], "MUSCLE": ["M", "AH1", "S", "AH0", "L"], "MUSCLES": ["M", "AH1", "S", "AH0", "L", "Z"], "MUSEUM": ["M", "Y", "UW0", "Z", "IY1", "AH0", "M"], "MUSEUMS": ["M", "Y", "UW0", "Z", "IY1", "AH0", "M", "Z"], "MUSIC": ["M", "Y", "UW1", "Z", "IH0", "K"], "MUSICAL": ["M", "Y", "UW1", "Z", "IH0", "K", "AH0", "L"], "MUSICIAN": ["M", "Y", "UW0", "Z", "IH1", "SH", "AH0", "N"], "MUSICIANS": ["M", "Y", "UW0", "Z", "IH1", "SH", "AH0", "N", "Z"], "MUSLIM": ["M", "AH1", "Z", "L", "AH0", "M"], "MUSLIMS": ["M", "AH1", "Z", "L", "AH0", "M", "Z"], "MUST": ["M", "AH1", "S", "T"], "MUSTANG": ["M", "AH1", "S", "T", "AE2", "NG"], "MUTUAL": ["M", "Y", "UW1", "CH", "UW0", "AH0", "L"], "MY": ["M", "AY1"], "MYANMAR": ["M", "Y", "AA1", "N", "M", "AA1", "R"], "MYERS": ["M", "AY1", "ER0", "Z"], "MYRTLE": ["M", "ER1", "T", "AH0", "L"], "MYSELF": ["M", "AY2", "S", "EH1", "L", "F"], "MYSPACE": ["M", "AY1", "S", "P", "EY2", "S"], "MYSTERIOUS": ["M", "IH0", "S", "T", "IH1", "R", "IY0", "AH0", "S"], "MYSTERY": ["M", "IH1", "S", "T", "ER0", "IY0"], "MYTH": ["M", "IH1", "TH"], "N": ["EH1", "N"], "NA": ["N", "AA1"], "NAIL": ["N", "EY1", "L"], "NAILS": ["N", "EY1", "L", "Z"], "NAKED": ["N", "EY1", "K", "AH0", "D"], "NAM": ["N", "AE1", "M"], "NAME": ["N", "EY1", "M"], "NAMED": ["N", "EY1", "M", "D"], "NAMELY": ["N", "EY1", "M", "L", "IY0"], "NAMES": ["N", "EY1", "M", "Z"], "NAMIBIA": ["N", "AH0", "M", "IH1", "B", "IY0", "AH0"], "NANCY": ["N", "AE1", "N", "S", "IY0"], "NANO": ["N", "AA1", "N", "OW0"], "NAPLES": ["N", "EY1", "P", "AH0", "L", "Z"], "NARRATIVE": ["N", "AE1", "R", "AH0", "T", "IH0", "V"], "NARROW": ["N", "EH1", "R", "OW0"], "NASA": ["N", "AE1", "S", "AH0"], "NASCAR": ["N", "AE1", "S", "K", "AA2", "R"], "NASDAQ": ["N", "AE1", "Z", "D", "AE0", "K"], "NASHVILLE": ["N", "AE1", "SH", "V", "IH0", "L"], "NASTY": ["N", "AE1", "S", "T", "IY0"], "NAT": ["N", "AE1", "T"], "NATHAN": ["N", "EY1", "TH", "AH0", "N"], "NATION": ["N", "EY1", "SH", "AH0", "N"], "NATIONAL": ["N", "AE1", "SH", "AH0", "N", "AH0", "L"], "NATIONALLY": ["N", "AE1", "SH", "AH0", "N", "AH0", "L", "IY0"], "NATIONS": ["N", "EY1", "SH", "AH0", "N", "Z"], "NATIONWIDE": ["N", "EY1", "SH", "AH0", "N", "W", "AY1", "D"], "NATIVE": ["N", "EY1", "T", "IH0", "V"], "NATO": ["N", "EY1", "T", "OW0"], "NATURAL": ["N", "AE1", "CH", "ER0", "AH0", "L"], "NATURALLY": ["N", "AE1", "CH", "ER0", "AH0", "L", "IY0"], "NATURE": ["N", "EY1", "CH", "ER0"], "NAUGHTY": ["N", "AO1", "T", "IY0"], "NAV": ["N", "AE1", "V"], "NAVAL": ["N", "EY1", "V", "AH0", "L"], "NAVIGATE": ["N", "AE1", "V", "AH0", "G", "EY2", "T"], "NAVIGATION": ["N", "AE1", "V", "AH0", "G", "EY1", "SH", "AH0", "N"], "NAVIGATOR": ["N", "AE1", "V", "AH0", "G", "EY2", "T", "ER0"], "NAVY": ["N", "EY1", "V", "IY0"], "NBA": ["EH1", "N", "B", "IY2", "EY1"], "NBC": ["EH1", "N", "B", "IY2", "S", "IY1"], "NE": ["N", "IY1"], "NEAR": ["N", "IH1", "R"], "NEARBY": ["N", "IH1", "R", "B", "AY1"], "NEAREST": ["N", "IH1", "R", "AH0", "S", "T"], "NEARLY": ["N", "IH1", "R", "L", "IY0"], "NEBRASKA": ["N", "AH0", "B", "R", "AE1", "S", "K", "AH0"], "NEC": ["N", "EH1", "K"], "NECESSARILY": ["N", "EH2", "S", "AH0", "S", "EH1", "R", "AH0", "L", "IY0"], "NECESSARY": ["N", "EH1", "S", "AH0", "S", "EH2", "R", "IY0"], "NECESSITY": ["N", "AH0", "S", "EH1", "S", "AH0", "T", "IY0"], "NECK": ["N", "EH1", "K"], "NECKLACE": ["N", "EH1", "K", "L", "AH0", "S"], "NEED": ["N", "IY1", "D"], "NEEDED": ["N", "IY1", "D", "AH0", "D"], "NEEDLE": ["N", "IY1", "D", "AH0", "L"], "NEEDS": ["N", "IY1", "D", "Z"], "NEGATIVE": ["N", "EH1", "G", "AH0", "T", "IH0", "V"], "NEGOTIATION": ["N", "IH0", "G", "OW2", "SH", "IY0", "EY1", "SH", "AH0", "N"], "NEGOTIATIONS": ["N", "AH0", "G", "OW2", "SH", "IY0", "EY1", "SH", "AH0", "N", "Z"], "NEIGHBOR": ["N", "EY1", "B", "ER0"], "NEIGHBORHOOD": ["N", "EY1", "B", "ER0", "HH", "UH2", "D"], "NEIGHBORS": ["N", "EY1", "B", "ER0", "Z"], "NEIL": ["N", "IY1", "L"], "NEITHER": ["N", "IY1", "DH", "ER0"], "NELSON": ["N", "EH1", "L", "S", "AH0", "N"], "NEO": ["N", "IY1", "OW0"], "NEON": ["N", "IY1", "AA0", "N"], "NEPAL": ["N", "AH0", "P", "AO1", "L"], "NERVE": ["N", "ER1", "V"], "NERVOUS": ["N", "ER1", "V", "AH0", "S"], "NEST": ["N", "EH1", "S", "T"], "NESTED": ["N", "EH1", "S", "T", "AH0", "D"], "NET": ["N", "EH1", "T"], "NETHERLANDS": ["N", "EH1", "DH", "ER0", "L", "AH0", "N", "D", "Z"], "NETSCAPE": ["N", "EH1", "T", "S", "K", "EY2", "P"], "NETWORK": ["N", "EH1", "T", "W", "ER2", "K"], "NETWORKING": ["N", "EH1", "T", "W", "ER2", "K", "IH0", "NG"], "NETWORKS": ["N", "EH1", "T", "W", "ER2", "K", "S"], "NEURAL": ["N", "UH1", "R", "AH0", "L"], "NEUTRAL": ["N", "UW1", "T", "R", "AH0", "L"], "NEVADA": ["N", "AH0", "V", "AA1", "D", "AH0"], "NEVER": ["N", "EH1", "V", "ER0"], "NEVERTHELESS": ["N", "EH2", "V", "ER0", "DH", "AH0", "L", "EH1", "S"], "NEW": ["N", "UW1"], "NEWARK": ["N", "UW1", "ER0", "K"], "NEWBIE": ["N", "UW1", "B", "IY2"], "NEWCASTLE": ["N", "UW1", "K", "AE2", "S", "AH0", "L"], "NEWER": ["N", "UW1", "ER0"], "NEWEST": ["N", "UW1", "AH0", "S", "T"], "NEWFOUNDLAND": ["N", "UW1", "F", "AH0", "N", "D", "L", "AH0", "N", "D"], "NEWLY": ["N", "UW1", "L", "IY0"], "NEWPORT": ["N", "UW1", "P", "AO0", "R", "T"], "NEWS": ["N", "UW1", "Z"], "NEWSLETTER": ["N", "UW1", "Z", "L", "EH2", "T", "ER0"], "NEWSLETTERS": ["N", "UW1", "Z", "L", "EH2", "T", "ER0", "Z"], "NEWSPAPER": ["N", "UW1", "Z", "P", "EY2", "P", "ER0"], "NEWSPAPERS": ["N", "UW1", "Z", "P", "EY2", "P", "ER0", "Z"], "NEWTON": ["N", "UW1", "T", "AH0", "N"], "NEXT": ["N", "EH1", "K", "S", "T"], "NEXTEL": ["N", "EH1", "K", "S", "T", "EH2", "L"], "NFL": ["EH1", "N", "EH2", "F", "EH1", "L"], "NG": ["EH1", "NG"], "NI": ["N", "IY1"], "NIAGARA": ["N", "AY0", "AE1", "G", "R", "AH0"], "NICARAGUA": ["N", "IH2", "K", "ER0", "AA1", "G", "W", "AH0"], "NICE": ["N", "AY1", "S"], "NICHOLAS": ["N", "IH1", "K", "AH0", "L", "AH0", "S"], "NICK": ["N", "IH1", "K"], "NICKEL": ["N", "IH1", "K", "AH0", "L"], "NICKNAME": ["N", "IH1", "K", "N", "EY2", "M"], "NICOLE": ["N", "IH0", "K", "OW1", "L"], "NIGER": ["N", "AY1", "JH", "ER0"], "NIGERIA": ["N", "AY0", "JH", "IH1", "R", "IY0", "AH0"], "NIGHT": ["N", "AY1", "T"], "NIGHTLIFE": ["N", "AY1", "T", "L", "AY2", "F"], "NIGHTMARE": ["N", "AY1", "T", "M", "EH2", "R"], "NIGHTS": ["N", "AY1", "T", "S"], "NIKE": ["N", "AY1", "K", "IY0"], "NIKON": ["N", "AY1", "K", "AA2", "N"], "NIL": ["N", "IH1", "L"], "NINE": ["N", "AY1", "N"], "NINTENDO": ["N", "IH0", "N", "T", "EH1", "N", "D", "OW0"], "NIPPLE": ["N", "IH1", "P", "AH0", "L"], "NIPPLES": ["N", "IH1", "P", "AH0", "L", "Z"], "NIRVANA": ["N", "IH0", "R", "V", "AA1", "N", "AH0"], "NISSAN": ["N", "IY1", "S", "AA0", "N"], "NITROGEN": ["N", "AY1", "T", "R", "AH0", "JH", "AH0", "N"], "NO": ["N", "OW1"], "NOBLE": ["N", "OW1", "B", "AH0", "L"], "NOBODY": ["N", "OW1", "B", "AA2", "D", "IY2"], "NODE": ["N", "OW1", "D"], "NODES": ["N", "OW1", "D", "Z"], "NOISE": ["N", "OY1", "Z"], "NOKIA": ["N", "OW1", "K", "IY0", "AH0"], "NOMINATED": ["N", "AA1", "M", "AH0", "N", "EY2", "T", "AH0", "D"], "NOMINATION": ["N", "AA2", "M", "AH0", "N", "EY1", "SH", "AH0", "N"], "NOMINATIONS": ["N", "AA2", "M", "AH0", "N", "EY1", "SH", "AH0", "N", "Z"], "NON": ["N", "AA1", "N"], "NONE": ["N", "AH1", "N"], "NONPROFIT": ["N", "AA0", "N", "P", "R", "AA1", "F", "AH0", "T"], "NOON": ["N", "UW1", "N"], "NOR": ["N", "AO1", "R"], "NORFOLK": ["N", "AO1", "R", "F", "AH0", "K"], "NORM": ["N", "AO1", "R", "M"], "NORMAL": ["N", "AO1", "R", "M", "AH0", "L"], "NORMALLY": ["N", "AO1", "R", "M", "AH0", "L", "IY0"], "NORMAN": ["N", "AO1", "R", "M", "AH0", "N"], "NORTH": ["N", "AO1", "R", "TH"], "NORTHEAST": ["N", "AO2", "R", "TH", "IY1", "S", "T"], "NORTHERN": ["N", "AO1", "R", "DH", "ER0", "N"], "NORTHWEST": ["N", "AO2", "R", "TH", "W", "EH1", "S", "T"], "NORTON": ["N", "AO1", "R", "T", "AH0", "N"], "NORWAY": ["N", "AO1", "R", "W", "EY2"], "NORWEGIAN": ["N", "AO2", "R", "W", "IY1", "JH", "AH0", "N"], "NOSE": ["N", "OW1", "Z"], "NOT": ["N", "AA1", "T"], "NOTE": ["N", "OW1", "T"], "NOTEBOOK": ["N", "OW1", "T", "B", "UH2", "K"], "NOTEBOOKS": ["N", "OW1", "T", "B", "UH2", "K", "S"], "NOTED": ["N", "OW1", "T", "AH0", "D"], "NOTES": ["N", "OW1", "T", "S"], "NOTHING": ["N", "AH1", "TH", "IH0", "NG"], "NOTICE": ["N", "OW1", "T", "AH0", "S"], "NOTICED": ["N", "OW1", "T", "IH0", "S", "T"], "NOTICES": ["N", "OW1", "T", "IH0", "S", "IH0", "Z"], "NOTIFICATION": ["N", "OW2", "T", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N"], "NOTIFICATIONS": ["N", "OW2", "T", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "NOTIFIED": ["N", "OW1", "T", "AH0", "F", "AY2", "D"], "NOTIFY": ["N", "OW1", "T", "AH0", "F", "AY2"], "NOTION": ["N", "OW1", "SH", "AH0", "N"], "NOTRE": ["N", "OW1", "T", "R", "AH0"], "NOTTINGHAM": ["N", "AA1", "T", "IH0", "NG", "HH", "AE2", "M"], "NOV": ["N", "OW1", "V"], "NOVA": ["N", "OW1", "V", "AH0"], "NOVEL": ["N", "AA1", "V", "AH0", "L"], "NOVELS": ["N", "AA1", "V", "AH0", "L", "Z"], "NOVELTY": ["N", "AA1", "V", "AH0", "L", "T", "IY0"], "NOVEMBER": ["N", "OW0", "V", "EH1", "M", "B", "ER0"], "NOW": ["N", "AW1"], "NOWHERE": ["N", "OW1", "W", "EH2", "R"], "NU": ["N", "UW1"], "NUCLEAR": ["N", "UW1", "K", "L", "IY0", "ER0"], "NUDE": ["N", "UW1", "D"], "NUDIST": ["N", "UW1", "D", "IH0", "S", "T"], "NUDITY": ["N", "UW1", "D", "IH0", "T", "IY0"], "NUKE": ["N", "UW1", "K"], "NULL": ["N", "AH1", "L"], "NUMBER": ["N", "AH1", "M", "B", "ER0"], "NUMBERS": ["N", "AH1", "M", "B", "ER0", "Z"], "NUMERIC": ["N", "UW0", "M", "EH1", "R", "IH0", "K"], "NUMERICAL": ["N", "UW0", "M", "EH1", "R", "AH0", "K", "AH0", "L"], "NUMEROUS": ["N", "UW1", "M", "ER0", "AH0", "S"], "NURSE": ["N", "ER1", "S"], "NURSERY": ["N", "ER1", "S", "ER0", "IY0"], "NURSES": ["N", "ER1", "S", "AH0", "Z"], "NURSING": ["N", "ER1", "S", "IH0", "NG"], "NUT": ["N", "AH1", "T"], "NUTRITION": ["N", "UW0", "T", "R", "IH1", "SH", "AH0", "N"], "NUTRITIONAL": ["N", "UW0", "T", "R", "IH1", "SH", "AH0", "N", "AH0", "L"], "NUTS": ["N", "AH1", "T", "S"], "NYLON": ["N", "AY1", "L", "AA2", "N"], "O": ["OW1"], "OAK": ["OW1", "K"], "OAKLAND": ["OW1", "K", "L", "AH0", "N", "D"], "OAKS": ["OW1", "K", "S"], "OASIS": ["OW0", "EY1", "S", "IH0", "S"], "OBESITY": ["OW0", "B", "IY1", "S", "AH0", "T", "IY0"], "OBITUARIES": ["OW0", "B", "IH1", "CH", "UW0", "EH2", "R", "IY0", "Z"], "OBJECT": ["AA1", "B", "JH", "EH0", "K", "T"], "OBJECTIVE": ["AH0", "B", "JH", "EH1", "K", "T", "IH0", "V"], "OBJECTIVES": ["AH0", "B", "JH", "EH1", "K", "T", "IH0", "V", "Z"], "OBJECTS": ["AA1", "B", "JH", "EH0", "K", "T", "S"], "OBLIGATION": ["AA2", "B", "L", "AH0", "G", "EY1", "SH", "AH0", "N"], "OBLIGATIONS": ["AA2", "B", "L", "AH0", "G", "EY1", "SH", "AH0", "N", "Z"], "OBSERVATION": ["AA2", "B", "Z", "ER0", "V", "EY1", "SH", "AH0", "N"], "OBSERVATIONS": ["AA2", "B", "Z", "ER0", "V", "EY1", "SH", "AH0", "N", "Z"], "OBSERVE": ["AH0", "B", "Z", "ER1", "V"], "OBSERVED": ["AH0", "B", "Z", "ER1", "V", "D"], "OBSERVER": ["AH0", "B", "Z", "ER1", "V", "ER0"], "OBTAIN": ["AH0", "B", "T", "EY1", "N"], "OBTAINED": ["AH0", "B", "T", "EY1", "N", "D"], "OBTAINING": ["AH0", "B", "T", "EY1", "N", "IH0", "NG"], "OBVIOUS": ["AA1", "B", "V", "IY0", "AH0", "S"], "OBVIOUSLY": ["AA1", "B", "V", "IY0", "AH0", "S", "L", "IY0"], "OCCASION": ["AH0", "K", "EY1", "ZH", "AH0", "N"], "OCCASIONAL": ["AO0", "K", "EY1", "ZH", "AH0", "N", "AH0", "L"], "OCCASIONALLY": ["AO0", "K", "EY1", "ZH", "AH0", "N", "AH0", "L", "IY2"], "OCCASIONS": ["AO0", "K", "EY1", "ZH", "AH0", "N", "Z"], "OCCUPATION": ["AA2", "K", "Y", "AH0", "P", "EY1", "SH", "AH0", "N"], "OCCUPATIONAL": ["AA0", "K", "Y", "AH0", "P", "EY1", "SH", "AH0", "N", "AH0", "L"], "OCCUPATIONS": ["AA2", "K", "Y", "AH0", "P", "EY1", "SH", "AH0", "N", "Z"], "OCCUPIED": ["AA1", "K", "Y", "AH0", "P", "AY2", "D"], "OCCUR": ["AH0", "K", "ER1"], "OCCURRED": ["AH0", "K", "ER1", "D"], "OCCURRENCE": ["AH0", "K", "ER1", "AH0", "N", "S"], "OCCURRING": ["AH0", "K", "ER1", "IH0", "NG"], "OCCURS": ["AH0", "K", "ER1", "Z"], "OCEAN": ["OW1", "SH", "AH0", "N"], "OCT": ["AO1", "K", "T"], "OCTOBER": ["AA0", "K", "T", "OW1", "B", "ER0"], "ODD": ["AA1", "D"], "ODDS": ["AA1", "D", "Z"], "OF": ["AH1", "V"], "OFF": ["AO1", "F"], "OFFENSE": ["AH0", "F", "EH1", "N", "S"], "OFFENSIVE": ["AH0", "F", "EH1", "N", "S", "IH0", "V"], "OFFER": ["AO1", "F", "ER0"], "OFFERED": ["AO1", "F", "ER0", "D"], "OFFERING": ["AO1", "F", "ER0", "IH0", "NG"], "OFFERINGS": ["AO1", "F", "ER0", "IH0", "NG", "Z"], "OFFERS": ["AO1", "F", "ER0", "Z"], "OFFICE": ["AO1", "F", "AH0", "S"], "OFFICER": ["AO1", "F", "AH0", "S", "ER0"], "OFFICERS": ["AO1", "F", "AH0", "S", "ER0", "Z"], "OFFICES": ["AO1", "F", "AH0", "S", "AH0", "Z"], "OFFICIAL": ["AH0", "F", "IH1", "SH", "AH0", "L"], "OFFICIALLY": ["AH0", "F", "IH1", "SH", "AH0", "L", "IY0"], "OFFICIALS": ["AH0", "F", "IH1", "SH", "AH0", "L", "Z"], "OFFLINE": ["AO1", "F", "L", "AY2", "N"], "OFFSET": ["AO0", "F", "S", "EH1", "T"], "OFFSHORE": ["AO1", "F", "SH", "AO1", "R"], "OFTEN": ["AO1", "F", "T", "AH0", "N"], "OG": ["AA1", "G"], "OH": ["OW1"], "OHIO": ["OW0", "HH", "AY1", "OW0"], "OIL": ["OY1", "L"], "OILS": ["OY1", "L", "Z"], "OK": ["OW1", "K", "EY1"], "OKAY": ["OW2", "K", "EY1"], "OKLAHOMA": ["OW2", "K", "L", "AH0", "HH", "OW1", "M", "AH0"], "OLD": ["OW1", "L", "D"], "OLDER": ["OW1", "L", "D", "ER0"], "OLDEST": ["OW1", "L", "D", "AH0", "S", "T"], "OLIVE": ["AA1", "L", "AH0", "V"], "OLIVER": ["AA1", "L", "AH0", "V", "ER0"], "OLYMPIC": ["OW0", "L", "IH1", "M", "P", "IH0", "K"], "OLYMPICS": ["OW0", "L", "IH1", "M", "P", "IH0", "K", "S"], "OLYMPUS": ["OW0", "L", "IH1", "M", "P", "AH0", "S"], "OMAHA": ["OW1", "M", "AH0", "HH", "AA2"], "OMAN": ["OW0", "M", "AA1", "N"], "OMEGA": ["OW0", "M", "EH1", "G", "AH0"], "OMISSIONS": ["OW0", "M", "IH1", "SH", "AH0", "N", "Z"], "ON": ["AA1", "N"], "ONCE": ["W", "AH1", "N", "S"], "ONE": ["W", "AH1", "N"], "ONES": ["W", "AH1", "N", "Z"], "ONGOING": ["AA1", "N", "G", "OW2", "IH0", "NG"], "ONION": ["AH1", "N", "Y", "AH0", "N"], "ONLINE": ["AO1", "N", "L", "AY2", "N"], "ONLY": ["OW1", "N", "L", "IY0"], "ONS": ["AA1", "N", "Z"], "ONTARIO": ["AA0", "N", "T", "EH1", "R", "IY0", "OW0"], "ONTO": ["AA1", "N", "T", "UW0"], "OOPS": ["UW1", "P", "S"], "OP": ["AA1", "P"], "OPEN": ["OW1", "P", "AH0", "N"], "OPENED": ["OW1", "P", "AH0", "N", "D"], "OPENING": ["OW1", "P", "AH0", "N", "IH0", "NG"], "OPENINGS": ["OW1", "P", "AH0", "N", "IH0", "NG", "Z"], "OPENS": ["OW1", "P", "AH0", "N", "Z"], "OPERA": ["AA1", "P", "R", "AH0"], "OPERATE": ["AA1", "P", "ER0", "EY2", "T"], "OPERATED": ["AA1", "P", "ER0", "EY2", "T", "AH0", "D"], "OPERATES": ["AA1", "P", "ER0", "EY2", "T", "S"], "OPERATING": ["AA1", "P", "ER0", "EY2", "T", "IH0", "NG"], "OPERATION": ["AA2", "P", "ER0", "EY1", "SH", "AH0", "N"], "OPERATIONAL": ["AA2", "P", "ER0", "EY1", "SH", "AH0", "N", "AH0", "L"], "OPERATIONS": ["AA2", "P", "ER0", "EY1", "SH", "AH0", "N", "Z"], "OPERATOR": ["AA1", "P", "ER0", "EY2", "T", "ER0"], "OPERATORS": ["AA1", "P", "ER0", "EY2", "T", "ER0", "Z"], "OPINION": ["AH0", "P", "IH1", "N", "Y", "AH0", "N"], "OPINIONS": ["AH0", "P", "IH1", "N", "Y", "AH0", "N", "Z"], "OPPONENT": ["AH0", "P", "OW1", "N", "AH0", "N", "T"], "OPPONENTS": ["AH0", "P", "OW1", "N", "AH0", "N", "T", "S"], "OPPORTUNITIES": ["AA2", "P", "ER0", "T", "UW1", "N", "AH0", "T", "IY0", "Z"], "OPPORTUNITY": ["AA2", "P", "ER0", "T", "UW1", "N", "AH0", "T", "IY0"], "OPPOSED": ["AH0", "P", "OW1", "Z", "D"], "OPPOSITE": ["AA1", "P", "AH0", "Z", "IH0", "T"], "OPPOSITION": ["AA2", "P", "AH0", "Z", "IH1", "SH", "AH0", "N"], "OPT": ["AA1", "P", "T"], "OPTICAL": ["AA1", "P", "T", "IH0", "K", "AH0", "L"], "OPTICS": ["AA1", "P", "T", "IH0", "K", "S"], "OPTIMAL": ["AA1", "P", "T", "IH0", "M", "AH0", "L"], "OPTIMIZATION": ["AA0", "P", "T", "IH0", "M", "IH0", "Z", "EY1", "SH", "AH0", "N"], "OPTIMIZE": ["AA1", "P", "T", "IH0", "M", "AY2", "Z"], "OPTIMUM": ["AA1", "P", "T", "IH0", "M", "AH0", "M"], "OPTION": ["AA1", "P", "SH", "AH0", "N"], "OPTIONAL": ["AA1", "P", "SH", "AH0", "N", "AH0", "L"], "OPTIONS": ["AA1", "P", "SH", "AH0", "N", "Z"], "OR": ["AO1", "R"], "ORACLE": ["AO1", "R", "AH0", "K", "AH0", "L"], "ORAL": ["AO1", "R", "AH0", "L"], "ORANGE": ["AO1", "R", "AH0", "N", "JH"], "ORBIT": ["AO1", "R", "B", "AH0", "T"], "ORCHESTRA": ["AO1", "R", "K", "AH0", "S", "T", "R", "AH0"], "ORDER": ["AO1", "R", "D", "ER0"], "ORDERED": ["AO1", "R", "D", "ER0", "D"], "ORDERING": ["AO1", "R", "D", "ER0", "IH0", "NG"], "ORDERS": ["AO1", "R", "D", "ER0", "Z"], "ORDINANCE": ["AO1", "R", "D", "AH0", "N", "AH0", "N", "S"], "ORDINARY": ["AO1", "R", "D", "AH0", "N", "EH2", "R", "IY0"], "OREGON": ["AO1", "R", "AH0", "G", "AH0", "N"], "ORG": ["AO1", "R", "G"], "ORGAN": ["AO1", "R", "G", "AH0", "N"], "ORGANIC": ["AO0", "R", "G", "AE1", "N", "IH0", "K"], "ORGANISATION": ["AO2", "R", "G", "AH0", "N", "IH0", "Z", "EY1", "SH", "AH0", "N"], "ORGANISATIONS": ["AO2", "R", "G", "AH0", "N", "IH0", "Z", "EY1", "SH", "AH0", "N", "Z"], "ORGANISMS": ["AO1", "R", "G", "AH0", "N", "IH2", "Z", "AH0", "M", "Z"], "ORGANIZATION": ["AO2", "R", "G", "AH0", "N", "AH0", "Z", "EY1", "SH", "AH0", "N"], "ORGANIZATIONAL": ["AO2", "R", "G", "AH0", "N", "AH0", "Z", "EY1", "SH", "AH0", "N", "AH0", "L"], "ORGANIZATIONS": ["AO2", "R", "G", "AH0", "N", "AH0", "Z", "EY1", "SH", "AH0", "N", "Z"], "ORGANIZE": ["AO1", "R", "G", "AH0", "N", "AY2", "Z"], "ORGANIZED": ["AO1", "R", "G", "AH0", "N", "AY2", "Z", "D"], "ORGANIZER": ["AO1", "R", "G", "AH0", "N", "AY2", "Z", "ER0"], "ORGANIZING": ["AO1", "R", "G", "AH0", "N", "AY2", "Z", "IH0", "NG"], "ORGASM": ["AO1", "R", "G", "AE0", "Z", "AH0", "M"], "ORGY": ["AO1", "R", "JH", "IY0"], "ORIENTAL": ["AO2", "R", "IY0", "EH1", "N", "T", "AH0", "L"], "ORIENTATION": ["AO2", "R", "IY0", "EH0", "N", "T", "EY1", "SH", "AH0", "N"], "ORIENTED": ["AO1", "R", "IY0", "EH2", "N", "T", "AH0", "D"], "ORIGIN": ["AO1", "R", "AH0", "JH", "AH0", "N"], "ORIGINAL": ["ER0", "IH1", "JH", "AH0", "N", "AH0", "L"], "ORIGINALLY": ["ER0", "IH1", "JH", "AH0", "N", "AH0", "L", "IY0"], "ORIGINS": ["AO1", "R", "AH0", "JH", "IH0", "N", "Z"], "ORLANDO": ["AO0", "R", "L", "AE1", "N", "D", "OW2"], "ORLEANS": ["AO1", "R", "L", "IY2", "N", "Z"], "OS": ["AA1", "S"], "OSCAR": ["AO1", "S", "K", "ER0"], "OT": ["AO1", "T"], "OTHER": ["AH1", "DH", "ER0"], "OTHERS": ["AH1", "DH", "ER0", "Z"], "OTHERWISE": ["AH1", "DH", "ER0", "W", "AY2", "Z"], "OTTAWA": ["AA1", "T", "AH0", "W", "AA2"], "OU": ["UW1"], "OUGHT": ["AO1", "T"], "OUR": ["AW1", "ER0"], "OURS": ["AW1", "ER0", "Z"], "OURSELVES": ["AW0", "ER0", "S", "EH1", "L", "V", "Z"], "OUT": ["AW1", "T"], "OUTCOME": ["AW1", "T", "K", "AH2", "M"], "OUTCOMES": ["AW1", "T", "K", "AH2", "M", "Z"], "OUTDOOR": ["AW1", "T", "D", "AO2", "R"], "OUTDOORS": ["AW1", "T", "D", "AO1", "R", "Z"], "OUTER": ["AW1", "T", "ER0"], "OUTLET": ["AW1", "T", "L", "EH2", "T"], "OUTLINE": ["AW1", "T", "L", "AY2", "N"], "OUTLINED": ["AW1", "T", "L", "AY2", "N", "D"], "OUTLOOK": ["AW1", "T", "L", "UH2", "K"], "OUTPUT": ["AW1", "T", "P", "UH2", "T"], "OUTPUTS": ["AW1", "T", "P", "UH2", "T", "S"], "OUTREACH": ["AW1", "T", "R", "IY2", "CH"], "OUTSIDE": ["AW1", "T", "S", "AY1", "D"], "OUTSOURCING": ["AW2", "T", "S", "AO1", "R", "S", "IH0", "NG"], "OUTSTANDING": ["AW2", "T", "S", "T", "AE1", "N", "D", "IH0", "NG"], "OVAL": ["OW1", "V", "AH0", "L"], "OVEN": ["AH1", "V", "AH0", "N"], "OVER": ["OW1", "V", "ER0"], "OVERALL": ["OW1", "V", "ER0", "AO2", "L"], "OVERCOME": ["OW1", "V", "ER0", "K", "AH2", "M"], "OVERHEAD": ["OW1", "V", "ER0", "HH", "EH1", "D"], "OVERNIGHT": ["OW1", "V", "ER0", "N", "AY1", "T"], "OVERSEAS": ["OW1", "V", "ER0", "S", "IY1", "Z"], "OVERVIEW": ["OW1", "V", "ER0", "V", "Y", "UW2"], "OWEN": ["OW1", "AH0", "N"], "OWN": ["OW1", "N"], "OWNED": ["OW1", "N", "D"], "OWNER": ["OW1", "N", "ER0"], "OWNERS": ["OW1", "N", "ER0", "Z"], "OWNERSHIP": ["OW1", "N", "ER0", "SH", "IH2", "P"], "OWNS": ["OW1", "N", "Z"], "OXFORD": ["AA1", "K", "S", "F", "ER0", "D"], "OXIDE": ["AA1", "K", "S", "AY2", "D"], "OXYGEN": ["AA1", "K", "S", "AH0", "JH", "AH0", "N"], "OZ": ["AA1", "Z"], "OZONE": ["OW1", "Z", "OW2", "N"], "P": ["P", "IY1"], "PA": ["P", "AA1"], "PAC": ["P", "AE1", "K"], "PACE": ["P", "EY1", "S"], "PACIFIC": ["P", "AH0", "S", "IH1", "F", "IH0", "K"], "PACK": ["P", "AE1", "K"], "PACKAGE": ["P", "AE1", "K", "AH0", "JH"], "PACKAGES": ["P", "AE1", "K", "AH0", "JH", "AH0", "Z"], "PACKAGING": ["P", "AE1", "K", "IH0", "JH", "IH0", "NG"], "PACKARD": ["P", "AE1", "K", "ER0", "D"], "PACKED": ["P", "AE1", "K", "T"], "PACKET": ["P", "AE1", "K", "AH0", "T"], "PACKETS": ["P", "AE1", "K", "IH0", "T", "S"], "PACKING": ["P", "AE1", "K", "IH0", "NG"], "PACKS": ["P", "AE1", "K", "S"], "PAD": ["P", "AE1", "D"], "PADS": ["P", "AE1", "D", "Z"], "PAGE": ["P", "EY1", "JH"], "PAGES": ["P", "EY1", "JH", "AH0", "Z"], "PAID": ["P", "EY1", "D"], "PAIN": ["P", "EY1", "N"], "PAINFUL": ["P", "EY1", "N", "F", "AH0", "L"], "PAINT": ["P", "EY1", "N", "T"], "PAINTBALL": ["P", "EY1", "N", "T", "B", "AA2", "L"], "PAINTED": ["P", "EY1", "N", "T", "AH0", "D"], "PAINTING": ["P", "EY1", "N", "T", "IH0", "NG"], "PAINTINGS": ["P", "EY1", "N", "T", "IH0", "NG", "Z"], "PAIR": ["P", "EH1", "R"], "PAIRS": ["P", "EH1", "R", "Z"], "PAKISTAN": ["P", "AE1", "K", "IH0", "S", "T", "AE2", "N"], "PAL": ["P", "AE1", "L"], "PALACE": ["P", "AE1", "L", "AH0", "S"], "PALE": ["P", "EY1", "L"], "PALESTINE": ["P", "AE1", "L", "AH0", "S", "T", "AY2", "N"], "PALESTINIAN": ["P", "AE2", "L", "IH0", "S", "T", "IH1", "N", "IY0", "AH0", "N"], "PALM": ["P", "AA1", "M"], "PALMER": ["P", "AA1", "M", "ER0"], "PAM": ["P", "AE1", "M"], "PAMELA": ["P", "AE1", "M", "AH0", "L", "AH0"], "PAN": ["P", "AE1", "N"], "PANAMA": ["P", "AE1", "N", "AH0", "M", "AA2"], "PANASONIC": ["P", "AE2", "N", "AH0", "S", "AA1", "N", "IH0", "K"], "PANEL": ["P", "AE1", "N", "AH0", "L"], "PANELS": ["P", "AE1", "N", "AH0", "L", "Z"], "PANIC": ["P", "AE1", "N", "IH0", "K"], "PANTIES": ["P", "AE1", "N", "T", "IY0", "Z"], "PANTS": ["P", "AE1", "N", "T", "S"], "PANTYHOSE": ["P", "AE1", "N", "T", "IY0", "HH", "OW2", "Z"], "PAPER": ["P", "EY1", "P", "ER0"], "PAPERBACK": ["P", "EY1", "P", "ER0", "B", "AE2", "K"], "PAPERBACKS": ["P", "EY1", "P", "ER0", "B", "AE2", "K", "S"], "PAPERS": ["P", "EY1", "P", "ER0", "Z"], "PAPUA": ["P", "AE1", "P", "Y", "UW0", "AH0"], "PAR": ["P", "AA1", "R"], "PARA": ["P", "EH1", "R", "AH0"], "PARADE": ["P", "ER0", "EY1", "D"], "PARADISE": ["P", "EH1", "R", "AH0", "D", "AY2", "S"], "PARAGRAPH": ["P", "AE1", "R", "AH0", "G", "R", "AE2", "F"], "PARAGRAPHS": ["P", "AE1", "R", "AH0", "G", "R", "AE2", "F", "S"], "PARAGUAY": ["P", "EH1", "R", "AH0", "G", "W", "EY2"], "PARALLEL": ["P", "EH1", "R", "AH0", "L", "EH2", "L"], "PARAMETER": ["P", "ER0", "AE1", "M", "AH0", "T", "ER0"], "PARAMETERS": ["P", "ER0", "AE1", "M", "AH0", "T", "ER0", "Z"], "PARCEL": ["P", "AA1", "R", "S", "AH0", "L"], "PARENT": ["P", "EH1", "R", "AH0", "N", "T"], "PARENTAL": ["P", "ER0", "EH1", "N", "T", "AH0", "L"], "PARENTING": ["P", "EH1", "R", "AH0", "N", "T", "IH0", "NG"], "PARENTS": ["P", "EH1", "R", "AH0", "N", "T", "S"], "PARIS": ["P", "EH1", "R", "IH0", "S"], "PARISH": ["P", "AE1", "R", "IH0", "SH"], "PARK": ["P", "AA1", "R", "K"], "PARKER": ["P", "AA1", "R", "K", "ER0"], "PARKING": ["P", "AA1", "R", "K", "IH0", "NG"], "PARKS": ["P", "AA1", "R", "K", "S"], "PARLIAMENT": ["P", "AA1", "R", "L", "AH0", "M", "EH0", "N", "T"], "PARLIAMENTARY": ["P", "AA2", "R", "L", "AH0", "M", "EH1", "N", "T", "ER0", "IY0"], "PART": ["P", "AA1", "R", "T"], "PARTIAL": ["P", "AA1", "R", "SH", "AH0", "L"], "PARTIALLY": ["P", "AA1", "R", "SH", "AH0", "L", "IY0"], "PARTICIPANT": ["P", "AA0", "R", "T", "IH1", "S", "AH0", "P", "AH0", "N", "T"], "PARTICIPANTS": ["P", "AA0", "R", "T", "IH1", "S", "AH0", "P", "AH0", "N", "T", "S"], "PARTICIPATE": ["P", "AA0", "R", "T", "IH1", "S", "AH0", "P", "EY2", "T"], "PARTICIPATED": ["P", "AA0", "R", "T", "IH1", "S", "AH0", "P", "EY2", "T", "AH0", "D"], "PARTICIPATING": ["P", "AA0", "R", "T", "IH1", "S", "AH0", "P", "EY2", "T", "IH0", "NG"], "PARTICIPATION": ["P", "AA0", "R", "T", "IH2", "S", "AH0", "P", "EY1", "SH", "AH0", "N"], "PARTICLE": ["P", "AA1", "R", "T", "AH0", "K", "AH0", "L"], "PARTICLES": ["P", "AA1", "R", "T", "AH0", "K", "AH0", "L", "Z"], "PARTICULAR": ["P", "ER0", "T", "IH1", "K", "Y", "AH0", "L", "ER0"], "PARTICULARLY": ["P", "AA2", "R", "T", "IH1", "K", "Y", "AH0", "L", "ER0", "L", "IY0"], "PARTIES": ["P", "AA1", "R", "T", "IY0", "Z"], "PARTITION": ["P", "AA0", "R", "T", "IH1", "SH", "AH0", "N"], "PARTLY": ["P", "AA1", "R", "T", "L", "IY0"], "PARTNER": ["P", "AA1", "R", "T", "N", "ER0"], "PARTNERS": ["P", "AA1", "R", "T", "N", "ER0", "Z"], "PARTNERSHIP": ["P", "AA1", "R", "T", "N", "ER0", "SH", "IH2", "P"], "PARTNERSHIPS": ["P", "AA1", "R", "T", "N", "ER0", "SH", "IH2", "P", "S"], "PARTS": ["P", "AA1", "R", "T", "S"], "PARTY": ["P", "AA1", "R", "T", "IY0"], "PAS": ["P", "AA1", "Z"], "PASO": ["P", "AE1", "S", "OW0"], "PASS": ["P", "AE1", "S"], "PASSAGE": ["P", "AE1", "S", "AH0", "JH"], "PASSED": ["P", "AE1", "S", "T"], "PASSENGER": ["P", "AE1", "S", "AH0", "N", "JH", "ER0"], "PASSENGERS": ["P", "AE1", "S", "AH0", "N", "JH", "ER0", "Z"], "PASSES": ["P", "AE1", "S", "AH0", "Z"], "PASSING": ["P", "AE1", "S", "IH0", "NG"], "PASSION": ["P", "AE1", "SH", "AH0", "N"], "PASSIVE": ["P", "AE1", "S", "IH0", "V"], "PASSPORT": ["P", "AE1", "S", "P", "AO2", "R", "T"], "PASSWORD": ["P", "AE1", "S", "W", "ER2", "D"], "PASSWORDS": ["P", "AE1", "S", "W", "ER2", "D", "Z"], "PAST": ["P", "AE1", "S", "T"], "PASTA": ["P", "AA1", "S", "T", "AH0"], "PASTE": ["P", "EY1", "S", "T"], "PASTOR": ["P", "AE1", "S", "T", "ER0"], "PAT": ["P", "AE1", "T"], "PATCH": ["P", "AE1", "CH"], "PATCHES": ["P", "AE1", "CH", "AH0", "Z"], "PATENT": ["P", "AE1", "T", "AH0", "N", "T"], "PATENTS": ["P", "AE1", "T", "AH0", "N", "T", "S"], "PATH": ["P", "AE1", "TH"], "PATHOLOGY": ["P", "AH0", "TH", "AA1", "L", "AH0", "JH", "IY0"], "PATHS": ["P", "AE1", "DH", "Z"], "PATIENT": ["P", "EY1", "SH", "AH0", "N", "T"], "PATIENTS": ["P", "EY1", "SH", "AH0", "N", "T", "S"], "PATIO": ["P", "AE1", "T", "IY0", "OW2"], "PATRICIA": ["P", "AH0", "T", "R", "IH1", "SH", "AH0"], "PATRICK": ["P", "AE1", "T", "R", "IH0", "K"], "PATROL": ["P", "AH0", "T", "R", "OW1", "L"], "PATTERN": ["P", "AE1", "T", "ER0", "N"], "PATTERNS": ["P", "AE1", "T", "ER0", "N", "Z"], "PAUL": ["P", "AO1", "L"], "PAVILION": ["P", "AH0", "V", "IH1", "L", "Y", "AH0", "N"], "PAY": ["P", "EY1"], "PAYABLE": ["P", "EY1", "AH0", "B", "AH0", "L"], "PAYDAY": ["P", "EY1", "D", "EY2"], "PAYING": ["P", "EY1", "IH0", "NG"], "PAYMENT": ["P", "EY1", "M", "AH0", "N", "T"], "PAYMENTS": ["P", "EY1", "M", "AH0", "N", "T", "S"], "PAYROLL": ["P", "EY1", "R", "OW2", "L"], "PAYS": ["P", "EY1", "Z"], "PC": ["P", "IY1", "S", "IY1"], "PCS": ["P", "IY1", "S", "IY1", "Z"], "PEACE": ["P", "IY1", "S"], "PEACEFUL": ["P", "IY1", "S", "F", "AH0", "L"], "PEAK": ["P", "IY1", "K"], "PEARL": ["P", "ER1", "L"], "PEAS": ["P", "IY1", "Z"], "PEDIATRIC": ["P", "IY2", "D", "IY0", "AE1", "T", "R", "IH0", "K"], "PEE": ["P", "IY1"], "PEEING": ["P", "IY1", "IH0", "NG"], "PEER": ["P", "IH1", "R"], "PEERS": ["P", "IH1", "R", "Z"], "PEN": ["P", "EH1", "N"], "PENALTIES": ["P", "EH1", "N", "AH0", "L", "T", "IY0", "Z"], "PENALTY": ["P", "EH1", "N", "AH0", "L", "T", "IY0"], "PENCIL": ["P", "EH1", "N", "S", "AH0", "L"], "PENDANT": ["P", "EH1", "N", "D", "AH0", "N", "T"], "PENDING": ["P", "EH1", "N", "D", "IH0", "NG"], "PENETRATION": ["P", "EH2", "N", "AH0", "T", "R", "EY1", "SH", "AH0", "N"], "PENGUIN": ["P", "EH1", "NG", "G", "W", "AH0", "N"], "PENINSULA": ["P", "AH0", "N", "IH1", "N", "S", "AH0", "L", "AH0"], "PENIS": ["P", "IY1", "N", "IH0", "S"], "PENN": ["P", "EH1", "N"], "PENNSYLVANIA": ["P", "EH2", "N", "S", "AH0", "L", "V", "EY1", "N", "Y", "AH0"], "PENNY": ["P", "EH1", "N", "IY0"], "PENS": ["P", "EH1", "N", "Z"], "PENSION": ["P", "EH1", "N", "SH", "AH0", "N"], "PENSIONS": ["P", "EH1", "N", "SH", "AH0", "N", "Z"], "PENTIUM": ["P", "EH1", "N", "T", "IY0", "AH0", "M"], "PEOPLE": ["P", "IY1", "P", "AH0", "L"], "PEOPLES": ["P", "IY1", "P", "AH0", "L", "Z"], "PEPPER": ["P", "EH1", "P", "ER0"], "PER": ["P", "ER1"], "PERCEIVED": ["P", "ER0", "S", "IY1", "V", "D"], "PERCENT": ["P", "ER0", "S", "EH1", "N", "T"], "PERCENTAGE": ["P", "ER0", "S", "EH1", "N", "T", "AH0", "JH"], "PERCEPTION": ["P", "ER0", "S", "EH1", "P", "SH", "AH0", "N"], "PERFECT": ["P", "ER0", "F", "EH1", "K", "T"], "PERFECTLY": ["P", "ER1", "F", "AH0", "K", "T", "L", "IY0"], "PERFORM": ["P", "ER0", "F", "AO1", "R", "M"], "PERFORMANCE": ["P", "ER0", "F", "AO1", "R", "M", "AH0", "N", "S"], "PERFORMANCES": ["P", "ER0", "F", "AO1", "R", "M", "AH0", "N", "S", "AH0", "Z"], "PERFORMED": ["P", "ER0", "F", "AO1", "R", "M", "D"], "PERFORMER": ["P", "ER0", "F", "AO1", "R", "M", "ER0"], "PERFORMING": ["P", "ER0", "F", "AO1", "R", "M", "IH0", "NG"], "PERFORMS": ["P", "ER0", "F", "AO1", "R", "M", "Z"], "PERFUME": ["P", "ER0", "F", "Y", "UW1", "M"], "PERHAPS": ["P", "ER0", "HH", "AE1", "P", "S"], "PERIOD": ["P", "IH1", "R", "IY0", "AH0", "D"], "PERIODIC": ["P", "IH2", "R", "IY0", "AA1", "D", "IH0", "K"], "PERIODICALLY": ["P", "IY2", "R", "IY0", "AA1", "D", "IH0", "K", "AH0", "L", "IY0"], "PERIODS": ["P", "IH1", "R", "IY0", "AH0", "D", "Z"], "PERIPHERAL": ["P", "ER0", "IH1", "F", "ER0", "AH0", "L"], "PERIPHERALS": ["P", "ER0", "IH1", "F", "ER0", "AH0", "L", "Z"], "PERL": ["P", "ER1", "L"], "PERMANENT": ["P", "ER1", "M", "AA0", "N", "EH2", "N", "T"], "PERMISSION": ["P", "ER0", "M", "IH1", "SH", "AH0", "N"], "PERMISSIONS": ["P", "ER0", "M", "IH1", "SH", "AH0", "N", "Z"], "PERMIT": ["P", "ER0", "M", "IH1", "T"], "PERMITS": ["P", "ER0", "M", "IH1", "T", "S"], "PERMITTED": ["P", "ER0", "M", "IH1", "T", "AH0", "D"], "PERRY": ["P", "EH1", "R", "IY0"], "PERSIAN": ["P", "ER1", "ZH", "AH0", "N"], "PERSISTENT": ["P", "ER0", "S", "IH1", "S", "T", "AH0", "N", "T"], "PERSON": ["P", "ER1", "S", "AH0", "N"], "PERSONAL": ["P", "ER1", "S", "IH0", "N", "AH0", "L"], "PERSONALITY": ["P", "ER2", "S", "AH0", "N", "AE1", "L", "IH0", "T", "IY0"], "PERSONALIZED": ["P", "ER1", "S", "AH0", "N", "AH0", "L", "AY2", "Z", "D"], "PERSONALLY": ["P", "ER1", "S", "AH0", "N", "AH0", "L", "IY0"], "PERSONALS": ["P", "ER1", "S", "IH0", "N", "IH0", "L", "Z"], "PERSONNEL": ["P", "ER2", "S", "AH0", "N", "EH1", "L"], "PERSONS": ["P", "ER1", "S", "AH0", "N", "Z"], "PERSPECTIVE": ["P", "ER0", "S", "P", "EH1", "K", "T", "IH0", "V"], "PERSPECTIVES": ["P", "ER0", "S", "P", "EH1", "K", "T", "IH0", "V", "Z"], "PERTH": ["P", "ER1", "TH"], "PERU": ["P", "ER0", "UW1"], "PEST": ["P", "EH1", "S", "T"], "PET": ["P", "EH1", "T"], "PETE": ["P", "IY1", "T"], "PETER": ["P", "IY1", "T", "ER0"], "PETERSBURG": ["P", "IY1", "T", "ER0", "Z", "B", "ER0", "G"], "PETERSON": ["P", "IY1", "T", "ER0", "S", "AH0", "N"], "PETITE": ["P", "AH0", "T", "IY1", "T"], "PETITION": ["P", "AH0", "T", "IH1", "SH", "AH0", "N"], "PETROLEUM": ["P", "AH0", "T", "R", "OW1", "L", "IY0", "AH0", "M"], "PETS": ["P", "EH1", "T", "S"], "PH": ["P", "IY1", "EY1", "CH"], "PHANTOM": ["F", "AE1", "N", "T", "AH0", "M"], "PHARMACEUTICAL": ["F", "AA2", "R", "M", "AH0", "S", "UW1", "T", "IH0", "K", "AH0", "L"], "PHARMACEUTICALS": ["F", "AA2", "R", "M", "AH0", "S", "UW1", "T", "IH0", "K", "AH0", "L", "Z"], "PHARMACIES": ["F", "AA1", "R", "M", "AH0", "S", "IY0", "Z"], "PHARMACOLOGY": ["F", "AA2", "R", "M", "AH0", "K", "AA1", "L", "AH0", "JH", "IY0"], "PHARMACY": ["F", "AA1", "R", "M", "AH0", "S", "IY0"], "PHASE": ["F", "EY1", "Z"], "PHASES": ["F", "EY1", "Z", "AH0", "Z"], "PHD": ["P", "IY1", "EY2", "CH", "D", "IY1"], "PHENOMENON": ["F", "AH0", "N", "AA1", "M", "AH0", "N", "AA2", "N"], "PHI": ["F", "AY1"], "PHIL": ["F", "IH1", "L"], "PHILADELPHIA": ["F", "IH2", "L", "AH0", "D", "EH1", "L", "F", "IY0", "AH0"], "PHILIP": ["F", "IH1", "L", "AH0", "P"], "PHILIPPINES": ["F", "IH1", "L", "AH0", "P", "IY2", "N", "Z"], "PHILIPS": ["F", "IH1", "L", "AH0", "P", "S"], "PHILLIPS": ["F", "IH1", "L", "IH0", "P", "S"], "PHILOSOPHY": ["F", "AH0", "L", "AA1", "S", "AH0", "F", "IY0"], "PHOENIX": ["F", "IY1", "N", "IH0", "K", "S"], "PHONE": ["F", "OW1", "N"], "PHONES": ["F", "OW1", "N", "Z"], "PHOTO": ["F", "OW1", "T", "OW2"], "PHOTOGRAPH": ["F", "OW1", "T", "AH0", "G", "R", "AE2", "F"], "PHOTOGRAPHER": ["F", "AH0", "T", "AA1", "G", "R", "AH0", "F", "ER0"], "PHOTOGRAPHERS": ["F", "AH0", "T", "AA1", "G", "R", "AH0", "F", "ER0", "Z"], "PHOTOGRAPHIC": ["F", "OW2", "T", "AH0", "G", "R", "AE1", "F", "IH0", "K"], "PHOTOGRAPHS": ["F", "OW1", "T", "AH0", "G", "R", "AE2", "F", "S"], "PHOTOGRAPHY": ["F", "AH0", "T", "AA1", "G", "R", "AH0", "F", "IY0"], "PHOTOS": ["F", "OW1", "T", "OW2", "Z"], "PHOTOSHOP": ["F", "OW1", "T", "OW2", "SH", "AA2", "P"], "PHRASE": ["F", "R", "EY1", "Z"], "PHRASES": ["F", "R", "EY1", "Z", "AH0", "Z"], "PHYSICAL": ["F", "IH1", "Z", "IH0", "K", "AH0", "L"], "PHYSICALLY": ["F", "IH1", "Z", "IH0", "K", "AH0", "L", "IY0"], "PHYSICIAN": ["F", "AH0", "Z", "IH1", "SH", "AH0", "N"], "PHYSICIANS": ["F", "AH0", "Z", "IH1", "SH", "AH0", "N", "Z"], "PHYSICS": ["F", "IH1", "Z", "IH0", "K", "S"], "PHYSIOLOGY": ["F", "IH2", "Z", "IY0", "AA1", "L", "AH0", "JH", "IY0"], "PI": ["P", "AY1"], "PIANO": ["P", "IY0", "AE1", "N", "OW0"], "PIC": ["P", "IH1", "K"], "PICK": ["P", "IH1", "K"], "PICKED": ["P", "IH1", "K", "T"], "PICKING": ["P", "IH1", "K", "IH0", "NG"], "PICKS": ["P", "IH1", "K", "S"], "PICKUP": ["P", "IH1", "K", "AH2", "P"], "PICNIC": ["P", "IH1", "K", "N", "IH2", "K"], "PICTURE": ["P", "IH1", "K", "CH", "ER0"], "PICTURES": ["P", "IH1", "K", "CH", "ER0", "Z"], "PIE": ["P", "AY1"], "PIECE": ["P", "IY1", "S"], "PIECES": ["P", "IY1", "S", "AH0", "Z"], "PIERCE": ["P", "IH1", "R", "S"], "PIERRE": ["P", "IY0", "EH1", "R"], "PIG": ["P", "IH1", "G"], "PIKE": ["P", "AY1", "K"], "PILL": ["P", "IH1", "L"], "PILLOW": ["P", "IH1", "L", "OW0"], "PILLS": ["P", "IH1", "L", "Z"], "PILOT": ["P", "AY1", "L", "AH0", "T"], "PIN": ["P", "IH1", "N"], "PINE": ["P", "AY1", "N"], "PING": ["P", "IH1", "NG"], "PINK": ["P", "IH1", "NG", "K"], "PINS": ["P", "IH1", "N", "Z"], "PIONEER": ["P", "AY2", "AH0", "N", "IH1", "R"], "PIPE": ["P", "AY1", "P"], "PIPELINE": ["P", "AY1", "P", "L", "AY2", "N"], "PIPES": ["P", "AY1", "P", "S"], "PIRATES": ["P", "AY1", "R", "AH0", "T", "S"], "PISS": ["P", "IH1", "S"], "PISSING": ["P", "IH1", "S", "IH2", "NG"], "PIT": ["P", "IH1", "T"], "PITCH": ["P", "IH1", "CH"], "PITTSBURGH": ["P", "IH1", "T", "S", "B", "ER0", "G"], "PIX": ["P", "IH1", "K", "S"], "PIXEL": ["P", "IH1", "K", "S", "AH0", "L"], "PIXELS": ["P", "IH1", "K", "S", "AH0", "L", "Z"], "PIZZA": ["P", "IY1", "T", "S", "AH0"], "PLACE": ["P", "L", "EY1", "S"], "PLACED": ["P", "L", "EY1", "S", "T"], "PLACEMENT": ["P", "L", "EY1", "S", "M", "AH0", "N", "T"], "PLACES": ["P", "L", "EY1", "S", "AH0", "Z"], "PLACING": ["P", "L", "EY1", "S", "IH0", "NG"], "PLAIN": ["P", "L", "EY1", "N"], "PLAINS": ["P", "L", "EY1", "N", "Z"], "PLAINTIFF": ["P", "L", "EY1", "N", "T", "AH0", "F"], "PLAN": ["P", "L", "AE1", "N"], "PLANE": ["P", "L", "EY1", "N"], "PLANES": ["P", "L", "EY1", "N", "Z"], "PLANET": ["P", "L", "AE1", "N", "AH0", "T"], "PLANETS": ["P", "L", "AE1", "N", "AH0", "T", "S"], "PLANNED": ["P", "L", "AE1", "N", "D"], "PLANNER": ["P", "L", "AE1", "N", "ER0"], "PLANNERS": ["P", "L", "AE1", "N", "ER0", "Z"], "PLANNING": ["P", "L", "AE1", "N", "IH0", "NG"], "PLANS": ["P", "L", "AE1", "N", "Z"], "PLANT": ["P", "L", "AE1", "N", "T"], "PLANTS": ["P", "L", "AE1", "N", "T", "S"], "PLASMA": ["P", "L", "AE1", "Z", "M", "AH0"], "PLASTIC": ["P", "L", "AE1", "S", "T", "IH0", "K"], "PLASTICS": ["P", "L", "AE1", "S", "T", "IH0", "K", "S"], "PLATE": ["P", "L", "EY1", "T"], "PLATES": ["P", "L", "EY1", "T", "S"], "PLATFORM": ["P", "L", "AE1", "T", "F", "AO2", "R", "M"], "PLATFORMS": ["P", "L", "AE1", "T", "F", "AO2", "R", "M", "Z"], "PLATINUM": ["P", "L", "AE1", "T", "N", "AH0", "M"], "PLAY": ["P", "L", "EY1"], "PLAYBACK": ["P", "L", "EY1", "B", "AE2", "K"], "PLAYBOY": ["P", "L", "EY1", "B", "OY2"], "PLAYED": ["P", "L", "EY1", "D"], "PLAYER": ["P", "L", "EY1", "ER0"], "PLAYERS": ["P", "L", "EY1", "ER0", "Z"], "PLAYING": ["P", "L", "EY1", "IH0", "NG"], "PLAYS": ["P", "L", "EY1", "Z"], "PLAYSTATION": ["P", "L", "EY1", "S", "T", "EY2", "SH", "AH0", "N"], "PLAZA": ["P", "L", "AA1", "Z", "AH0"], "PLEASANT": ["P", "L", "EH1", "Z", "AH0", "N", "T"], "PLEASE": ["P", "L", "IY1", "Z"], "PLEASED": ["P", "L", "IY1", "Z", "D"], "PLEASURE": ["P", "L", "EH1", "ZH", "ER0"], "PLEDGE": ["P", "L", "EH1", "JH"], "PLENTY": ["P", "L", "EH1", "N", "T", "IY0"], "PLOT": ["P", "L", "AA1", "T"], "PLOTS": ["P", "L", "AA1", "T", "S"], "PLUG": ["P", "L", "AH1", "G"], "PLUMBING": ["P", "L", "AH1", "M", "IH0", "NG"], "PLUS": ["P", "L", "AH1", "S"], "PLYMOUTH": ["P", "L", "IH1", "M", "AH0", "TH"], "PM": ["P", "IY1", "EH1", "M"], "PO": ["P", "OW1"], "POCKET": ["P", "AA1", "K", "AH0", "T"], "POCKETS": ["P", "AA1", "K", "AH0", "T", "S"], "POD": ["P", "AA1", "D"], "PODCAST": ["P", "AO1", "D", "K", "AE2", "S", "T"], "POEM": ["P", "OW1", "AH0", "M"], "POEMS": ["P", "OW1", "AH0", "M", "Z"], "POET": ["P", "OW1", "AH0", "T"], "POETRY": ["P", "OW1", "AH0", "T", "R", "IY0"], "POINT": ["P", "OY1", "N", "T"], "POINTED": ["P", "OY1", "N", "T", "IH0", "D"], "POINTER": ["P", "OY1", "N", "T", "ER0"], "POINTING": ["P", "OY1", "N", "T", "IH0", "NG"], "POINTS": ["P", "OY1", "N", "T", "S"], "POKER": ["P", "OW1", "K", "ER0"], "POLAND": ["P", "OW1", "L", "AH0", "N", "D"], "POLAR": ["P", "OW1", "L", "ER0"], "POLE": ["P", "OW1", "L"], "POLICE": ["P", "AH0", "L", "IY1", "S"], "POLICIES": ["P", "AA1", "L", "AH0", "S", "IY0", "Z"], "POLICY": ["P", "AA1", "L", "AH0", "S", "IY0"], "POLISH": ["P", "AA1", "L", "IH0", "SH"], "POLISHED": ["P", "AA1", "L", "IH0", "SH", "T"], "POLITICAL": ["P", "AH0", "L", "IH1", "T", "AH0", "K", "AH0", "L"], "POLITICIANS": ["P", "AA2", "L", "AH0", "T", "IH1", "SH", "AH0", "N", "Z"], "POLITICS": ["P", "AA1", "L", "AH0", "T", "IH2", "K", "S"], "POLL": ["P", "OW1", "L"], "POLLS": ["P", "OW1", "L", "Z"], "POLLUTION": ["P", "AH0", "L", "UW1", "SH", "AH0", "N"], "POLO": ["P", "OW1", "L", "OW0"], "POLY": ["P", "AA1", "L", "IY0"], "POLYESTER": ["P", "AA2", "L", "IY2", "EH1", "S", "T", "ER0"], "POLYMER": ["P", "AA1", "L", "AH0", "M", "ER0"], "POLYPHONIC": ["P", "AA2", "L", "IH2", "F", "AA1", "N", "IH0", "K"], "POND": ["P", "AA1", "N", "D"], "PONTIAC": ["P", "AA1", "N", "T", "IY0", "AE2", "K"], "POOL": ["P", "UW1", "L"], "POOLS": ["P", "UW1", "L", "Z"], "POOR": ["P", "UW1", "R"], "POP": ["P", "AA1", "P"], "POPE": ["P", "OW1", "P"], "POPULAR": ["P", "AA1", "P", "Y", "AH0", "L", "ER0"], "POPULARITY": ["P", "AA2", "P", "Y", "AH0", "L", "EH1", "R", "AH0", "T", "IY0"], "POPULATION": ["P", "AA2", "P", "Y", "AH0", "L", "EY1", "SH", "AH0", "N"], "POPULATIONS": ["P", "AA2", "P", "Y", "AH0", "L", "EY1", "SH", "AH0", "N", "Z"], "POR": ["P", "AO1", "R"], "PORCELAIN": ["P", "AO1", "R", "S", "AH0", "L", "AH0", "N"], "PORK": ["P", "AO1", "R", "K"], "PORN": ["P", "AO1", "R", "N"], "PORNO": ["P", "AO1", "R", "N", "OW0"], "PORSCHE": ["P", "AO1", "R", "SH", "AH0"], "PORT": ["P", "AO1", "R", "T"], "PORTABLE": ["P", "AO1", "R", "T", "AH0", "B", "AH0", "L"], "PORTAL": ["P", "AO1", "R", "T", "AH0", "L"], "PORTER": ["P", "AO1", "R", "T", "ER0"], "PORTFOLIO": ["P", "AO0", "R", "T", "F", "OW1", "L", "IY0", "OW2"], "PORTION": ["P", "AO1", "R", "SH", "AH0", "N"], "PORTIONS": ["P", "AO1", "R", "SH", "AH0", "N", "Z"], "PORTLAND": ["P", "AO1", "R", "T", "L", "AH0", "N", "D"], "PORTRAIT": ["P", "AO1", "R", "T", "R", "AH0", "T"], "PORTRAITS": ["P", "AO1", "R", "T", "R", "AH0", "T", "S"], "PORTS": ["P", "AO1", "R", "T", "S"], "PORTSMOUTH": ["P", "AO1", "R", "T", "S", "M", "AH0", "TH"], "PORTUGAL": ["P", "AO1", "R", "CH", "AH0", "G", "AH0", "L"], "PORTUGUESE": ["P", "AO1", "R", "CH", "AH0", "G", "IY2", "Z"], "POS": ["P", "AA1", "S"], "POSE": ["P", "OW1", "Z"], "POSING": ["P", "OW1", "Z", "IH0", "NG"], "POSITION": ["P", "AH0", "Z", "IH1", "SH", "AH0", "N"], "POSITIONING": ["P", "AH0", "Z", "IH1", "SH", "AH0", "N", "IH0", "NG"], "POSITIONS": ["P", "AH0", "Z", "IH1", "SH", "AH0", "N", "Z"], "POSITIVE": ["P", "AA1", "Z", "AH0", "T", "IH0", "V"], "POSSESS": ["P", "AH0", "Z", "EH1", "S"], "POSSESSION": ["P", "AH0", "Z", "EH1", "SH", "AH0", "N"], "POSSIBILITIES": ["P", "AA2", "S", "AH0", "B", "IH1", "L", "AH0", "T", "IY0", "Z"], "POSSIBILITY": ["P", "AA2", "S", "AH0", "B", "IH1", "L", "AH0", "T", "IY2"], "POSSIBLE": ["P", "AA1", "S", "AH0", "B", "AH0", "L"], "POSSIBLY": ["P", "AA1", "S", "AH0", "B", "L", "IY0"], "POST": ["P", "OW1", "S", "T"], "POSTAGE": ["P", "OW1", "S", "T", "AH0", "JH"], "POSTAL": ["P", "OW1", "S", "T", "AH0", "L"], "POSTCARD": ["P", "OW1", "S", "T", "K", "AA2", "R", "D"], "POSTCARDS": ["P", "OW1", "S", "T", "K", "AA2", "R", "D", "Z"], "POSTED": ["P", "OW1", "S", "T", "IH0", "D"], "POSTER": ["P", "OW1", "S", "T", "ER0"], "POSTERS": ["P", "OW1", "S", "T", "ER0", "Z"], "POSTING": ["P", "OW1", "S", "T", "IH0", "NG"], "POSTINGS": ["P", "OW1", "S", "T", "IH0", "NG", "Z"], "POSTS": ["P", "OW1", "S", "T", "S"], "POT": ["P", "AA1", "T"], "POTATO": ["P", "AH0", "T", "EY1", "T", "OW2"], "POTATOES": ["P", "AH0", "T", "EY1", "T", "OW0", "Z"], "POTENTIAL": ["P", "AH0", "T", "EH1", "N", "SH", "AH0", "L"], "POTENTIALLY": ["P", "AH0", "T", "EH1", "N", "SH", "AH0", "L", "IY0"], "POTTER": ["P", "AA1", "T", "ER0"], "POTTERY": ["P", "AA1", "T", "ER0", "IY0"], "POULTRY": ["P", "OW1", "L", "T", "R", "IY0"], "POUND": ["P", "AW1", "N", "D"], "POUNDS": ["P", "AW1", "N", "D", "Z"], "POUR": ["P", "AO1", "R"], "POVERTY": ["P", "AA1", "V", "ER0", "T", "IY0"], "POWDER": ["P", "AW1", "D", "ER0"], "POWELL": ["P", "AA1", "W", "EH0", "L"], "POWER": ["P", "AW1", "ER0"], "POWERED": ["P", "AW1", "ER0", "D"], "POWERFUL": ["P", "AW1", "ER0", "F", "AH0", "L"], "POWERPOINT": ["P", "AW1", "ER0", "P", "OY2", "N", "T"], "POWERS": ["P", "AW1", "ER0", "Z"], "PRACTICAL": ["P", "R", "AE1", "K", "T", "IH0", "K", "AH0", "L"], "PRACTICE": ["P", "R", "AE1", "K", "T", "IH0", "S"], "PRACTICES": ["P", "R", "AE1", "K", "T", "IH0", "S", "IH0", "Z"], "PRACTITIONER": ["P", "R", "AE0", "K", "T", "IH1", "SH", "AH0", "N", "ER0"], "PRACTITIONERS": ["P", "R", "AE0", "K", "T", "IH1", "SH", "AH0", "N", "ER0", "Z"], "PRAGUE": ["P", "R", "AA1", "G"], "PRAIRIE": ["P", "R", "EH1", "R", "IY0"], "PRAISE": ["P", "R", "EY1", "Z"], "PRAY": ["P", "R", "EY1"], "PRAYER": ["P", "R", "EH1", "R"], "PRAYERS": ["P", "R", "EH1", "R", "Z"], "PRE": ["P", "R", "IY1"], "PRECEDING": ["P", "R", "IY0", "S", "IY1", "D", "IH0", "NG"], "PRECIOUS": ["P", "R", "EH1", "SH", "AH0", "S"], "PRECIPITATION": ["P", "R", "IH0", "S", "IH2", "P", "IH0", "T", "EY1", "SH", "AH0", "N"], "PRECISE": ["P", "R", "IH0", "S", "AY1", "S"], "PRECISELY": ["P", "R", "IH0", "S", "AY1", "S", "L", "IY0"], "PRECISION": ["P", "R", "IY0", "S", "IH1", "ZH", "AH0", "N"], "PREDICT": ["P", "R", "IH0", "D", "IH1", "K", "T"], "PREDICTED": ["P", "R", "IH0", "D", "IH1", "K", "T", "IH0", "D"], "PREDICTION": ["P", "R", "IY0", "D", "IH1", "K", "SH", "AH0", "N"], "PREDICTIONS": ["P", "R", "IY0", "D", "IH1", "K", "SH", "AH0", "N", "Z"], "PREFER": ["P", "R", "AH0", "F", "ER1"], "PREFERENCE": ["P", "R", "EH1", "F", "ER0", "AH0", "N", "S"], "PREFERENCES": ["P", "R", "EH1", "F", "ER0", "AH0", "N", "S", "IH0", "Z"], "PREFERRED": ["P", "R", "AH0", "F", "ER1", "D"], "PREFERS": ["P", "R", "AH0", "F", "ER1", "Z"], "PREFIX": ["P", "R", "IY1", "F", "IH0", "K", "S"], "PREGNANCY": ["P", "R", "EH1", "G", "N", "AH0", "N", "S", "IY0"], "PREGNANT": ["P", "R", "EH1", "G", "N", "AH0", "N", "T"], "PRELIMINARY": ["P", "R", "IH0", "L", "IH1", "M", "AH0", "N", "EH2", "R", "IY0"], "PREMIER": ["P", "R", "EH0", "M", "IH1", "R"], "PREMIERE": ["P", "R", "EH0", "M", "IH1", "R"], "PREMISES": ["P", "R", "EH1", "M", "AH0", "S", "AH0", "Z"], "PREMIUM": ["P", "R", "IY1", "M", "IY0", "AH0", "M"], "PREP": ["P", "R", "EH1", "P"], "PREPAID": ["P", "R", "IY0", "P", "EY1", "D"], "PREPARATION": ["P", "R", "EH2", "P", "ER0", "EY1", "SH", "AH0", "N"], "PREPARE": ["P", "R", "IY0", "P", "EH1", "R"], "PREPARED": ["P", "R", "IY0", "P", "EH1", "R", "D"], "PREPARING": ["P", "R", "IY0", "P", "EH1", "R", "IH0", "NG"], "PREREQUISITE": ["P", "R", "IY0", "R", "EH1", "K", "W", "AH0", "Z", "AH0", "T"], "PRESCRIBED": ["P", "R", "IY0", "S", "K", "R", "AY1", "B", "D"], "PRESCRIPTION": ["P", "R", "AH0", "S", "K", "R", "IH1", "P", "SH", "AH0", "N"], "PRESENCE": ["P", "R", "EH1", "Z", "AH0", "N", "S"], "PRESENT": ["P", "R", "EH1", "Z", "AH0", "N", "T"], "PRESENTATION": ["P", "R", "EH2", "Z", "AH0", "N", "T", "EY1", "SH", "AH0", "N"], "PRESENTATIONS": ["P", "R", "EH2", "Z", "AH0", "N", "T", "EY1", "SH", "AH0", "N", "Z"], "PRESENTED": ["P", "R", "IY0", "Z", "EH1", "N", "T", "AH0", "D"], "PRESENTING": ["P", "R", "IH0", "Z", "EH1", "N", "T", "IH0", "NG"], "PRESENTLY": ["P", "R", "EH1", "Z", "AH0", "N", "T", "L", "IY0"], "PRESENTS": ["P", "R", "EH1", "Z", "AH0", "N", "T", "S"], "PRESERVATION": ["P", "R", "EH2", "Z", "ER0", "V", "EY1", "SH", "AH0", "N"], "PRESERVE": ["P", "R", "AH0", "Z", "ER1", "V"], "PRESIDENT": ["P", "R", "EH1", "Z", "IH0", "D", "AH0", "N", "T"], "PRESIDENTIAL": ["P", "R", "EH2", "Z", "IH0", "D", "EH1", "N", "SH", "AH0", "L"], "PRESS": ["P", "R", "EH1", "S"], "PRESSED": ["P", "R", "EH1", "S", "T"], "PRESSING": ["P", "R", "EH1", "S", "IH0", "NG"], "PRESSURE": ["P", "R", "EH1", "SH", "ER0"], "PRESTON": ["P", "R", "EH1", "S", "T", "AH0", "N"], "PRETTY": ["P", "R", "IH1", "T", "IY0"], "PREVENT": ["P", "R", "IH0", "V", "EH1", "N", "T"], "PREVENTING": ["P", "R", "IH0", "V", "EH1", "N", "T", "IH0", "NG"], "PREVENTION": ["P", "R", "IY0", "V", "EH1", "N", "SH", "AH0", "N"], "PREVIEW": ["P", "R", "IY1", "V", "Y", "UW2"], "PREVIEWS": ["P", "R", "IY1", "V", "Y", "UW2", "Z"], "PREVIOUS": ["P", "R", "IY1", "V", "IY0", "AH0", "S"], "PREVIOUSLY": ["P", "R", "IY1", "V", "IY0", "AH0", "S", "L", "IY0"], "PRICE": ["P", "R", "AY1", "S"], "PRICED": ["P", "R", "AY1", "S", "T"], "PRICES": ["P", "R", "AY1", "S", "AH0", "Z"], "PRICING": ["P", "R", "AY1", "S", "IH0", "NG"], "PRIDE": ["P", "R", "AY1", "D"], "PRIEST": ["P", "R", "IY1", "S", "T"], "PRIMARILY": ["P", "R", "AY0", "M", "EH1", "R", "AH0", "L", "IY0"], "PRIMARY": ["P", "R", "AY1", "M", "EH2", "R", "IY0"], "PRIME": ["P", "R", "AY1", "M"], "PRINCE": ["P", "R", "IH1", "N", "S"], "PRINCESS": ["P", "R", "IH1", "N", "S", "EH0", "S"], "PRINCETON": ["P", "R", "IH1", "N", "S", "T", "AH0", "N"], "PRINCIPAL": ["P", "R", "IH1", "N", "S", "AH0", "P", "AH0", "L"], "PRINCIPLE": ["P", "R", "IH1", "N", "S", "AH0", "P", "AH0", "L"], "PRINCIPLES": ["P", "R", "IH1", "N", "S", "AH0", "P", "AH0", "L", "Z"], "PRINT": ["P", "R", "IH1", "N", "T"], "PRINTABLE": ["P", "R", "IH1", "N", "T", "AH0", "B", "AH0", "L"], "PRINTED": ["P", "R", "IH1", "N", "T", "AH0", "D"], "PRINTER": ["P", "R", "IH1", "N", "T", "ER0"], "PRINTERS": ["P", "R", "IH1", "N", "T", "ER0", "Z"], "PRINTING": ["P", "R", "IH1", "N", "T", "IH0", "NG"], "PRINTS": ["P", "R", "IH1", "N", "T", "S"], "PRIOR": ["P", "R", "AY1", "ER0"], "PRIORITIES": ["P", "R", "AY0", "AO1", "R", "AH0", "T", "IY0", "Z"], "PRIORITY": ["P", "R", "AY0", "AO1", "R", "AH0", "T", "IY0"], "PRISON": ["P", "R", "IH1", "Z", "AH0", "N"], "PRISONER": ["P", "R", "IH1", "Z", "AH0", "N", "ER0"], "PRISONERS": ["P", "R", "IH1", "Z", "AH0", "N", "ER0", "Z"], "PRIVACY": ["P", "R", "AY1", "V", "AH0", "S", "IY0"], "PRIVATE": ["P", "R", "AY1", "V", "AH0", "T"], "PRIVILEGE": ["P", "R", "IH1", "V", "IH0", "L", "IH0", "JH"], "PRIVILEGES": ["P", "R", "IH1", "V", "IH0", "L", "IH2", "JH", "IH0", "Z"], "PRIX": ["P", "R", "IY1"], "PRIZE": ["P", "R", "AY1", "Z"], "PRIZES": ["P", "R", "AY1", "Z", "AH0", "Z"], "PRO": ["P", "R", "OW1"], "PROBABILITY": ["P", "R", "AA2", "B", "AH0", "B", "IH1", "L", "AH0", "T", "IY2"], "PROBABLY": ["P", "R", "AA1", "B", "AH0", "B", "L", "IY2"], "PROBE": ["P", "R", "OW1", "B"], "PROBLEM": ["P", "R", "AA1", "B", "L", "AH0", "M"], "PROBLEMS": ["P", "R", "AA1", "B", "L", "AH0", "M", "Z"], "PROCEDURE": ["P", "R", "AH0", "S", "IY1", "JH", "ER0"], "PROCEDURES": ["P", "R", "AH0", "S", "IY1", "JH", "ER0", "Z"], "PROCEED": ["P", "R", "AH0", "S", "IY1", "D"], "PROCEEDING": ["P", "R", "AH0", "S", "IY1", "D", "IH0", "NG"], "PROCEEDINGS": ["P", "R", "OW0", "S", "IY1", "D", "IH0", "NG", "Z"], "PROCEEDS": ["P", "R", "AH0", "S", "IY1", "D", "Z"], "PROCESS": ["P", "R", "AA1", "S", "EH2", "S"], "PROCESSED": ["P", "R", "AA1", "S", "EH0", "S", "T"], "PROCESSES": ["P", "R", "AA1", "S", "EH0", "S", "AH0", "Z"], "PROCESSING": ["P", "R", "AA1", "S", "EH0", "S", "IH0", "NG"], "PROCESSOR": ["P", "R", "AA1", "S", "EH2", "S", "ER0"], "PROCESSORS": ["P", "R", "AA1", "S", "EH2", "S", "ER0", "Z"], "PROCUREMENT": ["P", "R", "OW0", "K", "Y", "UH1", "R", "M", "AH0", "N", "T"], "PRODUCE": ["P", "R", "AH0", "D", "UW1", "S"], "PRODUCED": ["P", "R", "AH0", "D", "UW1", "S", "T"], "PRODUCER": ["P", "R", "AH0", "D", "UW1", "S", "ER0"], "PRODUCERS": ["P", "R", "AH0", "D", "UW1", "S", "ER0", "Z"], "PRODUCES": ["P", "R", "AH0", "D", "UW1", "S", "AH0", "Z"], "PRODUCING": ["P", "R", "AH0", "D", "UW1", "S", "IH0", "NG"], "PRODUCT": ["P", "R", "AA1", "D", "AH0", "K", "T"], "PRODUCTION": ["P", "R", "AH0", "D", "AH1", "K", "SH", "AH0", "N"], "PRODUCTIONS": ["P", "R", "AH0", "D", "AH1", "K", "SH", "AH0", "N", "Z"], "PRODUCTIVE": ["P", "R", "AH0", "D", "AH1", "K", "T", "IH0", "V"], "PRODUCTIVITY": ["P", "R", "OW2", "D", "AH0", "K", "T", "IH1", "V", "AH0", "T", "IY0"], "PRODUCTS": ["P", "R", "AA1", "D", "AH0", "K", "T", "S"], "PROFESSION": ["P", "R", "AH0", "F", "EH1", "SH", "AH0", "N"], "PROFESSIONAL": ["P", "R", "AH0", "F", "EH1", "SH", "AH0", "N", "AH0", "L"], "PROFESSIONALS": ["P", "R", "AH0", "F", "EH1", "SH", "AH0", "N", "AH0", "L", "Z"], "PROFESSOR": ["P", "R", "AH0", "F", "EH1", "S", "ER0"], "PROFILE": ["P", "R", "OW1", "F", "AY2", "L"], "PROFILES": ["P", "R", "OW1", "F", "AY2", "L", "Z"], "PROFIT": ["P", "R", "AA1", "F", "AH0", "T"], "PROFITS": ["P", "R", "AA1", "F", "IH0", "T", "S"], "PROGRAM": ["P", "R", "OW1", "G", "R", "AE2", "M"], "PROGRAMME": ["P", "R", "OW1", "G", "R", "AE2", "M"], "PROGRAMMER": ["P", "R", "OW1", "G", "R", "AE2", "M", "ER0"], "PROGRAMMERS": ["P", "R", "OW1", "G", "R", "AE2", "M", "ER0", "Z"], "PROGRAMMING": ["P", "R", "OW1", "G", "R", "AE2", "M", "IH0", "NG"], "PROGRAMS": ["P", "R", "OW1", "G", "R", "AE2", "M", "Z"], "PROGRESS": ["P", "R", "AA1", "G", "R", "EH2", "S"], "PROGRESSIVE": ["P", "R", "AH0", "G", "R", "EH1", "S", "IH0", "V"], "PROHIBITED": ["P", "R", "OW0", "HH", "IH1", "B", "AH0", "T", "AH0", "D"], "PROJECT": ["P", "R", "AA1", "JH", "EH0", "K", "T"], "PROJECTED": ["P", "R", "AA0", "JH", "EH1", "K", "T", "AH0", "D"], "PROJECTION": ["P", "R", "AA0", "JH", "EH1", "K", "SH", "AH0", "N"], "PROJECTOR": ["P", "R", "AA0", "JH", "EH1", "K", "T", "ER0"], "PROJECTORS": ["P", "R", "AA0", "JH", "EH1", "K", "T", "ER0", "Z"], "PROJECTS": ["P", "R", "AA1", "JH", "EH0", "K", "T", "S"], "PROMINENT": ["P", "R", "AA1", "M", "AH0", "N", "AH0", "N", "T"], "PROMISE": ["P", "R", "AA1", "M", "AH0", "S"], "PROMISED": ["P", "R", "AA1", "M", "AH0", "S", "T"], "PROMISES": ["P", "R", "AA1", "M", "AH0", "S", "AH0", "Z"], "PROMISING": ["P", "R", "AA1", "M", "AH0", "S", "IH0", "NG"], "PROMO": ["P", "R", "OW1", "M", "OW2"], "PROMOTE": ["P", "R", "AH0", "M", "OW1", "T"], "PROMOTED": ["P", "R", "AH0", "M", "OW1", "T", "AH0", "D"], "PROMOTES": ["P", "R", "AH0", "M", "OW1", "T", "S"], "PROMOTING": ["P", "R", "AH0", "M", "OW1", "T", "IH0", "NG"], "PROMOTION": ["P", "R", "AH0", "M", "OW1", "SH", "AH0", "N"], "PROMOTIONAL": ["P", "R", "AH0", "M", "OW1", "SH", "AH0", "N", "AH0", "L"], "PROMOTIONS": ["P", "R", "AH0", "M", "OW1", "SH", "AH0", "N", "Z"], "PROMPT": ["P", "R", "AA1", "M", "P", "T"], "PROMPTLY": ["P", "R", "AA1", "M", "P", "T", "L", "IY0"], "PROOF": ["P", "R", "UW1", "F"], "PROPER": ["P", "R", "AA1", "P", "ER0"], "PROPERLY": ["P", "R", "AA1", "P", "ER0", "L", "IY0"], "PROPERTIES": ["P", "R", "AA1", "P", "ER0", "T", "IY0", "Z"], "PROPERTY": ["P", "R", "AA1", "P", "ER0", "T", "IY0"], "PROPHET": ["P", "R", "AA1", "F", "AH0", "T"], "PROPORTION": ["P", "R", "AH0", "P", "AO1", "R", "SH", "AH0", "N"], "PROPOSAL": ["P", "R", "AH0", "P", "OW1", "Z", "AH0", "L"], "PROPOSALS": ["P", "R", "AH0", "P", "OW1", "Z", "AH0", "L", "Z"], "PROPOSE": ["P", "R", "AH0", "P", "OW1", "Z"], "PROPOSED": ["P", "R", "AH0", "P", "OW1", "Z", "D"], "PROPOSITION": ["P", "R", "AA2", "P", "AH0", "Z", "IH1", "SH", "AH0", "N"], "PROPRIETARY": ["P", "R", "AH0", "P", "R", "AY1", "AH0", "T", "EH2", "R", "IY0"], "PROS": ["P", "R", "OW1", "Z"], "PROSPECT": ["P", "R", "AA1", "S", "P", "EH0", "K", "T"], "PROSPECTIVE": ["P", "R", "AH0", "S", "P", "EH1", "K", "T", "IH0", "V"], "PROSPECTS": ["P", "R", "AA1", "S", "P", "EH0", "K", "T", "S"], "PROSTATE": ["P", "R", "AA1", "S", "T", "EY2", "T"], "PROTECT": ["P", "R", "AH0", "T", "EH1", "K", "T"], "PROTECTED": ["P", "R", "AH0", "T", "EH1", "K", "T", "IH0", "D"], "PROTECTING": ["P", "R", "AH0", "T", "EH1", "K", "T", "IH0", "NG"], "PROTECTION": ["P", "R", "AH0", "T", "EH1", "K", "SH", "AH0", "N"], "PROTECTIVE": ["P", "R", "AH0", "T", "EH1", "K", "T", "IH0", "V"], "PROTEIN": ["P", "R", "OW1", "T", "IY2", "N"], "PROTEINS": ["P", "R", "OW1", "T", "IY2", "N", "Z"], "PROTEST": ["P", "R", "OW1", "T", "EH2", "S", "T"], "PROTOCOL": ["P", "R", "OW1", "T", "AH0", "K", "AA2", "L"], "PROTOCOLS": ["P", "R", "OW1", "T", "AH0", "K", "AO2", "L", "Z"], "PROTOTYPE": ["P", "R", "OW1", "T", "OW0", "T", "AY2", "P"], "PROUD": ["P", "R", "AW1", "D"], "PROUDLY": ["P", "R", "AW1", "D", "L", "IY0"], "PROVE": ["P", "R", "UW1", "V"], "PROVED": ["P", "R", "UW1", "V", "D"], "PROVEN": ["P", "R", "UW1", "V", "AH0", "N"], "PROVIDE": ["P", "R", "AH0", "V", "AY1", "D"], "PROVIDED": ["P", "R", "AH0", "V", "AY1", "D", "AH0", "D"], "PROVIDENCE": ["P", "R", "AA1", "V", "AH0", "D", "AH0", "N", "S"], "PROVIDER": ["P", "R", "AH0", "V", "AY1", "D", "ER0"], "PROVIDERS": ["P", "R", "AH0", "V", "AY1", "D", "ER0", "Z"], "PROVIDES": ["P", "R", "AH0", "V", "AY1", "D", "Z"], "PROVIDING": ["P", "R", "AH0", "V", "AY1", "D", "IH0", "NG"], "PROVINCE": ["P", "R", "AA1", "V", "AH0", "N", "S"], "PROVINCES": ["P", "R", "AA1", "V", "AH0", "N", "S", "AH0", "Z"], "PROVINCIAL": ["P", "R", "AH0", "V", "IH1", "N", "SH", "AH0", "L"], "PROVISION": ["P", "R", "AH0", "V", "IH1", "ZH", "AH0", "N"], "PROVISIONS": ["P", "R", "AH0", "V", "IH1", "ZH", "AH0", "N", "Z"], "PROXY": ["P", "R", "AA1", "K", "S", "IY0"], "PROZAC": ["P", "R", "OW1", "Z", "AE2", "K"], "PSI": ["S", "AY1"], "PSYCHIATRY": ["S", "AY0", "K", "AY1", "AH0", "T", "R", "IY0"], "PSYCHOLOGICAL": ["S", "AY2", "K", "AH0", "L", "AA1", "JH", "IH0", "K", "AH0", "L"], "PSYCHOLOGY": ["S", "AY0", "K", "AA1", "L", "AH0", "JH", "IY0"], "PTY": ["T", "AY1"], "PUB": ["P", "AH1", "B"], "PUBLIC": ["P", "AH1", "B", "L", "IH0", "K"], "PUBLICATION": ["P", "AH2", "B", "L", "IH0", "K", "EY1", "SH", "AH0", "N"], "PUBLICATIONS": ["P", "AH2", "B", "L", "IH0", "K", "EY1", "SH", "AH0", "N", "Z"], "PUBLICITY": ["P", "AH0", "B", "L", "IH1", "S", "AH0", "T", "IY0"], "PUBLICLY": ["P", "AH1", "B", "L", "IH0", "K", "L", "IY0"], "PUBLISH": ["P", "AH1", "B", "L", "IH0", "SH"], "PUBLISHED": ["P", "AH1", "B", "L", "IH0", "SH", "T"], "PUBLISHER": ["P", "AH1", "B", "L", "IH0", "SH", "ER0"], "PUBLISHERS": ["P", "AH1", "B", "L", "IH0", "SH", "ER0", "Z"], "PUBLISHING": ["P", "AH1", "B", "L", "IH0", "SH", "IH0", "NG"], "PUBS": ["P", "AH1", "B", "Z"], "PUERTO": ["P", "W", "EH1", "R", "T", "OW2"], "PULL": ["P", "UH1", "L"], "PULLED": ["P", "UH1", "L", "D"], "PULLING": ["P", "UH1", "L", "IH0", "NG"], "PULSE": ["P", "AH1", "L", "S"], "PUMP": ["P", "AH1", "M", "P"], "PUMPS": ["P", "AH1", "M", "P", "S"], "PUNCH": ["P", "AH1", "N", "CH"], "PUNISHMENT": ["P", "AH1", "N", "IH0", "SH", "M", "AH0", "N", "T"], "PUNK": ["P", "AH1", "NG", "K"], "PUPILS": ["P", "Y", "UW1", "P", "AH0", "L", "Z"], "PUPPY": ["P", "AH1", "P", "IY0"], "PURCHASE": ["P", "ER1", "CH", "AH0", "S"], "PURCHASED": ["P", "ER1", "CH", "AH0", "S", "T"], "PURCHASES": ["P", "ER1", "CH", "AH0", "S", "AH0", "Z"], "PURCHASING": ["P", "ER1", "CH", "AH0", "S", "IH0", "NG"], "PURE": ["P", "Y", "UH1", "R"], "PURPLE": ["P", "ER1", "P", "AH0", "L"], "PURPOSE": ["P", "ER1", "P", "AH0", "S"], "PURPOSES": ["P", "ER1", "P", "AH0", "S", "AH0", "Z"], "PURSE": ["P", "ER1", "S"], "PURSUANT": ["P", "ER0", "S", "UW1", "AH0", "N", "T"], "PURSUE": ["P", "ER0", "S", "UW1"], "PURSUIT": ["P", "ER0", "S", "UW1", "T"], "PUSH": ["P", "UH1", "SH"], "PUSHED": ["P", "UH1", "SH", "T"], "PUSHING": ["P", "UH1", "SH", "IH0", "NG"], "PUSSY": ["P", "UH1", "S", "IY0"], "PUT": ["P", "UH1", "T"], "PUTS": ["P", "UH1", "T", "S"], "PUTTING": ["P", "AH1", "T", "IH0", "NG"], "PUZZLE": ["P", "AH1", "Z", "AH0", "L"], "PUZZLES": ["P", "AH1", "Z", "AH0", "L", "Z"], "PYTHON": ["P", "AY1", "TH", "AA0", "N"], "Q": ["K", "Y", "UW1"], "QATAR": ["K", "AH2", "T", "AA1", "R"], "QUAD": ["K", "W", "AA1", "D"], "QUALIFICATION": ["K", "W", "AA2", "L", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N"], "QUALIFICATIONS": ["K", "W", "AA2", "L", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "QUALIFIED": ["K", "W", "AA1", "L", "AH0", "F", "AY2", "D"], "QUALIFY": ["K", "W", "AA1", "L", "AH0", "F", "AY2"], "QUALIFYING": ["K", "W", "AA1", "L", "AH0", "F", "AY2", "IH0", "NG"], "QUALITIES": ["K", "W", "AA1", "L", "AH0", "T", "IY0", "Z"], "QUALITY": ["K", "W", "AA1", "L", "AH0", "T", "IY0"], "QUANTITATIVE": ["K", "W", "AA1", "N", "T", "IH0", "T", "EY2", "T", "IH0", "V"], "QUANTITIES": ["K", "W", "AA1", "N", "T", "AH0", "T", "IY0", "Z"], "QUANTITY": ["K", "W", "AA1", "N", "T", "AH0", "T", "IY0"], "QUANTUM": ["K", "W", "AA1", "N", "T", "AH0", "M"], "QUARTER": ["K", "W", "AO1", "R", "T", "ER0"], "QUARTERLY": ["K", "W", "AO1", "R", "T", "ER0", "L", "IY0"], "QUARTERS": ["K", "W", "AO1", "R", "T", "ER0", "Z"], "QUE": ["K", "Y", "UW1"], "QUEBEC": ["K", "W", "AH0", "B", "EH1", "K"], "QUEEN": ["K", "W", "IY1", "N"], "QUEENS": ["K", "W", "IY1", "N", "Z"], "QUEENSLAND": ["K", "W", "IY1", "N", "Z", "L", "AE2", "N", "D"], "QUERIES": ["K", "W", "IH1", "R", "IY0", "Z"], "QUERY": ["K", "W", "IY1", "R", "IY0"], "QUEST": ["K", "W", "EH1", "S", "T"], "QUESTION": ["K", "W", "EH1", "S", "CH", "AH0", "N"], "QUESTIONNAIRE": ["K", "W", "EH2", "S", "CH", "AH0", "N", "EH1", "R"], "QUESTIONS": ["K", "W", "EH1", "S", "CH", "AH0", "N", "Z"], "QUEUE": ["K", "Y", "UW1"], "QUI": ["K", "IY1"], "QUICK": ["K", "W", "IH1", "K"], "QUICKLY": ["K", "W", "IH1", "K", "L", "IY0"], "QUIET": ["K", "W", "AY1", "AH0", "T"], "QUILT": ["K", "W", "IH1", "L", "T"], "QUIT": ["K", "W", "IH1", "T"], "QUITE": ["K", "W", "AY1", "T"], "QUIZ": ["K", "W", "IH1", "Z"], "QUIZZES": ["K", "W", "IH1", "Z", "IH0", "Z"], "QUOTATIONS": ["K", "W", "OW0", "T", "EY1", "SH", "AH0", "N", "Z"], "QUOTE": ["K", "W", "OW1", "T"], "QUOTED": ["K", "W", "OW1", "T", "IH0", "D"], "QUOTES": ["K", "W", "OW1", "T", "S"], "R": ["AA1", "R"], "RA": ["R", "AA1"], "RABBIT": ["R", "AE1", "B", "AH0", "T"], "RACE": ["R", "EY1", "S"], "RACES": ["R", "EY1", "S", "AH0", "Z"], "RACHEL": ["R", "EY1", "CH", "AH0", "L"], "RACIAL": ["R", "EY1", "SH", "AH0", "L"], "RACING": ["R", "EY1", "S", "IH0", "NG"], "RACK": ["R", "AE1", "K"], "RACKS": ["R", "AE1", "K", "S"], "RADAR": ["R", "EY1", "D", "AA2", "R"], "RADIATION": ["R", "EY2", "D", "IY0", "EY1", "SH", "AH0", "N"], "RADICAL": ["R", "AE1", "D", "IH0", "K", "AH0", "L"], "RADIO": ["R", "EY1", "D", "IY0", "OW2"], "RADIOS": ["R", "EY1", "D", "IY0", "OW2", "Z"], "RADIUS": ["R", "EY1", "D", "IY0", "AH0", "S"], "RAGE": ["R", "EY1", "JH"], "RAID": ["R", "EY1", "D"], "RAIL": ["R", "EY1", "L"], "RAILROAD": ["R", "EY1", "L", "R", "OW2", "D"], "RAILWAY": ["R", "EY1", "L", "W", "EY2"], "RAIN": ["R", "EY1", "N"], "RAINBOW": ["R", "EY1", "N", "B", "OW2"], "RAISE": ["R", "EY1", "Z"], "RAISED": ["R", "EY1", "Z", "D"], "RAISES": ["R", "EY1", "Z", "AH0", "Z"], "RAISING": ["R", "EY1", "Z", "IH0", "NG"], "RALEIGH": ["R", "AO1", "L", "IY0"], "RALLY": ["R", "AE1", "L", "IY0"], "RALPH": ["R", "AE1", "L", "F"], "RAM": ["R", "AE1", "M"], "RAN": ["R", "AE1", "N"], "RANCH": ["R", "AE1", "N", "CH"], "RAND": ["R", "AE1", "N", "D"], "RANDOM": ["R", "AE1", "N", "D", "AH0", "M"], "RANDY": ["R", "AE1", "N", "D", "IY0"], "RANGE": ["R", "EY1", "N", "JH"], "RANGERS": ["R", "EY1", "N", "JH", "ER0", "Z"], "RANGES": ["R", "EY1", "N", "JH", "AH0", "Z"], "RANGING": ["R", "EY1", "N", "JH", "IH0", "NG"], "RANK": ["R", "AE1", "NG", "K"], "RANKED": ["R", "AE1", "NG", "K", "T"], "RANKING": ["R", "AE1", "NG", "K", "IH0", "NG"], "RANKINGS": ["R", "AE1", "NG", "K", "IH0", "NG", "Z"], "RANKS": ["R", "AE1", "NG", "K", "S"], "RAP": ["R", "AE1", "P"], "RAPE": ["R", "EY1", "P"], "RAPID": ["R", "AE1", "P", "AH0", "D"], "RAPIDLY": ["R", "AE1", "P", "AH0", "D", "L", "IY0"], "RAPIDS": ["R", "AE1", "P", "AH0", "D", "Z"], "RARE": ["R", "EH1", "R"], "RARELY": ["R", "EH1", "R", "L", "IY0"], "RAT": ["R", "AE1", "T"], "RATE": ["R", "EY1", "T"], "RATED": ["R", "EY1", "T", "AH0", "D"], "RATES": ["R", "EY1", "T", "S"], "RATHER": ["R", "AE1", "DH", "ER0"], "RATING": ["R", "EY1", "T", "IH0", "NG"], "RATINGS": ["R", "EY1", "T", "IH0", "NG", "Z"], "RATIO": ["R", "EY1", "SH", "IY0", "OW2"], "RATIONAL": ["R", "AE1", "SH", "AH0", "N", "AH0", "L"], "RATIOS": ["R", "EY1", "SH", "IY0", "OW2", "Z"], "RATS": ["R", "AE1", "T", "S"], "RAW": ["R", "AA1"], "RAY": ["R", "EY1"], "RAYMOND": ["R", "EY1", "M", "AH0", "N", "D"], "RAYS": ["R", "EY1", "Z"], "RE": ["R", "EY1"], "REACH": ["R", "IY1", "CH"], "REACHED": ["R", "IY1", "CH", "T"], "REACHES": ["R", "IY1", "CH", "AH0", "Z"], "REACHING": ["R", "IY1", "CH", "IH0", "NG"], "REACTION": ["R", "IY0", "AE1", "K", "SH", "AH0", "N"], "REACTIONS": ["R", "IY0", "AE1", "K", "SH", "AH0", "N", "Z"], "READ": ["R", "EH1", "D"], "READER": ["R", "IY1", "D", "ER0"], "READERS": ["R", "IY1", "D", "ER0", "Z"], "READILY": ["R", "EH1", "D", "AH0", "L", "IY0"], "READING": ["R", "IY1", "D", "IH0", "NG"], "READINGS": ["R", "IY1", "D", "IH0", "NG", "Z"], "READS": ["R", "IY1", "D", "Z"], "READY": ["R", "EH1", "D", "IY0"], "REAL": ["R", "IY1", "L"], "REALISTIC": ["R", "IY2", "AH0", "L", "IH1", "S", "T", "IH0", "K"], "REALITY": ["R", "IY2", "AE1", "L", "AH0", "T", "IY2"], "REALIZE": ["R", "IY1", "AH0", "L", "AY2", "Z"], "REALIZED": ["R", "IY1", "AH0", "L", "AY2", "Z", "D"], "REALLY": ["R", "IH1", "L", "IY0"], "REALM": ["R", "EH1", "L", "M"], "REALTOR": ["R", "IY1", "AH0", "L", "T", "ER0"], "REALTORS": ["R", "IY1", "AH0", "L", "T", "ER0", "Z"], "REALTY": ["R", "IY1", "AH0", "L", "T", "IY2"], "REAR": ["R", "IH1", "R"], "REASON": ["R", "IY1", "Z", "AH0", "N"], "REASONABLE": ["R", "IY1", "Z", "AH0", "N", "AH0", "B", "AH0", "L"], "REASONABLY": ["R", "IY1", "Z", "AH0", "N", "AH0", "B", "L", "IY0"], "REASONING": ["R", "IY1", "Z", "AH0", "N", "IH0", "NG"], "REASONS": ["R", "IY1", "Z", "AH0", "N", "Z"], "REBATE": ["R", "IY1", "B", "EY2", "T"], "REBATES": ["R", "IY1", "B", "EY2", "T", "S"], "REBECCA": ["R", "AH0", "B", "EH1", "K", "AH0"], "REBEL": ["R", "EH1", "B", "AH0", "L"], "REBOUND": ["R", "IY0", "B", "AW1", "N", "D"], "REC": ["R", "EH1", "K"], "RECALL": ["R", "IY1", "K", "AO2", "L"], "RECEIPT": ["R", "IH0", "S", "IY1", "T"], "RECEIVE": ["R", "AH0", "S", "IY1", "V"], "RECEIVED": ["R", "AH0", "S", "IY1", "V", "D"], "RECEIVER": ["R", "AH0", "S", "IY1", "V", "ER0"], "RECEIVERS": ["R", "AH0", "S", "IY1", "V", "ER0", "Z"], "RECEIVES": ["R", "AH0", "S", "IY1", "V", "Z"], "RECEIVING": ["R", "AH0", "S", "IY1", "V", "IH0", "NG"], "RECENT": ["R", "IY1", "S", "AH0", "N", "T"], "RECENTLY": ["R", "IY1", "S", "AH0", "N", "T", "L", "IY0"], "RECEPTION": ["R", "IH0", "S", "EH1", "P", "SH", "AH0", "N"], "RECEPTOR": ["R", "IY0", "S", "EH1", "P", "T", "ER0"], "RECEPTORS": ["R", "AH0", "S", "EH1", "P", "T", "ER0", "Z"], "RECIPE": ["R", "EH1", "S", "AH0", "P", "IY0"], "RECIPES": ["R", "EH1", "S", "AH0", "P", "IY0", "Z"], "RECIPIENT": ["R", "AH0", "S", "IH1", "P", "IY0", "AH0", "N", "T"], "RECIPIENTS": ["R", "IH0", "S", "IH1", "P", "IY0", "AH0", "N", "T", "S"], "RECOGNISED": ["R", "EH1", "K", "AH0", "G", "N", "AY2", "Z", "D"], "RECOGNITION": ["R", "EH2", "K", "AH0", "G", "N", "IH1", "SH", "AH0", "N"], "RECOGNIZE": ["R", "EH1", "K", "AH0", "G", "N", "AY2", "Z"], "RECOGNIZED": ["R", "EH1", "K", "AH0", "G", "N", "AY2", "Z", "D"], "RECOMMEND": ["R", "EH2", "K", "AH0", "M", "EH1", "N", "D"], "RECOMMENDATION": ["R", "EH2", "K", "AH0", "M", "AH0", "N", "D", "EY1", "SH", "AH0", "N"], "RECOMMENDATIONS": ["R", "EH2", "K", "AH0", "M", "AH0", "N", "D", "EY1", "SH", "AH0", "N", "Z"], "RECOMMENDED": ["R", "EH2", "K", "AH0", "M", "EH1", "N", "D", "AH0", "D"], "RECOMMENDS": ["R", "EH2", "K", "AH0", "M", "EH1", "N", "D", "Z"], "RECONSTRUCTION": ["R", "IY2", "K", "AH0", "N", "S", "T", "R", "AH1", "K", "SH", "AH0", "N"], "RECORD": ["R", "AH0", "K", "AO1", "R", "D"], "RECORDED": ["R", "AH0", "K", "AO1", "R", "D", "AH0", "D"], "RECORDER": ["R", "IH0", "K", "AO1", "R", "D", "ER0"], "RECORDERS": ["R", "IH0", "K", "AO1", "R", "D", "ER0", "Z"], "RECORDING": ["R", "AH0", "K", "AO1", "R", "D", "IH0", "NG"], "RECORDINGS": ["R", "IH0", "K", "AO1", "R", "D", "IH0", "NG", "Z"], "RECORDS": ["R", "AH0", "K", "AO1", "R", "D", "Z"], "RECOVER": ["R", "IH0", "K", "AH1", "V", "ER0"], "RECOVERED": ["R", "AH0", "K", "AH1", "V", "ER0", "D"], "RECOVERY": ["R", "IH0", "K", "AH1", "V", "R", "IY0"], "RECREATION": ["R", "EH2", "K", "R", "IY0", "EY1", "SH", "AH0", "N"], "RECREATIONAL": ["R", "EH2", "K", "R", "IY0", "EY1", "SH", "AH0", "N", "AH0", "L"], "RECRUITING": ["R", "AH0", "K", "R", "UW1", "T", "IH0", "NG"], "RECRUITMENT": ["R", "AH0", "K", "R", "UW1", "T", "M", "AH0", "N", "T"], "RECYCLING": ["R", "IY0", "S", "AY1", "K", "AH0", "L", "IH0", "NG"], "RED": ["R", "EH1", "D"], "REDEEM": ["R", "IH0", "D", "IY1", "M"], "REDHEAD": ["R", "EH1", "D", "HH", "EH2", "D"], "REDUCE": ["R", "IH0", "D", "UW1", "S"], "REDUCED": ["R", "IH0", "D", "UW1", "S", "T"], "REDUCES": ["R", "IH0", "D", "UW1", "S", "IH0", "Z"], "REDUCING": ["R", "IH0", "D", "UW1", "S", "IH0", "NG"], "REDUCTION": ["R", "IH0", "D", "AH1", "K", "SH", "AH0", "N"], "REDUCTIONS": ["R", "IH0", "D", "AH1", "K", "SH", "AH0", "N", "Z"], "REED": ["R", "IY1", "D"], "REEF": ["R", "IY1", "F"], "REEL": ["R", "IY1", "L"], "REF": ["R", "EH1", "F"], "REFER": ["R", "AH0", "F", "ER1"], "REFERENCE": ["R", "EH1", "F", "ER0", "AH0", "N", "S"], "REFERENCED": ["R", "EH1", "F", "ER0", "AH0", "N", "S", "T"], "REFERENCES": ["R", "EH1", "F", "ER0", "AH0", "N", "S", "IH0", "Z"], "REFERRAL": ["R", "IH0", "F", "ER1", "AH0", "L"], "REFERRALS": ["R", "IH0", "F", "ER1", "AH0", "L", "Z"], "REFERRED": ["R", "AH0", "F", "ER1", "D"], "REFERRING": ["R", "IH0", "F", "ER1", "IH0", "NG"], "REFERS": ["R", "AH0", "F", "ER1", "Z"], "REFINANCE": ["R", "IY2", "F", "AH0", "N", "AE1", "N", "S"], "REFINE": ["R", "AH0", "F", "AY1", "N"], "REFINED": ["R", "AH0", "F", "AY1", "N", "D"], "REFLECT": ["R", "AH0", "F", "L", "EH1", "K", "T"], "REFLECTED": ["R", "AH0", "F", "L", "EH1", "K", "T", "AH0", "D"], "REFLECTION": ["R", "AH0", "F", "L", "EH1", "K", "SH", "AH0", "N"], "REFLECTIONS": ["R", "IH0", "F", "L", "EH1", "K", "SH", "AH0", "N", "Z"], "REFLECTS": ["R", "IH0", "F", "L", "EH1", "K", "T", "S"], "REFORM": ["R", "AH0", "F", "AO1", "R", "M"], "REFORMS": ["R", "AH0", "F", "AO1", "R", "M", "Z"], "REFRESH": ["R", "IH0", "F", "R", "EH1", "SH"], "REFRIGERATOR": ["R", "AH0", "F", "R", "IH1", "JH", "ER0", "EY2", "T", "ER0"], "REFUGEES": ["R", "EH1", "F", "Y", "UW2", "JH", "IY0", "Z"], "REFUND": ["R", "IH0", "F", "AH1", "N", "D"], "REFURBISHED": ["R", "IY0", "F", "ER1", "B", "IH0", "SH", "T"], "REFUSE": ["R", "AH0", "F", "Y", "UW1", "Z"], "REFUSED": ["R", "AH0", "F", "Y", "UW1", "Z", "D"], "REG": ["R", "EH1", "G"], "REGARD": ["R", "AH0", "G", "AA1", "R", "D"], "REGARDED": ["R", "AH0", "G", "AA1", "R", "D", "AH0", "D"], "REGARDING": ["R", "AH0", "G", "AA1", "R", "D", "IH0", "NG"], "REGARDLESS": ["R", "AH0", "G", "AA1", "R", "D", "L", "AH0", "S"], "REGARDS": ["R", "IH0", "G", "AA1", "R", "D", "Z"], "REGGAE": ["R", "EH1", "G", "EY2"], "REGIME": ["R", "AH0", "ZH", "IY1", "M"], "REGION": ["R", "IY1", "JH", "AH0", "N"], "REGIONAL": ["R", "IY1", "JH", "AH0", "N", "AH0", "L"], "REGIONS": ["R", "IY1", "JH", "AH0", "N", "Z"], "REGISTER": ["R", "EH1", "JH", "IH0", "S", "T", "ER0"], "REGISTERED": ["R", "EH1", "JH", "IH0", "S", "T", "ER0", "D"], "REGISTRAR": ["R", "EH1", "JH", "IH0", "S", "T", "R", "AA2", "R"], "REGISTRATION": ["R", "EH2", "JH", "IH0", "S", "T", "R", "EY1", "SH", "AH0", "N"], "REGISTRY": ["R", "EH1", "JH", "IH0", "S", "T", "R", "IY0"], "REGRESSION": ["R", "AH0", "G", "R", "EH1", "SH", "AH0", "N"], "REGULAR": ["R", "EH1", "G", "Y", "AH0", "L", "ER0"], "REGULARLY": ["R", "EH1", "G", "Y", "AH0", "L", "ER0", "L", "IY0"], "REGULATED": ["R", "EH1", "G", "Y", "AH0", "L", "EY2", "T", "AH0", "D"], "REGULATION": ["R", "EH2", "G", "Y", "AH0", "L", "EY1", "SH", "AH0", "N"], "REGULATIONS": ["R", "EH2", "G", "Y", "AH0", "L", "EY1", "SH", "AH0", "N", "Z"], "REGULATORY": ["R", "EH1", "G", "Y", "AH0", "L", "AH0", "T", "AO2", "R", "IY0"], "REHAB": ["R", "IY0", "HH", "AE0", "B"], "REHABILITATION": ["R", "IY2", "HH", "AH0", "B", "IH2", "L", "AH0", "T", "EY1", "SH", "AH0", "N"], "REID": ["R", "IY1", "D"], "REJECT": ["R", "IH0", "JH", "EH1", "K", "T"], "REJECTED": ["R", "IH0", "JH", "EH1", "K", "T", "IH0", "D"], "RELATE": ["R", "IH0", "L", "EY1", "T"], "RELATED": ["R", "IH0", "L", "EY1", "T", "IH0", "D"], "RELATES": ["R", "IH0", "L", "EY1", "T", "S"], "RELATING": ["R", "IH0", "L", "EY1", "T", "IH0", "NG"], "RELATION": ["R", "IY0", "L", "EY1", "SH", "AH0", "N"], "RELATIONS": ["R", "IY0", "L", "EY1", "SH", "AH0", "N", "Z"], "RELATIONSHIP": ["R", "IY0", "L", "EY1", "SH", "AH0", "N", "SH", "IH2", "P"], "RELATIONSHIPS": ["R", "IY0", "L", "EY1", "SH", "AH0", "N", "SH", "IH2", "P", "S"], "RELATIVE": ["R", "EH1", "L", "AH0", "T", "IH0", "V"], "RELATIVELY": ["R", "EH1", "L", "AH0", "T", "IH0", "V", "L", "IY0"], "RELATIVES": ["R", "EH1", "L", "AH0", "T", "IH0", "V", "Z"], "RELAX": ["R", "IH0", "L", "AE1", "K", "S"], "RELAXATION": ["R", "IY2", "L", "AE0", "K", "S", "EY1", "SH", "AH0", "N"], "RELAY": ["R", "IY1", "L", "EY2"], "RELEASE": ["R", "IY0", "L", "IY1", "S"], "RELEASED": ["R", "IY0", "L", "IY1", "S", "T"], "RELEASES": ["R", "IH0", "L", "IY1", "S", "IH0", "Z"], "RELEVANCE": ["R", "EH1", "L", "AH0", "V", "AH0", "N", "S"], "RELEVANT": ["R", "EH1", "L", "AH0", "V", "AH0", "N", "T"], "RELIABILITY": ["R", "IY0", "L", "AY2", "AH0", "B", "IH1", "L", "AH0", "T", "IY0"], "RELIABLE": ["R", "IH0", "L", "AY1", "AH0", "B", "AH0", "L"], "RELIANCE": ["R", "IH0", "L", "AY1", "AH0", "N", "S"], "RELIEF": ["R", "IH0", "L", "IY1", "F"], "RELIGION": ["R", "IH0", "L", "IH1", "JH", "AH0", "N"], "RELIGIONS": ["R", "IY0", "L", "IH1", "JH", "AH0", "N", "Z"], "RELIGIOUS": ["R", "IH0", "L", "IH1", "JH", "AH0", "S"], "RELOAD": ["R", "IY0", "L", "OW1", "D"], "RELOCATION": ["R", "IY2", "L", "OW1", "K", "EY1", "SH", "AH0", "N"], "RELY": ["R", "IH0", "L", "AY1"], "RELYING": ["R", "IY0", "L", "AY1", "IH0", "NG"], "REMAIN": ["R", "IH0", "M", "EY1", "N"], "REMAINDER": ["R", "IH0", "M", "EY1", "N", "D", "ER0"], "REMAINED": ["R", "IH0", "M", "EY1", "N", "D"], "REMAINING": ["R", "IH0", "M", "EY1", "N", "IH0", "NG"], "REMAINS": ["R", "IH0", "M", "EY1", "N", "Z"], "REMARK": ["R", "IH0", "M", "AA1", "R", "K"], "REMARKABLE": ["R", "IH0", "M", "AA1", "R", "K", "AH0", "B", "AH0", "L"], "REMARKS": ["R", "IH0", "M", "AA1", "R", "K", "S"], "REMEDIES": ["R", "EH1", "M", "AH0", "D", "IY0", "Z"], "REMEDY": ["R", "EH1", "M", "AH0", "D", "IY0"], "REMEMBER": ["R", "IH0", "M", "EH1", "M", "B", "ER0"], "REMEMBERED": ["R", "IH0", "M", "EH1", "M", "B", "ER0", "D"], "REMIND": ["R", "IY0", "M", "AY1", "N", "D"], "REMINDER": ["R", "IY0", "M", "AY1", "N", "D", "ER0"], "REMOTE": ["R", "IH0", "M", "OW1", "T"], "REMOVABLE": ["R", "IH0", "M", "UW1", "V", "AH0", "B", "AH0", "L"], "REMOVAL": ["R", "IH0", "M", "UW1", "V", "AH0", "L"], "REMOVE": ["R", "IY0", "M", "UW1", "V"], "REMOVED": ["R", "IY0", "M", "UW1", "V", "D"], "REMOVING": ["R", "IY0", "M", "UW1", "V", "IH0", "NG"], "RENAISSANCE": ["R", "EH2", "N", "AH0", "S", "AA1", "N", "S"], "RENDER": ["R", "EH1", "N", "D", "ER0"], "RENDERED": ["R", "EH1", "N", "D", "ER0", "D"], "RENDERING": ["R", "EH1", "N", "D", "ER0", "IH0", "NG"], "RENEW": ["R", "IH0", "N", "UW1"], "RENEWABLE": ["R", "IY0", "N", "UW1", "AH0", "B", "AH0", "L"], "RENEWAL": ["R", "IH0", "N", "UW1", "AH0", "L"], "RENO": ["R", "IY1", "N", "OW0"], "RENT": ["R", "EH1", "N", "T"], "RENTAL": ["R", "EH1", "N", "T", "AH0", "L"], "RENTALS": ["R", "EH1", "N", "T", "AH0", "L", "Z"], "REP": ["R", "EH1", "P"], "REPAIR": ["R", "IH0", "P", "EH1", "R"], "REPAIRS": ["R", "IH0", "P", "EH1", "R", "Z"], "REPEAT": ["R", "IH0", "P", "IY1", "T"], "REPEATED": ["R", "IH0", "P", "IY1", "T", "IH0", "D"], "REPLACE": ["R", "IY2", "P", "L", "EY1", "S"], "REPLACED": ["R", "IY2", "P", "L", "EY1", "S", "T"], "REPLACEMENT": ["R", "IH0", "P", "L", "EY1", "S", "M", "AH0", "N", "T"], "REPLACING": ["R", "IH0", "P", "L", "EY1", "S", "IH0", "NG"], "REPLICA": ["R", "EH1", "P", "L", "IH0", "K", "AH0"], "REPLICATION": ["R", "EH2", "P", "L", "IH0", "K", "EY1", "SH", "AH0", "N"], "REPLIED": ["R", "IH0", "P", "L", "AY1", "D"], "REPLIES": ["R", "IH0", "P", "L", "AY1", "Z"], "REPLY": ["R", "IH0", "P", "L", "AY1"], "REPORT": ["R", "IY0", "P", "AO1", "R", "T"], "REPORTED": ["R", "IY2", "P", "AO1", "R", "T", "AH0", "D"], "REPORTER": ["R", "IH0", "P", "AO1", "R", "T", "ER0"], "REPORTERS": ["R", "IH0", "P", "AO1", "R", "T", "ER0", "Z"], "REPORTING": ["R", "IY0", "P", "AO1", "R", "T", "IH0", "NG"], "REPORTS": ["R", "IH0", "P", "AO1", "R", "T", "S"], "REPOSITORY": ["R", "IY0", "P", "AA1", "Z", "AH0", "T", "AO2", "R", "IY0"], "REPRESENT": ["R", "EH2", "P", "R", "AH0", "Z", "EH1", "N", "T"], "REPRESENTATION": ["R", "EH2", "P", "R", "AH0", "Z", "EH0", "N", "T", "EY1", "SH", "AH0", "N"], "REPRESENTATIONS": ["R", "EH2", "P", "R", "AH0", "Z", "AH0", "N", "T", "EY1", "SH", "AH0", "N", "Z"], "REPRESENTATIVE": ["R", "EH2", "P", "R", "AH0", "Z", "EH1", "N", "T", "AH0", "T", "IH0", "V"], "REPRESENTATIVES": ["R", "EH2", "P", "R", "AH0", "Z", "EH1", "N", "T", "AH0", "T", "IH0", "V", "Z"], "REPRESENTED": ["R", "EH2", "P", "R", "AH0", "Z", "EH1", "N", "T", "AH0", "D"], "REPRESENTING": ["R", "EH2", "P", "R", "IH0", "Z", "EH1", "N", "T", "IH0", "NG"], "REPRESENTS": ["R", "EH2", "P", "R", "AH0", "Z", "EH1", "N", "T", "S"], "REPRINT": ["R", "IY0", "P", "R", "IH1", "N", "T"], "REPRINTS": ["R", "IY0", "P", "R", "IH1", "N", "T", "S"], "REPRODUCE": ["R", "IY2", "P", "R", "AH0", "D", "UW1", "S"], "REPRODUCED": ["R", "IY2", "P", "R", "AH0", "D", "UW1", "S", "T"], "REPRODUCTION": ["R", "IY2", "P", "R", "AH0", "D", "AH1", "K", "SH", "AH0", "N"], "REPRODUCTIVE": ["R", "IY2", "P", "R", "AH0", "D", "AH1", "K", "T", "IH0", "V"], "REPUBLIC": ["R", "IY0", "P", "AH1", "B", "L", "AH0", "K"], "REPUBLICAN": ["R", "IH0", "P", "AH1", "B", "L", "IH0", "K", "AH0", "N"], "REPUBLICANS": ["R", "IH0", "P", "AH1", "B", "L", "IH0", "K", "AH0", "N", "Z"], "REPUTATION": ["R", "EH2", "P", "Y", "AH0", "T", "EY1", "SH", "AH0", "N"], "REQUEST": ["R", "IH0", "K", "W", "EH1", "S", "T"], "REQUESTED": ["R", "IH0", "K", "W", "EH1", "S", "T", "IH0", "D"], "REQUESTING": ["R", "IH0", "K", "W", "EH1", "S", "T", "IH0", "NG"], "REQUESTS": ["R", "IH0", "K", "W", "EH1", "S", "T", "S"], "REQUIRE": ["R", "IY2", "K", "W", "AY1", "ER0"], "REQUIRED": ["R", "IY0", "K", "W", "AY1", "ER0", "D"], "REQUIREMENT": ["R", "IH0", "K", "W", "AY1", "R", "M", "AH0", "N", "T"], "REQUIREMENTS": ["R", "IH0", "K", "W", "AY1", "R", "M", "AH0", "N", "T", "S"], "REQUIRES": ["R", "IY0", "K", "W", "AY1", "ER0", "Z"], "REQUIRING": ["R", "IY0", "K", "W", "AY1", "ER0", "IH0", "NG"], "RES": ["R", "EY1", "Z"], "RESCUE": ["R", "EH1", "S", "K", "Y", "UW0"], "RESEARCH": ["R", "IY0", "S", "ER1", "CH"], "RESEARCHER": ["R", "IY1", "S", "ER0", "CH", "ER0"], "RESEARCHERS": ["R", "IY1", "S", "ER0", "CH", "ER0", "Z"], "RESELLER": ["R", "IY0", "S", "EH1", "L", "ER0"], "RESERVATION": ["R", "EH2", "Z", "ER0", "V", "EY1", "SH", "AH0", "N"], "RESERVATIONS": ["R", "EH2", "Z", "ER0", "V", "EY1", "SH", "AH0", "N", "Z"], "RESERVE": ["R", "IH0", "Z", "ER1", "V"], "RESERVED": ["R", "IH0", "Z", "ER1", "V", "D"], "RESERVES": ["R", "IH0", "Z", "ER1", "V", "Z"], "RESERVOIR": ["R", "EH1", "Z", "AH0", "V", "W", "AA2", "R"], "RESET": ["R", "IY0", "S", "EH1", "T"], "RESIDENCE": ["R", "EH1", "Z", "IH0", "D", "AH0", "N", "S"], "RESIDENT": ["R", "EH1", "Z", "IH0", "D", "AH0", "N", "T"], "RESIDENTIAL": ["R", "EH2", "Z", "IH0", "D", "EH1", "N", "SH", "AH0", "L"], "RESIDENTS": ["R", "EH1", "Z", "IH0", "D", "AH0", "N", "T", "S"], "RESIST": ["R", "IH0", "Z", "IH1", "S", "T"], "RESISTANCE": ["R", "IH0", "Z", "IH1", "S", "T", "AH0", "N", "S"], "RESISTANT": ["R", "IH0", "Z", "IH1", "S", "T", "AH0", "N", "T"], "RESOLUTION": ["R", "EH2", "Z", "AH0", "L", "UW1", "SH", "AH0", "N"], "RESOLUTIONS": ["R", "EH2", "Z", "AH0", "L", "UW1", "SH", "AH0", "N", "Z"], "RESOLVE": ["R", "IY0", "Z", "AA1", "L", "V"], "RESOLVED": ["R", "IY0", "Z", "AA1", "L", "V", "D"], "RESORT": ["R", "IH0", "Z", "AO1", "R", "T"], "RESORTS": ["R", "IH0", "Z", "AO1", "R", "T", "S"], "RESOURCE": ["R", "IY1", "S", "AO0", "R", "S"], "RESOURCES": ["R", "IY1", "S", "AO0", "R", "S", "IH0", "Z"], "RESPECT": ["R", "IH0", "S", "P", "EH1", "K", "T"], "RESPECTED": ["R", "IH0", "S", "P", "EH1", "K", "T", "IH0", "D"], "RESPECTIVE": ["R", "IH0", "S", "P", "EH1", "K", "T", "IH0", "V"], "RESPECTIVELY": ["R", "IH0", "S", "P", "EH1", "K", "T", "IH0", "V", "L", "IY0"], "RESPIRATORY": ["R", "EH1", "S", "P", "ER0", "AH0", "T", "AO2", "R", "IY0"], "RESPOND": ["R", "IH0", "S", "P", "AA1", "N", "D"], "RESPONDED": ["R", "IH0", "S", "P", "AA1", "N", "D", "IH0", "D"], "RESPONDENT": ["R", "IH0", "S", "P", "AA1", "N", "D", "AH0", "N", "T"], "RESPONDENTS": ["R", "IH0", "S", "P", "AA1", "N", "D", "AH0", "N", "T", "S"], "RESPONDING": ["R", "IH0", "S", "P", "AA1", "N", "D", "IH0", "NG"], "RESPONSE": ["R", "IH0", "S", "P", "AA1", "N", "S"], "RESPONSES": ["R", "IH0", "S", "P", "AA1", "N", "S", "IH0", "Z"], "RESPONSIBILITIES": ["R", "IY0", "S", "P", "AA2", "N", "S", "AH0", "B", "IH1", "L", "AH0", "T", "IY0", "Z"], "RESPONSIBILITY": ["R", "IY0", "S", "P", "AA2", "N", "S", "AH0", "B", "IH1", "L", "AH0", "T", "IY0"], "RESPONSIBLE": ["R", "IY0", "S", "P", "AA1", "N", "S", "AH0", "B", "AH0", "L"], "REST": ["R", "EH1", "S", "T"], "RESTAURANT": ["R", "EH1", "S", "T", "ER0", "AA2", "N", "T"], "RESTAURANTS": ["R", "EH1", "S", "T", "ER0", "AA2", "N", "T", "S"], "RESTORATION": ["R", "EH2", "S", "T", "ER0", "EY1", "SH", "AH0", "N"], "RESTORE": ["R", "IH0", "S", "T", "AO1", "R"], "RESTORED": ["R", "IH0", "S", "T", "AO1", "R", "D"], "RESTRICT": ["R", "IY0", "S", "T", "R", "IH1", "K", "T"], "RESTRICTED": ["R", "IY0", "S", "T", "R", "IH1", "K", "T", "AH0", "D"], "RESTRICTION": ["R", "IY0", "S", "T", "R", "IH1", "K", "SH", "AH0", "N"], "RESTRICTIONS": ["R", "IY0", "S", "T", "R", "IH1", "K", "SH", "AH0", "N", "Z"], "RESTRUCTURING": ["R", "IY0", "S", "T", "R", "AH1", "K", "CH", "ER0", "IH0", "NG"], "RESULT": ["R", "IH0", "Z", "AH1", "L", "T"], "RESULTED": ["R", "IH0", "Z", "AH1", "L", "T", "IH0", "D"], "RESULTING": ["R", "IH0", "Z", "AH1", "L", "T", "IH0", "NG"], "RESULTS": ["R", "IH0", "Z", "AH1", "L", "T", "S"], "RESUME": ["R", "IH0", "Z", "UW1", "M"], "RESUMES": ["R", "IH0", "Z", "UW1", "M", "Z"], "RETAIL": ["R", "IY1", "T", "EY2", "L"], "RETAILER": ["R", "IY1", "T", "EY2", "L", "ER0"], "RETAILERS": ["R", "IY1", "T", "EY2", "L", "ER0", "Z"], "RETAIN": ["R", "IH0", "T", "EY1", "N"], "RETAINED": ["R", "IH0", "T", "EY1", "N", "D"], "RETENTION": ["R", "IY0", "T", "EH1", "N", "SH", "AH0", "N"], "RETIRED": ["R", "IH0", "T", "AY1", "R", "D"], "RETIREMENT": ["R", "IY0", "T", "AY1", "ER0", "M", "AH0", "N", "T"], "RETREAT": ["R", "IY0", "T", "R", "IY1", "T"], "RETRIEVAL": ["R", "IH0", "T", "R", "IY1", "V", "AH0", "L"], "RETRIEVE": ["R", "IH0", "T", "R", "IY1", "V"], "RETRIEVED": ["R", "IY0", "T", "R", "IY1", "V", "D"], "RETRO": ["R", "EH1", "T", "R", "OW0"], "RETURN": ["R", "IH0", "T", "ER1", "N"], "RETURNED": ["R", "IH0", "T", "ER1", "N", "D"], "RETURNING": ["R", "IH0", "T", "ER1", "N", "IH0", "NG"], "RETURNS": ["R", "IH0", "T", "ER1", "N", "Z"], "REUNION": ["R", "IY0", "UW1", "N", "Y", "AH0", "N"], "REUTERS": ["R", "OY1", "T", "ER0", "Z"], "REV": ["R", "EH1", "V"], "REVEAL": ["R", "IH0", "V", "IY1", "L"], "REVEALED": ["R", "IH0", "V", "IY1", "L", "D"], "REVEALS": ["R", "IH0", "V", "IY1", "L", "Z"], "REVELATION": ["R", "EH2", "V", "AH0", "L", "EY1", "SH", "AH0", "N"], "REVENGE": ["R", "IY0", "V", "EH1", "N", "JH"], "REVENUE": ["R", "EH1", "V", "AH0", "N", "UW2"], "REVENUES": ["R", "EH1", "V", "AH0", "N", "UW2", "Z"], "REVERSE": ["R", "IH0", "V", "ER1", "S"], "REVIEW": ["R", "IY2", "V", "Y", "UW1"], "REVIEWED": ["R", "IY0", "V", "Y", "UW1", "D"], "REVIEWER": ["R", "IY0", "V", "Y", "UW1", "ER0"], "REVIEWING": ["R", "IY0", "V", "Y", "UW1", "IH0", "NG"], "REVIEWS": ["R", "IY0", "V", "Y", "UW1", "Z"], "REVISED": ["R", "IH0", "V", "AY1", "Z", "D"], "REVISION": ["R", "IY0", "V", "IH1", "ZH", "AH0", "N"], "REVISIONS": ["R", "IY0", "V", "IH1", "ZH", "AH0", "N", "Z"], "REVOLUTION": ["R", "EH2", "V", "AH0", "L", "UW1", "SH", "AH0", "N"], "REVOLUTIONARY": ["R", "EH2", "V", "AH0", "L", "UW1", "SH", "AH0", "N", "EH2", "R", "IY0"], "REWARD": ["R", "IH0", "W", "AO1", "R", "D"], "REWARDS": ["R", "IH0", "W", "AO1", "R", "D", "Z"], "REYNOLDS": ["R", "EH1", "N", "AH0", "L", "D", "Z"], "RHODE": ["R", "OW1", "D"], "RHYTHM": ["R", "IH1", "DH", "AH0", "M"], "RIBBON": ["R", "IH1", "B", "AH0", "N"], "RICA": ["R", "IY1", "K", "AH0"], "RICE": ["R", "AY1", "S"], "RICH": ["R", "IH1", "CH"], "RICHARD": ["R", "IH1", "CH", "ER0", "D"], "RICHARDS": ["R", "IH1", "CH", "ER0", "D", "Z"], "RICHARDSON": ["R", "IH1", "CH", "ER0", "D", "S", "AH0", "N"], "RICHMOND": ["R", "IH1", "CH", "M", "AH0", "N", "D"], "RICK": ["R", "IH1", "K"], "RICO": ["R", "IY1", "K", "OW0"], "RID": ["R", "IH1", "D"], "RIDE": ["R", "AY1", "D"], "RIDER": ["R", "AY1", "D", "ER0"], "RIDERS": ["R", "AY1", "D", "ER0", "Z"], "RIDES": ["R", "AY1", "D", "Z"], "RIDGE": ["R", "IH1", "JH"], "RIDING": ["R", "AY1", "D", "IH0", "NG"], "RIGHT": ["R", "AY1", "T"], "RIGHTS": ["R", "AY1", "T", "S"], "RIM": ["R", "IH1", "M"], "RING": ["R", "IH1", "NG"], "RINGS": ["R", "IH1", "NG", "Z"], "RIO": ["R", "IY1", "OW0"], "RIP": ["R", "IH1", "P"], "RIPE": ["R", "AY1", "P"], "RISE": ["R", "AY1", "Z"], "RISING": ["R", "AY1", "Z", "IH0", "NG"], "RISK": ["R", "IH1", "S", "K"], "RISKS": ["R", "IH1", "S", "K", "S"], "RIVER": ["R", "IH1", "V", "ER0"], "RIVERS": ["R", "IH1", "V", "ER0", "Z"], "RIVERSIDE": ["R", "IH1", "V", "ER0", "S", "AY2", "D"], "RO": ["R", "OW1"], "ROAD": ["R", "OW1", "D"], "ROADS": ["R", "OW1", "D", "Z"], "ROB": ["R", "AA1", "B"], "ROBERT": ["R", "AA1", "B", "ER0", "T"], "ROBERTS": ["R", "AA1", "B", "ER0", "T", "S"], "ROBERTSON": ["R", "AA1", "B", "ER0", "T", "S", "AH0", "N"], "ROBIN": ["R", "AA1", "B", "AH0", "N"], "ROBINSON": ["R", "AA1", "B", "AH0", "N", "S", "AH0", "N"], "ROBOT": ["R", "OW1", "B", "AA2", "T"], "ROBOTS": ["R", "OW1", "B", "AA2", "T", "S"], "ROBUST": ["R", "OW0", "B", "AH1", "S", "T"], "ROCHESTER": ["R", "AA1", "CH", "EH2", "S", "T", "ER0"], "ROCK": ["R", "AA1", "K"], "ROCKET": ["R", "AA1", "K", "AH0", "T"], "ROCKS": ["R", "AA1", "K", "S"], "ROCKY": ["R", "AA1", "K", "IY0"], "ROD": ["R", "AA1", "D"], "ROGER": ["R", "AA1", "JH", "ER0"], "ROGERS": ["R", "AA1", "JH", "ER0", "Z"], "ROLAND": ["R", "OW1", "L", "AH0", "N", "D"], "ROLE": ["R", "OW1", "L"], "ROLES": ["R", "OW1", "L", "Z"], "ROLL": ["R", "OW1", "L"], "ROLLED": ["R", "OW1", "L", "D"], "ROLLER": ["R", "OW1", "L", "ER0"], "ROLLING": ["R", "OW1", "L", "IH0", "NG"], "ROLLS": ["R", "OW1", "L", "Z"], "ROM": ["R", "AA1", "M"], "ROMAN": ["R", "OW1", "M", "AH0", "N"], "ROMANCE": ["R", "OW0", "M", "AE1", "N", "S"], "ROMANIA": ["R", "OW0", "M", "EY1", "N", "IY0", "AH0"], "ROMANTIC": ["R", "OW0", "M", "AE1", "N", "T", "IH0", "K"], "ROME": ["R", "OW1", "M"], "RON": ["R", "AA1", "N"], "RONALD": ["R", "AA1", "N", "AH0", "L", "D"], "ROOF": ["R", "UW1", "F"], "ROOM": ["R", "UW1", "M"], "ROOMMATE": ["R", "UW1", "M", "EY2", "T"], "ROOMMATES": ["R", "UW1", "M", "EY2", "T", "S"], "ROOMS": ["R", "UW1", "M", "Z"], "ROOT": ["R", "UW1", "T"], "ROOTS": ["R", "UW1", "T", "S"], "ROPE": ["R", "OW1", "P"], "ROSA": ["R", "OW1", "Z", "AH0"], "ROSE": ["R", "OW1", "Z"], "ROSES": ["R", "OW1", "Z", "IH0", "Z"], "ROSS": ["R", "AA1", "S"], "ROSTER": ["R", "AA1", "S", "T", "ER0"], "ROTARY": ["R", "OW1", "T", "ER0", "IY0"], "ROTATION": ["R", "OW0", "T", "EY1", "SH", "AH0", "N"], "ROUGE": ["R", "UW1", "ZH"], "ROUGH": ["R", "AH1", "F"], "ROUGHLY": ["R", "AH1", "F", "L", "IY0"], "ROULETTE": ["R", "UW0", "L", "EH1", "T"], "ROUND": ["R", "AW1", "N", "D"], "ROUNDS": ["R", "AW1", "N", "D", "Z"], "ROUTE": ["R", "UW1", "T"], "ROUTER": ["R", "UW1", "T", "ER0"], "ROUTERS": ["R", "UW1", "T", "ER0", "Z"], "ROUTES": ["R", "UW1", "T", "S"], "ROUTINE": ["R", "UW0", "T", "IY1", "N"], "ROUTINES": ["R", "UW0", "T", "IY1", "N", "Z"], "ROUTING": ["R", "AW1", "T", "IH0", "NG"], "ROVER": ["R", "OW1", "V", "ER0"], "ROW": ["R", "OW1"], "ROWS": ["R", "OW1", "Z"], "ROY": ["R", "OY1"], "ROYAL": ["R", "OY1", "AH0", "L"], "ROYALTY": ["R", "OY1", "AH0", "L", "T", "IY0"], "RPM": ["AA1", "R", "P", "IY1", "EH1", "M"], "RU": ["R", "UW1"], "RUBBER": ["R", "AH1", "B", "ER0"], "RUBY": ["R", "UW1", "B", "IY0"], "RUG": ["R", "AH1", "G"], "RUGBY": ["R", "AH1", "G", "B", "IY0"], "RUGS": ["R", "AH1", "G", "Z"], "RULE": ["R", "UW1", "L"], "RULED": ["R", "UW1", "L", "D"], "RULES": ["R", "UW1", "L", "Z"], "RULING": ["R", "UW1", "L", "IH0", "NG"], "RUN": ["R", "AH1", "N"], "RUNNER": ["R", "AH1", "N", "ER0"], "RUNNING": ["R", "AH1", "N", "IH0", "NG"], "RUNS": ["R", "AH1", "N", "Z"], "RURAL": ["R", "UH1", "R", "AH0", "L"], "RUSH": ["R", "AH1", "SH"], "RUSSELL": ["R", "AH1", "S", "AH0", "L"], "RUSSIA": ["R", "AH1", "SH", "AH0"], "RUSSIAN": ["R", "AH1", "SH", "AH0", "N"], "RUTH": ["R", "UW1", "TH"], "RWANDA": ["R", "AH0", "W", "AA1", "N", "D", "AH0"], "RYAN": ["R", "AY1", "AH0", "N"], "S": ["EH1", "S"], "SA": ["S", "AA1"], "SACRAMENTO": ["S", "AE2", "K", "R", "AH0", "M", "EH1", "N", "T", "OW0"], "SACRED": ["S", "EY1", "K", "R", "AH0", "D"], "SACRIFICE": ["S", "AE1", "K", "R", "AH0", "F", "AY2", "S"], "SAD": ["S", "AE1", "D"], "SADDAM": ["S", "AA1", "D", "AH0", "M"], "SAFARI": ["S", "AH0", "F", "AA1", "R", "IY0"], "SAFE": ["S", "EY1", "F"], "SAFELY": ["S", "EY1", "F", "L", "IY0"], "SAFER": ["S", "EY1", "F", "ER0"], "SAFETY": ["S", "EY1", "F", "T", "IY0"], "SAGE": ["S", "EY1", "JH"], "SAID": ["S", "EH1", "D"], "SAIL": ["S", "EY1", "L"], "SAILING": ["S", "EY1", "L", "IH0", "NG"], "SAINT": ["S", "EY1", "N", "T"], "SAINTS": ["S", "EY1", "N", "T", "S"], "SAKE": ["S", "EY1", "K"], "SALAD": ["S", "AE1", "L", "AH0", "D"], "SALARIES": ["S", "AE1", "L", "ER0", "IY0", "Z"], "SALARY": ["S", "AE1", "L", "ER0", "IY0"], "SALE": ["S", "EY1", "L"], "SALEM": ["S", "EY1", "L", "AH0", "M"], "SALES": ["S", "EY1", "L", "Z"], "SALLY": ["S", "AE1", "L", "IY0"], "SALMON": ["S", "AE1", "M", "AH0", "N"], "SALON": ["S", "AH0", "L", "AA1", "N"], "SALT": ["S", "AO1", "L", "T"], "SALVADOR": ["S", "AE1", "L", "V", "AH0", "D", "AO2", "R"], "SALVATION": ["S", "AE0", "L", "V", "EY1", "SH", "AH0", "N"], "SAM": ["S", "AE1", "M"], "SAMBA": ["S", "AA1", "M", "B", "AH0"], "SAME": ["S", "EY1", "M"], "SAMOA": ["S", "AH0", "M", "OW1", "AH0"], "SAMPLE": ["S", "AE1", "M", "P", "AH0", "L"], "SAMPLES": ["S", "AE1", "M", "P", "AH0", "L", "Z"], "SAMPLING": ["S", "AE1", "M", "P", "L", "IH0", "NG"], "SAMSUNG": ["S", "AE1", "M", "S", "AH2", "NG"], "SAMUEL": ["S", "AE1", "M", "Y", "UW0", "L"], "SAN": ["S", "AE1", "N"], "SAND": ["S", "AE1", "N", "D"], "SANDRA": ["S", "AE1", "N", "D", "R", "AH0"], "SANDWICH": ["S", "AE1", "N", "D", "W", "IH0", "CH"], "SANDY": ["S", "AE1", "N", "D", "IY0"], "SANS": ["S", "AE1", "N", "Z"], "SANTA": ["S", "AE1", "N", "T", "AH0"], "SANYO": ["S", "AA1", "N", "Y", "OW0"], "SAO": ["S", "AW1"], "SAP": ["S", "AE1", "P"], "SAPPHIRE": ["S", "AE1", "F", "AY0", "ER0"], "SARA": ["S", "EH1", "R", "AH0"], "SARAH": ["S", "EH1", "R", "AH0"], "SAS": ["S", "AE1", "S"], "SASKATCHEWAN": ["S", "AE0", "S", "K", "AE1", "CH", "AH0", "W", "AO2", "N"], "SAT": ["S", "AE1", "T"], "SATELLITE": ["S", "AE1", "T", "AH0", "L", "AY2", "T"], "SATIN": ["S", "AE1", "T", "AH0", "N"], "SATISFACTION": ["S", "AE2", "T", "AH0", "S", "F", "AE1", "K", "SH", "AH0", "N"], "SATISFACTORY": ["S", "AE2", "T", "AH0", "S", "F", "AE1", "K", "T", "R", "IY0"], "SATISFIED": ["S", "AE1", "T", "AH0", "S", "F", "AY2", "D"], "SATISFY": ["S", "AE1", "T", "AH0", "S", "F", "AY2"], "SATURDAY": ["S", "AE1", "T", "ER0", "D", "IY0"], "SATURN": ["S", "AE1", "T", "ER0", "N"], "SAUCE": ["S", "AO1", "S"], "SAUDI": ["S", "AO1", "D", "IY0"], "SAVAGE": ["S", "AE1", "V", "AH0", "JH"], "SAVANNAH": ["S", "AH0", "V", "AE1", "N", "AH0"], "SAVE": ["S", "EY1", "V"], "SAVED": ["S", "EY1", "V", "D"], "SAVER": ["S", "EY1", "V", "ER0"], "SAVES": ["S", "EY1", "V", "Z"], "SAVING": ["S", "EY1", "V", "IH0", "NG"], "SAVINGS": ["S", "EY1", "V", "IH0", "NG", "Z"], "SAW": ["S", "AO1"], "SAY": ["S", "EY1"], "SAYING": ["S", "EY1", "IH0", "NG"], "SAYS": ["S", "EH1", "Z"], "SCALE": ["S", "K", "EY1", "L"], "SCALES": ["S", "K", "EY1", "L", "Z"], "SCAN": ["S", "K", "AE1", "N"], "SCANNED": ["S", "K", "AE1", "N", "D"], "SCANNER": ["S", "K", "AE1", "N", "ER0"], "SCANNERS": ["S", "K", "AE1", "N", "ER0", "Z"], "SCANNING": ["S", "K", "AE1", "N", "IH0", "NG"], "SCARY": ["S", "K", "EH1", "R", "IY0"], "SCENARIO": ["S", "IH0", "N", "EH1", "R", "IY0", "OW0"], "SCENARIOS": ["S", "IH0", "N", "EH1", "R", "IY0", "OW0", "Z"], "SCENE": ["S", "IY1", "N"], "SCENES": ["S", "IY1", "N", "Z"], "SCENIC": ["S", "IY1", "N", "IH0", "K"], "SCHEDULE": ["S", "K", "EH1", "JH", "UH0", "L"], "SCHEDULED": ["S", "K", "EH1", "JH", "UH0", "L", "D"], "SCHEDULES": ["S", "K", "EH1", "JH", "UH0", "L", "Z"], "SCHEDULING": ["S", "K", "EH1", "JH", "UH0", "L", "IH0", "NG"], "SCHEMA": ["S", "K", "IY1", "M", "AH0"], "SCHEME": ["S", "K", "IY1", "M"], "SCHEMES": ["S", "K", "IY1", "M", "Z"], "SCHOLAR": ["S", "K", "AA1", "L", "ER0"], "SCHOLARS": ["S", "K", "AA1", "L", "ER0", "Z"], "SCHOLARSHIP": ["S", "K", "AA1", "L", "ER0", "SH", "IH2", "P"], "SCHOLARSHIPS": ["S", "K", "AA1", "L", "ER0", "SH", "IH2", "P", "S"], "SCHOOL": ["S", "K", "UW1", "L"], "SCHOOLS": ["S", "K", "UW1", "L", "Z"], "SCI": ["S", "IY1"], "SCIENCE": ["S", "AY1", "AH0", "N", "S"], "SCIENCES": ["S", "AY1", "AH0", "N", "S", "AH0", "Z"], "SCIENTIFIC": ["S", "AY2", "AH0", "N", "T", "IH1", "F", "IH0", "K"], "SCIENTIST": ["S", "AY1", "AH0", "N", "T", "IH0", "S", "T"], "SCIENTISTS": ["S", "AY1", "AH0", "N", "T", "IH0", "S", "T", "S"], "SCOOP": ["S", "K", "UW1", "P"], "SCOPE": ["S", "K", "OW1", "P"], "SCORE": ["S", "K", "AO1", "R"], "SCORED": ["S", "K", "AO1", "R", "D"], "SCORES": ["S", "K", "AO1", "R", "Z"], "SCORING": ["S", "K", "AO1", "R", "IH0", "NG"], "SCOTIA": ["S", "K", "OW1", "SH", "AH0"], "SCOTLAND": ["S", "K", "AA1", "T", "L", "AH0", "N", "D"], "SCOTT": ["S", "K", "AA1", "T"], "SCOTTISH": ["S", "K", "AA1", "T", "IH0", "SH"], "SCOUT": ["S", "K", "AW1", "T"], "SCRATCH": ["S", "K", "R", "AE1", "CH"], "SCREEN": ["S", "K", "R", "IY1", "N"], "SCREENING": ["S", "K", "R", "IY1", "N", "IH0", "NG"], "SCREENS": ["S", "K", "R", "IY1", "N", "Z"], "SCREW": ["S", "K", "R", "UW1"], "SCRIPT": ["S", "K", "R", "IH1", "P", "T"], "SCRIPTS": ["S", "K", "R", "IH1", "P", "T", "S"], "SCROLL": ["S", "K", "R", "OW1", "L"], "SCUBA": ["S", "K", "UW1", "B", "AH0"], "SCULPTURE": ["S", "K", "AH1", "L", "P", "CH", "ER0"], "SE": ["S", "EY1"], "SEA": ["S", "IY1"], "SEAFOOD": ["S", "IY1", "F", "UW2", "D"], "SEAL": ["S", "IY1", "L"], "SEALED": ["S", "IY1", "L", "D"], "SEAN": ["SH", "AO1", "N"], "SEARCH": ["S", "ER1", "CH"], "SEARCHED": ["S", "ER1", "CH", "T"], "SEARCHES": ["S", "ER1", "CH", "IH0", "Z"], "SEARCHING": ["S", "ER1", "CH", "IH0", "NG"], "SEAS": ["S", "IY1", "Z"], "SEASON": ["S", "IY1", "Z", "AH0", "N"], "SEASONAL": ["S", "IY1", "Z", "AH0", "N", "AH0", "L"], "SEASONS": ["S", "IY1", "Z", "AH0", "N", "Z"], "SEAT": ["S", "IY1", "T"], "SEATING": ["S", "IY1", "T", "IH0", "NG"], "SEATS": ["S", "IY1", "T", "S"], "SEATTLE": ["S", "IY0", "AE1", "T", "AH0", "L"], "SEC": ["S", "EH1", "K"], "SECOND": ["S", "EH1", "K", "AH0", "N", "D"], "SECONDARY": ["S", "EH1", "K", "AH0", "N", "D", "EH2", "R", "IY0"], "SECONDS": ["S", "EH1", "K", "AH0", "N", "D", "Z"], "SECRET": ["S", "IY1", "K", "R", "AH0", "T"], "SECRETARIAT": ["S", "EH2", "K", "R", "IH0", "T", "EH1", "R", "IY0", "AH0", "T"], "SECRETARY": ["S", "EH1", "K", "R", "AH0", "T", "EH2", "R", "IY0"], "SECRETS": ["S", "IY1", "K", "R", "IH0", "T", "S"], "SECTION": ["S", "EH1", "K", "SH", "AH0", "N"], "SECTIONS": ["S", "EH1", "K", "SH", "AH0", "N", "Z"], "SECTOR": ["S", "EH1", "K", "T", "ER0"], "SECTORS": ["S", "EH1", "K", "T", "ER0", "Z"], "SECURE": ["S", "IH0", "K", "Y", "UH1", "R"], "SECURED": ["S", "IH0", "K", "Y", "UH1", "R", "D"], "SECURELY": ["S", "IH0", "K", "Y", "UH1", "R", "L", "IY0"], "SECURITIES": ["S", "IH0", "K", "Y", "UH1", "R", "AH0", "T", "IY0", "Z"], "SECURITY": ["S", "IH0", "K", "Y", "UH1", "R", "AH0", "T", "IY0"], "SEE": ["S", "IY1"], "SEED": ["S", "IY1", "D"], "SEEDS": ["S", "IY1", "D", "Z"], "SEEING": ["S", "IY1", "IH0", "NG"], "SEEK": ["S", "IY1", "K"], "SEEKER": ["S", "IY1", "K", "ER0"], "SEEKERS": ["S", "IY1", "K", "ER0", "Z"], "SEEKING": ["S", "IY1", "K", "IH0", "NG"], "SEEKS": ["S", "IY1", "K", "S"], "SEEM": ["S", "IY1", "M"], "SEEMED": ["S", "IY1", "M", "D"], "SEEMS": ["S", "IY1", "M", "Z"], "SEEN": ["S", "IY1", "N"], "SEES": ["S", "IY1", "Z"], "SEGA": ["S", "IY1", "G", "AH0"], "SEGMENT": ["S", "EH1", "G", "M", "AH0", "N", "T"], "SEGMENTS": ["S", "EH1", "G", "M", "AH0", "N", "T", "S"], "SELECT": ["S", "AH0", "L", "EH1", "K", "T"], "SELECTED": ["S", "AH0", "L", "EH1", "K", "T", "AH0", "D"], "SELECTING": ["S", "AH0", "L", "EH1", "K", "T", "IH0", "NG"], "SELECTION": ["S", "AH0", "L", "EH1", "K", "SH", "AH0", "N"], "SELECTIONS": ["S", "AH0", "L", "EH1", "K", "SH", "AH0", "N", "Z"], "SELECTIVE": ["S", "AH0", "L", "EH1", "K", "T", "IH0", "V"], "SELF": ["S", "EH1", "L", "F"], "SELL": ["S", "EH1", "L"], "SELLER": ["S", "EH1", "L", "ER0"], "SELLERS": ["S", "EH1", "L", "ER0", "Z"], "SELLING": ["S", "EH1", "L", "IH0", "NG"], "SELLS": ["S", "EH1", "L", "Z"], "SEMESTER": ["S", "AH0", "M", "EH1", "S", "T", "ER0"], "SEMI": ["S", "EH1", "M", "IY0"], "SEMICONDUCTOR": ["S", "EH2", "M", "IY0", "K", "AH0", "N", "D", "AH1", "K", "T", "ER0"], "SEMINAR": ["S", "EH1", "M", "AH0", "N", "AA2", "R"], "SEMINARS": ["S", "EH1", "M", "AH0", "N", "AA2", "R", "Z"], "SEN": ["S", "EH1", "N"], "SENATE": ["S", "EH1", "N", "AH0", "T"], "SENATOR": ["S", "EH1", "N", "AH0", "T", "ER0"], "SENATORS": ["S", "EH1", "N", "AH0", "T", "ER0", "Z"], "SEND": ["S", "EH1", "N", "D"], "SENDER": ["S", "EH1", "N", "D", "ER0"], "SENDING": ["S", "EH1", "N", "D", "IH0", "NG"], "SENDS": ["S", "EH1", "N", "D", "Z"], "SENEGAL": ["S", "EH2", "N", "AH0", "G", "AO1", "L"], "SENIOR": ["S", "IY1", "N", "Y", "ER0"], "SENIORS": ["S", "IY1", "N", "Y", "ER0", "Z"], "SENSE": ["S", "EH1", "N", "S"], "SENSITIVE": ["S", "EH1", "N", "S", "AH0", "T", "IH0", "V"], "SENSITIVITY": ["S", "EH2", "N", "S", "IH0", "T", "IH1", "V", "IH0", "T", "IY0"], "SENSOR": ["S", "EH1", "N", "S", "ER0"], "SENSORS": ["S", "EH1", "N", "S", "ER0", "Z"], "SENT": ["S", "EH1", "N", "T"], "SENTENCE": ["S", "EH1", "N", "T", "AH0", "N", "S"], "SENTENCES": ["S", "EH1", "N", "T", "AH0", "N", "S", "AH0", "Z"], "SEO": ["S", "IY1", "OW0"], "SEP": ["S", "EH1", "P"], "SEPARATE": ["S", "EH1", "P", "ER0", "EY2", "T"], "SEPARATED": ["S", "EH1", "P", "ER0", "EY2", "T", "AH0", "D"], "SEPARATELY": ["S", "EH1", "P", "ER0", "AH0", "T", "L", "IY0"], "SEPARATION": ["S", "EH2", "P", "ER0", "EY1", "SH", "AH0", "N"], "SEPT": ["S", "EH1", "P", "T"], "SEPTEMBER": ["S", "EH0", "P", "T", "EH1", "M", "B", "ER0"], "SEQUENCE": ["S", "IY1", "K", "W", "AH0", "N", "S"], "SEQUENCES": ["S", "IY1", "K", "W", "AH0", "N", "S", "AH0", "Z"], "SERBIA": ["S", "ER1", "B", "IY0", "AH0"], "SERIAL": ["S", "IH1", "R", "IY2", "AH0", "L"], "SERIES": ["S", "IH1", "R", "IY0", "Z"], "SERIOUS": ["S", "IH1", "R", "IY0", "AH0", "S"], "SERIOUSLY": ["S", "IH1", "R", "IY0", "AH0", "S", "L", "IY0"], "SERUM": ["S", "IH1", "R", "AH0", "M"], "SERVE": ["S", "ER1", "V"], "SERVED": ["S", "ER1", "V", "D"], "SERVER": ["S", "ER1", "V", "ER0"], "SERVERS": ["S", "ER1", "V", "ER0", "Z"], "SERVES": ["S", "ER1", "V", "Z"], "SERVICE": ["S", "ER1", "V", "AH0", "S"], "SERVICES": ["S", "ER1", "V", "AH0", "S", "AH0", "Z"], "SERVING": ["S", "ER1", "V", "IH0", "NG"], "SESSION": ["S", "EH1", "SH", "AH0", "N"], "SESSIONS": ["S", "EH1", "SH", "AH0", "N", "Z"], "SET": ["S", "EH1", "T"], "SETS": ["S", "EH1", "T", "S"], "SETTING": ["S", "EH1", "T", "IH0", "NG"], "SETTINGS": ["S", "EH1", "T", "IH0", "NG", "Z"], "SETTLE": ["S", "EH1", "T", "AH0", "L"], "SETTLED": ["S", "EH1", "T", "AH0", "L", "D"], "SETTLEMENT": ["S", "EH1", "T", "AH0", "L", "M", "AH0", "N", "T"], "SETUP": ["S", "EH1", "T", "AH2", "P"], "SEVEN": ["S", "EH1", "V", "AH0", "N"], "SEVENTH": ["S", "EH1", "V", "AH0", "N", "TH"], "SEVERAL": ["S", "EH1", "V", "ER0", "AH0", "L"], "SEVERE": ["S", "AH0", "V", "IH1", "R"], "SEWING": ["S", "OW1", "IH0", "NG"], "SEX": ["S", "EH1", "K", "S"], "SEXUAL": ["S", "EH1", "K", "SH", "UW0", "AH0", "L"], "SEXUALITY": ["S", "EH2", "K", "SH", "UW0", "AE1", "L", "AH0", "T", "IY0"], "SEXUALLY": ["S", "EH1", "K", "SH", "UW0", "AH0", "L", "IY0"], "SEXY": ["S", "EH1", "K", "S", "IY0"], "SHADE": ["SH", "EY1", "D"], "SHADES": ["SH", "EY1", "D", "Z"], "SHADOW": ["SH", "AE1", "D", "OW2"], "SHADOWS": ["SH", "AE1", "D", "OW2", "Z"], "SHAFT": ["SH", "AE1", "F", "T"], "SHAKE": ["SH", "EY1", "K"], "SHAKESPEARE": ["SH", "EY1", "K", "S", "P", "IY2", "R"], "SHAKIRA": ["SH", "AE2", "K", "IY1", "R", "AH0"], "SHALL": ["SH", "AE1", "L"], "SHAME": ["SH", "EY1", "M"], "SHANGHAI": ["SH", "AE1", "NG", "HH", "AY1"], "SHANNON": ["SH", "AE1", "N", "AH0", "N"], "SHAPE": ["SH", "EY1", "P"], "SHAPED": ["SH", "EY1", "P", "T"], "SHAPES": ["SH", "EY1", "P", "S"], "SHARE": ["SH", "EH1", "R"], "SHARED": ["SH", "EH1", "R", "D"], "SHAREHOLDERS": ["SH", "EH1", "R", "HH", "OW2", "L", "D", "ER0", "Z"], "SHARES": ["SH", "EH1", "R", "Z"], "SHAREWARE": ["SH", "EH1", "R", "W", "EH2", "R"], "SHARING": ["SH", "EH1", "R", "IH0", "NG"], "SHARK": ["SH", "AA1", "R", "K"], "SHARON": ["SH", "AE1", "R", "AH0", "N"], "SHARP": ["SH", "AA1", "R", "P"], "SHAVED": ["SH", "EY1", "V", "D"], "SHAW": ["SH", "AO1"], "SHE": ["SH", "IY1"], "SHED": ["SH", "EH1", "D"], "SHEEP": ["SH", "IY1", "P"], "SHEER": ["SH", "IH1", "R"], "SHEET": ["SH", "IY1", "T"], "SHEETS": ["SH", "IY1", "T", "S"], "SHEFFIELD": ["SH", "EH1", "F", "IY0", "L", "D"], "SHELF": ["SH", "EH1", "L", "F"], "SHELL": ["SH", "EH1", "L"], "SHELTER": ["SH", "EH1", "L", "T", "ER0"], "SHEPHERD": ["SH", "EH1", "P", "ER0", "D"], "SHERIFF": ["SH", "EH1", "R", "AH0", "F"], "SHERMAN": ["SH", "ER1", "M", "AH0", "N"], "SHIELD": ["SH", "IY1", "L", "D"], "SHIFT": ["SH", "IH1", "F", "T"], "SHINE": ["SH", "AY1", "N"], "SHIP": ["SH", "IH1", "P"], "SHIPMENT": ["SH", "IH1", "P", "M", "AH0", "N", "T"], "SHIPMENTS": ["SH", "IH1", "P", "M", "AH0", "N", "T", "S"], "SHIPPED": ["SH", "IH1", "P", "T"], "SHIPPING": ["SH", "IH1", "P", "IH0", "NG"], "SHIPS": ["SH", "IH1", "P", "S"], "SHIRT": ["SH", "ER1", "T"], "SHIRTS": ["SH", "ER1", "T", "S"], "SHIT": ["SH", "IH1", "T"], "SHOCK": ["SH", "AA1", "K"], "SHOE": ["SH", "UW1"], "SHOES": ["SH", "UW1", "Z"], "SHOOT": ["SH", "UW1", "T"], "SHOOTING": ["SH", "UW1", "T", "IH0", "NG"], "SHOP": ["SH", "AA1", "P"], "SHOPPER": ["SH", "AA1", "P", "ER0"], "SHOPPERS": ["SH", "AA1", "P", "ER0", "Z"], "SHOPPING": ["SH", "AA1", "P", "IH0", "NG"], "SHOPS": ["SH", "AA1", "P", "S"], "SHORE": ["SH", "AO1", "R"], "SHORT": ["SH", "AO1", "R", "T"], "SHORTCUTS": ["SH", "AO1", "R", "T", "K", "AH2", "T", "S"], "SHORTER": ["SH", "AO1", "R", "T", "ER0"], "SHORTLY": ["SH", "AO1", "R", "T", "L", "IY0"], "SHORTS": ["SH", "AO1", "R", "T", "S"], "SHOT": ["SH", "AA1", "T"], "SHOTS": ["SH", "AA1", "T", "S"], "SHOULD": ["SH", "UH1", "D"], "SHOULDER": ["SH", "OW1", "L", "D", "ER0"], "SHOW": ["SH", "OW1"], "SHOWCASE": ["SH", "OW1", "K", "EY2", "S"], "SHOWED": ["SH", "OW1", "D"], "SHOWER": ["SH", "AW1", "ER0"], "SHOWERS": ["SH", "AW1", "ER0", "Z"], "SHOWING": ["SH", "OW1", "IH0", "NG"], "SHOWN": ["SH", "OW1", "N"], "SHOWS": ["SH", "OW1", "Z"], "SHUT": ["SH", "AH1", "T"], "SHUTTLE": ["SH", "AH1", "T", "AH0", "L"], "SI": ["S", "IY1"], "SIC": ["S", "IH1", "K"], "SICK": ["S", "IH1", "K"], "SIDE": ["S", "AY1", "D"], "SIDES": ["S", "AY1", "D", "Z"], "SIE": ["S", "IY1"], "SIEMENS": ["S", "IY1", "M", "AH0", "N", "Z"], "SIERRA": ["S", "IY0", "EH1", "R", "AH0"], "SIG": ["S", "IH1", "G"], "SIGHT": ["S", "AY1", "T"], "SIGMA": ["S", "IH1", "G", "M", "AH0"], "SIGN": ["S", "AY1", "N"], "SIGNAL": ["S", "IH1", "G", "N", "AH0", "L"], "SIGNALS": ["S", "IH1", "G", "N", "AH0", "L", "Z"], "SIGNATURE": ["S", "IH1", "G", "N", "AH0", "CH", "ER0"], "SIGNATURES": ["S", "IH1", "G", "N", "AH0", "CH", "ER0", "Z"], "SIGNED": ["S", "AY1", "N", "D"], "SIGNIFICANCE": ["S", "AH0", "G", "N", "IH1", "F", "IH0", "K", "AH0", "N", "S"], "SIGNIFICANT": ["S", "AH0", "G", "N", "IH1", "F", "IH0", "K", "AH0", "N", "T"], "SIGNIFICANTLY": ["S", "IH0", "G", "N", "IH1", "F", "IH0", "K", "AH0", "N", "T", "L", "IY0"], "SIGNING": ["S", "AY1", "N", "IH0", "NG"], "SIGNS": ["S", "AY1", "N", "Z"], "SILENCE": ["S", "AY1", "L", "AH0", "N", "S"], "SILENT": ["S", "AY1", "L", "AH0", "N", "T"], "SILICON": ["S", "IH1", "L", "AH0", "K", "AH0", "N"], "SILK": ["S", "IH1", "L", "K"], "SILLY": ["S", "IH1", "L", "IY0"], "SILVER": ["S", "IH1", "L", "V", "ER0"], "SIM": ["S", "IH1", "M"], "SIMILAR": ["S", "IH1", "M", "AH0", "L", "ER0"], "SIMILARLY": ["S", "IH1", "M", "AH0", "L", "ER0", "L", "IY0"], "SIMON": ["S", "AY1", "M", "AH0", "N"], "SIMPLE": ["S", "IH1", "M", "P", "AH0", "L"], "SIMPLIFIED": ["S", "IH1", "M", "P", "L", "AH0", "F", "AY2", "D"], "SIMPLY": ["S", "IH1", "M", "P", "L", "IY0"], "SIMPSON": ["S", "IH1", "M", "P", "S", "AH0", "N"], "SIMPSONS": ["S", "IH1", "M", "P", "S", "AH0", "N", "Z"], "SIMS": ["S", "IH1", "M", "Z"], "SIMULATION": ["S", "IH2", "M", "Y", "AH0", "L", "EY1", "SH", "AH0", "N"], "SIMULATIONS": ["S", "IH2", "M", "Y", "UW0", "L", "EY1", "SH", "AH0", "N", "Z"], "SIMULTANEOUSLY": ["S", "AY2", "M", "AH0", "L", "T", "EY1", "N", "IY0", "AH0", "S", "L", "IY0"], "SIN": ["S", "IH1", "N"], "SINCE": ["S", "IH1", "N", "S"], "SING": ["S", "IH1", "NG"], "SINGAPORE": ["S", "IH1", "NG", "AH0", "P", "AO2", "R"], "SINGER": ["S", "IH1", "NG", "ER0"], "SINGH": ["S", "IH1", "NG"], "SINGING": ["S", "IH1", "NG", "IH0", "NG"], "SINGLE": ["S", "IH1", "NG", "G", "AH0", "L"], "SINGLES": ["S", "IH1", "NG", "G", "AH0", "L", "Z"], "SINK": ["S", "IH1", "NG", "K"], "SIP": ["S", "IH1", "P"], "SIR": ["S", "ER1"], "SISTER": ["S", "IH1", "S", "T", "ER0"], "SISTERS": ["S", "IH1", "S", "T", "ER0", "Z"], "SIT": ["S", "IH1", "T"], "SITE": ["S", "AY1", "T"], "SITES": ["S", "AY1", "T", "S"], "SITTING": ["S", "IH1", "T", "IH0", "NG"], "SITUATED": ["S", "IH1", "CH", "UW0", "EY2", "T", "IH0", "D"], "SITUATION": ["S", "IH2", "CH", "UW0", "EY1", "SH", "AH0", "N"], "SITUATIONS": ["S", "IH2", "CH", "UW0", "EY1", "SH", "AH0", "N", "Z"], "SIX": ["S", "IH1", "K", "S"], "SIXTH": ["S", "IH1", "K", "S", "TH"], "SIZE": ["S", "AY1", "Z"], "SIZED": ["S", "AY1", "Z", "D"], "SIZES": ["S", "AY1", "Z", "AH0", "Z"], "SKATING": ["S", "K", "EY1", "T", "IH0", "NG"], "SKI": ["S", "K", "IY1"], "SKIING": ["S", "K", "IY1", "IH0", "NG"], "SKILL": ["S", "K", "IH1", "L"], "SKILLED": ["S", "K", "IH1", "L", "D"], "SKILLS": ["S", "K", "IH1", "L", "Z"], "SKIN": ["S", "K", "IH1", "N"], "SKINS": ["S", "K", "IH1", "N", "Z"], "SKIP": ["S", "K", "IH1", "P"], "SKIRT": ["S", "K", "ER1", "T"], "SKIRTS": ["S", "K", "ER1", "T", "S"], "SKY": ["S", "K", "AY1"], "SKYPE": ["S", "K", "AY1", "P"], "SLAVE": ["S", "L", "EY1", "V"], "SLEEP": ["S", "L", "IY1", "P"], "SLEEPING": ["S", "L", "IY1", "P", "IH0", "NG"], "SLEEPS": ["S", "L", "IY1", "P", "S"], "SLEEVE": ["S", "L", "IY1", "V"], "SLIDE": ["S", "L", "AY1", "D"], "SLIDES": ["S", "L", "AY1", "D", "Z"], "SLIGHT": ["S", "L", "AY1", "T"], "SLIGHTLY": ["S", "L", "AY1", "T", "L", "IY0"], "SLIM": ["S", "L", "IH1", "M"], "SLIP": ["S", "L", "IH1", "P"], "SLOPE": ["S", "L", "OW1", "P"], "SLOT": ["S", "L", "AA1", "T"], "SLOTS": ["S", "L", "AA1", "T", "S"], "SLOVAK": ["S", "L", "OW1", "V", "AA0", "K"], "SLOVAKIA": ["S", "L", "OW2", "V", "AA1", "K", "IY2", "AH0"], "SLOVENIA": ["S", "L", "OW2", "V", "IY1", "N", "IY0", "AH0"], "SLOW": ["S", "L", "OW1"], "SLOWLY": ["S", "L", "OW1", "L", "IY0"], "SLUT": ["S", "L", "AH1", "T"], "SLUTS": ["S", "L", "AH1", "T", "S"], "SMALL": ["S", "M", "AO1", "L"], "SMALLER": ["S", "M", "AO1", "L", "ER0"], "SMART": ["S", "M", "AA1", "R", "T"], "SMELL": ["S", "M", "EH1", "L"], "SMILE": ["S", "M", "AY1", "L"], "SMITH": ["S", "M", "IH1", "TH"], "SMITHSONIAN": ["S", "M", "IH0", "TH", "S", "OW1", "N", "IY0", "AH0", "N"], "SMOKE": ["S", "M", "OW1", "K"], "SMOKING": ["S", "M", "OW1", "K", "IH0", "NG"], "SMOOTH": ["S", "M", "UW1", "DH"], "SMS": ["EH2", "S", "EH2", "M", "EH1", "S"], "SNAKE": ["S", "N", "EY1", "K"], "SNAP": ["S", "N", "AE1", "P"], "SNAPSHOT": ["S", "N", "AE1", "P", "SH", "AA2", "T"], "SNOW": ["S", "N", "OW1"], "SNOWBOARD": ["S", "N", "OW1", "B", "AO2", "R", "D"], "SO": ["S", "OW1"], "SOAP": ["S", "OW1", "P"], "SOCCER": ["S", "AA1", "K", "ER0"], "SOCIAL": ["S", "OW1", "SH", "AH0", "L"], "SOCIETIES": ["S", "AH0", "S", "AY1", "IH0", "T", "IY0", "Z"], "SOCIETY": ["S", "OW0", "S", "AY1", "IH0", "T", "IY0"], "SOCIOLOGY": ["S", "OW2", "S", "IY0", "AA1", "L", "AH0", "JH", "IY0"], "SOCKET": ["S", "AA1", "K", "AH0", "T"], "SOCKS": ["S", "AA1", "K", "S"], "SODIUM": ["S", "OW1", "D", "IY0", "AH0", "M"], "SOFA": ["S", "OW1", "F", "AH0"], "SOFT": ["S", "AA1", "F", "T"], "SOFTBALL": ["S", "AO1", "F", "T", "B", "AO2", "L"], "SOFTWARE": ["S", "AO1", "F", "T", "W", "EH2", "R"], "SOIL": ["S", "OY1", "L"], "SOL": ["S", "AA1", "L"], "SOLAR": ["S", "OW1", "L", "ER0"], "SOLARIS": ["S", "OW0", "L", "EH1", "R", "IH0", "S"], "SOLD": ["S", "OW1", "L", "D"], "SOLDIER": ["S", "OW1", "L", "JH", "ER0"], "SOLDIERS": ["S", "OW1", "L", "JH", "ER0", "Z"], "SOLE": ["S", "OW1", "L"], "SOLELY": ["S", "OW1", "AH0", "L", "IY0"], "SOLID": ["S", "AA1", "L", "AH0", "D"], "SOLO": ["S", "OW1", "L", "OW2"], "SOLOMON": ["S", "AA1", "L", "AH0", "M", "AH0", "N"], "SOLUTION": ["S", "AH0", "L", "UW1", "SH", "AH0", "N"], "SOLUTIONS": ["S", "AH0", "L", "UW1", "SH", "AH0", "N", "Z"], "SOLVE": ["S", "AA1", "L", "V"], "SOLVED": ["S", "AA1", "L", "V", "D"], "SOLVING": ["S", "AA1", "L", "V", "IH0", "NG"], "SOMA": ["S", "OW1", "M", "AH0"], "SOMALIA": ["S", "AH0", "M", "AA1", "L", "IY0", "AH0"], "SOME": ["S", "AH1", "M"], "SOMEBODY": ["S", "AH1", "M", "B", "AA2", "D", "IY0"], "SOMEHOW": ["S", "AH1", "M", "HH", "AW2"], "SOMEONE": ["S", "AH1", "M", "W", "AH2", "N"], "SOMERSET": ["S", "AH1", "M", "ER0", "S", "EH2", "T"], "SOMETHING": ["S", "AH1", "M", "TH", "IH0", "NG"], "SOMETIMES": ["S", "AH0", "M", "T", "AY1", "M", "Z"], "SOMEWHAT": ["S", "AH1", "M", "W", "AH1", "T"], "SOMEWHERE": ["S", "AH1", "M", "W", "EH2", "R"], "SON": ["S", "AH1", "N"], "SONG": ["S", "AO1", "NG"], "SONGS": ["S", "AO1", "NG", "Z"], "SONIC": ["S", "AA1", "N", "IH0", "K"], "SONS": ["S", "AH1", "N", "Z"], "SONY": ["S", "OW1", "N", "IY0"], "SOON": ["S", "UW1", "N"], "SOONEST": ["S", "UW1", "N", "AH0", "S", "T"], "SOPHISTICATED": ["S", "AH0", "F", "IH1", "S", "T", "AH0", "K", "EY2", "T", "IH0", "D"], "SORRY": ["S", "AA1", "R", "IY0"], "SORT": ["S", "AO1", "R", "T"], "SORTED": ["S", "AO1", "R", "T", "IH0", "D"], "SORTS": ["S", "AO1", "R", "T", "S"], "SOUGHT": ["S", "AO1", "T"], "SOUL": ["S", "OW1", "L"], "SOULS": ["S", "OW1", "L", "Z"], "SOUND": ["S", "AW1", "N", "D"], "SOUNDS": ["S", "AW1", "N", "D", "Z"], "SOUNDTRACK": ["S", "AW1", "N", "D", "T", "R", "AE2", "K"], "SOUP": ["S", "UW1", "P"], "SOURCE": ["S", "AO1", "R", "S"], "SOURCES": ["S", "AO1", "R", "S", "AH0", "Z"], "SOUTH": ["S", "AW1", "TH"], "SOUTHAMPTON": ["S", "AW2", "TH", "HH", "AE1", "M", "P", "T", "AH0", "N"], "SOUTHEAST": ["S", "AW2", "TH", "IY1", "S", "T"], "SOUTHERN": ["S", "AH1", "DH", "ER0", "N"], "SOUTHWEST": ["S", "AW2", "TH", "W", "EH1", "S", "T"], "SOVIET": ["S", "OW1", "V", "IY0", "AH0", "T"], "SOX": ["S", "AA1", "K", "S"], "SPA": ["S", "P", "AA1"], "SPACE": ["S", "P", "EY1", "S"], "SPACES": ["S", "P", "EY1", "S", "AH0", "Z"], "SPAIN": ["S", "P", "EY1", "N"], "SPAM": ["S", "P", "AE1", "M"], "SPAN": ["S", "P", "AE1", "N"], "SPANISH": ["S", "P", "AE1", "N", "IH0", "SH"], "SPANK": ["S", "P", "AE1", "NG", "K"], "SPANKING": ["S", "P", "AE1", "NG", "K", "IH0", "NG"], "SPARC": ["S", "P", "AA1", "R", "K"], "SPARE": ["S", "P", "EH1", "R"], "SPAS": ["S", "P", "AA1", "Z"], "SPATIAL": ["S", "P", "EY1", "SH", "AH0", "L"], "SPEAK": ["S", "P", "IY1", "K"], "SPEAKER": ["S", "P", "IY1", "K", "ER0"], "SPEAKERS": ["S", "P", "IY1", "K", "ER0", "Z"], "SPEAKING": ["S", "P", "IY1", "K", "IH0", "NG"], "SPEAKS": ["S", "P", "IY1", "K", "S"], "SPEARS": ["S", "P", "IH1", "R", "Z"], "SPEC": ["S", "P", "EH1", "K"], "SPECIAL": ["S", "P", "EH1", "SH", "AH0", "L"], "SPECIALIST": ["S", "P", "EH1", "SH", "AH0", "L", "IH0", "S", "T"], "SPECIALISTS": ["S", "P", "EH1", "SH", "AH0", "L", "IH0", "S", "T", "S"], "SPECIALIZED": ["S", "P", "EH1", "SH", "AH0", "L", "AY2", "Z", "D"], "SPECIALIZING": ["S", "P", "EH1", "SH", "AH0", "L", "AY2", "Z", "IH0", "NG"], "SPECIALLY": ["S", "P", "EH1", "SH", "AH0", "L", "IY0"], "SPECIALS": ["S", "P", "EH1", "SH", "AH0", "L", "Z"], "SPECIALTIES": ["S", "P", "EH1", "SH", "AH0", "L", "T", "IY0", "Z"], "SPECIALTY": ["S", "P", "EH1", "SH", "AH0", "L", "T", "IY0"], "SPECIES": ["S", "P", "IY1", "SH", "IY0", "Z"], "SPECIFIC": ["S", "P", "AH0", "S", "IH1", "F", "IH0", "K"], "SPECIFICALLY": ["S", "P", "AH0", "S", "IH1", "F", "IH0", "K", "L", "IY0"], "SPECIFICATION": ["S", "P", "EH2", "S", "IH0", "F", "IH0", "K", "EY1", "SH", "AH0", "N"], "SPECIFICATIONS": ["S", "P", "EH2", "S", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "SPECIFICS": ["S", "P", "IH0", "S", "IH1", "F", "IH0", "K", "S"], "SPECIFIED": ["S", "P", "EH1", "S", "AH0", "F", "AY2", "D"], "SPECIFIES": ["S", "P", "EH1", "S", "AH0", "F", "AY2", "Z"], "SPECIFY": ["S", "P", "EH1", "S", "AH0", "F", "AY2"], "SPECS": ["S", "P", "EH1", "K", "S"], "SPECTACULAR": ["S", "P", "EH0", "K", "T", "AE1", "K", "Y", "AH0", "L", "ER0"], "SPECTRUM": ["S", "P", "EH1", "K", "T", "R", "AH0", "M"], "SPEECH": ["S", "P", "IY1", "CH"], "SPEECHES": ["S", "P", "IY1", "CH", "AH0", "Z"], "SPEED": ["S", "P", "IY1", "D"], "SPEEDS": ["S", "P", "IY1", "D", "Z"], "SPELL": ["S", "P", "EH1", "L"], "SPELLING": ["S", "P", "EH1", "L", "IH0", "NG"], "SPENCER": ["S", "P", "EH1", "N", "S", "ER0"], "SPEND": ["S", "P", "EH1", "N", "D"], "SPENDING": ["S", "P", "EH1", "N", "D", "IH0", "NG"], "SPENT": ["S", "P", "EH1", "N", "T"], "SPERM": ["S", "P", "ER1", "M"], "SPHERE": ["S", "F", "IH1", "R"], "SPICE": ["S", "P", "AY1", "S"], "SPIDER": ["S", "P", "AY1", "D", "ER0"], "SPIES": ["S", "P", "AY1", "Z"], "SPIN": ["S", "P", "IH1", "N"], "SPINE": ["S", "P", "AY1", "N"], "SPIRIT": ["S", "P", "IH1", "R", "AH0", "T"], "SPIRITS": ["S", "P", "IH1", "R", "IH0", "T", "S"], "SPIRITUAL": ["S", "P", "IH1", "R", "IH0", "CH", "UW2", "AH0", "L"], "SPIRITUALITY": ["S", "P", "IH2", "R", "IH0", "CH", "UW2", "AE1", "L", "AH0", "T", "IY2"], "SPLIT": ["S", "P", "L", "IH1", "T"], "SPOKE": ["S", "P", "OW1", "K"], "SPOKEN": ["S", "P", "OW1", "K", "AH0", "N"], "SPOKESMAN": ["S", "P", "OW1", "K", "S", "M", "AH0", "N"], "SPONSOR": ["S", "P", "AA1", "N", "S", "ER0"], "SPONSORED": ["S", "P", "AA1", "N", "S", "ER0", "D"], "SPONSORS": ["S", "P", "AA1", "N", "S", "ER0", "Z"], "SPONSORSHIP": ["S", "P", "AA1", "N", "S", "ER0", "SH", "IH2", "P"], "SPORT": ["S", "P", "AO1", "R", "T"], "SPORTING": ["S", "P", "AO1", "R", "T", "IH0", "NG"], "SPORTS": ["S", "P", "AO1", "R", "T", "S"], "SPOT": ["S", "P", "AA1", "T"], "SPOTLIGHT": ["S", "P", "AA1", "T", "L", "AY2", "T"], "SPOTS": ["S", "P", "AA1", "T", "S"], "SPOUSE": ["S", "P", "AW1", "S"], "SPRAY": ["S", "P", "R", "EY1"], "SPREAD": ["S", "P", "R", "EH1", "D"], "SPREADING": ["S", "P", "R", "EH1", "D", "IH0", "NG"], "SPRING": ["S", "P", "R", "IH1", "NG"], "SPRINGER": ["S", "P", "R", "IH1", "NG", "ER0"], "SPRINGFIELD": ["S", "P", "R", "IH1", "NG", "F", "IY2", "L", "D"], "SPRINGS": ["S", "P", "R", "IH1", "NG", "Z"], "SPRINT": ["S", "P", "R", "IH1", "N", "T"], "SPY": ["S", "P", "AY1"], "SPYWARE": ["S", "P", "AY1", "W", "EH2", "R"], "SQUAD": ["S", "K", "W", "AA1", "D"], "SQUARE": ["S", "K", "W", "EH1", "R"], "SQUIRT": ["S", "K", "W", "ER1", "T"], "SQUIRTING": ["S", "K", "W", "ER1", "T", "IH0", "NG"], "SR": ["S", "IY1", "N", "Y", "ER0"], "SRI": ["SH", "R", "IY1"], "STABILITY": ["S", "T", "AH0", "B", "IH1", "L", "IH0", "T", "IY0"], "STABLE": ["S", "T", "EY1", "B", "AH0", "L"], "STACK": ["S", "T", "AE1", "K"], "STADIUM": ["S", "T", "EY1", "D", "IY0", "AH0", "M"], "STAFF": ["S", "T", "AE1", "F"], "STAFFING": ["S", "T", "AE1", "F", "IH0", "NG"], "STAGE": ["S", "T", "EY1", "JH"], "STAGES": ["S", "T", "EY1", "JH", "IH0", "Z"], "STAINLESS": ["S", "T", "EY1", "N", "L", "AH0", "S"], "STAKEHOLDERS": ["S", "T", "EY1", "K", "HH", "OW2", "L", "D", "ER0", "Z"], "STAMP": ["S", "T", "AE1", "M", "P"], "STAMPS": ["S", "T", "AE1", "M", "P", "S"], "STAN": ["S", "T", "AE1", "N"], "STAND": ["S", "T", "AE1", "N", "D"], "STANDARD": ["S", "T", "AE1", "N", "D", "ER0", "D"], "STANDARDS": ["S", "T", "AE1", "N", "D", "ER0", "D", "Z"], "STANDING": ["S", "T", "AE1", "N", "D", "IH0", "NG"], "STANDINGS": ["S", "T", "AE1", "N", "D", "IH0", "NG", "Z"], "STANDS": ["S", "T", "AE1", "N", "D", "Z"], "STANFORD": ["S", "T", "AE1", "N", "F", "ER0", "D"], "STANLEY": ["S", "T", "AE1", "N", "L", "IY0"], "STAR": ["S", "T", "AA1", "R"], "STARRING": ["S", "T", "AA1", "R", "IH0", "NG"], "STARS": ["S", "T", "AA1", "R", "Z"], "START": ["S", "T", "AA1", "R", "T"], "STARTED": ["S", "T", "AA1", "R", "T", "AH0", "D"], "STARTER": ["S", "T", "AA1", "R", "T", "ER0"], "STARTING": ["S", "T", "AA1", "R", "T", "IH0", "NG"], "STARTS": ["S", "T", "AA1", "R", "T", "S"], "STARTUP": ["S", "T", "AA1", "R", "T", "AH2", "P"], "STAT": ["S", "T", "AE1", "T"], "STATE": ["S", "T", "EY1", "T"], "STATED": ["S", "T", "EY1", "T", "IH0", "D"], "STATEMENT": ["S", "T", "EY1", "T", "M", "AH0", "N", "T"], "STATEMENTS": ["S", "T", "EY1", "T", "M", "AH0", "N", "T", "S"], "STATES": ["S", "T", "EY1", "T", "S"], "STATEWIDE": ["S", "T", "EY1", "T", "W", "AY2", "D"], "STATIC": ["S", "T", "AE1", "T", "IH0", "K"], "STATING": ["S", "T", "EY1", "T", "IH0", "NG"], "STATION": ["S", "T", "EY1", "SH", "AH0", "N"], "STATIONERY": ["S", "T", "EY1", "SH", "AH0", "N", "EH2", "R", "IY0"], "STATIONS": ["S", "T", "EY1", "SH", "AH0", "N", "Z"], "STATISTICAL": ["S", "T", "AH0", "T", "IH1", "S", "T", "IH0", "K", "AH0", "L"], "STATISTICS": ["S", "T", "AH0", "T", "IH1", "S", "T", "IH0", "K", "S"], "STATS": ["S", "T", "AE1", "T", "S"], "STATUS": ["S", "T", "AE1", "T", "AH0", "S"], "STATUTE": ["S", "T", "AE1", "CH", "UW0", "T"], "STATUTES": ["S", "T", "AE1", "CH", "UW0", "T", "S"], "STATUTORY": ["S", "T", "AE1", "CH", "AH0", "T", "AO2", "R", "IY0"], "STAY": ["S", "T", "EY1"], "STAYED": ["S", "T", "EY1", "D"], "STAYING": ["S", "T", "EY1", "IH0", "NG"], "STAYS": ["S", "T", "EY1", "Z"], "STEADY": ["S", "T", "EH1", "D", "IY0"], "STEAL": ["S", "T", "IY1", "L"], "STEAM": ["S", "T", "IY1", "M"], "STEEL": ["S", "T", "IY1", "L"], "STEERING": ["S", "T", "IH1", "R", "IH0", "NG"], "STEM": ["S", "T", "EH1", "M"], "STEP": ["S", "T", "EH1", "P"], "STEPHANIE": ["S", "T", "EH1", "F", "AH0", "N", "IY0"], "STEPHEN": ["S", "T", "IY1", "V", "AH0", "N"], "STEPS": ["S", "T", "EH1", "P", "S"], "STEREO": ["S", "T", "EH1", "R", "IY0", "OW2"], "STERLING": ["S", "T", "ER1", "L", "IH0", "NG"], "STEVE": ["S", "T", "IY1", "V"], "STEVEN": ["S", "T", "IY1", "V", "AH0", "N"], "STEVENS": ["S", "T", "IY1", "V", "AH0", "N", "Z"], "STEWART": ["S", "T", "UW1", "ER0", "T"], "STICK": ["S", "T", "IH1", "K"], "STICKER": ["S", "T", "IH1", "K", "ER0"], "STICKERS": ["S", "T", "IH1", "K", "ER0", "Z"], "STICKS": ["S", "T", "IH1", "K", "S"], "STICKY": ["S", "T", "IH1", "K", "IY0"], "STILL": ["S", "T", "IH1", "L"], "STOCK": ["S", "T", "AA1", "K"], "STOCKHOLM": ["S", "T", "AA1", "K", "HH", "OW2", "L", "M"], "STOCKINGS": ["S", "T", "AA1", "K", "IH0", "NG", "Z"], "STOCKS": ["S", "T", "AA1", "K", "S"], "STOLEN": ["S", "T", "OW1", "L", "AH0", "N"], "STOMACH": ["S", "T", "AH1", "M", "AH0", "K"], "STONE": ["S", "T", "OW1", "N"], "STONES": ["S", "T", "OW1", "N", "Z"], "STOOD": ["S", "T", "UH1", "D"], "STOP": ["S", "T", "AA1", "P"], "STOPPED": ["S", "T", "AA1", "P", "T"], "STOPPING": ["S", "T", "AA1", "P", "IH0", "NG"], "STOPS": ["S", "T", "AA1", "P", "S"], "STORAGE": ["S", "T", "AO1", "R", "AH0", "JH"], "STORE": ["S", "T", "AO1", "R"], "STORED": ["S", "T", "AO1", "R", "D"], "STORES": ["S", "T", "AO1", "R", "Z"], "STORIES": ["S", "T", "AO1", "R", "IY0", "Z"], "STORM": ["S", "T", "AO1", "R", "M"], "STORY": ["S", "T", "AO1", "R", "IY0"], "STRAIGHT": ["S", "T", "R", "EY1", "T"], "STRAIN": ["S", "T", "R", "EY1", "N"], "STRAND": ["S", "T", "R", "AE1", "N", "D"], "STRANGE": ["S", "T", "R", "EY1", "N", "JH"], "STRANGER": ["S", "T", "R", "EY1", "N", "JH", "ER0"], "STRAP": ["S", "T", "R", "AE1", "P"], "STRATEGIC": ["S", "T", "R", "AH0", "T", "IY1", "JH", "IH0", "K"], "STRATEGIES": ["S", "T", "R", "AE1", "T", "AH0", "JH", "IY0", "Z"], "STRATEGY": ["S", "T", "R", "AE1", "T", "AH0", "JH", "IY0"], "STREAM": ["S", "T", "R", "IY1", "M"], "STREAMING": ["S", "T", "R", "IY1", "M", "IH0", "NG"], "STREAMS": ["S", "T", "R", "IY1", "M", "Z"], "STREET": ["S", "T", "R", "IY1", "T"], "STREETS": ["S", "T", "R", "IY1", "T", "S"], "STRENGTH": ["S", "T", "R", "EH1", "NG", "K", "TH"], "STRENGTHEN": ["S", "T", "R", "EH1", "NG", "TH", "AH0", "N"], "STRENGTHENING": ["S", "T", "R", "EH1", "NG", "TH", "AH0", "N", "IH0", "NG"], "STRENGTHS": ["S", "T", "R", "EH1", "NG", "K", "TH", "S"], "STRESS": ["S", "T", "R", "EH1", "S"], "STRETCH": ["S", "T", "R", "EH1", "CH"], "STRICT": ["S", "T", "R", "IH1", "K", "T"], "STRICTLY": ["S", "T", "R", "IH1", "K", "T", "L", "IY0"], "STRIKE": ["S", "T", "R", "AY1", "K"], "STRIKES": ["S", "T", "R", "AY1", "K", "S"], "STRIKING": ["S", "T", "R", "AY1", "K", "IH0", "NG"], "STRING": ["S", "T", "R", "IH1", "NG"], "STRINGS": ["S", "T", "R", "IH1", "NG", "Z"], "STRIP": ["S", "T", "R", "IH1", "P"], "STRIPES": ["S", "T", "R", "AY1", "P", "S"], "STRIPS": ["S", "T", "R", "IH1", "P", "S"], "STROKE": ["S", "T", "R", "OW1", "K"], "STRONG": ["S", "T", "R", "AO1", "NG"], "STRONGER": ["S", "T", "R", "AO1", "NG", "G", "ER0"], "STRONGLY": ["S", "T", "R", "AO1", "NG", "L", "IY0"], "STRUCK": ["S", "T", "R", "AH1", "K"], "STRUCTURAL": ["S", "T", "R", "AH1", "K", "CH", "ER0", "AH0", "L"], "STRUCTURE": ["S", "T", "R", "AH1", "K", "CH", "ER0"], "STRUCTURED": ["S", "T", "R", "AH1", "K", "CH", "ER0", "D"], "STRUCTURES": ["S", "T", "R", "AH1", "K", "CH", "ER0", "Z"], "STRUGGLE": ["S", "T", "R", "AH1", "G", "AH0", "L"], "STUART": ["S", "T", "UW1", "ER0", "T"], "STUCK": ["S", "T", "AH1", "K"], "STUD": ["S", "T", "AH1", "D"], "STUDENT": ["S", "T", "UW1", "D", "AH0", "N", "T"], "STUDENTS": ["S", "T", "UW1", "D", "AH0", "N", "T", "S"], "STUDIED": ["S", "T", "AH1", "D", "IY0", "D"], "STUDIES": ["S", "T", "AH1", "D", "IY0", "Z"], "STUDIO": ["S", "T", "UW1", "D", "IY0", "OW2"], "STUDIOS": ["S", "T", "UW1", "D", "IY0", "OW2", "Z"], "STUDY": ["S", "T", "AH1", "D", "IY0"], "STUDYING": ["S", "T", "AH1", "D", "IY0", "IH0", "NG"], "STUFF": ["S", "T", "AH1", "F"], "STUFFED": ["S", "T", "AH1", "F", "T"], "STUNNING": ["S", "T", "AH1", "N", "IH0", "NG"], "STUPID": ["S", "T", "UW1", "P", "AH0", "D"], "STYLE": ["S", "T", "AY1", "L"], "STYLES": ["S", "T", "AY1", "L", "Z"], "STYLISH": ["S", "T", "AY1", "L", "IH0", "SH"], "STYLUS": ["S", "T", "AY1", "L", "AH0", "S"], "SU": ["S", "UW1"], "SUB": ["S", "AH1", "B"], "SUBARU": ["S", "UW1", "B", "ER0", "UW0"], "SUBCOMMITTEE": ["S", "AH1", "B", "K", "AH0", "M", "IH1", "T", "IY0"], "SUBDIVISION": ["S", "AH1", "B", "D", "IH0", "V", "IH2", "ZH", "AH0", "N"], "SUBJECT": ["S", "AH0", "B", "JH", "EH1", "K", "T"], "SUBJECTS": ["S", "AH1", "B", "JH", "IH0", "K", "T", "S"], "SUBLIME": ["S", "AH0", "B", "L", "AY1", "M"], "SUBMISSION": ["S", "AH0", "B", "M", "IH1", "SH", "AH0", "N"], "SUBMISSIONS": ["S", "AH0", "B", "M", "IH1", "SH", "AH0", "N", "Z"], "SUBMIT": ["S", "AH0", "B", "M", "IH1", "T"], "SUBMITTED": ["S", "AH0", "B", "M", "IH1", "T", "AH0", "D"], "SUBMITTING": ["S", "AH0", "B", "M", "IH1", "T", "IH0", "NG"], "SUBSCRIBE": ["S", "AH0", "B", "S", "K", "R", "AY1", "B"], "SUBSCRIBER": ["S", "AH0", "B", "S", "K", "R", "AY1", "B", "ER0"], "SUBSCRIBERS": ["S", "AH0", "B", "S", "K", "R", "AY1", "B", "ER0", "Z"], "SUBSCRIPTION": ["S", "AH0", "B", "S", "K", "R", "IH1", "P", "SH", "AH0", "N"], "SUBSCRIPTIONS": ["S", "AH0", "B", "S", "K", "R", "IH1", "P", "SH", "AH0", "N", "Z"], "SUBSECTION": ["S", "AH1", "B", "S", "EH0", "K", "SH", "AH0", "N"], "SUBSEQUENT": ["S", "AH1", "B", "S", "AH0", "K", "W", "AH0", "N", "T"], "SUBSEQUENTLY": ["S", "AH1", "B", "S", "AH0", "K", "W", "AH0", "N", "T", "L", "IY0"], "SUBSIDIARIES": ["S", "AH0", "B", "S", "IH1", "D", "IY0", "EH2", "R", "IY0", "Z"], "SUBSIDIARY": ["S", "AH0", "B", "S", "IH1", "D", "IY0", "EH2", "R", "IY0"], "SUBSTANCE": ["S", "AH1", "B", "S", "T", "AH0", "N", "S"], "SUBSTANCES": ["S", "AH1", "B", "S", "T", "AH0", "N", "S", "AH0", "Z"], "SUBSTANTIAL": ["S", "AH0", "B", "S", "T", "AE1", "N", "SH", "AH0", "L"], "SUBSTANTIALLY": ["S", "AH0", "B", "S", "T", "AE1", "N", "SH", "AH0", "L", "IY0"], "SUBSTITUTE": ["S", "AH1", "B", "S", "T", "AH0", "T", "UW2", "T"], "SUBTLE": ["S", "AH1", "T", "AH0", "L"], "SUBURBAN": ["S", "AH0", "B", "ER1", "B", "AH0", "N"], "SUCCEED": ["S", "AH0", "K", "S", "IY1", "D"], "SUCCESS": ["S", "AH0", "K", "S", "EH1", "S"], "SUCCESSFUL": ["S", "AH0", "K", "S", "EH1", "S", "F", "AH0", "L"], "SUCCESSFULLY": ["S", "AH0", "K", "S", "EH1", "S", "F", "AH0", "L", "IY0"], "SUCH": ["S", "AH1", "CH"], "SUCK": ["S", "AH1", "K"], "SUCKING": ["S", "AH1", "K", "IH0", "NG"], "SUCKS": ["S", "AH1", "K", "S"], "SUDAN": ["S", "UW0", "D", "AE1", "N"], "SUDDEN": ["S", "AH1", "D", "AH0", "N"], "SUDDENLY": ["S", "AH1", "D", "AH0", "N", "L", "IY0"], "SUE": ["S", "UW1"], "SUFFER": ["S", "AH1", "F", "ER0"], "SUFFERED": ["S", "AH1", "F", "ER0", "D"], "SUFFERING": ["S", "AH1", "F", "ER0", "IH0", "NG"], "SUFFICIENT": ["S", "AH0", "F", "IH1", "SH", "AH0", "N", "T"], "SUFFICIENTLY": ["S", "AH0", "F", "IH1", "SH", "AH0", "N", "T", "L", "IY0"], "SUGAR": ["SH", "UH1", "G", "ER0"], "SUGGEST": ["S", "AH0", "JH", "EH1", "S", "T"], "SUGGESTED": ["S", "AH0", "JH", "EH1", "S", "T", "AH0", "D"], "SUGGESTING": ["S", "AH0", "JH", "EH1", "S", "T", "IH0", "NG"], "SUGGESTION": ["S", "AH0", "JH", "EH1", "S", "CH", "AH0", "N"], "SUGGESTIONS": ["S", "AH0", "JH", "EH1", "S", "CH", "AH0", "N", "Z"], "SUGGESTS": ["S", "AH0", "JH", "EH1", "S", "T", "S"], "SUICIDE": ["S", "UW1", "AH0", "S", "AY2", "D"], "SUIT": ["S", "UW1", "T"], "SUITABLE": ["S", "UW1", "T", "AH0", "B", "AH0", "L"], "SUITE": ["S", "W", "IY1", "T"], "SUITED": ["S", "UW1", "T", "AH0", "D"], "SUITES": ["S", "W", "IY1", "T", "S"], "SUITS": ["S", "UW1", "T", "S"], "SULLIVAN": ["S", "AH1", "L", "AH0", "V", "AH0", "N"], "SUM": ["S", "AH1", "M"], "SUMMARIES": ["S", "AH1", "M", "ER0", "IY0", "Z"], "SUMMARY": ["S", "AH1", "M", "ER0", "IY0"], "SUMMER": ["S", "AH1", "M", "ER0"], "SUMMIT": ["S", "AH1", "M", "AH0", "T"], "SUN": ["S", "AH1", "N"], "SUNDAY": ["S", "AH1", "N", "D", "EY2"], "SUNGLASSES": ["S", "AH1", "N", "G", "L", "AE2", "S", "IH0", "Z"], "SUNNY": ["S", "AH1", "N", "IY0"], "SUNRISE": ["S", "AH1", "N", "R", "AY2", "Z"], "SUNSET": ["S", "AH1", "N", "S", "EH2", "T"], "SUNSHINE": ["S", "AH1", "N", "SH", "AY2", "N"], "SUPER": ["S", "UW1", "P", "ER0"], "SUPERB": ["S", "UH0", "P", "ER1", "B"], "SUPERINTENDENT": ["S", "UW2", "P", "ER0", "AH0", "N", "T", "EH1", "N", "D", "AH0", "N", "T"], "SUPERIOR": ["S", "UW0", "P", "IH1", "R", "IY0", "ER0"], "SUPERVISION": ["S", "UW2", "P", "ER0", "V", "IH1", "ZH", "AH0", "N"], "SUPERVISOR": ["S", "UW1", "P", "ER0", "V", "AY2", "Z", "ER0"], "SUPERVISORS": ["S", "UW2", "P", "ER0", "V", "AY1", "Z", "ER0", "Z"], "SUPPLEMENT": ["S", "AH1", "P", "L", "AH0", "M", "AH0", "N", "T"], "SUPPLEMENTAL": ["S", "AH2", "P", "L", "AH0", "M", "EH1", "N", "T", "AH0", "L"], "SUPPLEMENTS": ["S", "AH2", "P", "L", "AH0", "M", "EH1", "N", "T", "S"], "SUPPLIED": ["S", "AH0", "P", "L", "AY1", "D"], "SUPPLIER": ["S", "AH0", "P", "L", "AY1", "ER0"], "SUPPLIERS": ["S", "AH0", "P", "L", "AY1", "ER0", "Z"], "SUPPLIES": ["S", "AH0", "P", "L", "AY1", "Z"], "SUPPLY": ["S", "AH0", "P", "L", "AY1"], "SUPPORT": ["S", "AH0", "P", "AO1", "R", "T"], "SUPPORTED": ["S", "AH0", "P", "AO1", "R", "T", "AH0", "D"], "SUPPORTERS": ["S", "AH0", "P", "AO1", "R", "T", "ER0", "Z"], "SUPPORTING": ["S", "AH0", "P", "AO1", "R", "T", "IH0", "NG"], "SUPPORTS": ["S", "AH0", "P", "AO1", "R", "T", "S"], "SUPPOSE": ["S", "AH0", "P", "OW1", "Z"], "SUPPOSED": ["S", "AH0", "P", "OW1", "Z", "D"], "SUPREME": ["S", "AH0", "P", "R", "IY1", "M"], "SUR": ["S", "ER1"], "SURE": ["SH", "UH1", "R"], "SURELY": ["SH", "UH1", "R", "L", "IY0"], "SURF": ["S", "ER1", "F"], "SURFACE": ["S", "ER1", "F", "AH0", "S"], "SURFACES": ["S", "ER1", "F", "AH0", "S", "AH0", "Z"], "SURFING": ["S", "ER1", "F", "IH0", "NG"], "SURGE": ["S", "ER1", "JH"], "SURGEON": ["S", "ER1", "JH", "AH0", "N"], "SURGEONS": ["S", "ER1", "JH", "AH0", "N", "Z"], "SURGERY": ["S", "ER1", "JH", "ER0", "IY0"], "SURGICAL": ["S", "ER1", "JH", "IH0", "K", "AH0", "L"], "SURNAME": ["S", "ER1", "N", "EY2", "M"], "SURPLUS": ["S", "ER1", "P", "L", "AH0", "S"], "SURPRISE": ["S", "ER0", "P", "R", "AY1", "Z"], "SURPRISED": ["S", "ER0", "P", "R", "AY1", "Z", "D"], "SURPRISING": ["S", "ER0", "P", "R", "AY1", "Z", "IH0", "NG"], "SURREY": ["S", "ER1", "IY0"], "SURROUND": ["S", "ER0", "AW1", "N", "D"], "SURROUNDED": ["S", "ER0", "AW1", "N", "D", "AH0", "D"], "SURROUNDING": ["S", "ER0", "AW1", "N", "D", "IH0", "NG"], "SURVEILLANCE": ["S", "ER0", "V", "EY1", "L", "AH0", "N", "S"], "SURVEY": ["S", "ER0", "V", "EY1"], "SURVEYS": ["S", "ER0", "V", "EY1", "Z"], "SURVIVAL": ["S", "ER0", "V", "AY1", "V", "AH0", "L"], "SURVIVE": ["S", "ER0", "V", "AY1", "V"], "SURVIVOR": ["S", "ER0", "V", "AY1", "V", "ER0"], "SURVIVORS": ["S", "ER0", "V", "AY1", "V", "ER0", "Z"], "SUSAN": ["S", "UW1", "Z", "AH0", "N"], "SUSPECT": ["S", "AH0", "S", "P", "EH1", "K", "T"], "SUSPECTED": ["S", "AH0", "S", "P", "EH1", "K", "T", "AH0", "D"], "SUSPENDED": ["S", "AH0", "S", "P", "EH1", "N", "D", "AH0", "D"], "SUSPENSION": ["S", "AH0", "S", "P", "EH1", "N", "SH", "AH0", "N"], "SUSSEX": ["S", "AH1", "S", "IH0", "K", "S"], "SUSTAINABILITY": ["S", "AH0", "S", "T", "EY2", "N", "AH0", "B", "IH1", "L", "IH0", "T", "IY0"], "SUSTAINABLE": ["S", "AH0", "S", "T", "EY1", "N", "AH0", "B", "AH0", "L"], "SUSTAINED": ["S", "AH0", "S", "T", "EY1", "N", "D"], "SUZUKI": ["S", "AH0", "Z", "UW1", "K", "IY0"], "SWAP": ["S", "W", "AA1", "P"], "SWEDEN": ["S", "W", "IY1", "D", "AH0", "N"], "SWEDISH": ["S", "W", "IY1", "D", "IH0", "SH"], "SWEET": ["S", "W", "IY1", "T"], "SWIFT": ["S", "W", "IH1", "F", "T"], "SWIM": ["S", "W", "IH1", "M"], "SWIMMING": ["S", "W", "IH1", "M", "IH0", "NG"], "SWING": ["S", "W", "IH1", "NG"], "SWINGERS": ["S", "W", "IH1", "NG", "ER0", "Z"], "SWISS": ["S", "W", "IH1", "S"], "SWITCH": ["S", "W", "IH1", "CH"], "SWITCHED": ["S", "W", "IH1", "CH", "T"], "SWITCHES": ["S", "W", "IH1", "CH", "AH0", "Z"], "SWITCHING": ["S", "W", "IH1", "CH", "IH0", "NG"], "SWITZERLAND": ["S", "W", "IH1", "T", "S", "ER0", "L", "AH0", "N", "D"], "SWORD": ["S", "AO1", "R", "D"], "SYDNEY": ["S", "IH1", "D", "N", "IY0"], "SYMANTEC": ["S", "IH0", "M", "AE1", "N", "T", "EH2", "K"], "SYMBOL": ["S", "IH1", "M", "B", "AH0", "L"], "SYMBOLS": ["S", "IH1", "M", "B", "AH0", "L", "Z"], "SYMPATHY": ["S", "IH1", "M", "P", "AH0", "TH", "IY0"], "SYMPHONY": ["S", "IH1", "M", "F", "AH0", "N", "IY0"], "SYMPOSIUM": ["S", "IH0", "M", "P", "OW1", "Z", "IY0", "AH0", "M"], "SYMPTOMS": ["S", "IH1", "M", "P", "T", "AH0", "M", "Z"], "SYNC": ["S", "IH1", "NG", "K"], "SYNDICATE": ["S", "IH1", "N", "D", "IH0", "K", "AH0", "T"], "SYNDICATION": ["S", "IH2", "N", "D", "IH0", "K", "EY1", "SH", "AH0", "N"], "SYNDROME": ["S", "IH1", "N", "D", "R", "OW2", "M"], "SYNOPSIS": ["S", "IH0", "N", "AA1", "P", "S", "IH0", "S"], "SYNTAX": ["S", "IH1", "N", "T", "AE2", "K", "S"], "SYNTHESIS": ["S", "IH1", "N", "TH", "AH0", "S", "AH0", "S"], "SYNTHETIC": ["S", "IH0", "N", "TH", "EH1", "T", "IH0", "K"], "SYRACUSE": ["S", "IH1", "R", "AH0", "K", "Y", "UW2", "Z"], "SYRIA": ["S", "IH1", "R", "IY0", "AH0"], "SYSTEM": ["S", "IH1", "S", "T", "AH0", "M"], "SYSTEMATIC": ["S", "IH2", "S", "T", "AH0", "M", "AE1", "T", "IH0", "K"], "SYSTEMS": ["S", "IH1", "S", "T", "AH0", "M", "Z"], "T": ["T", "IY1"], "TA": ["T", "AA1"], "TAB": ["T", "AE1", "B"], "TABLE": ["T", "EY1", "B", "AH0", "L"], "TABLES": ["T", "EY1", "B", "AH0", "L", "Z"], "TABLET": ["T", "AE1", "B", "L", "AH0", "T"], "TABLETS": ["T", "AE1", "B", "L", "AH0", "T", "S"], "TABS": ["T", "AE1", "B", "Z"], "TACKLE": ["T", "AE1", "K", "AH0", "L"], "TACTICS": ["T", "AE1", "K", "T", "IH0", "K", "S"], "TAG": ["T", "AE1", "G"], "TAGGED": ["T", "AE1", "G", "D"], "TAGS": ["T", "AE1", "G", "Z"], "TAHOE": ["T", "AE1", "HH", "OW0"], "TAIL": ["T", "EY1", "L"], "TAIWAN": ["T", "AY1", "W", "AA1", "N"], "TAKE": ["T", "EY1", "K"], "TAKEN": ["T", "EY1", "K", "AH0", "N"], "TAKES": ["T", "EY1", "K", "S"], "TAKING": ["T", "EY1", "K", "IH0", "NG"], "TALE": ["T", "EY1", "L"], "TALENT": ["T", "AE1", "L", "AH0", "N", "T"], "TALENTED": ["T", "AE1", "L", "AH0", "N", "T", "AH0", "D"], "TALES": ["T", "EY1", "L", "Z"], "TALK": ["T", "AO1", "K"], "TALKED": ["T", "AO1", "K", "T"], "TALKING": ["T", "AO1", "K", "IH0", "NG"], "TALKS": ["T", "AO1", "K", "S"], "TALL": ["T", "AO1", "L"], "TAMIL": ["T", "AH0", "M", "IH1", "L"], "TAMPA": ["T", "AE1", "M", "P", "AH0"], "TAN": ["T", "AE1", "N"], "TANK": ["T", "AE1", "NG", "K"], "TANKS": ["T", "AE1", "NG", "K", "S"], "TANZANIA": ["T", "AE0", "N", "Z", "EY1", "N", "IY0", "AH0"], "TAP": ["T", "AE1", "P"], "TAPE": ["T", "EY1", "P"], "TAPES": ["T", "EY1", "P", "S"], "TAR": ["T", "AA1", "R"], "TARGET": ["T", "AA1", "R", "G", "AH0", "T"], "TARGETED": ["T", "AA1", "R", "G", "AH0", "T", "IH0", "D"], "TARGETS": ["T", "AA1", "R", "G", "AH0", "T", "S"], "TARIFF": ["T", "EH1", "R", "AH0", "F"], "TASK": ["T", "AE1", "S", "K"], "TASKS": ["T", "AE1", "S", "K", "S"], "TASTE": ["T", "EY1", "S", "T"], "TATTOO": ["T", "AE2", "T", "UW1"], "TAUGHT": ["T", "AO1", "T"], "TAX": ["T", "AE1", "K", "S"], "TAXATION": ["T", "AE0", "K", "S", "EY1", "SH", "AH0", "N"], "TAXES": ["T", "AE1", "K", "S", "AH0", "Z"], "TAXI": ["T", "AE1", "K", "S", "IY0"], "TAYLOR": ["T", "EY1", "L", "ER0"], "TB": ["T", "IY1", "B", "IY1"], "TE": ["T", "IY1"], "TEA": ["T", "IY1"], "TEACH": ["T", "IY1", "CH"], "TEACHER": ["T", "IY1", "CH", "ER0"], "TEACHERS": ["T", "IY1", "CH", "ER0", "Z"], "TEACHES": ["T", "IY1", "CH", "AH0", "Z"], "TEACHING": ["T", "IY1", "CH", "IH0", "NG"], "TEAM": ["T", "IY1", "M"], "TEAMS": ["T", "IY1", "M", "Z"], "TEAR": ["T", "EH1", "R"], "TEARS": ["T", "EH1", "R", "Z"], "TECH": ["T", "EH1", "K"], "TECHNICAL": ["T", "EH1", "K", "N", "IH0", "K", "AH0", "L"], "TECHNICIAN": ["T", "EH0", "K", "N", "IH1", "SH", "AH0", "N"], "TECHNIQUE": ["T", "EH0", "K", "N", "IY1", "K"], "TECHNIQUES": ["T", "EH0", "K", "N", "IY1", "K", "S"], "TECHNO": ["T", "EH1", "K", "N", "OW0"], "TECHNOLOGICAL": ["T", "EH2", "K", "N", "AH0", "L", "AA1", "JH", "IH0", "K", "AH0", "L"], "TECHNOLOGIES": ["T", "EH0", "K", "N", "AA1", "L", "AH0", "JH", "IY0", "Z"], "TECHNOLOGY": ["T", "EH0", "K", "N", "AA1", "L", "AH0", "JH", "IY0"], "TED": ["T", "EH1", "D"], "TEDDY": ["T", "EH1", "D", "IY0"], "TEE": ["T", "IY1"], "TEEN": ["T", "IY1", "N"], "TEENAGE": ["T", "IY1", "N", "EY2", "JH"], "TEENS": ["T", "IY1", "N", "Z"], "TEETH": ["T", "IY1", "TH"], "TEL": ["T", "EH1", "L"], "TELECOM": ["T", "EH1", "L", "AH0", "K", "AA0", "M"], "TELECOMMUNICATIONS": ["T", "EH2", "L", "AH0", "K", "AH0", "M", "Y", "UW2", "N", "AH0", "K", "EY1", "SH", "AH0", "N", "Z"], "TELEPHONE": ["T", "EH1", "L", "AH0", "F", "OW2", "N"], "TELEPHONY": ["T", "EH1", "L", "AH0", "F", "OW2", "N", "IY0"], "TELESCOPE": ["T", "EH1", "L", "AH0", "S", "K", "OW2", "P"], "TELEVISION": ["T", "EH1", "L", "AH0", "V", "IH2", "ZH", "AH0", "N"], "TELEVISIONS": ["T", "EH1", "L", "AH0", "V", "IH2", "ZH", "AH0", "N", "Z"], "TELL": ["T", "EH1", "L"], "TELLING": ["T", "EH1", "L", "IH0", "NG"], "TELLS": ["T", "EH1", "L", "Z"], "TEMP": ["T", "EH1", "M", "P"], "TEMPERATURE": ["T", "EH1", "M", "P", "R", "AH0", "CH", "ER0"], "TEMPERATURES": ["T", "EH1", "M", "P", "R", "AH0", "CH", "ER0", "Z"], "TEMPLATE": ["T", "EH1", "M", "P", "L", "AH0", "T"], "TEMPLE": ["T", "EH1", "M", "P", "AH0", "L"], "TEMPORAL": ["T", "EH1", "M", "P", "ER0", "AH0", "L"], "TEMPORARILY": ["T", "EH2", "M", "P", "ER0", "EH1", "R", "AH0", "L", "IY0"], "TEMPORARY": ["T", "EH1", "M", "P", "ER0", "EH2", "R", "IY0"], "TEN": ["T", "EH1", "N"], "TENANT": ["T", "EH1", "N", "AH0", "N", "T"], "TEND": ["T", "EH1", "N", "D"], "TENDER": ["T", "EH1", "N", "D", "ER0"], "TENNESSEE": ["T", "EH2", "N", "AH0", "S", "IY1"], "TENNIS": ["T", "EH1", "N", "AH0", "S"], "TENSION": ["T", "EH1", "N", "SH", "AH0", "N"], "TENT": ["T", "EH1", "N", "T"], "TERM": ["T", "ER1", "M"], "TERMINAL": ["T", "ER1", "M", "AH0", "N", "AH0", "L"], "TERMINALS": ["T", "ER1", "M", "AH0", "N", "AH0", "L", "Z"], "TERMINATION": ["T", "ER0", "M", "AH0", "N", "EY1", "SH", "AH0", "N"], "TERMINOLOGY": ["T", "ER2", "M", "IH0", "N", "AA1", "L", "AH0", "JH", "IY0"], "TERMS": ["T", "ER1", "M", "Z"], "TERRACE": ["T", "EH1", "R", "AH0", "S"], "TERRAIN": ["T", "ER0", "EY1", "N"], "TERRIBLE": ["T", "EH1", "R", "AH0", "B", "AH0", "L"], "TERRITORIES": ["T", "EH1", "R", "AH0", "T", "AO2", "R", "IY0", "Z"], "TERRITORY": ["T", "EH1", "R", "IH0", "T", "AO2", "R", "IY0"], "TERROR": ["T", "EH1", "R", "ER0"], "TERRORISM": ["T", "EH1", "R", "AH0", "R", "IH2", "Z", "AH0", "M"], "TERRORIST": ["T", "EH1", "R", "AH0", "R", "IH0", "S", "T"], "TERRORISTS": ["T", "EH1", "R", "AH0", "R", "IH2", "S", "T", "S"], "TERRY": ["T", "EH1", "R", "IY0"], "TEST": ["T", "EH1", "S", "T"], "TESTAMENT": ["T", "EH1", "S", "T", "AH0", "M", "AH0", "N", "T"], "TESTED": ["T", "EH1", "S", "T", "IH0", "D"], "TESTIMONIALS": ["T", "EH2", "S", "T", "IH0", "M", "OW1", "N", "IY0", "AH0", "L", "Z"], "TESTIMONY": ["T", "EH1", "S", "T", "IH0", "M", "OW2", "N", "IY0"], "TESTING": ["T", "EH1", "S", "T", "IH0", "NG"], "TESTS": ["T", "EH1", "S", "T", "S"], "TEX": ["T", "EH1", "K", "S"], "TEXAS": ["T", "EH1", "K", "S", "AH0", "S"], "TEXT": ["T", "EH1", "K", "S", "T"], "TEXTBOOK": ["T", "EH1", "K", "S", "T", "B", "UH2", "K"], "TEXTBOOKS": ["T", "EH1", "K", "S", "T", "B", "UH2", "K", "S"], "TEXTILE": ["T", "EH1", "K", "S", "T", "AY2", "L"], "TEXTILES": ["T", "EH1", "K", "S", "T", "AY2", "L", "Z"], "TEXTS": ["T", "EH1", "K", "S", "T", "S"], "TEXTURE": ["T", "EH1", "K", "S", "CH", "ER0"], "TH": ["T", "IY1", "EY1", "CH"], "THAI": ["T", "AY1"], "THAILAND": ["T", "AY1", "L", "AE2", "N", "D"], "THAN": ["DH", "AE1", "N"], "THANK": ["TH", "AE1", "NG", "K"], "THANKS": ["TH", "AE1", "NG", "K", "S"], "THANKSGIVING": ["TH", "AE2", "NG", "K", "S", "G", "IH1", "V", "IH0", "NG"], "THAT": ["DH", "AE1", "T"], "THE": ["DH", "AH0"], "THEATER": ["TH", "IY1", "EY0", "T", "ER0"], "THEATERS": ["TH", "IY1", "AH0", "T", "ER0", "Z"], "THEATRE": ["TH", "IY1", "AH0", "T", "ER0"], "THEE": ["DH", "IY1"], "THEFT": ["TH", "EH1", "F", "T"], "THEIR": ["DH", "EH1", "R"], "THEM": ["DH", "EH1", "M"], "THEME": ["TH", "IY1", "M"], "THEMES": ["TH", "IY1", "M", "Z"], "THEMSELVES": ["DH", "EH0", "M", "S", "EH1", "L", "V", "Z"], "THEN": ["DH", "EH1", "N"], "THEOLOGY": ["TH", "IY0", "AA1", "L", "AH0", "JH", "IY0"], "THEOREM": ["TH", "IH1", "R", "AH0", "M"], "THEORETICAL": ["TH", "IY2", "ER0", "EH1", "T", "IH0", "K", "AH0", "L"], "THEORIES": ["TH", "IH1", "R", "IY0", "Z"], "THEORY": ["TH", "IH1", "R", "IY0"], "THERAPEUTIC": ["TH", "EH2", "R", "AH0", "P", "Y", "UW1", "T", "IH0", "K"], "THERAPIST": ["TH", "EH1", "R", "AH0", "P", "IH0", "S", "T"], "THERAPY": ["TH", "EH1", "R", "AH0", "P", "IY0"], "THERE": ["DH", "EH1", "R"], "THEREAFTER": ["DH", "EH0", "R", "AE1", "F", "T", "ER0"], "THEREBY": ["DH", "EH1", "R", "B", "AY1"], "THEREFORE": ["DH", "EH1", "R", "F", "AO2", "R"], "THEREOF": ["DH", "EH2", "R", "AH1", "V"], "THERMAL": ["TH", "ER1", "M", "AH0", "L"], "THESAURUS": ["TH", "AH0", "S", "AO1", "R", "AH0", "S"], "THESE": ["DH", "IY1", "Z"], "THESIS": ["TH", "IY1", "S", "IH2", "S"], "THEY": ["DH", "EY1"], "THICK": ["TH", "IH1", "K"], "THICKNESS": ["TH", "IH1", "K", "N", "AH0", "S"], "THIN": ["TH", "IH1", "N"], "THING": ["TH", "IH1", "NG"], "THINGS": ["TH", "IH1", "NG", "Z"], "THINK": ["TH", "IH1", "NG", "K"], "THINKING": ["TH", "IH1", "NG", "K", "IH0", "NG"], "THINKPAD": ["TH", "IH1", "NG", "K", "P", "AE2", "D"], "THINKS": ["TH", "IH1", "NG", "K", "S"], "THIRD": ["TH", "ER1", "D"], "THIRTY": ["TH", "ER1", "D", "IY2"], "THIS": ["DH", "IH1", "S"], "THOMAS": ["T", "AA1", "M", "AH0", "S"], "THOMPSON": ["T", "AA1", "M", "P", "S", "AH0", "N"], "THOMSON": ["T", "AA1", "M", "S", "AH0", "N"], "THONG": ["TH", "AO1", "NG"], "THOROUGH": ["TH", "ER1", "OW0"], "THOROUGHLY": ["TH", "ER1", "OW0", "L", "IY0"], "THOSE": ["DH", "OW1", "Z"], "THOU": ["DH", "AW1"], "THOUGH": ["DH", "OW1"], "THOUGHT": ["TH", "AO1", "T"], "THOUGHTS": ["TH", "AO1", "T", "S"], "THOUSAND": ["TH", "AW1", "Z", "AH0", "N", "D"], "THOUSANDS": ["TH", "AW1", "Z", "AH0", "N", "D", "Z"], "THREAD": ["TH", "R", "EH1", "D"], "THREADED": ["TH", "R", "EH1", "D", "AH0", "D"], "THREADS": ["TH", "R", "EH1", "D", "Z"], "THREAT": ["TH", "R", "EH1", "T"], "THREATENED": ["TH", "R", "EH1", "T", "AH0", "N", "D"], "THREATENING": ["TH", "R", "EH1", "T", "AH0", "N", "IH0", "NG"], "THREATS": ["TH", "R", "EH1", "T", "S"], "THREE": ["TH", "R", "IY1"], "THREESOME": ["TH", "R", "IY1", "S", "AH0", "M"], "THRESHOLD": ["TH", "R", "EH1", "SH", "OW2", "L", "D"], "THRILLER": ["TH", "R", "IH1", "L", "ER0"], "THROAT": ["TH", "R", "OW1", "T"], "THROUGH": ["TH", "R", "UW1"], "THROUGHOUT": ["TH", "R", "UW0", "AW1", "T"], "THROW": ["TH", "R", "OW1"], "THROWING": ["TH", "R", "OW1", "IH0", "NG"], "THROWN": ["TH", "R", "OW1", "N"], "THROWS": ["TH", "R", "OW1", "Z"], "THRU": ["TH", "R", "UW1"], "THUMB": ["TH", "AH1", "M"], "THUMBNAIL": ["TH", "AH1", "M", "N", "EY2", "L"], "THUMBS": ["TH", "AH1", "M", "Z"], "THUNDER": ["TH", "AH1", "N", "D", "ER0"], "THURSDAY": ["TH", "ER1", "Z", "D", "EY2"], "THUS": ["DH", "AH1", "S"], "THY": ["DH", "AY1"], "TI": ["T", "IY1"], "TICKET": ["T", "IH1", "K", "AH0", "T"], "TICKETS": ["T", "IH1", "K", "AH0", "T", "S"], "TIDE": ["T", "AY1", "D"], "TIE": ["T", "AY1"], "TIED": ["T", "AY1", "D"], "TIER": ["T", "IY1", "R"], "TIES": ["T", "AY1", "Z"], "TIFFANY": ["T", "IH1", "F", "AH0", "N", "IY0"], "TIGER": ["T", "AY1", "G", "ER0"], "TIGERS": ["T", "AY1", "G", "ER0", "Z"], "TIGHT": ["T", "AY1", "T"], "TIL": ["T", "IH1", "L"], "TILE": ["T", "AY1", "L"], "TILES": ["T", "AY1", "L", "Z"], "TILL": ["T", "IH1", "L"], "TIM": ["T", "IH1", "M"], "TIMBER": ["T", "IH1", "M", "B", "ER0"], "TIME": ["T", "AY1", "M"], "TIMELINE": ["T", "AY1", "M", "L", "AY0", "N"], "TIMELY": ["T", "AY1", "M", "L", "IY0"], "TIMER": ["T", "AY1", "M", "ER0"], "TIMES": ["T", "AY1", "M", "Z"], "TIMING": ["T", "AY1", "M", "IH0", "NG"], "TIMOTHY": ["T", "IH1", "M", "AH0", "TH", "IY0"], "TIN": ["T", "IH1", "N"], "TINY": ["T", "AY1", "N", "IY0"], "TIP": ["T", "IH1", "P"], "TIPS": ["T", "IH1", "P", "S"], "TIRE": ["T", "AY1", "ER0"], "TIRED": ["T", "AY1", "ER0", "D"], "TIRES": ["T", "AY1", "ER0", "Z"], "TISSUE": ["T", "IH1", "S", "Y", "UW2"], "TIT": ["T", "IH1", "T"], "TITANIUM": ["T", "AY0", "T", "EY1", "N", "IY0", "AH0", "M"], "TITANS": ["T", "AY1", "T", "AH0", "N", "Z"], "TITLE": ["T", "AY1", "T", "AH0", "L"], "TITLED": ["T", "AY1", "T", "AH0", "L", "D"], "TITLES": ["T", "AY1", "T", "AH0", "L", "Z"], "TITS": ["T", "IH1", "T", "S"], "TO": ["T", "UW1"], "TOBACCO": ["T", "AH0", "B", "AE1", "K", "OW2"], "TOBAGO": ["T", "AH0", "B", "EY1", "G", "OW0"], "TODAY": ["T", "AH0", "D", "EY1"], "TODD": ["T", "AA1", "D"], "TODDLER": ["T", "AA1", "D", "L", "ER0"], "TOE": ["T", "OW1"], "TOGETHER": ["T", "AH0", "G", "EH1", "DH", "ER0"], "TOILET": ["T", "OY1", "L", "AH0", "T"], "TOKEN": ["T", "OW1", "K", "AH0", "N"], "TOKYO": ["T", "OW1", "K", "IY0", "OW2"], "TOLD": ["T", "OW1", "L", "D"], "TOLERANCE": ["T", "AA1", "L", "ER0", "AH0", "N", "S"], "TOLL": ["T", "OW1", "L"], "TOM": ["T", "AA1", "M"], "TOMATO": ["T", "AH0", "M", "EY1", "T", "OW2"], "TOMATOES": ["T", "AH0", "M", "EY1", "T", "OW0", "Z"], "TOMMY": ["T", "AA1", "M", "IY0"], "TOMORROW": ["T", "AH0", "M", "AA1", "R", "OW2"], "TON": ["T", "AH1", "N"], "TONE": ["T", "OW1", "N"], "TONER": ["T", "OW1", "N", "ER0"], "TONES": ["T", "OW1", "N", "Z"], "TONGUE": ["T", "AH1", "NG"], "TONIGHT": ["T", "AH0", "N", "AY1", "T"], "TONS": ["T", "AH1", "N", "Z"], "TONY": ["T", "OW1", "N", "IY0"], "TOO": ["T", "UW1"], "TOOK": ["T", "UH1", "K"], "TOOL": ["T", "UW1", "L"], "TOOLBAR": ["T", "UW1", "L", "B", "AA2", "R"], "TOOLBOX": ["T", "UW1", "L", "B", "AO2", "K", "S"], "TOOLS": ["T", "UW1", "L", "Z"], "TOOTH": ["T", "UW1", "TH"], "TOP": ["T", "AA1", "P"], "TOPIC": ["T", "AA1", "P", "IH0", "K"], "TOPICS": ["T", "AA1", "P", "IH0", "K", "S"], "TOPLESS": ["T", "AA1", "P", "L", "AH0", "S"], "TOPS": ["T", "AA1", "P", "S"], "TORONTO": ["T", "ER0", "AA1", "N", "T", "OW0"], "TORTURE": ["T", "AO1", "R", "CH", "ER0"], "TOSHIBA": ["T", "OW0", "SH", "IY1", "B", "AH0"], "TOTAL": ["T", "OW1", "T", "AH0", "L"], "TOTALLY": ["T", "OW1", "T", "AH0", "L", "IY0"], "TOTALS": ["T", "OW1", "T", "AH0", "L", "Z"], "TOUCH": ["T", "AH1", "CH"], "TOUCHED": ["T", "AH1", "CH", "T"], "TOUGH": ["T", "AH1", "F"], "TOUR": ["T", "UH1", "R"], "TOURING": ["T", "UH1", "R", "IH0", "NG"], "TOURISM": ["T", "UH1", "R", "IH2", "Z", "AH0", "M"], "TOURIST": ["T", "UH1", "R", "AH0", "S", "T"], "TOURNAMENT": ["T", "UH1", "R", "N", "AH0", "M", "AH0", "N", "T"], "TOURNAMENTS": ["T", "ER1", "N", "AH0", "M", "AH0", "N", "T", "S"], "TOURS": ["T", "UH1", "R", "Z"], "TOWARD": ["T", "AH0", "W", "AO1", "R", "D"], "TOWARDS": ["T", "AH0", "W", "AO1", "R", "D", "Z"], "TOWER": ["T", "AW1", "ER0"], "TOWERS": ["T", "AW1", "ER0", "Z"], "TOWN": ["T", "AW1", "N"], "TOWNS": ["T", "AW1", "N", "Z"], "TOWNSHIP": ["T", "AW1", "N", "SH", "IH0", "P"], "TOXIC": ["T", "AA1", "K", "S", "IH0", "K"], "TOY": ["T", "OY1"], "TOYOTA": ["T", "OW0", "Y", "OW1", "T", "AH0"], "TOYS": ["T", "OY1", "Z"], "TRACE": ["T", "R", "EY1", "S"], "TRACK": ["T", "R", "AE1", "K"], "TRACKED": ["T", "R", "AE1", "K", "T"], "TRACKER": ["T", "R", "AE1", "K", "ER0"], "TRACKING": ["T", "R", "AE1", "K", "IH0", "NG"], "TRACKS": ["T", "R", "AE1", "K", "S"], "TRACT": ["T", "R", "AE1", "K", "T"], "TRACTOR": ["T", "R", "AE1", "K", "T", "ER0"], "TRACY": ["T", "R", "EY1", "S", "IY0"], "TRADE": ["T", "R", "EY1", "D"], "TRADEMARK": ["T", "R", "EY1", "D", "M", "AA2", "R", "K"], "TRADEMARKS": ["T", "R", "EY1", "D", "M", "AA2", "R", "K", "S"], "TRADER": ["T", "R", "EY1", "D", "ER0"], "TRADES": ["T", "R", "EY1", "D", "Z"], "TRADING": ["T", "R", "EY1", "D", "IH0", "NG"], "TRADITION": ["T", "R", "AH0", "D", "IH1", "SH", "AH0", "N"], "TRADITIONAL": ["T", "R", "AH0", "D", "IH1", "SH", "AH0", "N", "AH0", "L"], "TRADITIONS": ["T", "R", "AH0", "D", "IH1", "SH", "AH0", "N", "Z"], "TRAFFIC": ["T", "R", "AE1", "F", "IH0", "K"], "TRAGEDY": ["T", "R", "AE1", "JH", "AH0", "D", "IY0"], "TRAIL": ["T", "R", "EY1", "L"], "TRAILER": ["T", "R", "EY1", "L", "ER0"], "TRAILERS": ["T", "R", "EY1", "L", "ER0", "Z"], "TRAILS": ["T", "R", "EY1", "L", "Z"], "TRAIN": ["T", "R", "EY1", "N"], "TRAINED": ["T", "R", "EY1", "N", "D"], "TRAINER": ["T", "R", "EY1", "N", "ER0"], "TRAINERS": ["T", "R", "EY1", "N", "ER0", "Z"], "TRAINING": ["T", "R", "EY1", "N", "IH0", "NG"], "TRAINS": ["T", "R", "EY1", "N", "Z"], "TRANCE": ["T", "R", "AE1", "N", "S"], "TRANS": ["T", "R", "AE1", "N", "Z"], "TRANSACTION": ["T", "R", "AE0", "N", "Z", "AE1", "K", "SH", "AH0", "N"], "TRANSACTIONS": ["T", "R", "AE0", "N", "Z", "AE1", "K", "SH", "AH0", "N", "Z"], "TRANSCRIPT": ["T", "R", "AE1", "N", "S", "K", "R", "IH2", "P", "T"], "TRANSCRIPTION": ["T", "R", "AE2", "N", "S", "K", "R", "IH1", "P", "SH", "AH0", "N"], "TRANSCRIPTS": ["T", "R", "AE1", "N", "S", "K", "R", "IH2", "P", "T", "S"], "TRANSFER": ["T", "R", "AE0", "N", "S", "F", "ER1"], "TRANSFERRED": ["T", "R", "AE0", "N", "S", "F", "ER1", "D"], "TRANSFERS": ["T", "R", "AE0", "N", "S", "F", "ER1", "Z"], "TRANSFORM": ["T", "R", "AE0", "N", "S", "F", "AO1", "R", "M"], "TRANSFORMATION": ["T", "R", "AE2", "N", "S", "F", "ER0", "M", "EY1", "SH", "AH0", "N"], "TRANSIT": ["T", "R", "AE1", "N", "Z", "IH0", "T"], "TRANSITION": ["T", "R", "AE0", "N", "Z", "IH1", "SH", "AH0", "N"], "TRANSLATE": ["T", "R", "AE0", "N", "Z", "L", "EY1", "T"], "TRANSLATED": ["T", "R", "AE0", "N", "Z", "L", "EY1", "T", "AH0", "D"], "TRANSLATION": ["T", "R", "AE0", "N", "Z", "L", "EY1", "SH", "AH0", "N"], "TRANSLATIONS": ["T", "R", "AE0", "N", "Z", "L", "EY1", "SH", "AH0", "N", "Z"], "TRANSLATOR": ["T", "R", "AE0", "N", "S", "L", "EY1", "T", "ER0"], "TRANSMISSION": ["T", "R", "AE0", "N", "S", "M", "IH1", "SH", "AH0", "N"], "TRANSMIT": ["T", "R", "AE0", "N", "Z", "M", "IH1", "T"], "TRANSMITTED": ["T", "R", "AE0", "N", "S", "M", "IH1", "T", "IH0", "D"], "TRANSPARENCY": ["T", "R", "AE0", "N", "S", "P", "EH1", "R", "AH0", "N", "S", "IY0"], "TRANSPARENT": ["T", "R", "AE0", "N", "S", "P", "EH1", "R", "AH0", "N", "T"], "TRANSPORT": ["T", "R", "AE0", "N", "S", "P", "AO1", "R", "T"], "TRANSPORTATION": ["T", "R", "AE2", "N", "S", "P", "ER0", "T", "EY1", "SH", "AH0", "N"], "TRANSSEXUAL": ["T", "R", "AE0", "N", "S", "EH1", "K", "SH", "Y", "UW0", "AH0", "L"], "TRAP": ["T", "R", "AE1", "P"], "TRASH": ["T", "R", "AE1", "SH"], "TRAUMA": ["T", "R", "AO1", "M", "AH0"], "TRAVEL": ["T", "R", "AE1", "V", "AH0", "L"], "TRAVELER": ["T", "R", "AE1", "V", "AH0", "L", "ER0"], "TRAVELERS": ["T", "R", "AE1", "V", "AH0", "L", "ER0", "Z"], "TRAVELING": ["T", "R", "AE1", "V", "AH0", "L", "IH0", "NG"], "TRAVELLER": ["T", "R", "AE1", "V", "AH0", "L", "ER0"], "TRAVELLING": ["T", "R", "AE1", "V", "AH0", "L", "IH0", "NG"], "TRAVELS": ["T", "R", "AE1", "V", "AH0", "L", "Z"], "TRAVIS": ["T", "R", "AE1", "V", "IH0", "S"], "TRAY": ["T", "R", "EY1"], "TREASURE": ["T", "R", "EH1", "ZH", "ER0"], "TREASURER": ["T", "R", "EH1", "ZH", "ER0", "ER0"], "TREASURES": ["T", "R", "EH1", "ZH", "ER0", "Z"], "TREASURY": ["T", "R", "EH1", "ZH", "ER0", "IY0"], "TREAT": ["T", "R", "IY1", "T"], "TREATED": ["T", "R", "IY1", "T", "AH0", "D"], "TREATING": ["T", "R", "IY1", "T", "IH0", "NG"], "TREATMENT": ["T", "R", "IY1", "T", "M", "AH0", "N", "T"], "TREATMENTS": ["T", "R", "IY1", "T", "M", "AH0", "N", "T", "S"], "TREATY": ["T", "R", "IY1", "T", "IY0"], "TREE": ["T", "R", "IY1"], "TREES": ["T", "R", "IY1", "Z"], "TREK": ["T", "R", "EH1", "K"], "TREMENDOUS": ["T", "R", "AH0", "M", "EH1", "N", "D", "AH0", "S"], "TREND": ["T", "R", "EH1", "N", "D"], "TRENDS": ["T", "R", "EH1", "N", "D", "Z"], "TRI": ["T", "R", "AY1"], "TRIAL": ["T", "R", "AY1", "AH0", "L"], "TRIALS": ["T", "R", "AY1", "AH0", "L", "Z"], "TRIANGLE": ["T", "R", "AY1", "AE2", "NG", "G", "AH0", "L"], "TRIBAL": ["T", "R", "AY1", "B", "AH0", "L"], "TRIBE": ["T", "R", "AY1", "B"], "TRIBES": ["T", "R", "AY1", "B", "Z"], "TRIBUNAL": ["T", "R", "AH0", "B", "Y", "UW1", "N", "AH0", "L"], "TRIBUNE": ["T", "R", "IH1", "B", "Y", "UW0", "N"], "TRIBUTE": ["T", "R", "IH1", "B", "Y", "UW0", "T"], "TRICK": ["T", "R", "IH1", "K"], "TRICKS": ["T", "R", "IH1", "K", "S"], "TRIED": ["T", "R", "AY1", "D"], "TRIES": ["T", "R", "AY1", "Z"], "TRIGGER": ["T", "R", "IH1", "G", "ER0"], "TRIM": ["T", "R", "IH1", "M"], "TRINIDAD": ["T", "R", "IH1", "N", "IH0", "D", "AE2", "D"], "TRINITY": ["T", "R", "IH1", "N", "AH0", "T", "IY0"], "TRIO": ["T", "R", "IY1", "OW2"], "TRIP": ["T", "R", "IH1", "P"], "TRIPLE": ["T", "R", "IH1", "P", "AH0", "L"], "TRIPS": ["T", "R", "IH1", "P", "S"], "TRIUMPH": ["T", "R", "AY1", "AH0", "M", "F"], "TRIVIA": ["T", "R", "IH1", "V", "IY0", "AH0"], "TROOPS": ["T", "R", "UW1", "P", "S"], "TROPICAL": ["T", "R", "AA1", "P", "IH0", "K", "AH0", "L"], "TROUBLE": ["T", "R", "AH1", "B", "AH0", "L"], "TROUT": ["T", "R", "AW1", "T"], "TROY": ["T", "R", "OY1"], "TRUCK": ["T", "R", "AH1", "K"], "TRUCKS": ["T", "R", "AH1", "K", "S"], "TRUE": ["T", "R", "UW1"], "TRULY": ["T", "R", "UW1", "L", "IY0"], "TRUNK": ["T", "R", "AH1", "NG", "K"], "TRUST": ["T", "R", "AH1", "S", "T"], "TRUSTED": ["T", "R", "AH1", "S", "T", "IH0", "D"], "TRUSTEE": ["T", "R", "AH2", "S", "T", "IY1"], "TRUSTEES": ["T", "R", "AH2", "S", "T", "IY1", "Z"], "TRUSTS": ["T", "R", "AH1", "S", "T", "S"], "TRUTH": ["T", "R", "UW1", "TH"], "TRY": ["T", "R", "AY1"], "TRYING": ["T", "R", "AY1", "IH0", "NG"], "TS": ["T", "IY1", "EH1", "S"], "TSUNAMI": ["T", "S", "UW0", "N", "AA1", "M", "IY0"], "TU": ["T", "UW1"], "TUB": ["T", "AH1", "B"], "TUBE": ["T", "UW1", "B"], "TUBES": ["T", "UW1", "B", "Z"], "TUCSON": ["T", "UW1", "S", "AA2", "N"], "TUE": ["T", "UW1"], "TUESDAY": ["T", "UW1", "Z", "D", "IY0"], "TUITION": ["T", "Y", "UW0", "IH1", "SH", "AH0", "N"], "TULSA": ["T", "AH1", "L", "S", "AH0"], "TUMOR": ["T", "UW1", "M", "ER0"], "TUNE": ["T", "UW1", "N"], "TUNER": ["T", "UW1", "N", "ER0"], "TUNES": ["T", "UW1", "N", "Z"], "TUNING": ["T", "UW1", "N", "IH0", "NG"], "TUNISIA": ["T", "UW2", "N", "IY1", "ZH", "AH0"], "TUNNEL": ["T", "AH1", "N", "AH0", "L"], "TURBO": ["T", "ER1", "B", "OW0"], "TURKEY": ["T", "ER1", "K", "IY0"], "TURKISH": ["T", "ER1", "K", "IH0", "SH"], "TURN": ["T", "ER1", "N"], "TURNED": ["T", "ER1", "N", "D"], "TURNER": ["T", "ER1", "N", "ER0"], "TURNING": ["T", "ER1", "N", "IH0", "NG"], "TURNS": ["T", "ER1", "N", "Z"], "TURTLE": ["T", "ER1", "T", "AH0", "L"], "TUTORIAL": ["T", "UW0", "T", "AO1", "R", "IY0", "AH0", "L"], "TUTORIALS": ["T", "UW0", "T", "AO1", "R", "IY0", "AH0", "L", "Z"], "TV": ["T", "IY1", "V", "IY1"], "TVS": ["T", "IY1", "V", "IY1", "Z"], "TWELVE": ["T", "W", "EH1", "L", "V"], "TWENTY": ["T", "W", "EH1", "N", "T", "IY0"], "TWICE": ["T", "W", "AY1", "S"], "TWIN": ["T", "W", "IH1", "N"], "TWINS": ["T", "W", "IH1", "N", "Z"], "TWIST": ["T", "W", "IH1", "S", "T"], "TWISTED": ["T", "W", "IH1", "S", "T", "AH0", "D"], "TWO": ["T", "UW1"], "TY": ["T", "AY1"], "TYLER": ["T", "AY1", "L", "ER0"], "TYPE": ["T", "AY1", "P"], "TYPES": ["T", "AY1", "P", "S"], "TYPICAL": ["T", "IH1", "P", "AH0", "K", "AH0", "L"], "TYPICALLY": ["T", "IH1", "P", "IH0", "K", "L", "IY0"], "TYPING": ["T", "AY1", "P", "IH0", "NG"], "U": ["Y", "UW1"], "UGANDA": ["Y", "UW0", "G", "AE1", "N", "D", "AA0"], "UGLY": ["AH1", "G", "L", "IY0"], "UH": ["AH1"], "UKRAINE": ["Y", "UW0", "K", "R", "EY1", "N"], "UL": ["AH1", "L"], "ULTIMATE": ["AH1", "L", "T", "AH0", "M", "AH0", "T"], "ULTIMATELY": ["AH1", "L", "T", "AH0", "M", "AH0", "T", "L", "IY0"], "ULTRA": ["AH1", "L", "T", "R", "AH0"], "UM": ["AH1", "M"], "UN": ["AH1", "N"], "UNA": ["UW1", "N", "AH0"], "UNABLE": ["AH0", "N", "EY1", "B", "AH0", "L"], "UNAUTHORIZED": ["AH0", "N", "AO1", "TH", "ER0", "AY2", "Z", "D"], "UNAVAILABLE": ["AH2", "N", "AH0", "V", "EY1", "L", "AH0", "B", "AH0", "L"], "UNCERTAINTY": ["AH0", "N", "S", "ER1", "T", "AH0", "N", "T", "IY0"], "UNCLE": ["AH1", "NG", "K", "AH0", "L"], "UND": ["AH1", "N", "D"], "UNDEFINED": ["AH2", "N", "D", "IH0", "F", "AY1", "N", "D"], "UNDER": ["AH1", "N", "D", "ER0"], "UNDERGRADUATE": ["AH2", "N", "D", "ER0", "G", "R", "AE1", "JH", "AH0", "W", "AH0", "T"], "UNDERGROUND": ["AH1", "N", "D", "ER0", "G", "R", "AW2", "N", "D"], "UNDERLYING": ["AH2", "N", "D", "ER0", "L", "AY1", "IH0", "NG"], "UNDERSTAND": ["AH2", "N", "D", "ER0", "S", "T", "AE1", "N", "D"], "UNDERSTANDING": ["AH2", "N", "D", "ER0", "S", "T", "AE1", "N", "D", "IH0", "NG"], "UNDERSTOOD": ["AH2", "N", "D", "ER0", "S", "T", "UH1", "D"], "UNDERTAKE": ["AH1", "N", "D", "ER0", "T", "EY2", "K"], "UNDERTAKEN": ["AH1", "N", "D", "ER0", "T", "EY2", "K", "AH0", "N"], "UNDERWEAR": ["AH1", "N", "D", "ER0", "W", "EH2", "R"], "UNDO": ["AH0", "N", "D", "UW1"], "UNEMPLOYMENT": ["AH2", "N", "IH0", "M", "P", "L", "OY1", "M", "AH0", "N", "T"], "UNEXPECTED": ["AH2", "N", "IH0", "K", "S", "P", "EH1", "K", "T", "IH0", "D"], "UNFORTUNATELY": ["AH0", "N", "F", "AO1", "R", "CH", "AH0", "N", "AH0", "T", "L", "IY0"], "UNI": ["Y", "UW1", "N", "IY0"], "UNIFIED": ["Y", "UW1", "N", "AH0", "F", "AY2", "D"], "UNIFORM": ["Y", "UW1", "N", "AH0", "F", "AO2", "R", "M"], "UNION": ["Y", "UW1", "N", "Y", "AH0", "N"], "UNIONS": ["Y", "UW1", "N", "Y", "AH0", "N", "Z"], "UNIQUE": ["Y", "UW0", "N", "IY1", "K"], "UNIT": ["Y", "UW1", "N", "AH0", "T"], "UNITED": ["Y", "UW0", "N", "AY1", "T", "AH0", "D"], "UNITS": ["Y", "UW1", "N", "AH0", "T", "S"], "UNITY": ["Y", "UW1", "N", "AH0", "T", "IY0"], "UNIVERSAL": ["Y", "UW2", "N", "AH0", "V", "ER1", "S", "AH0", "L"], "UNIVERSE": ["Y", "UW1", "N", "AH0", "V", "ER2", "S"], "UNIVERSITIES": ["Y", "UW2", "N", "AH0", "V", "ER1", "S", "AH0", "T", "IY0", "Z"], "UNIVERSITY": ["Y", "UW2", "N", "AH0", "V", "ER1", "S", "AH0", "T", "IY0"], "UNIX": ["Y", "UW1", "N", "IH0", "K", "S"], "UNKNOWN": ["AH0", "N", "N", "OW1", "N"], "UNLESS": ["AH0", "N", "L", "EH1", "S"], "UNLIKE": ["AH0", "N", "L", "AY1", "K"], "UNLIKELY": ["AH0", "N", "L", "AY1", "K", "L", "IY0"], "UNLIMITED": ["AH0", "N", "L", "IH1", "M", "AH0", "T", "AH0", "D"], "UNLOCK": ["AH0", "N", "L", "AA1", "K"], "UNNECESSARY": ["AH0", "N", "N", "EH1", "S", "AH0", "S", "EH2", "R", "IY0"], "UNSIGNED": ["AH0", "N", "S", "AY1", "N", "D"], "UNSUBSCRIBE": ["AH0", "N", "S", "AH0", "B", "S", "K", "R", "AY1", "B"], "UNTIL": ["AH0", "N", "T", "IH1", "L"], "UNTO": ["AH1", "N", "T", "UW0"], "UNUSUAL": ["AH0", "N", "Y", "UW1", "ZH", "UW2", "AH0", "L"], "UNWRAP": ["AH0", "N", "R", "AE1", "P"], "UP": ["AH1", "P"], "UPCOMING": ["AH1", "P", "K", "AH2", "M", "IH0", "NG"], "UPDATE": ["AH0", "P", "D", "EY1", "T"], "UPDATED": ["AH0", "P", "D", "EY1", "T", "AH0", "D"], "UPDATES": ["AH0", "P", "D", "EY1", "T", "S"], "UPDATING": ["AH0", "P", "D", "EY1", "T", "IH0", "NG"], "UPGRADE": ["AH0", "P", "G", "R", "EY1", "D"], "UPGRADES": ["AH0", "P", "G", "R", "EY1", "D", "Z"], "UPGRADING": ["AH0", "P", "G", "R", "EY1", "D", "IH0", "NG"], "UPLOAD": ["AH1", "P", "L", "OW2", "D"], "UPLOADED": ["AH1", "P", "L", "OW2", "D", "IH0", "D"], "UPON": ["AH0", "P", "AA1", "N"], "UPPER": ["AH1", "P", "ER0"], "UPS": ["AH1", "P", "S"], "UPSET": ["AH0", "P", "S", "EH1", "T"], "UR": ["ER1"], "URBAN": ["ER1", "B", "AH0", "N"], "URGE": ["ER1", "JH"], "URGENT": ["ER1", "JH", "AH0", "N", "T"], "URI": ["Y", "ER1", "IY0"], "URUGUAY": ["Y", "ER1", "AH0", "G", "W", "EY2"], "US": ["AH1", "S"], "USA": ["Y", "UW1", "EH1", "S", "EY1"], "USAGE": ["Y", "UW1", "S", "AH0", "JH"], "USE": ["Y", "UW1", "S"], "USED": ["Y", "UW1", "Z", "D"], "USEFUL": ["Y", "UW1", "S", "F", "AH0", "L"], "USER": ["Y", "UW1", "Z", "ER0"], "USERS": ["Y", "UW1", "Z", "ER0", "Z"], "USES": ["Y", "UW1", "S", "AH0", "Z"], "USING": ["Y", "UW1", "Z", "IH0", "NG"], "USUAL": ["Y", "UW1", "ZH", "AH0", "W", "AH0", "L"], "USUALLY": ["Y", "UW1", "ZH", "AH0", "W", "AH0", "L", "IY0"], "UTAH": ["Y", "UW1", "T", "AO2"], "UTILITIES": ["Y", "UW0", "T", "IH1", "L", "AH0", "T", "IY0", "Z"], "UTILITY": ["Y", "UW0", "T", "IH1", "L", "AH0", "T", "IY0"], "UTILIZATION": ["Y", "UW2", "T", "AH0", "L", "AH0", "Z", "EY1", "SH", "AH0", "N"], "UTILIZE": ["Y", "UW1", "T", "AH0", "L", "AY2", "Z"], "UZBEKISTAN": ["UW0", "Z", "B", "EH1", "K", "IH0", "S", "T", "AE2", "N"], "V": ["V", "IY1"], "VACANCIES": ["V", "EY1", "K", "AH0", "N", "S", "IY0", "Z"], "VACATION": ["V", "EY0", "K", "EY1", "SH", "AH0", "N"], "VACATIONS": ["V", "EY0", "K", "EY1", "SH", "AH0", "N", "Z"], "VACCINE": ["V", "AE2", "K", "S", "IY1", "N"], "VACUUM": ["V", "AE1", "K", "Y", "UW0", "M"], "VAGINA": ["V", "AH0", "JH", "AY1", "N", "AH0"], "VAL": ["V", "AE1", "L"], "VALENTINE": ["V", "AE1", "L", "AH0", "N", "T", "AY2", "N"], "VALID": ["V", "AE1", "L", "IH0", "D"], "VALIDATION": ["V", "AE2", "L", "AH0", "D", "EY1", "SH", "AH0", "N"], "VALIDITY": ["V", "AH0", "L", "IH1", "D", "IH0", "T", "IY0"], "VALIUM": ["V", "AE1", "L", "IY2", "AH0", "M"], "VALLEY": ["V", "AE1", "L", "IY0"], "VALUABLE": ["V", "AE1", "L", "Y", "AH0", "B", "AH0", "L"], "VALUATION": ["V", "AE0", "L", "Y", "UW0", "EY1", "SH", "AH0", "N"], "VALUE": ["V", "AE1", "L", "Y", "UW0"], "VALUED": ["V", "AE1", "L", "Y", "UW0", "D"], "VALUES": ["V", "AE1", "L", "Y", "UW0", "Z"], "VALVE": ["V", "AE1", "L", "V"], "VALVES": ["V", "AE1", "L", "V", "Z"], "VAMPIRE": ["V", "AE1", "M", "P", "AY0", "R"], "VAN": ["V", "AE1", "N"], "VANCOUVER": ["V", "AE0", "N", "K", "UW1", "V", "ER0"], "VANILLA": ["V", "AH0", "N", "IH1", "L", "AH0"], "VARIABLE": ["V", "EH1", "R", "IY0", "AH0", "B", "AH0", "L"], "VARIABLES": ["V", "EH1", "R", "IY0", "AH0", "B", "AH0", "L", "Z"], "VARIANCE": ["V", "EH1", "R", "IY0", "AH0", "N", "S"], "VARIATION": ["V", "EH2", "R", "IY0", "EY1", "SH", "AH0", "N"], "VARIATIONS": ["V", "EH2", "R", "IY0", "EY1", "SH", "AH0", "N", "Z"], "VARIED": ["V", "EH1", "R", "IY0", "D"], "VARIES": ["V", "EH1", "R", "IY0", "Z"], "VARIETY": ["V", "ER0", "AY1", "AH0", "T", "IY0"], "VARIOUS": ["V", "EH1", "R", "IY0", "AH0", "S"], "VARY": ["V", "EH1", "R", "IY0"], "VARYING": ["V", "EH1", "R", "IY0", "IH0", "NG"], "VAST": ["V", "AE1", "S", "T"], "VAT": ["V", "AE1", "T"], "VATICAN": ["V", "AE1", "T", "IH0", "K", "AH0", "N"], "VAULT": ["V", "AO1", "L", "T"], "VE": ["V", "IY1"], "VECTOR": ["V", "EH1", "K", "T", "ER0"], "VEGAS": ["V", "EY1", "G", "AH0", "S"], "VEGETABLE": ["V", "EH1", "JH", "T", "AH0", "B", "AH0", "L"], "VEGETABLES": ["V", "EH1", "JH", "T", "AH0", "B", "AH0", "L", "Z"], "VEGETARIAN": ["V", "EH2", "JH", "AH0", "T", "EH1", "R", "IY2", "AH0", "N"], "VEGETATION": ["V", "EH2", "JH", "AH0", "T", "EY1", "SH", "AH0", "N"], "VEHICLE": ["V", "IY1", "HH", "IH0", "K", "AH0", "L"], "VEHICLES": ["V", "IY1", "HH", "IH0", "K", "AH0", "L", "Z"], "VELOCITY": ["V", "AH0", "L", "AA1", "S", "AH0", "T", "IY0"], "VELVET": ["V", "EH1", "L", "V", "AH0", "T"], "VENDOR": ["V", "EH1", "N", "D", "ER0"], "VENDORS": ["V", "EH1", "N", "D", "ER0", "Z"], "VENEZUELA": ["V", "EH2", "N", "IH0", "Z", "W", "EY1", "L", "AH0"], "VENICE": ["V", "EH1", "N", "AH0", "S"], "VENTURE": ["V", "EH1", "N", "CH", "ER0"], "VENTURES": ["V", "EH1", "N", "CH", "ER0", "Z"], "VENUE": ["V", "EH1", "N", "Y", "UW0"], "VENUES": ["V", "EH1", "N", "UW0", "Z"], "VER": ["V", "ER1"], "VERBAL": ["V", "ER1", "B", "AH0", "L"], "VERDE": ["V", "ER1", "D", "IY0"], "VERIFICATION": ["V", "EH2", "R", "AH0", "F", "AH0", "K", "EY1", "SH", "AH0", "N"], "VERIFIED": ["V", "EH1", "R", "AH0", "F", "AY2", "D"], "VERIFY": ["V", "EH1", "R", "AH0", "F", "AY2"], "VERIZON": ["V", "EH2", "R", "AY1", "Z", "AH0", "N"], "VERMONT": ["V", "ER0", "M", "AA1", "N", "T"], "VERNON": ["V", "ER1", "N", "AH0", "N"], "VERSE": ["V", "ER1", "S"], "VERSION": ["V", "ER1", "ZH", "AH0", "N"], "VERSIONS": ["V", "ER1", "ZH", "AH0", "N", "Z"], "VERSUS": ["V", "ER1", "S", "AH0", "S"], "VERTEX": ["V", "ER1", "T", "EH2", "K", "S"], "VERTICAL": ["V", "ER1", "T", "IH0", "K", "AH0", "L"], "VERY": ["V", "EH1", "R", "IY0"], "VESSEL": ["V", "EH1", "S", "AH0", "L"], "VESSELS": ["V", "EH1", "S", "AH0", "L", "Z"], "VETERAN": ["V", "EH1", "T", "ER0", "AH0", "N"], "VETERANS": ["V", "EH1", "T", "ER0", "AH0", "N", "Z"], "VETERINARY": ["V", "EH1", "T", "R", "AH0", "N", "EH2", "R", "IY0"], "VI": ["V", "AY1"], "VIA": ["V", "AY1", "AH0"], "VIAGRA": ["V", "AY0", "AE1", "G", "R", "AH0"], "VIBRATOR": ["V", "AY1", "B", "R", "EY0", "T", "ER0"], "VIC": ["V", "IH1", "K"], "VICE": ["V", "AY1", "S"], "VICTIM": ["V", "IH1", "K", "T", "IH0", "M"], "VICTIMS": ["V", "IH1", "K", "T", "IH0", "M", "Z"], "VICTOR": ["V", "IH1", "K", "T", "ER0"], "VICTORIA": ["V", "IH0", "K", "T", "AO1", "R", "IY0", "AH0"], "VICTORIAN": ["V", "IH0", "K", "T", "AO1", "R", "IY0", "AH0", "N"], "VICTORY": ["V", "IH1", "K", "T", "AH0", "R", "IY0"], "VIDEO": ["V", "IH1", "D", "IY0", "OW0"], "VIDEOS": ["V", "IH1", "D", "IY0", "OW0", "Z"], "VIENNA": ["V", "IY0", "EH1", "N", "AH0"], "VIETNAM": ["V", "IY0", "EH2", "T", "N", "AA1", "M"], "VIETNAMESE": ["V", "IY0", "EH2", "T", "N", "AA0", "M", "IY1", "S"], "VIEW": ["V", "Y", "UW1"], "VIEWED": ["V", "Y", "UW1", "D"], "VIEWER": ["V", "Y", "UW1", "ER0"], "VIEWERS": ["V", "Y", "UW1", "ER0", "Z"], "VIEWING": ["V", "Y", "UW1", "IH0", "NG"], "VIEWS": ["V", "Y", "UW1", "Z"], "VIKING": ["V", "AY1", "K", "IH0", "NG"], "VILLA": ["V", "IH1", "L", "AH0"], "VILLAGE": ["V", "IH1", "L", "AH0", "JH"], "VILLAGES": ["V", "IH1", "L", "AH0", "JH", "IH0", "Z"], "VILLAS": ["V", "IH1", "L", "AH0", "Z"], "VINCENT": ["V", "IH1", "N", "S", "EH0", "N", "T"], "VINTAGE": ["V", "IH1", "N", "T", "IH0", "JH"], "VINYL": ["V", "AY1", "N", "AH0", "L"], "VIOLATION": ["V", "AY0", "AH0", "L", "EY1", "SH", "AH0", "N"], "VIOLATIONS": ["V", "AY0", "AH0", "L", "EY1", "SH", "AH0", "N", "Z"], "VIOLENCE": ["V", "AY1", "AH0", "L", "AH0", "N", "S"], "VIOLENT": ["V", "AY1", "AH0", "L", "AH0", "N", "T"], "VIOLIN": ["V", "AY0", "AH0", "L", "IH1", "N"], "VIP": ["V", "IY2", "AY2", "P", "IY1"], "VIRAL": ["V", "AY1", "R", "AH0", "L"], "VIRGIN": ["V", "ER1", "JH", "IH0", "N"], "VIRGINIA": ["V", "ER0", "JH", "IH1", "N", "Y", "AH0"], "VIRTUAL": ["V", "ER1", "CH", "UW0", "AH0", "L"], "VIRTUALLY": ["V", "ER1", "CH", "UW0", "AH0", "L", "IY0"], "VIRTUE": ["V", "ER1", "CH", "UW0"], "VIRUS": ["V", "AY1", "R", "AH0", "S"], "VIRUSES": ["V", "AY1", "R", "AH0", "S", "AH0", "Z"], "VISA": ["V", "IY1", "Z", "AH0"], "VISIBILITY": ["V", "IH2", "Z", "AH0", "B", "IH1", "L", "IH0", "T", "IY0"], "VISIBLE": ["V", "IH1", "Z", "AH0", "B", "AH0", "L"], "VISION": ["V", "IH1", "ZH", "AH0", "N"], "VISIT": ["V", "IH1", "Z", "IH0", "T"], "VISITED": ["V", "IH1", "Z", "IH0", "T", "IH0", "D"], "VISITING": ["V", "IH1", "Z", "IH0", "T", "IH0", "NG"], "VISITOR": ["V", "IH1", "Z", "IH0", "T", "ER0"], "VISITORS": ["V", "IH1", "Z", "IH0", "T", "ER0", "Z"], "VISITS": ["V", "IH1", "Z", "IH0", "T", "S"], "VISTA": ["V", "IH1", "S", "T", "AH0"], "VISUAL": ["V", "IH1", "ZH", "AH0", "W", "AH0", "L"], "VITAL": ["V", "AY1", "T", "AH0", "L"], "VITAMIN": ["V", "AY1", "T", "AH0", "M", "AH0", "N"], "VITAMINS": ["V", "AY1", "T", "AH0", "M", "AH0", "N", "Z"], "VOCABULARY": ["V", "OW0", "K", "AE1", "B", "Y", "AH0", "L", "EH2", "R", "IY0"], "VOCAL": ["V", "OW1", "K", "AH0", "L"], "VOCALS": ["V", "OW1", "K", "AH0", "L", "Z"], "VOCATIONAL": ["V", "OW0", "K", "EY1", "SH", "AH0", "N", "AH0", "L"], "VOICE": ["V", "OY1", "S"], "VOICES": ["V", "OY1", "S", "AH0", "Z"], "VOID": ["V", "OY1", "D"], "VOLKSWAGEN": ["V", "OW1", "L", "K", "S", "W", "AE2", "G", "AH0", "N"], "VOLLEYBALL": ["V", "AA1", "L", "IY0", "B", "AO2", "L"], "VOLT": ["V", "OW1", "L", "T"], "VOLTAGE": ["V", "OW1", "L", "T", "AH0", "JH"], "VOLUME": ["V", "AA1", "L", "Y", "UW0", "M"], "VOLUMES": ["V", "AA1", "L", "Y", "UW0", "M", "Z"], "VOLUNTARY": ["V", "AA1", "L", "AH0", "N", "T", "EH0", "R", "IY0"], "VOLUNTEER": ["V", "AA2", "L", "AH0", "N", "T", "IH1", "R"], "VOLUNTEERS": ["V", "AA2", "L", "AH0", "N", "T", "IH1", "R", "Z"], "VOLVO": ["V", "OW1", "L", "V", "OW0"], "VON": ["V", "AO1", "N"], "VOTE": ["V", "OW1", "T"], "VOTED": ["V", "OW1", "T", "AH0", "D"], "VOTERS": ["V", "OW1", "T", "ER0", "Z"], "VOTES": ["V", "OW1", "T", "S"], "VOTING": ["V", "OW1", "T", "IH0", "NG"], "VOYEUR": ["V", "OY2", "Y", "UW1", "R"], "VP": ["V", "IY2", "P", "IY1"], "VS": ["V", "ER1", "S", "AH0", "Z"], "VULNERABILITY": ["V", "AH2", "L", "N", "ER0", "AH0", "B", "IH1", "L", "IH0", "T", "IY0"], "VULNERABLE": ["V", "AH1", "L", "N", "ER0", "AH0", "B", "AH0", "L"], "W": ["D", "AH1", "B", "AH0", "L", "Y", "UW0"], "WA": ["W", "AA1"], "WAGE": ["W", "EY1", "JH"], "WAGES": ["W", "EY1", "JH", "AH0", "Z"], "WAGNER": ["W", "AE1", "G", "N", "ER0"], "WAGON": ["W", "AE1", "G", "AH0", "N"], "WAIT": ["W", "EY1", "T"], "WAITING": ["W", "EY1", "T", "IH0", "NG"], "WAIVER": ["W", "EY1", "V", "ER0"], "WAKE": ["W", "EY1", "K"], "WAL": ["W", "AO1", "L"], "WALES": ["W", "EY1", "L", "Z"], "WALK": ["W", "AO1", "K"], "WALKED": ["W", "AO1", "K", "T"], "WALKER": ["W", "AO1", "K", "ER0"], "WALKING": ["W", "AO1", "K", "IH0", "NG"], "WALKS": ["W", "AO1", "K", "S"], "WALL": ["W", "AO1", "L"], "WALLACE": ["W", "AO1", "L", "AH0", "S"], "WALLET": ["W", "AO1", "L", "AH0", "T"], "WALLPAPER": ["W", "AO1", "L", "P", "EY2", "P", "ER0"], "WALLPAPERS": ["W", "AO1", "L", "P", "EY2", "P", "ER0", "Z"], "WALLS": ["W", "AO1", "L", "Z"], "WALNUT": ["W", "AO1", "L", "N", "AH2", "T"], "WALT": ["W", "AO1", "L", "T"], "WALTER": ["W", "AO1", "L", "T", "ER0"], "WAN": ["W", "AA1", "N"], "WANG": ["W", "AE1", "NG"], "WANNA": ["W", "AA1", "N", "AH0"], "WANT": ["W", "AA1", "N", "T"], "WANTED": ["W", "AO1", "N", "T", "IH0", "D"], "WANTING": ["W", "AA1", "N", "T", "IH0", "NG"], "WANTS": ["W", "AA1", "N", "T", "S"], "WAR": ["W", "AO1", "R"], "WARCRAFT": ["W", "AO1", "R", "K", "R", "AE2", "F", "T"], "WARD": ["W", "AO1", "R", "D"], "WARE": ["W", "EH1", "R"], "WAREHOUSE": ["W", "EH1", "R", "HH", "AW2", "S"], "WARM": ["W", "AO1", "R", "M"], "WARMING": ["W", "AO1", "R", "M", "IH0", "NG"], "WARNED": ["W", "AO1", "R", "N", "D"], "WARNER": ["W", "AO1", "R", "N", "ER0"], "WARNING": ["W", "AO1", "R", "N", "IH0", "NG"], "WARNINGS": ["W", "AO1", "R", "N", "IH0", "NG", "Z"], "WARRANT": ["W", "AO1", "R", "AH0", "N", "T"], "WARRANTIES": ["W", "AO1", "R", "AH0", "N", "T", "IY0", "Z"], "WARRANTY": ["W", "AO1", "R", "AH0", "N", "T", "IY0"], "WARREN": ["W", "AO1", "R", "AH0", "N"], "WARRIOR": ["W", "AO1", "R", "IY0", "ER0"], "WARRIORS": ["W", "AO1", "R", "IY0", "ER0", "Z"], "WARS": ["W", "AO1", "R", "Z"], "WAS": ["W", "AA1", "Z"], "WASH": ["W", "AA1", "SH"], "WASHER": ["W", "AA1", "SH", "ER0"], "WASHING": ["W", "AA1", "SH", "IH0", "NG"], "WASHINGTON": ["W", "AA1", "SH", "IH0", "NG", "T", "AH0", "N"], "WASTE": ["W", "EY1", "S", "T"], "WATCH": ["W", "AA1", "CH"], "WATCHED": ["W", "AA1", "CH", "T"], "WATCHES": ["W", "AA1", "CH", "AH0", "Z"], "WATCHING": ["W", "AA1", "CH", "IH0", "NG"], "WATER": ["W", "AO1", "T", "ER0"], "WATERPROOF": ["W", "AO1", "T", "ER0", "P", "R", "UW2", "F"], "WATERS": ["W", "AO1", "T", "ER0", "Z"], "WATERSHED": ["W", "AO1", "T", "ER0", "SH", "EH2", "D"], "WATSON": ["W", "AA1", "T", "S", "AH0", "N"], "WATT": ["W", "AA1", "T"], "WATTS": ["W", "AA1", "T", "S"], "WAVE": ["W", "EY1", "V"], "WAVES": ["W", "EY1", "V", "Z"], "WAX": ["W", "AE1", "K", "S"], "WAY": ["W", "EY1"], "WAYNE": ["W", "EY1", "N"], "WAYS": ["W", "EY1", "Z"], "WE": ["W", "IY1"], "WEAK": ["W", "IY1", "K"], "WEALTH": ["W", "EH1", "L", "TH"], "WEAPON": ["W", "EH1", "P", "AH0", "N"], "WEAPONS": ["W", "EH1", "P", "AH0", "N", "Z"], "WEAR": ["W", "EH1", "R"], "WEARING": ["W", "EH1", "R", "IH0", "NG"], "WEATHER": ["W", "EH1", "DH", "ER0"], "WEB": ["W", "EH1", "B"], "WEBMASTER": ["W", "EH1", "B", "M", "AE2", "S", "T", "ER0"], "WEBSITE": ["W", "EH1", "B", "S", "AY2", "T"], "WEBSITES": ["W", "EH1", "B", "S", "AY2", "T", "S"], "WEBSTER": ["W", "EH1", "B", "S", "T", "ER0"], "WED": ["W", "EH1", "D"], "WEDDING": ["W", "EH1", "D", "IH0", "NG"], "WEDDINGS": ["W", "EH1", "D", "IH0", "NG", "Z"], "WEDNESDAY": ["W", "EH1", "N", "Z", "D", "IY0"], "WEED": ["W", "IY1", "D"], "WEEK": ["W", "IY1", "K"], "WEEKEND": ["W", "IY1", "K", "EH2", "N", "D"], "WEEKENDS": ["W", "IY1", "K", "EH2", "N", "D", "Z"], "WEEKLY": ["W", "IY1", "K", "L", "IY0"], "WEEKS": ["W", "IY1", "K", "S"], "WEIGHT": ["W", "EY1", "T"], "WEIGHTED": ["W", "EY1", "T", "IH0", "D"], "WEIGHTS": ["W", "EY1", "T", "S"], "WEIRD": ["W", "IH1", "R", "D"], "WELCOME": ["W", "EH1", "L", "K", "AH0", "M"], "WELDING": ["W", "EH1", "L", "D", "IH0", "NG"], "WELFARE": ["W", "EH1", "L", "F", "EH2", "R"], "WELL": ["W", "EH1", "L"], "WELLINGTON": ["W", "EH1", "L", "IH0", "NG", "T", "AH0", "N"], "WELLNESS": ["W", "EH1", "L", "N", "AH0", "S"], "WELLS": ["W", "EH1", "L", "Z"], "WELSH": ["W", "EH1", "L", "CH"], "WENDY": ["W", "EH1", "N", "D", "IY0"], "WENT": ["W", "EH1", "N", "T"], "WERE": ["W", "ER1"], "WESLEY": ["W", "EH1", "S", "L", "IY0"], "WEST": ["W", "EH1", "S", "T"], "WESTERN": ["W", "EH1", "S", "T", "ER0", "N"], "WESTMINSTER": ["W", "EH2", "S", "T", "M", "IH1", "N", "S", "T", "ER0"], "WET": ["W", "EH1", "T"], "WHALE": ["W", "EY1", "L"], "WHAT": ["W", "AH1", "T"], "WHATEVER": ["W", "AH2", "T", "EH1", "V", "ER0"], "WHATS": ["W", "AH0", "T", "S"], "WHEAT": ["W", "IY1", "T"], "WHEEL": ["W", "IY1", "L"], "WHEELS": ["W", "IY1", "L", "Z"], "WHEN": ["W", "EH1", "N"], "WHENEVER": ["W", "EH0", "N", "EH1", "V", "ER0"], "WHERE": ["W", "EH1", "R"], "WHEREAS": ["W", "EH0", "R", "AE1", "Z"], "WHEREVER": ["W", "EH0", "R", "EH1", "V", "ER0"], "WHETHER": ["W", "EH1", "DH", "ER0"], "WHICH": ["W", "IH1", "CH"], "WHILE": ["W", "AY1", "L"], "WHILST": ["W", "AY1", "L", "S", "T"], "WHITE": ["W", "AY1", "T"], "WHO": ["HH", "UW1"], "WHOLE": ["HH", "OW1", "L"], "WHOLESALE": ["HH", "OW1", "L", "S", "EY2", "L"], "WHOM": ["HH", "UW1", "M"], "WHORE": ["HH", "AO1", "R"], "WHOSE": ["HH", "UW1", "Z"], "WHY": ["W", "AY1"], "WICHITA": ["W", "IH1", "CH", "AH0", "T", "AO2"], "WICKED": ["W", "IH1", "K", "AH0", "D"], "WIDE": ["W", "AY1", "D"], "WIDELY": ["W", "AY1", "D", "L", "IY0"], "WIDER": ["W", "AY1", "D", "ER0"], "WIDESPREAD": ["W", "AY1", "D", "S", "P", "R", "EH1", "D"], "WIDTH": ["W", "IH1", "D", "TH"], "WIFE": ["W", "AY1", "F"], "WIFI": ["W", "AY1", "F", "AY2"], "WIKI": ["W", "IH1", "K", "IY2"], "WIKIPEDIA": ["W", "IH1", "K", "IY0", "P", "IY2", "D", "IY2", "AH0"], "WILD": ["W", "AY1", "L", "D"], "WILDERNESS": ["W", "IH1", "L", "D", "ER0", "N", "AH0", "S"], "WILDLIFE": ["W", "AY1", "L", "D", "L", "AY2", "F"], "WILEY": ["W", "AY1", "L", "IY0"], "WILL": ["W", "IH1", "L"], "WILLIAM": ["W", "IH1", "L", "Y", "AH0", "M"], "WILLIAMS": ["W", "IH1", "L", "Y", "AH0", "M", "Z"], "WILLING": ["W", "IH1", "L", "IH0", "NG"], "WILLOW": ["W", "IH1", "L", "OW2"], "WILSON": ["W", "IH1", "L", "S", "AH0", "N"], "WIN": ["W", "IH1", "N"], "WIND": ["W", "AY1", "N", "D"], "WINDOW": ["W", "IH1", "N", "D", "OW0"], "WINDOWS": ["W", "IH1", "N", "D", "OW0", "Z"], "WINDS": ["W", "IH1", "N", "D", "Z"], "WINDSOR": ["W", "IH1", "N", "Z", "ER0"], "WINE": ["W", "AY1", "N"], "WINES": ["W", "AY1", "N", "Z"], "WING": ["W", "IH1", "NG"], "WINGS": ["W", "IH1", "NG", "Z"], "WINNER": ["W", "IH1", "N", "ER0"], "WINNERS": ["W", "IH1", "N", "ER0", "Z"], "WINNING": ["W", "IH1", "N", "IH0", "NG"], "WINS": ["W", "IH1", "N", "Z"], "WINSTON": ["W", "IH1", "N", "S", "T", "AH0", "N"], "WINTER": ["W", "IH1", "N", "T", "ER0"], "WIRE": ["W", "AY1", "ER0"], "WIRED": ["W", "AY1", "ER0", "D"], "WIRELESS": ["W", "AY1", "R", "L", "IH0", "S"], "WIRES": ["W", "AY1", "ER0", "Z"], "WIRING": ["W", "AY1", "R", "IH0", "NG"], "WISCONSIN": ["W", "IH0", "S", "K", "AA1", "N", "S", "AH0", "N"], "WISDOM": ["W", "IH1", "Z", "D", "AH0", "M"], "WISE": ["W", "AY1", "Z"], "WISH": ["W", "IH1", "SH"], "WISHES": ["W", "IH1", "SH", "IH0", "Z"], "WIT": ["W", "IH1", "T"], "WITCH": ["W", "IH1", "CH"], "WITH": ["W", "IH1", "DH"], "WITHDRAWAL": ["W", "IH0", "DH", "D", "R", "AO1", "AH0", "L"], "WITHIN": ["W", "IH0", "DH", "IH1", "N"], "WITHOUT": ["W", "IH0", "TH", "AW1", "T"], "WITNESS": ["W", "IH1", "T", "N", "AH0", "S"], "WITNESSES": ["W", "IH1", "T", "N", "AH0", "S", "AH0", "Z"], "WIVES": ["W", "AY1", "V", "Z"], "WIZARD": ["W", "IH1", "Z", "ER0", "D"], "WM": ["W", "IH1", "L", "Y", "AH0", "M"], "WOLF": ["W", "UH1", "L", "F"], "WOMAN": ["W", "UH1", "M", "AH0", "N"], "WOMEN": ["W", "IH1", "M", "AH0", "N"], "WON": ["W", "AH1", "N"], "WONDER": ["W", "AH1", "N", "D", "ER0"], "WONDERFUL": ["W", "AH1", "N", "D", "ER0", "F", "AH0", "L"], "WONDERING": ["W", "AH1", "N", "D", "ER0", "IH0", "NG"], "WOOD": ["W", "UH1", "D"], "WOODEN": ["W", "UH1", "D", "AH0", "N"], "WOODS": ["W", "UH1", "D", "Z"], "WOOL": ["W", "UH1", "L"], "WORCESTER": ["W", "UH1", "S", "T", "ER0"], "WORD": ["W", "ER1", "D"], "WORDS": ["W", "ER1", "D", "Z"], "WORK": ["W", "ER1", "K"], "WORKED": ["W", "ER1", "K", "T"], "WORKER": ["W", "ER1", "K", "ER0"], "WORKERS": ["W", "ER1", "K", "ER0", "Z"], "WORKFLOW": ["W", "ER1", "K", "F", "L", "OW2"], "WORKFORCE": ["W", "ER1", "K", "F", "AO2", "R", "S"], "WORKING": ["W", "ER1", "K", "IH0", "NG"], "WORKOUT": ["W", "ER1", "K", "AW2", "T"], "WORKPLACE": ["W", "ER1", "K", "P", "L", "EY2", "S"], "WORKS": ["W", "ER1", "K", "S"], "WORKSHOP": ["W", "ER1", "K", "SH", "AA2", "P"], "WORKSHOPS": ["W", "ER1", "K", "SH", "AA2", "P", "S"], "WORKSTATION": ["W", "ER1", "K", "S", "T", "EY2", "SH", "AH0", "N"], "WORLD": ["W", "ER1", "L", "D"], "WORLDS": ["W", "ER1", "L", "D", "Z"], "WORLDWIDE": ["W", "ER1", "L", "D", "W", "AY1", "D"], "WORM": ["W", "ER1", "M"], "WORN": ["W", "AO1", "R", "N"], "WORRIED": ["W", "ER1", "IY0", "D"], "WORRY": ["W", "ER1", "IY0"], "WORSE": ["W", "ER1", "S"], "WORSHIP": ["W", "ER1", "SH", "AH0", "P"], "WORST": ["W", "ER1", "S", "T"], "WORTH": ["W", "ER1", "TH"], "WORTHY": ["W", "ER1", "DH", "IY0"], "WOULD": ["W", "UH1", "D"], "WOUND": ["W", "AW1", "N", "D"], "WOW": ["W", "AW1"], "WRAP": ["R", "AE1", "P"], "WRAPPED": ["R", "AE1", "P", "T"], "WRAPPING": ["R", "AE1", "P", "IH0", "NG"], "WRESTLING": ["R", "EH1", "S", "L", "IH0", "NG"], "WRIGHT": ["R", "AY1", "T"], "WRIST": ["R", "IH1", "S", "T"], "WRITE": ["R", "AY1", "T"], "WRITER": ["R", "AY1", "T", "ER0"], "WRITERS": ["R", "AY1", "T", "ER0", "Z"], "WRITES": ["R", "AY1", "T", "S"], "WRITING": ["R", "AY1", "T", "IH0", "NG"], "WRITINGS": ["R", "AY1", "T", "IH0", "NG", "Z"], "WRITTEN": ["R", "IH1", "T", "AH0", "N"], "WRONG": ["R", "AO1", "NG"], "WROTE": ["R", "OW1", "T"], "WS": ["D", "AH1", "B", "AH0", "L", "Y", "UW0", "EH1", "S"], "WU": ["W", "UW1"], "WY": ["W", "EY1"], "WYOMING": ["W", "AY2", "OW1", "M", "IH0", "NG"], "X": ["EH1", "K", "S"], "XANAX": ["Z", "AE1", "N", "AE0", "K", "S"], "XEROX": ["Z", "IH1", "R", "AA0", "K", "S"], "XI": ["SH", "IY1"], "XML": ["EH2", "K", "S", "EH2", "M", "EH1", "L"], "Y": ["W", "AY1"], "YA": ["Y", "AA1"], "YACHT": ["Y", "AA1", "T"], "YAHOO": ["Y", "AA1", "HH", "UW2"], "YALE": ["Y", "EY1", "L"], "YAMAHA": ["Y", "AA1", "M", "AA0", "HH", "AA2"], "YANG": ["Y", "AE1", "NG"], "YARD": ["Y", "AA1", "R", "D"], "YARDS": ["Y", "AA1", "R", "D", "Z"], "YARN": ["Y", "AA1", "R", "N"], "YE": ["Y", "IY1"], "YEA": ["Y", "EY1"], "YEAH": ["Y", "AE1"], "YEAR": ["Y", "IH1", "R"], "YEARLY": ["Y", "IH1", "R", "L", "IY0"], "YEARS": ["Y", "IH1", "R", "Z"], "YEAST": ["Y", "IY1", "S", "T"], "YELLOW": ["Y", "EH1", "L", "OW0"], "YEMEN": ["Y", "EH1", "M", "AH0", "N"], "YEN": ["Y", "EH1", "N"], "YES": ["Y", "EH1", "S"], "YESTERDAY": ["Y", "EH1", "S", "T", "ER0", "D", "EY2"], "YET": ["Y", "EH1", "T"], "YIELD": ["Y", "IY1", "L", "D"], "YIELDS": ["Y", "IY1", "L", "D", "Z"], "YO": ["Y", "OW1"], "YOGA": ["Y", "OW1", "G", "AH0"], "YORK": ["Y", "AO1", "R", "K"], "YORKSHIRE": ["Y", "AO1", "R", "K", "SH", "ER0"], "YOU": ["Y", "UW1"], "YOUNG": ["Y", "AH1", "NG"], "YOUNGER": ["Y", "AH1", "NG", "G", "ER0"], "YOUR": ["Y", "AO1", "R"], "YOURS": ["Y", "UH1", "R", "Z"], "YOURSELF": ["Y", "ER0", "S", "EH1", "L", "F"], "YOUTH": ["Y", "UW1", "TH"], "YU": ["Y", "UW1"], "YUGOSLAVIA": ["Y", "UW2", "G", "OW0", "S", "L", "AA1", "V", "IY0", "AH0"], "YUKON": ["Y", "UW1", "K", "AA2", "N"], "Z": ["Z", "IY1"], "ZAMBIA": ["Z", "AE1", "M", "B", "IY0", "AH0"], "ZEALAND": ["Z", "IY1", "L", "AH0", "N", "D"], "ZEN": ["Z", "EH1", "N"], "ZERO": ["Z", "IY1", "R", "OW0"], "ZIMBABWE": ["Z", "IH0", "M", "B", "AA1", "B", "W", "EY0"], "ZINC": ["Z", "IH1", "NG", "K"], "ZIP": ["Z", "IH1", "P"], "ZOLOFT": ["Z", "AA1", "L", "AA0", "F", "T"], "ZONE": ["Z", "OW1", "N"], "ZONES": ["Z", "OW1", "N", "Z"], "ZONING": ["Z", "OW1", "N", "IH0", "NG"], "ZOO": ["Z", "UW1"], "ZOOM": ["Z", "UW1", "M"] };

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertAPIOptions = convertAPIOptions;
exports.convertJSONOptions = convertJSONOptions;
exports.convertTOptions = convertTOptions;
exports.appendBackwardsAPI = appendBackwardsAPI;

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function convertInterpolation(options) {

  options.interpolation = {
    unescapeSuffix: 'HTML'
  };

  options.interpolation.prefix = options.interpolationPrefix || '__';
  options.interpolation.suffix = options.interpolationSuffix || '__';
  options.interpolation.escapeValue = options.escapeInterpolation || false;

  options.interpolation.nestingPrefix = options.reusePrefix || '$t(';
  options.interpolation.nestingSuffix = options.reuseSuffix || ')';

  return options;
}

function convertAPIOptions(options) {
  if (options.resStore) options.resources = options.resStore;

  if (options.ns && options.ns.defaultNs) {
    options.defaultNS = options.ns.defaultNs;
    options.ns = options.ns.namespaces;
  } else {
    options.defaultNS = options.ns || 'translation';
  }

  if (options.fallbackToDefaultNS && options.defaultNS) options.fallbackNS = options.defaultNS;

  options.saveMissing = options.sendMissing;
  options.saveMissingTo = options.sendMissingTo || 'current';
  options.returnNull = options.fallbackOnNull ? false : true;
  options.returnEmptyString = options.fallbackOnEmpty ? false : true;
  options.returnObjects = options.returnObjectTrees;
  options.joinArrays = '\n';

  options.returnedObjectHandler = options.objectTreeKeyHandler;
  options.parseMissingKeyHandler = options.parseMissingKey;
  options.appendNamespaceToMissingKey = true;

  options.nsSeparator = options.nsseparator;
  options.keySeparator = options.keyseparator;

  if (options.shortcutFunction === 'sprintf') {
    options.overloadTranslationOptionHandler = function (args) {
      var values = [];

      for (var i = 1; i < args.length; i++) {
        values.push(args[i]);
      }

      return {
        postProcess: 'sprintf',
        sprintf: values
      };
    };
  }

  options.whitelist = options.lngWhitelist;
  options.preload = options.preload;
  if (options.load === 'current') options.load = 'currentOnly';
  if (options.load === 'unspecific') options.load = 'languageOnly';

  // backend
  options.backend = options.backend || {};
  options.backend.loadPath = options.resGetPath || 'locales/__lng__/__ns__.json';
  options.backend.addPath = options.resPostPath || 'locales/add/__lng__/__ns__';
  options.backend.allowMultiLoading = options.dynamicLoad;

  // cache
  options.cache = options.cache || {};
  options.cache.prefix = 'res_';
  options.cache.expirationTime = 7 * 24 * 60 * 60 * 1000;
  options.cache.enabled = options.useLocalStorage ? true : false;

  options = convertInterpolation(options);
  if (options.defaultVariables) options.interpolation.defaultVariables = options.defaultVariables;

  // TODO: deprecation
  // if (options.getAsync === false) throw deprecation error

  return options;
}

function convertJSONOptions(options) {
  options = convertInterpolation(options);
  options.joinArrays = '\n';

  return options;
}

function convertTOptions(options) {
  if (options.interpolationPrefix || options.interpolationSuffix || options.escapeInterpolation) {
    options = convertInterpolation(options);
  }

  options.nsSeparator = options.nsseparator;
  options.keySeparator = options.keyseparator;

  options.returnObjects = options.returnObjectTrees;

  return options;
}

function appendBackwardsAPI(i18n) {
  i18n.lng = function () {
    _logger2.default.deprecate('i18next.lng() can be replaced by i18next.language for detected language or i18next.languages for languages ordered by translation lookup.');
    return i18n.services.languageUtils.toResolveHierarchy(i18n.language)[0];
  };

  i18n.preload = function (lngs, cb) {
    _logger2.default.deprecate('i18next.preload() can be replaced with i18next.loadLanguages()');
    i18n.loadLanguages(lngs, cb);
  };

  i18n.setLng = function (lng, options, callback) {
    _logger2.default.deprecate('i18next.setLng() can be replaced with i18next.changeLanguage() or i18next.getFixedT() to get a translation function with fixed language or namespace.');
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (!options) options = {};

    if (options.fixLng === true) {
      if (callback) return callback(null, i18n.getFixedT(lng));
    }

    i18n.changeLanguage(lng, callback);
  };

  i18n.addPostProcessor = function (name, fc) {
    _logger2.default.deprecate('i18next.addPostProcessor() can be replaced by i18next.use({ type: \'postProcessor\', name: \'name\', process: fc })');
    i18n.use({
      type: 'postProcessor',
      name: name,
      process: fc
    });
  };
}

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {

  processors: {},

  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle(processors, value, key, options, translator) {
    var _this = this;

    processors.forEach(function (processor) {
      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
    });

    return value;
  }
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(21),
    stackClear = __webpack_require__(633),
    stackDelete = __webpack_require__(634),
    stackGet = __webpack_require__(635),
    stackHas = __webpack_require__(636),
    stackSet = __webpack_require__(637);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(73),
    eq = __webpack_require__(27);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(79);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(77),
    toKey = __webpack_require__(26);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(577),
    isObjectLike = __webpack_require__(17);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(39),
    nativeKeys = __webpack_require__(623);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(4),
    isKey = __webpack_require__(38),
    stringToPath = __webpack_require__(638),
    toString = __webpack_require__(649);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(72),
    baseAssignValue = __webpack_require__(73);

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(8);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(558),
    arraySome = __webpack_require__(567),
    cacheHas = __webpack_require__(591);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),
/* 81 */
/***/ (function(module, exports) {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(554),
    Map = __webpack_require__(35),
    Promise = __webpack_require__(556),
    Set = __webpack_require__(557),
    WeakMap = __webpack_require__(560),
    baseGetTag = __webpack_require__(15),
    toSource = __webpack_require__(86);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(27),
    isArrayLike = __webpack_require__(16),
    isIndex = __webpack_require__(37),
    isObject = __webpack_require__(5);

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(5);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),
/* 87 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

// Unique ID creation requires a high quality random # generator.  In node.js
// this is pretty straight-forward - we use the crypto API.

var rb = __webpack_require__(98).randomBytes;

function rng() {
  return rb(16);
}

module.exports = rng;


/***/ }),
/* 89 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(3);

  XMLNode = __webpack_require__(12);

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return create(XMLCData.prototype, this);
    };

    XMLCData.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<![CDATA[' + this.text + ']]>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLCData;

  })(XMLNode);

}).call(this);


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLComment, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(3);

  XMLNode = __webpack_require__(12);

  module.exports = XMLComment = (function(superClass) {
    extend(XMLComment, superClass);

    function XMLComment(parent, text) {
      XMLComment.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing comment text");
      }
      this.text = this.stringify.comment(text);
    }

    XMLComment.prototype.clone = function() {
      return create(XMLComment.prototype, this);
    };

    XMLComment.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!-- ' + this.text + ' -->';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLComment;

  })(XMLNode);

}).call(this);


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDeclaration, XMLNode, create, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(3);

  isObject = __webpack_require__(5);

  XMLNode = __webpack_require__(12);

  module.exports = XMLDeclaration = (function(superClass) {
    extend(XMLDeclaration, superClass);

    function XMLDeclaration(parent, version, encoding, standalone) {
      var ref;
      XMLDeclaration.__super__.constructor.call(this, parent);
      if (isObject(version)) {
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
      }
      if (!version) {
        version = '1.0';
      }
      this.version = this.stringify.xmlVersion(version);
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    XMLDeclaration.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?xml';
      r += ' version="' + this.version + '"';
      if (this.encoding != null) {
        r += ' encoding="' + this.encoding + '"';
      }
      if (this.standalone != null) {
        r += ' standalone="' + this.standalone + '"';
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDeclaration;

  })(XMLNode);

}).call(this);


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

  create = __webpack_require__(3);

  isObject = __webpack_require__(5);

  XMLCData = __webpack_require__(90);

  XMLComment = __webpack_require__(91);

  XMLDTDAttList = __webpack_require__(659);

  XMLDTDEntity = __webpack_require__(661);

  XMLDTDElement = __webpack_require__(660);

  XMLDTDNotation = __webpack_require__(662);

  XMLProcessingInstruction = __webpack_require__(95);

  module.exports = XMLDocType = (function() {
    function XMLDocType(parent, pubID, sysID) {
      var ref, ref1;
      this.documentObject = parent;
      this.stringify = this.documentObject.stringify;
      this.children = [];
      if (isObject(pubID)) {
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
      }
      if (sysID == null) {
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
      }
      if (pubID != null) {
        this.pubID = this.stringify.dtdPubID(pubID);
      }
      if (sysID != null) {
        this.sysID = this.stringify.dtdSysID(sysID);
      }
    }

    XMLDocType.prototype.element = function(name, value) {
      var child;
      child = new XMLDTDElement(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.entity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, false, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.pEntity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, true, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.notation = function(name, value) {
      var child;
      child = new XMLDTDNotation(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.instruction = function(target, value) {
      var child;
      child = new XMLProcessingInstruction(this, target, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.root = function() {
      return this.documentObject.root();
    };

    XMLDocType.prototype.document = function() {
      return this.documentObject;
    };

    XMLDocType.prototype.toString = function(options, level) {
      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!DOCTYPE ' + this.root().name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      if (this.children.length > 0) {
        r += ' [';
        if (pretty) {
          r += newline;
        }
        ref3 = this.children;
        for (i = 0, len = ref3.length; i < len; i++) {
          child = ref3[i];
          r += child.toString(options, level + 1);
        }
        r += ']';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    XMLDocType.prototype.ele = function(name, value) {
      return this.element(name, value);
    };

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
    };

    XMLDocType.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocType.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocType.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    XMLDocType.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLDocType.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLDocType.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocType.prototype.up = function() {
      return this.root();
    };

    XMLDocType.prototype.doc = function() {
      return this.document();
    };

    return XMLDocType;

  })();

}).call(this);


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isFunction, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(3);

  isObject = __webpack_require__(5);

  isFunction = __webpack_require__(28);

  every = __webpack_require__(641);

  XMLNode = __webpack_require__(12);

  XMLAttribute = __webpack_require__(657);

  XMLProcessingInstruction = __webpack_require__(95);

  module.exports = XMLElement = (function(superClass) {
    extend(XMLElement, superClass);

    function XMLElement(parent, name, attributes) {
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      this.children = [];
      this.instructions = [];
      this.attributes = {};
      if (attributes != null) {
        this.attribute(attributes);
      }
    }

    XMLElement.prototype.clone = function() {
      var att, attName, clonedSelf, i, len, pi, ref, ref1;
      clonedSelf = create(XMLElement.prototype, this);
      if (clonedSelf.isRoot) {
        clonedSelf.documentObject = null;
      }
      clonedSelf.attributes = {};
      ref = this.attributes;
      for (attName in ref) {
        if (!hasProp.call(ref, attName)) continue;
        att = ref[attName];
        clonedSelf.attributes[attName] = att.clone();
      }
      clonedSelf.instructions = [];
      ref1 = this.instructions;
      for (i = 0, len = ref1.length; i < len; i++) {
        pi = ref1[i];
        clonedSelf.instructions.push(pi.clone());
      }
      clonedSelf.children = [];
      this.children.forEach(function(child) {
        var clonedChild;
        clonedChild = child.clone();
        clonedChild.parent = clonedSelf;
        return clonedSelf.children.push(clonedChild);
      });
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) continue;
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      var attName, i, len;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = name.valueOf();
      if (Array.isArray(name)) {
        for (i = 0, len = name.length; i < len; i++) {
          attName = name[i];
          delete this.attributes[attName];
        }
      } else {
        delete this.attributes[name];
      }
      return this;
    };

    XMLElement.prototype.instruction = function(target, value) {
      var i, insTarget, insValue, instruction, len;
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (i = 0, len = target.length; i < len; i++) {
          insTarget = target[i];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) continue;
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        instruction = new XMLProcessingInstruction(this, target, value);
        this.instructions.push(instruction);
      }
      return this;
    };

    XMLElement.prototype.toString = function(options, level) {
      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      ref3 = this.instructions;
      for (i = 0, len = ref3.length; i < len; i++) {
        instruction = ref3[i];
        r += instruction.toString(options, level);
      }
      if (pretty) {
        r += space;
      }
      r += '<' + this.name;
      ref4 = this.attributes;
      for (name in ref4) {
        if (!hasProp.call(ref4, name)) continue;
        att = ref4[name];
        r += att.toString(options);
      }
      if (this.children.length === 0 || every(this.children, function(e) {
        return e.value === '';
      })) {
        r += '/>';
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        ref5 = this.children;
        for (j = 0, len1 = ref5.length; j < len1; j++) {
          child = ref5[j];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLProcessingInstruction, create;

  create = __webpack_require__(3);

  module.exports = XMLProcessingInstruction = (function() {
    function XMLProcessingInstruction(parent, target, value) {
      this.stringify = parent.stringify;
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      this.target = this.stringify.insTarget(target);
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    XMLProcessingInstruction.prototype.clone = function() {
      return create(XMLProcessingInstruction.prototype, this);
    };

    XMLProcessingInstruction.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?';
      r += this.target;
      if (this.value) {
        r += ' ' + this.value;
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLProcessingInstruction;

  })();

}).call(this);


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, assign;

  assign = __webpack_require__(639);

  XMLBuilder = __webpack_require__(658);

  module.exports.create = function(name, xmldec, doctype, options) {
    options = assign({}, xmldec, doctype, options);
    return new XMLBuilder(name, options).root();
  };

}).call(this);


/***/ }),
/* 97 */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 97;

/***/ }),
/* 98 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 99 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 101 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = require("util");

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _moreLike = __webpack_require__(537);

var Alexa = __webpack_require__(106); // 2. Skill Code =======================================================================================================

exports.handler = function (event, context, callback) {
    var alexa = Alexa.handler(event, context);

    // alexa.appId = 'amzn1.echo-sdk-ams.app.1234';
    ///alexa.dynamoDBTableName = 'YourTableName'; // creates new table for session.attributes
    alexa.registerHandlers(handlers);
    alexa.execute();
};

var handlers = {
    'LaunchRequest': function LaunchRequest() {
        this.response.speak('launch').listen('listen');
        this.emit(':responseReady');
    },

    'RepeatIntent': function RepeatIntent() {

        var say = this.event.request.intent.slots.CatchAll.value;
        // This is the variable that you would take and permute and return for output
        say = (0, _moreLike.moreLike)(say);

        this.response.speak(say);
        this.emit(':responseReady');
    },

    'AMAZON.YesIntent': function AMAZONYesIntent() {

        // this.response.cardRenderer(SKILL_NAME, card);
        this.response.speak('yes');
        this.emit(':responseReady');
    },

    'AMAZON.NoIntent': function AMAZONNoIntent() {
        this.emit('AMAZON.StopIntent');
    },
    'AMAZON.HelpIntent': function AMAZONHelpIntent() {
        this.response.speak('help');
        this.emit(':responseReady');
    },
    'AMAZON.CancelIntent': function AMAZONCancelIntent() {
        this.response.speak('stop');
        this.emit(':responseReady');
    },
    'AMAZON.StopIntent': function AMAZONStopIntent() {
        this.emit('SessionEndedRequest');
    },
    'SessionEndedRequest': function SessionEndedRequest() {
        this.response.speak('stop');
        this.emit(':responseReady');
    }

};

//    END of Intent Handlers {} ========================================================================================

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var AlexaLambdaHandler = __webpack_require__(107);

module.exports.handler = AlexaLambdaHandler.LambdaHandler;
module.exports.CreateStateHandler = AlexaLambdaHandler.CreateStateHandler;
module.exports.StateString = AlexaLambdaHandler.StateString;

module.exports.templateBuilders = {
    BodyTemplate1Builder : __webpack_require__(114).BodyTemplate1Builder,
    BodyTemplate2Builder : __webpack_require__(115).BodyTemplate2Builder,
    BodyTemplate3Builder : __webpack_require__(116).BodyTemplate3Builder,
    BodyTemplate6Builder : __webpack_require__(117).BodyTemplate6Builder,
    ListTemplate1Builder : __webpack_require__(119).ListTemplate1Builder,
    ListTemplate2Builder : __webpack_require__(120).ListTemplate2Builder,
    ListItemBuilder : __webpack_require__(118).ListItemBuilder
};

module.exports.services = {
    DeviceAddressService : __webpack_require__(112),
    ListManagementService : __webpack_require__(113)
};

module.exports.utils = {
    ImageUtils : __webpack_require__(121).ImageUtils,
    TextUtils : __webpack_require__(10).TextUtils
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(99).EventEmitter;
const util = __webpack_require__(104);
const i18n = __webpack_require__(553);
const sprintf = __webpack_require__(542);
const attributesHelper = __webpack_require__(48);
const responseHandlers = __webpack_require__(110);
const _StateString = 'STATE';
const ResponseBuilder = __webpack_require__(111).ResponseBuilder;
const skillEventHandlers = __webpack_require__(108).skillEventHandlers;
const EventParser = __webpack_require__(109).EventParser;

function AlexaRequestEmitter() {
    EventEmitter.call(this);
}

util.inherits(AlexaRequestEmitter, EventEmitter);

function alexaRequestHandler(event, context, callback) {
    if (!event.session) {
        event.session = { 'attributes': {} };
    } else if (!event.session.attributes) {
        event.session.attributes = {};
    }

    var handler = new AlexaRequestEmitter();
    handler.setMaxListeners(Infinity);

    Object.defineProperty(handler, '_event', {
        value: event,
        writable: false
    });

    Object.defineProperty(handler, '_context', {
        value: context,
        writable: false
    });

    Object.defineProperty(handler, '_callback', {
        value: callback,
        writable: false
    });

    Object.defineProperty(handler, 'state', {
        value: null,
        writable: true,
        configurable: true
    });

    Object.defineProperty(handler, 'appId', {
        value: null,
        writable: true
    });

    Object.defineProperty(handler, 'response', {
        value: {},
        writable: true
    });

    Object.defineProperty(handler, 'dynamoDBTableName', {
        value: null,
        writable: true
    });

    Object.defineProperty(handler, 'saveBeforeResponse', {
        value: false,
        writable: true
    });

    Object.defineProperty(handler, 'i18n', {
        value: i18n,
        writable: true
    });

    Object.defineProperty(handler, 'locale', {
        value: undefined,
        writable: true
    });

    Object.defineProperty(handler, 'resources', {
        value: undefined,
        writable: true
    });

    Object.defineProperty(handler, 'registerHandlers', {
        value: function() {
            RegisterHandlers.apply(handler, arguments);
        },
        writable: false
    });

    Object.defineProperty(handler, 'execute', {
        value: function() {
            HandleLambdaEvent.call(handler);
        },
        writable: false
    });

    handler.registerHandlers(responseHandlers);
    handler.registerHandlers(skillEventHandlers);

    return handler;
}

function HandleLambdaEvent() {
    this.locale = this._event.request.locale;
    if(this.resources) {
        this.i18n.use(sprintf).init({
            overloadTranslationOptionHandler: sprintf.overloadTranslationOptionHandler,
            returnObjects: true,
            lng: this.locale,
            resources: this.resources
        }, (err) => {
            if(err) {
                throw new Error('Error initializing i18next: ' + err);
            }
            ValidateRequest.call(this);
        });
    } else {
        ValidateRequest.call(this);
    }
}

function ValidateRequest() {
    var event = this._event;
    var context = this._context;
    var callback = this._callback;
    var handlerAppId = this.appId;

    var requestAppId = '';
    var userId = '';

    // Long-form audio enabled skills use event.context
    if (event.context) {
        requestAppId = event.context.System.application.applicationId;
        userId = event.context.System.user.userId;
    } else if (event.session) {
        requestAppId = event.session.application.applicationId;
        userId = event.session.user.userId;
    }


    if(!handlerAppId){
        console.log('Warning: Application ID is not set');
    }

    try {
        // Validate that this request originated from authorized source.
        if (handlerAppId && (requestAppId !== handlerAppId)) {
            console.log(`The applicationIds don\'t match: ${requestAppId} and ${handlerAppId}`);
            var error = new Error('Invalid ApplicationId: ' + handlerAppId);
            if(typeof callback === 'undefined') {
                return context.fail(error);
            } else {
                return callback(error);
            }
        }

        if(this.dynamoDBTableName && (!event.session.sessionId || event.session['new']) ) {
            attributesHelper.get(this.dynamoDBTableName, userId, (err, data) => {
                if(err) {
                    var error = new Error('Error fetching user state: ' + err);
                    if(typeof callback === 'undefined') {
                        return context.fail(error);
                    } else {
                        return  callback(error);
                    }
                }

                Object.assign(this._event.session.attributes, data);

                EmitEvent.call(this);
            });
        } else {
            EmitEvent.call(this);
        }
    } catch (e) {
        console.log(`Unexpected exception '${e}':\n${e.stack}`);
        if(typeof callback === 'undefined') {
            return context.fail(e);
        } else {
            return  callback(e);
        }
    }
}

function EmitEvent() {
    this.state = this._event.session.attributes[_StateString] || '';

    let eventString = '';

    if (this._event.session['new'] && this.listenerCount('NewSession' + this.state) === 1) {
        eventString = 'NewSession';
    } else {
        eventString = EventParser.parseEventName(this._event);
    }
    const handlerFuncName = eventString;

    eventString += this.state;

    if(this.listenerCount(eventString) < 1) {
        eventString = 'Unhandled' + this.state;
    }

    if(this.listenerCount(eventString) < 1){
        throw new Error(`In state: ${this.state}. No handler function was defined for event ${handlerFuncName} ` +
            `and no 'Unhandled' function was defined.`);
    }

    this.emit(eventString);
}

function RegisterHandlers() {
    for(var arg = 0; arg < arguments.length; arg++) {
        var handlerObject = arguments[arg];

        if(!isObject(handlerObject)) {
            throw new Error(`Argument #${arg} was not an Object`);
        }

        var eventNames = Object.keys(handlerObject);

        for(var i = 0; i < eventNames.length; i++) {
            if(typeof(handlerObject[eventNames[i]]) !== 'function') {
                throw new Error(`Event handler for '${eventNames[i]}' was not a function`);
            }

            var eventName = eventNames[i];

            if(handlerObject[_StateString]) {
                eventName += handlerObject[_StateString];
            }

            var localize = function() {
                return this.i18n.t.apply(this.i18n, arguments);
            };

            var handlerContext = {
                on: this.on.bind(this),
                emit: this.emit.bind(this),
                emitWithState: EmitWithState.bind(this),
                handler: this,
                i18n: this.i18n,
                locale: this.locale,
                t : localize,
                event: this._event,
                attributes: this._event.session.attributes,
                context: this._context,
                callback : this._callback,
                name: eventName,
                isOverridden:  IsOverridden.bind(this, eventName),
                response: new ResponseBuilder(this)
            };

            this.on(eventName, handlerObject[eventNames[i]].bind(handlerContext));
        }
    }
}

function isObject(obj) {
    return (!!obj) && (obj.constructor === Object);
}

function IsOverridden(name) {
    return this.listenerCount(name) > 1;
}

function createStateHandler(state, obj){
    if(!obj) {
        obj = {};
    }

    Object.defineProperty(obj, _StateString, {
        value: state || ''
    });

    return obj;
}

function EmitWithState() {
    if(arguments.length === 0) {
        throw new Error('EmitWithState called without arguments');
    }
    arguments[0] = arguments[0] + this.state;

    if (this.listenerCount(arguments[0]) < 1) {
        arguments[0] = 'Unhandled' + this.state;
    }

    if (this.listenerCount(arguments[0]) < 1) {
        throw new Error(`No 'Unhandled' function defined for event: ${arguments[0]}`);
    }

    this.emit.apply(this, arguments);
}

process.on('uncaughtException', function(err) {
    console.log(`Uncaught exception: ${err}\n${err.stack}`);
    throw err;
});

module.exports.LambdaHandler = alexaRequestHandler;
module.exports.CreateStateHandler = createStateHandler;
module.exports.StateString = _StateString;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * By Default, these events will result in a no-op. A skill can override this behavior by registering handlers
 * for these events in their skill.
 * Note: These events will never have session attributes
 */
const skillEventHandlers = {
    'AlexaSkillEvent.SkillEnabled' : function() {
    },
    'AlexaSkillEvent.SkillDisabled' : function() {
    },
    'AlexaSkillEvent.SkillPermissionAccepted' : function() {
    },
    'AlexaSkillEvent.SkillPermissionChanged' : function() {
    },
    'AlexaSkillEvent.SkillAccountLinked' : function() {
    }
};

module.exports.skillEventHandlers = skillEventHandlers;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


class EventParser {
    /**
     * Parses an Alexa request and returns the corresponding name of the handler
     * that should be used to handle the request.
     * @static
     * @param {Object} event
     * @returns string
     * @memberof EventParser
     */
    static parseEventName(event) {
        const requestType = event.request.type;
        // intent requests get routed to handler with intent name
        if(requestType === 'IntentRequest') {
            return event.request.intent.name;
        } else if(requestType.startsWith('Display.') ||
                  requestType.startsWith('AudioPlayer.') ||
                  requestType.startsWith('PlaybackController.')) {
            // legacy cases, for backwards compatibility
            return requestType.split('.')[1];
        } else {
            // future: handler names will correspond directly to event name
            return requestType;
        }
    }
}

module.exports.EventParser = EventParser;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var attributesHelper = __webpack_require__(48);

module.exports = (function () {
    return {
        ':tell': function (speechOutput) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                shouldEndSession: true
            });
            this.emit(':responseReady');
        },
        ':ask': function (speechOutput, repromptSpeech) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':askWithCard': function(speechOutput, repromptSpeech, cardTitle, cardContent, imageObj) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                cardTitle: cardTitle,
                cardContent: cardContent,
                cardImage: imageObj,
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':tellWithCard': function(speechOutput, cardTitle, cardContent, imageObj) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                cardTitle: cardTitle,
                cardContent: cardContent,
                cardImage: imageObj,
                shouldEndSession: true
            });
            this.emit(':responseReady');
        },
        ':tellWithLinkAccountCard': function(speechOutput) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                cardType: 'LinkAccount',
                shouldEndSession: true
            });
            this.emit(':responseReady');
        },
        ':askWithLinkAccountCard': function(speechOutput, repromptSpeech) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                cardType: 'LinkAccount',
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':askWithPermissionCard': function(speechOutput, repromptSpeech, permissions) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                permissions: permissions,
                cardType: 'AskForPermissionsConsent',
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':tellWithPermissionCard': function(speechOutput, permissions) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                permissions: permissions,
                cardType: 'AskForPermissionsConsent',
                shouldEndSession: true
            });
            this.emit(':responseReady');
        },
        ':delegate': function(updatedIntent) {
            if(this.isOverridden()) {
                return;
            }

            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                directives: getDialogDirectives('Dialog.Delegate', updatedIntent, null),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':elicitSlot': function (slotName, speechOutput, repromptSpeech, updatedIntent) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                directives: getDialogDirectives('Dialog.ElicitSlot', updatedIntent, slotName),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':elicitSlotWithCard': function (slotName, speechOutput, repromptSpeech, cardTitle, cardContent, updatedIntent, imageObj) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                cardTitle: cardTitle,
                cardContent: cardContent,
                cardImage: imageObj,
                directives: getDialogDirectives('Dialog.ElicitSlot', updatedIntent, slotName),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':confirmSlot': function (slotName, speechOutput, repromptSpeech, updatedIntent) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                directives: getDialogDirectives('Dialog.ConfirmSlot', updatedIntent, slotName),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':confirmSlotWithCard': function (slotName, speechOutput, repromptSpeech, cardTitle, cardContent, updatedIntent, imageObj) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                cardTitle: cardTitle,
                cardContent: cardContent,
                cardImage: imageObj,
                directives: getDialogDirectives('Dialog.ConfirmSlot', updatedIntent, slotName),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':confirmIntent': function (speechOutput, repromptSpeech, updatedIntent) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                directives: getDialogDirectives('Dialog.ConfirmIntent', updatedIntent, null),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':confirmIntentWithCard': function (speechOutput, repromptSpeech, cardTitle, cardContent, updatedIntent, imageObj) {
            if(this.isOverridden()) {
                return;
            }
            this.handler.response = buildSpeechletResponse({
                sessionAttributes: this.attributes,
                output: getSSMLResponse(speechOutput),
                reprompt: getSSMLResponse(repromptSpeech),
                cardTitle: cardTitle,
                cardContent: cardContent,
                cardImage: imageObj,
                directives: getDialogDirectives('Dialog.ConfirmIntent', updatedIntent, null),
                shouldEndSession: false
            });
            this.emit(':responseReady');
        },
        ':responseReady': function () {
            if (this.isOverridden()) {
                return;
            }

            if(this.handler.state) {
                this.handler.response.sessionAttributes.STATE = this.handler.state;
            }

            if (this.handler.dynamoDBTableName) {
                return this.emit(':saveState');
            }

            if(typeof this.callback === 'undefined') {
                this.context.succeed(this.handler.response);
            } else {
                this.callback(null, this.handler.response);
            }
        },
        ':saveState': function(forceSave) {
            if (this.isOverridden()) {
                return;
            }

            if(forceSave && this.handler.state){
                this.attributes.STATE = this.handler.state;
            }

            var userId = '';

            // Long-form audio enabled skills use event.context
            if (this.event.context) {
                userId = this.event.context.System.user.userId;
            } else if (this.event.session) {
                userId = this.event.session.user.userId;
            }

            if(this.handler.saveBeforeResponse || forceSave || this.handler.response.response.shouldEndSession) {
                attributesHelper.set(this.handler.dynamoDBTableName, userId, this.attributes,
                    (err) => {
                        if(err) {
                            return this.emit(':saveStateError', err);
                        }

                        // To save the state when AudioPlayer Requests come without sending a response.
                        if (Object.keys(this.handler.response).length === 0 && this.handler.response.constructor === Object) {
                            this.handler.response =  true;
                        }

                        if(typeof this.callback === 'undefined') {
                            this.context.succeed(this.handler.response);
                        } else {
                            this.callback(null, this.handler.response);
                        }
                    });
            } else {
                if(typeof this.callback === 'undefined') {
                    this.context.succeed(this.handler.response || true);
                } else {
                    this.callback(null, this.handler.response || true);
                }
            }
        },
        ':saveStateError': function(err) {
            if(this.isOverridden()) {
                return;
            }
            console.log(`Error saving state: ${err}\n${err.stack}`);
            if(typeof this.callback === 'undefined') {
                this.context.fail(err);
            } else {
                this.callback(err);
            }            
        }
    };
})();

function createSpeechObject(optionsParam) {
    if (optionsParam && optionsParam.type === 'SSML') {
        return {
            type: optionsParam.type,
            ssml: optionsParam.speech
        };
    } else {
        return {
            type: optionsParam.type || 'PlainText',
            text: optionsParam.speech || optionsParam
        };
    }
}

function buildSpeechletResponse(options) {
    var alexaResponse = {
        shouldEndSession: options.shouldEndSession
    };

    if (options.output) {
        alexaResponse.outputSpeech = createSpeechObject(options.output);
    }

    if (options.reprompt) {
        alexaResponse.reprompt = {
            outputSpeech: createSpeechObject(options.reprompt)
        };
    }

    if (options.directives) {
        alexaResponse.directives = options.directives;
    }

    if (options.cardTitle && options.cardContent) {
        alexaResponse.card = {
            type: 'Simple',
            title: options.cardTitle,
            content: options.cardContent
        };

        if(options.cardImage && (options.cardImage.smallImageUrl || options.cardImage.largeImageUrl)) {
            alexaResponse.card.type = 'Standard';
            alexaResponse.card.image = {};

            delete alexaResponse.card.content;
            alexaResponse.card.text = options.cardContent;

            if(options.cardImage.smallImageUrl) {
                alexaResponse.card.image.smallImageUrl = options.cardImage.smallImageUrl;
            }

            if(options.cardImage.largeImageUrl) {
                alexaResponse.card.image.largeImageUrl = options.cardImage.largeImageUrl;
            }
        }
    } else if (options.cardType === 'LinkAccount') {
        alexaResponse.card = {
            type: 'LinkAccount'
        };
    } else if (options.cardType === 'AskForPermissionsConsent') {
        alexaResponse.card = {
            type: 'AskForPermissionsConsent',
            permissions: options.permissions
        };
    }

    var returnResult = {
        version: '1.0',
        response: alexaResponse
    };

    if (options.sessionAttributes) {
        returnResult.sessionAttributes = options.sessionAttributes;
    }
    return returnResult;
}

// TODO: check for ssml content in card
function getSSMLResponse(message) {
    if (message == null) { // jshint ignore:line
        return null;
    } else {
        return {
            type: 'SSML',
            speech: `<speak> ${message} </speak>`
        };
    }
}

function getDialogDirectives(dialogType, updatedIntent, slotName) {
    let directive = {
        type: dialogType
    };

    if (dialogType === 'Dialog.ElicitSlot') {
        directive.slotToElicit = slotName;
    } else if (dialogType === 'Dialog.ConfirmSlot') {
        directive.slotToConfirm = slotName;
    }

    if (updatedIntent) {
        directive.updatedIntent = updatedIntent;
    }
    return [directive];
}


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const createSSMLSpeechObject = (message) => {
    return {
        type: 'SSML',
        ssml: `<speak> ${message} </speak>`
    };
};

const buildCard = (cardTitle, cardContent, cardImage) => {
   let card = {
        type: CARD_TYPES.SIMPLE,
        title: cardTitle,
        content: cardContent
    };

    if(cardImage && (cardImage.smallImageUrl || cardImage.largeImageUrl)) {
        card.type = CARD_TYPES.STANDARD;
        card.image = {};

        delete card.content;
        card.text = cardContent;

        if(cardImage.smallImageUrl) {
            card.image.smallImageUrl = cardImage.smallImageUrl;
        }

        if(cardImage.largeImageUrl) {
            card.image.largeImageUrl = cardImage.largeImageUrl;
        }
    }

    return card;
};

const CARD_TYPES = {
    STANDARD : 'Standard',
    SIMPLE : 'Simple',
    LINK_ACCOUNT : 'LinkAccount',
    ASK_FOR_PERMISSIONS_CONSENT: 'AskForPermissionsConsent'
};

const HINT_TYPES = {
    PLAIN_TEXT : 'PlainText'
};

const DIRECTIVE_TYPES = {
    AUDIOPLAYER : {
        PLAY : 'AudioPlayer.Play',
        STOP : 'AudioPlayer.Stop',
        CLEAR_QUEUE : 'AudioPlayer.ClearQueue'
    },
    DISPLAY : {
        RENDER_TEMPLATE : 'Display.RenderTemplate'
    },
    HINT : 'Hint',
    VIDEOAPP : {
        LAUNCH : 'VideoApp.Launch'
    }
};

/**
 * Responsible for building JSON responses as per the Alexa skills kit interface
 * https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference#response-body-syntax
 * 
 * @class ResponseBuilder
 */
class ResponseBuilder {
    constructor(alexaHandler) { // property : response
        this._responseObject = alexaHandler.response;
        this._responseObject.version = '1.0';
        this._responseObject.response = {
            shouldEndSession : true
        };
        
        this._responseObject.sessionAttributes = alexaHandler._event.session.attributes;
    }

    /**
     * Have Alexa say the provided speechOutput to the user
     * 
     * @param {string} speechOutput
     * @returns 
     * @memberof ResponseBuilder
     */
    speak(speechOutput) {
        this._responseObject.response.outputSpeech = createSSMLSpeechObject(speechOutput);
        return this;
    }

    /**
     * Have alexa listen for speech from the user. If the user doesn't respond within 8 seconds
     * then have alexa reprompt with the provided reprompt speech
     * @param {string} repromptSpeech
     * @returns 
     * @memberof ResponseBuilder
     */
    listen(repromptSpeech) {
        this._responseObject.response.reprompt = {
            outputSpeech: createSSMLSpeechObject(repromptSpeech)
        };
        this._responseObject.response.shouldEndSession = false;
        return this;
    }

    /**
     * Render a card with the following title, content and image
     * 
     * @param {string} cardTitle 
     * @param {string} cardContent 
     * @param {{smallImageUrl : string, largeImageUrl : string}} cardImage 
     * @returns 
     * @memberof ResponseBuilder
     */
    cardRenderer(cardTitle, cardContent, cardImage) {
        const card = buildCard(cardTitle, cardContent, cardImage);
        this._responseObject.response.card = card;
        return this;
    }

    /**
     * Render a link account card
     * 
     * @returns 
     * @memberof ResponseBuilder
     */
    linkAccountCard() {
        this._responseObject.response.card = {
            type: CARD_TYPES.LINK_ACCOUNT
        };
        return this;
    }

    /**
     * Render a askForPermissionsConsent card
     * @param {[permission : string]} permissions
     * @returns
     * @memberOf ResponseBuilder
     */
    askForPermissionsConsentCard(permissions) {
        this._responseObject.response.card = {
            type: CARD_TYPES.ASK_FOR_PERMISSIONS_CONSENT,
            permissions: permissions
        };
        return this;
    }

    /**
     * Creates a play, stop or clearQueue audioPlayer directive depending on the directive type passed in.
     * @deprecated - use audioPlayerPlay, audioPlayerStop, audioPlayerClearQueue instead
     * @param {string} directiveType 
     * @param {string} behavior 
     * @param {string} url 
     * @param {string} token 
     * @param {string} expectedPreviousToken 
     * @param {number} offsetInMilliseconds 
     * @returns 
     * @memberof ResponseBuilder
     */
    audioPlayer(directiveType, behavior, url, token, expectedPreviousToken, offsetInMilliseconds) {
        if (directiveType === 'play') {
            return this.audioPlayerPlay(behavior, url, token, expectedPreviousToken, offsetInMilliseconds);
        } else if (directiveType === 'stop') {
            return this.audioPlayerStop();
        } else {
            return this.audioPlayerClearQueue(behavior);
        }
    }

    /**
     * Creates an AudioPlayer play directive
     * 
     * @param {string} behavior Describes playback behavior. Accepted values:
     * REPLACE_ALL: Immediately begin playback of the specified stream, and replace current and enqueued streams.
     * ENQUEUE: Add the specified stream to the end of the current queue. This does not impact the currently playing stream.
     * REPLACE_ENQUEUED: Replace all streams in the queue. This does not impact the currently playing stream.
     * @param {string} url Identifies the location of audio content at a remote HTTPS location.
     * The audio file must be hosted at an Internet-accessible HTTPS endpoint. HTTPS is required, and the domain hosting the 
     * files must present a valid, trusted SSL certificate. Self-signed certificates cannot be used. 
     * The supported formats for the audio file include AAC/MP4, MP3, HLS, PLS and M3U. Bitrates: 16kbps to 384 kbps.
     * @param {string} token A token that represents the audio stream. This token cannot exceed 1024 characters
     * @param {string} expectedPreviousToken A token that represents the expected previous stream.
     * This property is required and allowed only when the playBehavior is ENQUEUE. This is used to prevent potential race conditions 
     * if requests to progress through a playlist and change tracks occur at the same time.
     * @param {string} offsetInMilliseconds The timestamp in the stream from which Alexa should begin playback. 
     * Set to 0 to start playing the stream from the beginning. Set to any other value to start playback from that associated point in the stream
     * @returns 
     * @memberof ResponseBuilder
     */
    audioPlayerPlay(behavior, url, token, expectedPreviousToken, offsetInMilliseconds) {
        const audioPlayerDirective = {
            type : DIRECTIVE_TYPES.AUDIOPLAYER.PLAY,
            playBehavior: behavior,
            audioItem: {
                stream: {
                    url: url,
                    token: token,
                    expectedPreviousToken: expectedPreviousToken,
                    offsetInMilliseconds: offsetInMilliseconds
                }
            }
        };

        this._addDirective(audioPlayerDirective);
        return this;
    }

    /**
     * Creates an AudioPlayer Stop directive - Stops the current audio Playback
     * 
     * @returns 
     * @memberof ResponseBuilder
     */
    audioPlayerStop() {
        const audioPlayerDirective = {
            'type': DIRECTIVE_TYPES.AUDIOPLAYER.STOP
        };

        this._addDirective(audioPlayerDirective);
        return this;
    }

    /**
     * Creates an AudioPlayer ClearQueue directive - clear the queue without stopping the currently playing stream,
     * or clear the queue and stop any currently playing stream.
     * 
     * @param {string} clearBehavior Describes the clear queue behavior. Accepted values:
     * CLEAR_ENQUEUED: clears the queue and continues to play the currently playing stream
     * CLEAR_ALL: clears the entire playback queue and stops the currently playing stream (if applicable).
     * @returns 
     * @memberof ResponseBuilder
     */
    audioPlayerClearQueue(clearBehavior) {
        const audioPlayerDirective = {
            type : DIRECTIVE_TYPES.AUDIOPLAYER.CLEAR_QUEUE,
            clearBehavior : clearBehavior
        };

        this._addDirective(audioPlayerDirective);
        return this;
    }

    /**
     * Creates a Display RenderTemplate Directive
     * 
     * Use a template builder to generate a template object
     * 
     * @param {Template} template 
     * @returns 
     * @memberof ResponseBuilder
     */
    renderTemplate(template) {
        const templateDirective = {
            type : DIRECTIVE_TYPES.DISPLAY.RENDER_TEMPLATE,
            template : template
        };

        this._addDirective(templateDirective);
        return this;
    }

    /**
     * Creates a hint directive - show a hint on the screen of the echo show
     * 
     * @param {string} hintText text to show on the hint
     * @param {string} hintType (optional) Default value : PlainText
     * @returns 
     * @memberof ResponseBuilder
     */
    hint(hintText, hintType) {
        if(!hintType) {
            hintType = HINT_TYPES.PLAIN_TEXT;
        }

        const hintDirective = {
            type : DIRECTIVE_TYPES.HINT,
            hint : {
                type : hintType,
                text : hintText
            }
        };

        this._addDirective(hintDirective);
        return this;
    }

    /**
     * Creates a VideoApp play directive to play a video
     * 
     * @param {string} source Identifies the location of video content at a remote HTTPS location.
     * The video file must be hosted at an Internet-accessible HTTPS endpoint.
     * @param {{title : string, subtitle : string}} metadata (optional) Contains an object that provides the 
     * information that can be displayed on VideoApp.
     * @returns 
     * @memberof ResponseBuilder
     */
    playVideo(source, metadata) {
        const playVideoDirective = {
            type : DIRECTIVE_TYPES.VIDEOAPP.LAUNCH,
            videoItem : {
                source : source
            }
        };

        if (metadata) {
            playVideoDirective.videoItem.metadata = metadata;
        }

        // Note : shouldEndSession flag is not allowed with LaunchVideoApp.Launch Directive
        delete this._responseObject.response.shouldEndSession;
        this._addDirective(playVideoDirective);
        return this;
    }

    /**
     * Helper method for adding directives to responses
     * 
     * @param {object} directive 
     * @memberof ResponseBuilder
     */
    _addDirective(directive) {
        if(!Array.isArray(this._responseObject.response.directives)) {
            this._responseObject.response.directives = [];
        }

        this._responseObject.response.directives.push(directive);
    }
}

module.exports.ResponseBuilder = ResponseBuilder;
module.exports.CARD_TYPES = CARD_TYPES;
module.exports.DIRECTIVE_TYPES = DIRECTIVE_TYPES;
module.exports.HINT_TYPES = HINT_TYPES;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const ApiClient = __webpack_require__(49).ApiClient;
const ServiceError = __webpack_require__(50).ServiceError;

const DEVICE_ADDRESS_PATH_PREFIX = '/v1/devices/';
const DEVICE_ADDRESS_PATH_POSTFIX = '/settings/address';
const COUNTRY_AND_POSTAL_PATH_POSTFIX = '/countryAndPostalCode';

class DeviceAddressService {

    /**
     * Create an instance of DeviceAddressService
     * @param {ApiClient} [apiClient=new ApiClient()] ApiClient
     * @memberOf DeviceAddressService
     */
    constructor(apiClient) {
        this.apiClient = apiClient || new ApiClient();
    }

    /**
     * Get full address information from Alexa Device Address API
     * @param {string} deviceId deviceId from Alexa request
     * @param {string} apiEndpoint API apiEndpoint from Alexa request
     * @param {string} token bearer token for device address permission
     * @returns {Promise<Object>}
     * @memberOf DeviceAddressService
     */
    getFullAddress(deviceId, apiEndpoint, token) {
        const uri = apiEndpoint + DEVICE_ADDRESS_PATH_PREFIX + deviceId + DEVICE_ADDRESS_PATH_POSTFIX;
        const headers = {'Authorization': `Bearer ${token}`};

        return this.apiClient.get(uri, headers)
            .then(this.__validateApiResponse);
    }

    /**
     * Get country and postal information from Alexa Device Address API
     * @param {string} deviceId deviceId from Alexa request
     * @param {string} apiEndpoint API apiEndpoint from Alexa request
     * @param {string} token bearer token for device address permission
     * @returns {Promise<Object>}
     * @memberOf DeviceAddressService
     */
    getCountryAndPostalCode(deviceId, apiEndpoint, token) {
        const uri = apiEndpoint + DEVICE_ADDRESS_PATH_PREFIX + deviceId + DEVICE_ADDRESS_PATH_POSTFIX + COUNTRY_AND_POSTAL_PATH_POSTFIX;
        const headers = {'Authorization': `Bearer ${token}`};

        return this.apiClient.get(uri, headers)
            .then(this.__validateApiResponse);
    }

    /**
     * Performs validation logic on api responses and throws an error if a problem is found
     *
     * @param {ApiClientResponse} apiClientResponse response returned from the API call
     * @returns {Object | string}
     * @private
     * @memberOf DeviceAddressService
     */
    __validateApiResponse(apiClientResponse) {
        let isResponseCodeValid = apiClientResponse.statusCode >= 200 && apiClientResponse.statusCode < 300;
        let responseBody;
        try {
            responseBody = apiClientResponse.body && JSON.parse(apiClientResponse.body);
        } catch(err) {
            responseBody = apiClientResponse.body;
        }

        if (isResponseCodeValid) {
            return responseBody;
        }

        throw new ServiceError(apiClientResponse.statusCode, JSON.stringify(responseBody));
    }
}

module.exports = DeviceAddressService;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @typedef { value : string, status: string, version: long} ListItemObject
 * @typedef { name : string, status : string, version: long} ListObject
 */

const ApiClient = __webpack_require__(49).ApiClient;
const ServiceError = __webpack_require__(50).ServiceError;

const LIST_MANAGEMENT_PATH = '/v2/householdlists/';

class ListManagementService {

    /**
     * Create an instance of ListManagementService
     * @param apiClient
     */
    constructor(apiClient) {
        this.apiClient = apiClient || new ApiClient();
        this.apiEndpoint = 'https://api.amazonalexa.com';
    }

    /**
     * Set apiEndpoint address, default is 'https://api.amazonalexa.com'
     * @param apiEndpoint
     * @returns void
     * @memberOf ListManagementService
     */
    setApiEndpoint(apiEndpoint) {
        this.apiEndpoint = apiEndpoint;
    }

    /**
     * Get currently set apiEndpoint address
     * @returns {string}
     * @memberOf ListManagementService
     */
    getApiEndpoint() {
        return this.apiEndpoint;
    }

    /**
     * Retrieve the metadata for all customer lists, including the customer's default lists
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    getListsMetadata(token){
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH;
        const headers = this.__buildHeaders(token);

        return this.apiClient.get(uri, headers)
            .then(this.__validateApiResponse);
    }

    /**
     * Create a custom list. The new list name must be different than any existing list name
     * @param {ListObject} listObject
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    createList(listObject, token) {
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH;
        const headers = this.__buildHeaders(token, listObject);

        return this.apiClient.post(uri, headers, JSON.stringify(listObject))
            .then(this.__validateApiResponse);
    }

    /**
     * Retrieve list metadata including the items in the list with requested status
     * @param {string} listId unique Id associated with the list
     * @param {string} itemStatus itemsStatus can be either 'active' or 'completed'
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    getList(listId, itemStatus, token) {
        const uri = this.apiEndpoint +  LIST_MANAGEMENT_PATH + listId + '/' + itemStatus;
        const headers = this.__buildHeaders(token);

        return this.apiClient.get(uri, headers)
            .then(this.__validateApiResponse);
    }

    /**
     * Update a custom list. Only the list name or state can be updated
     * @param {string} listId unique Id associated with the list
     * @param {ListObject} listObject
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    updateList(listId, listObject, token) {
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH + listId;
        const headers = this.__buildHeaders(token, listObject);

        return this.apiClient.put(uri, headers, JSON.stringify(listObject))
            .then(this.__validateApiResponse);
    }

    /**
     * Delete a custom list
     * @param {string} listId unique Id associated with the list
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    deleteList(listId, token) {
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH + listId;
        const headers = this.__buildHeaders(token);

        return this.apiClient.delete(uri, headers)
            .then(this.__validateApiResponse);
    }

    /**
     * Create an item in an active list or in a default list
     * @param {string} listId unique Id associated with the list
     * @param {ListItemObject} listItemObject
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    createListItem(listId, listItemObject, token) {
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH + listId + '/items';
        const headers = this.__buildHeaders(token, listItemObject);

        return this.apiClient.post(uri, headers, JSON.stringify(listItemObject))
            .then(this.__validateApiResponse);
    }

    /**
     * Retrieve single item within any list by listId and itemId
     * @param {string} listId unique Id associated with the list
     * @param {string} itemId unique Id associated with the item
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    getListItem(listId, itemId, token) {
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH + listId + '/items/' + itemId;
        const headers = this.__buildHeaders(token);

        return this.apiClient.get(uri, headers)
            .then(this.__validateApiResponse);
    }

    /**
     * Update an item value or item status
     * @param {string} listId unique Id associated with the list
     * @param {string} itemId unique Id associated with the item
     * @param {ListItemObject} listItemObject
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    updateListItem(listId, itemId, listItemObject, token) {
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH + listId + '/items/' + itemId;
        const headers = this.__buildHeaders(token, listItemObject);

        return this.apiClient.put(uri, headers, JSON.stringify(listItemObject))
            .then(this.__validateApiResponse);
    }

    /**
     * Delete an item in the specified list
     * @param {string} listId unique Id associated with the list
     * @param {string} itemId unique Id associated with the item
     * @param {string} token bearer token for list management permission
     * @returns {Promise<Object>}
     * @memberOf ListManagementService
     */
    deleteListItem(listId, itemId, token) {
        const uri = this.apiEndpoint + LIST_MANAGEMENT_PATH + listId + '/items/' + itemId;
        const headers = this.__buildHeaders(token);

        return this.apiClient.delete(uri, headers)
            .then(this.__validateApiResponse);
    }

    /**
     * Helper function to make the header given token and body
     * @param {string} token
     * @param {Object} body (optional)
     * @returns {Object} headers
     * @private
     * @memberOf ListManagementService
     */
    __buildHeaders(token, body) {
        let headers = {
            'Authorization' : `Bearer ${token}`
        };
        if (body) {
            headers['Content-type'] = 'application/json';
            headers['Content-length'] = JSON.stringify(body).length;
        }
        return headers;
    }

    /**
     * Performs validation logic on api responses and throws an error if a problem is found
     *
     * @param {ApiClientResponse} apiClientResponse response returned from the API call
     * @returns {Object | string}
     * @private
     * @memberOf ListManagementService
     */
    __validateApiResponse(apiClientResponse) {
        let isResponseCodeValid = apiClientResponse.statusCode >= 200 && apiClientResponse.statusCode < 300;
        let responseBody;
        try {
            responseBody = apiClientResponse.body && JSON.parse(apiClientResponse.body);
        } catch(err) {
            responseBody = apiClientResponse.body;
        }

        if (isResponseCodeValid) {
            return responseBody;
        }

        throw new ServiceError(apiClientResponse.statusCode, JSON.stringify(responseBody));
    }
}

module.exports = ListManagementService;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TemplateBuilder = __webpack_require__(9).TemplateBuilder;
const TextUtils = __webpack_require__(10).TextUtils;

/**
 * Used to create BodyTemplate1 objects
 * 
 * @class BodyTemplate1Builder
 * @extends {TemplateBuilder}
 */
class BodyTemplate1Builder extends TemplateBuilder {
    constructor() {
        super();
        this.template.type = 'BodyTemplate1';
    }

    /**
     * Sets the text content for the template
     * 
     * @param {TextField} primaryText 
     * @param {TextField} secondaryText 
     * @param {TextField} tertiaryText 
     * @returns BodyTemplate1Builder
     * @memberof BodyTemplate1Builder
     */
    setTextContent(primaryText, secondaryText, tertiaryText) {
        this.template.textContent = TextUtils.makeTextContent(primaryText, secondaryText, tertiaryText);
        return this;
    }
}

module.exports.BodyTemplate1Builder = BodyTemplate1Builder;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TemplateBuilder = __webpack_require__(9).TemplateBuilder;
const TextUtils = __webpack_require__(10).TextUtils;

/**
 * Used to create BodyTemplate2 objects
 * 
 * @class BodyTemplate2Builder
 * @extends {TemplateBuilder}
 */
class BodyTemplate2Builder extends TemplateBuilder {
    constructor() {
        super();
        this.template.type = 'BodyTemplate2';
    }

    /**
     * Sets the image for the template
     * 
     * @param {Image} image 
     * @returns 
     * @memberof BodyTemplate2Builder
     */
    setImage(image) {
        this.template.image = image;
        return this;
    }

    /**
     * Sets the text content for the template
     * 
     * @param {TextField} primaryText 
     * @param {TextField} secondaryText 
     * @param {TextField} tertiaryText 
     * @returns BodyTemplate2Builder
     * @memberof BodyTemplate2Builder
     */
    setTextContent(primaryText, secondaryText, tertiaryText) {
        this.template.textContent = TextUtils.makeTextContent(primaryText, secondaryText, tertiaryText);
        return this;
    }
}

module.exports.BodyTemplate2Builder = BodyTemplate2Builder;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TemplateBuilder = __webpack_require__(9).TemplateBuilder;
const TextUtils = __webpack_require__(10).TextUtils;

/**
 * Used to create BodyTemplate3 objects
 * 
 * @class BodyTemplate3Builder
 * @extends {TemplateBuilder}
 */
class BodyTemplate3Builder extends TemplateBuilder {
    constructor() {
        super();
        this.template.type = 'BodyTemplate3';
    }

    /**
     * Sets the image for the template
     * 
     * @param {any} image 
     * @returns 
     * @memberof BodyTemplate3Builder
     */
    setImage(image) {
        this.template.image = image;
        return this;
    }

    /**
     * Sets the text content for the template
     * 
     * @param {TextField} primaryText 
     * @param {TextField} secondaryText 
     * @param {TextField} tertiaryText 
     * @returns BodyTemplate3Builder
     * @memberof BodyTemplate3Builder
     */
    setTextContent(primaryText, secondaryText, tertiaryText) {
        this.template.textContent = TextUtils.makeTextContent(primaryText, secondaryText, tertiaryText);
        return this;
    }
}

module.exports.BodyTemplate3Builder = BodyTemplate3Builder;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TemplateBuilder = __webpack_require__(9).TemplateBuilder;
const TextUtils = __webpack_require__(10).TextUtils;

/**
 * Used to create BodyTemplate6 objects
 * 
 * @class BodyTemplate6Builder
 * @extends {TemplateBuilder}
 */
class BodyTemplate6Builder extends TemplateBuilder {
    constructor() {
        super();
        this.template.type = 'BodyTemplate6';
    }

    /**
     * Sets the image for the template
     * 
     * @param {any} image 
     * @returns 
     * @memberof BodyTemplate6Builder
     */
    setImage(image) {
        this.template.image = image;
        return this;
    }

    /**
     * Sets the text content for the template
     * 
     * @param {TextField} primaryText 
     * @param {TextField} secondaryText 
     * @param {TextField} tertiaryText 
     * @returns BodyTemplate6Builder
     * @memberof BodyTemplate6Builder
     */
    setTextContent(primaryText, secondaryText, tertiaryText) {
        this.template.textContent = TextUtils.makeTextContent(primaryText, secondaryText, tertiaryText);
        return this;
    }
}

module.exports.BodyTemplate6Builder = BodyTemplate6Builder;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TextUtils = __webpack_require__(10).TextUtils;

/**
 * Used to build a list of ListItems for ListTemplate
 * 
 * @class ListItemBuilder
 */
class ListItemBuilder {
    constructor() {
        this.items = [];
    }

    /**
     * Add an item to the list of template
     * 
     * @param {Image} image 
     * @param {string} token 
     * @param {TextField} primaryText 
     * @param {TextField} secondaryText 
     * @param {TextField} tertiaryText 
     * @memberof ListItemBuilder
     */
    addItem(image, token, primaryText, secondaryText, tertiaryText) {
        const item = {};
        item.image = image;
        item.token = token;
        item.textContent = TextUtils.makeTextContent(primaryText, secondaryText, tertiaryText);
        this.items.push(item);
        return this;
    }

    build() {
        return this.items;
    }
}

module.exports.ListItemBuilder = ListItemBuilder;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TemplateBuilder = __webpack_require__(9).TemplateBuilder;

/**
 * Used to create ListTemplate1 objects
 * 
 * @class ListTemplate1Builder
 * @extends {TemplateBuilder}
 */
class ListTemplate1Builder extends TemplateBuilder {
    constructor() {
        super();
        this.template.type = 'ListTemplate1';
    }

    /**
     * Set the items for the list
     * 
     * @param {any} listItems 
     * @returns 
     * @memberof ListTemplate1Builder
     */
    setListItems(listItems) {
        this.template.listItems = listItems;
        return this;
    }
}

module.exports.ListTemplate1Builder = ListTemplate1Builder;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TemplateBuilder = __webpack_require__(9).TemplateBuilder;

class ListTemplate2Builder extends TemplateBuilder {
    constructor() {
        super();
        this.template.type = 'ListTemplate2';
    }

    /**
     * Set the items for the list
     * 
     * @param {any} listItems 
     * @returns 
     * @memberof ListTemplate1Builder
     */
    setListItems(listItems) {
        this.template.listItems = listItems;
        return this;
    }
}

module.exports.ListTemplate2Builder = ListTemplate2Builder;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Utility functions for creating template image objects
 * 
 * @class ImageUtils
 */
class ImageUtils {

    /**
     * Creates an image object with a single source
     * 
     * These images may be in either JPEG or PNG formats, with the appropriate file extensions.
     * An image cannot be larger than 2 MB
     * You must host the images at HTTPS URLs that are publicly accessible.
     * widthPixels and heightPixels are optional - Do not include them unless they are exactly correct.
     * 
     * By default, for Echo Show, size takes the value X_SMALL. If the other size values are included, 
     * then the order of precedence for displaying images begins with X_LARGE and proceeds downward, 
     * which means that larger images will be downscaled for display on Echo Show if provided.
     * 
     * example : ImageUtils.makeImage('https://url/to/my/img.png', 300, 400, 'SMALL', 'image description')
     * 
     * @static
     * @param {string} url url of the image
     * @param {number} widthPixels (optional) width of the image in pixels
     * @param {number} heightPixels (optional) height of the image in pixels
     * @param {string} size size of the image (X_SMALL, SMALL, MEDIUM, LARGE, X_LARGE)
     * @param {string} description text used to describe the image in a screen reader
     * @returns 
     * @memberof ImageUtils
     */
    static makeImage(url, widthPixels, heightPixels, size, description) {
        var imgObj = { 
            url : url
        };
        
        if (widthPixels && heightPixels) {
            imgObj.widthPixels = widthPixels;
            imgObj.heightPixels = heightPixels;
        }
        
        if (size) {
            imgObj.size = size;
        }

        return ImageUtils.makeImages([imgObj], description);
    }

    /**
     * 
     * Creates an image object with a multiple sources, source images are provided as an array of image objects
     * 
     * These images may be in either JPEG or PNG formats, with the appropriate file extensions.
     * An image cannot be larger than 2 MB
     * You must host the images at HTTPS URLs that are publicly accessible.
     * widthPixels and heightPixels are optional - Do not include them unless they are exactly correct.
     * 
     * By default, for Echo Show, size takes the value X_SMALL. If the other size values are included, 
     * then the order of precedence for displaying images begins with X_LARGE and proceeds downward, 
     * which means that larger images will be downscaled for display on Echo Show if provided.
     * example :
     * let imgArr = [
     *  { 'https://url/to/my/small.png', 300, 400, 'SMALL' },
     *  { 'https://url/to/my/large.png', 900, 1200, 'LARGE' },
     * ]
     *  ImageUtils.makeImage(imgArr, 'image description')
     *
     * @static
     * @param {{url : string, widthPixels : number, heightPixels : number, size : string}[]} imgArr 
     * @param {string} description text used to describe the image in a screen reader
     * @returns 
     * @memberof ImageUtils
     */
    static makeImages(imgArr, description) {
        var image = {};
        if(description) {
            image.contentDescription = description;
        }
        image.sources = imgArr;
        return image;
    }
}

module.exports.ImageUtils = ImageUtils;

/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-05-31","endpointPrefix":"mgh","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Migration Hub","signatureVersion":"v4","targetPrefix":"AWSMigrationHub","uid":"AWSMigrationHub-2017-05-31"},"operations":{"AssociateCreatedArtifact":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName","CreatedArtifact"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"CreatedArtifact":{"shape":"S4"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"AssociateDiscoveredResource":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName","DiscoveredResource"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"DiscoveredResource":{"shape":"Sa"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"CreateProgressUpdateStream":{"input":{"type":"structure","required":["ProgressUpdateStreamName"],"members":{"ProgressUpdateStreamName":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeleteProgressUpdateStream":{"input":{"type":"structure","required":["ProgressUpdateStreamName"],"members":{"ProgressUpdateStreamName":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DescribeApplicationState":{"input":{"type":"structure","required":["ApplicationId"],"members":{"ApplicationId":{}}},"output":{"type":"structure","members":{"ApplicationStatus":{},"LastUpdatedTime":{"type":"timestamp"}}}},"DescribeMigrationTask":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{}}},"output":{"type":"structure","members":{"MigrationTask":{"type":"structure","members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"Task":{"shape":"Sq"},"UpdateDateTime":{"type":"timestamp"},"ResourceAttributeList":{"type":"list","member":{"shape":"Sv"}}}}}}},"DisassociateCreatedArtifact":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName","CreatedArtifactName"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"CreatedArtifactName":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DisassociateDiscoveredResource":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName","ConfigurationId"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"ConfigurationId":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"ImportMigrationTask":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"ListCreatedArtifacts":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"CreatedArtifactList":{"type":"list","member":{"shape":"S4"}}}}},"ListDiscoveredResources":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"DiscoveredResourceList":{"type":"list","member":{"shape":"Sa"}}}}},"ListMigrationTasks":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"ResourceName":{}}},"output":{"type":"structure","members":{"NextToken":{},"MigrationTaskSummaryList":{"type":"list","member":{"type":"structure","members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"Status":{},"ProgressPercent":{"type":"integer"},"StatusDetail":{},"UpdateDateTime":{"type":"timestamp"}}}}}}},"ListProgressUpdateStreams":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ProgressUpdateStreamSummaryList":{"type":"list","member":{"type":"structure","members":{"ProgressUpdateStreamName":{}}}},"NextToken":{}}}},"NotifyApplicationState":{"input":{"type":"structure","required":["ApplicationId","Status"],"members":{"ApplicationId":{},"Status":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"NotifyMigrationTaskState":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName","Task","UpdateDateTime","NextUpdateSeconds"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"Task":{"shape":"Sq"},"UpdateDateTime":{"type":"timestamp"},"NextUpdateSeconds":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"PutResourceAttributes":{"input":{"type":"structure","required":["ProgressUpdateStream","MigrationTaskName","ResourceAttributeList"],"members":{"ProgressUpdateStream":{},"MigrationTaskName":{},"ResourceAttributeList":{"type":"list","member":{"shape":"Sv"}},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{}}}},"shapes":{"S4":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{}}},"Sa":{"type":"structure","required":["ConfigurationId"],"members":{"ConfigurationId":{},"Description":{}}},"Sq":{"type":"structure","required":["Status"],"members":{"Status":{},"StatusDetail":{},"ProgressPercent":{"type":"integer"}}},"Sv":{"type":"structure","required":["Type","Value"],"members":{"Type":{},"Value":{}}}}}

/***/ }),
/* 123 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-12-08","endpointPrefix":"acm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"ACM","serviceFullName":"AWS Certificate Manager","signatureVersion":"v4","targetPrefix":"CertificateManager","uid":"acm-2015-12-08"},"operations":{"AddTagsToCertificate":{"input":{"type":"structure","required":["CertificateArn","Tags"],"members":{"CertificateArn":{},"Tags":{"shape":"S3"}}}},"DeleteCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}}},"DescribeCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{"type":"structure","members":{"CertificateArn":{},"DomainName":{},"SubjectAlternativeNames":{"shape":"Sc"},"DomainValidationOptions":{"shape":"Sd"},"Serial":{},"Subject":{},"Issuer":{},"CreatedAt":{"type":"timestamp"},"IssuedAt":{"type":"timestamp"},"ImportedAt":{"type":"timestamp"},"Status":{},"RevokedAt":{"type":"timestamp"},"RevocationReason":{},"NotBefore":{"type":"timestamp"},"NotAfter":{"type":"timestamp"},"KeyAlgorithm":{},"SignatureAlgorithm":{},"InUseBy":{"type":"list","member":{}},"FailureReason":{},"Type":{},"RenewalSummary":{"type":"structure","required":["RenewalStatus","DomainValidationOptions"],"members":{"RenewalStatus":{},"DomainValidationOptions":{"shape":"Sd"}}}}}}}},"GetCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{},"CertificateChain":{}}}},"ImportCertificate":{"input":{"type":"structure","required":["Certificate","PrivateKey"],"members":{"CertificateArn":{},"Certificate":{"type":"blob"},"PrivateKey":{"type":"blob","sensitive":true},"CertificateChain":{"type":"blob"}}},"output":{"type":"structure","members":{"CertificateArn":{}}}},"ListCertificates":{"input":{"type":"structure","members":{"CertificateStatuses":{"type":"list","member":{}},"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"CertificateSummaryList":{"type":"list","member":{"type":"structure","members":{"CertificateArn":{},"DomainName":{}}}}}}},"ListTagsForCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S3"}}}},"RemoveTagsFromCertificate":{"input":{"type":"structure","required":["CertificateArn","Tags"],"members":{"CertificateArn":{},"Tags":{"shape":"S3"}}}},"RequestCertificate":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"SubjectAlternativeNames":{"shape":"Sc"},"IdempotencyToken":{},"DomainValidationOptions":{"type":"list","member":{"type":"structure","required":["DomainName","ValidationDomain"],"members":{"DomainName":{},"ValidationDomain":{}}}}}},"output":{"type":"structure","members":{"CertificateArn":{}}}},"ResendValidationEmail":{"input":{"type":"structure","required":["CertificateArn","Domain","ValidationDomain"],"members":{"CertificateArn":{},"Domain":{},"ValidationDomain":{}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sc":{"type":"list","member":{}},"Sd":{"type":"list","member":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ValidationEmails":{"type":"list","member":{}},"ValidationDomain":{},"ValidationStatus":{}}}}}}

/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListCertificates":{"input_token":"NextToken","limit_key":"MaxItems","output_token":"NextToken","result_key":"CertificateSummaryList"}}}

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-07-09","endpointPrefix":"apigateway","protocol":"rest-json","serviceFullName":"Amazon API Gateway","signatureVersion":"v4","uid":"apigateway-2015-07-09"},"operations":{"CreateApiKey":{"http":{"requestUri":"/apikeys","responseCode":201},"input":{"type":"structure","members":{"name":{},"description":{},"enabled":{"type":"boolean"},"generateDistinctId":{"type":"boolean"},"value":{},"stageKeys":{"type":"list","member":{"type":"structure","members":{"restApiId":{},"stageName":{}}}},"customerId":{}}},"output":{"shape":"S6"}},"CreateAuthorizer":{"http":{"requestUri":"/restapis/{restapi_id}/authorizers","responseCode":201},"input":{"type":"structure","required":["restApiId","name","type"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"name":{},"type":{},"providerARNs":{"shape":"Sb"},"authType":{},"authorizerUri":{},"authorizerCredentials":{},"identitySource":{},"identityValidationExpression":{},"authorizerResultTtlInSeconds":{"type":"integer"}}},"output":{"shape":"Se"}},"CreateBasePathMapping":{"http":{"requestUri":"/domainnames/{domain_name}/basepathmappings","responseCode":201},"input":{"type":"structure","required":["domainName","restApiId"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{},"restApiId":{},"stage":{}}},"output":{"shape":"Sg"}},"CreateDeployment":{"http":{"requestUri":"/restapis/{restapi_id}/deployments","responseCode":201},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{},"stageDescription":{},"description":{},"cacheClusterEnabled":{"type":"boolean"},"cacheClusterSize":{},"variables":{"shape":"Sk"}}},"output":{"shape":"Sl"}},"CreateDocumentationPart":{"http":{"requestUri":"/restapis/{restapi_id}/documentation/parts","responseCode":201},"input":{"type":"structure","required":["restApiId","location","properties"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"location":{"shape":"Sq"},"properties":{}}},"output":{"shape":"St"}},"CreateDocumentationVersion":{"http":{"requestUri":"/restapis/{restapi_id}/documentation/versions","responseCode":201},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{},"stageName":{},"description":{}}},"output":{"shape":"Sv"}},"CreateDomainName":{"http":{"requestUri":"/domainnames","responseCode":201},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{},"certificateName":{},"certificateBody":{},"certificatePrivateKey":{},"certificateChain":{},"certificateArn":{},"regionalCertificateName":{},"regionalCertificateArn":{},"endpointConfiguration":{"shape":"Sx"}}},"output":{"shape":"S10"}},"CreateModel":{"http":{"requestUri":"/restapis/{restapi_id}/models","responseCode":201},"input":{"type":"structure","required":["restApiId","name","contentType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"name":{},"description":{},"schema":{},"contentType":{}}},"output":{"shape":"S12"}},"CreateRequestValidator":{"http":{"requestUri":"/restapis/{restapi_id}/requestvalidators","responseCode":201},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"name":{},"validateRequestBody":{"type":"boolean"},"validateRequestParameters":{"type":"boolean"}}},"output":{"shape":"S14"}},"CreateResource":{"http":{"requestUri":"/restapis/{restapi_id}/resources/{parent_id}","responseCode":201},"input":{"type":"structure","required":["restApiId","parentId","pathPart"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"parentId":{"location":"uri","locationName":"parent_id"},"pathPart":{}}},"output":{"shape":"S16"}},"CreateRestApi":{"http":{"requestUri":"/restapis","responseCode":201},"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"version":{},"cloneFrom":{},"binaryMediaTypes":{"shape":"S8"},"endpointConfiguration":{"shape":"Sx"}}},"output":{"shape":"S1j"}},"CreateStage":{"http":{"requestUri":"/restapis/{restapi_id}/stages","responseCode":201},"input":{"type":"structure","required":["restApiId","stageName","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{},"deploymentId":{},"description":{},"cacheClusterEnabled":{"type":"boolean"},"cacheClusterSize":{},"variables":{"shape":"Sk"},"documentationVersion":{}}},"output":{"shape":"S1l"}},"CreateUsagePlan":{"http":{"requestUri":"/usageplans","responseCode":201},"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"apiStages":{"shape":"S1t"},"throttle":{"shape":"S1v"},"quota":{"shape":"S1w"}}},"output":{"shape":"S1y"}},"CreateUsagePlanKey":{"http":{"requestUri":"/usageplans/{usageplanId}/keys","responseCode":201},"input":{"type":"structure","required":["usagePlanId","keyId","keyType"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{},"keyType":{}}},"output":{"shape":"S20"}},"DeleteApiKey":{"http":{"method":"DELETE","requestUri":"/apikeys/{api_Key}","responseCode":202},"input":{"type":"structure","required":["apiKey"],"members":{"apiKey":{"location":"uri","locationName":"api_Key"}}}},"DeleteAuthorizer":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"}}}},"DeleteBasePathMapping":{"http":{"method":"DELETE","requestUri":"/domainnames/{domain_name}/basepathmappings/{base_path}","responseCode":202},"input":{"type":"structure","required":["domainName","basePath"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{"location":"uri","locationName":"base_path"}}}},"DeleteClientCertificate":{"http":{"method":"DELETE","requestUri":"/clientcertificates/{clientcertificate_id}","responseCode":202},"input":{"type":"structure","required":["clientCertificateId"],"members":{"clientCertificateId":{"location":"uri","locationName":"clientcertificate_id"}}}},"DeleteDeployment":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/deployments/{deployment_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"uri","locationName":"deployment_id"}}}},"DeleteDocumentationPart":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/documentation/parts/{part_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","documentationPartId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationPartId":{"location":"uri","locationName":"part_id"}}}},"DeleteDocumentationVersion":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/documentation/versions/{doc_version}","responseCode":202},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{"location":"uri","locationName":"doc_version"}}}},"DeleteDomainName":{"http":{"method":"DELETE","requestUri":"/domainnames/{domain_name}","responseCode":202},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"}}}},"DeleteGatewayResponse":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}","responseCode":202},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"}}}},"DeleteIntegration":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}}},"DeleteIntegrationResponse":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}}},"DeleteMethod":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}}},"DeleteMethodResponse":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}","responseCode":204},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}}},"DeleteModel":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/models/{model_name}","responseCode":202},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"}}}},"DeleteRequestValidator":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","requestValidatorId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"requestValidatorId":{"location":"uri","locationName":"requestvalidator_id"}}}},"DeleteResource":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/resources/{resource_id}","responseCode":202},"input":{"type":"structure","required":["restApiId","resourceId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"}}}},"DeleteRestApi":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}","responseCode":202},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"}}}},"DeleteStage":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/stages/{stage_name}","responseCode":202},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}}},"DeleteUsagePlan":{"http":{"method":"DELETE","requestUri":"/usageplans/{usageplanId}","responseCode":202},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"}}}},"DeleteUsagePlanKey":{"http":{"method":"DELETE","requestUri":"/usageplans/{usageplanId}/keys/{keyId}","responseCode":202},"input":{"type":"structure","required":["usagePlanId","keyId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"uri","locationName":"keyId"}}}},"FlushStageAuthorizersCache":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers","responseCode":202},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}}},"FlushStageCache":{"http":{"method":"DELETE","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/cache/data","responseCode":202},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}}},"GenerateClientCertificate":{"http":{"requestUri":"/clientcertificates","responseCode":201},"input":{"type":"structure","members":{"description":{}}},"output":{"shape":"S2p"}},"GetAccount":{"http":{"method":"GET","requestUri":"/account"},"input":{"type":"structure","members":{}},"output":{"shape":"S2r"}},"GetApiKey":{"http":{"method":"GET","requestUri":"/apikeys/{api_Key}"},"input":{"type":"structure","required":["apiKey"],"members":{"apiKey":{"location":"uri","locationName":"api_Key"},"includeValue":{"location":"querystring","locationName":"includeValue","type":"boolean"}}},"output":{"shape":"S6"}},"GetApiKeys":{"http":{"method":"GET","requestUri":"/apikeys"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"},"nameQuery":{"location":"querystring","locationName":"name"},"customerId":{"location":"querystring","locationName":"customerId"},"includeValues":{"location":"querystring","locationName":"includeValues","type":"boolean"}}},"output":{"type":"structure","members":{"warnings":{"shape":"S8"},"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S6"}}}}},"GetAuthorizer":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}"},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"}}},"output":{"shape":"Se"}},"GetAuthorizers":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/authorizers"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Se"}}}}},"GetBasePathMapping":{"http":{"method":"GET","requestUri":"/domainnames/{domain_name}/basepathmappings/{base_path}"},"input":{"type":"structure","required":["domainName","basePath"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{"location":"uri","locationName":"base_path"}}},"output":{"shape":"Sg"}},"GetBasePathMappings":{"http":{"method":"GET","requestUri":"/domainnames/{domain_name}/basepathmappings"},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sg"}}}}},"GetClientCertificate":{"http":{"method":"GET","requestUri":"/clientcertificates/{clientcertificate_id}"},"input":{"type":"structure","required":["clientCertificateId"],"members":{"clientCertificateId":{"location":"uri","locationName":"clientcertificate_id"}}},"output":{"shape":"S2p"}},"GetClientCertificates":{"http":{"method":"GET","requestUri":"/clientcertificates"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S2p"}}}}},"GetDeployment":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/deployments/{deployment_id}"},"input":{"type":"structure","required":["restApiId","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"uri","locationName":"deployment_id"},"embed":{"shape":"S8","location":"querystring","locationName":"embed"}}},"output":{"shape":"Sl"}},"GetDeployments":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/deployments"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sl"}}}}},"GetDocumentationPart":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/parts/{part_id}"},"input":{"type":"structure","required":["restApiId","documentationPartId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationPartId":{"location":"uri","locationName":"part_id"}}},"output":{"shape":"St"}},"GetDocumentationParts":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/parts"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"type":{"location":"querystring","locationName":"type"},"nameQuery":{"location":"querystring","locationName":"name"},"path":{"location":"querystring","locationName":"path"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"St"}}}}},"GetDocumentationVersion":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/versions/{doc_version}"},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{"location":"uri","locationName":"doc_version"}}},"output":{"shape":"Sv"}},"GetDocumentationVersions":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/documentation/versions"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"Sv"}}}}},"GetDomainName":{"http":{"method":"GET","requestUri":"/domainnames/{domain_name}"},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"}}},"output":{"shape":"S10"}},"GetDomainNames":{"http":{"method":"GET","requestUri":"/domainnames"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S10"}}}}},"GetExport":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}","responseCode":200},"input":{"type":"structure","required":["restApiId","stageName","exportType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"},"exportType":{"location":"uri","locationName":"export_type"},"parameters":{"shape":"Sk","location":"querystring"},"accepts":{"location":"header","locationName":"Accept"}}},"output":{"type":"structure","members":{"contentType":{"location":"header","locationName":"Content-Type"},"contentDisposition":{"location":"header","locationName":"Content-Disposition"},"body":{"type":"blob"}},"payload":"body"}},"GetGatewayResponse":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}"},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"}}},"output":{"shape":"S3s"}},"GetGatewayResponses":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/gatewayresponses"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S3s"}}}}},"GetIntegration":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}},"output":{"shape":"S1d"}},"GetIntegrationResponse":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}},"output":{"shape":"S1h"}},"GetMethod":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"}}},"output":{"shape":"S18"}},"GetMethodResponse":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"}}},"output":{"shape":"S1b"}},"GetModel":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/models/{model_name}"},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"},"flatten":{"location":"querystring","locationName":"flatten","type":"boolean"}}},"output":{"shape":"S12"}},"GetModelTemplate":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/models/{model_name}/default_template"},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"}}},"output":{"type":"structure","members":{"value":{}}}},"GetModels":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/models"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S12"}}}}},"GetRequestValidator":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"},"input":{"type":"structure","required":["restApiId","requestValidatorId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"requestValidatorId":{"location":"uri","locationName":"requestvalidator_id"}}},"output":{"shape":"S14"}},"GetRequestValidators":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/requestvalidators"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S14"}}}}},"GetResource":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources/{resource_id}"},"input":{"type":"structure","required":["restApiId","resourceId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"embed":{"shape":"S8","location":"querystring","locationName":"embed"}}},"output":{"shape":"S16"}},"GetResources":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/resources"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"},"embed":{"shape":"S8","location":"querystring","locationName":"embed"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S16"}}}}},"GetRestApi":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"}}},"output":{"shape":"S1j"}},"GetRestApis":{"http":{"method":"GET","requestUri":"/restapis"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S1j"}}}}},"GetSdk":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}","responseCode":200},"input":{"type":"structure","required":["restApiId","stageName","sdkType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"},"sdkType":{"location":"uri","locationName":"sdk_type"},"parameters":{"shape":"Sk","location":"querystring"}}},"output":{"type":"structure","members":{"contentType":{"location":"header","locationName":"Content-Type"},"contentDisposition":{"location":"header","locationName":"Content-Disposition"},"body":{"type":"blob"}},"payload":"body"}},"GetSdkType":{"http":{"method":"GET","requestUri":"/sdktypes/{sdktype_id}"},"input":{"type":"structure","required":["id"],"members":{"id":{"location":"uri","locationName":"sdktype_id"}}},"output":{"shape":"S4l"}},"GetSdkTypes":{"http":{"method":"GET","requestUri":"/sdktypes"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S4l"}}}}},"GetStage":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages/{stage_name}"},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"}}},"output":{"shape":"S1l"}},"GetStages":{"http":{"method":"GET","requestUri":"/restapis/{restapi_id}/stages"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"querystring","locationName":"deploymentId"}}},"output":{"type":"structure","members":{"item":{"type":"list","member":{"shape":"S1l"}}}}},"GetUsage":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}/usage"},"input":{"type":"structure","required":["usagePlanId","startDate","endDate"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"querystring","locationName":"keyId"},"startDate":{"location":"querystring","locationName":"startDate"},"endDate":{"location":"querystring","locationName":"endDate"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"shape":"S4w"}},"GetUsagePlan":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}"},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"}}},"output":{"shape":"S1y"}},"GetUsagePlanKey":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}/keys/{keyId}","responseCode":200},"input":{"type":"structure","required":["usagePlanId","keyId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"uri","locationName":"keyId"}}},"output":{"shape":"S20"}},"GetUsagePlanKeys":{"http":{"method":"GET","requestUri":"/usageplans/{usageplanId}/keys"},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"position":{"location":"querystring","locationName":"position"},"limit":{"location":"querystring","locationName":"limit","type":"integer"},"nameQuery":{"location":"querystring","locationName":"name"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S20"}}}}},"GetUsagePlans":{"http":{"method":"GET","requestUri":"/usageplans"},"input":{"type":"structure","members":{"position":{"location":"querystring","locationName":"position"},"keyId":{"location":"querystring","locationName":"keyId"},"limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"position":{},"items":{"locationName":"item","type":"list","member":{"shape":"S1y"}}}}},"ImportApiKeys":{"http":{"requestUri":"/apikeys?mode=import","responseCode":201},"input":{"type":"structure","required":["body","format"],"members":{"body":{"type":"blob"},"format":{"location":"querystring","locationName":"format"},"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"}},"payload":"body"},"output":{"type":"structure","members":{"ids":{"shape":"S8"},"warnings":{"shape":"S8"}}}},"ImportDocumentationParts":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/documentation/parts"},"input":{"type":"structure","required":["restApiId","body"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"mode":{"location":"querystring","locationName":"mode"},"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"},"body":{"type":"blob"}},"payload":"body"},"output":{"type":"structure","members":{"ids":{"shape":"S8"},"warnings":{"shape":"S8"}}}},"ImportRestApi":{"http":{"requestUri":"/restapis?mode=import","responseCode":201},"input":{"type":"structure","required":["body"],"members":{"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"},"parameters":{"shape":"Sk","location":"querystring"},"body":{"type":"blob"}},"payload":"body"},"output":{"shape":"S1j"}},"PutGatewayResponse":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}","responseCode":201},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"},"statusCode":{},"responseParameters":{"shape":"Sk"},"responseTemplates":{"shape":"Sk"}}},"output":{"shape":"S3s"}},"PutIntegration":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","type"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"type":{},"integrationHttpMethod":{"locationName":"httpMethod"},"uri":{},"credentials":{},"requestParameters":{"shape":"Sk"},"requestTemplates":{"shape":"Sk"},"passthroughBehavior":{},"cacheNamespace":{},"cacheKeyParameters":{"shape":"S8"},"contentHandling":{}}},"output":{"shape":"S1d"}},"PutIntegrationResponse":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"selectionPattern":{},"responseParameters":{"shape":"Sk"},"responseTemplates":{"shape":"Sk"},"contentHandling":{}}},"output":{"shape":"S1h"}},"PutMethod":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","authorizationType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"authorizationType":{},"authorizerId":{},"apiKeyRequired":{"type":"boolean"},"operationName":{},"requestParameters":{"shape":"S19"},"requestModels":{"shape":"Sk"},"requestValidatorId":{}}},"output":{"shape":"S18"}},"PutMethodResponse":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"responseParameters":{"shape":"S19"},"responseModels":{"shape":"Sk"}}},"output":{"shape":"S1b"}},"PutRestApi":{"http":{"method":"PUT","requestUri":"/restapis/{restapi_id}"},"input":{"type":"structure","required":["restApiId","body"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"mode":{"location":"querystring","locationName":"mode"},"failOnWarnings":{"location":"querystring","locationName":"failonwarnings","type":"boolean"},"parameters":{"shape":"Sk","location":"querystring"},"body":{"type":"blob"}},"payload":"body"},"output":{"shape":"S1j"}},"TestInvokeAuthorizer":{"http":{"requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}"},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"},"headers":{"shape":"S5n"},"pathWithQueryString":{},"body":{},"stageVariables":{"shape":"Sk"},"additionalContext":{"shape":"Sk"}}},"output":{"type":"structure","members":{"clientStatus":{"type":"integer"},"log":{},"latency":{"type":"long"},"principalId":{},"policy":{},"authorization":{"type":"map","key":{},"value":{"shape":"S8"}},"claims":{"shape":"Sk"}}}},"TestInvokeMethod":{"http":{"requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"pathWithQueryString":{},"body":{},"headers":{"shape":"S5n"},"clientCertificateId":{},"stageVariables":{"shape":"Sk"}}},"output":{"type":"structure","members":{"status":{"type":"integer"},"body":{},"headers":{"shape":"S5n"},"log":{},"latency":{"type":"long"}}}},"UpdateAccount":{"http":{"method":"PATCH","requestUri":"/account"},"input":{"type":"structure","members":{"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S2r"}},"UpdateApiKey":{"http":{"method":"PATCH","requestUri":"/apikeys/{api_Key}"},"input":{"type":"structure","required":["apiKey"],"members":{"apiKey":{"location":"uri","locationName":"api_Key"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S6"}},"UpdateAuthorizer":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/authorizers/{authorizer_id}"},"input":{"type":"structure","required":["restApiId","authorizerId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"authorizerId":{"location":"uri","locationName":"authorizer_id"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"Se"}},"UpdateBasePathMapping":{"http":{"method":"PATCH","requestUri":"/domainnames/{domain_name}/basepathmappings/{base_path}"},"input":{"type":"structure","required":["domainName","basePath"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"basePath":{"location":"uri","locationName":"base_path"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"Sg"}},"UpdateClientCertificate":{"http":{"method":"PATCH","requestUri":"/clientcertificates/{clientcertificate_id}"},"input":{"type":"structure","required":["clientCertificateId"],"members":{"clientCertificateId":{"location":"uri","locationName":"clientcertificate_id"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S2p"}},"UpdateDeployment":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/deployments/{deployment_id}"},"input":{"type":"structure","required":["restApiId","deploymentId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"deploymentId":{"location":"uri","locationName":"deployment_id"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"Sl"}},"UpdateDocumentationPart":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/documentation/parts/{part_id}"},"input":{"type":"structure","required":["restApiId","documentationPartId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationPartId":{"location":"uri","locationName":"part_id"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"St"}},"UpdateDocumentationVersion":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/documentation/versions/{doc_version}"},"input":{"type":"structure","required":["restApiId","documentationVersion"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"documentationVersion":{"location":"uri","locationName":"doc_version"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"Sv"}},"UpdateDomainName":{"http":{"method":"PATCH","requestUri":"/domainnames/{domain_name}"},"input":{"type":"structure","required":["domainName"],"members":{"domainName":{"location":"uri","locationName":"domain_name"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S10"}},"UpdateGatewayResponse":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/gatewayresponses/{response_type}"},"input":{"type":"structure","required":["restApiId","responseType"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"responseType":{"location":"uri","locationName":"response_type"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S3s"}},"UpdateIntegration":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S1d"}},"UpdateIntegrationResponse":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S1h"}},"UpdateMethod":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S18"}},"UpdateMethodResponse":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}","responseCode":201},"input":{"type":"structure","required":["restApiId","resourceId","httpMethod","statusCode"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"httpMethod":{"location":"uri","locationName":"http_method"},"statusCode":{"location":"uri","locationName":"status_code"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S1b"}},"UpdateModel":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/models/{model_name}"},"input":{"type":"structure","required":["restApiId","modelName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"modelName":{"location":"uri","locationName":"model_name"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S12"}},"UpdateRequestValidator":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"},"input":{"type":"structure","required":["restApiId","requestValidatorId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"requestValidatorId":{"location":"uri","locationName":"requestvalidator_id"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S14"}},"UpdateResource":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/resources/{resource_id}"},"input":{"type":"structure","required":["restApiId","resourceId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"resourceId":{"location":"uri","locationName":"resource_id"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S16"}},"UpdateRestApi":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}"},"input":{"type":"structure","required":["restApiId"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S1j"}},"UpdateStage":{"http":{"method":"PATCH","requestUri":"/restapis/{restapi_id}/stages/{stage_name}"},"input":{"type":"structure","required":["restApiId","stageName"],"members":{"restApiId":{"location":"uri","locationName":"restapi_id"},"stageName":{"location":"uri","locationName":"stage_name"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S1l"}},"UpdateUsage":{"http":{"method":"PATCH","requestUri":"/usageplans/{usageplanId}/keys/{keyId}/usage"},"input":{"type":"structure","required":["usagePlanId","keyId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"keyId":{"location":"uri","locationName":"keyId"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S4w"}},"UpdateUsagePlan":{"http":{"method":"PATCH","requestUri":"/usageplans/{usageplanId}"},"input":{"type":"structure","required":["usagePlanId"],"members":{"usagePlanId":{"location":"uri","locationName":"usageplanId"},"patchOperations":{"shape":"S5t"}}},"output":{"shape":"S1y"}}},"shapes":{"S6":{"type":"structure","members":{"id":{},"value":{},"name":{},"customerId":{},"description":{},"enabled":{"type":"boolean"},"createdDate":{"type":"timestamp"},"lastUpdatedDate":{"type":"timestamp"},"stageKeys":{"shape":"S8"}}},"S8":{"type":"list","member":{}},"Sb":{"type":"list","member":{}},"Se":{"type":"structure","members":{"id":{},"name":{},"type":{},"providerARNs":{"shape":"Sb"},"authType":{},"authorizerUri":{},"authorizerCredentials":{},"identitySource":{},"identityValidationExpression":{},"authorizerResultTtlInSeconds":{"type":"integer"}}},"Sg":{"type":"structure","members":{"basePath":{},"restApiId":{},"stage":{}}},"Sk":{"type":"map","key":{},"value":{}},"Sl":{"type":"structure","members":{"id":{},"description":{},"createdDate":{"type":"timestamp"},"apiSummary":{"type":"map","key":{},"value":{"type":"map","key":{},"value":{"type":"structure","members":{"authorizationType":{},"apiKeyRequired":{"type":"boolean"}}}}}}},"Sq":{"type":"structure","required":["type"],"members":{"type":{},"path":{},"method":{},"statusCode":{},"name":{}}},"St":{"type":"structure","members":{"id":{},"location":{"shape":"Sq"},"properties":{}}},"Sv":{"type":"structure","members":{"version":{},"createdDate":{"type":"timestamp"},"description":{}}},"Sx":{"type":"structure","members":{"types":{"type":"list","member":{}}}},"S10":{"type":"structure","members":{"domainName":{},"certificateName":{},"certificateArn":{},"certificateUploadDate":{"type":"timestamp"},"regionalDomainName":{},"regionalCertificateName":{},"regionalCertificateArn":{},"distributionDomainName":{},"endpointConfiguration":{"shape":"Sx"}}},"S12":{"type":"structure","members":{"id":{},"name":{},"description":{},"schema":{},"contentType":{}}},"S14":{"type":"structure","members":{"id":{},"name":{},"validateRequestBody":{"type":"boolean"},"validateRequestParameters":{"type":"boolean"}}},"S16":{"type":"structure","members":{"id":{},"parentId":{},"pathPart":{},"path":{},"resourceMethods":{"type":"map","key":{},"value":{"shape":"S18"}}}},"S18":{"type":"structure","members":{"httpMethod":{},"authorizationType":{},"authorizerId":{},"apiKeyRequired":{"type":"boolean"},"requestValidatorId":{},"operationName":{},"requestParameters":{"shape":"S19"},"requestModels":{"shape":"Sk"},"methodResponses":{"type":"map","key":{},"value":{"shape":"S1b"}},"methodIntegration":{"shape":"S1d"}}},"S19":{"type":"map","key":{},"value":{"type":"boolean"}},"S1b":{"type":"structure","members":{"statusCode":{},"responseParameters":{"shape":"S19"},"responseModels":{"shape":"Sk"}}},"S1d":{"type":"structure","members":{"type":{},"httpMethod":{},"uri":{},"credentials":{},"requestParameters":{"shape":"Sk"},"requestTemplates":{"shape":"Sk"},"passthroughBehavior":{},"contentHandling":{},"cacheNamespace":{},"cacheKeyParameters":{"shape":"S8"},"integrationResponses":{"type":"map","key":{},"value":{"shape":"S1h"}}}},"S1h":{"type":"structure","members":{"statusCode":{},"selectionPattern":{},"responseParameters":{"shape":"Sk"},"responseTemplates":{"shape":"Sk"},"contentHandling":{}}},"S1j":{"type":"structure","members":{"id":{},"name":{},"description":{},"createdDate":{"type":"timestamp"},"version":{},"warnings":{"shape":"S8"},"binaryMediaTypes":{"shape":"S8"},"endpointConfiguration":{"shape":"Sx"}}},"S1l":{"type":"structure","members":{"deploymentId":{},"clientCertificateId":{},"stageName":{},"description":{},"cacheClusterEnabled":{"type":"boolean"},"cacheClusterSize":{},"cacheClusterStatus":{},"methodSettings":{"type":"map","key":{},"value":{"type":"structure","members":{"metricsEnabled":{"type":"boolean"},"loggingLevel":{},"dataTraceEnabled":{"type":"boolean"},"throttlingBurstLimit":{"type":"integer"},"throttlingRateLimit":{"type":"double"},"cachingEnabled":{"type":"boolean"},"cacheTtlInSeconds":{"type":"integer"},"cacheDataEncrypted":{"type":"boolean"},"requireAuthorizationForCacheControl":{"type":"boolean"},"unauthorizedCacheControlHeaderStrategy":{}}}},"variables":{"shape":"Sk"},"documentationVersion":{},"createdDate":{"type":"timestamp"},"lastUpdatedDate":{"type":"timestamp"}}},"S1t":{"type":"list","member":{"type":"structure","members":{"apiId":{},"stage":{}}}},"S1v":{"type":"structure","members":{"burstLimit":{"type":"integer"},"rateLimit":{"type":"double"}}},"S1w":{"type":"structure","members":{"limit":{"type":"integer"},"offset":{"type":"integer"},"period":{}}},"S1y":{"type":"structure","members":{"id":{},"name":{},"description":{},"apiStages":{"shape":"S1t"},"throttle":{"shape":"S1v"},"quota":{"shape":"S1w"},"productCode":{}}},"S20":{"type":"structure","members":{"id":{},"type":{},"value":{},"name":{}}},"S2p":{"type":"structure","members":{"clientCertificateId":{},"description":{},"pemEncodedCertificate":{},"createdDate":{"type":"timestamp"},"expirationDate":{"type":"timestamp"}}},"S2r":{"type":"structure","members":{"cloudwatchRoleArn":{},"throttleSettings":{"shape":"S1v"},"features":{"shape":"S8"},"apiKeyVersion":{}}},"S3s":{"type":"structure","members":{"responseType":{},"statusCode":{},"responseParameters":{"shape":"Sk"},"responseTemplates":{"shape":"Sk"},"defaultResponse":{"type":"boolean"}}},"S4l":{"type":"structure","members":{"id":{},"friendlyName":{},"description":{},"configurationProperties":{"type":"list","member":{"type":"structure","members":{"name":{},"friendlyName":{},"description":{},"required":{"type":"boolean"},"defaultValue":{}}}}}},"S4w":{"type":"structure","members":{"usagePlanId":{},"startDate":{},"endDate":{},"position":{},"items":{"locationName":"values","type":"map","key":{},"value":{"type":"list","member":{"type":"list","member":{"type":"long"}}}}}},"S5n":{"type":"map","key":{},"value":{}},"S5t":{"type":"list","member":{"type":"structure","members":{"op":{},"path":{},"value":{},"from":{}}}}}}

/***/ }),
/* 127 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetApiKeys":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetBasePathMappings":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetClientCertificates":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetDeployments":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetDomainNames":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetModels":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetResources":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetRestApis":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetUsage":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetUsagePlanKeys":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"},"GetUsagePlans":{"input_token":"position","limit_key":"limit","output_token":"position","result_key":"items"}}}

/***/ }),
/* 128 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-02-06","endpointPrefix":"autoscaling","jsonVersion":"1.1","protocol":"json","serviceFullName":"Application Auto Scaling","signatureVersion":"v4","signingName":"application-autoscaling","targetPrefix":"AnyScaleFrontendService","uid":"application-autoscaling-2016-02-06"},"operations":{"DeleteScalingPolicy":{"input":{"type":"structure","required":["PolicyName","ServiceNamespace","ResourceId","ScalableDimension"],"members":{"PolicyName":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{}}},"output":{"type":"structure","members":{}}},"DeleteScheduledAction":{"input":{"type":"structure","required":["ServiceNamespace","ScheduledActionName","ResourceId"],"members":{"ServiceNamespace":{},"ScheduledActionName":{},"ResourceId":{},"ScalableDimension":{}}},"output":{"type":"structure","members":{}}},"DeregisterScalableTarget":{"input":{"type":"structure","required":["ServiceNamespace","ResourceId","ScalableDimension"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{}}},"output":{"type":"structure","members":{}}},"DescribeScalableTargets":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"ServiceNamespace":{},"ResourceIds":{"shape":"Sb"},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScalableTargets":{"type":"list","member":{"type":"structure","required":["ServiceNamespace","ResourceId","ScalableDimension","MinCapacity","MaxCapacity","RoleARN","CreationTime"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"},"RoleARN":{},"CreationTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeScalingActivities":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScalingActivities":{"type":"list","member":{"type":"structure","required":["ActivityId","ServiceNamespace","ResourceId","ScalableDimension","Description","Cause","StartTime","StatusCode"],"members":{"ActivityId":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"Description":{},"Cause":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"StatusCode":{},"StatusMessage":{},"Details":{}}}},"NextToken":{}}}},"DescribeScalingPolicies":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"PolicyNames":{"shape":"Sb"},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScalingPolicies":{"type":"list","member":{"type":"structure","required":["PolicyARN","PolicyName","ServiceNamespace","ResourceId","ScalableDimension","PolicyType","CreationTime"],"members":{"PolicyARN":{},"PolicyName":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"PolicyType":{},"StepScalingPolicyConfiguration":{"shape":"Sv"},"TargetTrackingScalingPolicyConfiguration":{"shape":"S14"},"Alarms":{"shape":"S1i"},"CreationTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeScheduledActions":{"input":{"type":"structure","required":["ServiceNamespace"],"members":{"ScheduledActionNames":{"shape":"Sb"},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScheduledActions":{"type":"list","member":{"type":"structure","required":["ScheduledActionName","ScheduledActionARN","ServiceNamespace","Schedule","ResourceId","CreationTime"],"members":{"ScheduledActionName":{},"ScheduledActionARN":{},"ServiceNamespace":{},"Schedule":{},"ResourceId":{},"ScalableDimension":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"ScalableTargetAction":{"shape":"S1p"},"CreationTime":{"type":"timestamp"}}}},"NextToken":{}}}},"PutScalingPolicy":{"input":{"type":"structure","required":["PolicyName","ServiceNamespace","ResourceId","ScalableDimension"],"members":{"PolicyName":{},"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"PolicyType":{},"StepScalingPolicyConfiguration":{"shape":"Sv"},"TargetTrackingScalingPolicyConfiguration":{"shape":"S14"}}},"output":{"type":"structure","required":["PolicyARN"],"members":{"PolicyARN":{},"Alarms":{"shape":"S1i"}}}},"PutScheduledAction":{"input":{"type":"structure","required":["ServiceNamespace","ScheduledActionName","ResourceId"],"members":{"ServiceNamespace":{},"Schedule":{},"ScheduledActionName":{},"ResourceId":{},"ScalableDimension":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"ScalableTargetAction":{"shape":"S1p"}}},"output":{"type":"structure","members":{}}},"RegisterScalableTarget":{"input":{"type":"structure","required":["ServiceNamespace","ResourceId","ScalableDimension"],"members":{"ServiceNamespace":{},"ResourceId":{},"ScalableDimension":{},"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"},"RoleARN":{}}},"output":{"type":"structure","members":{}}}},"shapes":{"Sb":{"type":"list","member":{}},"Sv":{"type":"structure","members":{"AdjustmentType":{},"StepAdjustments":{"type":"list","member":{"type":"structure","required":["ScalingAdjustment"],"members":{"MetricIntervalLowerBound":{"type":"double"},"MetricIntervalUpperBound":{"type":"double"},"ScalingAdjustment":{"type":"integer"}}}},"MinAdjustmentMagnitude":{"type":"integer"},"Cooldown":{"type":"integer"},"MetricAggregationType":{}}},"S14":{"type":"structure","required":["TargetValue"],"members":{"TargetValue":{"type":"double"},"PredefinedMetricSpecification":{"type":"structure","required":["PredefinedMetricType"],"members":{"PredefinedMetricType":{},"ResourceLabel":{}}},"CustomizedMetricSpecification":{"type":"structure","required":["MetricName","Namespace","Statistic"],"members":{"MetricName":{},"Namespace":{},"Dimensions":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"Statistic":{},"Unit":{}}},"ScaleOutCooldown":{"type":"integer"},"ScaleInCooldown":{"type":"integer"},"DisableScaleIn":{"type":"boolean"}}},"S1i":{"type":"list","member":{"type":"structure","required":["AlarmName","AlarmARN"],"members":{"AlarmName":{},"AlarmARN":{}}}},"S1p":{"type":"structure","members":{"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"}}}}}

/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeScalableTargets":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScalableTargets"},"DescribeScalingActivities":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScalingActivities"},"DescribeScalingPolicies":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ScalingPolicies"}}}

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-12-01","endpointPrefix":"appstream2","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon AppStream","signatureVersion":"v4","signingName":"appstream","targetPrefix":"PhotonAdminProxyService","uid":"appstream-2016-12-01"},"operations":{"AssociateFleet":{"input":{"type":"structure","required":["FleetName","StackName"],"members":{"FleetName":{},"StackName":{}}},"output":{"type":"structure","members":{}}},"CreateDirectoryConfig":{"input":{"type":"structure","required":["DirectoryName","OrganizationalUnitDistinguishedNames","ServiceAccountCredentials"],"members":{"DirectoryName":{},"OrganizationalUnitDistinguishedNames":{"shape":"S6"},"ServiceAccountCredentials":{"shape":"S8"}}},"output":{"type":"structure","members":{"DirectoryConfig":{"shape":"Sc"}}}},"CreateFleet":{"input":{"type":"structure","required":["Name","ImageName","InstanceType","ComputeCapacity"],"members":{"Name":{},"ImageName":{},"InstanceType":{},"FleetType":{},"ComputeCapacity":{"shape":"Sh"},"VpcConfig":{"shape":"Sj"},"MaxUserDurationInSeconds":{"type":"integer"},"DisconnectTimeoutInSeconds":{"type":"integer"},"Description":{},"DisplayName":{},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"Sp"}}},"output":{"type":"structure","members":{"Fleet":{"shape":"Sr"}}}},"CreateImageBuilder":{"input":{"type":"structure","required":["Name","ImageName","InstanceType"],"members":{"Name":{},"ImageName":{},"InstanceType":{},"Description":{},"DisplayName":{},"VpcConfig":{"shape":"Sj"},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"Sp"}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S10"}}}},"CreateImageBuilderStreamingURL":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Validity":{"type":"long"}}},"output":{"type":"structure","members":{"StreamingURL":{},"Expires":{"type":"timestamp"}}}},"CreateStack":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"DisplayName":{},"StorageConnectors":{"shape":"S1b"}}},"output":{"type":"structure","members":{"Stack":{"shape":"S1g"}}}},"CreateStreamingURL":{"input":{"type":"structure","required":["StackName","FleetName","UserId"],"members":{"StackName":{},"FleetName":{},"UserId":{},"ApplicationId":{},"Validity":{"type":"long"},"SessionContext":{}}},"output":{"type":"structure","members":{"StreamingURL":{},"Expires":{"type":"timestamp"}}}},"DeleteDirectoryConfig":{"input":{"type":"structure","required":["DirectoryName"],"members":{"DirectoryName":{}}},"output":{"type":"structure","members":{}}},"DeleteFleet":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteImage":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Image":{"shape":"S1t"}}}},"DeleteImageBuilder":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S10"}}}},"DeleteStack":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DescribeDirectoryConfigs":{"input":{"type":"structure","members":{"DirectoryNames":{"type":"list","member":{}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"DirectoryConfigs":{"type":"list","member":{"shape":"Sc"}},"NextToken":{}}}},"DescribeFleets":{"input":{"type":"structure","members":{"Names":{"shape":"S2b"},"NextToken":{}}},"output":{"type":"structure","members":{"Fleets":{"type":"list","member":{"shape":"Sr"}},"NextToken":{}}}},"DescribeImageBuilders":{"input":{"type":"structure","members":{"Names":{"shape":"S2b"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ImageBuilders":{"type":"list","member":{"shape":"S10"}},"NextToken":{}}}},"DescribeImages":{"input":{"type":"structure","members":{"Names":{"shape":"S2b"}}},"output":{"type":"structure","members":{"Images":{"type":"list","member":{"shape":"S1t"}}}}},"DescribeSessions":{"input":{"type":"structure","required":["StackName","FleetName"],"members":{"StackName":{},"FleetName":{},"UserId":{},"NextToken":{},"Limit":{"type":"integer"},"AuthenticationType":{}}},"output":{"type":"structure","members":{"Sessions":{"type":"list","member":{"type":"structure","required":["Id","UserId","StackName","FleetName","State"],"members":{"Id":{},"UserId":{},"StackName":{},"FleetName":{},"State":{},"AuthenticationType":{}}}},"NextToken":{}}}},"DescribeStacks":{"input":{"type":"structure","members":{"Names":{"shape":"S2b"},"NextToken":{}}},"output":{"type":"structure","members":{"Stacks":{"type":"list","member":{"shape":"S1g"}},"NextToken":{}}}},"DisassociateFleet":{"input":{"type":"structure","required":["FleetName","StackName"],"members":{"FleetName":{},"StackName":{}}},"output":{"type":"structure","members":{}}},"ExpireSession":{"input":{"type":"structure","required":["SessionId"],"members":{"SessionId":{}}},"output":{"type":"structure","members":{}}},"ListAssociatedFleets":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"NextToken":{}}},"output":{"type":"structure","members":{"Names":{"shape":"S2b"},"NextToken":{}}}},"ListAssociatedStacks":{"input":{"type":"structure","required":["FleetName"],"members":{"FleetName":{},"NextToken":{}}},"output":{"type":"structure","members":{"Names":{"shape":"S2b"},"NextToken":{}}}},"StartFleet":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"StartImageBuilder":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S10"}}}},"StopFleet":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"StopImageBuilder":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"ImageBuilder":{"shape":"S10"}}}},"UpdateDirectoryConfig":{"input":{"type":"structure","required":["DirectoryName"],"members":{"DirectoryName":{},"OrganizationalUnitDistinguishedNames":{"shape":"S6"},"ServiceAccountCredentials":{"shape":"S8"}}},"output":{"type":"structure","members":{"DirectoryConfig":{"shape":"Sc"}}}},"UpdateFleet":{"input":{"type":"structure","required":["Name"],"members":{"ImageName":{},"Name":{},"InstanceType":{},"ComputeCapacity":{"shape":"Sh"},"VpcConfig":{"shape":"Sj"},"MaxUserDurationInSeconds":{"type":"integer"},"DisconnectTimeoutInSeconds":{"type":"integer"},"DeleteVpcConfig":{"deprecated":true,"type":"boolean"},"Description":{},"DisplayName":{},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"Sp"},"AttributesToDelete":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"Fleet":{"shape":"Sr"}}}},"UpdateStack":{"input":{"type":"structure","required":["Name"],"members":{"DisplayName":{},"Description":{},"Name":{},"StorageConnectors":{"shape":"S1b"},"DeleteStorageConnectors":{"type":"boolean"}}},"output":{"type":"structure","members":{"Stack":{"shape":"S1g"}}}}},"shapes":{"S6":{"type":"list","member":{}},"S8":{"type":"structure","required":["AccountName","AccountPassword"],"members":{"AccountName":{"type":"string","sensitive":true},"AccountPassword":{"type":"string","sensitive":true}}},"Sc":{"type":"structure","required":["DirectoryName"],"members":{"DirectoryName":{},"OrganizationalUnitDistinguishedNames":{"shape":"S6"},"ServiceAccountCredentials":{"shape":"S8"},"CreatedTime":{"type":"timestamp"}}},"Sh":{"type":"structure","required":["DesiredInstances"],"members":{"DesiredInstances":{"type":"integer"}}},"Sj":{"type":"structure","members":{"SubnetIds":{"type":"list","member":{}},"SecurityGroupIds":{"type":"list","member":{}}}},"Sp":{"type":"structure","members":{"DirectoryName":{},"OrganizationalUnitDistinguishedName":{}}},"Sr":{"type":"structure","required":["Arn","Name","ImageName","InstanceType","ComputeCapacityStatus","State"],"members":{"Arn":{},"Name":{},"DisplayName":{},"Description":{},"ImageName":{},"InstanceType":{},"FleetType":{},"ComputeCapacityStatus":{"type":"structure","required":["Desired"],"members":{"Desired":{"type":"integer"},"Running":{"type":"integer"},"InUse":{"type":"integer"},"Available":{"type":"integer"}}},"MaxUserDurationInSeconds":{"type":"integer"},"DisconnectTimeoutInSeconds":{"type":"integer"},"State":{},"VpcConfig":{"shape":"Sj"},"CreatedTime":{"type":"timestamp"},"FleetErrors":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{}}}},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"Sp"}}},"S10":{"type":"structure","required":["Name"],"members":{"Name":{},"Arn":{},"ImageArn":{},"Description":{},"DisplayName":{},"VpcConfig":{"shape":"Sj"},"InstanceType":{},"Platform":{},"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"CreatedTime":{"type":"timestamp"},"EnableDefaultInternetAccess":{"type":"boolean"},"DomainJoinInfo":{"shape":"Sp"},"ImageBuilderErrors":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{},"ErrorTimestamp":{"type":"timestamp"}}}}}},"S1b":{"type":"list","member":{"type":"structure","required":["ConnectorType"],"members":{"ConnectorType":{},"ResourceIdentifier":{}}}},"S1g":{"type":"structure","required":["Name"],"members":{"Arn":{},"Name":{},"Description":{},"DisplayName":{},"CreatedTime":{"type":"timestamp"},"StorageConnectors":{"shape":"S1b"},"StackErrors":{"type":"list","member":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{}}}}}},"S1t":{"type":"structure","required":["Name"],"members":{"Name":{},"Arn":{},"BaseImageArn":{},"DisplayName":{},"State":{},"Visibility":{},"ImageBuilderSupported":{"type":"boolean"},"Platform":{},"Description":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Applications":{"type":"list","member":{"type":"structure","members":{"Name":{},"DisplayName":{},"IconURL":{},"LaunchPath":{},"LaunchParameters":{},"Enabled":{"type":"boolean"},"Metadata":{"type":"map","key":{},"value":{}}}}},"CreatedTime":{"type":"timestamp"},"PublicBaseImageReleasedDate":{"type":"timestamp"}}},"S2b":{"type":"list","member":{}}}}

/***/ }),
/* 131 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 132 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"FleetStarted":{"delay":30,"maxAttempts":40,"operation":"DescribeFleets","acceptors":[{"state":"success","matcher":"pathAll","argument":"Fleets[].State","expected":"ACTIVE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"PENDING_DEACTIVATE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"INACTIVE"}]},"FleetStopped":{"delay":30,"maxAttempts":40,"operation":"DescribeFleets","acceptors":[{"state":"success","matcher":"pathAll","argument":"Fleets[].State","expected":"INACTIVE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"PENDING_ACTIVATE"},{"state":"failure","matcher":"pathAny","argument":"Fleets[].State","expected":"ACTIVE"}]}}}

/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-05-18","endpointPrefix":"athena","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Athena","signatureVersion":"v4","targetPrefix":"AmazonAthena","uid":"athena-2017-05-18"},"operations":{"BatchGetNamedQuery":{"input":{"type":"structure","required":["NamedQueryIds"],"members":{"NamedQueryIds":{"shape":"S2"}}},"output":{"type":"structure","members":{"NamedQueries":{"type":"list","member":{"shape":"S6"}},"UnprocessedNamedQueryIds":{"type":"list","member":{"type":"structure","members":{"NamedQueryId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"BatchGetQueryExecution":{"input":{"type":"structure","required":["QueryExecutionIds"],"members":{"QueryExecutionIds":{"shape":"Sg"}}},"output":{"type":"structure","members":{"QueryExecutions":{"type":"list","member":{"shape":"Sk"}},"UnprocessedQueryExecutionIds":{"type":"list","member":{"type":"structure","members":{"QueryExecutionId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"CreateNamedQuery":{"input":{"type":"structure","required":["Name","Database","QueryString"],"members":{"Name":{},"Description":{},"Database":{},"QueryString":{},"ClientRequestToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"NamedQueryId":{}}},"idempotent":true},"DeleteNamedQuery":{"input":{"type":"structure","required":["NamedQueryId"],"members":{"NamedQueryId":{"idempotencyToken":true}}},"output":{"type":"structure","members":{}},"idempotent":true},"GetNamedQuery":{"input":{"type":"structure","required":["NamedQueryId"],"members":{"NamedQueryId":{}}},"output":{"type":"structure","members":{"NamedQuery":{"shape":"S6"}}}},"GetQueryExecution":{"input":{"type":"structure","required":["QueryExecutionId"],"members":{"QueryExecutionId":{}}},"output":{"type":"structure","members":{"QueryExecution":{"shape":"Sk"}}}},"GetQueryResults":{"input":{"type":"structure","required":["QueryExecutionId"],"members":{"QueryExecutionId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ResultSet":{"type":"structure","members":{"Rows":{"type":"list","member":{"type":"structure","members":{"Data":{"type":"list","member":{"type":"structure","members":{"VarCharValue":{}}}}}}},"ResultSetMetadata":{"type":"structure","members":{"ColumnInfo":{"type":"list","member":{"type":"structure","required":["Name","Type"],"members":{"CatalogName":{},"SchemaName":{},"TableName":{},"Name":{},"Label":{},"Type":{},"Precision":{"type":"integer"},"Scale":{"type":"integer"},"Nullable":{},"CaseSensitive":{"type":"boolean"}}}}}}}},"NextToken":{}}}},"ListNamedQueries":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NamedQueryIds":{"shape":"S2"},"NextToken":{}}}},"ListQueryExecutions":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"QueryExecutionIds":{"shape":"Sg"},"NextToken":{}}}},"StartQueryExecution":{"input":{"type":"structure","required":["QueryString","ResultConfiguration"],"members":{"QueryString":{},"ClientRequestToken":{"idempotencyToken":true},"QueryExecutionContext":{"shape":"Sp"},"ResultConfiguration":{"shape":"Sl"}}},"output":{"type":"structure","members":{"QueryExecutionId":{}}},"idempotent":true},"StopQueryExecution":{"input":{"type":"structure","required":["QueryExecutionId"],"members":{"QueryExecutionId":{"idempotencyToken":true}}},"output":{"type":"structure","members":{}},"idempotent":true}},"shapes":{"S2":{"type":"list","member":{}},"S6":{"type":"structure","required":["Name","Database","QueryString"],"members":{"Name":{},"Description":{},"Database":{},"QueryString":{},"NamedQueryId":{}}},"Sg":{"type":"list","member":{}},"Sk":{"type":"structure","members":{"QueryExecutionId":{},"Query":{},"ResultConfiguration":{"shape":"Sl"},"QueryExecutionContext":{"shape":"Sp"},"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{},"SubmissionDateTime":{"type":"timestamp"},"CompletionDateTime":{"type":"timestamp"}}},"Statistics":{"type":"structure","members":{"EngineExecutionTimeInMillis":{"type":"long"},"DataScannedInBytes":{"type":"long"}}}}},"Sl":{"type":"structure","required":["OutputLocation"],"members":{"OutputLocation":{},"EncryptionConfiguration":{"type":"structure","required":["EncryptionOption"],"members":{"EncryptionOption":{},"KmsKey":{}}}}},"Sp":{"type":"structure","members":{"Database":{}}}}}

/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetQueryResults":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListNamedQueries":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListQueryExecutions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 135 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2011-01-01","endpointPrefix":"autoscaling","protocol":"query","serviceFullName":"Auto Scaling","signatureVersion":"v4","uid":"autoscaling-2011-01-01","xmlNamespace":"http://autoscaling.amazonaws.com/doc/2011-01-01/"},"operations":{"AttachInstances":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{}}}},"AttachLoadBalancerTargetGroups":{"input":{"type":"structure","required":["AutoScalingGroupName","TargetGroupARNs"],"members":{"AutoScalingGroupName":{},"TargetGroupARNs":{"shape":"S6"}}},"output":{"resultWrapper":"AttachLoadBalancerTargetGroupsResult","type":"structure","members":{}}},"AttachLoadBalancers":{"input":{"type":"structure","required":["AutoScalingGroupName","LoadBalancerNames"],"members":{"AutoScalingGroupName":{},"LoadBalancerNames":{"shape":"Sa"}}},"output":{"resultWrapper":"AttachLoadBalancersResult","type":"structure","members":{}}},"CompleteLifecycleAction":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName","LifecycleActionResult"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleActionToken":{},"LifecycleActionResult":{},"InstanceId":{}}},"output":{"resultWrapper":"CompleteLifecycleActionResult","type":"structure","members":{}}},"CreateAutoScalingGroup":{"input":{"type":"structure","required":["AutoScalingGroupName","MinSize","MaxSize"],"members":{"AutoScalingGroupName":{},"LaunchConfigurationName":{},"InstanceId":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"DefaultCooldown":{"type":"integer"},"AvailabilityZones":{"shape":"Sn"},"LoadBalancerNames":{"shape":"Sa"},"TargetGroupARNs":{"shape":"S6"},"HealthCheckType":{},"HealthCheckGracePeriod":{"type":"integer"},"PlacementGroup":{},"VPCZoneIdentifier":{},"TerminationPolicies":{"shape":"Sr"},"NewInstancesProtectedFromScaleIn":{"type":"boolean"},"LifecycleHookSpecificationList":{"type":"list","member":{"type":"structure","required":["LifecycleHookName"],"members":{"LifecycleHookName":{},"LifecycleTransition":{},"NotificationMetadata":{},"HeartbeatTimeout":{"type":"integer"},"DefaultResult":{},"NotificationTargetARN":{},"RoleARN":{}}}},"Tags":{"shape":"S10"}}}},"CreateLaunchConfiguration":{"input":{"type":"structure","required":["LaunchConfigurationName"],"members":{"LaunchConfigurationName":{},"ImageId":{},"KeyName":{},"SecurityGroups":{"shape":"S17"},"ClassicLinkVPCId":{},"ClassicLinkVPCSecurityGroups":{"shape":"S18"},"UserData":{},"InstanceId":{},"InstanceType":{},"KernelId":{},"RamdiskId":{},"BlockDeviceMappings":{"shape":"S1a"},"InstanceMonitoring":{"shape":"S1j"},"SpotPrice":{},"IamInstanceProfile":{},"EbsOptimized":{"type":"boolean"},"AssociatePublicIpAddress":{"type":"boolean"},"PlacementTenancy":{}}}},"CreateOrUpdateTags":{"input":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S10"}}}},"DeleteAutoScalingGroup":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"ForceDelete":{"type":"boolean"}}}},"DeleteLaunchConfiguration":{"input":{"type":"structure","required":["LaunchConfigurationName"],"members":{"LaunchConfigurationName":{}}}},"DeleteLifecycleHook":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{}}},"output":{"resultWrapper":"DeleteLifecycleHookResult","type":"structure","members":{}}},"DeleteNotificationConfiguration":{"input":{"type":"structure","required":["AutoScalingGroupName","TopicARN"],"members":{"AutoScalingGroupName":{},"TopicARN":{}}}},"DeletePolicy":{"input":{"type":"structure","required":["PolicyName"],"members":{"AutoScalingGroupName":{},"PolicyName":{}}}},"DeleteScheduledAction":{"input":{"type":"structure","required":["AutoScalingGroupName","ScheduledActionName"],"members":{"AutoScalingGroupName":{},"ScheduledActionName":{}}}},"DeleteTags":{"input":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S10"}}}},"DescribeAccountLimits":{"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"MaxNumberOfAutoScalingGroups":{"type":"integer"},"MaxNumberOfLaunchConfigurations":{"type":"integer"},"NumberOfAutoScalingGroups":{"type":"integer"},"NumberOfLaunchConfigurations":{"type":"integer"}}}},"DescribeAdjustmentTypes":{"output":{"resultWrapper":"DescribeAdjustmentTypesResult","type":"structure","members":{"AdjustmentTypes":{"type":"list","member":{"type":"structure","members":{"AdjustmentType":{}}}}}}},"DescribeAutoScalingGroups":{"input":{"type":"structure","members":{"AutoScalingGroupNames":{"shape":"S28"},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeAutoScalingGroupsResult","type":"structure","required":["AutoScalingGroups"],"members":{"AutoScalingGroups":{"type":"list","member":{"type":"structure","required":["AutoScalingGroupName","MinSize","MaxSize","DesiredCapacity","DefaultCooldown","AvailabilityZones","HealthCheckType","CreatedTime"],"members":{"AutoScalingGroupName":{},"AutoScalingGroupARN":{},"LaunchConfigurationName":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"DefaultCooldown":{"type":"integer"},"AvailabilityZones":{"shape":"Sn"},"LoadBalancerNames":{"shape":"Sa"},"TargetGroupARNs":{"shape":"S6"},"HealthCheckType":{},"HealthCheckGracePeriod":{"type":"integer"},"Instances":{"type":"list","member":{"type":"structure","required":["InstanceId","AvailabilityZone","LifecycleState","HealthStatus","LaunchConfigurationName","ProtectedFromScaleIn"],"members":{"InstanceId":{},"AvailabilityZone":{},"LifecycleState":{},"HealthStatus":{},"LaunchConfigurationName":{},"ProtectedFromScaleIn":{"type":"boolean"}}}},"CreatedTime":{"type":"timestamp"},"SuspendedProcesses":{"type":"list","member":{"type":"structure","members":{"ProcessName":{},"SuspensionReason":{}}}},"PlacementGroup":{},"VPCZoneIdentifier":{},"EnabledMetrics":{"type":"list","member":{"type":"structure","members":{"Metric":{},"Granularity":{}}}},"Status":{},"Tags":{"shape":"S2l"},"TerminationPolicies":{"shape":"Sr"},"NewInstancesProtectedFromScaleIn":{"type":"boolean"}}}},"NextToken":{}}}},"DescribeAutoScalingInstances":{"input":{"type":"structure","members":{"InstanceIds":{"shape":"S2"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeAutoScalingInstancesResult","type":"structure","members":{"AutoScalingInstances":{"type":"list","member":{"type":"structure","required":["InstanceId","AutoScalingGroupName","AvailabilityZone","LifecycleState","HealthStatus","LaunchConfigurationName","ProtectedFromScaleIn"],"members":{"InstanceId":{},"AutoScalingGroupName":{},"AvailabilityZone":{},"LifecycleState":{},"HealthStatus":{},"LaunchConfigurationName":{},"ProtectedFromScaleIn":{"type":"boolean"}}}},"NextToken":{}}}},"DescribeAutoScalingNotificationTypes":{"output":{"resultWrapper":"DescribeAutoScalingNotificationTypesResult","type":"structure","members":{"AutoScalingNotificationTypes":{"shape":"S2s"}}}},"DescribeLaunchConfigurations":{"input":{"type":"structure","members":{"LaunchConfigurationNames":{"type":"list","member":{}},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLaunchConfigurationsResult","type":"structure","required":["LaunchConfigurations"],"members":{"LaunchConfigurations":{"type":"list","member":{"type":"structure","required":["LaunchConfigurationName","ImageId","InstanceType","CreatedTime"],"members":{"LaunchConfigurationName":{},"LaunchConfigurationARN":{},"ImageId":{},"KeyName":{},"SecurityGroups":{"shape":"S17"},"ClassicLinkVPCId":{},"ClassicLinkVPCSecurityGroups":{"shape":"S18"},"UserData":{},"InstanceType":{},"KernelId":{},"RamdiskId":{},"BlockDeviceMappings":{"shape":"S1a"},"InstanceMonitoring":{"shape":"S1j"},"SpotPrice":{},"IamInstanceProfile":{},"CreatedTime":{"type":"timestamp"},"EbsOptimized":{"type":"boolean"},"AssociatePublicIpAddress":{"type":"boolean"},"PlacementTenancy":{}}}},"NextToken":{}}}},"DescribeLifecycleHookTypes":{"output":{"resultWrapper":"DescribeLifecycleHookTypesResult","type":"structure","members":{"LifecycleHookTypes":{"shape":"S2s"}}}},"DescribeLifecycleHooks":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"LifecycleHookNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeLifecycleHooksResult","type":"structure","members":{"LifecycleHooks":{"type":"list","member":{"type":"structure","members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleTransition":{},"NotificationTargetARN":{},"RoleARN":{},"NotificationMetadata":{},"HeartbeatTimeout":{"type":"integer"},"GlobalTimeout":{"type":"integer"},"DefaultResult":{}}}}}}},"DescribeLoadBalancerTargetGroups":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancerTargetGroupsResult","type":"structure","members":{"LoadBalancerTargetGroups":{"type":"list","member":{"type":"structure","members":{"LoadBalancerTargetGroupARN":{},"State":{}}}},"NextToken":{}}}},"DescribeLoadBalancers":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancersResult","type":"structure","members":{"LoadBalancers":{"type":"list","member":{"type":"structure","members":{"LoadBalancerName":{},"State":{}}}},"NextToken":{}}}},"DescribeMetricCollectionTypes":{"output":{"resultWrapper":"DescribeMetricCollectionTypesResult","type":"structure","members":{"Metrics":{"type":"list","member":{"type":"structure","members":{"Metric":{}}}},"Granularities":{"type":"list","member":{"type":"structure","members":{"Granularity":{}}}}}}},"DescribeNotificationConfigurations":{"input":{"type":"structure","members":{"AutoScalingGroupNames":{"shape":"S28"},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeNotificationConfigurationsResult","type":"structure","required":["NotificationConfigurations"],"members":{"NotificationConfigurations":{"type":"list","member":{"type":"structure","members":{"AutoScalingGroupName":{},"TopicARN":{},"NotificationType":{}}}},"NextToken":{}}}},"DescribePolicies":{"input":{"type":"structure","members":{"AutoScalingGroupName":{},"PolicyNames":{"type":"list","member":{}},"PolicyTypes":{"type":"list","member":{}},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribePoliciesResult","type":"structure","members":{"ScalingPolicies":{"type":"list","member":{"type":"structure","members":{"AutoScalingGroupName":{},"PolicyName":{},"PolicyARN":{},"PolicyType":{},"AdjustmentType":{},"MinAdjustmentStep":{"shape":"S3s"},"MinAdjustmentMagnitude":{"type":"integer"},"ScalingAdjustment":{"type":"integer"},"Cooldown":{"type":"integer"},"StepAdjustments":{"shape":"S3v"},"MetricAggregationType":{},"EstimatedInstanceWarmup":{"type":"integer"},"Alarms":{"shape":"S3z"},"TargetTrackingConfiguration":{"shape":"S41"}}}},"NextToken":{}}}},"DescribeScalingActivities":{"input":{"type":"structure","members":{"ActivityIds":{"type":"list","member":{}},"AutoScalingGroupName":{},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeScalingActivitiesResult","type":"structure","required":["Activities"],"members":{"Activities":{"shape":"S4h"},"NextToken":{}}}},"DescribeScalingProcessTypes":{"output":{"resultWrapper":"DescribeScalingProcessTypesResult","type":"structure","members":{"Processes":{"type":"list","member":{"type":"structure","required":["ProcessName"],"members":{"ProcessName":{}}}}}}},"DescribeScheduledActions":{"input":{"type":"structure","members":{"AutoScalingGroupName":{},"ScheduledActionNames":{"type":"list","member":{}},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeScheduledActionsResult","type":"structure","members":{"ScheduledUpdateGroupActions":{"type":"list","member":{"type":"structure","members":{"AutoScalingGroupName":{},"ScheduledActionName":{},"ScheduledActionARN":{},"Time":{"type":"timestamp"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Recurrence":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"}}}},"NextToken":{}}}},"DescribeTags":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","members":{"Name":{},"Values":{"type":"list","member":{}}}}},"NextToken":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"Tags":{"shape":"S2l"},"NextToken":{}}}},"DescribeTerminationPolicyTypes":{"output":{"resultWrapper":"DescribeTerminationPolicyTypesResult","type":"structure","members":{"TerminationPolicyTypes":{"shape":"Sr"}}}},"DetachInstances":{"input":{"type":"structure","required":["AutoScalingGroupName","ShouldDecrementDesiredCapacity"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{},"ShouldDecrementDesiredCapacity":{"type":"boolean"}}},"output":{"resultWrapper":"DetachInstancesResult","type":"structure","members":{"Activities":{"shape":"S4h"}}}},"DetachLoadBalancerTargetGroups":{"input":{"type":"structure","required":["AutoScalingGroupName","TargetGroupARNs"],"members":{"AutoScalingGroupName":{},"TargetGroupARNs":{"shape":"S6"}}},"output":{"resultWrapper":"DetachLoadBalancerTargetGroupsResult","type":"structure","members":{}}},"DetachLoadBalancers":{"input":{"type":"structure","required":["AutoScalingGroupName","LoadBalancerNames"],"members":{"AutoScalingGroupName":{},"LoadBalancerNames":{"shape":"Sa"}}},"output":{"resultWrapper":"DetachLoadBalancersResult","type":"structure","members":{}}},"DisableMetricsCollection":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"Metrics":{"shape":"S57"}}}},"EnableMetricsCollection":{"input":{"type":"structure","required":["AutoScalingGroupName","Granularity"],"members":{"AutoScalingGroupName":{},"Metrics":{"shape":"S57"},"Granularity":{}}}},"EnterStandby":{"input":{"type":"structure","required":["AutoScalingGroupName","ShouldDecrementDesiredCapacity"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{},"ShouldDecrementDesiredCapacity":{"type":"boolean"}}},"output":{"resultWrapper":"EnterStandbyResult","type":"structure","members":{"Activities":{"shape":"S4h"}}}},"ExecutePolicy":{"input":{"type":"structure","required":["PolicyName"],"members":{"AutoScalingGroupName":{},"PolicyName":{},"HonorCooldown":{"type":"boolean"},"MetricValue":{"type":"double"},"BreachThreshold":{"type":"double"}}}},"ExitStandby":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{}}},"output":{"resultWrapper":"ExitStandbyResult","type":"structure","members":{"Activities":{"shape":"S4h"}}}},"PutLifecycleHook":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleTransition":{},"RoleARN":{},"NotificationTargetARN":{},"NotificationMetadata":{},"HeartbeatTimeout":{"type":"integer"},"DefaultResult":{}}},"output":{"resultWrapper":"PutLifecycleHookResult","type":"structure","members":{}}},"PutNotificationConfiguration":{"input":{"type":"structure","required":["AutoScalingGroupName","TopicARN","NotificationTypes"],"members":{"AutoScalingGroupName":{},"TopicARN":{},"NotificationTypes":{"shape":"S2s"}}}},"PutScalingPolicy":{"input":{"type":"structure","required":["AutoScalingGroupName","PolicyName"],"members":{"AutoScalingGroupName":{},"PolicyName":{},"PolicyType":{},"AdjustmentType":{},"MinAdjustmentStep":{"shape":"S3s"},"MinAdjustmentMagnitude":{"type":"integer"},"ScalingAdjustment":{"type":"integer"},"Cooldown":{"type":"integer"},"MetricAggregationType":{},"StepAdjustments":{"shape":"S3v"},"EstimatedInstanceWarmup":{"type":"integer"},"TargetTrackingConfiguration":{"shape":"S41"}}},"output":{"resultWrapper":"PutScalingPolicyResult","type":"structure","members":{"PolicyARN":{},"Alarms":{"shape":"S3z"}}}},"PutScheduledUpdateGroupAction":{"input":{"type":"structure","required":["AutoScalingGroupName","ScheduledActionName"],"members":{"AutoScalingGroupName":{},"ScheduledActionName":{},"Time":{"type":"timestamp"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Recurrence":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"}}}},"RecordLifecycleActionHeartbeat":{"input":{"type":"structure","required":["LifecycleHookName","AutoScalingGroupName"],"members":{"LifecycleHookName":{},"AutoScalingGroupName":{},"LifecycleActionToken":{},"InstanceId":{}}},"output":{"resultWrapper":"RecordLifecycleActionHeartbeatResult","type":"structure","members":{}}},"ResumeProcesses":{"input":{"shape":"S5n"}},"SetDesiredCapacity":{"input":{"type":"structure","required":["AutoScalingGroupName","DesiredCapacity"],"members":{"AutoScalingGroupName":{},"DesiredCapacity":{"type":"integer"},"HonorCooldown":{"type":"boolean"}}}},"SetInstanceHealth":{"input":{"type":"structure","required":["InstanceId","HealthStatus"],"members":{"InstanceId":{},"HealthStatus":{},"ShouldRespectGracePeriod":{"type":"boolean"}}}},"SetInstanceProtection":{"input":{"type":"structure","required":["InstanceIds","AutoScalingGroupName","ProtectedFromScaleIn"],"members":{"InstanceIds":{"shape":"S2"},"AutoScalingGroupName":{},"ProtectedFromScaleIn":{"type":"boolean"}}},"output":{"resultWrapper":"SetInstanceProtectionResult","type":"structure","members":{}}},"SuspendProcesses":{"input":{"shape":"S5n"}},"TerminateInstanceInAutoScalingGroup":{"input":{"type":"structure","required":["InstanceId","ShouldDecrementDesiredCapacity"],"members":{"InstanceId":{},"ShouldDecrementDesiredCapacity":{"type":"boolean"}}},"output":{"resultWrapper":"TerminateInstanceInAutoScalingGroupResult","type":"structure","members":{"Activity":{"shape":"S4i"}}}},"UpdateAutoScalingGroup":{"input":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"LaunchConfigurationName":{},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"},"DesiredCapacity":{"type":"integer"},"DefaultCooldown":{"type":"integer"},"AvailabilityZones":{"shape":"Sn"},"HealthCheckType":{},"HealthCheckGracePeriod":{"type":"integer"},"PlacementGroup":{},"VPCZoneIdentifier":{},"TerminationPolicies":{"shape":"Sr"},"NewInstancesProtectedFromScaleIn":{"type":"boolean"}}}}},"shapes":{"S2":{"type":"list","member":{}},"S6":{"type":"list","member":{}},"Sa":{"type":"list","member":{}},"Sn":{"type":"list","member":{}},"Sr":{"type":"list","member":{}},"S10":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"ResourceId":{},"ResourceType":{},"Key":{},"Value":{},"PropagateAtLaunch":{"type":"boolean"}}}},"S17":{"type":"list","member":{}},"S18":{"type":"list","member":{}},"S1a":{"type":"list","member":{"type":"structure","required":["DeviceName"],"members":{"VirtualName":{},"DeviceName":{},"Ebs":{"type":"structure","members":{"SnapshotId":{},"VolumeSize":{"type":"integer"},"VolumeType":{},"DeleteOnTermination":{"type":"boolean"},"Iops":{"type":"integer"},"Encrypted":{"type":"boolean"}}},"NoDevice":{"type":"boolean"}}}},"S1j":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"S28":{"type":"list","member":{}},"S2l":{"type":"list","member":{"type":"structure","members":{"ResourceId":{},"ResourceType":{},"Key":{},"Value":{},"PropagateAtLaunch":{"type":"boolean"}}}},"S2s":{"type":"list","member":{}},"S3s":{"type":"integer","deprecated":true},"S3v":{"type":"list","member":{"type":"structure","required":["ScalingAdjustment"],"members":{"MetricIntervalLowerBound":{"type":"double"},"MetricIntervalUpperBound":{"type":"double"},"ScalingAdjustment":{"type":"integer"}}}},"S3z":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"AlarmARN":{}}}},"S41":{"type":"structure","required":["TargetValue"],"members":{"PredefinedMetricSpecification":{"type":"structure","required":["PredefinedMetricType"],"members":{"PredefinedMetricType":{},"ResourceLabel":{}}},"CustomizedMetricSpecification":{"type":"structure","required":["MetricName","Namespace","Statistic"],"members":{"MetricName":{},"Namespace":{},"Dimensions":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"Statistic":{},"Unit":{}}},"TargetValue":{"type":"double"},"DisableScaleIn":{"type":"boolean"}}},"S4h":{"type":"list","member":{"shape":"S4i"}},"S4i":{"type":"structure","required":["ActivityId","AutoScalingGroupName","Cause","StartTime","StatusCode"],"members":{"ActivityId":{},"AutoScalingGroupName":{},"Description":{},"Cause":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"StatusCode":{},"StatusMessage":{},"Progress":{"type":"integer"},"Details":{}}},"S57":{"type":"list","member":{}},"S5n":{"type":"structure","required":["AutoScalingGroupName"],"members":{"AutoScalingGroupName":{},"ScalingProcesses":{"type":"list","member":{}}}}}}

/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeAutoScalingGroups":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"AutoScalingGroups"},"DescribeAutoScalingInstances":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"AutoScalingInstances"},"DescribeLaunchConfigurations":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"LaunchConfigurations"},"DescribeNotificationConfigurations":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"NotificationConfigurations"},"DescribePolicies":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"ScalingPolicies"},"DescribeScalingActivities":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"Activities"},"DescribeScheduledActions":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"ScheduledUpdateGroupActions"},"DescribeTags":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"Tags"}}}

/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-08-10","endpointPrefix":"batch","jsonVersion":"1.1","protocol":"rest-json","serviceAbbreviation":"AWS Batch","serviceFullName":"AWS Batch","signatureVersion":"v4","uid":"batch-2016-08-10"},"operations":{"CancelJob":{"http":{"requestUri":"/v1/canceljob"},"input":{"type":"structure","required":["jobId","reason"],"members":{"jobId":{},"reason":{}}},"output":{"type":"structure","members":{}}},"CreateComputeEnvironment":{"http":{"requestUri":"/v1/createcomputeenvironment"},"input":{"type":"structure","required":["computeEnvironmentName","type","serviceRole"],"members":{"computeEnvironmentName":{},"type":{},"state":{},"computeResources":{"shape":"S7"},"serviceRole":{}}},"output":{"type":"structure","members":{"computeEnvironmentName":{},"computeEnvironmentArn":{}}}},"CreateJobQueue":{"http":{"requestUri":"/v1/createjobqueue"},"input":{"type":"structure","required":["jobQueueName","priority","computeEnvironmentOrder"],"members":{"jobQueueName":{},"state":{},"priority":{"type":"integer"},"computeEnvironmentOrder":{"shape":"Sf"}}},"output":{"type":"structure","required":["jobQueueName","jobQueueArn"],"members":{"jobQueueName":{},"jobQueueArn":{}}}},"DeleteComputeEnvironment":{"http":{"requestUri":"/v1/deletecomputeenvironment"},"input":{"type":"structure","required":["computeEnvironment"],"members":{"computeEnvironment":{}}},"output":{"type":"structure","members":{}}},"DeleteJobQueue":{"http":{"requestUri":"/v1/deletejobqueue"},"input":{"type":"structure","required":["jobQueue"],"members":{"jobQueue":{}}},"output":{"type":"structure","members":{}}},"DeregisterJobDefinition":{"http":{"requestUri":"/v1/deregisterjobdefinition"},"input":{"type":"structure","required":["jobDefinition"],"members":{"jobDefinition":{}}},"output":{"type":"structure","members":{}}},"DescribeComputeEnvironments":{"http":{"requestUri":"/v1/describecomputeenvironments"},"input":{"type":"structure","members":{"computeEnvironments":{"shape":"Sa"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"computeEnvironments":{"type":"list","member":{"type":"structure","required":["computeEnvironmentName","computeEnvironmentArn","ecsClusterArn"],"members":{"computeEnvironmentName":{},"computeEnvironmentArn":{},"ecsClusterArn":{},"type":{},"state":{},"status":{},"statusReason":{},"computeResources":{"shape":"S7"},"serviceRole":{}}}},"nextToken":{}}}},"DescribeJobDefinitions":{"http":{"requestUri":"/v1/describejobdefinitions"},"input":{"type":"structure","members":{"jobDefinitions":{"shape":"Sa"},"maxResults":{"type":"integer"},"jobDefinitionName":{},"status":{},"nextToken":{}}},"output":{"type":"structure","members":{"jobDefinitions":{"type":"list","member":{"type":"structure","required":["jobDefinitionName","jobDefinitionArn","revision","type"],"members":{"jobDefinitionName":{},"jobDefinitionArn":{},"revision":{"type":"integer"},"status":{},"type":{},"parameters":{"shape":"Sx"},"retryStrategy":{"shape":"Sy"},"containerProperties":{"shape":"Sz"}}}},"nextToken":{}}}},"DescribeJobQueues":{"http":{"requestUri":"/v1/describejobqueues"},"input":{"type":"structure","members":{"jobQueues":{"shape":"Sa"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"jobQueues":{"type":"list","member":{"type":"structure","required":["jobQueueName","jobQueueArn","state","priority","computeEnvironmentOrder"],"members":{"jobQueueName":{},"jobQueueArn":{},"state":{},"status":{},"statusReason":{},"priority":{"type":"integer"},"computeEnvironmentOrder":{"shape":"Sf"}}}},"nextToken":{}}}},"DescribeJobs":{"http":{"requestUri":"/v1/describejobs"},"input":{"type":"structure","required":["jobs"],"members":{"jobs":{"shape":"Sa"}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","required":["jobName","jobId","jobQueue","status","startedAt","jobDefinition"],"members":{"jobName":{},"jobId":{},"jobQueue":{},"status":{},"attempts":{"type":"list","member":{"type":"structure","members":{"container":{"type":"structure","members":{"containerInstanceArn":{},"taskArn":{},"exitCode":{"type":"integer"},"reason":{},"logStreamName":{}}},"startedAt":{"type":"long"},"stoppedAt":{"type":"long"},"statusReason":{}}}},"statusReason":{},"createdAt":{"type":"long"},"retryStrategy":{"shape":"Sy"},"startedAt":{"type":"long"},"stoppedAt":{"type":"long"},"dependsOn":{"shape":"S1o"},"jobDefinition":{},"parameters":{"shape":"Sx"},"container":{"type":"structure","members":{"image":{},"vcpus":{"type":"integer"},"memory":{"type":"integer"},"command":{"shape":"Sa"},"jobRoleArn":{},"volumes":{"shape":"S10"},"environment":{"shape":"S13"},"mountPoints":{"shape":"S15"},"readonlyRootFilesystem":{"type":"boolean"},"ulimits":{"shape":"S18"},"privileged":{"type":"boolean"},"user":{},"exitCode":{"type":"integer"},"reason":{},"containerInstanceArn":{},"taskArn":{},"logStreamName":{}}}}}}}}},"ListJobs":{"http":{"requestUri":"/v1/listjobs"},"input":{"type":"structure","required":["jobQueue"],"members":{"jobQueue":{},"jobStatus":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","required":["jobSummaryList"],"members":{"jobSummaryList":{"type":"list","member":{"type":"structure","required":["jobId","jobName"],"members":{"jobId":{},"jobName":{}}}},"nextToken":{}}}},"RegisterJobDefinition":{"http":{"requestUri":"/v1/registerjobdefinition"},"input":{"type":"structure","required":["jobDefinitionName","type"],"members":{"jobDefinitionName":{},"type":{},"parameters":{"shape":"Sx"},"containerProperties":{"shape":"Sz"},"retryStrategy":{"shape":"Sy"}}},"output":{"type":"structure","required":["jobDefinitionName","jobDefinitionArn","revision"],"members":{"jobDefinitionName":{},"jobDefinitionArn":{},"revision":{"type":"integer"}}}},"SubmitJob":{"http":{"requestUri":"/v1/submitjob"},"input":{"type":"structure","required":["jobName","jobQueue","jobDefinition"],"members":{"jobName":{},"jobQueue":{},"dependsOn":{"shape":"S1o"},"jobDefinition":{},"parameters":{"shape":"Sx"},"containerOverrides":{"type":"structure","members":{"vcpus":{"type":"integer"},"memory":{"type":"integer"},"command":{"shape":"Sa"},"environment":{"shape":"S13"}}},"retryStrategy":{"shape":"Sy"}}},"output":{"type":"structure","required":["jobName","jobId"],"members":{"jobName":{},"jobId":{}}}},"TerminateJob":{"http":{"requestUri":"/v1/terminatejob"},"input":{"type":"structure","required":["jobId","reason"],"members":{"jobId":{},"reason":{}}},"output":{"type":"structure","members":{}}},"UpdateComputeEnvironment":{"http":{"requestUri":"/v1/updatecomputeenvironment"},"input":{"type":"structure","required":["computeEnvironment"],"members":{"computeEnvironment":{},"state":{},"computeResources":{"type":"structure","members":{"minvCpus":{"type":"integer"},"maxvCpus":{"type":"integer"},"desiredvCpus":{"type":"integer"}}},"serviceRole":{}}},"output":{"type":"structure","members":{"computeEnvironmentName":{},"computeEnvironmentArn":{}}}},"UpdateJobQueue":{"http":{"requestUri":"/v1/updatejobqueue"},"input":{"type":"structure","required":["jobQueue"],"members":{"jobQueue":{},"state":{},"priority":{"type":"integer"},"computeEnvironmentOrder":{"shape":"Sf"}}},"output":{"type":"structure","members":{"jobQueueName":{},"jobQueueArn":{}}}}},"shapes":{"S7":{"type":"structure","required":["type","minvCpus","maxvCpus","instanceTypes","subnets","securityGroupIds","instanceRole"],"members":{"type":{},"minvCpus":{"type":"integer"},"maxvCpus":{"type":"integer"},"desiredvCpus":{"type":"integer"},"instanceTypes":{"shape":"Sa"},"imageId":{},"subnets":{"shape":"Sa"},"securityGroupIds":{"shape":"Sa"},"ec2KeyPair":{},"instanceRole":{},"tags":{"type":"map","key":{},"value":{}},"bidPercentage":{"type":"integer"},"spotIamFleetRole":{}}},"Sa":{"type":"list","member":{}},"Sf":{"type":"list","member":{"type":"structure","required":["order","computeEnvironment"],"members":{"order":{"type":"integer"},"computeEnvironment":{}}}},"Sx":{"type":"map","key":{},"value":{}},"Sy":{"type":"structure","members":{"attempts":{"type":"integer"}}},"Sz":{"type":"structure","required":["image","vcpus","memory"],"members":{"image":{},"vcpus":{"type":"integer"},"memory":{"type":"integer"},"command":{"shape":"Sa"},"jobRoleArn":{},"volumes":{"shape":"S10"},"environment":{"shape":"S13"},"mountPoints":{"shape":"S15"},"readonlyRootFilesystem":{"type":"boolean"},"privileged":{"type":"boolean"},"ulimits":{"shape":"S18"},"user":{}}},"S10":{"type":"list","member":{"type":"structure","members":{"host":{"type":"structure","members":{"sourcePath":{}}},"name":{}}}},"S13":{"type":"list","member":{"type":"structure","members":{"name":{},"value":{}}}},"S15":{"type":"list","member":{"type":"structure","members":{"containerPath":{},"readOnly":{"type":"boolean"},"sourceVolume":{}}}},"S18":{"type":"list","member":{"type":"structure","required":["hardLimit","name","softLimit"],"members":{"hardLimit":{"type":"integer"},"name":{},"softLimit":{"type":"integer"}}}},"S1o":{"type":"list","member":{"type":"structure","members":{"jobId":{}}}}}}

/***/ }),
/* 138 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 139 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-10-20","endpointPrefix":"budgets","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"AWSBudgets","serviceFullName":"AWS Budgets","signatureVersion":"v4","targetPrefix":"AWSBudgetServiceGateway","uid":"budgets-2016-10-20"},"operations":{"CreateBudget":{"input":{"type":"structure","required":["AccountId","Budget"],"members":{"AccountId":{},"Budget":{"shape":"S3"},"NotificationsWithSubscribers":{"type":"list","member":{"type":"structure","required":["Notification","Subscribers"],"members":{"Notification":{"shape":"Sk"},"Subscribers":{"shape":"Sp"}}}}}},"output":{"type":"structure","members":{}}},"CreateNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","Subscribers"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sk"},"Subscribers":{"shape":"Sp"}}},"output":{"type":"structure","members":{}}},"CreateSubscriber":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","Subscriber"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sk"},"Subscriber":{"shape":"Sq"}}},"output":{"type":"structure","members":{}}},"DeleteBudget":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{}}},"output":{"type":"structure","members":{}}},"DeleteNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sk"}}},"output":{"type":"structure","members":{}}},"DeleteSubscriber":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","Subscriber"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sk"},"Subscriber":{"shape":"Sq"}}},"output":{"type":"structure","members":{}}},"DescribeBudget":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{}}},"output":{"type":"structure","members":{"Budget":{"shape":"S3"}}}},"DescribeBudgets":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Budgets":{"type":"list","member":{"shape":"S3"}},"NextToken":{}}}},"DescribeNotificationsForBudget":{"input":{"type":"structure","required":["AccountId","BudgetName"],"members":{"AccountId":{},"BudgetName":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Notifications":{"type":"list","member":{"shape":"Sk"}},"NextToken":{}}}},"DescribeSubscribersForNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sk"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Subscribers":{"shape":"Sp"},"NextToken":{}}}},"UpdateBudget":{"input":{"type":"structure","required":["AccountId","NewBudget"],"members":{"AccountId":{},"NewBudget":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"UpdateNotification":{"input":{"type":"structure","required":["AccountId","BudgetName","OldNotification","NewNotification"],"members":{"AccountId":{},"BudgetName":{},"OldNotification":{"shape":"Sk"},"NewNotification":{"shape":"Sk"}}},"output":{"type":"structure","members":{}}},"UpdateSubscriber":{"input":{"type":"structure","required":["AccountId","BudgetName","Notification","OldSubscriber","NewSubscriber"],"members":{"AccountId":{},"BudgetName":{},"Notification":{"shape":"Sk"},"OldSubscriber":{"shape":"Sq"},"NewSubscriber":{"shape":"Sq"}}},"output":{"type":"structure","members":{}}}},"shapes":{"S3":{"type":"structure","required":["BudgetName","BudgetLimit","CostTypes","TimeUnit","TimePeriod","BudgetType"],"members":{"BudgetName":{},"BudgetLimit":{"shape":"S5"},"CostFilters":{"type":"map","key":{},"value":{"type":"list","member":{}}},"CostTypes":{"type":"structure","required":["IncludeTax","IncludeSubscription","UseBlended"],"members":{"IncludeTax":{"type":"boolean"},"IncludeSubscription":{"type":"boolean"},"UseBlended":{"type":"boolean"}}},"TimeUnit":{},"TimePeriod":{"type":"structure","required":["Start","End"],"members":{"Start":{"type":"timestamp"},"End":{"type":"timestamp"}}},"CalculatedSpend":{"type":"structure","required":["ActualSpend"],"members":{"ActualSpend":{"shape":"S5"},"ForecastedSpend":{"shape":"S5"}}},"BudgetType":{}}},"S5":{"type":"structure","required":["Amount","Unit"],"members":{"Amount":{},"Unit":{}}},"Sk":{"type":"structure","required":["NotificationType","ComparisonOperator","Threshold"],"members":{"NotificationType":{},"ComparisonOperator":{},"Threshold":{"type":"double"},"ThresholdType":{}}},"Sp":{"type":"list","member":{"shape":"Sq"}},"Sq":{"type":"structure","required":["SubscriptionType","Address"],"members":{"SubscriptionType":{},"Address":{}}}}}

/***/ }),
/* 140 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-05-10","endpointPrefix":"clouddirectory","protocol":"rest-json","serviceFullName":"Amazon CloudDirectory","signatureVersion":"v4","signingName":"clouddirectory","uid":"clouddirectory-2016-05-10"},"operations":{"AddFacetToObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/facets","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacet","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacet":{"shape":"S3"},"ObjectAttributeList":{"shape":"S5"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"ApplySchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/apply","responseCode":200},"input":{"type":"structure","required":["PublishedSchemaArn","DirectoryArn"],"members":{"PublishedSchemaArn":{},"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"AppliedSchemaArn":{},"DirectoryArn":{}}}},"AttachObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ParentReference","ChildReference","LinkName"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ParentReference":{"shape":"Sf"},"ChildReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"AttachedObjectIdentifier":{}}}},"AttachPolicy":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/policy/attach","responseCode":200},"input":{"type":"structure","required":["PolicyReference","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"AttachToIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{"AttachedObjectIdentifier":{}}}},"AttachTypedLink":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/attach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SourceObjectReference","TargetObjectReference","TypedLinkFacet","Attributes"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"TypedLinkFacet":{"shape":"St"},"Attributes":{"shape":"Sv"}}},"output":{"type":"structure","members":{"TypedLinkSpecifier":{"shape":"Sy"}}}},"BatchRead":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/batchread","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","Operations"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"Operations":{"type":"list","member":{"type":"structure","members":{"ListObjectAttributes":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"FacetFilter":{"shape":"S3"}}},"ListObjectChildren":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListAttachedIndices":{"type":"structure","required":["TargetReference"],"members":{"TargetReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListObjectParentPaths":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"GetObjectInformation":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"}}},"ListObjectPolicies":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListPolicyAttachments":{"type":"structure","required":["PolicyReference"],"members":{"PolicyReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"LookupPolicy":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListIndex":{"type":"structure","required":["IndexReference"],"members":{"RangesOnIndexedValues":{"shape":"S1d"},"IndexReference":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{}}},"ListOutgoingTypedLinks":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1i"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"}}},"ListIncomingTypedLinks":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1i"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"}}}}}},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Responses":{"type":"list","member":{"type":"structure","members":{"SuccessfulResponse":{"type":"structure","members":{"ListObjectAttributes":{"type":"structure","members":{"Attributes":{"shape":"S5"},"NextToken":{}}},"ListObjectChildren":{"type":"structure","members":{"Children":{"shape":"S1s"},"NextToken":{}}},"GetObjectInformation":{"type":"structure","members":{"SchemaFacets":{"shape":"S1u"},"ObjectIdentifier":{}}},"ListAttachedIndices":{"type":"structure","members":{"IndexAttachments":{"shape":"S1w"},"NextToken":{}}},"ListObjectParentPaths":{"type":"structure","members":{"PathToObjectIdentifiersList":{"shape":"S1z"},"NextToken":{}}},"ListObjectPolicies":{"type":"structure","members":{"AttachedPolicyIds":{"shape":"S22"},"NextToken":{}}},"ListPolicyAttachments":{"type":"structure","members":{"ObjectIdentifiers":{"shape":"S22"},"NextToken":{}}},"LookupPolicy":{"type":"structure","members":{"PolicyToPathList":{"shape":"S26"},"NextToken":{}}},"ListIndex":{"type":"structure","members":{"IndexAttachments":{"shape":"S1w"},"NextToken":{}}},"ListOutgoingTypedLinks":{"type":"structure","members":{"TypedLinkSpecifiers":{"shape":"S2d"},"NextToken":{}}},"ListIncomingTypedLinks":{"type":"structure","members":{"LinkSpecifiers":{"shape":"S2d"},"NextToken":{}}}}},"ExceptionResponse":{"type":"structure","members":{"Type":{},"Message":{}}}}}}}}},"BatchWrite":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/batchwrite","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","Operations"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"Operations":{"type":"list","member":{"type":"structure","members":{"CreateObject":{"type":"structure","required":["SchemaFacet","ObjectAttributeList","ParentReference","LinkName","BatchReferenceName"],"members":{"SchemaFacet":{"shape":"S1u"},"ObjectAttributeList":{"shape":"S5"},"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"AttachObject":{"type":"structure","required":["ParentReference","ChildReference","LinkName"],"members":{"ParentReference":{"shape":"Sf"},"ChildReference":{"shape":"Sf"},"LinkName":{}}},"DetachObject":{"type":"structure","required":["ParentReference","LinkName","BatchReferenceName"],"members":{"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"UpdateObjectAttributes":{"type":"structure","required":["ObjectReference","AttributeUpdates"],"members":{"ObjectReference":{"shape":"Sf"},"AttributeUpdates":{"shape":"S2q"}}},"DeleteObject":{"type":"structure","required":["ObjectReference"],"members":{"ObjectReference":{"shape":"Sf"}}},"AddFacetToObject":{"type":"structure","required":["SchemaFacet","ObjectAttributeList","ObjectReference"],"members":{"SchemaFacet":{"shape":"S3"},"ObjectAttributeList":{"shape":"S5"},"ObjectReference":{"shape":"Sf"}}},"RemoveFacetFromObject":{"type":"structure","required":["SchemaFacet","ObjectReference"],"members":{"SchemaFacet":{"shape":"S3"},"ObjectReference":{"shape":"Sf"}}},"AttachPolicy":{"type":"structure","required":["PolicyReference","ObjectReference"],"members":{"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"DetachPolicy":{"type":"structure","required":["PolicyReference","ObjectReference"],"members":{"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"CreateIndex":{"type":"structure","required":["OrderedIndexedAttributeList","IsUnique"],"members":{"OrderedIndexedAttributeList":{"shape":"S30"},"IsUnique":{"type":"boolean"},"ParentReference":{"shape":"Sf"},"LinkName":{},"BatchReferenceName":{}}},"AttachToIndex":{"type":"structure","required":["IndexReference","TargetReference"],"members":{"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"DetachFromIndex":{"type":"structure","required":["IndexReference","TargetReference"],"members":{"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"AttachTypedLink":{"type":"structure","required":["SourceObjectReference","TargetObjectReference","TypedLinkFacet","Attributes"],"members":{"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"TypedLinkFacet":{"shape":"St"},"Attributes":{"shape":"Sv"}}},"DetachTypedLink":{"type":"structure","required":["TypedLinkSpecifier"],"members":{"TypedLinkSpecifier":{"shape":"Sy"}}}}}}}},"output":{"type":"structure","members":{"Responses":{"type":"list","member":{"type":"structure","members":{"CreateObject":{"type":"structure","members":{"ObjectIdentifier":{}}},"AttachObject":{"type":"structure","members":{"attachedObjectIdentifier":{}}},"DetachObject":{"type":"structure","members":{"detachedObjectIdentifier":{}}},"UpdateObjectAttributes":{"type":"structure","members":{"ObjectIdentifier":{}}},"DeleteObject":{"type":"structure","members":{}},"AddFacetToObject":{"type":"structure","members":{}},"RemoveFacetFromObject":{"type":"structure","members":{}},"AttachPolicy":{"type":"structure","members":{}},"DetachPolicy":{"type":"structure","members":{}},"CreateIndex":{"type":"structure","members":{"ObjectIdentifier":{}}},"AttachToIndex":{"type":"structure","members":{"AttachedObjectIdentifier":{}}},"DetachFromIndex":{"type":"structure","members":{"DetachedObjectIdentifier":{}}},"AttachTypedLink":{"type":"structure","members":{"TypedLinkSpecifier":{"shape":"Sy"}}},"DetachTypedLink":{"type":"structure","members":{}}}}}}}},"CreateDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/create","responseCode":200},"input":{"type":"structure","required":["Name","SchemaArn"],"members":{"Name":{},"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn","Name","ObjectIdentifier","AppliedSchemaArn"],"members":{"DirectoryArn":{},"Name":{},"ObjectIdentifier":{},"AppliedSchemaArn":{}}}},"CreateFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet/create","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name","ObjectType"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"Attributes":{"shape":"S3s"},"ObjectType":{}}},"output":{"type":"structure","members":{}}},"CreateIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","OrderedIndexedAttributeList","IsUnique"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"OrderedIndexedAttributeList":{"shape":"S30"},"IsUnique":{"type":"boolean"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"CreateObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacets"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacets":{"shape":"S1u"},"ObjectAttributeList":{"shape":"S5"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"CreateSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/create","responseCode":200},"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"CreateTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/create","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Facet"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Facet":{"type":"structure","required":["Name","Attributes","IdentityAttributeOrder"],"members":{"Name":{},"Attributes":{"shape":"S4g"},"IdentityAttributeOrder":{"shape":"S4i"}}}}},"output":{"type":"structure","members":{}}},"DeleteDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"DeleteFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet/delete","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/delete","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"DeleteSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"DeleteTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/delete","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{}}},"DetachFromIndex":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/index/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"IndexReference":{"shape":"Sf"},"TargetReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{"DetachedObjectIdentifier":{}}}},"DetachObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ParentReference","LinkName"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ParentReference":{"shape":"Sf"},"LinkName":{}}},"output":{"type":"structure","members":{"DetachedObjectIdentifier":{}}}},"DetachPolicy":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/policy/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"DetachTypedLink":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/detach","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TypedLinkSpecifier"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TypedLinkSpecifier":{"shape":"Sy"}}}},"DisableDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/disable","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"EnableDirectory":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/directory/enable","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{}}}},"GetDirectory":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/directory/get","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","required":["Directory"],"members":{"Directory":{"shape":"S57"}}}},"GetFacet":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"Facet":{"type":"structure","members":{"Name":{},"ObjectType":{}}}}}},"GetObjectInformation":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/information","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"SchemaFacets":{"shape":"S1u"},"ObjectIdentifier":{}}}},"GetSchemaAsJson":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/json","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"}}},"output":{"type":"structure","members":{"Name":{},"Document":{}}}},"GetTypedLinkFacetInformation":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/get","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"IdentityAttributeOrder":{"shape":"S4i"}}}},"ListAppliedSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/applied","responseCode":200},"input":{"type":"structure","required":["DirectoryArn"],"members":{"DirectoryArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S5m"},"NextToken":{}}}},"ListAttachedIndices":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/indices","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","TargetReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"TargetReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"IndexAttachments":{"shape":"S1w"},"NextToken":{}}}},"ListDevelopmentSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/development","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S5m"},"NextToken":{}}}},"ListDirectories":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/directory/list","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"state":{}}},"output":{"type":"structure","required":["Directories"],"members":{"Directories":{"type":"list","member":{"shape":"S57"}},"NextToken":{}}}},"ListFacetAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet/attributes","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S3s"},"NextToken":{}}}},"ListFacetNames":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/facet/list","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FacetNames":{"type":"list","member":{}},"NextToken":{}}}},"ListIncomingTypedLinks":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/incoming","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1i"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"LinkSpecifiers":{"shape":"S2d"},"NextToken":{}}}},"ListIndex":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/index/targets","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","IndexReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"RangesOnIndexedValues":{"shape":"S1d"},"IndexReference":{"shape":"Sf"},"MaxResults":{"type":"integer"},"NextToken":{},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"IndexAttachments":{"shape":"S1w"},"NextToken":{}}}},"ListObjectAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/attributes","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"},"FacetFilter":{"shape":"S3"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S5"},"NextToken":{}}}},"ListObjectChildren":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/children","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Children":{"shape":"S1s"},"NextToken":{}}}},"ListObjectParentPaths":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/parentpaths","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"PathToObjectIdentifiersList":{"shape":"S1z"},"NextToken":{}}}},"ListObjectParents":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/parent","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"Parents":{"type":"map","key":{},"value":{}},"NextToken":{}}}},"ListObjectPolicies":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/object/policy","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"AttachedPolicyIds":{"shape":"S22"},"NextToken":{}}}},"ListOutgoingTypedLinks":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/outgoing","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"FilterAttributeRanges":{"shape":"S1i"},"FilterTypedLink":{"shape":"St"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{}}},"output":{"type":"structure","members":{"TypedLinkSpecifiers":{"shape":"S2d"},"NextToken":{}}}},"ListPolicyAttachments":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/policy/attachment","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","PolicyReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"PolicyReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"},"ConsistencyLevel":{"location":"header","locationName":"x-amz-consistency-level"}}},"output":{"type":"structure","members":{"ObjectIdentifiers":{"shape":"S22"},"NextToken":{}}}},"ListPublishedSchemaArns":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/schema/published","responseCode":200},"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaArns":{"shape":"S5m"},"NextToken":{}}}},"ListTagsForResource":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/tags","responseCode":200},"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S6n"},"NextToken":{}}}},"ListTypedLinkFacetAttributes":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/attributes","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"S4g"},"NextToken":{}}}},"ListTypedLinkFacetNames":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet/list","responseCode":200},"input":{"type":"structure","required":["SchemaArn"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FacetNames":{"type":"list","member":{}},"NextToken":{}}}},"LookupPolicy":{"http":{"requestUri":"/amazonclouddirectory/2017-01-11/policy/lookup","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"PolicyToPathList":{"shape":"S26"},"NextToken":{}}}},"PublishSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/publish","responseCode":200},"input":{"type":"structure","required":["DevelopmentSchemaArn","Version"],"members":{"DevelopmentSchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Version":{},"Name":{}}},"output":{"type":"structure","members":{"PublishedSchemaArn":{}}}},"PutSchemaFromJson":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/json","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Document"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Document":{}}},"output":{"type":"structure","members":{"Arn":{}}}},"RemoveFacetFromObject":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/facets/delete","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","SchemaFacet","ObjectReference"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"SchemaFacet":{"shape":"S3"},"ObjectReference":{"shape":"Sf"}}},"output":{"type":"structure","members":{}}},"TagResource":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/tags/add","responseCode":200},"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S6n"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/tags/remove","responseCode":200},"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"AttributeUpdates":{"type":"list","member":{"type":"structure","members":{"Attribute":{"shape":"S3t"},"Action":{}}}},"ObjectType":{}}},"output":{"type":"structure","members":{}}},"UpdateObjectAttributes":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/object/update","responseCode":200},"input":{"type":"structure","required":["DirectoryArn","ObjectReference","AttributeUpdates"],"members":{"DirectoryArn":{"location":"header","locationName":"x-amz-data-partition"},"ObjectReference":{"shape":"Sf"},"AttributeUpdates":{"shape":"S2q"}}},"output":{"type":"structure","members":{"ObjectIdentifier":{}}}},"UpdateSchema":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/schema/update","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{}}},"output":{"type":"structure","members":{"SchemaArn":{}}}},"UpdateTypedLinkFacet":{"http":{"method":"PUT","requestUri":"/amazonclouddirectory/2017-01-11/typedlink/facet","responseCode":200},"input":{"type":"structure","required":["SchemaArn","Name","AttributeUpdates","IdentityAttributeOrder"],"members":{"SchemaArn":{"location":"header","locationName":"x-amz-data-partition"},"Name":{},"AttributeUpdates":{"type":"list","member":{"type":"structure","required":["Attribute","Action"],"members":{"Attribute":{"shape":"S4h"},"Action":{}}}},"IdentityAttributeOrder":{"shape":"S4i"}}},"output":{"type":"structure","members":{}}}},"shapes":{"S3":{"type":"structure","members":{"SchemaArn":{},"FacetName":{}}},"S5":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{"shape":"S7"},"Value":{"shape":"S9"}}}},"S7":{"type":"structure","required":["SchemaArn","FacetName","Name"],"members":{"SchemaArn":{},"FacetName":{},"Name":{}}},"S9":{"type":"structure","members":{"StringValue":{},"BinaryValue":{"type":"blob"},"BooleanValue":{"type":"boolean"},"NumberValue":{},"DatetimeValue":{"type":"timestamp"}}},"Sf":{"type":"structure","members":{"Selector":{}}},"St":{"type":"structure","required":["SchemaArn","TypedLinkName"],"members":{"SchemaArn":{},"TypedLinkName":{}}},"Sv":{"type":"list","member":{"type":"structure","required":["AttributeName","Value"],"members":{"AttributeName":{},"Value":{"shape":"S9"}}}},"Sy":{"type":"structure","required":["TypedLinkFacet","SourceObjectReference","TargetObjectReference","IdentityAttributeValues"],"members":{"TypedLinkFacet":{"shape":"St"},"SourceObjectReference":{"shape":"Sf"},"TargetObjectReference":{"shape":"Sf"},"IdentityAttributeValues":{"shape":"Sv"}}},"S1d":{"type":"list","member":{"type":"structure","members":{"AttributeKey":{"shape":"S7"},"Range":{"shape":"S1f"}}}},"S1f":{"type":"structure","required":["StartMode","EndMode"],"members":{"StartMode":{},"StartValue":{"shape":"S9"},"EndMode":{},"EndValue":{"shape":"S9"}}},"S1i":{"type":"list","member":{"type":"structure","required":["Range"],"members":{"AttributeName":{},"Range":{"shape":"S1f"}}}},"S1s":{"type":"map","key":{},"value":{}},"S1u":{"type":"list","member":{"shape":"S3"}},"S1w":{"type":"list","member":{"type":"structure","members":{"IndexedAttributes":{"shape":"S5"},"ObjectIdentifier":{}}}},"S1z":{"type":"list","member":{"type":"structure","members":{"Path":{},"ObjectIdentifiers":{"shape":"S22"}}}},"S22":{"type":"list","member":{}},"S26":{"type":"list","member":{"type":"structure","members":{"Path":{},"Policies":{"type":"list","member":{"type":"structure","members":{"PolicyId":{},"ObjectIdentifier":{},"PolicyType":{}}}}}}},"S2d":{"type":"list","member":{"shape":"Sy"}},"S2q":{"type":"list","member":{"type":"structure","members":{"ObjectAttributeKey":{"shape":"S7"},"ObjectAttributeAction":{"type":"structure","members":{"ObjectAttributeActionType":{},"ObjectAttributeUpdateValue":{"shape":"S9"}}}}}},"S30":{"type":"list","member":{"shape":"S7"}},"S3s":{"type":"list","member":{"shape":"S3t"}},"S3t":{"type":"structure","required":["Name"],"members":{"Name":{},"AttributeDefinition":{"type":"structure","required":["Type"],"members":{"Type":{},"DefaultValue":{"shape":"S9"},"IsImmutable":{"type":"boolean"},"Rules":{"shape":"S3w"}}},"AttributeReference":{"type":"structure","required":["TargetFacetName","TargetAttributeName"],"members":{"TargetFacetName":{},"TargetAttributeName":{}}},"RequiredBehavior":{}}},"S3w":{"type":"map","key":{},"value":{"type":"structure","members":{"Type":{},"Parameters":{"type":"map","key":{},"value":{}}}}},"S4g":{"type":"list","member":{"shape":"S4h"}},"S4h":{"type":"structure","required":["Name","Type","RequiredBehavior"],"members":{"Name":{},"Type":{},"DefaultValue":{"shape":"S9"},"IsImmutable":{"type":"boolean"},"Rules":{"shape":"S3w"},"RequiredBehavior":{}}},"S4i":{"type":"list","member":{}},"S57":{"type":"structure","members":{"Name":{},"DirectoryArn":{},"State":{},"CreationDateTime":{"type":"timestamp"}}},"S5m":{"type":"list","member":{}},"S6n":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 142 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListAppliedSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListAttachedIndices":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListDevelopmentSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListDirectories":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListFacetAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListFacetNames":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListIndex":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectChildren":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectParentPaths":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectParents":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListObjectPolicies":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPolicyAttachments":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPublishedSchemaArns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTagsForResource":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTypedLinkFacetAttributes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTypedLinkFacetNames":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"LookupPolicy":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-05-15","endpointPrefix":"cloudformation","protocol":"query","serviceFullName":"AWS CloudFormation","signatureVersion":"v4","uid":"cloudformation-2010-05-15","xmlNamespace":"http://cloudformation.amazonaws.com/doc/2010-05-15/"},"operations":{"CancelUpdateStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"ClientRequestToken":{}}}},"ContinueUpdateRollback":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"RoleARN":{},"ResourcesToSkip":{"type":"list","member":{}},"ClientRequestToken":{}}},"output":{"resultWrapper":"ContinueUpdateRollbackResult","type":"structure","members":{}}},"CreateChangeSet":{"input":{"type":"structure","required":["StackName","ChangeSetName"],"members":{"StackName":{},"TemplateBody":{},"TemplateURL":{},"UsePreviousTemplate":{"type":"boolean"},"Parameters":{"shape":"Se"},"Capabilities":{"shape":"Sj"},"ResourceTypes":{"shape":"Sl"},"RoleARN":{},"RollbackConfiguration":{"shape":"Sn"},"NotificationARNs":{"shape":"St"},"Tags":{"shape":"Sv"},"ChangeSetName":{},"ClientToken":{},"Description":{},"ChangeSetType":{}}},"output":{"resultWrapper":"CreateChangeSetResult","type":"structure","members":{"Id":{},"StackId":{}}}},"CreateStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"TemplateBody":{},"TemplateURL":{},"Parameters":{"shape":"Se"},"DisableRollback":{"type":"boolean"},"RollbackConfiguration":{"shape":"Sn"},"TimeoutInMinutes":{"type":"integer"},"NotificationARNs":{"shape":"St"},"Capabilities":{"shape":"Sj"},"ResourceTypes":{"shape":"Sl"},"RoleARN":{},"OnFailure":{},"StackPolicyBody":{},"StackPolicyURL":{},"Tags":{"shape":"Sv"},"ClientRequestToken":{},"EnableTerminationProtection":{"type":"boolean"}}},"output":{"resultWrapper":"CreateStackResult","type":"structure","members":{"StackId":{}}}},"CreateStackInstances":{"input":{"type":"structure","required":["StackSetName","Accounts","Regions"],"members":{"StackSetName":{},"Accounts":{"shape":"S1g"},"Regions":{"shape":"S1i"},"OperationPreferences":{"shape":"S1k"},"OperationId":{"idempotencyToken":true}}},"output":{"resultWrapper":"CreateStackInstancesResult","type":"structure","members":{"OperationId":{}}}},"CreateStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"Description":{},"TemplateBody":{},"TemplateURL":{},"Parameters":{"shape":"Se"},"Capabilities":{"shape":"Sj"},"Tags":{"shape":"Sv"},"ClientRequestToken":{"idempotencyToken":true}}},"output":{"resultWrapper":"CreateStackSetResult","type":"structure","members":{"StackSetId":{}}}},"DeleteChangeSet":{"input":{"type":"structure","required":["ChangeSetName"],"members":{"ChangeSetName":{},"StackName":{}}},"output":{"resultWrapper":"DeleteChangeSetResult","type":"structure","members":{}}},"DeleteStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"RetainResources":{"type":"list","member":{}},"RoleARN":{},"ClientRequestToken":{}}}},"DeleteStackInstances":{"input":{"type":"structure","required":["StackSetName","Accounts","Regions","RetainStacks"],"members":{"StackSetName":{},"Accounts":{"shape":"S1g"},"Regions":{"shape":"S1i"},"OperationPreferences":{"shape":"S1k"},"RetainStacks":{"type":"boolean"},"OperationId":{"idempotencyToken":true}}},"output":{"resultWrapper":"DeleteStackInstancesResult","type":"structure","members":{"OperationId":{}}}},"DeleteStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{}}},"output":{"resultWrapper":"DeleteStackSetResult","type":"structure","members":{}}},"DescribeAccountLimits":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"AccountLimits":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{"type":"integer"}}}},"NextToken":{}}}},"DescribeChangeSet":{"input":{"type":"structure","required":["ChangeSetName"],"members":{"ChangeSetName":{},"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"DescribeChangeSetResult","type":"structure","members":{"ChangeSetName":{},"ChangeSetId":{},"StackId":{},"StackName":{},"Description":{},"Parameters":{"shape":"Se"},"CreationTime":{"type":"timestamp"},"ExecutionStatus":{},"Status":{},"StatusReason":{},"NotificationARNs":{"shape":"St"},"RollbackConfiguration":{"shape":"Sn"},"Capabilities":{"shape":"Sj"},"Tags":{"shape":"Sv"},"Changes":{"type":"list","member":{"type":"structure","members":{"Type":{},"ResourceChange":{"type":"structure","members":{"Action":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"Replacement":{},"Scope":{"type":"list","member":{}},"Details":{"type":"list","member":{"type":"structure","members":{"Target":{"type":"structure","members":{"Attribute":{},"Name":{},"RequiresRecreation":{}}},"Evaluation":{},"ChangeSource":{},"CausingEntity":{}}}}}}}}},"NextToken":{}}}},"DescribeStackEvents":{"input":{"type":"structure","members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"DescribeStackEventsResult","type":"structure","members":{"StackEvents":{"type":"list","member":{"type":"structure","required":["StackId","EventId","StackName","Timestamp"],"members":{"StackId":{},"EventId":{},"StackName":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"Timestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{},"ResourceProperties":{},"ClientRequestToken":{}}}},"NextToken":{}}}},"DescribeStackInstance":{"input":{"type":"structure","required":["StackSetName","StackInstanceAccount","StackInstanceRegion"],"members":{"StackSetName":{},"StackInstanceAccount":{},"StackInstanceRegion":{}}},"output":{"resultWrapper":"DescribeStackInstanceResult","type":"structure","members":{"StackInstance":{"type":"structure","members":{"StackSetId":{},"Region":{},"Account":{},"StackId":{},"Status":{},"StatusReason":{}}}}}},"DescribeStackResource":{"input":{"type":"structure","required":["StackName","LogicalResourceId"],"members":{"StackName":{},"LogicalResourceId":{}}},"output":{"resultWrapper":"DescribeStackResourceResult","type":"structure","members":{"StackResourceDetail":{"type":"structure","required":["LogicalResourceId","ResourceType","LastUpdatedTimestamp","ResourceStatus"],"members":{"StackName":{},"StackId":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"LastUpdatedTimestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{},"Description":{},"Metadata":{}}}}}},"DescribeStackResources":{"input":{"type":"structure","members":{"StackName":{},"LogicalResourceId":{},"PhysicalResourceId":{}}},"output":{"resultWrapper":"DescribeStackResourcesResult","type":"structure","members":{"StackResources":{"type":"list","member":{"type":"structure","required":["LogicalResourceId","ResourceType","Timestamp","ResourceStatus"],"members":{"StackName":{},"StackId":{},"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"Timestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{},"Description":{}}}}}}},"DescribeStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{}}},"output":{"resultWrapper":"DescribeStackSetResult","type":"structure","members":{"StackSet":{"type":"structure","members":{"StackSetName":{},"StackSetId":{},"Description":{},"Status":{},"TemplateBody":{},"Parameters":{"shape":"Se"},"Capabilities":{"shape":"Sj"},"Tags":{"shape":"Sv"}}}}}},"DescribeStackSetOperation":{"input":{"type":"structure","required":["StackSetName","OperationId"],"members":{"StackSetName":{},"OperationId":{}}},"output":{"resultWrapper":"DescribeStackSetOperationResult","type":"structure","members":{"StackSetOperation":{"type":"structure","members":{"OperationId":{},"StackSetId":{},"Action":{},"Status":{},"OperationPreferences":{"shape":"S1k"},"RetainStacks":{"type":"boolean"},"CreationTimestamp":{"type":"timestamp"},"EndTimestamp":{"type":"timestamp"}}}}}},"DescribeStacks":{"input":{"type":"structure","members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"DescribeStacksResult","type":"structure","members":{"Stacks":{"type":"list","member":{"type":"structure","required":["StackName","CreationTime","StackStatus"],"members":{"StackId":{},"StackName":{},"ChangeSetId":{},"Description":{},"Parameters":{"shape":"Se"},"CreationTime":{"type":"timestamp"},"DeletionTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"},"RollbackConfiguration":{"shape":"Sn"},"StackStatus":{},"StackStatusReason":{},"DisableRollback":{"type":"boolean"},"NotificationARNs":{"shape":"St"},"TimeoutInMinutes":{"type":"integer"},"Capabilities":{"shape":"Sj"},"Outputs":{"type":"list","member":{"type":"structure","members":{"OutputKey":{},"OutputValue":{},"Description":{},"ExportName":{}}}},"RoleARN":{},"Tags":{"shape":"Sv"},"EnableTerminationProtection":{"type":"boolean"},"ParentId":{},"RootId":{}}}},"NextToken":{}}}},"EstimateTemplateCost":{"input":{"type":"structure","members":{"TemplateBody":{},"TemplateURL":{},"Parameters":{"shape":"Se"}}},"output":{"resultWrapper":"EstimateTemplateCostResult","type":"structure","members":{"Url":{}}}},"ExecuteChangeSet":{"input":{"type":"structure","required":["ChangeSetName"],"members":{"ChangeSetName":{},"StackName":{},"ClientRequestToken":{}}},"output":{"resultWrapper":"ExecuteChangeSetResult","type":"structure","members":{}}},"GetStackPolicy":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{}}},"output":{"resultWrapper":"GetStackPolicyResult","type":"structure","members":{"StackPolicyBody":{}}}},"GetTemplate":{"input":{"type":"structure","members":{"StackName":{},"ChangeSetName":{},"TemplateStage":{}}},"output":{"resultWrapper":"GetTemplateResult","type":"structure","members":{"TemplateBody":{},"StagesAvailable":{"type":"list","member":{}}}}},"GetTemplateSummary":{"input":{"type":"structure","members":{"TemplateBody":{},"TemplateURL":{},"StackName":{},"StackSetName":{}}},"output":{"resultWrapper":"GetTemplateSummaryResult","type":"structure","members":{"Parameters":{"type":"list","member":{"type":"structure","members":{"ParameterKey":{},"DefaultValue":{},"ParameterType":{},"NoEcho":{"type":"boolean"},"Description":{},"ParameterConstraints":{"type":"structure","members":{"AllowedValues":{"type":"list","member":{}}}}}}},"Description":{},"Capabilities":{"shape":"Sj"},"CapabilitiesReason":{},"ResourceTypes":{"shape":"Sl"},"Version":{},"Metadata":{},"DeclaredTransforms":{"shape":"S4u"}}}},"ListChangeSets":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"ListChangeSetsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"StackId":{},"StackName":{},"ChangeSetId":{},"ChangeSetName":{},"ExecutionStatus":{},"Status":{},"StatusReason":{},"CreationTime":{"type":"timestamp"},"Description":{}}}},"NextToken":{}}}},"ListExports":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListExportsResult","type":"structure","members":{"Exports":{"type":"list","member":{"type":"structure","members":{"ExportingStackId":{},"Name":{},"Value":{}}}},"NextToken":{}}}},"ListImports":{"input":{"type":"structure","required":["ExportName"],"members":{"ExportName":{},"NextToken":{}}},"output":{"resultWrapper":"ListImportsResult","type":"structure","members":{"Imports":{"type":"list","member":{}},"NextToken":{}}}},"ListStackInstances":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"NextToken":{},"MaxResults":{"type":"integer"},"StackInstanceAccount":{},"StackInstanceRegion":{}}},"output":{"resultWrapper":"ListStackInstancesResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"StackSetId":{},"Region":{},"Account":{},"StackId":{},"Status":{},"StatusReason":{}}}},"NextToken":{}}}},"ListStackResources":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"NextToken":{}}},"output":{"resultWrapper":"ListStackResourcesResult","type":"structure","members":{"StackResourceSummaries":{"type":"list","member":{"type":"structure","required":["LogicalResourceId","ResourceType","LastUpdatedTimestamp","ResourceStatus"],"members":{"LogicalResourceId":{},"PhysicalResourceId":{},"ResourceType":{},"LastUpdatedTimestamp":{"type":"timestamp"},"ResourceStatus":{},"ResourceStatusReason":{}}}},"NextToken":{}}}},"ListStackSetOperationResults":{"input":{"type":"structure","required":["StackSetName","OperationId"],"members":{"StackSetName":{},"OperationId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"resultWrapper":"ListStackSetOperationResultsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"Account":{},"Region":{},"Status":{},"StatusReason":{},"AccountGateResult":{"type":"structure","members":{"Status":{},"StatusReason":{}}}}}},"NextToken":{}}}},"ListStackSetOperations":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"resultWrapper":"ListStackSetOperationsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"OperationId":{},"Action":{},"Status":{},"CreationTimestamp":{"type":"timestamp"},"EndTimestamp":{"type":"timestamp"}}}},"NextToken":{}}}},"ListStackSets":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"Status":{}}},"output":{"resultWrapper":"ListStackSetsResult","type":"structure","members":{"Summaries":{"type":"list","member":{"type":"structure","members":{"StackSetName":{},"StackSetId":{},"Description":{},"Status":{}}}},"NextToken":{}}}},"ListStacks":{"input":{"type":"structure","members":{"NextToken":{},"StackStatusFilter":{"type":"list","member":{}}}},"output":{"resultWrapper":"ListStacksResult","type":"structure","members":{"StackSummaries":{"type":"list","member":{"type":"structure","required":["StackName","CreationTime","StackStatus"],"members":{"StackId":{},"StackName":{},"TemplateDescription":{},"CreationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"},"DeletionTime":{"type":"timestamp"},"StackStatus":{},"StackStatusReason":{},"ParentId":{},"RootId":{}}}},"NextToken":{}}}},"SetStackPolicy":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"StackPolicyBody":{},"StackPolicyURL":{}}}},"SignalResource":{"input":{"type":"structure","required":["StackName","LogicalResourceId","UniqueId","Status"],"members":{"StackName":{},"LogicalResourceId":{},"UniqueId":{},"Status":{}}}},"StopStackSetOperation":{"input":{"type":"structure","required":["StackSetName","OperationId"],"members":{"StackSetName":{},"OperationId":{}}},"output":{"resultWrapper":"StopStackSetOperationResult","type":"structure","members":{}}},"UpdateStack":{"input":{"type":"structure","required":["StackName"],"members":{"StackName":{},"TemplateBody":{},"TemplateURL":{},"UsePreviousTemplate":{"type":"boolean"},"StackPolicyDuringUpdateBody":{},"StackPolicyDuringUpdateURL":{},"Parameters":{"shape":"Se"},"Capabilities":{"shape":"Sj"},"ResourceTypes":{"shape":"Sl"},"RoleARN":{},"RollbackConfiguration":{"shape":"Sn"},"StackPolicyBody":{},"StackPolicyURL":{},"NotificationARNs":{"shape":"St"},"Tags":{"shape":"Sv"},"ClientRequestToken":{}}},"output":{"resultWrapper":"UpdateStackResult","type":"structure","members":{"StackId":{}}}},"UpdateStackSet":{"input":{"type":"structure","required":["StackSetName"],"members":{"StackSetName":{},"Description":{},"TemplateBody":{},"TemplateURL":{},"UsePreviousTemplate":{"type":"boolean"},"Parameters":{"shape":"Se"},"Capabilities":{"shape":"Sj"},"Tags":{"shape":"Sv"},"OperationPreferences":{"shape":"S1k"},"OperationId":{"idempotencyToken":true}}},"output":{"resultWrapper":"UpdateStackSetResult","type":"structure","members":{"OperationId":{}}}},"UpdateTerminationProtection":{"input":{"type":"structure","required":["EnableTerminationProtection","StackName"],"members":{"EnableTerminationProtection":{"type":"boolean"},"StackName":{}}},"output":{"resultWrapper":"UpdateTerminationProtectionResult","type":"structure","members":{"StackId":{}}}},"ValidateTemplate":{"input":{"type":"structure","members":{"TemplateBody":{},"TemplateURL":{}}},"output":{"resultWrapper":"ValidateTemplateResult","type":"structure","members":{"Parameters":{"type":"list","member":{"type":"structure","members":{"ParameterKey":{},"DefaultValue":{},"NoEcho":{"type":"boolean"},"Description":{}}}},"Description":{},"Capabilities":{"shape":"Sj"},"CapabilitiesReason":{},"DeclaredTransforms":{"shape":"S4u"}}}}},"shapes":{"Se":{"type":"list","member":{"type":"structure","members":{"ParameterKey":{},"ParameterValue":{},"UsePreviousValue":{"type":"boolean"}}}},"Sj":{"type":"list","member":{}},"Sl":{"type":"list","member":{}},"Sn":{"type":"structure","members":{"RollbackTriggers":{"type":"list","member":{"type":"structure","required":["Arn","Type"],"members":{"Arn":{},"Type":{}}}},"MonitoringTimeInMinutes":{"type":"integer"}}},"St":{"type":"list","member":{}},"Sv":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S1g":{"type":"list","member":{}},"S1i":{"type":"list","member":{}},"S1k":{"type":"structure","members":{"RegionOrder":{"shape":"S1i"},"FailureToleranceCount":{"type":"integer"},"FailureTolerancePercentage":{"type":"integer"},"MaxConcurrentCount":{"type":"integer"},"MaxConcurrentPercentage":{"type":"integer"}}},"S4u":{"type":"list","member":{}}}}

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeStackEvents":{"input_token":"NextToken","output_token":"NextToken","result_key":"StackEvents"},"DescribeStackResources":{"result_key":"StackResources"},"DescribeStacks":{"input_token":"NextToken","output_token":"NextToken","result_key":"Stacks"},"ListExports":{"input_token":"NextToken","output_token":"NextToken","result_key":"Exports"},"ListImports":{"input_token":"NextToken","output_token":"NextToken","result_key":"Imports"},"ListStackResources":{"input_token":"NextToken","output_token":"NextToken","result_key":"StackResourceSummaries"},"ListStacks":{"input_token":"NextToken","output_token":"NextToken","result_key":"StackSummaries"}}}

/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"StackExists":{"delay":5,"operation":"DescribeStacks","maxAttempts":20,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"ValidationError","state":"retry"}]},"StackCreateComplete":{"delay":30,"operation":"DescribeStacks","maxAttempts":120,"description":"Wait until stack status is CREATE_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"CREATE_COMPLETE","matcher":"pathAll","state":"success"},{"argument":"Stacks[].StackStatus","expected":"CREATE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"DELETE_COMPLETE","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"DELETE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"ROLLBACK_COMPLETE","matcher":"pathAny","state":"failure"},{"expected":"ValidationError","matcher":"error","state":"failure"}]},"StackDeleteComplete":{"delay":30,"operation":"DescribeStacks","maxAttempts":120,"description":"Wait until stack status is DELETE_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"DELETE_COMPLETE","matcher":"pathAll","state":"success"},{"expected":"ValidationError","matcher":"error","state":"success"},{"argument":"Stacks[].StackStatus","expected":"DELETE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"CREATE_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_IN_PROGRESS","matcher":"pathAny","state":"failure"}]},"StackUpdateComplete":{"delay":30,"maxAttempts":120,"operation":"DescribeStacks","description":"Wait until stack status is UPDATE_COMPLETE.","acceptors":[{"argument":"Stacks[].StackStatus","expected":"UPDATE_COMPLETE","matcher":"pathAll","state":"success"},{"expected":"UPDATE_FAILED","matcher":"pathAny","state":"failure","argument":"Stacks[].StackStatus"},{"argument":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_FAILED","matcher":"pathAny","state":"failure"},{"expected":"UPDATE_ROLLBACK_COMPLETE","matcher":"pathAny","state":"failure","argument":"Stacks[].StackStatus"},{"expected":"ValidationError","matcher":"error","state":"failure"}]},"ChangeSetCreateComplete":{"delay":30,"operation":"DescribeChangeSet","maxAttempts":120,"description":"Wait until change set status is CREATE_COMPLETE.","acceptors":[{"argument":"Status","expected":"CREATE_COMPLETE","matcher":"path","state":"success"},{"argument":"Status","expected":"FAILED","matcher":"path","state":"failure"},{"expected":"ValidationError","matcher":"error","state":"failure"}]}}}

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-25","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","signatureVersion":"v4","uid":"cloudfront-2016-11-25"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2016-11-25/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2016-11-25/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2016-11-25/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S21"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateInvalidation":{"http":{"requestUri":"/2016-11-25/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S28","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2016-11-25/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2016-11-25/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S2e"},"Tags":{"shape":"S21"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2016-11-25/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2016-11-25/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2016-11-25/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2016-11-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S2e"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2016-11-25/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3a"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2016-11-25/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3a"}},"payload":"DistributionList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2016-11-25/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2016-11-25/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"Sy"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2016-11-25/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S21"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2016-11-25/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S21","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2016-11-25/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2016-11-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2016-11-25/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2016-11-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2016-11-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}}}}}}}}},"Sn":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}},"So":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Sy":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S12":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"}}}}},"S13":{"type":"list","member":{"locationName":"Method"}},"S16":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","members":{"LambdaFunctionARN":{},"EventType":{}}}}}},"S1a":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}}}}},"S1d":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1i":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1m":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S1s":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"DistributionConfig":{"shape":"S7"}}},"S1u":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S21":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S28":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S2c":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S28"}}},"S2e":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"Sy"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S2f":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S2i":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"StreamingDistributionConfig":{"shape":"S2e"}}},"S3a":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}}}}}}}

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","output_token":"DistributionList.NextMarker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","output_token":"InvalidationList.NextMarker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","output_token":"StreamingDistributionList.NextMarker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":25,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 149 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-03-25","endpointPrefix":"cloudfront","globalEndpoint":"cloudfront.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"CloudFront","serviceFullName":"Amazon CloudFront","signatureVersion":"v4","uid":"cloudfront-2017-03-25"},"operations":{"CreateCloudFrontOriginAccessIdentity":{"http":{"requestUri":"/2017-03-25/origin-access-identity/cloudfront","responseCode":201},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"CreateDistribution":{"http":{"requestUri":"/2017-03-25/distribution","responseCode":201},"input":{"type":"structure","required":["DistributionConfig"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateDistributionWithTags":{"http":{"requestUri":"/2017-03-25/distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["DistributionConfigWithTags"],"members":{"DistributionConfigWithTags":{"locationName":"DistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"},"type":"structure","required":["DistributionConfig","Tags"],"members":{"DistributionConfig":{"shape":"S7"},"Tags":{"shape":"S21"}}}},"payload":"DistributionConfigWithTags"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"CreateInvalidation":{"http":{"requestUri":"/2017-03-25/distribution/{DistributionId}/invalidation","responseCode":201},"input":{"type":"structure","required":["DistributionId","InvalidationBatch"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"InvalidationBatch":{"shape":"S28","locationName":"InvalidationBatch","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"InvalidationBatch"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"},"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"CreateStreamingDistribution":{"http":{"requestUri":"/2017-03-25/streaming-distribution","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfig"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"CreateStreamingDistributionWithTags":{"http":{"requestUri":"/2017-03-25/streaming-distribution?WithTags","responseCode":201},"input":{"type":"structure","required":["StreamingDistributionConfigWithTags"],"members":{"StreamingDistributionConfigWithTags":{"locationName":"StreamingDistributionConfigWithTags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"},"type":"structure","required":["StreamingDistributionConfig","Tags"],"members":{"StreamingDistributionConfig":{"shape":"S2e"},"Tags":{"shape":"S21"}}}},"payload":"StreamingDistributionConfigWithTags"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"Location":{"location":"header","locationName":"Location"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"DeleteCloudFrontOriginAccessIdentity":{"http":{"method":"DELETE","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteDistribution":{"http":{"method":"DELETE","requestUri":"/2017-03-25/distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"DeleteServiceLinkedRole":{"http":{"method":"DELETE","requestUri":"/2017-03-25/service-linked-role/{RoleName}","responseCode":204},"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{"location":"uri","locationName":"RoleName"}}}},"DeleteStreamingDistribution":{"http":{"method":"DELETE","requestUri":"/2017-03-25/streaming-distribution/{Id}","responseCode":204},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}}}},"GetCloudFrontOriginAccessIdentity":{"http":{"method":"GET","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"GetCloudFrontOriginAccessIdentityConfig":{"http":{"method":"GET","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentityConfig"}},"GetDistribution":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"GetDistributionConfig":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"DistributionConfig":{"shape":"S7"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"DistributionConfig"}},"GetInvalidation":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{DistributionId}/invalidation/{Id}"},"input":{"type":"structure","required":["DistributionId","Id"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Invalidation":{"shape":"S2c"}},"payload":"Invalidation"}},"GetStreamingDistribution":{"http":{"method":"GET","requestUri":"/2017-03-25/streaming-distribution/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}},"GetStreamingDistributionConfig":{"http":{"method":"GET","requestUri":"/2017-03-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"StreamingDistributionConfig":{"shape":"S2e"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistributionConfig"}},"ListCloudFrontOriginAccessIdentities":{"http":{"method":"GET","requestUri":"/2017-03-25/origin-access-identity/cloudfront"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentityList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CloudFrontOriginAccessIdentitySummary","type":"structure","required":["Id","S3CanonicalUserId","Comment"],"members":{"Id":{},"S3CanonicalUserId":{},"Comment":{}}}}}}},"payload":"CloudFrontOriginAccessIdentityList"}},"ListDistributions":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3b"}},"payload":"DistributionList"}},"ListDistributionsByWebACLId":{"http":{"method":"GET","requestUri":"/2017-03-25/distributionsByWebACLId/{WebACLId}"},"input":{"type":"structure","required":["WebACLId"],"members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"},"WebACLId":{"location":"uri","locationName":"WebACLId"}}},"output":{"type":"structure","members":{"DistributionList":{"shape":"S3b"}},"payload":"DistributionList"}},"ListInvalidations":{"http":{"method":"GET","requestUri":"/2017-03-25/distribution/{DistributionId}/invalidation"},"input":{"type":"structure","required":["DistributionId"],"members":{"DistributionId":{"location":"uri","locationName":"DistributionId"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"InvalidationList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"InvalidationSummary","type":"structure","required":["Id","CreateTime","Status"],"members":{"Id":{},"CreateTime":{"type":"timestamp"},"Status":{}}}}}}},"payload":"InvalidationList"}},"ListStreamingDistributions":{"http":{"method":"GET","requestUri":"/2017-03-25/streaming-distribution"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems"}}},"output":{"type":"structure","members":{"StreamingDistributionList":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"StreamingDistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","S3Origin","Aliases","TrustedSigners","Comment","PriceClass","Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"TrustedSigners":{"shape":"Sy"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"}}}}}}},"payload":"StreamingDistributionList"}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2017-03-25/tagging"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"querystring","locationName":"Resource"}}},"output":{"type":"structure","required":["Tags"],"members":{"Tags":{"shape":"S21"}},"payload":"Tags"}},"TagResource":{"http":{"requestUri":"/2017-03-25/tagging?Operation=Tag","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"Tags":{"shape":"S21","locationName":"Tags","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}}},"payload":"Tags"}},"UntagResource":{"http":{"requestUri":"/2017-03-25/tagging?Operation=Untag","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"querystring","locationName":"Resource"},"TagKeys":{"locationName":"TagKeys","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"},"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Key"}}}}},"payload":"TagKeys"}},"UpdateCloudFrontOriginAccessIdentity":{"http":{"method":"PUT","requestUri":"/2017-03-25/origin-access-identity/cloudfront/{Id}/config"},"input":{"type":"structure","required":["CloudFrontOriginAccessIdentityConfig","Id"],"members":{"CloudFrontOriginAccessIdentityConfig":{"shape":"S2","locationName":"CloudFrontOriginAccessIdentityConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"CloudFrontOriginAccessIdentityConfig"},"output":{"type":"structure","members":{"CloudFrontOriginAccessIdentity":{"shape":"S5"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"CloudFrontOriginAccessIdentity"}},"UpdateDistribution":{"http":{"method":"PUT","requestUri":"/2017-03-25/distribution/{Id}/config"},"input":{"type":"structure","required":["DistributionConfig","Id"],"members":{"DistributionConfig":{"shape":"S7","locationName":"DistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"DistributionConfig"},"output":{"type":"structure","members":{"Distribution":{"shape":"S1s"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"Distribution"}},"UpdateStreamingDistribution":{"http":{"method":"PUT","requestUri":"/2017-03-25/streaming-distribution/{Id}/config"},"input":{"type":"structure","required":["StreamingDistributionConfig","Id"],"members":{"StreamingDistributionConfig":{"shape":"S2e","locationName":"StreamingDistributionConfig","xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2017-03-25/"}},"Id":{"location":"uri","locationName":"Id"},"IfMatch":{"location":"header","locationName":"If-Match"}},"payload":"StreamingDistributionConfig"},"output":{"type":"structure","members":{"StreamingDistribution":{"shape":"S2i"},"ETag":{"location":"header","locationName":"ETag"}},"payload":"StreamingDistribution"}}},"shapes":{"S2":{"type":"structure","required":["CallerReference","Comment"],"members":{"CallerReference":{},"Comment":{}}},"S5":{"type":"structure","required":["Id","S3CanonicalUserId"],"members":{"Id":{},"S3CanonicalUserId":{},"CloudFrontOriginAccessIdentityConfig":{"shape":"S2"}}},"S7":{"type":"structure","required":["CallerReference","Origins","DefaultCacheBehavior","Comment","Enabled"],"members":{"CallerReference":{},"Aliases":{"shape":"S8"},"DefaultRootObject":{},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","IncludeCookies","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"IncludeCookies":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}},"S8":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CNAME"}}}},"Sb":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Origin","type":"structure","required":["Id","DomainName"],"members":{"Id":{},"DomainName":{},"OriginPath":{},"CustomHeaders":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"OriginCustomHeader","type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}}}}},"S3OriginConfig":{"type":"structure","required":["OriginAccessIdentity"],"members":{"OriginAccessIdentity":{}}},"CustomOriginConfig":{"type":"structure","required":["HTTPPort","HTTPSPort","OriginProtocolPolicy"],"members":{"HTTPPort":{"type":"integer"},"HTTPSPort":{"type":"integer"},"OriginProtocolPolicy":{},"OriginSslProtocols":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"SslProtocol"}}}},"OriginReadTimeout":{"type":"integer"},"OriginKeepaliveTimeout":{"type":"integer"}}}}}}}},"Sn":{"type":"structure","required":["TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}},"So":{"type":"structure","required":["QueryString","Cookies"],"members":{"QueryString":{"type":"boolean"},"Cookies":{"type":"structure","required":["Forward"],"members":{"Forward":{},"WhitelistedNames":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Headers":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}},"QueryStringCacheKeys":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Name"}}}}}},"Sy":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"AwsAccountNumber"}}}},"S12":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"},"CachedMethods":{"type":"structure","required":["Quantity","Items"],"members":{"Quantity":{"type":"integer"},"Items":{"shape":"S13"}}}}},"S13":{"type":"list","member":{"locationName":"Method"}},"S16":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"LambdaFunctionAssociation","type":"structure","members":{"LambdaFunctionARN":{},"EventType":{}}}}}},"S1a":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CacheBehavior","type":"structure","required":["PathPattern","TargetOriginId","ForwardedValues","TrustedSigners","ViewerProtocolPolicy","MinTTL"],"members":{"PathPattern":{},"TargetOriginId":{},"ForwardedValues":{"shape":"So"},"TrustedSigners":{"shape":"Sy"},"ViewerProtocolPolicy":{},"MinTTL":{"type":"long"},"AllowedMethods":{"shape":"S12"},"SmoothStreaming":{"type":"boolean"},"DefaultTTL":{"type":"long"},"MaxTTL":{"type":"long"},"Compress":{"type":"boolean"},"LambdaFunctionAssociations":{"shape":"S16"}}}}}},"S1d":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"CustomErrorResponse","type":"structure","required":["ErrorCode"],"members":{"ErrorCode":{"type":"integer"},"ResponsePagePath":{},"ResponseCode":{},"ErrorCachingMinTTL":{"type":"long"}}}}}},"S1i":{"type":"structure","members":{"CloudFrontDefaultCertificate":{"type":"boolean"},"IAMCertificateId":{},"ACMCertificateArn":{},"SSLSupportMethod":{},"MinimumProtocolVersion":{},"Certificate":{"deprecated":true},"CertificateSource":{"deprecated":true}}},"S1m":{"type":"structure","required":["GeoRestriction"],"members":{"GeoRestriction":{"type":"structure","required":["RestrictionType","Quantity"],"members":{"RestrictionType":{},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Location"}}}}}},"S1s":{"type":"structure","required":["Id","ARN","Status","LastModifiedTime","InProgressInvalidationBatches","DomainName","ActiveTrustedSigners","DistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"InProgressInvalidationBatches":{"type":"integer"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"DistributionConfig":{"shape":"S7"}}},"S1u":{"type":"structure","required":["Enabled","Quantity"],"members":{"Enabled":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Signer","type":"structure","members":{"AwsAccountNumber":{},"KeyPairIds":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"KeyPairId"}}}}}}}}},"S21":{"type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Tag","type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}}}},"S28":{"type":"structure","required":["Paths","CallerReference"],"members":{"Paths":{"type":"structure","required":["Quantity"],"members":{"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"Path"}}}},"CallerReference":{}}},"S2c":{"type":"structure","required":["Id","Status","CreateTime","InvalidationBatch"],"members":{"Id":{},"Status":{},"CreateTime":{"type":"timestamp"},"InvalidationBatch":{"shape":"S28"}}},"S2e":{"type":"structure","required":["CallerReference","S3Origin","Comment","TrustedSigners","Enabled"],"members":{"CallerReference":{},"S3Origin":{"shape":"S2f"},"Aliases":{"shape":"S8"},"Comment":{},"Logging":{"type":"structure","required":["Enabled","Bucket","Prefix"],"members":{"Enabled":{"type":"boolean"},"Bucket":{},"Prefix":{}}},"TrustedSigners":{"shape":"Sy"},"PriceClass":{},"Enabled":{"type":"boolean"}}},"S2f":{"type":"structure","required":["DomainName","OriginAccessIdentity"],"members":{"DomainName":{},"OriginAccessIdentity":{}}},"S2i":{"type":"structure","required":["Id","ARN","Status","DomainName","ActiveTrustedSigners","StreamingDistributionConfig"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"ActiveTrustedSigners":{"shape":"S1u"},"StreamingDistributionConfig":{"shape":"S2e"}}},"S3b":{"type":"structure","required":["Marker","MaxItems","IsTruncated","Quantity"],"members":{"Marker":{},"NextMarker":{},"MaxItems":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Quantity":{"type":"integer"},"Items":{"type":"list","member":{"locationName":"DistributionSummary","type":"structure","required":["Id","ARN","Status","LastModifiedTime","DomainName","Aliases","Origins","DefaultCacheBehavior","CacheBehaviors","CustomErrorResponses","Comment","PriceClass","Enabled","ViewerCertificate","Restrictions","WebACLId","HttpVersion","IsIPV6Enabled"],"members":{"Id":{},"ARN":{},"Status":{},"LastModifiedTime":{"type":"timestamp"},"DomainName":{},"Aliases":{"shape":"S8"},"Origins":{"shape":"Sb"},"DefaultCacheBehavior":{"shape":"Sn"},"CacheBehaviors":{"shape":"S1a"},"CustomErrorResponses":{"shape":"S1d"},"Comment":{},"PriceClass":{},"Enabled":{"type":"boolean"},"ViewerCertificate":{"shape":"S1i"},"Restrictions":{"shape":"S1m"},"WebACLId":{},"HttpVersion":{},"IsIPV6Enabled":{"type":"boolean"}}}}}}}}

/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListCloudFrontOriginAccessIdentities":{"input_token":"Marker","limit_key":"MaxItems","more_results":"CloudFrontOriginAccessIdentityList.IsTruncated","output_token":"CloudFrontOriginAccessIdentityList.NextMarker","result_key":"CloudFrontOriginAccessIdentityList.Items"},"ListDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"DistributionList.IsTruncated","output_token":"DistributionList.NextMarker","result_key":"DistributionList.Items"},"ListInvalidations":{"input_token":"Marker","limit_key":"MaxItems","more_results":"InvalidationList.IsTruncated","output_token":"InvalidationList.NextMarker","result_key":"InvalidationList.Items"},"ListStreamingDistributions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"StreamingDistributionList.IsTruncated","output_token":"StreamingDistributionList.NextMarker","result_key":"StreamingDistributionList.Items"}}}

/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"DistributionDeployed":{"delay":60,"operation":"GetDistribution","maxAttempts":25,"description":"Wait until a distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"Distribution.Status"}]},"InvalidationCompleted":{"delay":20,"operation":"GetInvalidation","maxAttempts":30,"description":"Wait until an invalidation has completed.","acceptors":[{"expected":"Completed","matcher":"path","state":"success","argument":"Invalidation.Status"}]},"StreamingDistributionDeployed":{"delay":60,"operation":"GetStreamingDistribution","maxAttempts":25,"description":"Wait until a streaming distribution is deployed.","acceptors":[{"expected":"Deployed","matcher":"path","state":"success","argument":"StreamingDistribution.Status"}]}}}

/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-05-30","endpointPrefix":"cloudhsm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CloudHSM","serviceFullName":"Amazon CloudHSM","serviceId":"CloudHSM","signatureVersion":"v4","targetPrefix":"CloudHsmFrontendService","uid":"cloudhsm-2014-05-30"},"operations":{"AddTagsToResource":{"input":{"type":"structure","required":["ResourceArn","TagList"],"members":{"ResourceArn":{},"TagList":{"shape":"S3"}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"CreateHapg":{"input":{"type":"structure","required":["Label"],"members":{"Label":{}}},"output":{"type":"structure","members":{"HapgArn":{}}}},"CreateHsm":{"input":{"type":"structure","required":["SubnetId","SshKey","IamRoleArn","SubscriptionType"],"members":{"SubnetId":{"locationName":"SubnetId"},"SshKey":{"locationName":"SshKey"},"EniIp":{"locationName":"EniIp"},"IamRoleArn":{"locationName":"IamRoleArn"},"ExternalId":{"locationName":"ExternalId"},"SubscriptionType":{"locationName":"SubscriptionType"},"ClientToken":{"locationName":"ClientToken"},"SyslogIp":{"locationName":"SyslogIp"}},"locationName":"CreateHsmRequest"},"output":{"type":"structure","members":{"HsmArn":{}}}},"CreateLunaClient":{"input":{"type":"structure","required":["Certificate"],"members":{"Label":{},"Certificate":{}}},"output":{"type":"structure","members":{"ClientArn":{}}}},"DeleteHapg":{"input":{"type":"structure","required":["HapgArn"],"members":{"HapgArn":{}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"DeleteHsm":{"input":{"type":"structure","required":["HsmArn"],"members":{"HsmArn":{"locationName":"HsmArn"}},"locationName":"DeleteHsmRequest"},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"DeleteLunaClient":{"input":{"type":"structure","required":["ClientArn"],"members":{"ClientArn":{}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}},"DescribeHapg":{"input":{"type":"structure","required":["HapgArn"],"members":{"HapgArn":{}}},"output":{"type":"structure","members":{"HapgArn":{},"HapgSerial":{},"HsmsLastActionFailed":{"shape":"Sz"},"HsmsPendingDeletion":{"shape":"Sz"},"HsmsPendingRegistration":{"shape":"Sz"},"Label":{},"LastModifiedTimestamp":{},"PartitionSerialList":{"shape":"S11"},"State":{}}}},"DescribeHsm":{"input":{"type":"structure","members":{"HsmArn":{},"HsmSerialNumber":{}}},"output":{"type":"structure","members":{"HsmArn":{},"Status":{},"StatusDetails":{},"AvailabilityZone":{},"EniId":{},"EniIp":{},"SubscriptionType":{},"SubscriptionStartDate":{},"SubscriptionEndDate":{},"VpcId":{},"SubnetId":{},"IamRoleArn":{},"SerialNumber":{},"VendorName":{},"HsmType":{},"SoftwareVersion":{},"SshPublicKey":{},"SshKeyLastUpdated":{},"ServerCertUri":{},"ServerCertLastUpdated":{},"Partitions":{"type":"list","member":{}}}}},"DescribeLunaClient":{"input":{"type":"structure","members":{"ClientArn":{},"CertificateFingerprint":{}}},"output":{"type":"structure","members":{"ClientArn":{},"Certificate":{},"CertificateFingerprint":{},"LastModifiedTimestamp":{},"Label":{}}}},"GetConfig":{"input":{"type":"structure","required":["ClientArn","ClientVersion","HapgList"],"members":{"ClientArn":{},"ClientVersion":{},"HapgList":{"shape":"S1i"}}},"output":{"type":"structure","members":{"ConfigType":{},"ConfigFile":{},"ConfigCred":{}}}},"ListAvailableZones":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AZList":{"type":"list","member":{}}}}},"ListHapgs":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"type":"structure","required":["HapgList"],"members":{"HapgList":{"shape":"S1i"},"NextToken":{}}}},"ListHsms":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"type":"structure","members":{"HsmList":{"shape":"Sz"},"NextToken":{}}}},"ListLunaClients":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"type":"structure","required":["ClientList"],"members":{"ClientList":{"type":"list","member":{}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","required":["TagList"],"members":{"TagList":{"shape":"S3"}}}},"ModifyHapg":{"input":{"type":"structure","required":["HapgArn"],"members":{"HapgArn":{},"Label":{},"PartitionSerialList":{"shape":"S11"}}},"output":{"type":"structure","members":{"HapgArn":{}}}},"ModifyHsm":{"input":{"type":"structure","required":["HsmArn"],"members":{"HsmArn":{"locationName":"HsmArn"},"SubnetId":{"locationName":"SubnetId"},"EniIp":{"locationName":"EniIp"},"IamRoleArn":{"locationName":"IamRoleArn"},"ExternalId":{"locationName":"ExternalId"},"SyslogIp":{"locationName":"SyslogIp"}},"locationName":"ModifyHsmRequest"},"output":{"type":"structure","members":{"HsmArn":{}}}},"ModifyLunaClient":{"input":{"type":"structure","required":["ClientArn","Certificate"],"members":{"ClientArn":{},"Certificate":{}}},"output":{"type":"structure","members":{"ClientArn":{}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceArn","TagKeyList"],"members":{"ResourceArn":{},"TagKeyList":{"type":"list","member":{}}}},"output":{"type":"structure","required":["Status"],"members":{"Status":{}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sz":{"type":"list","member":{}},"S11":{"type":"list","member":{}},"S1i":{"type":"list","member":{}}}}

/***/ }),
/* 153 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 154 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-04-28","endpointPrefix":"cloudhsmv2","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CloudHSM V2","serviceFullName":"AWS CloudHSM V2","signatureVersion":"v4","signingName":"cloudhsm","targetPrefix":"BaldrApiService","uid":"cloudhsmv2-2017-04-28"},"operations":{"CreateCluster":{"input":{"type":"structure","required":["SubnetIds","HsmType"],"members":{"SubnetIds":{"type":"list","member":{}},"HsmType":{},"SourceBackupId":{}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S7"}}}},"CreateHsm":{"input":{"type":"structure","required":["ClusterId","AvailabilityZone"],"members":{"ClusterId":{},"AvailabilityZone":{},"IpAddress":{}}},"output":{"type":"structure","members":{"Hsm":{"shape":"Sc"}}}},"DeleteCluster":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S7"}}}},"DeleteHsm":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"HsmId":{},"EniId":{},"EniIp":{}}},"output":{"type":"structure","members":{"HsmId":{}}}},"DescribeBackups":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"},"Filters":{"shape":"S10"}}},"output":{"type":"structure","members":{"Backups":{"type":"list","member":{"type":"structure","required":["BackupId"],"members":{"BackupId":{},"BackupState":{},"ClusterId":{},"CreateTimestamp":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeClusters":{"input":{"type":"structure","members":{"Filters":{"shape":"S10"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Clusters":{"type":"list","member":{"shape":"S7"}},"NextToken":{}}}},"InitializeCluster":{"input":{"type":"structure","required":["ClusterId","SignedCert","TrustAnchor"],"members":{"ClusterId":{},"SignedCert":{},"TrustAnchor":{}}},"output":{"type":"structure","members":{"State":{},"StateMessage":{}}}},"ListTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","required":["TagList"],"members":{"TagList":{"shape":"S1e"},"NextToken":{}}}},"TagResource":{"input":{"type":"structure","required":["ResourceId","TagList"],"members":{"ResourceId":{},"TagList":{"shape":"S1e"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["ResourceId","TagKeyList"],"members":{"ResourceId":{},"TagKeyList":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}}},"shapes":{"S7":{"type":"structure","members":{"BackupPolicy":{},"ClusterId":{},"CreateTimestamp":{"type":"timestamp"},"Hsms":{"type":"list","member":{"shape":"Sc"}},"HsmType":{},"PreCoPassword":{},"SecurityGroup":{},"SourceBackupId":{},"State":{},"StateMessage":{},"SubnetMapping":{"type":"map","key":{},"value":{}},"VpcId":{},"Certificates":{"type":"structure","members":{"ClusterCsr":{},"HsmCertificate":{},"AwsHardwareCertificate":{},"ManufacturerHardwareCertificate":{},"ClusterCertificate":{}}}}},"Sc":{"type":"structure","required":["HsmId"],"members":{"AvailabilityZone":{},"ClusterId":{},"SubnetId":{},"EniId":{},"EniIp":{},"HsmId":{},"State":{},"StateMessage":{}}},"S10":{"type":"map","key":{},"value":{"type":"list","member":{}}},"S1e":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 155 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeBackups":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"DescribeClusters":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTags":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 156 */
/***/ (function(module, exports) {

module.exports = {"metadata":{"apiVersion":"2011-02-01","endpointPrefix":"cloudsearch","serviceFullName":"Amazon CloudSearch","signatureVersion":"v4","xmlNamespace":"http://cloudsearch.amazonaws.com/doc/2011-02-01/","protocol":"query"},"operations":{"CreateDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"CreateDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S4"}}}},"DefineIndexField":{"input":{"type":"structure","required":["DomainName","IndexField"],"members":{"DomainName":{},"IndexField":{"shape":"Sf"}}},"output":{"resultWrapper":"DefineIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"Sx"}}}},"DefineRankExpression":{"input":{"type":"structure","required":["DomainName","RankExpression"],"members":{"DomainName":{},"RankExpression":{"shape":"S12"}}},"output":{"resultWrapper":"DefineRankExpressionResult","type":"structure","required":["RankExpression"],"members":{"RankExpression":{"shape":"S15"}}}},"DeleteDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DeleteDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S4"}}}},"DeleteIndexField":{"input":{"type":"structure","required":["DomainName","IndexFieldName"],"members":{"DomainName":{},"IndexFieldName":{}}},"output":{"resultWrapper":"DeleteIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"Sx"}}}},"DeleteRankExpression":{"input":{"type":"structure","required":["DomainName","RankName"],"members":{"DomainName":{},"RankName":{}}},"output":{"resultWrapper":"DeleteRankExpressionResult","type":"structure","required":["RankExpression"],"members":{"RankExpression":{"shape":"S15"}}}},"DescribeAvailabilityOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S1e"}}}},"DescribeDefaultSearchField":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeDefaultSearchFieldResult","type":"structure","required":["DefaultSearchField"],"members":{"DefaultSearchField":{"shape":"S1i"}}}},"DescribeDomains":{"input":{"type":"structure","members":{"DomainNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeDomainsResult","type":"structure","required":["DomainStatusList"],"members":{"DomainStatusList":{"type":"list","member":{"shape":"S4"}}}}},"DescribeIndexFields":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"FieldNames":{"shape":"S1o"}}},"output":{"resultWrapper":"DescribeIndexFieldsResult","type":"structure","required":["IndexFields"],"members":{"IndexFields":{"type":"list","member":{"shape":"Sx"}}}}},"DescribeRankExpressions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"RankNames":{"shape":"S1o"}}},"output":{"resultWrapper":"DescribeRankExpressionsResult","type":"structure","required":["RankExpressions"],"members":{"RankExpressions":{"type":"list","member":{"shape":"S15"}}}}},"DescribeServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S1w"}}}},"DescribeStemmingOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeStemmingOptionsResult","type":"structure","required":["Stems"],"members":{"Stems":{"shape":"S20"}}}},"DescribeStopwordOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeStopwordOptionsResult","type":"structure","required":["Stopwords"],"members":{"Stopwords":{"shape":"S24"}}}},"DescribeSynonymOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeSynonymOptionsResult","type":"structure","required":["Synonyms"],"members":{"Synonyms":{"shape":"S28"}}}},"IndexDocuments":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"IndexDocumentsResult","type":"structure","members":{"FieldNames":{"shape":"S1o"}}}},"UpdateAvailabilityOptions":{"input":{"type":"structure","required":["DomainName","MultiAZ"],"members":{"DomainName":{},"MultiAZ":{"type":"boolean"}}},"output":{"resultWrapper":"UpdateAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S1e"}}}},"UpdateDefaultSearchField":{"input":{"type":"structure","required":["DomainName","DefaultSearchField"],"members":{"DomainName":{},"DefaultSearchField":{}}},"output":{"resultWrapper":"UpdateDefaultSearchFieldResult","type":"structure","required":["DefaultSearchField"],"members":{"DefaultSearchField":{"shape":"S1i"}}}},"UpdateServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName","AccessPolicies"],"members":{"DomainName":{},"AccessPolicies":{}}},"output":{"resultWrapper":"UpdateServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S1w"}}}},"UpdateStemmingOptions":{"input":{"type":"structure","required":["DomainName","Stems"],"members":{"DomainName":{},"Stems":{}}},"output":{"resultWrapper":"UpdateStemmingOptionsResult","type":"structure","required":["Stems"],"members":{"Stems":{"shape":"S20"}}}},"UpdateStopwordOptions":{"input":{"type":"structure","required":["DomainName","Stopwords"],"members":{"DomainName":{},"Stopwords":{}}},"output":{"resultWrapper":"UpdateStopwordOptionsResult","type":"structure","required":["Stopwords"],"members":{"Stopwords":{"shape":"S24"}}}},"UpdateSynonymOptions":{"input":{"type":"structure","required":["DomainName","Synonyms"],"members":{"DomainName":{},"Synonyms":{}}},"output":{"resultWrapper":"UpdateSynonymOptionsResult","type":"structure","required":["Synonyms"],"members":{"Synonyms":{"shape":"S28"}}}}},"shapes":{"S4":{"type":"structure","required":["DomainId","DomainName","RequiresIndexDocuments"],"members":{"DomainId":{},"DomainName":{},"Created":{"type":"boolean"},"Deleted":{"type":"boolean"},"NumSearchableDocs":{"type":"long"},"DocService":{"shape":"S8"},"SearchService":{"shape":"S8"},"RequiresIndexDocuments":{"type":"boolean"},"Processing":{"type":"boolean"},"SearchInstanceType":{},"SearchPartitionCount":{"type":"integer"},"SearchInstanceCount":{"type":"integer"}}},"S8":{"type":"structure","members":{"Arn":{},"Endpoint":{}}},"Sf":{"type":"structure","required":["IndexFieldName","IndexFieldType"],"members":{"IndexFieldName":{},"IndexFieldType":{},"UIntOptions":{"type":"structure","members":{"DefaultValue":{"type":"integer"}}},"LiteralOptions":{"type":"structure","members":{"DefaultValue":{},"SearchEnabled":{"type":"boolean"},"FacetEnabled":{"type":"boolean"},"ResultEnabled":{"type":"boolean"}}},"TextOptions":{"type":"structure","members":{"DefaultValue":{},"FacetEnabled":{"type":"boolean"},"ResultEnabled":{"type":"boolean"},"TextProcessor":{}}},"SourceAttributes":{"type":"list","member":{"type":"structure","required":["SourceDataFunction"],"members":{"SourceDataFunction":{},"SourceDataCopy":{"type":"structure","required":["SourceName"],"members":{"SourceName":{},"DefaultValue":{}}},"SourceDataTrimTitle":{"type":"structure","required":["SourceName"],"members":{"SourceName":{},"DefaultValue":{},"Separator":{},"Language":{}}},"SourceDataMap":{"type":"structure","required":["SourceName"],"members":{"SourceName":{},"DefaultValue":{},"Cases":{"type":"map","key":{},"value":{}}}}}}}}},"Sx":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sf"},"Status":{"shape":"Sy"}}},"Sy":{"type":"structure","required":["CreationDate","UpdateDate","State"],"members":{"CreationDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"UpdateVersion":{"type":"integer"},"State":{},"PendingDeletion":{"type":"boolean"}}},"S12":{"type":"structure","required":["RankName","RankExpression"],"members":{"RankName":{},"RankExpression":{}}},"S15":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S12"},"Status":{"shape":"Sy"}}},"S1e":{"type":"structure","required":["Options","Status"],"members":{"Options":{"type":"boolean"},"Status":{"shape":"Sy"}}},"S1i":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S1o":{"type":"list","member":{}},"S1w":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S20":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S24":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}},"S28":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"Sy"}}}}}

/***/ }),
/* 157 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDomains":{"result_key":"DomainStatusList"},"DescribeIndexFields":{"result_key":"IndexFields"},"DescribeRankExpressions":{"result_key":"RankExpressions"}}}

/***/ }),
/* 158 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-01-01","endpointPrefix":"cloudsearch","serviceFullName":"Amazon CloudSearch","signatureVersion":"v4","xmlNamespace":"http://cloudsearch.amazonaws.com/doc/2013-01-01/","protocol":"query","uid":"cloudsearch-2013-01-01"},"operations":{"BuildSuggesters":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"BuildSuggestersResult","type":"structure","members":{"FieldNames":{"shape":"S4"}}}},"CreateDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"CreateDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S8"}}}},"DefineAnalysisScheme":{"input":{"type":"structure","required":["DomainName","AnalysisScheme"],"members":{"DomainName":{},"AnalysisScheme":{"shape":"Sl"}}},"output":{"resultWrapper":"DefineAnalysisSchemeResult","type":"structure","required":["AnalysisScheme"],"members":{"AnalysisScheme":{"shape":"Ss"}}}},"DefineExpression":{"input":{"type":"structure","required":["DomainName","Expression"],"members":{"DomainName":{},"Expression":{"shape":"Sy"}}},"output":{"resultWrapper":"DefineExpressionResult","type":"structure","required":["Expression"],"members":{"Expression":{"shape":"S11"}}}},"DefineIndexField":{"input":{"type":"structure","required":["DomainName","IndexField"],"members":{"DomainName":{},"IndexField":{"shape":"S13"}}},"output":{"resultWrapper":"DefineIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"S1n"}}}},"DefineSuggester":{"input":{"type":"structure","required":["DomainName","Suggester"],"members":{"DomainName":{},"Suggester":{"shape":"S1p"}}},"output":{"resultWrapper":"DefineSuggesterResult","type":"structure","required":["Suggester"],"members":{"Suggester":{"shape":"S1t"}}}},"DeleteAnalysisScheme":{"input":{"type":"structure","required":["DomainName","AnalysisSchemeName"],"members":{"DomainName":{},"AnalysisSchemeName":{}}},"output":{"resultWrapper":"DeleteAnalysisSchemeResult","type":"structure","required":["AnalysisScheme"],"members":{"AnalysisScheme":{"shape":"Ss"}}}},"DeleteDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DeleteDomainResult","type":"structure","members":{"DomainStatus":{"shape":"S8"}}}},"DeleteExpression":{"input":{"type":"structure","required":["DomainName","ExpressionName"],"members":{"DomainName":{},"ExpressionName":{}}},"output":{"resultWrapper":"DeleteExpressionResult","type":"structure","required":["Expression"],"members":{"Expression":{"shape":"S11"}}}},"DeleteIndexField":{"input":{"type":"structure","required":["DomainName","IndexFieldName"],"members":{"DomainName":{},"IndexFieldName":{}}},"output":{"resultWrapper":"DeleteIndexFieldResult","type":"structure","required":["IndexField"],"members":{"IndexField":{"shape":"S1n"}}}},"DeleteSuggester":{"input":{"type":"structure","required":["DomainName","SuggesterName"],"members":{"DomainName":{},"SuggesterName":{}}},"output":{"resultWrapper":"DeleteSuggesterResult","type":"structure","required":["Suggester"],"members":{"Suggester":{"shape":"S1t"}}}},"DescribeAnalysisSchemes":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"AnalysisSchemeNames":{"shape":"S25"},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeAnalysisSchemesResult","type":"structure","required":["AnalysisSchemes"],"members":{"AnalysisSchemes":{"type":"list","member":{"shape":"Ss"}}}}},"DescribeAvailabilityOptions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S2a"}}}},"DescribeDomains":{"input":{"type":"structure","members":{"DomainNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeDomainsResult","type":"structure","required":["DomainStatusList"],"members":{"DomainStatusList":{"type":"list","member":{"shape":"S8"}}}}},"DescribeExpressions":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ExpressionNames":{"shape":"S25"},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeExpressionsResult","type":"structure","required":["Expressions"],"members":{"Expressions":{"type":"list","member":{"shape":"S11"}}}}},"DescribeIndexFields":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"FieldNames":{"type":"list","member":{}},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeIndexFieldsResult","type":"structure","required":["IndexFields"],"members":{"IndexFields":{"type":"list","member":{"shape":"S1n"}}}}},"DescribeScalingParameters":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DescribeScalingParametersResult","type":"structure","required":["ScalingParameters"],"members":{"ScalingParameters":{"shape":"S2p"}}}},"DescribeServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S2u"}}}},"DescribeSuggesters":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"SuggesterNames":{"shape":"S25"},"Deployed":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeSuggestersResult","type":"structure","required":["Suggesters"],"members":{"Suggesters":{"type":"list","member":{"shape":"S1t"}}}}},"IndexDocuments":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"IndexDocumentsResult","type":"structure","members":{"FieldNames":{"shape":"S4"}}}},"ListDomainNames":{"output":{"resultWrapper":"ListDomainNamesResult","type":"structure","members":{"DomainNames":{"type":"map","key":{},"value":{}}}}},"UpdateAvailabilityOptions":{"input":{"type":"structure","required":["DomainName","MultiAZ"],"members":{"DomainName":{},"MultiAZ":{"type":"boolean"}}},"output":{"resultWrapper":"UpdateAvailabilityOptionsResult","type":"structure","members":{"AvailabilityOptions":{"shape":"S2a"}}}},"UpdateScalingParameters":{"input":{"type":"structure","required":["DomainName","ScalingParameters"],"members":{"DomainName":{},"ScalingParameters":{"shape":"S2q"}}},"output":{"resultWrapper":"UpdateScalingParametersResult","type":"structure","required":["ScalingParameters"],"members":{"ScalingParameters":{"shape":"S2p"}}}},"UpdateServiceAccessPolicies":{"input":{"type":"structure","required":["DomainName","AccessPolicies"],"members":{"DomainName":{},"AccessPolicies":{}}},"output":{"resultWrapper":"UpdateServiceAccessPoliciesResult","type":"structure","required":["AccessPolicies"],"members":{"AccessPolicies":{"shape":"S2u"}}}}},"shapes":{"S4":{"type":"list","member":{}},"S8":{"type":"structure","required":["DomainId","DomainName","RequiresIndexDocuments"],"members":{"DomainId":{},"DomainName":{},"ARN":{},"Created":{"type":"boolean"},"Deleted":{"type":"boolean"},"DocService":{"shape":"Sc"},"SearchService":{"shape":"Sc"},"RequiresIndexDocuments":{"type":"boolean"},"Processing":{"type":"boolean"},"SearchInstanceType":{},"SearchPartitionCount":{"type":"integer"},"SearchInstanceCount":{"type":"integer"},"Limits":{"type":"structure","required":["MaximumReplicationCount","MaximumPartitionCount"],"members":{"MaximumReplicationCount":{"type":"integer"},"MaximumPartitionCount":{"type":"integer"}}}}},"Sc":{"type":"structure","members":{"Endpoint":{}}},"Sl":{"type":"structure","required":["AnalysisSchemeName","AnalysisSchemeLanguage"],"members":{"AnalysisSchemeName":{},"AnalysisSchemeLanguage":{},"AnalysisOptions":{"type":"structure","members":{"Synonyms":{},"Stopwords":{},"StemmingDictionary":{},"JapaneseTokenizationDictionary":{},"AlgorithmicStemming":{}}}}},"Ss":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sl"},"Status":{"shape":"St"}}},"St":{"type":"structure","required":["CreationDate","UpdateDate","State"],"members":{"CreationDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"UpdateVersion":{"type":"integer"},"State":{},"PendingDeletion":{"type":"boolean"}}},"Sy":{"type":"structure","required":["ExpressionName","ExpressionValue"],"members":{"ExpressionName":{},"ExpressionValue":{}}},"S11":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sy"},"Status":{"shape":"St"}}},"S13":{"type":"structure","required":["IndexFieldName","IndexFieldType"],"members":{"IndexFieldName":{},"IndexFieldType":{},"IntOptions":{"type":"structure","members":{"DefaultValue":{"type":"long"},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"DoubleOptions":{"type":"structure","members":{"DefaultValue":{"type":"double"},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"LiteralOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"TextOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"},"HighlightEnabled":{"type":"boolean"},"AnalysisScheme":{}}},"DateOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"LatLonOptions":{"type":"structure","members":{"DefaultValue":{},"SourceField":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"},"SortEnabled":{"type":"boolean"}}},"IntArrayOptions":{"type":"structure","members":{"DefaultValue":{"type":"long"},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}},"DoubleArrayOptions":{"type":"structure","members":{"DefaultValue":{"type":"double"},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}},"LiteralArrayOptions":{"type":"structure","members":{"DefaultValue":{},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}},"TextArrayOptions":{"type":"structure","members":{"DefaultValue":{},"SourceFields":{},"ReturnEnabled":{"type":"boolean"},"HighlightEnabled":{"type":"boolean"},"AnalysisScheme":{}}},"DateArrayOptions":{"type":"structure","members":{"DefaultValue":{},"SourceFields":{},"FacetEnabled":{"type":"boolean"},"SearchEnabled":{"type":"boolean"},"ReturnEnabled":{"type":"boolean"}}}}},"S1n":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S13"},"Status":{"shape":"St"}}},"S1p":{"type":"structure","required":["SuggesterName","DocumentSuggesterOptions"],"members":{"SuggesterName":{},"DocumentSuggesterOptions":{"type":"structure","required":["SourceField"],"members":{"SourceField":{},"FuzzyMatching":{},"SortExpression":{}}}}},"S1t":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S1p"},"Status":{"shape":"St"}}},"S25":{"type":"list","member":{}},"S2a":{"type":"structure","required":["Options","Status"],"members":{"Options":{"type":"boolean"},"Status":{"shape":"St"}}},"S2p":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"S2q"},"Status":{"shape":"St"}}},"S2q":{"type":"structure","members":{"DesiredInstanceType":{},"DesiredReplicationCount":{"type":"integer"},"DesiredPartitionCount":{"type":"integer"}}},"S2u":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"St"}}}}}

/***/ }),
/* 159 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeAnalysisSchemes":{"result_key":"AnalysisSchemes"},"DescribeDomains":{"result_key":"DomainStatusList"},"DescribeExpressions":{"result_key":"Expressions"},"DescribeIndexFields":{"result_key":"IndexFields"},"DescribeSuggesters":{"result_key":"Suggesters"}}}

/***/ }),
/* 160 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-01-01","endpointPrefix":"cloudsearchdomain","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"Amazon CloudSearch Domain","signatureVersion":"v4","signingName":"cloudsearch","uid":"cloudsearchdomain-2013-01-01"},"operations":{"Search":{"http":{"method":"GET","requestUri":"/2013-01-01/search?format=sdk&pretty=true"},"input":{"type":"structure","required":["query"],"members":{"cursor":{"location":"querystring","locationName":"cursor"},"expr":{"location":"querystring","locationName":"expr"},"facet":{"location":"querystring","locationName":"facet"},"filterQuery":{"location":"querystring","locationName":"fq"},"highlight":{"location":"querystring","locationName":"highlight"},"partial":{"location":"querystring","locationName":"partial","type":"boolean"},"query":{"location":"querystring","locationName":"q"},"queryOptions":{"location":"querystring","locationName":"q.options"},"queryParser":{"location":"querystring","locationName":"q.parser"},"return":{"location":"querystring","locationName":"return"},"size":{"location":"querystring","locationName":"size","type":"long"},"sort":{"location":"querystring","locationName":"sort"},"start":{"location":"querystring","locationName":"start","type":"long"},"stats":{"location":"querystring","locationName":"stats"}}},"output":{"type":"structure","members":{"status":{"type":"structure","members":{"timems":{"type":"long"},"rid":{}}},"hits":{"type":"structure","members":{"found":{"type":"long"},"start":{"type":"long"},"cursor":{},"hit":{"type":"list","member":{"type":"structure","members":{"id":{},"fields":{"type":"map","key":{},"value":{"type":"list","member":{}}},"exprs":{"type":"map","key":{},"value":{}},"highlights":{"type":"map","key":{},"value":{}}}}}}},"facets":{"type":"map","key":{},"value":{"type":"structure","members":{"buckets":{"type":"list","member":{"type":"structure","members":{"value":{},"count":{"type":"long"}}}}}}},"stats":{"type":"map","key":{},"value":{"type":"structure","members":{"min":{},"max":{},"count":{"type":"long"},"missing":{"type":"long"},"sum":{"type":"double"},"sumOfSquares":{"type":"double"},"mean":{},"stddev":{"type":"double"}}}}}}},"Suggest":{"http":{"method":"GET","requestUri":"/2013-01-01/suggest?format=sdk&pretty=true"},"input":{"type":"structure","required":["query","suggester"],"members":{"query":{"location":"querystring","locationName":"q"},"suggester":{"location":"querystring","locationName":"suggester"},"size":{"location":"querystring","locationName":"size","type":"long"}}},"output":{"type":"structure","members":{"status":{"type":"structure","members":{"timems":{"type":"long"},"rid":{}}},"suggest":{"type":"structure","members":{"query":{},"found":{"type":"long"},"suggestions":{"type":"list","member":{"type":"structure","members":{"suggestion":{},"score":{"type":"long"},"id":{}}}}}}}}},"UploadDocuments":{"http":{"requestUri":"/2013-01-01/documents/batch?format=sdk"},"input":{"type":"structure","required":["documents","contentType"],"members":{"documents":{"type":"blob","streaming":true},"contentType":{"location":"header","locationName":"Content-Type"}},"payload":"documents"},"output":{"type":"structure","members":{"status":{},"adds":{"type":"long"},"deletes":{"type":"long"},"warnings":{"type":"list","member":{"type":"structure","members":{"message":{}}}}}}}},"shapes":{}}

/***/ }),
/* 161 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-11-01","endpointPrefix":"cloudtrail","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CloudTrail","serviceFullName":"AWS CloudTrail","signatureVersion":"v4","targetPrefix":"com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101","uid":"cloudtrail-2013-11-01"},"operations":{"AddTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"TagsList":{"shape":"S3"}}},"output":{"type":"structure","members":{}},"idempotent":true},"CreateTrail":{"input":{"type":"structure","required":["Name","S3BucketName"],"members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"EnableLogFileValidation":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"output":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{"deprecated":true},"SnsTopicARN":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"idempotent":true},"DeleteTrail":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DescribeTrails":{"input":{"type":"structure","members":{"trailNameList":{"type":"list","member":{}},"includeShadowTrails":{"type":"boolean"}}},"output":{"type":"structure","members":{"trailList":{"type":"list","member":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{"deprecated":true},"SnsTopicARN":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"HomeRegion":{},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{},"HasCustomEventSelectors":{"type":"boolean"}}}}}},"idempotent":true},"GetEventSelectors":{"input":{"type":"structure","required":["TrailName"],"members":{"TrailName":{}}},"output":{"type":"structure","members":{"TrailARN":{},"EventSelectors":{"shape":"Si"}}},"idempotent":true},"GetTrailStatus":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"IsLogging":{"type":"boolean"},"LatestDeliveryError":{},"LatestNotificationError":{},"LatestDeliveryTime":{"type":"timestamp"},"LatestNotificationTime":{"type":"timestamp"},"StartLoggingTime":{"type":"timestamp"},"StopLoggingTime":{"type":"timestamp"},"LatestCloudWatchLogsDeliveryError":{},"LatestCloudWatchLogsDeliveryTime":{"type":"timestamp"},"LatestDigestDeliveryTime":{"type":"timestamp"},"LatestDigestDeliveryError":{},"LatestDeliveryAttemptTime":{},"LatestNotificationAttemptTime":{},"LatestNotificationAttemptSucceeded":{},"LatestDeliveryAttemptSucceeded":{},"TimeLoggingStarted":{},"TimeLoggingStopped":{}}},"idempotent":true},"ListPublicKeys":{"input":{"type":"structure","members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"NextToken":{}}},"output":{"type":"structure","members":{"PublicKeyList":{"type":"list","member":{"type":"structure","members":{"Value":{"type":"blob"},"ValidityStartTime":{"type":"timestamp"},"ValidityEndTime":{"type":"timestamp"},"Fingerprint":{}}}},"NextToken":{}}},"idempotent":true},"ListTags":{"input":{"type":"structure","required":["ResourceIdList"],"members":{"ResourceIdList":{"type":"list","member":{}},"NextToken":{}}},"output":{"type":"structure","members":{"ResourceTagList":{"type":"list","member":{"type":"structure","members":{"ResourceId":{},"TagsList":{"shape":"S3"}}}},"NextToken":{}}},"idempotent":true},"LookupEvents":{"input":{"type":"structure","members":{"LookupAttributes":{"type":"list","member":{"type":"structure","required":["AttributeKey","AttributeValue"],"members":{"AttributeKey":{},"AttributeValue":{}}}},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Events":{"type":"list","member":{"type":"structure","members":{"EventId":{},"EventName":{},"EventTime":{"type":"timestamp"},"EventSource":{},"Username":{},"Resources":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ResourceName":{}}}},"CloudTrailEvent":{}}}},"NextToken":{}}},"idempotent":true},"PutEventSelectors":{"input":{"type":"structure","required":["TrailName","EventSelectors"],"members":{"TrailName":{},"EventSelectors":{"shape":"Si"}}},"output":{"type":"structure","members":{"TrailARN":{},"EventSelectors":{"shape":"Si"}}},"idempotent":true},"RemoveTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"TagsList":{"shape":"S3"}}},"output":{"type":"structure","members":{}},"idempotent":true},"StartLogging":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"StopLogging":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateTrail":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"EnableLogFileValidation":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"output":{"type":"structure","members":{"Name":{},"S3BucketName":{},"S3KeyPrefix":{},"SnsTopicName":{"deprecated":true},"SnsTopicARN":{},"IncludeGlobalServiceEvents":{"type":"boolean"},"IsMultiRegionTrail":{"type":"boolean"},"TrailARN":{},"LogFileValidationEnabled":{"type":"boolean"},"CloudWatchLogsLogGroupArn":{},"CloudWatchLogsRoleArn":{},"KmsKeyId":{}}},"idempotent":true}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Si":{"type":"list","member":{"type":"structure","members":{"ReadWriteType":{},"IncludeManagementEvents":{"type":"boolean"},"DataResources":{"type":"list","member":{"type":"structure","members":{"Type":{},"Values":{"type":"list","member":{}}}}}}}}}}

/***/ }),
/* 162 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeTrails":{"result_key":"trailList"},"LookupEvents":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Events"}}}

/***/ }),
/* 163 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-10-06","endpointPrefix":"codebuild","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS CodeBuild","signatureVersion":"v4","targetPrefix":"CodeBuild_20161006","uid":"codebuild-2016-10-06"},"operations":{"BatchDeleteBuilds":{"input":{"type":"structure","required":["ids"],"members":{"ids":{"shape":"S2"}}},"output":{"type":"structure","members":{"buildsDeleted":{"shape":"S2"},"buildsNotDeleted":{"type":"list","member":{"type":"structure","members":{"id":{},"statusCode":{}}}}}}},"BatchGetBuilds":{"input":{"type":"structure","required":["ids"],"members":{"ids":{"shape":"S2"}}},"output":{"type":"structure","members":{"builds":{"type":"list","member":{"shape":"Sb"}},"buildsNotFound":{"shape":"S2"}}}},"BatchGetProjects":{"input":{"type":"structure","required":["names"],"members":{"names":{"shape":"S10"}}},"output":{"type":"structure","members":{"projects":{"type":"list","member":{"shape":"S13"}},"projectsNotFound":{"shape":"S10"}}}},"CreateProject":{"input":{"type":"structure","required":["name","source","artifacts","environment"],"members":{"name":{},"description":{},"source":{"shape":"Sk"},"artifacts":{"shape":"S16"},"environment":{"shape":"Sp"},"serviceRole":{},"timeoutInMinutes":{"type":"integer"},"encryptionKey":{},"tags":{"shape":"S1b"}}},"output":{"type":"structure","members":{"project":{"shape":"S13"}}}},"CreateWebhook":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{}}},"output":{"type":"structure","members":{"webhook":{"shape":"S1f"}}}},"DeleteProject":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{}}},"DeleteWebhook":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{}}},"output":{"type":"structure","members":{}}},"ListBuilds":{"input":{"type":"structure","members":{"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"ids":{"shape":"S2"},"nextToken":{}}}},"ListBuildsForProject":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{},"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"ids":{"shape":"S2"},"nextToken":{}}}},"ListCuratedEnvironmentImages":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"platforms":{"type":"list","member":{"type":"structure","members":{"platform":{},"languages":{"type":"list","member":{"type":"structure","members":{"language":{},"images":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{}}}}}}}}}}}}},"ListProjects":{"input":{"type":"structure","members":{"sortBy":{},"sortOrder":{},"nextToken":{}}},"output":{"type":"structure","members":{"nextToken":{},"projects":{"shape":"S10"}}}},"StartBuild":{"input":{"type":"structure","required":["projectName"],"members":{"projectName":{},"sourceVersion":{},"artifactsOverride":{"shape":"S16"},"environmentVariablesOverride":{"shape":"Ss"},"buildspecOverride":{},"timeoutInMinutesOverride":{"type":"integer"}}},"output":{"type":"structure","members":{"build":{"shape":"Sb"}}}},"StopBuild":{"input":{"type":"structure","required":["id"],"members":{"id":{}}},"output":{"type":"structure","members":{"build":{"shape":"Sb"}}}},"UpdateProject":{"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{},"source":{"shape":"Sk"},"artifacts":{"shape":"S16"},"environment":{"shape":"Sp"},"serviceRole":{},"timeoutInMinutes":{"type":"integer"},"encryptionKey":{},"tags":{"shape":"S1b"}}},"output":{"type":"structure","members":{"project":{"shape":"S13"}}}}},"shapes":{"S2":{"type":"list","member":{}},"Sb":{"type":"structure","members":{"id":{},"arn":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"currentPhase":{},"buildStatus":{},"sourceVersion":{},"projectName":{},"phases":{"type":"list","member":{"type":"structure","members":{"phaseType":{},"phaseStatus":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"durationInSeconds":{"type":"long"},"contexts":{"type":"list","member":{"type":"structure","members":{"statusCode":{},"message":{}}}}}}},"source":{"shape":"Sk"},"artifacts":{"type":"structure","members":{"location":{},"sha256sum":{},"md5sum":{}}},"environment":{"shape":"Sp"},"logs":{"type":"structure","members":{"groupName":{},"streamName":{},"deepLink":{}}},"timeoutInMinutes":{"type":"integer"},"buildComplete":{"type":"boolean"},"initiator":{}}},"Sk":{"type":"structure","required":["type"],"members":{"type":{},"location":{},"buildspec":{},"auth":{"type":"structure","required":["type"],"members":{"type":{},"resource":{}}}}},"Sp":{"type":"structure","required":["type","image","computeType"],"members":{"type":{},"image":{},"computeType":{},"environmentVariables":{"shape":"Ss"},"privilegedMode":{"type":"boolean"}}},"Ss":{"type":"list","member":{"type":"structure","required":["name","value"],"members":{"name":{},"value":{},"type":{}}}},"S10":{"type":"list","member":{}},"S13":{"type":"structure","members":{"name":{},"arn":{},"description":{},"source":{"shape":"Sk"},"artifacts":{"shape":"S16"},"environment":{"shape":"Sp"},"serviceRole":{},"timeoutInMinutes":{"type":"integer"},"encryptionKey":{},"tags":{"shape":"S1b"},"created":{"type":"timestamp"},"lastModified":{"type":"timestamp"},"webhook":{"shape":"S1f"}}},"S16":{"type":"structure","required":["type"],"members":{"type":{},"location":{},"path":{},"namespaceType":{},"name":{},"packaging":{}}},"S1b":{"type":"list","member":{"type":"structure","members":{"key":{},"value":{}}}},"S1f":{"type":"structure","members":{"url":{}}}}}

/***/ }),
/* 164 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 165 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-04-13","endpointPrefix":"codecommit","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodeCommit","serviceFullName":"AWS CodeCommit","signatureVersion":"v4","targetPrefix":"CodeCommit_20150413","uid":"codecommit-2015-04-13"},"operations":{"BatchGetRepositories":{"input":{"type":"structure","required":["repositoryNames"],"members":{"repositoryNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"shape":"S6"}},"repositoriesNotFound":{"type":"list","member":{}}}}},"CreateBranch":{"input":{"type":"structure","required":["repositoryName","branchName","commitId"],"members":{"repositoryName":{},"branchName":{},"commitId":{}}}},"CreateRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"repositoryDescription":{}}},"output":{"type":"structure","members":{"repositoryMetadata":{"shape":"S6"}}}},"DeleteBranch":{"input":{"type":"structure","required":["repositoryName","branchName"],"members":{"repositoryName":{},"branchName":{}}},"output":{"type":"structure","members":{"deletedBranch":{"shape":"Sn"}}}},"DeleteRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"repositoryId":{}}}},"GetBlob":{"input":{"type":"structure","required":["repositoryName","blobId"],"members":{"repositoryName":{},"blobId":{}}},"output":{"type":"structure","required":["content"],"members":{"content":{"type":"blob"}}}},"GetBranch":{"input":{"type":"structure","members":{"repositoryName":{},"branchName":{}}},"output":{"type":"structure","members":{"branch":{"shape":"Sn"}}}},"GetCommit":{"input":{"type":"structure","required":["repositoryName","commitId"],"members":{"repositoryName":{},"commitId":{}}},"output":{"type":"structure","required":["commit"],"members":{"commit":{"type":"structure","members":{"commitId":{},"treeId":{},"parents":{"type":"list","member":{}},"message":{},"author":{"shape":"S11"},"committer":{"shape":"S11"},"additionalData":{}}}}}},"GetDifferences":{"input":{"type":"structure","required":["repositoryName","afterCommitSpecifier"],"members":{"repositoryName":{},"beforeCommitSpecifier":{},"afterCommitSpecifier":{},"beforePath":{},"afterPath":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"differences":{"type":"list","member":{"type":"structure","members":{"beforeBlob":{"shape":"S1e"},"afterBlob":{"shape":"S1e"},"changeType":{}}}},"NextToken":{}}}},"GetRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"repositoryMetadata":{"shape":"S6"}}}},"GetRepositoryTriggers":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"configurationId":{},"triggers":{"shape":"S1m"}}}},"ListBranches":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"nextToken":{}}},"output":{"type":"structure","members":{"branches":{"shape":"S1q"},"nextToken":{}}}},"ListRepositories":{"input":{"type":"structure","members":{"nextToken":{},"sortBy":{},"order":{}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"type":"structure","members":{"repositoryName":{},"repositoryId":{}}}},"nextToken":{}}}},"PutRepositoryTriggers":{"input":{"type":"structure","required":["repositoryName","triggers"],"members":{"repositoryName":{},"triggers":{"shape":"S1m"}}},"output":{"type":"structure","members":{"configurationId":{}}}},"TestRepositoryTriggers":{"input":{"type":"structure","required":["repositoryName","triggers"],"members":{"repositoryName":{},"triggers":{"shape":"S1m"}}},"output":{"type":"structure","members":{"successfulExecutions":{"type":"list","member":{}},"failedExecutions":{"type":"list","member":{"type":"structure","members":{"trigger":{},"failureMessage":{}}}}}}},"UpdateDefaultBranch":{"input":{"type":"structure","required":["repositoryName","defaultBranchName"],"members":{"repositoryName":{},"defaultBranchName":{}}}},"UpdateRepositoryDescription":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{},"repositoryDescription":{}}}},"UpdateRepositoryName":{"input":{"type":"structure","required":["oldName","newName"],"members":{"oldName":{},"newName":{}}}}},"shapes":{"S6":{"type":"structure","members":{"accountId":{},"repositoryId":{},"repositoryName":{},"repositoryDescription":{},"defaultBranch":{},"lastModifiedDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"},"cloneUrlHttp":{},"cloneUrlSsh":{},"Arn":{}}},"Sn":{"type":"structure","members":{"branchName":{},"commitId":{}}},"S11":{"type":"structure","members":{"name":{},"email":{},"date":{}}},"S1e":{"type":"structure","members":{"blobId":{},"path":{},"mode":{}}},"S1m":{"type":"list","member":{"type":"structure","required":["name","destinationArn","events"],"members":{"name":{},"destinationArn":{},"customData":{},"branches":{"shape":"S1q"},"events":{"type":"list","member":{}}}}},"S1q":{"type":"list","member":{}}}}

/***/ }),
/* 166 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetDifferences":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListBranches":{"input_token":"nextToken","output_token":"nextToken","result_key":"branches"},"ListRepositories":{"input_token":"nextToken","output_token":"nextToken","result_key":"repositories"}}}

/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-10-06","endpointPrefix":"codedeploy","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodeDeploy","serviceFullName":"AWS CodeDeploy","signatureVersion":"v4","targetPrefix":"CodeDeploy_20141006","timestampFormat":"unixTimestamp","uid":"codedeploy-2014-10-06"},"operations":{"AddTagsToOnPremisesInstances":{"input":{"type":"structure","required":["tags","instanceNames"],"members":{"tags":{"shape":"S2"},"instanceNames":{"shape":"S6"}}}},"BatchGetApplicationRevisions":{"input":{"type":"structure","required":["applicationName","revisions"],"members":{"applicationName":{},"revisions":{"shape":"Sa"}}},"output":{"type":"structure","members":{"applicationName":{},"errorMessage":{},"revisions":{"type":"list","member":{"type":"structure","members":{"revisionLocation":{"shape":"Sb"},"genericRevisionInfo":{"shape":"Sq"}}}}}}},"BatchGetApplications":{"input":{"type":"structure","members":{"applicationNames":{"shape":"Sw"}}},"output":{"type":"structure","members":{"applicationsInfo":{"type":"list","member":{"shape":"Sz"}}}}},"BatchGetDeploymentGroups":{"input":{"type":"structure","required":["applicationName","deploymentGroupNames"],"members":{"applicationName":{},"deploymentGroupNames":{"shape":"Ss"}}},"output":{"type":"structure","members":{"deploymentGroupsInfo":{"type":"list","member":{"shape":"S16"}},"errorMessage":{}}}},"BatchGetDeploymentInstances":{"input":{"type":"structure","required":["deploymentId","instanceIds"],"members":{"deploymentId":{},"instanceIds":{"shape":"S2n"}}},"output":{"type":"structure","members":{"instancesSummary":{"type":"list","member":{"shape":"S2r"}},"errorMessage":{}}}},"BatchGetDeployments":{"input":{"type":"structure","members":{"deploymentIds":{"shape":"S34"}}},"output":{"type":"structure","members":{"deploymentsInfo":{"type":"list","member":{"shape":"S37"}}}}},"BatchGetOnPremisesInstances":{"input":{"type":"structure","members":{"instanceNames":{"shape":"S6"}}},"output":{"type":"structure","members":{"instanceInfos":{"type":"list","member":{"shape":"S3l"}}}}},"ContinueDeployment":{"input":{"type":"structure","members":{"deploymentId":{}}}},"CreateApplication":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{}}},"output":{"type":"structure","members":{"applicationId":{}}}},"CreateDeployment":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{},"deploymentGroupName":{},"revision":{"shape":"Sb"},"deploymentConfigName":{},"description":{},"ignoreApplicationStopFailures":{"type":"boolean"},"targetInstances":{"shape":"S3e"},"autoRollbackConfiguration":{"shape":"S1u"},"updateOutdatedInstancesOnly":{"type":"boolean"},"fileExistsBehavior":{}}},"output":{"type":"structure","members":{"deploymentId":{}}}},"CreateDeploymentConfig":{"input":{"type":"structure","required":["deploymentConfigName","minimumHealthyHosts"],"members":{"deploymentConfigName":{},"minimumHealthyHosts":{"shape":"S3v"}}},"output":{"type":"structure","members":{"deploymentConfigId":{}}}},"CreateDeploymentGroup":{"input":{"type":"structure","required":["applicationName","deploymentGroupName","serviceRoleArn"],"members":{"applicationName":{},"deploymentGroupName":{},"deploymentConfigName":{},"ec2TagFilters":{"shape":"S19"},"onPremisesInstanceTagFilters":{"shape":"S1c"},"autoScalingGroups":{"shape":"S3f"},"serviceRoleArn":{},"triggerConfigurations":{"shape":"S1k"},"alarmConfiguration":{"shape":"S1q"},"autoRollbackConfiguration":{"shape":"S1u"},"deploymentStyle":{"shape":"S1x"},"blueGreenDeploymentConfiguration":{"shape":"S20"},"loadBalancerInfo":{"shape":"S28"},"ec2TagSet":{"shape":"S2i"},"onPremisesTagSet":{"shape":"S2k"}}},"output":{"type":"structure","members":{"deploymentGroupId":{}}}},"DeleteApplication":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{}}}},"DeleteDeploymentConfig":{"input":{"type":"structure","required":["deploymentConfigName"],"members":{"deploymentConfigName":{}}}},"DeleteDeploymentGroup":{"input":{"type":"structure","required":["applicationName","deploymentGroupName"],"members":{"applicationName":{},"deploymentGroupName":{}}},"output":{"type":"structure","members":{"hooksNotCleanedUp":{"shape":"S1f"}}}},"DeregisterOnPremisesInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}}},"GetApplication":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{}}},"output":{"type":"structure","members":{"application":{"shape":"Sz"}}}},"GetApplicationRevision":{"input":{"type":"structure","required":["applicationName","revision"],"members":{"applicationName":{},"revision":{"shape":"Sb"}}},"output":{"type":"structure","members":{"applicationName":{},"revision":{"shape":"Sb"},"revisionInfo":{"shape":"Sq"}}}},"GetDeployment":{"input":{"type":"structure","required":["deploymentId"],"members":{"deploymentId":{}}},"output":{"type":"structure","members":{"deploymentInfo":{"shape":"S37"}}}},"GetDeploymentConfig":{"input":{"type":"structure","required":["deploymentConfigName"],"members":{"deploymentConfigName":{}}},"output":{"type":"structure","members":{"deploymentConfigInfo":{"type":"structure","members":{"deploymentConfigId":{},"deploymentConfigName":{},"minimumHealthyHosts":{"shape":"S3v"},"createTime":{"type":"timestamp"}}}}}},"GetDeploymentGroup":{"input":{"type":"structure","required":["applicationName","deploymentGroupName"],"members":{"applicationName":{},"deploymentGroupName":{}}},"output":{"type":"structure","members":{"deploymentGroupInfo":{"shape":"S16"}}}},"GetDeploymentInstance":{"input":{"type":"structure","required":["deploymentId","instanceId"],"members":{"deploymentId":{},"instanceId":{}}},"output":{"type":"structure","members":{"instanceSummary":{"shape":"S2r"}}}},"GetOnPremisesInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"instanceInfo":{"shape":"S3l"}}}},"ListApplicationRevisions":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{},"sortBy":{},"sortOrder":{},"s3Bucket":{},"s3KeyPrefix":{},"deployed":{},"nextToken":{}}},"output":{"type":"structure","members":{"revisions":{"shape":"Sa"},"nextToken":{}}}},"ListApplications":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"applications":{"shape":"Sw"},"nextToken":{}}}},"ListDeploymentConfigs":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"deploymentConfigsList":{"type":"list","member":{}},"nextToken":{}}}},"ListDeploymentGroups":{"input":{"type":"structure","required":["applicationName"],"members":{"applicationName":{},"nextToken":{}}},"output":{"type":"structure","members":{"applicationName":{},"deploymentGroups":{"shape":"Ss"},"nextToken":{}}}},"ListDeploymentInstances":{"input":{"type":"structure","required":["deploymentId"],"members":{"deploymentId":{},"nextToken":{},"instanceStatusFilter":{"type":"list","member":{}},"instanceTypeFilter":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"instancesList":{"shape":"S2n"},"nextToken":{}}}},"ListDeployments":{"input":{"type":"structure","members":{"applicationName":{},"deploymentGroupName":{},"includeOnlyStatuses":{"type":"list","member":{}},"createTimeRange":{"type":"structure","members":{"start":{"type":"timestamp"},"end":{"type":"timestamp"}}},"nextToken":{}}},"output":{"type":"structure","members":{"deployments":{"shape":"S34"},"nextToken":{}}}},"ListGitHubAccountTokenNames":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"tokenNameList":{"type":"list","member":{}},"nextToken":{}}}},"ListOnPremisesInstances":{"input":{"type":"structure","members":{"registrationStatus":{},"tagFilters":{"shape":"S1c"},"nextToken":{}}},"output":{"type":"structure","members":{"instanceNames":{"shape":"S6"},"nextToken":{}}}},"RegisterApplicationRevision":{"input":{"type":"structure","required":["applicationName","revision"],"members":{"applicationName":{},"description":{},"revision":{"shape":"Sb"}}}},"RegisterOnPremisesInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{},"iamSessionArn":{},"iamUserArn":{}}}},"RemoveTagsFromOnPremisesInstances":{"input":{"type":"structure","required":["tags","instanceNames"],"members":{"tags":{"shape":"S2"},"instanceNames":{"shape":"S6"}}}},"SkipWaitTimeForInstanceTermination":{"input":{"type":"structure","members":{"deploymentId":{}}}},"StopDeployment":{"input":{"type":"structure","required":["deploymentId"],"members":{"deploymentId":{},"autoRollbackEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"status":{},"statusMessage":{}}}},"UpdateApplication":{"input":{"type":"structure","members":{"applicationName":{},"newApplicationName":{}}}},"UpdateDeploymentGroup":{"input":{"type":"structure","required":["applicationName","currentDeploymentGroupName"],"members":{"applicationName":{},"currentDeploymentGroupName":{},"newDeploymentGroupName":{},"deploymentConfigName":{},"ec2TagFilters":{"shape":"S19"},"onPremisesInstanceTagFilters":{"shape":"S1c"},"autoScalingGroups":{"shape":"S3f"},"serviceRoleArn":{},"triggerConfigurations":{"shape":"S1k"},"alarmConfiguration":{"shape":"S1q"},"autoRollbackConfiguration":{"shape":"S1u"},"deploymentStyle":{"shape":"S1x"},"blueGreenDeploymentConfiguration":{"shape":"S20"},"loadBalancerInfo":{"shape":"S28"},"ec2TagSet":{"shape":"S2i"},"onPremisesTagSet":{"shape":"S2k"}}},"output":{"type":"structure","members":{"hooksNotCleanedUp":{"shape":"S1f"}}}}},"shapes":{"S2":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S6":{"type":"list","member":{}},"Sa":{"type":"list","member":{"shape":"Sb"}},"Sb":{"type":"structure","members":{"revisionType":{},"s3Location":{"type":"structure","members":{"bucket":{},"key":{},"bundleType":{},"version":{},"eTag":{}}},"gitHubLocation":{"type":"structure","members":{"repository":{},"commitId":{}}}}},"Sq":{"type":"structure","members":{"description":{},"deploymentGroups":{"shape":"Ss"},"firstUsedTime":{"type":"timestamp"},"lastUsedTime":{"type":"timestamp"},"registerTime":{"type":"timestamp"}}},"Ss":{"type":"list","member":{}},"Sw":{"type":"list","member":{}},"Sz":{"type":"structure","members":{"applicationId":{},"applicationName":{},"createTime":{"type":"timestamp"},"linkedToGitHub":{"type":"boolean"},"gitHubAccountName":{}}},"S16":{"type":"structure","members":{"applicationName":{},"deploymentGroupId":{},"deploymentGroupName":{},"deploymentConfigName":{},"ec2TagFilters":{"shape":"S19"},"onPremisesInstanceTagFilters":{"shape":"S1c"},"autoScalingGroups":{"shape":"S1f"},"serviceRoleArn":{},"targetRevision":{"shape":"Sb"},"triggerConfigurations":{"shape":"S1k"},"alarmConfiguration":{"shape":"S1q"},"autoRollbackConfiguration":{"shape":"S1u"},"deploymentStyle":{"shape":"S1x"},"blueGreenDeploymentConfiguration":{"shape":"S20"},"loadBalancerInfo":{"shape":"S28"},"lastSuccessfulDeployment":{"shape":"S2f"},"lastAttemptedDeployment":{"shape":"S2f"},"ec2TagSet":{"shape":"S2i"},"onPremisesTagSet":{"shape":"S2k"}}},"S19":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"Type":{}}}},"S1c":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"Type":{}}}},"S1f":{"type":"list","member":{"type":"structure","members":{"name":{},"hook":{}}}},"S1k":{"type":"list","member":{"type":"structure","members":{"triggerName":{},"triggerTargetArn":{},"triggerEvents":{"type":"list","member":{}}}}},"S1q":{"type":"structure","members":{"enabled":{"type":"boolean"},"ignorePollAlarmFailure":{"type":"boolean"},"alarms":{"type":"list","member":{"type":"structure","members":{"name":{}}}}}},"S1u":{"type":"structure","members":{"enabled":{"type":"boolean"},"events":{"type":"list","member":{}}}},"S1x":{"type":"structure","members":{"deploymentType":{},"deploymentOption":{}}},"S20":{"type":"structure","members":{"terminateBlueInstancesOnDeploymentSuccess":{"type":"structure","members":{"action":{},"terminationWaitTimeInMinutes":{"type":"integer"}}},"deploymentReadyOption":{"type":"structure","members":{"actionOnTimeout":{},"waitTimeInMinutes":{"type":"integer"}}},"greenFleetProvisioningOption":{"type":"structure","members":{"action":{}}}}},"S28":{"type":"structure","members":{"elbInfoList":{"type":"list","member":{"type":"structure","members":{"name":{}}}},"targetGroupInfoList":{"type":"list","member":{"type":"structure","members":{"name":{}}}}}},"S2f":{"type":"structure","members":{"deploymentId":{},"status":{},"endTime":{"type":"timestamp"},"createTime":{"type":"timestamp"}}},"S2i":{"type":"structure","members":{"ec2TagSetList":{"type":"list","member":{"shape":"S19"}}}},"S2k":{"type":"structure","members":{"onPremisesTagSetList":{"type":"list","member":{"shape":"S1c"}}}},"S2n":{"type":"list","member":{}},"S2r":{"type":"structure","members":{"deploymentId":{},"instanceId":{},"status":{},"lastUpdatedAt":{"type":"timestamp"},"lifecycleEvents":{"type":"list","member":{"type":"structure","members":{"lifecycleEventName":{},"diagnostics":{"type":"structure","members":{"errorCode":{},"scriptName":{},"message":{},"logTail":{}}},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"status":{}}}},"instanceType":{}}},"S34":{"type":"list","member":{}},"S37":{"type":"structure","members":{"applicationName":{},"deploymentGroupName":{},"deploymentConfigName":{},"deploymentId":{},"previousRevision":{"shape":"Sb"},"revision":{"shape":"Sb"},"status":{},"errorInformation":{"type":"structure","members":{"code":{},"message":{}}},"createTime":{"type":"timestamp"},"startTime":{"type":"timestamp"},"completeTime":{"type":"timestamp"},"deploymentOverview":{"type":"structure","members":{"Pending":{"type":"long"},"InProgress":{"type":"long"},"Succeeded":{"type":"long"},"Failed":{"type":"long"},"Skipped":{"type":"long"},"Ready":{"type":"long"}}},"description":{},"creator":{},"ignoreApplicationStopFailures":{"type":"boolean"},"autoRollbackConfiguration":{"shape":"S1u"},"updateOutdatedInstancesOnly":{"type":"boolean"},"rollbackInfo":{"type":"structure","members":{"rollbackDeploymentId":{},"rollbackTriggeringDeploymentId":{},"rollbackMessage":{}}},"deploymentStyle":{"shape":"S1x"},"targetInstances":{"shape":"S3e"},"instanceTerminationWaitTimeStarted":{"type":"boolean"},"blueGreenDeploymentConfiguration":{"shape":"S20"},"loadBalancerInfo":{"shape":"S28"},"additionalDeploymentStatusInfo":{},"fileExistsBehavior":{}}},"S3e":{"type":"structure","members":{"tagFilters":{"shape":"S19"},"autoScalingGroups":{"shape":"S3f"},"ec2TagSet":{"shape":"S2i"}}},"S3f":{"type":"list","member":{}},"S3l":{"type":"structure","members":{"instanceName":{},"iamSessionArn":{},"iamUserArn":{},"instanceArn":{},"registerTime":{"type":"timestamp"},"deregisterTime":{"type":"timestamp"},"tags":{"shape":"S2"}}},"S3v":{"type":"structure","members":{"value":{"type":"integer"},"type":{}}}}}

/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListApplicationRevisions":{"input_token":"nextToken","output_token":"nextToken","result_key":"revisions"},"ListApplications":{"input_token":"nextToken","output_token":"nextToken","result_key":"applications"},"ListDeploymentConfigs":{"input_token":"nextToken","output_token":"nextToken","result_key":"deploymentConfigsList"},"ListDeploymentGroups":{"input_token":"nextToken","output_token":"nextToken","result_key":"deploymentGroups"},"ListDeploymentInstances":{"input_token":"nextToken","output_token":"nextToken","result_key":"instancesList"},"ListDeployments":{"input_token":"nextToken","output_token":"nextToken","result_key":"deployments"}}}

/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"DeploymentSuccessful":{"delay":15,"operation":"GetDeployment","maxAttempts":120,"acceptors":[{"expected":"Succeeded","matcher":"path","state":"success","argument":"deploymentInfo.status"},{"expected":"Failed","matcher":"path","state":"failure","argument":"deploymentInfo.status"},{"expected":"Stopped","matcher":"path","state":"failure","argument":"deploymentInfo.status"}]}}}

/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-07-09","endpointPrefix":"codepipeline","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodePipeline","serviceFullName":"AWS CodePipeline","signatureVersion":"v4","targetPrefix":"CodePipeline_20150709","uid":"codepipeline-2015-07-09"},"operations":{"AcknowledgeJob":{"input":{"type":"structure","required":["jobId","nonce"],"members":{"jobId":{},"nonce":{}}},"output":{"type":"structure","members":{"status":{}}}},"AcknowledgeThirdPartyJob":{"input":{"type":"structure","required":["jobId","nonce","clientToken"],"members":{"jobId":{},"nonce":{},"clientToken":{}}},"output":{"type":"structure","members":{"status":{}}}},"CreateCustomActionType":{"input":{"type":"structure","required":["category","provider","version","inputArtifactDetails","outputArtifactDetails"],"members":{"category":{},"provider":{},"version":{},"settings":{"shape":"Se"},"configurationProperties":{"shape":"Sh"},"inputArtifactDetails":{"shape":"Sn"},"outputArtifactDetails":{"shape":"Sn"}}},"output":{"type":"structure","required":["actionType"],"members":{"actionType":{"shape":"Sr"}}}},"CreatePipeline":{"input":{"type":"structure","required":["pipeline"],"members":{"pipeline":{"shape":"Sv"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sv"}}}},"DeleteCustomActionType":{"input":{"type":"structure","required":["category","provider","version"],"members":{"category":{},"provider":{},"version":{}}}},"DeletePipeline":{"input":{"type":"structure","required":["name"],"members":{"name":{}}}},"DisableStageTransition":{"input":{"type":"structure","required":["pipelineName","stageName","transitionType","reason"],"members":{"pipelineName":{},"stageName":{},"transitionType":{},"reason":{}}}},"EnableStageTransition":{"input":{"type":"structure","required":["pipelineName","stageName","transitionType"],"members":{"pipelineName":{},"stageName":{},"transitionType":{}}}},"GetJobDetails":{"input":{"type":"structure","required":["jobId"],"members":{"jobId":{}}},"output":{"type":"structure","members":{"jobDetails":{"type":"structure","members":{"id":{},"data":{"shape":"S1x"},"accountId":{}}}}}},"GetPipeline":{"input":{"type":"structure","required":["name"],"members":{"name":{},"version":{"type":"integer"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sv"},"metadata":{"type":"structure","members":{"pipelineArn":{},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}}}}},"GetPipelineExecution":{"input":{"type":"structure","required":["pipelineName","pipelineExecutionId"],"members":{"pipelineName":{},"pipelineExecutionId":{}}},"output":{"type":"structure","members":{"pipelineExecution":{"type":"structure","members":{"pipelineName":{},"pipelineVersion":{"type":"integer"},"pipelineExecutionId":{},"status":{},"artifactRevisions":{"type":"list","member":{"type":"structure","members":{"name":{},"revisionId":{},"revisionChangeIdentifier":{},"revisionSummary":{},"created":{"type":"timestamp"},"revisionUrl":{}}}}}}}}},"GetPipelineState":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{"pipelineName":{},"pipelineVersion":{"type":"integer"},"stageStates":{"type":"list","member":{"type":"structure","members":{"stageName":{},"inboundTransitionState":{"type":"structure","members":{"enabled":{"type":"boolean"},"lastChangedBy":{},"lastChangedAt":{"type":"timestamp"},"disabledReason":{}}},"actionStates":{"type":"list","member":{"type":"structure","members":{"actionName":{},"currentRevision":{"shape":"S34"},"latestExecution":{"type":"structure","members":{"status":{},"summary":{},"lastStatusChange":{"type":"timestamp"},"token":{},"lastUpdatedBy":{},"externalExecutionId":{},"externalExecutionUrl":{},"percentComplete":{"type":"integer"},"errorDetails":{"type":"structure","members":{"code":{},"message":{}}}}},"entityUrl":{},"revisionUrl":{}}}},"latestExecution":{"type":"structure","required":["pipelineExecutionId","status"],"members":{"pipelineExecutionId":{},"status":{}}}}}},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}}},"GetThirdPartyJobDetails":{"input":{"type":"structure","required":["jobId","clientToken"],"members":{"jobId":{},"clientToken":{}}},"output":{"type":"structure","members":{"jobDetails":{"type":"structure","members":{"id":{},"data":{"type":"structure","members":{"actionTypeId":{"shape":"Ss"},"actionConfiguration":{"shape":"S1y"},"pipelineContext":{"shape":"S1z"},"inputArtifacts":{"shape":"S22"},"outputArtifacts":{"shape":"S22"},"artifactCredentials":{"shape":"S2a"},"continuationToken":{},"encryptionKey":{"shape":"S11"}}},"nonce":{}}}}}},"ListActionTypes":{"input":{"type":"structure","members":{"actionOwnerFilter":{},"nextToken":{}}},"output":{"type":"structure","required":["actionTypes"],"members":{"actionTypes":{"type":"list","member":{"shape":"Sr"}},"nextToken":{}}}},"ListPipelineExecutions":{"input":{"type":"structure","required":["pipelineName"],"members":{"pipelineName":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"pipelineExecutionSummaries":{"type":"list","member":{"type":"structure","members":{"pipelineExecutionId":{},"status":{},"startTime":{"type":"timestamp"},"lastUpdateTime":{"type":"timestamp"}}}},"nextToken":{}}}},"ListPipelines":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"pipelines":{"type":"list","member":{"type":"structure","members":{"name":{},"version":{"type":"integer"},"created":{"type":"timestamp"},"updated":{"type":"timestamp"}}}},"nextToken":{}}}},"PollForJobs":{"input":{"type":"structure","required":["actionTypeId"],"members":{"actionTypeId":{"shape":"Ss"},"maxBatchSize":{"type":"integer"},"queryParam":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","members":{"id":{},"data":{"shape":"S1x"},"nonce":{},"accountId":{}}}}}}},"PollForThirdPartyJobs":{"input":{"type":"structure","required":["actionTypeId"],"members":{"actionTypeId":{"shape":"Ss"},"maxBatchSize":{"type":"integer"}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"type":"structure","members":{"clientId":{},"jobId":{}}}}}}},"PutActionRevision":{"input":{"type":"structure","required":["pipelineName","stageName","actionName","actionRevision"],"members":{"pipelineName":{},"stageName":{},"actionName":{},"actionRevision":{"shape":"S34"}}},"output":{"type":"structure","members":{"newRevision":{"type":"boolean"},"pipelineExecutionId":{}}}},"PutApprovalResult":{"input":{"type":"structure","required":["pipelineName","stageName","actionName","result","token"],"members":{"pipelineName":{},"stageName":{},"actionName":{},"result":{"type":"structure","required":["summary","status"],"members":{"summary":{},"status":{}}},"token":{}}},"output":{"type":"structure","members":{"approvedAt":{"type":"timestamp"}}}},"PutJobFailureResult":{"input":{"type":"structure","required":["jobId","failureDetails"],"members":{"jobId":{},"failureDetails":{"shape":"S4j"}}}},"PutJobSuccessResult":{"input":{"type":"structure","required":["jobId"],"members":{"jobId":{},"currentRevision":{"shape":"S4m"},"continuationToken":{},"executionDetails":{"shape":"S4o"}}}},"PutThirdPartyJobFailureResult":{"input":{"type":"structure","required":["jobId","clientToken","failureDetails"],"members":{"jobId":{},"clientToken":{},"failureDetails":{"shape":"S4j"}}}},"PutThirdPartyJobSuccessResult":{"input":{"type":"structure","required":["jobId","clientToken"],"members":{"jobId":{},"clientToken":{},"currentRevision":{"shape":"S4m"},"continuationToken":{},"executionDetails":{"shape":"S4o"}}}},"RetryStageExecution":{"input":{"type":"structure","required":["pipelineName","stageName","pipelineExecutionId","retryMode"],"members":{"pipelineName":{},"stageName":{},"pipelineExecutionId":{},"retryMode":{}}},"output":{"type":"structure","members":{"pipelineExecutionId":{}}}},"StartPipelineExecution":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","members":{"pipelineExecutionId":{}}}},"UpdatePipeline":{"input":{"type":"structure","required":["pipeline"],"members":{"pipeline":{"shape":"Sv"}}},"output":{"type":"structure","members":{"pipeline":{"shape":"Sv"}}}}},"shapes":{"Se":{"type":"structure","members":{"thirdPartyConfigurationUrl":{},"entityUrlTemplate":{},"executionUrlTemplate":{},"revisionUrlTemplate":{}}},"Sh":{"type":"list","member":{"type":"structure","required":["name","required","key","secret"],"members":{"name":{},"required":{"type":"boolean"},"key":{"type":"boolean"},"secret":{"type":"boolean"},"queryable":{"type":"boolean"},"description":{},"type":{}}}},"Sn":{"type":"structure","required":["minimumCount","maximumCount"],"members":{"minimumCount":{"type":"integer"},"maximumCount":{"type":"integer"}}},"Sr":{"type":"structure","required":["id","inputArtifactDetails","outputArtifactDetails"],"members":{"id":{"shape":"Ss"},"settings":{"shape":"Se"},"actionConfigurationProperties":{"shape":"Sh"},"inputArtifactDetails":{"shape":"Sn"},"outputArtifactDetails":{"shape":"Sn"}}},"Ss":{"type":"structure","required":["category","owner","provider","version"],"members":{"category":{},"owner":{},"provider":{},"version":{}}},"Sv":{"type":"structure","required":["name","roleArn","artifactStore","stages"],"members":{"name":{},"roleArn":{},"artifactStore":{"type":"structure","required":["type","location"],"members":{"type":{},"location":{},"encryptionKey":{"shape":"S11"}}},"stages":{"type":"list","member":{"type":"structure","required":["name","actions"],"members":{"name":{},"blockers":{"type":"list","member":{"type":"structure","required":["name","type"],"members":{"name":{},"type":{}}}},"actions":{"type":"list","member":{"type":"structure","required":["name","actionTypeId"],"members":{"name":{},"actionTypeId":{"shape":"Ss"},"runOrder":{"type":"integer"},"configuration":{"shape":"S1f"},"outputArtifacts":{"type":"list","member":{"type":"structure","required":["name"],"members":{"name":{}}}},"inputArtifacts":{"type":"list","member":{"type":"structure","required":["name"],"members":{"name":{}}}},"roleArn":{}}}}}}},"version":{"type":"integer"}}},"S11":{"type":"structure","required":["id","type"],"members":{"id":{},"type":{}}},"S1f":{"type":"map","key":{},"value":{}},"S1x":{"type":"structure","members":{"actionTypeId":{"shape":"Ss"},"actionConfiguration":{"shape":"S1y"},"pipelineContext":{"shape":"S1z"},"inputArtifacts":{"shape":"S22"},"outputArtifacts":{"shape":"S22"},"artifactCredentials":{"shape":"S2a"},"continuationToken":{},"encryptionKey":{"shape":"S11"}}},"S1y":{"type":"structure","members":{"configuration":{"shape":"S1f"}}},"S1z":{"type":"structure","members":{"pipelineName":{},"stage":{"type":"structure","members":{"name":{}}},"action":{"type":"structure","members":{"name":{}}}}},"S22":{"type":"list","member":{"type":"structure","members":{"name":{},"revision":{},"location":{"type":"structure","members":{"type":{},"s3Location":{"type":"structure","required":["bucketName","objectKey"],"members":{"bucketName":{},"objectKey":{}}}}}}}},"S2a":{"type":"structure","required":["accessKeyId","secretAccessKey","sessionToken"],"members":{"accessKeyId":{},"secretAccessKey":{},"sessionToken":{}},"sensitive":true},"S34":{"type":"structure","required":["revisionId","revisionChangeId","created"],"members":{"revisionId":{},"revisionChangeId":{},"created":{"type":"timestamp"}}},"S4j":{"type":"structure","required":["type","message"],"members":{"type":{},"message":{},"externalExecutionId":{}}},"S4m":{"type":"structure","required":["revision","changeIdentifier"],"members":{"revision":{},"changeIdentifier":{},"created":{"type":"timestamp"},"revisionSummary":{}}},"S4o":{"type":"structure","members":{"summary":{},"externalExecutionId":{},"percentComplete":{"type":"integer"}}}}}

/***/ }),
/* 171 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-04-19","endpointPrefix":"codestar","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"CodeStar","serviceFullName":"AWS CodeStar","signatureVersion":"v4","targetPrefix":"CodeStar_20170419","uid":"codestar-2017-04-19"},"operations":{"AssociateTeamMember":{"input":{"type":"structure","required":["projectId","userArn","projectRole"],"members":{"projectId":{},"clientRequestToken":{},"userArn":{},"projectRole":{},"remoteAccessAllowed":{"type":"boolean"}}},"output":{"type":"structure","members":{"clientRequestToken":{}}}},"CreateProject":{"input":{"type":"structure","required":["name","id"],"members":{"name":{"shape":"S9"},"id":{},"description":{"shape":"Sa"},"clientRequestToken":{}}},"output":{"type":"structure","required":["id","arn"],"members":{"id":{},"arn":{},"clientRequestToken":{},"projectTemplateId":{}}}},"CreateUserProfile":{"input":{"type":"structure","required":["userArn","displayName","emailAddress"],"members":{"userArn":{},"displayName":{},"emailAddress":{"shape":"Sg"},"sshPublicKey":{}}},"output":{"type":"structure","required":["userArn"],"members":{"userArn":{},"displayName":{},"emailAddress":{"shape":"Sg"},"sshPublicKey":{},"createdTimestamp":{"type":"timestamp"},"lastModifiedTimestamp":{"type":"timestamp"}}}},"DeleteProject":{"input":{"type":"structure","required":["id"],"members":{"id":{},"clientRequestToken":{},"deleteStack":{"type":"boolean"}}},"output":{"type":"structure","members":{"stackId":{},"projectArn":{}}}},"DeleteUserProfile":{"input":{"type":"structure","required":["userArn"],"members":{"userArn":{}}},"output":{"type":"structure","required":["userArn"],"members":{"userArn":{}}}},"DescribeProject":{"input":{"type":"structure","required":["id"],"members":{"id":{}}},"output":{"type":"structure","members":{"name":{"shape":"S9"},"id":{},"arn":{},"description":{"shape":"Sa"},"clientRequestToken":{},"createdTimeStamp":{"type":"timestamp"},"stackId":{},"projectTemplateId":{}}}},"DescribeUserProfile":{"input":{"type":"structure","required":["userArn"],"members":{"userArn":{}}},"output":{"type":"structure","required":["userArn","createdTimestamp","lastModifiedTimestamp"],"members":{"userArn":{},"displayName":{},"emailAddress":{"shape":"Sg"},"sshPublicKey":{},"createdTimestamp":{"type":"timestamp"},"lastModifiedTimestamp":{"type":"timestamp"}}}},"DisassociateTeamMember":{"input":{"type":"structure","required":["projectId","userArn"],"members":{"projectId":{},"userArn":{}}},"output":{"type":"structure","members":{}}},"ListProjects":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["projects"],"members":{"projects":{"type":"list","member":{"type":"structure","members":{"projectId":{},"projectArn":{}}}},"nextToken":{}}}},"ListResources":{"input":{"type":"structure","required":["projectId"],"members":{"projectId":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"resources":{"type":"list","member":{"type":"structure","required":["id"],"members":{"id":{}}}},"nextToken":{}}}},"ListTagsForProject":{"input":{"type":"structure","required":["id"],"members":{"id":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"tags":{"shape":"S1a"},"nextToken":{}}}},"ListTeamMembers":{"input":{"type":"structure","required":["projectId"],"members":{"projectId":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["teamMembers"],"members":{"teamMembers":{"type":"list","member":{"type":"structure","required":["userArn","projectRole"],"members":{"userArn":{},"projectRole":{},"remoteAccessAllowed":{"type":"boolean"}}}},"nextToken":{}}}},"ListUserProfiles":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["userProfiles"],"members":{"userProfiles":{"type":"list","member":{"type":"structure","members":{"userArn":{},"displayName":{},"emailAddress":{"shape":"Sg"},"sshPublicKey":{}}}},"nextToken":{}}}},"TagProject":{"input":{"type":"structure","required":["id","tags"],"members":{"id":{},"tags":{"shape":"S1a"}}},"output":{"type":"structure","members":{"tags":{"shape":"S1a"}}}},"UntagProject":{"input":{"type":"structure","required":["id","tags"],"members":{"id":{},"tags":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateProject":{"input":{"type":"structure","required":["id"],"members":{"id":{},"name":{"shape":"S9"},"description":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}},"UpdateTeamMember":{"input":{"type":"structure","required":["projectId","userArn"],"members":{"projectId":{},"userArn":{},"projectRole":{},"remoteAccessAllowed":{"type":"boolean"}}},"output":{"type":"structure","members":{"userArn":{},"projectRole":{},"remoteAccessAllowed":{"type":"boolean"}}}},"UpdateUserProfile":{"input":{"type":"structure","required":["userArn"],"members":{"userArn":{},"displayName":{},"emailAddress":{"shape":"Sg"},"sshPublicKey":{}}},"output":{"type":"structure","required":["userArn"],"members":{"userArn":{},"displayName":{},"emailAddress":{"shape":"Sg"},"sshPublicKey":{},"createdTimestamp":{"type":"timestamp"},"lastModifiedTimestamp":{"type":"timestamp"}}}}},"shapes":{"S9":{"type":"string","sensitive":true},"Sa":{"type":"string","sensitive":true},"Sg":{"type":"string","sensitive":true},"S1a":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 173 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 174 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-06-30","endpointPrefix":"cognito-identity","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Cognito Identity","signatureVersion":"v4","targetPrefix":"AWSCognitoIdentityService","uid":"cognito-identity-2014-06-30"},"operations":{"CreateIdentityPool":{"input":{"type":"structure","required":["IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S4"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S8"},"CognitoIdentityProviders":{"shape":"Sa"},"SamlProviderARNs":{"shape":"Sf"}}},"output":{"shape":"Sg"}},"DeleteIdentities":{"input":{"type":"structure","required":["IdentityIdsToDelete"],"members":{"IdentityIdsToDelete":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"UnprocessedIdentityIds":{"type":"list","member":{"type":"structure","members":{"IdentityId":{},"ErrorCode":{}}}}}}},"DeleteIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}}},"DescribeIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{}}},"output":{"shape":"Sr"}},"DescribeIdentityPool":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"shape":"Sg"}},"GetCredentialsForIdentity":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"Sw"},"CustomRoleArn":{}}},"output":{"type":"structure","members":{"IdentityId":{},"Credentials":{"type":"structure","members":{"AccessKeyId":{},"SecretKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}}}}},"GetId":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"AccountId":{},"IdentityPoolId":{},"Logins":{"shape":"Sw"}}},"output":{"type":"structure","members":{"IdentityId":{}}}},"GetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Roles":{"shape":"S18"},"RoleMappings":{"shape":"S1a"}}}},"GetOpenIdToken":{"input":{"type":"structure","required":["IdentityId"],"members":{"IdentityId":{},"Logins":{"shape":"Sw"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}}},"GetOpenIdTokenForDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId","Logins"],"members":{"IdentityPoolId":{},"IdentityId":{},"Logins":{"shape":"Sw"},"TokenDuration":{"type":"long"}}},"output":{"type":"structure","members":{"IdentityId":{},"Token":{}}}},"ListIdentities":{"input":{"type":"structure","required":["IdentityPoolId","MaxResults"],"members":{"IdentityPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{},"HideDisabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"Identities":{"type":"list","member":{"shape":"Sr"}},"NextToken":{}}}},"ListIdentityPools":{"input":{"type":"structure","required":["MaxResults"],"members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityPools":{"type":"list","member":{"type":"structure","members":{"IdentityPoolId":{},"IdentityPoolName":{}}}},"NextToken":{}}}},"LookupDeveloperIdentity":{"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{},"IdentityId":{},"DeveloperUserIdentifier":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IdentityId":{},"DeveloperUserIdentifierList":{"type":"list","member":{}},"NextToken":{}}}},"MergeDeveloperIdentities":{"input":{"type":"structure","required":["SourceUserIdentifier","DestinationUserIdentifier","DeveloperProviderName","IdentityPoolId"],"members":{"SourceUserIdentifier":{},"DestinationUserIdentifier":{},"DeveloperProviderName":{},"IdentityPoolId":{}}},"output":{"type":"structure","members":{"IdentityId":{}}}},"SetIdentityPoolRoles":{"input":{"type":"structure","required":["IdentityPoolId","Roles"],"members":{"IdentityPoolId":{},"Roles":{"shape":"S18"},"RoleMappings":{"shape":"S1a"}}}},"UnlinkDeveloperIdentity":{"input":{"type":"structure","required":["IdentityId","IdentityPoolId","DeveloperProviderName","DeveloperUserIdentifier"],"members":{"IdentityId":{},"IdentityPoolId":{},"DeveloperProviderName":{},"DeveloperUserIdentifier":{}}}},"UnlinkIdentity":{"input":{"type":"structure","required":["IdentityId","Logins","LoginsToRemove"],"members":{"IdentityId":{},"Logins":{"shape":"Sw"},"LoginsToRemove":{"shape":"Ss"}}}},"UpdateIdentityPool":{"input":{"shape":"Sg"},"output":{"shape":"Sg"}}},"shapes":{"S4":{"type":"map","key":{},"value":{}},"S8":{"type":"list","member":{}},"Sa":{"type":"list","member":{"type":"structure","members":{"ProviderName":{},"ClientId":{},"ServerSideTokenCheck":{"type":"boolean"}}}},"Sf":{"type":"list","member":{}},"Sg":{"type":"structure","required":["IdentityPoolId","IdentityPoolName","AllowUnauthenticatedIdentities"],"members":{"IdentityPoolId":{},"IdentityPoolName":{},"AllowUnauthenticatedIdentities":{"type":"boolean"},"SupportedLoginProviders":{"shape":"S4"},"DeveloperProviderName":{},"OpenIdConnectProviderARNs":{"shape":"S8"},"CognitoIdentityProviders":{"shape":"Sa"},"SamlProviderARNs":{"shape":"Sf"}}},"Sr":{"type":"structure","members":{"IdentityId":{},"Logins":{"shape":"Ss"},"CreationDate":{"type":"timestamp"},"LastModifiedDate":{"type":"timestamp"}}},"Ss":{"type":"list","member":{}},"Sw":{"type":"map","key":{},"value":{}},"S18":{"type":"map","key":{},"value":{}},"S1a":{"type":"map","key":{},"value":{"type":"structure","required":["Type"],"members":{"Type":{},"AmbiguousRoleResolution":{},"RulesConfiguration":{"type":"structure","required":["Rules"],"members":{"Rules":{"type":"list","member":{"type":"structure","required":["Claim","MatchType","Value","RoleARN"],"members":{"Claim":{},"MatchType":{},"Value":{},"RoleARN":{}}}}}}}}}}}

/***/ }),
/* 175 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 176 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-04-18","endpointPrefix":"cognito-idp","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Cognito Identity Provider","signatureVersion":"v4","targetPrefix":"AWSCognitoIdentityProviderService","uid":"cognito-idp-2016-04-18"},"operations":{"AddCustomAttributes":{"input":{"type":"structure","required":["UserPoolId","CustomAttributes"],"members":{"UserPoolId":{},"CustomAttributes":{"type":"list","member":{"shape":"S4"}}}},"output":{"type":"structure","members":{}}},"AdminAddUserToGroup":{"input":{"type":"structure","required":["UserPoolId","Username","GroupName"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"GroupName":{}}}},"AdminConfirmSignUp":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"AdminCreateUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Si"},"ValidationData":{"shape":"Si"},"TemporaryPassword":{"shape":"Sm"},"ForceAliasCreation":{"type":"boolean"},"MessageAction":{},"DesiredDeliveryMediums":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"User":{"shape":"Ss"}}}},"AdminDeleteUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}}},"AdminDeleteUserAttributes":{"input":{"type":"structure","required":["UserPoolId","Username","UserAttributeNames"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"UserAttributeNames":{"shape":"Sz"}}},"output":{"type":"structure","members":{}}},"AdminDisableProviderForUser":{"input":{"type":"structure","required":["UserPoolId","User"],"members":{"UserPoolId":{},"User":{"shape":"S12"}}},"output":{"type":"structure","members":{}}},"AdminDisableUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"AdminEnableUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"AdminForgetDevice":{"input":{"type":"structure","required":["UserPoolId","Username","DeviceKey"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"DeviceKey":{}}}},"AdminGetDevice":{"input":{"type":"structure","required":["DeviceKey","UserPoolId","Username"],"members":{"DeviceKey":{},"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","required":["Device"],"members":{"Device":{"shape":"S1d"}}}},"AdminGetUser":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","required":["Username"],"members":{"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Si"},"UserCreateDate":{"type":"timestamp"},"UserLastModifiedDate":{"type":"timestamp"},"Enabled":{"type":"boolean"},"UserStatus":{},"MFAOptions":{"shape":"Sv"}}}},"AdminInitiateAuth":{"input":{"type":"structure","required":["UserPoolId","ClientId","AuthFlow"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1h"},"AuthFlow":{},"AuthParameters":{"shape":"S1j"},"ClientMetadata":{"shape":"S1k"}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1o"},"AuthenticationResult":{"shape":"S1p"}}}},"AdminLinkProviderForUser":{"input":{"type":"structure","required":["UserPoolId","DestinationUser","SourceUser"],"members":{"UserPoolId":{},"DestinationUser":{"shape":"S12"},"SourceUser":{"shape":"S12"}}},"output":{"type":"structure","members":{}}},"AdminListDevices":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"Limit":{"type":"integer"},"PaginationToken":{}}},"output":{"type":"structure","members":{"Devices":{"shape":"S1z"},"PaginationToken":{}}}},"AdminListGroupsForUser":{"input":{"type":"structure","required":["Username","UserPoolId"],"members":{"Username":{"shape":"Sd"},"UserPoolId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Groups":{"shape":"S23"},"NextToken":{}}}},"AdminRemoveUserFromGroup":{"input":{"type":"structure","required":["UserPoolId","Username","GroupName"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"GroupName":{}}}},"AdminResetUserPassword":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"AdminRespondToAuthChallenge":{"input":{"type":"structure","required":["UserPoolId","ClientId","ChallengeName"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1h"},"ChallengeName":{},"ChallengeResponses":{"shape":"S2c"},"Session":{}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1o"},"AuthenticationResult":{"shape":"S1p"}}}},"AdminSetUserSettings":{"input":{"type":"structure","required":["UserPoolId","Username","MFAOptions"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"MFAOptions":{"shape":"Sv"}}},"output":{"type":"structure","members":{}}},"AdminUpdateDeviceStatus":{"input":{"type":"structure","required":["UserPoolId","Username","DeviceKey"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"DeviceKey":{},"DeviceRememberedStatus":{}}},"output":{"type":"structure","members":{}}},"AdminUpdateUserAttributes":{"input":{"type":"structure","required":["UserPoolId","Username","UserAttributes"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Si"}}},"output":{"type":"structure","members":{}}},"AdminUserGlobalSignOut":{"input":{"type":"structure","required":["UserPoolId","Username"],"members":{"UserPoolId":{},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{}}},"ChangePassword":{"input":{"type":"structure","required":["PreviousPassword","ProposedPassword","AccessToken"],"members":{"PreviousPassword":{"shape":"Sm"},"ProposedPassword":{"shape":"Sm"},"AccessToken":{"shape":"S1q"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"ConfirmDevice":{"input":{"type":"structure","required":["AccessToken","DeviceKey"],"members":{"AccessToken":{"shape":"S1q"},"DeviceKey":{},"DeviceSecretVerifierConfig":{"type":"structure","members":{"PasswordVerifier":{},"Salt":{}}},"DeviceName":{}}},"output":{"type":"structure","members":{"UserConfirmationNecessary":{"type":"boolean"}}}},"ConfirmForgotPassword":{"input":{"type":"structure","required":["ClientId","Username","ConfirmationCode","Password"],"members":{"ClientId":{"shape":"S1h"},"SecretHash":{"shape":"S2u"},"Username":{"shape":"Sd"},"ConfirmationCode":{},"Password":{"shape":"Sm"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"ConfirmSignUp":{"input":{"type":"structure","required":["ClientId","Username","ConfirmationCode"],"members":{"ClientId":{"shape":"S1h"},"SecretHash":{"shape":"S2u"},"Username":{"shape":"Sd"},"ConfirmationCode":{},"ForceAliasCreation":{"type":"boolean"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"CreateGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{},"Description":{},"RoleArn":{},"Precedence":{"type":"integer"}}},"output":{"type":"structure","members":{"Group":{"shape":"S24"}}}},"CreateIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName","ProviderType","ProviderDetails"],"members":{"UserPoolId":{},"ProviderName":{},"ProviderType":{},"ProviderDetails":{"shape":"S34"},"AttributeMapping":{"shape":"S35"},"IdpIdentifiers":{"shape":"S37"}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S3a"}}}},"CreateResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier","Name"],"members":{"UserPoolId":{},"Identifier":{},"Name":{},"Scopes":{"shape":"S3e"}}},"output":{"type":"structure","required":["ResourceServer"],"members":{"ResourceServer":{"shape":"S3j"}}}},"CreateUserImportJob":{"input":{"type":"structure","required":["JobName","UserPoolId","CloudWatchLogsRoleArn"],"members":{"JobName":{},"UserPoolId":{},"CloudWatchLogsRoleArn":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S3n"}}}},"CreateUserPool":{"input":{"type":"structure","required":["PoolName"],"members":{"PoolName":{},"Policies":{"shape":"S3v"},"LambdaConfig":{"shape":"S3y"},"AutoVerifiedAttributes":{"shape":"S3z"},"AliasAttributes":{"shape":"S41"},"UsernameAttributes":{"shape":"S43"},"SmsVerificationMessage":{},"EmailVerificationMessage":{},"EmailVerificationSubject":{},"VerificationMessageTemplate":{"shape":"S48"},"SmsAuthenticationMessage":{},"MfaConfiguration":{},"DeviceConfiguration":{"shape":"S4d"},"EmailConfiguration":{"shape":"S4e"},"SmsConfiguration":{"shape":"S4g"},"UserPoolTags":{"shape":"S4h"},"AdminCreateUserConfig":{"shape":"S4i"},"Schema":{"shape":"S4l"}}},"output":{"type":"structure","members":{"UserPool":{"shape":"S4n"}}}},"CreateUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientName"],"members":{"UserPoolId":{},"ClientName":{},"GenerateSecret":{"type":"boolean"},"RefreshTokenValidity":{"type":"integer"},"ReadAttributes":{"shape":"S4t"},"WriteAttributes":{"shape":"S4t"},"ExplicitAuthFlows":{"shape":"S4v"},"SupportedIdentityProviders":{"shape":"S4x"},"CallbackURLs":{"shape":"S4y"},"LogoutURLs":{"shape":"S50"},"DefaultRedirectURI":{},"AllowedOAuthFlows":{"shape":"S51"},"AllowedOAuthScopes":{"shape":"S53"},"AllowedOAuthFlowsUserPoolClient":{"type":"boolean"}}},"output":{"type":"structure","members":{"UserPoolClient":{"shape":"S56"}}}},"CreateUserPoolDomain":{"input":{"type":"structure","required":["Domain","UserPoolId"],"members":{"Domain":{},"UserPoolId":{}}},"output":{"type":"structure","members":{}}},"DeleteGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{}}}},"DeleteIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName"],"members":{"UserPoolId":{},"ProviderName":{}}}},"DeleteResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier"],"members":{"UserPoolId":{},"Identifier":{}}}},"DeleteUser":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1q"}}},"authtype":"none"},"DeleteUserAttributes":{"input":{"type":"structure","required":["UserAttributeNames","AccessToken"],"members":{"UserAttributeNames":{"shape":"Sz"},"AccessToken":{"shape":"S1q"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"DeleteUserPool":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}}},"DeleteUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1h"}}}},"DeleteUserPoolDomain":{"input":{"type":"structure","required":["Domain","UserPoolId"],"members":{"Domain":{},"UserPoolId":{}}},"output":{"type":"structure","members":{}}},"DescribeIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName"],"members":{"UserPoolId":{},"ProviderName":{}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S3a"}}}},"DescribeResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier"],"members":{"UserPoolId":{},"Identifier":{}}},"output":{"type":"structure","required":["ResourceServer"],"members":{"ResourceServer":{"shape":"S3j"}}}},"DescribeUserImportJob":{"input":{"type":"structure","required":["UserPoolId","JobId"],"members":{"UserPoolId":{},"JobId":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S3n"}}}},"DescribeUserPool":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}},"output":{"type":"structure","members":{"UserPool":{"shape":"S4n"}}}},"DescribeUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1h"}}},"output":{"type":"structure","members":{"UserPoolClient":{"shape":"S56"}}}},"DescribeUserPoolDomain":{"input":{"type":"structure","required":["Domain"],"members":{"Domain":{}}},"output":{"type":"structure","members":{"DomainDescription":{"type":"structure","members":{"UserPoolId":{},"AWSAccountId":{},"Domain":{},"S3Bucket":{},"CloudFrontDistribution":{},"Version":{},"Status":{}}}}}},"ForgetDevice":{"input":{"type":"structure","required":["DeviceKey"],"members":{"AccessToken":{"shape":"S1q"},"DeviceKey":{}}}},"ForgotPassword":{"input":{"type":"structure","required":["ClientId","Username"],"members":{"ClientId":{"shape":"S1h"},"SecretHash":{"shape":"S2u"},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{"CodeDeliveryDetails":{"shape":"S65"}}},"authtype":"none"},"GetCSVHeader":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{}}},"output":{"type":"structure","members":{"UserPoolId":{},"CSVHeader":{"type":"list","member":{}}}}},"GetDevice":{"input":{"type":"structure","required":["DeviceKey"],"members":{"DeviceKey":{},"AccessToken":{"shape":"S1q"}}},"output":{"type":"structure","required":["Device"],"members":{"Device":{"shape":"S1d"}}}},"GetGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{}}},"output":{"type":"structure","members":{"Group":{"shape":"S24"}}}},"GetIdentityProviderByIdentifier":{"input":{"type":"structure","required":["UserPoolId","IdpIdentifier"],"members":{"UserPoolId":{},"IdpIdentifier":{}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S3a"}}}},"GetUICustomization":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1h"}}},"output":{"type":"structure","required":["UICustomization"],"members":{"UICustomization":{"shape":"S6h"}}}},"GetUser":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1q"}}},"output":{"type":"structure","required":["Username","UserAttributes"],"members":{"Username":{"shape":"Sd"},"UserAttributes":{"shape":"Si"},"MFAOptions":{"shape":"Sv"}}},"authtype":"none"},"GetUserAttributeVerificationCode":{"input":{"type":"structure","required":["AccessToken","AttributeName"],"members":{"AccessToken":{"shape":"S1q"},"AttributeName":{}}},"output":{"type":"structure","members":{"CodeDeliveryDetails":{"shape":"S65"}}},"authtype":"none"},"GlobalSignOut":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1q"}}},"output":{"type":"structure","members":{}}},"InitiateAuth":{"input":{"type":"structure","required":["AuthFlow","ClientId"],"members":{"AuthFlow":{},"AuthParameters":{"shape":"S1j"},"ClientMetadata":{"shape":"S1k"},"ClientId":{"shape":"S1h"}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1o"},"AuthenticationResult":{"shape":"S1p"}}}},"ListDevices":{"input":{"type":"structure","required":["AccessToken"],"members":{"AccessToken":{"shape":"S1q"},"Limit":{"type":"integer"},"PaginationToken":{}}},"output":{"type":"structure","members":{"Devices":{"shape":"S1z"},"PaginationToken":{}}}},"ListGroups":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Groups":{"shape":"S23"},"NextToken":{}}}},"ListIdentityProviders":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["Providers"],"members":{"Providers":{"type":"list","member":{"type":"structure","members":{"ProviderName":{},"ProviderType":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}}},"NextToken":{}}}},"ListResourceServers":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["ResourceServers"],"members":{"ResourceServers":{"type":"list","member":{"shape":"S3j"}},"NextToken":{}}}},"ListUserImportJobs":{"input":{"type":"structure","required":["UserPoolId","MaxResults"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"PaginationToken":{}}},"output":{"type":"structure","members":{"UserImportJobs":{"type":"list","member":{"shape":"S3n"}},"PaginationToken":{}}}},"ListUserPoolClients":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"UserPoolClients":{"type":"list","member":{"type":"structure","members":{"ClientId":{"shape":"S1h"},"UserPoolId":{},"ClientName":{}}}},"NextToken":{}}}},"ListUserPools":{"input":{"type":"structure","required":["MaxResults"],"members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"UserPools":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"LambdaConfig":{"shape":"S3y"},"Status":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}}},"NextToken":{}}}},"ListUsers":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"AttributesToGet":{"type":"list","member":{}},"Limit":{"type":"integer"},"PaginationToken":{},"Filter":{}}},"output":{"type":"structure","members":{"Users":{"shape":"S7o"},"PaginationToken":{}}}},"ListUsersInGroup":{"input":{"type":"structure","required":["UserPoolId","GroupName"],"members":{"UserPoolId":{},"GroupName":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Users":{"shape":"S7o"},"NextToken":{}}}},"ResendConfirmationCode":{"input":{"type":"structure","required":["ClientId","Username"],"members":{"ClientId":{"shape":"S1h"},"SecretHash":{"shape":"S2u"},"Username":{"shape":"Sd"}}},"output":{"type":"structure","members":{"CodeDeliveryDetails":{"shape":"S65"}}},"authtype":"none"},"RespondToAuthChallenge":{"input":{"type":"structure","required":["ClientId","ChallengeName"],"members":{"ClientId":{"shape":"S1h"},"ChallengeName":{},"Session":{},"ChallengeResponses":{"shape":"S2c"}}},"output":{"type":"structure","members":{"ChallengeName":{},"Session":{},"ChallengeParameters":{"shape":"S1o"},"AuthenticationResult":{"shape":"S1p"}}}},"SetUICustomization":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1h"},"CSS":{},"ImageFile":{"type":"blob"}}},"output":{"type":"structure","required":["UICustomization"],"members":{"UICustomization":{"shape":"S6h"}}}},"SetUserSettings":{"input":{"type":"structure","required":["AccessToken","MFAOptions"],"members":{"AccessToken":{"shape":"S1q"},"MFAOptions":{"shape":"Sv"}}},"output":{"type":"structure","members":{}},"authtype":"none"},"SignUp":{"input":{"type":"structure","required":["ClientId","Username","Password"],"members":{"ClientId":{"shape":"S1h"},"SecretHash":{"shape":"S2u"},"Username":{"shape":"Sd"},"Password":{"shape":"Sm"},"UserAttributes":{"shape":"Si"},"ValidationData":{"shape":"Si"}}},"output":{"type":"structure","required":["UserConfirmed","UserSub"],"members":{"UserConfirmed":{"type":"boolean"},"CodeDeliveryDetails":{"shape":"S65"},"UserSub":{}}},"authtype":"none"},"StartUserImportJob":{"input":{"type":"structure","required":["UserPoolId","JobId"],"members":{"UserPoolId":{},"JobId":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S3n"}}}},"StopUserImportJob":{"input":{"type":"structure","required":["UserPoolId","JobId"],"members":{"UserPoolId":{},"JobId":{}}},"output":{"type":"structure","members":{"UserImportJob":{"shape":"S3n"}}}},"UpdateDeviceStatus":{"input":{"type":"structure","required":["AccessToken","DeviceKey"],"members":{"AccessToken":{"shape":"S1q"},"DeviceKey":{},"DeviceRememberedStatus":{}}},"output":{"type":"structure","members":{}}},"UpdateGroup":{"input":{"type":"structure","required":["GroupName","UserPoolId"],"members":{"GroupName":{},"UserPoolId":{},"Description":{},"RoleArn":{},"Precedence":{"type":"integer"}}},"output":{"type":"structure","members":{"Group":{"shape":"S24"}}}},"UpdateIdentityProvider":{"input":{"type":"structure","required":["UserPoolId","ProviderName"],"members":{"UserPoolId":{},"ProviderName":{},"ProviderDetails":{"shape":"S34"},"AttributeMapping":{"shape":"S35"},"IdpIdentifiers":{"shape":"S37"}}},"output":{"type":"structure","required":["IdentityProvider"],"members":{"IdentityProvider":{"shape":"S3a"}}}},"UpdateResourceServer":{"input":{"type":"structure","required":["UserPoolId","Identifier","Name"],"members":{"UserPoolId":{},"Identifier":{},"Name":{},"Scopes":{"shape":"S3e"}}},"output":{"type":"structure","required":["ResourceServer"],"members":{"ResourceServer":{"shape":"S3j"}}}},"UpdateUserAttributes":{"input":{"type":"structure","required":["UserAttributes","AccessToken"],"members":{"UserAttributes":{"shape":"Si"},"AccessToken":{"shape":"S1q"}}},"output":{"type":"structure","members":{"CodeDeliveryDetailsList":{"type":"list","member":{"shape":"S65"}}}},"authtype":"none"},"UpdateUserPool":{"input":{"type":"structure","required":["UserPoolId"],"members":{"UserPoolId":{},"Policies":{"shape":"S3v"},"LambdaConfig":{"shape":"S3y"},"AutoVerifiedAttributes":{"shape":"S3z"},"SmsVerificationMessage":{},"EmailVerificationMessage":{},"EmailVerificationSubject":{},"VerificationMessageTemplate":{"shape":"S48"},"SmsAuthenticationMessage":{},"MfaConfiguration":{},"DeviceConfiguration":{"shape":"S4d"},"EmailConfiguration":{"shape":"S4e"},"SmsConfiguration":{"shape":"S4g"},"UserPoolTags":{"shape":"S4h"},"AdminCreateUserConfig":{"shape":"S4i"}}},"output":{"type":"structure","members":{}}},"UpdateUserPoolClient":{"input":{"type":"structure","required":["UserPoolId","ClientId"],"members":{"UserPoolId":{},"ClientId":{"shape":"S1h"},"ClientName":{},"RefreshTokenValidity":{"type":"integer"},"ReadAttributes":{"shape":"S4t"},"WriteAttributes":{"shape":"S4t"},"ExplicitAuthFlows":{"shape":"S4v"},"SupportedIdentityProviders":{"shape":"S4x"},"CallbackURLs":{"shape":"S4y"},"LogoutURLs":{"shape":"S50"},"DefaultRedirectURI":{},"AllowedOAuthFlows":{"shape":"S51"},"AllowedOAuthScopes":{"shape":"S53"},"AllowedOAuthFlowsUserPoolClient":{"type":"boolean"}}},"output":{"type":"structure","members":{"UserPoolClient":{"shape":"S56"}}}},"VerifyUserAttribute":{"input":{"type":"structure","required":["AccessToken","AttributeName","Code"],"members":{"AccessToken":{"shape":"S1q"},"AttributeName":{},"Code":{}}},"output":{"type":"structure","members":{}},"authtype":"none"}},"shapes":{"S4":{"type":"structure","members":{"Name":{},"AttributeDataType":{},"DeveloperOnlyAttribute":{"type":"boolean"},"Mutable":{"type":"boolean"},"Required":{"type":"boolean"},"NumberAttributeConstraints":{"type":"structure","members":{"MinValue":{},"MaxValue":{}}},"StringAttributeConstraints":{"type":"structure","members":{"MinLength":{},"MaxLength":{}}}}},"Sd":{"type":"string","sensitive":true},"Si":{"type":"list","member":{"type":"structure","required":["Name"],"members":{"Name":{},"Value":{"type":"string","sensitive":true}}}},"Sm":{"type":"string","sensitive":true},"Ss":{"type":"structure","members":{"Username":{"shape":"Sd"},"Attributes":{"shape":"Si"},"UserCreateDate":{"type":"timestamp"},"UserLastModifiedDate":{"type":"timestamp"},"Enabled":{"type":"boolean"},"UserStatus":{},"MFAOptions":{"shape":"Sv"}}},"Sv":{"type":"list","member":{"type":"structure","members":{"DeliveryMedium":{},"AttributeName":{}}}},"Sz":{"type":"list","member":{}},"S12":{"type":"structure","members":{"ProviderName":{},"ProviderAttributeName":{},"ProviderAttributeValue":{}}},"S1d":{"type":"structure","members":{"DeviceKey":{},"DeviceAttributes":{"shape":"Si"},"DeviceCreateDate":{"type":"timestamp"},"DeviceLastModifiedDate":{"type":"timestamp"},"DeviceLastAuthenticatedDate":{"type":"timestamp"}}},"S1h":{"type":"string","sensitive":true},"S1j":{"type":"map","key":{},"value":{}},"S1k":{"type":"map","key":{},"value":{}},"S1o":{"type":"map","key":{},"value":{}},"S1p":{"type":"structure","members":{"AccessToken":{"shape":"S1q"},"ExpiresIn":{"type":"integer"},"TokenType":{},"RefreshToken":{"shape":"S1q"},"IdToken":{"shape":"S1q"},"NewDeviceMetadata":{"type":"structure","members":{"DeviceKey":{},"DeviceGroupKey":{}}}}},"S1q":{"type":"string","sensitive":true},"S1z":{"type":"list","member":{"shape":"S1d"}},"S23":{"type":"list","member":{"shape":"S24"}},"S24":{"type":"structure","members":{"GroupName":{},"UserPoolId":{},"Description":{},"RoleArn":{},"Precedence":{"type":"integer"},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}},"S2c":{"type":"map","key":{},"value":{}},"S2u":{"type":"string","sensitive":true},"S34":{"type":"map","key":{},"value":{}},"S35":{"type":"map","key":{},"value":{}},"S37":{"type":"list","member":{}},"S3a":{"type":"structure","members":{"UserPoolId":{},"ProviderName":{},"ProviderType":{},"ProviderDetails":{"shape":"S34"},"AttributeMapping":{"shape":"S35"},"IdpIdentifiers":{"shape":"S37"},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}},"S3e":{"type":"list","member":{"type":"structure","required":["ScopeName","ScopeDescription"],"members":{"ScopeName":{},"ScopeDescription":{}}}},"S3j":{"type":"structure","members":{"UserPoolId":{},"Identifier":{},"Name":{},"Scopes":{"shape":"S3e"}}},"S3n":{"type":"structure","members":{"JobName":{},"JobId":{},"UserPoolId":{},"PreSignedUrl":{},"CreationDate":{"type":"timestamp"},"StartDate":{"type":"timestamp"},"CompletionDate":{"type":"timestamp"},"Status":{},"CloudWatchLogsRoleArn":{},"ImportedUsers":{"type":"long"},"SkippedUsers":{"type":"long"},"FailedUsers":{"type":"long"},"CompletionMessage":{}}},"S3v":{"type":"structure","members":{"PasswordPolicy":{"type":"structure","members":{"MinimumLength":{"type":"integer"},"RequireUppercase":{"type":"boolean"},"RequireLowercase":{"type":"boolean"},"RequireNumbers":{"type":"boolean"},"RequireSymbols":{"type":"boolean"}}}}},"S3y":{"type":"structure","members":{"PreSignUp":{},"CustomMessage":{},"PostConfirmation":{},"PreAuthentication":{},"PostAuthentication":{},"DefineAuthChallenge":{},"CreateAuthChallenge":{},"VerifyAuthChallengeResponse":{}}},"S3z":{"type":"list","member":{}},"S41":{"type":"list","member":{}},"S43":{"type":"list","member":{}},"S48":{"type":"structure","members":{"SmsMessage":{},"EmailMessage":{},"EmailSubject":{},"EmailMessageByLink":{},"EmailSubjectByLink":{},"DefaultEmailOption":{}}},"S4d":{"type":"structure","members":{"ChallengeRequiredOnNewDevice":{"type":"boolean"},"DeviceOnlyRememberedOnUserPrompt":{"type":"boolean"}}},"S4e":{"type":"structure","members":{"SourceArn":{},"ReplyToEmailAddress":{}}},"S4g":{"type":"structure","required":["SnsCallerArn"],"members":{"SnsCallerArn":{},"ExternalId":{}}},"S4h":{"type":"map","key":{},"value":{}},"S4i":{"type":"structure","members":{"AllowAdminCreateUserOnly":{"type":"boolean"},"UnusedAccountValidityDays":{"type":"integer"},"InviteMessageTemplate":{"type":"structure","members":{"SMSMessage":{},"EmailMessage":{},"EmailSubject":{}}}}},"S4l":{"type":"list","member":{"shape":"S4"}},"S4n":{"type":"structure","members":{"Id":{},"Name":{},"Policies":{"shape":"S3v"},"LambdaConfig":{"shape":"S3y"},"Status":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"},"SchemaAttributes":{"shape":"S4l"},"AutoVerifiedAttributes":{"shape":"S3z"},"AliasAttributes":{"shape":"S41"},"UsernameAttributes":{"shape":"S43"},"SmsVerificationMessage":{},"EmailVerificationMessage":{},"EmailVerificationSubject":{},"VerificationMessageTemplate":{"shape":"S48"},"SmsAuthenticationMessage":{},"MfaConfiguration":{},"DeviceConfiguration":{"shape":"S4d"},"EstimatedNumberOfUsers":{"type":"integer"},"EmailConfiguration":{"shape":"S4e"},"SmsConfiguration":{"shape":"S4g"},"UserPoolTags":{"shape":"S4h"},"SmsConfigurationFailure":{},"EmailConfigurationFailure":{},"AdminCreateUserConfig":{"shape":"S4i"}}},"S4t":{"type":"list","member":{}},"S4v":{"type":"list","member":{}},"S4x":{"type":"list","member":{}},"S4y":{"type":"list","member":{}},"S50":{"type":"list","member":{}},"S51":{"type":"list","member":{}},"S53":{"type":"list","member":{}},"S56":{"type":"structure","members":{"UserPoolId":{},"ClientName":{},"ClientId":{"shape":"S1h"},"ClientSecret":{"type":"string","sensitive":true},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"},"RefreshTokenValidity":{"type":"integer"},"ReadAttributes":{"shape":"S4t"},"WriteAttributes":{"shape":"S4t"},"ExplicitAuthFlows":{"shape":"S4v"},"SupportedIdentityProviders":{"shape":"S4x"},"CallbackURLs":{"shape":"S4y"},"LogoutURLs":{"shape":"S50"},"DefaultRedirectURI":{},"AllowedOAuthFlows":{"shape":"S51"},"AllowedOAuthScopes":{"shape":"S53"},"AllowedOAuthFlowsUserPoolClient":{"type":"boolean"}}},"S65":{"type":"structure","members":{"Destination":{},"DeliveryMedium":{},"AttributeName":{}}},"S6h":{"type":"structure","members":{"UserPoolId":{},"ClientId":{"shape":"S1h"},"ImageUrl":{},"CSS":{},"CSSVersion":{},"LastModifiedDate":{"type":"timestamp"},"CreationDate":{"type":"timestamp"}}},"S7o":{"type":"list","member":{"shape":"Ss"}}}}

/***/ }),
/* 177 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 178 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-06-30","endpointPrefix":"cognito-sync","jsonVersion":"1.1","serviceFullName":"Amazon Cognito Sync","signatureVersion":"v4","protocol":"rest-json","uid":"cognito-sync-2014-06-30"},"operations":{"BulkPublish":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/bulkpublish","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{}}}},"DeleteDataset":{"http":{"method":"DELETE","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"}}},"output":{"type":"structure","members":{"Dataset":{"shape":"S8"}}}},"DescribeDataset":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"}}},"output":{"type":"structure","members":{"Dataset":{"shape":"S8"}}}},"DescribeIdentityPoolUsage":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolUsage":{"shape":"Sg"}}}},"DescribeIdentityUsage":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"}}},"output":{"type":"structure","members":{"IdentityUsage":{"type":"structure","members":{"IdentityId":{},"IdentityPoolId":{},"LastModifiedDate":{"type":"timestamp"},"DatasetCount":{"type":"integer"},"DataStorage":{"type":"long"}}}}}},"GetBulkPublishDetails":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/getBulkPublishDetails","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"BulkPublishStartTime":{"type":"timestamp"},"BulkPublishCompleteTime":{"type":"timestamp"},"BulkPublishStatus":{},"FailureMessage":{}}}},"GetCognitoEvents":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/events","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"Events":{"shape":"Sq"}}}},"GetIdentityPoolConfiguration":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/configuration","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}}},"ListDatasets":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets","responseCode":200},"input":{"type":"structure","required":["IdentityId","IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"Datasets":{"type":"list","member":{"shape":"S8"}},"Count":{"type":"integer"},"NextToken":{}}}},"ListIdentityPoolUsage":{"http":{"method":"GET","requestUri":"/identitypools","responseCode":200},"input":{"type":"structure","members":{"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"IdentityPoolUsages":{"type":"list","member":{"shape":"Sg"}},"MaxResults":{"type":"integer"},"Count":{"type":"integer"},"NextToken":{}}}},"ListRecords":{"http":{"method":"GET","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"LastSyncCount":{"location":"querystring","locationName":"lastSyncCount","type":"long"},"NextToken":{"location":"querystring","locationName":"nextToken"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"SyncSessionToken":{"location":"querystring","locationName":"syncSessionToken"}}},"output":{"type":"structure","members":{"Records":{"shape":"S1c"},"NextToken":{},"Count":{"type":"integer"},"DatasetSyncCount":{"type":"long"},"LastModifiedBy":{},"MergedDatasetNames":{"type":"list","member":{}},"DatasetExists":{"type":"boolean"},"DatasetDeletedAfterRequestedSyncCount":{"type":"boolean"},"SyncSessionToken":{}}}},"RegisterDevice":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identity/{IdentityId}/device","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","Platform","Token"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"Platform":{},"Token":{}}},"output":{"type":"structure","members":{"DeviceId":{}}}},"SetCognitoEvents":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/events","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","Events"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"Events":{"shape":"Sq"}}}},"SetIdentityPoolConfiguration":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/configuration","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}},"output":{"type":"structure","members":{"IdentityPoolId":{},"PushSync":{"shape":"Sv"},"CognitoStreams":{"shape":"Sz"}}}},"SubscribeToDataset":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","DeviceId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{"location":"uri","locationName":"DeviceId"}}},"output":{"type":"structure","members":{}}},"UnsubscribeFromDataset":{"http":{"method":"DELETE","requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","DeviceId"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{"location":"uri","locationName":"DeviceId"}}},"output":{"type":"structure","members":{}}},"UpdateRecords":{"http":{"requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}","responseCode":200},"input":{"type":"structure","required":["IdentityPoolId","IdentityId","DatasetName","SyncSessionToken"],"members":{"IdentityPoolId":{"location":"uri","locationName":"IdentityPoolId"},"IdentityId":{"location":"uri","locationName":"IdentityId"},"DatasetName":{"location":"uri","locationName":"DatasetName"},"DeviceId":{},"RecordPatches":{"type":"list","member":{"type":"structure","required":["Op","Key","SyncCount"],"members":{"Op":{},"Key":{},"Value":{},"SyncCount":{"type":"long"},"DeviceLastModifiedDate":{"type":"timestamp"}}}},"SyncSessionToken":{},"ClientContext":{"location":"header","locationName":"x-amz-Client-Context"}}},"output":{"type":"structure","members":{"Records":{"shape":"S1c"}}}}},"shapes":{"S8":{"type":"structure","members":{"IdentityId":{},"DatasetName":{},"CreationDate":{"type":"timestamp"},"LastModifiedDate":{"type":"timestamp"},"LastModifiedBy":{},"DataStorage":{"type":"long"},"NumRecords":{"type":"long"}}},"Sg":{"type":"structure","members":{"IdentityPoolId":{},"SyncSessionsCount":{"type":"long"},"DataStorage":{"type":"long"},"LastModifiedDate":{"type":"timestamp"}}},"Sq":{"type":"map","key":{},"value":{}},"Sv":{"type":"structure","members":{"ApplicationArns":{"type":"list","member":{}},"RoleArn":{}}},"Sz":{"type":"structure","members":{"StreamName":{},"RoleArn":{},"StreamingStatus":{}}},"S1c":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"SyncCount":{"type":"long"},"LastModifiedDate":{"type":"timestamp"},"LastModifiedBy":{},"DeviceLastModifiedDate":{"type":"timestamp"}}}}},"examples":{}}

/***/ }),
/* 179 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-11-12","endpointPrefix":"config","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Config Service","serviceFullName":"AWS Config","signatureVersion":"v4","targetPrefix":"StarlingDoveService","uid":"config-2014-11-12"},"operations":{"DeleteConfigRule":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{}}}},"DeleteConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorderName"],"members":{"ConfigurationRecorderName":{}}}},"DeleteDeliveryChannel":{"input":{"type":"structure","required":["DeliveryChannelName"],"members":{"DeliveryChannelName":{}}}},"DeleteEvaluationResults":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{}}},"output":{"type":"structure","members":{}}},"DeliverConfigSnapshot":{"input":{"type":"structure","required":["deliveryChannelName"],"members":{"deliveryChannelName":{}}},"output":{"type":"structure","members":{"configSnapshotId":{}}}},"DescribeComplianceByConfigRule":{"input":{"type":"structure","members":{"ConfigRuleNames":{"shape":"Sd"},"ComplianceTypes":{"shape":"Se"},"NextToken":{}}},"output":{"type":"structure","members":{"ComplianceByConfigRules":{"type":"list","member":{"type":"structure","members":{"ConfigRuleName":{},"Compliance":{"shape":"Sj"}}}},"NextToken":{}}}},"DescribeComplianceByResource":{"input":{"type":"structure","members":{"ResourceType":{},"ResourceId":{},"ComplianceTypes":{"shape":"Se"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ComplianceByResources":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ResourceId":{},"Compliance":{"shape":"Sj"}}}},"NextToken":{}}}},"DescribeConfigRuleEvaluationStatus":{"input":{"type":"structure","members":{"ConfigRuleNames":{"shape":"Sd"},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"ConfigRulesEvaluationStatus":{"type":"list","member":{"type":"structure","members":{"ConfigRuleName":{},"ConfigRuleArn":{},"ConfigRuleId":{},"LastSuccessfulInvocationTime":{"type":"timestamp"},"LastFailedInvocationTime":{"type":"timestamp"},"LastSuccessfulEvaluationTime":{"type":"timestamp"},"LastFailedEvaluationTime":{"type":"timestamp"},"FirstActivatedTime":{"type":"timestamp"},"LastErrorCode":{},"LastErrorMessage":{},"FirstEvaluationStarted":{"type":"boolean"}}}},"NextToken":{}}}},"DescribeConfigRules":{"input":{"type":"structure","members":{"ConfigRuleNames":{"shape":"Sd"},"NextToken":{}}},"output":{"type":"structure","members":{"ConfigRules":{"type":"list","member":{"shape":"S14"}},"NextToken":{}}}},"DescribeConfigurationRecorderStatus":{"input":{"type":"structure","members":{"ConfigurationRecorderNames":{"shape":"S1j"}}},"output":{"type":"structure","members":{"ConfigurationRecordersStatus":{"type":"list","member":{"type":"structure","members":{"name":{},"lastStartTime":{"type":"timestamp"},"lastStopTime":{"type":"timestamp"},"recording":{"type":"boolean"},"lastStatus":{},"lastErrorCode":{},"lastErrorMessage":{},"lastStatusChangeTime":{"type":"timestamp"}}}}}}},"DescribeConfigurationRecorders":{"input":{"type":"structure","members":{"ConfigurationRecorderNames":{"shape":"S1j"}}},"output":{"type":"structure","members":{"ConfigurationRecorders":{"type":"list","member":{"shape":"S1r"}}}}},"DescribeDeliveryChannelStatus":{"input":{"type":"structure","members":{"DeliveryChannelNames":{"shape":"S1y"}}},"output":{"type":"structure","members":{"DeliveryChannelsStatus":{"type":"list","member":{"type":"structure","members":{"name":{},"configSnapshotDeliveryInfo":{"shape":"S22"},"configHistoryDeliveryInfo":{"shape":"S22"},"configStreamDeliveryInfo":{"type":"structure","members":{"lastStatus":{},"lastErrorCode":{},"lastErrorMessage":{},"lastStatusChangeTime":{"type":"timestamp"}}}}}}}}},"DescribeDeliveryChannels":{"input":{"type":"structure","members":{"DeliveryChannelNames":{"shape":"S1y"}}},"output":{"type":"structure","members":{"DeliveryChannels":{"type":"list","member":{"shape":"S28"}}}}},"GetComplianceDetailsByConfigRule":{"input":{"type":"structure","required":["ConfigRuleName"],"members":{"ConfigRuleName":{},"ComplianceTypes":{"shape":"Se"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"EvaluationResults":{"shape":"S2c"},"NextToken":{}}}},"GetComplianceDetailsByResource":{"input":{"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{},"ResourceId":{},"ComplianceTypes":{"shape":"Se"},"NextToken":{}}},"output":{"type":"structure","members":{"EvaluationResults":{"shape":"S2c"},"NextToken":{}}}},"GetComplianceSummaryByConfigRule":{"output":{"type":"structure","members":{"ComplianceSummary":{"shape":"S2j"}}}},"GetComplianceSummaryByResourceType":{"input":{"type":"structure","members":{"ResourceTypes":{"shape":"S2l"}}},"output":{"type":"structure","members":{"ComplianceSummariesByResourceType":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"ComplianceSummary":{"shape":"S2j"}}}}}}},"GetDiscoveredResourceCounts":{"input":{"type":"structure","members":{"resourceTypes":{"shape":"S2l"},"limit":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"totalDiscoveredResources":{"type":"long"},"resourceCounts":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"count":{"type":"long"}}}},"nextToken":{}}}},"GetResourceConfigHistory":{"input":{"type":"structure","required":["resourceType","resourceId"],"members":{"resourceType":{},"resourceId":{},"laterTime":{"type":"timestamp"},"earlierTime":{"type":"timestamp"},"chronologicalOrder":{},"limit":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"configurationItems":{"type":"list","member":{"type":"structure","members":{"version":{},"accountId":{},"configurationItemCaptureTime":{"type":"timestamp"},"configurationItemStatus":{},"configurationStateId":{},"configurationItemMD5Hash":{},"arn":{},"resourceType":{},"resourceId":{},"resourceName":{},"awsRegion":{},"availabilityZone":{},"resourceCreationTime":{"type":"timestamp"},"tags":{"type":"map","key":{},"value":{}},"relatedEvents":{"type":"list","member":{}},"relationships":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"resourceId":{},"resourceName":{},"relationshipName":{}}}},"configuration":{},"supplementaryConfiguration":{"type":"map","key":{},"value":{}}}}},"nextToken":{}}}},"ListDiscoveredResources":{"input":{"type":"structure","required":["resourceType"],"members":{"resourceType":{},"resourceIds":{"type":"list","member":{}},"resourceName":{},"limit":{"type":"integer"},"includeDeletedResources":{"type":"boolean"},"nextToken":{}}},"output":{"type":"structure","members":{"resourceIdentifiers":{"type":"list","member":{"type":"structure","members":{"resourceType":{},"resourceId":{},"resourceName":{},"resourceDeletionTime":{"type":"timestamp"}}}},"nextToken":{}}}},"PutConfigRule":{"input":{"type":"structure","required":["ConfigRule"],"members":{"ConfigRule":{"shape":"S14"}}}},"PutConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorder"],"members":{"ConfigurationRecorder":{"shape":"S1r"}}}},"PutDeliveryChannel":{"input":{"type":"structure","required":["DeliveryChannel"],"members":{"DeliveryChannel":{"shape":"S28"}}}},"PutEvaluations":{"input":{"type":"structure","required":["ResultToken"],"members":{"Evaluations":{"shape":"S3z"},"ResultToken":{},"TestMode":{"type":"boolean"}}},"output":{"type":"structure","members":{"FailedEvaluations":{"shape":"S3z"}}}},"StartConfigRulesEvaluation":{"input":{"type":"structure","members":{"ConfigRuleNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"StartConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorderName"],"members":{"ConfigurationRecorderName":{}}}},"StopConfigurationRecorder":{"input":{"type":"structure","required":["ConfigurationRecorderName"],"members":{"ConfigurationRecorderName":{}}}}},"shapes":{"Sd":{"type":"list","member":{}},"Se":{"type":"list","member":{}},"Sj":{"type":"structure","members":{"ComplianceType":{},"ComplianceContributorCount":{"shape":"Sk"}}},"Sk":{"type":"structure","members":{"CappedCount":{"type":"integer"},"CapExceeded":{"type":"boolean"}}},"S14":{"type":"structure","required":["Source"],"members":{"ConfigRuleName":{},"ConfigRuleArn":{},"ConfigRuleId":{},"Description":{},"Scope":{"type":"structure","members":{"ComplianceResourceTypes":{"type":"list","member":{}},"TagKey":{},"TagValue":{},"ComplianceResourceId":{}}},"Source":{"type":"structure","required":["Owner","SourceIdentifier"],"members":{"Owner":{},"SourceIdentifier":{},"SourceDetails":{"type":"list","member":{"type":"structure","members":{"EventSource":{},"MessageType":{},"MaximumExecutionFrequency":{}}}}}},"InputParameters":{},"MaximumExecutionFrequency":{},"ConfigRuleState":{}}},"S1j":{"type":"list","member":{}},"S1r":{"type":"structure","members":{"name":{},"roleARN":{},"recordingGroup":{"type":"structure","members":{"allSupported":{"type":"boolean"},"includeGlobalResourceTypes":{"type":"boolean"},"resourceTypes":{"type":"list","member":{}}}}}},"S1y":{"type":"list","member":{}},"S22":{"type":"structure","members":{"lastStatus":{},"lastErrorCode":{},"lastErrorMessage":{},"lastAttemptTime":{"type":"timestamp"},"lastSuccessfulTime":{"type":"timestamp"},"nextDeliveryTime":{"type":"timestamp"}}},"S28":{"type":"structure","members":{"name":{},"s3BucketName":{},"s3KeyPrefix":{},"snsTopicARN":{},"configSnapshotDeliveryProperties":{"type":"structure","members":{"deliveryFrequency":{}}}}},"S2c":{"type":"list","member":{"type":"structure","members":{"EvaluationResultIdentifier":{"type":"structure","members":{"EvaluationResultQualifier":{"type":"structure","members":{"ConfigRuleName":{},"ResourceType":{},"ResourceId":{}}},"OrderingTimestamp":{"type":"timestamp"}}},"ComplianceType":{},"ResultRecordedTime":{"type":"timestamp"},"ConfigRuleInvokedTime":{"type":"timestamp"},"Annotation":{},"ResultToken":{}}}},"S2j":{"type":"structure","members":{"CompliantResourceCount":{"shape":"Sk"},"NonCompliantResourceCount":{"shape":"Sk"},"ComplianceSummaryTimestamp":{"type":"timestamp"}}},"S2l":{"type":"list","member":{}},"S3z":{"type":"list","member":{"type":"structure","required":["ComplianceResourceType","ComplianceResourceId","ComplianceType","OrderingTimestamp"],"members":{"ComplianceResourceType":{},"ComplianceResourceId":{},"ComplianceType":{},"Annotation":{},"OrderingTimestamp":{"type":"timestamp"}}}}}}

/***/ }),
/* 180 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetResourceConfigHistory":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"configurationItems"}}}

/***/ }),
/* 181 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-01-06","endpointPrefix":"cur","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Cost and Usage Report Service","signatureVersion":"v4","signingName":"cur","targetPrefix":"AWSOrigamiServiceGatewayService","uid":"cur-2017-01-06"},"operations":{"DeleteReportDefinition":{"input":{"type":"structure","members":{"ReportName":{}}},"output":{"type":"structure","members":{"ResponseMessage":{}}}},"DescribeReportDefinitions":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ReportDefinitions":{"type":"list","member":{"shape":"Sa"}},"NextToken":{}}}},"PutReportDefinition":{"input":{"type":"structure","required":["ReportDefinition"],"members":{"ReportDefinition":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}}},"shapes":{"Sa":{"type":"structure","required":["ReportName","TimeUnit","Format","Compression","AdditionalSchemaElements","S3Bucket","S3Prefix","S3Region"],"members":{"ReportName":{},"TimeUnit":{},"Format":{},"Compression":{},"AdditionalSchemaElements":{"type":"list","member":{}},"S3Bucket":{},"S3Prefix":{},"S3Region":{},"AdditionalArtifacts":{"type":"list","member":{}}}}}}

/***/ }),
/* 182 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeReportDefinitions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-10-29","endpointPrefix":"datapipeline","jsonVersion":"1.1","serviceFullName":"AWS Data Pipeline","signatureVersion":"v4","targetPrefix":"DataPipeline","protocol":"json","uid":"datapipeline-2012-10-29"},"operations":{"ActivatePipeline":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{},"parameterValues":{"shape":"S3"},"startTimestamp":{"type":"timestamp"}}},"output":{"type":"structure","members":{}}},"AddTags":{"input":{"type":"structure","required":["pipelineId","tags"],"members":{"pipelineId":{},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}},"CreatePipeline":{"input":{"type":"structure","required":["name","uniqueId"],"members":{"name":{},"uniqueId":{},"description":{},"tags":{"shape":"Sa"}}},"output":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{}}}},"DeactivatePipeline":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{},"cancelActive":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeletePipeline":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{}}}},"DescribeObjects":{"input":{"type":"structure","required":["pipelineId","objectIds"],"members":{"pipelineId":{},"objectIds":{"shape":"Sn"},"evaluateExpressions":{"type":"boolean"},"marker":{}}},"output":{"type":"structure","required":["pipelineObjects"],"members":{"pipelineObjects":{"shape":"Sq"},"marker":{},"hasMoreResults":{"type":"boolean"}}}},"DescribePipelines":{"input":{"type":"structure","required":["pipelineIds"],"members":{"pipelineIds":{"shape":"Sn"}}},"output":{"type":"structure","required":["pipelineDescriptionList"],"members":{"pipelineDescriptionList":{"type":"list","member":{"type":"structure","required":["pipelineId","name","fields"],"members":{"pipelineId":{},"name":{},"fields":{"shape":"Ss"},"description":{},"tags":{"shape":"Sa"}}}}}}},"EvaluateExpression":{"input":{"type":"structure","required":["pipelineId","objectId","expression"],"members":{"pipelineId":{},"objectId":{},"expression":{}}},"output":{"type":"structure","required":["evaluatedExpression"],"members":{"evaluatedExpression":{}}}},"GetPipelineDefinition":{"input":{"type":"structure","required":["pipelineId"],"members":{"pipelineId":{},"version":{}}},"output":{"type":"structure","members":{"pipelineObjects":{"shape":"Sq"},"parameterObjects":{"shape":"S13"},"parameterValues":{"shape":"S3"}}}},"ListPipelines":{"input":{"type":"structure","members":{"marker":{}}},"output":{"type":"structure","required":["pipelineIdList"],"members":{"pipelineIdList":{"type":"list","member":{"type":"structure","members":{"id":{},"name":{}}}},"marker":{},"hasMoreResults":{"type":"boolean"}}}},"PollForTask":{"input":{"type":"structure","required":["workerGroup"],"members":{"workerGroup":{},"hostname":{},"instanceIdentity":{"type":"structure","members":{"document":{},"signature":{}}}}},"output":{"type":"structure","members":{"taskObject":{"type":"structure","members":{"taskId":{},"pipelineId":{},"attemptId":{},"objects":{"type":"map","key":{},"value":{"shape":"Sr"}}}}}}},"PutPipelineDefinition":{"input":{"type":"structure","required":["pipelineId","pipelineObjects"],"members":{"pipelineId":{},"pipelineObjects":{"shape":"Sq"},"parameterObjects":{"shape":"S13"},"parameterValues":{"shape":"S3"}}},"output":{"type":"structure","required":["errored"],"members":{"validationErrors":{"shape":"S1l"},"validationWarnings":{"shape":"S1p"},"errored":{"type":"boolean"}}}},"QueryObjects":{"input":{"type":"structure","required":["pipelineId","sphere"],"members":{"pipelineId":{},"query":{"type":"structure","members":{"selectors":{"type":"list","member":{"type":"structure","members":{"fieldName":{},"operator":{"type":"structure","members":{"type":{},"values":{"shape":"S1x"}}}}}}}},"sphere":{},"marker":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"ids":{"shape":"Sn"},"marker":{},"hasMoreResults":{"type":"boolean"}}}},"RemoveTags":{"input":{"type":"structure","required":["pipelineId","tagKeys"],"members":{"pipelineId":{},"tagKeys":{"shape":"S1x"}}},"output":{"type":"structure","members":{}}},"ReportTaskProgress":{"input":{"type":"structure","required":["taskId"],"members":{"taskId":{},"fields":{"shape":"Ss"}}},"output":{"type":"structure","required":["canceled"],"members":{"canceled":{"type":"boolean"}}}},"ReportTaskRunnerHeartbeat":{"input":{"type":"structure","required":["taskrunnerId"],"members":{"taskrunnerId":{},"workerGroup":{},"hostname":{}}},"output":{"type":"structure","required":["terminate"],"members":{"terminate":{"type":"boolean"}}}},"SetStatus":{"input":{"type":"structure","required":["pipelineId","objectIds","status"],"members":{"pipelineId":{},"objectIds":{"shape":"Sn"},"status":{}}}},"SetTaskStatus":{"input":{"type":"structure","required":["taskId","taskStatus"],"members":{"taskId":{},"taskStatus":{},"errorId":{},"errorMessage":{},"errorStackTrace":{}}},"output":{"type":"structure","members":{}}},"ValidatePipelineDefinition":{"input":{"type":"structure","required":["pipelineId","pipelineObjects"],"members":{"pipelineId":{},"pipelineObjects":{"shape":"Sq"},"parameterObjects":{"shape":"S13"},"parameterValues":{"shape":"S3"}}},"output":{"type":"structure","required":["errored"],"members":{"validationErrors":{"shape":"S1l"},"validationWarnings":{"shape":"S1p"},"errored":{"type":"boolean"}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["id","stringValue"],"members":{"id":{},"stringValue":{}}}},"Sa":{"type":"list","member":{"type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"Sn":{"type":"list","member":{}},"Sq":{"type":"list","member":{"shape":"Sr"}},"Sr":{"type":"structure","required":["id","name","fields"],"members":{"id":{},"name":{},"fields":{"shape":"Ss"}}},"Ss":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"stringValue":{},"refValue":{}}}},"S13":{"type":"list","member":{"type":"structure","required":["id","attributes"],"members":{"id":{},"attributes":{"type":"list","member":{"type":"structure","required":["key","stringValue"],"members":{"key":{},"stringValue":{}}}}}}},"S1l":{"type":"list","member":{"type":"structure","members":{"id":{},"errors":{"shape":"S1n"}}}},"S1n":{"type":"list","member":{}},"S1p":{"type":"list","member":{"type":"structure","members":{"id":{},"warnings":{"shape":"S1n"}}}},"S1x":{"type":"list","member":{}}}}

/***/ }),
/* 184 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListPipelines":{"input_token":"marker","output_token":"marker","more_results":"hasMoreResults","result_key":"pipelineIdList"},"DescribeObjects":{"input_token":"marker","output_token":"marker","more_results":"hasMoreResults","result_key":"pipelineObjects"},"DescribePipelines":{"result_key":"pipelineDescriptionList"},"QueryObjects":{"input_token":"marker","output_token":"marker","more_results":"hasMoreResults","limit_key":"limit","result_key":"ids"}}}

/***/ }),
/* 185 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-04-19","endpointPrefix":"dax","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon DAX","serviceFullName":"Amazon DynamoDB Accelerator (DAX)","signatureVersion":"v4","targetPrefix":"AmazonDAXV3","uid":"dax-2017-04-19"},"operations":{"CreateCluster":{"input":{"type":"structure","required":["ClusterName","NodeType","ReplicationFactor","IamRoleArn"],"members":{"ClusterName":{},"NodeType":{},"Description":{},"ReplicationFactor":{"type":"integer"},"AvailabilityZones":{"shape":"S4"},"SubnetGroupName":{},"SecurityGroupIds":{"shape":"S5"},"PreferredMaintenanceWindow":{},"NotificationTopicArn":{},"IamRoleArn":{},"ParameterGroupName":{},"Tags":{"shape":"S6"}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S9"}}}},"CreateParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{},"Description":{}}},"output":{"type":"structure","members":{"ParameterGroup":{"shape":"Sm"}}}},"CreateSubnetGroup":{"input":{"type":"structure","required":["SubnetGroupName","SubnetIds"],"members":{"SubnetGroupName":{},"Description":{},"SubnetIds":{"shape":"So"}}},"output":{"type":"structure","members":{"SubnetGroup":{"shape":"Sq"}}}},"DecreaseReplicationFactor":{"input":{"type":"structure","required":["ClusterName","NewReplicationFactor"],"members":{"ClusterName":{},"NewReplicationFactor":{"type":"integer"},"AvailabilityZones":{"shape":"S4"},"NodeIdsToRemove":{"shape":"Sc"}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S9"}}}},"DeleteCluster":{"input":{"type":"structure","required":["ClusterName"],"members":{"ClusterName":{}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S9"}}}},"DeleteParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{}}},"output":{"type":"structure","members":{"DeletionMessage":{}}}},"DeleteSubnetGroup":{"input":{"type":"structure","required":["SubnetGroupName"],"members":{"SubnetGroupName":{}}},"output":{"type":"structure","members":{"DeletionMessage":{}}}},"DescribeClusters":{"input":{"type":"structure","members":{"ClusterNames":{"type":"list","member":{}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"NextToken":{},"Clusters":{"type":"list","member":{"shape":"S9"}}}}},"DescribeDefaultParameters":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"NextToken":{},"Parameters":{"shape":"S17"}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceName":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"NextToken":{},"Events":{"type":"list","member":{"type":"structure","members":{"SourceName":{},"SourceType":{},"Message":{},"Date":{"type":"timestamp"}}}}}}},"DescribeParameterGroups":{"input":{"type":"structure","members":{"ParameterGroupNames":{"type":"list","member":{}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"NextToken":{},"ParameterGroups":{"type":"list","member":{"shape":"Sm"}}}}},"DescribeParameters":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{},"Source":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"NextToken":{},"Parameters":{"shape":"S17"}}}},"DescribeSubnetGroups":{"input":{"type":"structure","members":{"SubnetGroupNames":{"type":"list","member":{}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"NextToken":{},"SubnetGroups":{"type":"list","member":{"shape":"Sq"}}}}},"IncreaseReplicationFactor":{"input":{"type":"structure","required":["ClusterName","NewReplicationFactor"],"members":{"ClusterName":{},"NewReplicationFactor":{"type":"integer"},"AvailabilityZones":{"shape":"S4"}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S9"}}}},"ListTags":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S6"},"NextToken":{}}}},"RebootNode":{"input":{"type":"structure","required":["ClusterName","NodeId"],"members":{"ClusterName":{},"NodeId":{}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S9"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S6"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S6"}}}},"UntagResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"Tags":{"shape":"S6"}}}},"UpdateCluster":{"input":{"type":"structure","required":["ClusterName"],"members":{"ClusterName":{},"Description":{},"PreferredMaintenanceWindow":{},"NotificationTopicArn":{},"NotificationTopicStatus":{},"ParameterGroupName":{},"SecurityGroupIds":{"shape":"S5"}}},"output":{"type":"structure","members":{"Cluster":{"shape":"S9"}}}},"UpdateParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName","ParameterNameValues"],"members":{"ParameterGroupName":{},"ParameterNameValues":{"type":"list","member":{"type":"structure","members":{"ParameterName":{},"ParameterValue":{}}}}}},"output":{"type":"structure","members":{"ParameterGroup":{"shape":"Sm"}}}},"UpdateSubnetGroup":{"input":{"type":"structure","required":["SubnetGroupName"],"members":{"SubnetGroupName":{},"Description":{},"SubnetIds":{"shape":"So"}}},"output":{"type":"structure","members":{"SubnetGroup":{"shape":"Sq"}}}}},"shapes":{"S4":{"type":"list","member":{}},"S5":{"type":"list","member":{}},"S6":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S9":{"type":"structure","members":{"ClusterName":{},"Description":{},"ClusterArn":{},"TotalNodes":{"type":"integer"},"ActiveNodes":{"type":"integer"},"NodeType":{},"Status":{},"ClusterDiscoveryEndpoint":{"shape":"Sb"},"NodeIdsToRemove":{"shape":"Sc"},"Nodes":{"type":"list","member":{"type":"structure","members":{"NodeId":{},"Endpoint":{"shape":"Sb"},"NodeCreateTime":{"type":"timestamp"},"AvailabilityZone":{},"NodeStatus":{},"ParameterGroupStatus":{}}}},"PreferredMaintenanceWindow":{},"NotificationConfiguration":{"type":"structure","members":{"TopicArn":{},"TopicStatus":{}}},"SubnetGroup":{},"SecurityGroups":{"type":"list","member":{"type":"structure","members":{"SecurityGroupIdentifier":{},"Status":{}}}},"IamRoleArn":{},"ParameterGroup":{"type":"structure","members":{"ParameterGroupName":{},"ParameterApplyStatus":{},"NodeIdsToReboot":{"shape":"Sc"}}}}},"Sb":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"Sc":{"type":"list","member":{}},"Sm":{"type":"structure","members":{"ParameterGroupName":{},"Description":{}}},"So":{"type":"list","member":{}},"Sq":{"type":"structure","members":{"SubnetGroupName":{},"Description":{},"VpcId":{},"Subnets":{"type":"list","member":{"type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{}}}}}},"S17":{"type":"list","member":{"type":"structure","members":{"ParameterName":{},"ParameterType":{},"ParameterValue":{},"NodeTypeSpecificValues":{"type":"list","member":{"type":"structure","members":{"NodeType":{},"Value":{}}}},"Description":{},"Source":{},"DataType":{},"AllowedValues":{},"IsModifiable":{},"ChangeType":{}}}}}}

/***/ }),
/* 186 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 187 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-06-23","endpointPrefix":"devicefarm","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Device Farm","signatureVersion":"v4","targetPrefix":"DeviceFarm_20150623","uid":"devicefarm-2015-06-23"},"operations":{"CreateDevicePool":{"input":{"type":"structure","required":["projectArn","name","rules"],"members":{"projectArn":{},"name":{},"description":{},"rules":{"shape":"S5"}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sb"}}}},"CreateNetworkProfile":{"input":{"type":"structure","required":["projectArn","name"],"members":{"projectArn":{},"name":{},"description":{},"type":{},"uplinkBandwidthBits":{"type":"long"},"downlinkBandwidthBits":{"type":"long"},"uplinkDelayMs":{"type":"long"},"downlinkDelayMs":{"type":"long"},"uplinkJitterMs":{"type":"long"},"downlinkJitterMs":{"type":"long"},"uplinkLossPercent":{"type":"integer"},"downlinkLossPercent":{"type":"integer"}}},"output":{"type":"structure","members":{"networkProfile":{"shape":"Si"}}}},"CreateProject":{"input":{"type":"structure","required":["name"],"members":{"name":{},"defaultJobTimeoutMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"project":{"shape":"Sm"}}}},"CreateRemoteAccessSession":{"input":{"type":"structure","required":["projectArn","deviceArn"],"members":{"projectArn":{},"deviceArn":{},"sshPublicKey":{},"remoteDebugEnabled":{"type":"boolean"},"name":{},"clientId":{},"configuration":{"type":"structure","members":{"billingMethod":{}}}}},"output":{"type":"structure","members":{"remoteAccessSession":{"shape":"Sv"}}}},"CreateUpload":{"input":{"type":"structure","required":["projectArn","name","type"],"members":{"projectArn":{},"name":{},"type":{},"contentType":{}}},"output":{"type":"structure","members":{"upload":{"shape":"S1b"}}}},"DeleteDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteNetworkProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteRemoteAccessSession":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"DeleteUpload":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{}}},"GetAccountSettings":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"accountSettings":{"type":"structure","members":{"awsAccountNumber":{},"unmeteredDevices":{"shape":"S1v"},"unmeteredRemoteAccessDevices":{"shape":"S1v"},"maxJobTimeoutMinutes":{"type":"integer"},"trialMinutes":{"type":"structure","members":{"total":{"type":"double"},"remaining":{"type":"double"}}},"maxSlots":{"type":"map","key":{},"value":{"type":"integer"}},"defaultJobTimeoutMinutes":{"type":"integer"}}}}}},"GetDevice":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"device":{"shape":"Sy"}}}},"GetDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sb"}}}},"GetDevicePoolCompatibility":{"input":{"type":"structure","required":["devicePoolArn"],"members":{"devicePoolArn":{},"appArn":{},"testType":{},"test":{"shape":"S24"}}},"output":{"type":"structure","members":{"compatibleDevices":{"shape":"S28"},"incompatibleDevices":{"shape":"S28"}}}},"GetJob":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"job":{"shape":"S2e"}}}},"GetNetworkProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"networkProfile":{"shape":"Si"}}}},"GetOfferingStatus":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"current":{"shape":"S2l"},"nextPeriod":{"shape":"S2l"},"nextToken":{}}}},"GetProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"project":{"shape":"Sm"}}}},"GetRemoteAccessSession":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"remoteAccessSession":{"shape":"Sv"}}}},"GetRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"run":{"shape":"S32"}}}},"GetSuite":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"suite":{"shape":"S3a"}}}},"GetTest":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"test":{"shape":"S3d"}}}},"GetUpload":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"upload":{"shape":"S1b"}}}},"InstallToRemoteAccessSession":{"input":{"type":"structure","required":["remoteAccessSessionArn","appArn"],"members":{"remoteAccessSessionArn":{},"appArn":{}}},"output":{"type":"structure","members":{"appUpload":{"shape":"S1b"}}}},"ListArtifacts":{"input":{"type":"structure","required":["arn","type"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"artifacts":{"type":"list","member":{"type":"structure","members":{"arn":{},"name":{},"type":{},"extension":{},"url":{}}}},"nextToken":{}}}},"ListDevicePools":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"devicePools":{"type":"list","member":{"shape":"Sb"}},"nextToken":{}}}},"ListDevices":{"input":{"type":"structure","members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"devices":{"type":"list","member":{"shape":"Sy"}},"nextToken":{}}}},"ListJobs":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"jobs":{"type":"list","member":{"shape":"S2e"}},"nextToken":{}}}},"ListNetworkProfiles":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"type":{},"nextToken":{}}},"output":{"type":"structure","members":{"networkProfiles":{"type":"list","member":{"shape":"Si"}},"nextToken":{}}}},"ListOfferingPromotions":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"offeringPromotions":{"type":"list","member":{"type":"structure","members":{"id":{},"description":{}}}},"nextToken":{}}}},"ListOfferingTransactions":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"offeringTransactions":{"type":"list","member":{"shape":"S48"}},"nextToken":{}}}},"ListOfferings":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"type":"structure","members":{"offerings":{"type":"list","member":{"shape":"S2p"}},"nextToken":{}}}},"ListProjects":{"input":{"type":"structure","members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"projects":{"type":"list","member":{"shape":"Sm"}},"nextToken":{}}}},"ListRemoteAccessSessions":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"remoteAccessSessions":{"type":"list","member":{"shape":"Sv"}},"nextToken":{}}}},"ListRuns":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"runs":{"type":"list","member":{"shape":"S32"}},"nextToken":{}}}},"ListSamples":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"samples":{"type":"list","member":{"type":"structure","members":{"arn":{},"type":{},"url":{}}}},"nextToken":{}}}},"ListSuites":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"suites":{"type":"list","member":{"shape":"S3a"}},"nextToken":{}}}},"ListTests":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"tests":{"type":"list","member":{"shape":"S3d"}},"nextToken":{}}}},"ListUniqueProblems":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"uniqueProblems":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"message":{},"problems":{"type":"list","member":{"type":"structure","members":{"run":{"shape":"S54"},"job":{"shape":"S54"},"suite":{"shape":"S54"},"test":{"shape":"S54"},"device":{"shape":"Sy"},"result":{},"message":{}}}}}}}},"nextToken":{}}}},"ListUploads":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"nextToken":{}}},"output":{"type":"structure","members":{"uploads":{"type":"list","member":{"shape":"S1b"}},"nextToken":{}}}},"PurchaseOffering":{"input":{"type":"structure","members":{"offeringId":{},"quantity":{"type":"integer"},"offeringPromotionId":{}}},"output":{"type":"structure","members":{"offeringTransaction":{"shape":"S48"}}}},"RenewOffering":{"input":{"type":"structure","members":{"offeringId":{},"quantity":{"type":"integer"}}},"output":{"type":"structure","members":{"offeringTransaction":{"shape":"S48"}}}},"ScheduleRun":{"input":{"type":"structure","required":["projectArn","devicePoolArn","test"],"members":{"projectArn":{},"appArn":{},"devicePoolArn":{},"name":{},"test":{"shape":"S24"},"configuration":{"type":"structure","members":{"extraDataPackageArn":{},"networkProfileArn":{},"locale":{},"location":{"type":"structure","required":["latitude","longitude"],"members":{"latitude":{"type":"double"},"longitude":{"type":"double"}}},"customerArtifactPaths":{"shape":"S34"},"radios":{"type":"structure","members":{"wifi":{"type":"boolean"},"bluetooth":{"type":"boolean"},"nfc":{"type":"boolean"},"gps":{"type":"boolean"}}},"auxiliaryApps":{"type":"list","member":{}},"billingMethod":{}}},"executionConfiguration":{"type":"structure","members":{"jobTimeoutMinutes":{"type":"integer"},"accountsCleanup":{"type":"boolean"},"appPackagesCleanup":{"type":"boolean"}}}}},"output":{"type":"structure","members":{"run":{"shape":"S32"}}}},"StopRemoteAccessSession":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"remoteAccessSession":{"shape":"Sv"}}}},"StopRun":{"input":{"type":"structure","required":["arn"],"members":{"arn":{}}},"output":{"type":"structure","members":{"run":{"shape":"S32"}}}},"UpdateDevicePool":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"description":{},"rules":{"shape":"S5"}}},"output":{"type":"structure","members":{"devicePool":{"shape":"Sb"}}}},"UpdateNetworkProfile":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"description":{},"type":{},"uplinkBandwidthBits":{"type":"long"},"downlinkBandwidthBits":{"type":"long"},"uplinkDelayMs":{"type":"long"},"downlinkDelayMs":{"type":"long"},"uplinkJitterMs":{"type":"long"},"downlinkJitterMs":{"type":"long"},"uplinkLossPercent":{"type":"integer"},"downlinkLossPercent":{"type":"integer"}}},"output":{"type":"structure","members":{"networkProfile":{"shape":"Si"}}}},"UpdateProject":{"input":{"type":"structure","required":["arn"],"members":{"arn":{},"name":{},"defaultJobTimeoutMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"project":{"shape":"Sm"}}}}},"shapes":{"S5":{"type":"list","member":{"type":"structure","members":{"attribute":{},"operator":{},"value":{}}}},"Sb":{"type":"structure","members":{"arn":{},"name":{},"description":{},"type":{},"rules":{"shape":"S5"}}},"Si":{"type":"structure","members":{"arn":{},"name":{},"description":{},"type":{},"uplinkBandwidthBits":{"type":"long"},"downlinkBandwidthBits":{"type":"long"},"uplinkDelayMs":{"type":"long"},"downlinkDelayMs":{"type":"long"},"uplinkJitterMs":{"type":"long"},"downlinkJitterMs":{"type":"long"},"uplinkLossPercent":{"type":"integer"},"downlinkLossPercent":{"type":"integer"}}},"Sm":{"type":"structure","members":{"arn":{},"name":{},"defaultJobTimeoutMinutes":{"type":"integer"},"created":{"type":"timestamp"}}},"Sv":{"type":"structure","members":{"arn":{},"name":{},"created":{"type":"timestamp"},"status":{},"result":{},"message":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"device":{"shape":"Sy"},"remoteDebugEnabled":{"type":"boolean"},"hostAddress":{},"clientId":{},"billingMethod":{},"deviceMinutes":{"shape":"S16"},"endpoint":{},"deviceUdid":{}}},"Sy":{"type":"structure","members":{"arn":{},"name":{},"manufacturer":{},"model":{},"formFactor":{},"platform":{},"os":{},"cpu":{"type":"structure","members":{"frequency":{},"architecture":{},"clock":{"type":"double"}}},"resolution":{"type":"structure","members":{"width":{"type":"integer"},"height":{"type":"integer"}}},"heapSize":{"type":"long"},"memory":{"type":"long"},"image":{},"carrier":{},"radio":{},"remoteAccessEnabled":{"type":"boolean"},"remoteDebugEnabled":{"type":"boolean"},"fleetType":{},"fleetName":{}}},"S16":{"type":"structure","members":{"total":{"type":"double"},"metered":{"type":"double"},"unmetered":{"type":"double"}}},"S1b":{"type":"structure","members":{"arn":{},"name":{},"created":{"type":"timestamp"},"type":{},"status":{},"url":{},"metadata":{},"contentType":{},"message":{}}},"S1v":{"type":"map","key":{},"value":{"type":"integer"}},"S24":{"type":"structure","required":["type"],"members":{"type":{},"testPackageArn":{},"filter":{},"parameters":{"type":"map","key":{},"value":{}}}},"S28":{"type":"list","member":{"type":"structure","members":{"device":{"shape":"Sy"},"compatible":{"type":"boolean"},"incompatibilityMessages":{"type":"list","member":{"type":"structure","members":{"message":{},"type":{}}}}}}},"S2e":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S2f"},"message":{},"device":{"shape":"Sy"},"deviceMinutes":{"shape":"S16"}}},"S2f":{"type":"structure","members":{"total":{"type":"integer"},"passed":{"type":"integer"},"failed":{"type":"integer"},"warned":{"type":"integer"},"errored":{"type":"integer"},"stopped":{"type":"integer"},"skipped":{"type":"integer"}}},"S2l":{"type":"map","key":{},"value":{"shape":"S2n"}},"S2n":{"type":"structure","members":{"type":{},"offering":{"shape":"S2p"},"quantity":{"type":"integer"},"effectiveOn":{"type":"timestamp"}}},"S2p":{"type":"structure","members":{"id":{},"description":{},"type":{},"platform":{},"recurringCharges":{"type":"list","member":{"type":"structure","members":{"cost":{"shape":"S2t"},"frequency":{}}}}}},"S2t":{"type":"structure","members":{"amount":{"type":"double"},"currencyCode":{}}},"S32":{"type":"structure","members":{"arn":{},"name":{},"type":{},"platform":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S2f"},"message":{},"totalJobs":{"type":"integer"},"completedJobs":{"type":"integer"},"billingMethod":{},"deviceMinutes":{"shape":"S16"},"networkProfile":{"shape":"Si"},"parsingResultUrl":{},"resultCode":{},"customerArtifactPaths":{"shape":"S34"}}},"S34":{"type":"structure","members":{"iosPaths":{"type":"list","member":{}},"androidPaths":{"type":"list","member":{}},"deviceHostPaths":{"type":"list","member":{}}}},"S3a":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S2f"},"message":{},"deviceMinutes":{"shape":"S16"}}},"S3d":{"type":"structure","members":{"arn":{},"name":{},"type":{},"created":{"type":"timestamp"},"status":{},"result":{},"started":{"type":"timestamp"},"stopped":{"type":"timestamp"},"counters":{"shape":"S2f"},"message":{},"deviceMinutes":{"shape":"S16"}}},"S48":{"type":"structure","members":{"offeringStatus":{"shape":"S2n"},"transactionId":{},"offeringPromotionId":{},"createdOn":{"type":"timestamp"},"cost":{"shape":"S2t"}}},"S54":{"type":"structure","members":{"arn":{},"name":{}}}}}

/***/ }),
/* 188 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetOfferingStatus":{"input_token":"nextToken","output_token":"nextToken","result_key":["current","nextPeriod"]},"ListArtifacts":{"input_token":"nextToken","output_token":"nextToken","result_key":"artifacts"},"ListDevicePools":{"input_token":"nextToken","output_token":"nextToken","result_key":"devicePools"},"ListDevices":{"input_token":"nextToken","output_token":"nextToken","result_key":"devices"},"ListJobs":{"input_token":"nextToken","output_token":"nextToken","result_key":"jobs"},"ListOfferingTransactions":{"input_token":"nextToken","output_token":"nextToken","result_key":"offeringTransactions"},"ListOfferings":{"input_token":"nextToken","output_token":"nextToken","result_key":"offerings"},"ListProjects":{"input_token":"nextToken","output_token":"nextToken","result_key":"projects"},"ListRuns":{"input_token":"nextToken","output_token":"nextToken","result_key":"runs"},"ListSamples":{"input_token":"nextToken","output_token":"nextToken","result_key":"samples"},"ListSuites":{"input_token":"nextToken","output_token":"nextToken","result_key":"suites"},"ListTests":{"input_token":"nextToken","output_token":"nextToken","result_key":"tests"},"ListUniqueProblems":{"input_token":"nextToken","output_token":"nextToken","result_key":"uniqueProblems"},"ListUploads":{"input_token":"nextToken","output_token":"nextToken","result_key":"uploads"}}}

/***/ }),
/* 189 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-10-25","endpointPrefix":"directconnect","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Direct Connect","signatureVersion":"v4","targetPrefix":"OvertureService","uid":"directconnect-2012-10-25"},"operations":{"AllocateConnectionOnInterconnect":{"input":{"type":"structure","required":["bandwidth","connectionName","ownerAccount","interconnectId","vlan"],"members":{"bandwidth":{},"connectionName":{},"ownerAccount":{},"interconnectId":{},"vlan":{"type":"integer"}}},"output":{"shape":"S7"},"deprecated":true},"AllocateHostedConnection":{"input":{"type":"structure","required":["connectionId","ownerAccount","bandwidth","connectionName","vlan"],"members":{"connectionId":{},"ownerAccount":{},"bandwidth":{},"connectionName":{},"vlan":{"type":"integer"}}},"output":{"shape":"S7"}},"AllocatePrivateVirtualInterface":{"input":{"type":"structure","required":["connectionId","ownerAccount","newPrivateVirtualInterfaceAllocation"],"members":{"connectionId":{},"ownerAccount":{},"newPrivateVirtualInterfaceAllocation":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"authKey":{},"amazonAddress":{},"addressFamily":{},"customerAddress":{}}}}},"output":{"shape":"Sp"}},"AllocatePublicVirtualInterface":{"input":{"type":"structure","required":["connectionId","ownerAccount","newPublicVirtualInterfaceAllocation"],"members":{"connectionId":{},"ownerAccount":{},"newPublicVirtualInterfaceAllocation":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"routeFilterPrefixes":{"shape":"Sx"}}}}},"output":{"shape":"Sp"}},"AssociateConnectionWithLag":{"input":{"type":"structure","required":["connectionId","lagId"],"members":{"connectionId":{},"lagId":{}}},"output":{"shape":"S7"}},"AssociateHostedConnection":{"input":{"type":"structure","required":["connectionId","parentConnectionId"],"members":{"connectionId":{},"parentConnectionId":{}}},"output":{"shape":"S7"}},"AssociateVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId","connectionId"],"members":{"virtualInterfaceId":{},"connectionId":{}}},"output":{"shape":"Sp"}},"ConfirmConnection":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{}}},"output":{"type":"structure","members":{"connectionState":{}}}},"ConfirmPrivateVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{},"virtualGatewayId":{},"directConnectGatewayId":{}}},"output":{"type":"structure","members":{"virtualInterfaceState":{}}}},"ConfirmPublicVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{}}},"output":{"type":"structure","members":{"virtualInterfaceState":{}}}},"CreateBGPPeer":{"input":{"type":"structure","members":{"virtualInterfaceId":{},"newBGPPeer":{"type":"structure","members":{"asn":{"type":"integer"},"authKey":{},"addressFamily":{},"amazonAddress":{},"customerAddress":{}}}}},"output":{"type":"structure","members":{"virtualInterface":{"shape":"Sp"}}}},"CreateConnection":{"input":{"type":"structure","required":["location","bandwidth","connectionName"],"members":{"location":{},"bandwidth":{},"connectionName":{},"lagId":{}}},"output":{"shape":"S7"}},"CreateDirectConnectGateway":{"input":{"type":"structure","required":["directConnectGatewayName"],"members":{"directConnectGatewayName":{},"amazonSideAsn":{"type":"long"}}},"output":{"type":"structure","members":{"directConnectGateway":{"shape":"S1m"}}}},"CreateDirectConnectGatewayAssociation":{"input":{"type":"structure","required":["directConnectGatewayId","virtualGatewayId"],"members":{"directConnectGatewayId":{},"virtualGatewayId":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociation":{"shape":"S1r"}}}},"CreateInterconnect":{"input":{"type":"structure","required":["interconnectName","bandwidth","location"],"members":{"interconnectName":{},"bandwidth":{},"location":{},"lagId":{}}},"output":{"shape":"S1w"}},"CreateLag":{"input":{"type":"structure","required":["numberOfConnections","location","connectionsBandwidth","lagName"],"members":{"numberOfConnections":{"type":"integer"},"location":{},"connectionsBandwidth":{},"lagName":{},"connectionId":{}}},"output":{"shape":"S21"}},"CreatePrivateVirtualInterface":{"input":{"type":"structure","required":["connectionId","newPrivateVirtualInterface"],"members":{"connectionId":{},"newPrivateVirtualInterface":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"virtualGatewayId":{},"directConnectGatewayId":{}}}}},"output":{"shape":"Sp"}},"CreatePublicVirtualInterface":{"input":{"type":"structure","required":["connectionId","newPublicVirtualInterface"],"members":{"connectionId":{},"newPublicVirtualInterface":{"type":"structure","required":["virtualInterfaceName","vlan","asn"],"members":{"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"routeFilterPrefixes":{"shape":"Sx"}}}}},"output":{"shape":"Sp"}},"DeleteBGPPeer":{"input":{"type":"structure","members":{"virtualInterfaceId":{},"asn":{"type":"integer"},"customerAddress":{}}},"output":{"type":"structure","members":{"virtualInterface":{"shape":"Sp"}}}},"DeleteConnection":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{}}},"output":{"shape":"S7"}},"DeleteDirectConnectGateway":{"input":{"type":"structure","required":["directConnectGatewayId"],"members":{"directConnectGatewayId":{}}},"output":{"type":"structure","members":{"directConnectGateway":{"shape":"S1m"}}}},"DeleteDirectConnectGatewayAssociation":{"input":{"type":"structure","required":["directConnectGatewayId","virtualGatewayId"],"members":{"directConnectGatewayId":{},"virtualGatewayId":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociation":{"shape":"S1r"}}}},"DeleteInterconnect":{"input":{"type":"structure","required":["interconnectId"],"members":{"interconnectId":{}}},"output":{"type":"structure","members":{"interconnectState":{}}}},"DeleteLag":{"input":{"type":"structure","required":["lagId"],"members":{"lagId":{}}},"output":{"shape":"S21"}},"DeleteVirtualInterface":{"input":{"type":"structure","required":["virtualInterfaceId"],"members":{"virtualInterfaceId":{}}},"output":{"type":"structure","members":{"virtualInterfaceState":{}}}},"DescribeConnectionLoa":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{},"providerName":{},"loaContentType":{}}},"output":{"type":"structure","members":{"loa":{"shape":"S2p"}}},"deprecated":true},"DescribeConnections":{"input":{"type":"structure","members":{"connectionId":{}}},"output":{"shape":"S2s"}},"DescribeConnectionsOnInterconnect":{"input":{"type":"structure","required":["interconnectId"],"members":{"interconnectId":{}}},"output":{"shape":"S2s"},"deprecated":true},"DescribeDirectConnectGatewayAssociations":{"input":{"type":"structure","members":{"directConnectGatewayId":{},"virtualGatewayId":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"directConnectGatewayAssociations":{"type":"list","member":{"shape":"S1r"}},"nextToken":{}}}},"DescribeDirectConnectGatewayAttachments":{"input":{"type":"structure","members":{"directConnectGatewayId":{},"virtualInterfaceId":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"directConnectGatewayAttachments":{"type":"list","member":{"type":"structure","members":{"directConnectGatewayId":{},"virtualInterfaceId":{},"virtualInterfaceRegion":{},"virtualInterfaceOwnerAccount":{},"attachmentState":{},"stateChangeError":{}}}},"nextToken":{}}}},"DescribeDirectConnectGateways":{"input":{"type":"structure","members":{"directConnectGatewayId":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"directConnectGateways":{"type":"list","member":{"shape":"S1m"}},"nextToken":{}}}},"DescribeHostedConnections":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{}}},"output":{"shape":"S2s"}},"DescribeInterconnectLoa":{"input":{"type":"structure","required":["interconnectId"],"members":{"interconnectId":{},"providerName":{},"loaContentType":{}}},"output":{"type":"structure","members":{"loa":{"shape":"S2p"}}},"deprecated":true},"DescribeInterconnects":{"input":{"type":"structure","members":{"interconnectId":{}}},"output":{"type":"structure","members":{"interconnects":{"type":"list","member":{"shape":"S1w"}}}}},"DescribeLags":{"input":{"type":"structure","members":{"lagId":{}}},"output":{"type":"structure","members":{"lags":{"type":"list","member":{"shape":"S21"}}}}},"DescribeLoa":{"input":{"type":"structure","required":["connectionId"],"members":{"connectionId":{},"providerName":{},"loaContentType":{}}},"output":{"shape":"S2p"}},"DescribeLocations":{"output":{"type":"structure","members":{"locations":{"type":"list","member":{"type":"structure","members":{"locationCode":{},"locationName":{}}}}}}},"DescribeTags":{"input":{"type":"structure","required":["resourceArns"],"members":{"resourceArns":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"resourceTags":{"type":"list","member":{"type":"structure","members":{"resourceArn":{},"tags":{"shape":"S3s"}}}}}}},"DescribeVirtualGateways":{"output":{"type":"structure","members":{"virtualGateways":{"type":"list","member":{"type":"structure","members":{"virtualGatewayId":{},"virtualGatewayState":{}}}}}}},"DescribeVirtualInterfaces":{"input":{"type":"structure","members":{"connectionId":{},"virtualInterfaceId":{}}},"output":{"type":"structure","members":{"virtualInterfaces":{"type":"list","member":{"shape":"Sp"}}}}},"DisassociateConnectionFromLag":{"input":{"type":"structure","required":["connectionId","lagId"],"members":{"connectionId":{},"lagId":{}}},"output":{"shape":"S7"}},"TagResource":{"input":{"type":"structure","required":["resourceArn","tags"],"members":{"resourceArn":{},"tags":{"shape":"S3s"}}},"output":{"type":"structure","members":{}}},"UntagResource":{"input":{"type":"structure","required":["resourceArn","tagKeys"],"members":{"resourceArn":{},"tagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"UpdateLag":{"input":{"type":"structure","required":["lagId"],"members":{"lagId":{},"lagName":{},"minimumLinks":{"type":"integer"}}},"output":{"shape":"S21"}}},"shapes":{"S7":{"type":"structure","members":{"ownerAccount":{},"connectionId":{},"connectionName":{},"connectionState":{},"region":{},"location":{},"bandwidth":{},"vlan":{"type":"integer"},"partnerName":{},"loaIssueTime":{"type":"timestamp"},"lagId":{},"awsDevice":{}}},"Sp":{"type":"structure","members":{"ownerAccount":{},"virtualInterfaceId":{},"location":{},"connectionId":{},"virtualInterfaceType":{},"virtualInterfaceName":{},"vlan":{"type":"integer"},"asn":{"type":"integer"},"amazonSideAsn":{"type":"long"},"authKey":{},"amazonAddress":{},"customerAddress":{},"addressFamily":{},"virtualInterfaceState":{},"customerRouterConfig":{},"virtualGatewayId":{},"directConnectGatewayId":{},"routeFilterPrefixes":{"shape":"Sx"},"bgpPeers":{"type":"list","member":{"type":"structure","members":{"asn":{"type":"integer"},"authKey":{},"addressFamily":{},"amazonAddress":{},"customerAddress":{},"bgpPeerState":{},"bgpStatus":{}}}}}},"Sx":{"type":"list","member":{"type":"structure","members":{"cidr":{}}}},"S1m":{"type":"structure","members":{"directConnectGatewayId":{},"directConnectGatewayName":{},"amazonSideAsn":{"type":"long"},"ownerAccount":{},"directConnectGatewayState":{},"stateChangeError":{}}},"S1r":{"type":"structure","members":{"directConnectGatewayId":{},"virtualGatewayId":{},"virtualGatewayRegion":{},"virtualGatewayOwnerAccount":{},"associationState":{},"stateChangeError":{}}},"S1w":{"type":"structure","members":{"interconnectId":{},"interconnectName":{},"interconnectState":{},"region":{},"location":{},"bandwidth":{},"loaIssueTime":{"type":"timestamp"},"lagId":{},"awsDevice":{}}},"S21":{"type":"structure","members":{"connectionsBandwidth":{},"numberOfConnections":{"type":"integer"},"lagId":{},"ownerAccount":{},"lagName":{},"lagState":{},"location":{},"region":{},"minimumLinks":{"type":"integer"},"awsDevice":{},"connections":{"shape":"S23"},"allowsHostedConnections":{"type":"boolean"}}},"S23":{"type":"list","member":{"shape":"S7"}},"S2p":{"type":"structure","members":{"loaContent":{"type":"blob"},"loaContentType":{}}},"S2s":{"type":"structure","members":{"connections":{"shape":"S23"}}},"S3s":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}}}}}

/***/ }),
/* 190 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeConnections":{"result_key":"connections"},"DescribeConnectionsOnInterconnect":{"result_key":"connections"},"DescribeInterconnects":{"result_key":"interconnects"},"DescribeLocations":{"result_key":"locations"},"DescribeVirtualGateways":{"result_key":"virtualGateways"},"DescribeVirtualInterfaces":{"result_key":"virtualInterfaces"}}}

/***/ }),
/* 191 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-11-01","endpointPrefix":"discovery","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Application Discovery Service","signatureVersion":"v4","targetPrefix":"AWSPoseidonService_V2015_11_01","uid":"discovery-2015-11-01"},"operations":{"AssociateConfigurationItemsToApplication":{"input":{"type":"structure","required":["applicationConfigurationId","configurationIds"],"members":{"applicationConfigurationId":{},"configurationIds":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"CreateApplication":{"input":{"type":"structure","required":["name"],"members":{"name":{},"description":{}}},"output":{"type":"structure","members":{"configurationId":{}}}},"CreateTags":{"input":{"type":"structure","required":["configurationIds","tags"],"members":{"configurationIds":{"shape":"S3"},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}},"DeleteApplications":{"input":{"type":"structure","required":["configurationIds"],"members":{"configurationIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"DeleteTags":{"input":{"type":"structure","required":["configurationIds"],"members":{"configurationIds":{"shape":"S3"},"tags":{"shape":"Sa"}}},"output":{"type":"structure","members":{}}},"DescribeAgents":{"input":{"type":"structure","members":{"agentIds":{"shape":"Sl"},"filters":{"shape":"Sn"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"agentsInfo":{"type":"list","member":{"type":"structure","members":{"agentId":{},"hostName":{},"agentNetworkInfoList":{"type":"list","member":{"type":"structure","members":{"ipAddress":{},"macAddress":{}}}},"connectorId":{},"version":{},"health":{},"lastHealthPingTime":{},"collectionStatus":{},"agentType":{},"registeredTime":{}}}},"nextToken":{}}}},"DescribeConfigurations":{"input":{"type":"structure","required":["configurationIds"],"members":{"configurationIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"configurations":{"type":"list","member":{"type":"map","key":{},"value":{}}}}}},"DescribeExportConfigurations":{"input":{"type":"structure","members":{"exportIds":{"shape":"S15"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"exportsInfo":{"shape":"S18"},"nextToken":{}}},"deprecated":true},"DescribeExportTasks":{"input":{"type":"structure","members":{"exportIds":{"shape":"S15"},"filters":{"shape":"S1h"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"exportsInfo":{"shape":"S18"},"nextToken":{}}}},"DescribeTags":{"input":{"type":"structure","members":{"filters":{"type":"list","member":{"type":"structure","required":["name","values"],"members":{"name":{},"values":{"shape":"Sp"}}}},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"tags":{"type":"list","member":{"locationName":"item","type":"structure","members":{"configurationType":{},"configurationId":{},"key":{},"value":{},"timeOfCreation":{"type":"timestamp"}}}},"nextToken":{}}}},"DisassociateConfigurationItemsFromApplication":{"input":{"type":"structure","required":["applicationConfigurationId","configurationIds"],"members":{"applicationConfigurationId":{},"configurationIds":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"ExportConfigurations":{"output":{"type":"structure","members":{"exportId":{}}},"deprecated":true},"GetDiscoverySummary":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"servers":{"type":"long"},"applications":{"type":"long"},"serversMappedToApplications":{"type":"long"},"serversMappedtoTags":{"type":"long"},"agentSummary":{"type":"structure","required":["activeAgents","healthyAgents","blackListedAgents","shutdownAgents","unhealthyAgents","totalAgents","unknownAgents"],"members":{"activeAgents":{"type":"integer"},"healthyAgents":{"type":"integer"},"blackListedAgents":{"type":"integer"},"shutdownAgents":{"type":"integer"},"unhealthyAgents":{"type":"integer"},"totalAgents":{"type":"integer"},"unknownAgents":{"type":"integer"}}},"connectorSummary":{"type":"structure","required":["activeConnectors","healthyConnectors","blackListedConnectors","shutdownConnectors","unhealthyConnectors","totalConnectors","unknownConnectors"],"members":{"activeConnectors":{"type":"integer"},"healthyConnectors":{"type":"integer"},"blackListedConnectors":{"type":"integer"},"shutdownConnectors":{"type":"integer"},"unhealthyConnectors":{"type":"integer"},"totalConnectors":{"type":"integer"},"unknownConnectors":{"type":"integer"}}}}}},"ListConfigurations":{"input":{"type":"structure","required":["configurationType"],"members":{"configurationType":{},"filters":{"shape":"Sn"},"maxResults":{"type":"integer"},"nextToken":{},"orderBy":{"type":"list","member":{"type":"structure","required":["fieldName"],"members":{"fieldName":{},"sortOrder":{}}}}}},"output":{"type":"structure","members":{"configurations":{"type":"list","member":{"type":"map","key":{},"value":{}}},"nextToken":{}}}},"ListServerNeighbors":{"input":{"type":"structure","required":["configurationId"],"members":{"configurationId":{},"portInformationNeeded":{"type":"boolean"},"neighborConfigurationIds":{"shape":"S3"},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","required":["neighbors"],"members":{"neighbors":{"type":"list","member":{"type":"structure","required":["sourceServerId","destinationServerId","connectionsCount"],"members":{"sourceServerId":{},"destinationServerId":{},"destinationPort":{"type":"integer"},"transportProtocol":{},"connectionsCount":{"type":"long"}}}},"nextToken":{},"knownDependencyCount":{"type":"long"}}}},"StartDataCollectionByAgentIds":{"input":{"type":"structure","required":["agentIds"],"members":{"agentIds":{"shape":"Sl"}}},"output":{"type":"structure","members":{"agentsConfigurationStatus":{"shape":"S2e"}}}},"StartExportTask":{"input":{"type":"structure","members":{"exportDataFormat":{"type":"list","member":{}},"filters":{"shape":"S1h"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"}}},"output":{"type":"structure","members":{"exportId":{}}}},"StopDataCollectionByAgentIds":{"input":{"type":"structure","required":["agentIds"],"members":{"agentIds":{"shape":"Sl"}}},"output":{"type":"structure","members":{"agentsConfigurationStatus":{"shape":"S2e"}}}},"UpdateApplication":{"input":{"type":"structure","required":["configurationId"],"members":{"configurationId":{},"name":{},"description":{}}},"output":{"type":"structure","members":{}}}},"shapes":{"S3":{"type":"list","member":{}},"Sa":{"type":"list","member":{"locationName":"item","type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"Sl":{"type":"list","member":{}},"Sn":{"type":"list","member":{"type":"structure","required":["name","values","condition"],"members":{"name":{},"values":{"shape":"Sp"},"condition":{}}}},"Sp":{"type":"list","member":{"locationName":"item"}},"S15":{"type":"list","member":{}},"S18":{"type":"list","member":{"type":"structure","required":["exportId","exportStatus","statusMessage","exportRequestTime"],"members":{"exportId":{},"exportStatus":{},"statusMessage":{},"configurationsDownloadUrl":{},"exportRequestTime":{"type":"timestamp"},"isTruncated":{"type":"boolean"},"requestedStartTime":{"type":"timestamp"},"requestedEndTime":{"type":"timestamp"}}}},"S1h":{"type":"list","member":{"type":"structure","required":["name","values","condition"],"members":{"name":{},"values":{"shape":"Sp"},"condition":{}}}},"S2e":{"type":"list","member":{"type":"structure","members":{"agentId":{},"operationSucceeded":{"type":"boolean"},"description":{}}}}}}

/***/ }),
/* 192 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 193 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-01-01","endpointPrefix":"dms","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Database Migration Service","signatureVersion":"v4","targetPrefix":"AmazonDMSv20160101","uid":"dms-2016-01-01"},"operations":{"AddTagsToResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"CreateEndpoint":{"input":{"type":"structure","required":["EndpointIdentifier","EndpointType","EngineName"],"members":{"EndpointIdentifier":{},"EndpointType":{},"EngineName":{},"Username":{},"Password":{"shape":"S8"},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"ExtraConnectionAttributes":{},"KmsKeyId":{},"Tags":{"shape":"S3"},"CertificateArn":{},"SslMode":{},"DynamoDbSettings":{"shape":"Sb"},"S3Settings":{"shape":"Sc"},"MongoDbSettings":{"shape":"Se"}}},"output":{"type":"structure","members":{"Endpoint":{"shape":"Sj"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"Sl"},"SourceIds":{"shape":"Sm"},"Enabled":{"type":"boolean"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"EventSubscription":{"shape":"Sp"}}}},"CreateReplicationInstance":{"input":{"type":"structure","required":["ReplicationInstanceIdentifier","ReplicationInstanceClass"],"members":{"ReplicationInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"ReplicationInstanceClass":{},"VpcSecurityGroupIds":{"shape":"Ss"},"AvailabilityZone":{},"ReplicationSubnetGroupIdentifier":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"Tags":{"shape":"S3"},"KmsKeyId":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"type":"structure","members":{"ReplicationInstance":{"shape":"Su"}}}},"CreateReplicationSubnetGroup":{"input":{"type":"structure","required":["ReplicationSubnetGroupIdentifier","ReplicationSubnetGroupDescription","SubnetIds"],"members":{"ReplicationSubnetGroupIdentifier":{},"ReplicationSubnetGroupDescription":{},"SubnetIds":{"shape":"S17"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"ReplicationSubnetGroup":{"shape":"Sz"}}}},"CreateReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskIdentifier","SourceEndpointArn","TargetEndpointArn","ReplicationInstanceArn","MigrationType","TableMappings"],"members":{"ReplicationTaskIdentifier":{},"SourceEndpointArn":{},"TargetEndpointArn":{},"ReplicationInstanceArn":{},"MigrationType":{},"TableMappings":{},"ReplicationTaskSettings":{},"CdcStartTime":{"type":"timestamp"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S1c"}}}},"DeleteCertificate":{"input":{"type":"structure","required":["CertificateArn"],"members":{"CertificateArn":{}}},"output":{"type":"structure","members":{"Certificate":{"shape":"S1h"}}}},"DeleteEndpoint":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}},"output":{"type":"structure","members":{"Endpoint":{"shape":"Sj"}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"type":"structure","members":{"EventSubscription":{"shape":"Sp"}}}},"DeleteReplicationInstance":{"input":{"type":"structure","required":["ReplicationInstanceArn"],"members":{"ReplicationInstanceArn":{}}},"output":{"type":"structure","members":{"ReplicationInstance":{"shape":"Su"}}}},"DeleteReplicationSubnetGroup":{"input":{"type":"structure","required":["ReplicationSubnetGroupIdentifier"],"members":{"ReplicationSubnetGroupIdentifier":{}}},"output":{"type":"structure","members":{}}},"DeleteReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S1c"}}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AccountQuotas":{"type":"list","member":{"locationName":"AccountQuota","type":"structure","members":{"AccountQuotaName":{},"Used":{"type":"long"},"Max":{"type":"long"}}}}}}},"DescribeCertificates":{"input":{"type":"structure","members":{"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Certificates":{"type":"list","member":{"shape":"S1h","locationName":"Certificate"}}}}},"DescribeConnections":{"input":{"type":"structure","members":{"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Connections":{"type":"list","member":{"shape":"S26","locationName":"Connection"}}}}},"DescribeEndpointTypes":{"input":{"type":"structure","members":{"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"SupportedEndpointTypes":{"type":"list","member":{"locationName":"SupportedEndpointType","type":"structure","members":{"EngineName":{},"SupportsCDC":{"type":"boolean"},"EndpointType":{}}}}}}},"DescribeEndpoints":{"input":{"type":"structure","members":{"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Endpoints":{"type":"list","member":{"shape":"Sj","locationName":"Endpoint"}}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S1y"}}},"output":{"type":"structure","members":{"EventCategoryGroupList":{"type":"list","member":{"locationName":"EventCategoryGroup","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"Sl"}}}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"Sp","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"Sl"},"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"Sl"},"Date":{"type":"timestamp"}}}}}}},"DescribeOrderableReplicationInstances":{"input":{"type":"structure","members":{"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"OrderableReplicationInstances":{"type":"list","member":{"locationName":"OrderableReplicationInstance","type":"structure","members":{"EngineVersion":{},"ReplicationInstanceClass":{},"StorageType":{},"MinAllocatedStorage":{"type":"integer"},"MaxAllocatedStorage":{"type":"integer"},"DefaultAllocatedStorage":{"type":"integer"},"IncludedAllocatedStorage":{"type":"integer"}}}},"Marker":{}}}},"DescribeRefreshSchemasStatus":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}},"output":{"type":"structure","members":{"RefreshSchemasStatus":{"shape":"S2w"}}}},"DescribeReplicationInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationInstances":{"type":"list","member":{"shape":"Su","locationName":"ReplicationInstance"}}}}},"DescribeReplicationSubnetGroups":{"input":{"type":"structure","members":{"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationSubnetGroups":{"type":"list","member":{"shape":"Sz","locationName":"ReplicationSubnetGroup"}}}}},"DescribeReplicationTasks":{"input":{"type":"structure","members":{"Filters":{"shape":"S1y"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"ReplicationTasks":{"type":"list","member":{"shape":"S1c","locationName":"ReplicationTask"}}}}},"DescribeSchemas":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"Schemas":{"type":"list","member":{}}}}},"DescribeTableStatistics":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{},"MaxRecords":{"type":"integer"},"Marker":{},"Filters":{"shape":"S1y"}}},"output":{"type":"structure","members":{"ReplicationTaskArn":{},"TableStatistics":{"type":"list","member":{"type":"structure","members":{"SchemaName":{},"TableName":{},"Inserts":{"type":"long"},"Deletes":{"type":"long"},"Updates":{"type":"long"},"Ddls":{"type":"long"},"FullLoadRows":{"type":"long"},"FullLoadCondtnlChkFailedRows":{"type":"long"},"FullLoadErrorRows":{"type":"long"},"LastUpdateTime":{"type":"timestamp"},"TableState":{}}}},"Marker":{}}}},"ImportCertificate":{"input":{"type":"structure","required":["CertificateIdentifier"],"members":{"CertificateIdentifier":{},"CertificatePem":{},"CertificateWallet":{"type":"blob"},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{"Certificate":{"shape":"S1h"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{"TagList":{"shape":"S3"}}}},"ModifyEndpoint":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{},"EndpointIdentifier":{},"EndpointType":{},"EngineName":{},"Username":{},"Password":{"shape":"S8"},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"ExtraConnectionAttributes":{},"CertificateArn":{},"SslMode":{},"DynamoDbSettings":{"shape":"Sb"},"S3Settings":{"shape":"Sc"},"MongoDbSettings":{"shape":"Se"}}},"output":{"type":"structure","members":{"Endpoint":{"shape":"Sj"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"Sl"},"Enabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"EventSubscription":{"shape":"Sp"}}}},"ModifyReplicationInstance":{"input":{"type":"structure","required":["ReplicationInstanceArn"],"members":{"ReplicationInstanceArn":{},"AllocatedStorage":{"type":"integer"},"ApplyImmediately":{"type":"boolean"},"ReplicationInstanceClass":{},"VpcSecurityGroupIds":{"shape":"Ss"},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReplicationInstanceIdentifier":{}}},"output":{"type":"structure","members":{"ReplicationInstance":{"shape":"Su"}}}},"ModifyReplicationSubnetGroup":{"input":{"type":"structure","required":["ReplicationSubnetGroupIdentifier","SubnetIds"],"members":{"ReplicationSubnetGroupIdentifier":{},"ReplicationSubnetGroupDescription":{},"SubnetIds":{"shape":"S17"}}},"output":{"type":"structure","members":{"ReplicationSubnetGroup":{"shape":"Sz"}}}},"ModifyReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{},"ReplicationTaskIdentifier":{},"MigrationType":{},"TableMappings":{},"ReplicationTaskSettings":{},"CdcStartTime":{"type":"timestamp"}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S1c"}}}},"RefreshSchemas":{"input":{"type":"structure","required":["EndpointArn","ReplicationInstanceArn"],"members":{"EndpointArn":{},"ReplicationInstanceArn":{}}},"output":{"type":"structure","members":{"RefreshSchemasStatus":{"shape":"S2w"}}}},"ReloadTables":{"input":{"type":"structure","required":["ReplicationTaskArn","TablesToReload"],"members":{"ReplicationTaskArn":{},"TablesToReload":{"type":"list","member":{"type":"structure","members":{"SchemaName":{},"TableName":{}}}}}},"output":{"type":"structure","members":{"ReplicationTaskArn":{}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"StartReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn","StartReplicationTaskType"],"members":{"ReplicationTaskArn":{},"StartReplicationTaskType":{},"CdcStartTime":{"type":"timestamp"}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S1c"}}}},"StopReplicationTask":{"input":{"type":"structure","required":["ReplicationTaskArn"],"members":{"ReplicationTaskArn":{}}},"output":{"type":"structure","members":{"ReplicationTask":{"shape":"S1c"}}}},"TestConnection":{"input":{"type":"structure","required":["ReplicationInstanceArn","EndpointArn"],"members":{"ReplicationInstanceArn":{},"EndpointArn":{}}},"output":{"type":"structure","members":{"Connection":{"shape":"S26"}}}}},"shapes":{"S3":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"S8":{"type":"string","sensitive":true},"Sb":{"type":"structure","required":["ServiceAccessRoleArn"],"members":{"ServiceAccessRoleArn":{}}},"Sc":{"type":"structure","members":{"ServiceAccessRoleArn":{},"ExternalTableDefinition":{},"CsvRowDelimiter":{},"CsvDelimiter":{},"BucketFolder":{},"BucketName":{},"CompressionType":{}}},"Se":{"type":"structure","members":{"Username":{},"Password":{"shape":"S8"},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"AuthType":{},"AuthMechanism":{},"NestingLevel":{},"ExtractDocId":{},"DocsToInvestigate":{},"AuthSource":{}}},"Sj":{"type":"structure","members":{"EndpointIdentifier":{},"EndpointType":{},"EngineName":{},"Username":{},"ServerName":{},"Port":{"type":"integer"},"DatabaseName":{},"ExtraConnectionAttributes":{},"Status":{},"KmsKeyId":{},"EndpointArn":{},"CertificateArn":{},"SslMode":{},"ExternalId":{},"DynamoDbSettings":{"shape":"Sb"},"S3Settings":{"shape":"Sc"},"MongoDbSettings":{"shape":"Se"}}},"Sl":{"type":"list","member":{"locationName":"EventCategory"}},"Sm":{"type":"list","member":{"locationName":"SourceId"}},"Sp":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"Sm"},"EventCategoriesList":{"shape":"Sl"},"Enabled":{"type":"boolean"}}},"Ss":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"Su":{"type":"structure","members":{"ReplicationInstanceIdentifier":{},"ReplicationInstanceClass":{},"ReplicationInstanceStatus":{},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"VpcSecurityGroups":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"AvailabilityZone":{},"ReplicationSubnetGroup":{"shape":"Sz"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"ReplicationInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{}}},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"KmsKeyId":{},"ReplicationInstanceArn":{},"ReplicationInstancePublicIpAddress":{"deprecated":true},"ReplicationInstancePrivateIpAddress":{"deprecated":true},"ReplicationInstancePublicIpAddresses":{"type":"list","member":{}},"ReplicationInstancePrivateIpAddresses":{"type":"list","member":{}},"PubliclyAccessible":{"type":"boolean"},"SecondaryAvailabilityZone":{}}},"Sz":{"type":"structure","members":{"ReplicationSubnetGroupIdentifier":{},"ReplicationSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"type":"structure","members":{"Name":{}}},"SubnetStatus":{}}}}}},"S17":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1c":{"type":"structure","members":{"ReplicationTaskIdentifier":{},"SourceEndpointArn":{},"TargetEndpointArn":{},"ReplicationInstanceArn":{},"MigrationType":{},"TableMappings":{},"ReplicationTaskSettings":{},"Status":{},"LastFailureMessage":{},"StopReason":{},"ReplicationTaskCreationDate":{"type":"timestamp"},"ReplicationTaskStartDate":{"type":"timestamp"},"ReplicationTaskArn":{},"ReplicationTaskStats":{"type":"structure","members":{"FullLoadProgressPercent":{"type":"integer"},"ElapsedTimeMillis":{"type":"long"},"TablesLoaded":{"type":"integer"},"TablesLoading":{"type":"integer"},"TablesQueued":{"type":"integer"},"TablesErrored":{"type":"integer"}}}}},"S1h":{"type":"structure","members":{"CertificateIdentifier":{},"CertificateCreationDate":{"type":"timestamp"},"CertificatePem":{},"CertificateWallet":{"type":"blob"},"CertificateArn":{},"CertificateOwner":{},"ValidFromDate":{"type":"timestamp"},"ValidToDate":{"type":"timestamp"},"SigningAlgorithm":{},"KeyLength":{"type":"integer"}}},"S1y":{"type":"list","member":{"locationName":"Filter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{"locationName":"Value"}}}}},"S26":{"type":"structure","members":{"ReplicationInstanceArn":{},"EndpointArn":{},"Status":{},"LastFailureMessage":{},"EndpointIdentifier":{},"ReplicationInstanceIdentifier":{}}},"S2w":{"type":"structure","members":{"EndpointArn":{},"ReplicationInstanceArn":{},"Status":{},"LastRefreshDate":{"type":"timestamp"},"LastFailureMessage":{}}}}}

/***/ }),
/* 194 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeCertificates":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeConnections":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEndpointTypes":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEndpoints":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEventSubscriptions":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeEvents":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeOrderableReplicationInstances":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationInstances":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationSubnetGroups":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeReplicationTasks":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeSchemas":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"},"DescribeTableStatistics":{"input_token":"Marker","output_token":"Marker","limit_key":"MaxRecords"}}}

/***/ }),
/* 195 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-04-16","endpointPrefix":"ds","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Directory Service","serviceFullName":"AWS Directory Service","signatureVersion":"v4","targetPrefix":"DirectoryService_20150416","uid":"ds-2015-04-16"},"operations":{"AddIpRoutes":{"input":{"type":"structure","required":["DirectoryId","IpRoutes"],"members":{"DirectoryId":{},"IpRoutes":{"type":"list","member":{"type":"structure","members":{"CidrIp":{},"Description":{}}}},"UpdateSecurityGroupForDirectoryControllers":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceId","Tags"],"members":{"ResourceId":{},"Tags":{"shape":"Sb"}}},"output":{"type":"structure","members":{}}},"CancelSchemaExtension":{"input":{"type":"structure","required":["DirectoryId","SchemaExtensionId"],"members":{"DirectoryId":{},"SchemaExtensionId":{}}},"output":{"type":"structure","members":{}}},"ConnectDirectory":{"input":{"type":"structure","required":["Name","Password","Size","ConnectSettings"],"members":{"Name":{},"ShortName":{},"Password":{"shape":"Sm"},"Description":{},"Size":{},"ConnectSettings":{"type":"structure","required":["VpcId","SubnetIds","CustomerDnsIps","CustomerUserName"],"members":{"VpcId":{},"SubnetIds":{"shape":"Sq"},"CustomerDnsIps":{"shape":"Ss"},"CustomerUserName":{}}}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"CreateAlias":{"input":{"type":"structure","required":["DirectoryId","Alias"],"members":{"DirectoryId":{},"Alias":{}}},"output":{"type":"structure","members":{"DirectoryId":{},"Alias":{}}}},"CreateComputer":{"input":{"type":"structure","required":["DirectoryId","ComputerName","Password"],"members":{"DirectoryId":{},"ComputerName":{},"Password":{"type":"string","sensitive":true},"OrganizationalUnitDistinguishedName":{},"ComputerAttributes":{"shape":"S13"}}},"output":{"type":"structure","members":{"Computer":{"type":"structure","members":{"ComputerId":{},"ComputerName":{},"ComputerAttributes":{"shape":"S13"}}}}}},"CreateConditionalForwarder":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName","DnsIpAddrs"],"members":{"DirectoryId":{},"RemoteDomainName":{},"DnsIpAddrs":{"shape":"Ss"}}},"output":{"type":"structure","members":{}}},"CreateDirectory":{"input":{"type":"structure","required":["Name","Password","Size"],"members":{"Name":{},"ShortName":{},"Password":{"shape":"S1e"},"Description":{},"Size":{},"VpcSettings":{"shape":"S1f"}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"CreateMicrosoftAD":{"input":{"type":"structure","required":["Name","Password","VpcSettings"],"members":{"Name":{},"ShortName":{},"Password":{"shape":"S1e"},"Description":{},"VpcSettings":{"shape":"S1f"}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"CreateSnapshot":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"Name":{}}},"output":{"type":"structure","members":{"SnapshotId":{}}}},"CreateTrust":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName","TrustPassword","TrustDirection"],"members":{"DirectoryId":{},"RemoteDomainName":{},"TrustPassword":{"type":"string","sensitive":true},"TrustDirection":{},"TrustType":{},"ConditionalForwarderIpAddrs":{"shape":"Ss"}}},"output":{"type":"structure","members":{"TrustId":{}}}},"DeleteConditionalForwarder":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName"],"members":{"DirectoryId":{},"RemoteDomainName":{}}},"output":{"type":"structure","members":{}}},"DeleteDirectory":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{"DirectoryId":{}}}},"DeleteSnapshot":{"input":{"type":"structure","required":["SnapshotId"],"members":{"SnapshotId":{}}},"output":{"type":"structure","members":{"SnapshotId":{}}}},"DeleteTrust":{"input":{"type":"structure","required":["TrustId"],"members":{"TrustId":{},"DeleteAssociatedConditionalForwarder":{"type":"boolean"}}},"output":{"type":"structure","members":{"TrustId":{}}}},"DeregisterEventTopic":{"input":{"type":"structure","required":["DirectoryId","TopicName"],"members":{"DirectoryId":{},"TopicName":{}}},"output":{"type":"structure","members":{}}},"DescribeConditionalForwarders":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"RemoteDomainNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"ConditionalForwarders":{"type":"list","member":{"type":"structure","members":{"RemoteDomainName":{},"DnsIpAddrs":{"shape":"Ss"},"ReplicationScope":{}}}}}}},"DescribeDirectories":{"input":{"type":"structure","members":{"DirectoryIds":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"DirectoryDescriptions":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"Name":{},"ShortName":{},"Size":{},"Alias":{},"AccessUrl":{},"Description":{},"DnsIpAddrs":{"shape":"Ss"},"Stage":{},"LaunchTime":{"type":"timestamp"},"StageLastUpdatedDateTime":{"type":"timestamp"},"Type":{},"VpcSettings":{"type":"structure","members":{"VpcId":{},"SubnetIds":{"shape":"Sq"},"SecurityGroupId":{},"AvailabilityZones":{"shape":"S2p"}}},"ConnectSettings":{"type":"structure","members":{"VpcId":{},"SubnetIds":{"shape":"Sq"},"CustomerUserName":{},"SecurityGroupId":{},"AvailabilityZones":{"shape":"S2p"},"ConnectIps":{"type":"list","member":{}}}},"RadiusSettings":{"shape":"S2t"},"RadiusStatus":{},"StageReason":{},"SsoEnabled":{"type":"boolean"},"DesiredNumberOfDomainControllers":{"type":"integer"}}}},"NextToken":{}}}},"DescribeDomainControllers":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"DomainControllerIds":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"DomainControllers":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"DomainControllerId":{},"DnsIpAddr":{},"VpcId":{},"SubnetId":{},"AvailabilityZone":{},"Status":{},"StatusReason":{},"LaunchTime":{"type":"timestamp"},"StatusLastUpdatedDateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeEventTopics":{"input":{"type":"structure","members":{"DirectoryId":{},"TopicNames":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"EventTopics":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"TopicName":{},"TopicArn":{},"CreatedDateTime":{"type":"timestamp"},"Status":{}}}}}}},"DescribeSnapshots":{"input":{"type":"structure","members":{"DirectoryId":{},"SnapshotIds":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Snapshots":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"SnapshotId":{},"Type":{},"Name":{},"Status":{},"StartTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeTrusts":{"input":{"type":"structure","members":{"DirectoryId":{},"TrustIds":{"type":"list","member":{}},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Trusts":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"TrustId":{},"RemoteDomainName":{},"TrustType":{},"TrustDirection":{},"TrustState":{},"CreatedDateTime":{"type":"timestamp"},"LastUpdatedDateTime":{"type":"timestamp"},"StateLastUpdatedDateTime":{"type":"timestamp"},"TrustStateReason":{}}}},"NextToken":{}}}},"DisableRadius":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{}}},"DisableSso":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"UserName":{},"Password":{"shape":"Sm"}}},"output":{"type":"structure","members":{}}},"EnableRadius":{"input":{"type":"structure","required":["DirectoryId","RadiusSettings"],"members":{"DirectoryId":{},"RadiusSettings":{"shape":"S2t"}}},"output":{"type":"structure","members":{}}},"EnableSso":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"UserName":{},"Password":{"shape":"Sm"}}},"output":{"type":"structure","members":{}}},"GetDirectoryLimits":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"DirectoryLimits":{"type":"structure","members":{"CloudOnlyDirectoriesLimit":{"type":"integer"},"CloudOnlyDirectoriesCurrentCount":{"type":"integer"},"CloudOnlyDirectoriesLimitReached":{"type":"boolean"},"CloudOnlyMicrosoftADLimit":{"type":"integer"},"CloudOnlyMicrosoftADCurrentCount":{"type":"integer"},"CloudOnlyMicrosoftADLimitReached":{"type":"boolean"},"ConnectedDirectoriesLimit":{"type":"integer"},"ConnectedDirectoriesCurrentCount":{"type":"integer"},"ConnectedDirectoriesLimitReached":{"type":"boolean"}}}}}},"GetSnapshotLimits":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{}}},"output":{"type":"structure","members":{"SnapshotLimits":{"type":"structure","members":{"ManualSnapshotsLimit":{"type":"integer"},"ManualSnapshotsCurrentCount":{"type":"integer"},"ManualSnapshotsLimitReached":{"type":"boolean"}}}}}},"ListIpRoutes":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"IpRoutesInfo":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"CidrIp":{},"IpRouteStatusMsg":{},"AddedDateTime":{"type":"timestamp"},"IpRouteStatusReason":{},"Description":{}}}},"NextToken":{}}}},"ListSchemaExtensions":{"input":{"type":"structure","required":["DirectoryId"],"members":{"DirectoryId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"SchemaExtensionsInfo":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"SchemaExtensionId":{},"Description":{},"SchemaExtensionStatus":{},"SchemaExtensionStatusReason":{},"StartDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sb"},"NextToken":{}}}},"RegisterEventTopic":{"input":{"type":"structure","required":["DirectoryId","TopicName"],"members":{"DirectoryId":{},"TopicName":{}}},"output":{"type":"structure","members":{}}},"RemoveIpRoutes":{"input":{"type":"structure","required":["DirectoryId","CidrIps"],"members":{"DirectoryId":{},"CidrIps":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceId","TagKeys"],"members":{"ResourceId":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"RestoreFromSnapshot":{"input":{"type":"structure","required":["SnapshotId"],"members":{"SnapshotId":{}}},"output":{"type":"structure","members":{}}},"StartSchemaExtension":{"input":{"type":"structure","required":["DirectoryId","CreateSnapshotBeforeSchemaExtension","LdifContent","Description"],"members":{"DirectoryId":{},"CreateSnapshotBeforeSchemaExtension":{"type":"boolean"},"LdifContent":{},"Description":{}}},"output":{"type":"structure","members":{"SchemaExtensionId":{}}}},"UpdateConditionalForwarder":{"input":{"type":"structure","required":["DirectoryId","RemoteDomainName","DnsIpAddrs"],"members":{"DirectoryId":{},"RemoteDomainName":{},"DnsIpAddrs":{"shape":"Ss"}}},"output":{"type":"structure","members":{}}},"UpdateNumberOfDomainControllers":{"input":{"type":"structure","required":["DirectoryId","DesiredNumber"],"members":{"DirectoryId":{},"DesiredNumber":{"type":"integer"}}},"output":{"type":"structure","members":{}}},"UpdateRadius":{"input":{"type":"structure","required":["DirectoryId","RadiusSettings"],"members":{"DirectoryId":{},"RadiusSettings":{"shape":"S2t"}}},"output":{"type":"structure","members":{}}},"VerifyTrust":{"input":{"type":"structure","required":["TrustId"],"members":{"TrustId":{}}},"output":{"type":"structure","members":{"TrustId":{}}}}},"shapes":{"Sb":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sm":{"type":"string","sensitive":true},"Sq":{"type":"list","member":{}},"Ss":{"type":"list","member":{}},"S13":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{}}}},"S1e":{"type":"string","sensitive":true},"S1f":{"type":"structure","required":["VpcId","SubnetIds"],"members":{"VpcId":{},"SubnetIds":{"shape":"Sq"}}},"S2p":{"type":"list","member":{}},"S2t":{"type":"structure","members":{"RadiusServers":{"type":"list","member":{}},"RadiusPort":{"type":"integer"},"RadiusTimeout":{"type":"integer"},"RadiusRetries":{"type":"integer"},"SharedSecret":{"type":"string","sensitive":true},"AuthenticationProtocol":{},"DisplayLabel":{},"UseSameUsername":{"type":"boolean"}}}}}

/***/ }),
/* 196 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDomainControllers":{"input_token":"NextToken","output_token":"NextToken","limit_key":"Limit"}}}

/***/ }),
/* 197 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2011-12-05","endpointPrefix":"dynamodb","jsonVersion":"1.0","protocol":"json","serviceAbbreviation":"DynamoDB","serviceFullName":"Amazon DynamoDB","signatureVersion":"v4","targetPrefix":"DynamoDB_20111205","uid":"dynamodb-2011-12-05"},"operations":{"BatchGetItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"S2"}}},"output":{"type":"structure","members":{"Responses":{"type":"map","key":{},"value":{"type":"structure","members":{"Items":{"shape":"Sk"},"ConsumedCapacityUnits":{"type":"double"}}}},"UnprocessedKeys":{"shape":"S2"}}}},"BatchWriteItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"So"}}},"output":{"type":"structure","members":{"Responses":{"type":"map","key":{},"value":{"type":"structure","members":{"ConsumedCapacityUnits":{"type":"double"}}}},"UnprocessedItems":{"shape":"So"}}}},"CreateTable":{"input":{"type":"structure","required":["TableName","KeySchema","ProvisionedThroughput"],"members":{"TableName":{},"KeySchema":{"shape":"Sy"},"ProvisionedThroughput":{"shape":"S12"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S15"}}}},"DeleteItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"Expected":{"shape":"S1b"},"ReturnValues":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"DeleteTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S15"}}}},"DescribeTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"Table":{"shape":"S15"}}}},"GetItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributesToGet":{"shape":"Se"},"ConsistentRead":{"type":"boolean"}}},"output":{"type":"structure","members":{"Item":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"ListTables":{"input":{"type":"structure","members":{"ExclusiveStartTableName":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"TableNames":{"type":"list","member":{}},"LastEvaluatedTableName":{}}}},"PutItem":{"input":{"type":"structure","required":["TableName","Item"],"members":{"TableName":{},"Item":{"shape":"Ss"},"Expected":{"shape":"S1b"},"ReturnValues":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"Query":{"input":{"type":"structure","required":["TableName","HashKeyValue"],"members":{"TableName":{},"AttributesToGet":{"shape":"Se"},"Limit":{"type":"integer"},"ConsistentRead":{"type":"boolean"},"Count":{"type":"boolean"},"HashKeyValue":{"shape":"S7"},"RangeKeyCondition":{"shape":"S1u"},"ScanIndexForward":{"type":"boolean"},"ExclusiveStartKey":{"shape":"S6"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sk"},"Count":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacityUnits":{"type":"double"}}}},"Scan":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"AttributesToGet":{"shape":"Se"},"Limit":{"type":"integer"},"Count":{"type":"boolean"},"ScanFilter":{"type":"map","key":{},"value":{"shape":"S1u"}},"ExclusiveStartKey":{"shape":"S6"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sk"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacityUnits":{"type":"double"}}}},"UpdateItem":{"input":{"type":"structure","required":["TableName","Key","AttributeUpdates"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributeUpdates":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S7"},"Action":{}}}},"Expected":{"shape":"S1b"},"ReturnValues":{}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Sl"},"ConsumedCapacityUnits":{"type":"double"}}}},"UpdateTable":{"input":{"type":"structure","required":["TableName","ProvisionedThroughput"],"members":{"TableName":{},"ProvisionedThroughput":{"shape":"S12"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S15"}}}}},"shapes":{"S2":{"type":"map","key":{},"value":{"type":"structure","required":["Keys"],"members":{"Keys":{"type":"list","member":{"shape":"S6"}},"AttributesToGet":{"shape":"Se"},"ConsistentRead":{"type":"boolean"}}}},"S6":{"type":"structure","required":["HashKeyElement"],"members":{"HashKeyElement":{"shape":"S7"},"RangeKeyElement":{"shape":"S7"}}},"S7":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}}}},"Se":{"type":"list","member":{}},"Sk":{"type":"list","member":{"shape":"Sl"}},"Sl":{"type":"map","key":{},"value":{"shape":"S7"}},"So":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"PutRequest":{"type":"structure","required":["Item"],"members":{"Item":{"shape":"Ss"}}},"DeleteRequest":{"type":"structure","required":["Key"],"members":{"Key":{"shape":"S6"}}}}}}},"Ss":{"type":"map","key":{},"value":{"shape":"S7"}},"Sy":{"type":"structure","required":["HashKeyElement"],"members":{"HashKeyElement":{"shape":"Sz"},"RangeKeyElement":{"shape":"Sz"}}},"Sz":{"type":"structure","required":["AttributeName","AttributeType"],"members":{"AttributeName":{},"AttributeType":{}}},"S12":{"type":"structure","required":["ReadCapacityUnits","WriteCapacityUnits"],"members":{"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S15":{"type":"structure","members":{"TableName":{},"KeySchema":{"shape":"Sy"},"TableStatus":{},"CreationDateTime":{"type":"timestamp"},"ProvisionedThroughput":{"type":"structure","members":{"LastIncreaseDateTime":{"type":"timestamp"},"LastDecreaseDateTime":{"type":"timestamp"},"NumberOfDecreasesToday":{"type":"long"},"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"TableSizeBytes":{"type":"long"},"ItemCount":{"type":"long"}}},"S1b":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S7"},"Exists":{"type":"boolean"}}}},"S1u":{"type":"structure","required":["ComparisonOperator"],"members":{"AttributeValueList":{"type":"list","member":{"shape":"S7"}},"ComparisonOperator":{}}}}}

/***/ }),
/* 198 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"BatchGetItem":{"input_token":"RequestItems","output_token":"UnprocessedKeys"},"ListTables":{"input_token":"ExclusiveStartTableName","limit_key":"Limit","output_token":"LastEvaluatedTableName","result_key":"TableNames"},"Query":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"},"Scan":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"}}}

/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"TableExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ACTIVE","matcher":"path","state":"success","argument":"Table.TableStatus"},{"expected":"ResourceNotFoundException","matcher":"error","state":"retry"}]},"TableNotExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ResourceNotFoundException","matcher":"error","state":"success"}]}}}

/***/ }),
/* 200 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-08-10","endpointPrefix":"dynamodb","jsonVersion":"1.0","protocol":"json","serviceAbbreviation":"DynamoDB","serviceFullName":"Amazon DynamoDB","signatureVersion":"v4","targetPrefix":"DynamoDB_20120810","uid":"dynamodb-2012-08-10"},"operations":{"BatchGetItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"S2"},"ReturnConsumedCapacity":{}}},"output":{"type":"structure","members":{"Responses":{"type":"map","key":{},"value":{"shape":"Sr"}},"UnprocessedKeys":{"shape":"S2"},"ConsumedCapacity":{"shape":"St"}}}},"BatchWriteItem":{"input":{"type":"structure","required":["RequestItems"],"members":{"RequestItems":{"shape":"S10"},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{}}},"output":{"type":"structure","members":{"UnprocessedItems":{"shape":"S10"},"ItemCollectionMetrics":{"type":"map","key":{},"value":{"type":"list","member":{"shape":"S1a"}}},"ConsumedCapacity":{"shape":"St"}}}},"CreateTable":{"input":{"type":"structure","required":["AttributeDefinitions","TableName","KeySchema","ProvisionedThroughput"],"members":{"AttributeDefinitions":{"shape":"S1f"},"TableName":{},"KeySchema":{"shape":"S1j"},"LocalSecondaryIndexes":{"type":"list","member":{"type":"structure","required":["IndexName","KeySchema","Projection"],"members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"}}}},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","required":["IndexName","KeySchema","Projection","ProvisionedThroughput"],"members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"ProvisionedThroughput":{"shape":"S1u"}}}},"ProvisionedThroughput":{"shape":"S1u"},"StreamSpecification":{"shape":"S1w"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S20"}}}},"DeleteItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"Expected":{"shape":"S2e"},"ConditionalOperator":{},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"},"ItemCollectionMetrics":{"shape":"S1a"}}}},"DeleteTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S20"}}}},"DescribeLimits":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AccountMaxReadCapacityUnits":{"type":"long"},"AccountMaxWriteCapacityUnits":{"type":"long"},"TableMaxReadCapacityUnits":{"type":"long"},"TableMaxWriteCapacityUnits":{"type":"long"}}}},"DescribeTable":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"Table":{"shape":"S20"}}}},"DescribeTimeToLive":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{}}},"output":{"type":"structure","members":{"TimeToLiveDescription":{"type":"structure","members":{"TimeToLiveStatus":{},"AttributeName":{}}}}}},"GetItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributesToGet":{"shape":"Sj"},"ConsistentRead":{"type":"boolean"},"ReturnConsumedCapacity":{},"ProjectionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"}}},"output":{"type":"structure","members":{"Item":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"}}}},"ListTables":{"input":{"type":"structure","members":{"ExclusiveStartTableName":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"TableNames":{"type":"list","member":{}},"LastEvaluatedTableName":{}}}},"ListTagsOfResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S3a"},"NextToken":{}}}},"PutItem":{"input":{"type":"structure","required":["TableName","Item"],"members":{"TableName":{},"Item":{"shape":"S14"},"Expected":{"shape":"S2e"},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"ConditionalOperator":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"},"ItemCollectionMetrics":{"shape":"S1a"}}}},"Query":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"IndexName":{},"Select":{},"AttributesToGet":{"shape":"Sj"},"Limit":{"type":"integer"},"ConsistentRead":{"type":"boolean"},"KeyConditions":{"type":"map","key":{},"value":{"shape":"S3k"}},"QueryFilter":{"shape":"S3l"},"ConditionalOperator":{},"ScanIndexForward":{"type":"boolean"},"ExclusiveStartKey":{"shape":"S6"},"ReturnConsumedCapacity":{},"ProjectionExpression":{},"FilterExpression":{},"KeyConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sr"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacity":{"shape":"Su"}}}},"Scan":{"input":{"type":"structure","required":["TableName"],"members":{"TableName":{},"IndexName":{},"AttributesToGet":{"shape":"Sj"},"Limit":{"type":"integer"},"Select":{},"ScanFilter":{"shape":"S3l"},"ConditionalOperator":{},"ExclusiveStartKey":{"shape":"S6"},"ReturnConsumedCapacity":{},"TotalSegments":{"type":"integer"},"Segment":{"type":"integer"},"ProjectionExpression":{},"FilterExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"},"ConsistentRead":{"type":"boolean"}}},"output":{"type":"structure","members":{"Items":{"shape":"Sr"},"Count":{"type":"integer"},"ScannedCount":{"type":"integer"},"LastEvaluatedKey":{"shape":"S6"},"ConsumedCapacity":{"shape":"Su"}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S3a"}}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}}},"UpdateItem":{"input":{"type":"structure","required":["TableName","Key"],"members":{"TableName":{},"Key":{"shape":"S6"},"AttributeUpdates":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S8"},"Action":{}}}},"Expected":{"shape":"S2e"},"ConditionalOperator":{},"ReturnValues":{},"ReturnConsumedCapacity":{},"ReturnItemCollectionMetrics":{},"UpdateExpression":{},"ConditionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"},"ExpressionAttributeValues":{"shape":"S2m"}}},"output":{"type":"structure","members":{"Attributes":{"shape":"Ss"},"ConsumedCapacity":{"shape":"Su"},"ItemCollectionMetrics":{"shape":"S1a"}}}},"UpdateTable":{"input":{"type":"structure","required":["TableName"],"members":{"AttributeDefinitions":{"shape":"S1f"},"TableName":{},"ProvisionedThroughput":{"shape":"S1u"},"GlobalSecondaryIndexUpdates":{"type":"list","member":{"type":"structure","members":{"Update":{"type":"structure","required":["IndexName","ProvisionedThroughput"],"members":{"IndexName":{},"ProvisionedThroughput":{"shape":"S1u"}}},"Create":{"type":"structure","required":["IndexName","KeySchema","Projection","ProvisionedThroughput"],"members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"ProvisionedThroughput":{"shape":"S1u"}}},"Delete":{"type":"structure","required":["IndexName"],"members":{"IndexName":{}}}}}},"StreamSpecification":{"shape":"S1w"}}},"output":{"type":"structure","members":{"TableDescription":{"shape":"S20"}}}},"UpdateTimeToLive":{"input":{"type":"structure","required":["TableName","TimeToLiveSpecification"],"members":{"TableName":{},"TimeToLiveSpecification":{"shape":"S4a"}}},"output":{"type":"structure","members":{"TimeToLiveSpecification":{"shape":"S4a"}}}}},"shapes":{"S2":{"type":"map","key":{},"value":{"type":"structure","required":["Keys"],"members":{"Keys":{"type":"list","member":{"shape":"S6"}},"AttributesToGet":{"shape":"Sj"},"ConsistentRead":{"type":"boolean"},"ProjectionExpression":{},"ExpressionAttributeNames":{"shape":"Sm"}}}},"S6":{"type":"map","key":{},"value":{"shape":"S8"}},"S8":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}},"M":{"type":"map","key":{},"value":{"shape":"S8"}},"L":{"type":"list","member":{"shape":"S8"}},"NULL":{"type":"boolean"},"BOOL":{"type":"boolean"}}},"Sj":{"type":"list","member":{}},"Sm":{"type":"map","key":{},"value":{}},"Sr":{"type":"list","member":{"shape":"Ss"}},"Ss":{"type":"map","key":{},"value":{"shape":"S8"}},"St":{"type":"list","member":{"shape":"Su"}},"Su":{"type":"structure","members":{"TableName":{},"CapacityUnits":{"type":"double"},"Table":{"shape":"Sw"},"LocalSecondaryIndexes":{"shape":"Sx"},"GlobalSecondaryIndexes":{"shape":"Sx"}}},"Sw":{"type":"structure","members":{"CapacityUnits":{"type":"double"}}},"Sx":{"type":"map","key":{},"value":{"shape":"Sw"}},"S10":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"PutRequest":{"type":"structure","required":["Item"],"members":{"Item":{"shape":"S14"}}},"DeleteRequest":{"type":"structure","required":["Key"],"members":{"Key":{"shape":"S6"}}}}}}},"S14":{"type":"map","key":{},"value":{"shape":"S8"}},"S1a":{"type":"structure","members":{"ItemCollectionKey":{"type":"map","key":{},"value":{"shape":"S8"}},"SizeEstimateRangeGB":{"type":"list","member":{"type":"double"}}}},"S1f":{"type":"list","member":{"type":"structure","required":["AttributeName","AttributeType"],"members":{"AttributeName":{},"AttributeType":{}}}},"S1j":{"type":"list","member":{"type":"structure","required":["AttributeName","KeyType"],"members":{"AttributeName":{},"KeyType":{}}}},"S1o":{"type":"structure","members":{"ProjectionType":{},"NonKeyAttributes":{"type":"list","member":{}}}},"S1u":{"type":"structure","required":["ReadCapacityUnits","WriteCapacityUnits"],"members":{"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S1w":{"type":"structure","members":{"StreamEnabled":{"type":"boolean"},"StreamViewType":{}}},"S20":{"type":"structure","members":{"AttributeDefinitions":{"shape":"S1f"},"TableName":{},"KeySchema":{"shape":"S1j"},"TableStatus":{},"CreationDateTime":{"type":"timestamp"},"ProvisionedThroughput":{"shape":"S23"},"TableSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"TableArn":{},"LocalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"IndexSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"IndexArn":{}}}},"GlobalSecondaryIndexes":{"type":"list","member":{"type":"structure","members":{"IndexName":{},"KeySchema":{"shape":"S1j"},"Projection":{"shape":"S1o"},"IndexStatus":{},"Backfilling":{"type":"boolean"},"ProvisionedThroughput":{"shape":"S23"},"IndexSizeBytes":{"type":"long"},"ItemCount":{"type":"long"},"IndexArn":{}}}},"StreamSpecification":{"shape":"S1w"},"LatestStreamLabel":{},"LatestStreamArn":{}}},"S23":{"type":"structure","members":{"LastIncreaseDateTime":{"type":"timestamp"},"LastDecreaseDateTime":{"type":"timestamp"},"NumberOfDecreasesToday":{"type":"long"},"ReadCapacityUnits":{"type":"long"},"WriteCapacityUnits":{"type":"long"}}},"S2e":{"type":"map","key":{},"value":{"type":"structure","members":{"Value":{"shape":"S8"},"Exists":{"type":"boolean"},"ComparisonOperator":{},"AttributeValueList":{"shape":"S2i"}}}},"S2i":{"type":"list","member":{"shape":"S8"}},"S2m":{"type":"map","key":{},"value":{"shape":"S8"}},"S3a":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S3k":{"type":"structure","required":["ComparisonOperator"],"members":{"AttributeValueList":{"shape":"S2i"},"ComparisonOperator":{}}},"S3l":{"type":"map","key":{},"value":{"shape":"S3k"}},"S4a":{"type":"structure","required":["Enabled","AttributeName"],"members":{"Enabled":{"type":"boolean"},"AttributeName":{}}}}}

/***/ }),
/* 201 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"BatchGetItem":{"input_token":"RequestItems","output_token":"UnprocessedKeys"},"ListTables":{"input_token":"ExclusiveStartTableName","limit_key":"Limit","output_token":"LastEvaluatedTableName","result_key":"TableNames"},"Query":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"},"Scan":{"input_token":"ExclusiveStartKey","limit_key":"Limit","output_token":"LastEvaluatedKey","result_key":"Items"}}}

/***/ }),
/* 202 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"TableExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ACTIVE","matcher":"path","state":"success","argument":"Table.TableStatus"},{"expected":"ResourceNotFoundException","matcher":"error","state":"retry"}]},"TableNotExists":{"delay":20,"operation":"DescribeTable","maxAttempts":25,"acceptors":[{"expected":"ResourceNotFoundException","matcher":"error","state":"success"}]}}}

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-15","endpointPrefix":"ec2","protocol":"ec2","serviceAbbreviation":"Amazon EC2","serviceFullName":"Amazon Elastic Compute Cloud","signatureVersion":"v4","uid":"ec2-2016-11-15","xmlNamespace":"http://ec2.amazonaws.com/doc/2016-11-15"},"operations":{"AcceptReservedInstancesExchangeQuote":{"input":{"type":"structure","required":["ReservedInstanceIds"],"members":{"DryRun":{"type":"boolean"},"ReservedInstanceIds":{"shape":"S3","locationName":"ReservedInstanceId"},"TargetConfigurations":{"shape":"S5","locationName":"TargetConfiguration"}}},"output":{"type":"structure","members":{"ExchangeId":{"locationName":"exchangeId"}}}},"AcceptVpcPeeringConnection":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"VpcPeeringConnection":{"shape":"Sb","locationName":"vpcPeeringConnection"}}}},"AllocateAddress":{"input":{"type":"structure","members":{"Domain":{},"Address":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"AllocationId":{"locationName":"allocationId"},"Domain":{"locationName":"domain"}}}},"AllocateHosts":{"input":{"type":"structure","required":["AvailabilityZone","InstanceType","Quantity"],"members":{"AutoPlacement":{"locationName":"autoPlacement"},"AvailabilityZone":{"locationName":"availabilityZone"},"ClientToken":{"locationName":"clientToken"},"InstanceType":{"locationName":"instanceType"},"Quantity":{"locationName":"quantity","type":"integer"}}},"output":{"type":"structure","members":{"HostIds":{"shape":"St","locationName":"hostIdSet"}}}},"AssignIpv6Addresses":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"Ipv6AddressCount":{"locationName":"ipv6AddressCount","type":"integer"},"Ipv6Addresses":{"shape":"Sv","locationName":"ipv6Addresses"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"output":{"type":"structure","members":{"AssignedIpv6Addresses":{"shape":"Sv","locationName":"assignedIpv6Addresses"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}}},"AssignPrivateIpAddresses":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"AllowReassignment":{"locationName":"allowReassignment","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddresses":{"shape":"Sy","locationName":"privateIpAddress"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"}}}},"AssociateAddress":{"input":{"type":"structure","members":{"AllocationId":{},"InstanceId":{},"PublicIp":{},"AllowReassociation":{"locationName":"allowReassociation","type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"}}}},"AssociateDhcpOptions":{"input":{"type":"structure","required":["DhcpOptionsId","VpcId"],"members":{"DhcpOptionsId":{},"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"AssociateIamInstanceProfile":{"input":{"type":"structure","required":["IamInstanceProfile","InstanceId"],"members":{"IamInstanceProfile":{"shape":"S13"},"InstanceId":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociation":{"shape":"S15","locationName":"iamInstanceProfileAssociation"}}}},"AssociateRouteTable":{"input":{"type":"structure","required":["RouteTableId","SubnetId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"},"SubnetId":{"locationName":"subnetId"}}},"output":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"}}}},"AssociateSubnetCidrBlock":{"input":{"type":"structure","required":["Ipv6CidrBlock","SubnetId"],"members":{"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"SubnetId":{"locationName":"subnetId"}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S1c","locationName":"ipv6CidrBlockAssociation"},"SubnetId":{"locationName":"subnetId"}}}},"AssociateVpcCidrBlock":{"input":{"type":"structure","required":["VpcId"],"members":{"AmazonProvidedIpv6CidrBlock":{"locationName":"amazonProvidedIpv6CidrBlock","type":"boolean"},"CidrBlock":{},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S1h","locationName":"ipv6CidrBlockAssociation"},"CidrBlockAssociation":{"shape":"S1k","locationName":"cidrBlockAssociation"},"VpcId":{"locationName":"vpcId"}}}},"AttachClassicLinkVpc":{"input":{"type":"structure","required":["Groups","InstanceId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Groups":{"shape":"S1m","locationName":"SecurityGroupId"},"InstanceId":{"locationName":"instanceId"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"AttachInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"},"VpcId":{"locationName":"vpcId"}}}},"AttachNetworkInterface":{"input":{"type":"structure","required":["DeviceIndex","InstanceId","NetworkInterfaceId"],"members":{"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"output":{"type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"}}}},"AttachVolume":{"input":{"type":"structure","required":["Device","InstanceId","VolumeId"],"members":{"Device":{},"InstanceId":{},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"shape":"S1s"}},"AttachVpnGateway":{"input":{"type":"structure","required":["VpcId","VpnGatewayId"],"members":{"VpcId":{},"VpnGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpcAttachment":{"shape":"S1w","locationName":"attachment"}}}},"AuthorizeSecurityGroupEgress":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupId":{"locationName":"groupId"},"IpPermissions":{"shape":"S1z","locationName":"ipPermissions"},"CidrIp":{"locationName":"cidrIp"},"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"ToPort":{"locationName":"toPort","type":"integer"},"SourceSecurityGroupName":{"locationName":"sourceSecurityGroupName"},"SourceSecurityGroupOwnerId":{"locationName":"sourceSecurityGroupOwnerId"}}}},"AuthorizeSecurityGroupIngress":{"input":{"type":"structure","members":{"CidrIp":{},"FromPort":{"type":"integer"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S1z"},"IpProtocol":{},"SourceSecurityGroupName":{},"SourceSecurityGroupOwnerId":{},"ToPort":{"type":"integer"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"BundleInstance":{"input":{"type":"structure","required":["InstanceId","Storage"],"members":{"InstanceId":{},"Storage":{"shape":"S2b"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BundleTask":{"shape":"S2f","locationName":"bundleInstanceTask"}}}},"CancelBundleTask":{"input":{"type":"structure","required":["BundleId"],"members":{"BundleId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BundleTask":{"shape":"S2f","locationName":"bundleInstanceTask"}}}},"CancelConversionTask":{"input":{"type":"structure","required":["ConversionTaskId"],"members":{"ConversionTaskId":{"locationName":"conversionTaskId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"ReasonMessage":{"locationName":"reasonMessage"}}}},"CancelExportTask":{"input":{"type":"structure","required":["ExportTaskId"],"members":{"ExportTaskId":{"locationName":"exportTaskId"}}}},"CancelImportTask":{"input":{"type":"structure","members":{"CancelReason":{},"DryRun":{"type":"boolean"},"ImportTaskId":{}}},"output":{"type":"structure","members":{"ImportTaskId":{"locationName":"importTaskId"},"PreviousState":{"locationName":"previousState"},"State":{"locationName":"state"}}}},"CancelReservedInstancesListing":{"input":{"type":"structure","required":["ReservedInstancesListingId"],"members":{"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S2q","locationName":"reservedInstancesListingsSet"}}}},"CancelSpotFleetRequests":{"input":{"type":"structure","required":["SpotFleetRequestIds","TerminateInstances"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestIds":{"shape":"S32","locationName":"spotFleetRequestId"},"TerminateInstances":{"locationName":"terminateInstances","type":"boolean"}}},"output":{"type":"structure","members":{"SuccessfulFleetRequests":{"locationName":"successfulFleetRequestSet","type":"list","member":{"locationName":"item","type":"structure","required":["CurrentSpotFleetRequestState","PreviousSpotFleetRequestState","SpotFleetRequestId"],"members":{"CurrentSpotFleetRequestState":{"locationName":"currentSpotFleetRequestState"},"PreviousSpotFleetRequestState":{"locationName":"previousSpotFleetRequestState"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}},"UnsuccessfulFleetRequests":{"locationName":"unsuccessfulFleetRequestSet","type":"list","member":{"locationName":"item","type":"structure","required":["Error","SpotFleetRequestId"],"members":{"Error":{"locationName":"error","type":"structure","required":["Code","Message"],"members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}}}}},"CancelSpotInstanceRequests":{"input":{"type":"structure","required":["SpotInstanceRequestIds"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotInstanceRequestIds":{"shape":"S3c","locationName":"SpotInstanceRequestId"}}},"output":{"type":"structure","members":{"CancelledSpotInstanceRequests":{"locationName":"spotInstanceRequestSet","type":"list","member":{"locationName":"item","type":"structure","members":{"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"State":{"locationName":"state"}}}}}}},"ConfirmProductInstance":{"input":{"type":"structure","required":["InstanceId","ProductCode"],"members":{"InstanceId":{},"ProductCode":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"OwnerId":{"locationName":"ownerId"},"Return":{"locationName":"return","type":"boolean"}}}},"CopyFpgaImage":{"input":{"type":"structure","required":["SourceFpgaImageId","SourceRegion"],"members":{"DryRun":{"type":"boolean"},"SourceFpgaImageId":{},"Description":{},"Name":{},"SourceRegion":{},"ClientToken":{}}},"output":{"type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"}}}},"CopyImage":{"input":{"type":"structure","required":["Name","SourceImageId","SourceRegion"],"members":{"ClientToken":{},"Description":{},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"Name":{},"SourceImageId":{},"SourceRegion":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}}},"CopySnapshot":{"input":{"type":"structure","required":["SourceRegion","SourceSnapshotId"],"members":{"Description":{},"DestinationRegion":{"locationName":"destinationRegion"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"PresignedUrl":{"locationName":"presignedUrl"},"SourceRegion":{},"SourceSnapshotId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"SnapshotId":{"locationName":"snapshotId"}}}},"CreateCustomerGateway":{"input":{"type":"structure","required":["BgpAsn","PublicIp","Type"],"members":{"BgpAsn":{"type":"integer"},"PublicIp":{"locationName":"IpAddress"},"Type":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"CustomerGateway":{"shape":"S3s","locationName":"customerGateway"}}}},"CreateDefaultSubnet":{"input":{"type":"structure","required":["AvailabilityZone"],"members":{"AvailabilityZone":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Subnet":{"shape":"S3v","locationName":"subnet"}}}},"CreateDefaultVpc":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Vpc":{"shape":"S40","locationName":"vpc"}}}},"CreateDhcpOptions":{"input":{"type":"structure","required":["DhcpConfigurations"],"members":{"DhcpConfigurations":{"locationName":"dhcpConfiguration","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Values":{"shape":"S32","locationName":"Value"}}}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"DhcpOptions":{"shape":"S49","locationName":"dhcpOptions"}}}},"CreateEgressOnlyInternetGateway":{"input":{"type":"structure","required":["VpcId"],"members":{"ClientToken":{},"DryRun":{"type":"boolean"},"VpcId":{}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"EgressOnlyInternetGateway":{"shape":"S4g","locationName":"egressOnlyInternetGateway"}}}},"CreateFlowLogs":{"input":{"type":"structure","required":["DeliverLogsPermissionArn","LogGroupName","ResourceIds","ResourceType","TrafficType"],"members":{"ClientToken":{},"DeliverLogsPermissionArn":{},"LogGroupName":{},"ResourceIds":{"shape":"S32","locationName":"ResourceId"},"ResourceType":{},"TrafficType":{}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"FlowLogIds":{"shape":"S32","locationName":"flowLogIdSet"},"Unsuccessful":{"shape":"S4o","locationName":"unsuccessful"}}}},"CreateFpgaImage":{"input":{"type":"structure","required":["InputStorageLocation"],"members":{"DryRun":{"type":"boolean"},"InputStorageLocation":{"shape":"S4s"},"LogsStorageLocation":{"shape":"S4s"},"Description":{},"Name":{},"ClientToken":{}}},"output":{"type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"},"FpgaImageGlobalId":{"locationName":"fpgaImageGlobalId"}}}},"CreateImage":{"input":{"type":"structure","required":["InstanceId","Name"],"members":{"BlockDeviceMappings":{"shape":"S4v","locationName":"blockDeviceMapping"},"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"Name":{"locationName":"name"},"NoReboot":{"locationName":"noReboot","type":"boolean"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}}},"CreateInstanceExportTask":{"input":{"type":"structure","required":["InstanceId"],"members":{"Description":{"locationName":"description"},"ExportToS3Task":{"locationName":"exportToS3","type":"structure","members":{"ContainerFormat":{"locationName":"containerFormat"},"DiskImageFormat":{"locationName":"diskImageFormat"},"S3Bucket":{"locationName":"s3Bucket"},"S3Prefix":{"locationName":"s3Prefix"}}},"InstanceId":{"locationName":"instanceId"},"TargetEnvironment":{"locationName":"targetEnvironment"}}},"output":{"type":"structure","members":{"ExportTask":{"shape":"S56","locationName":"exportTask"}}}},"CreateInternetGateway":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InternetGateway":{"shape":"S5c","locationName":"internetGateway"}}}},"CreateKeyPair":{"input":{"type":"structure","required":["KeyName"],"members":{"KeyName":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"KeyFingerprint":{"locationName":"keyFingerprint"},"KeyMaterial":{"locationName":"keyMaterial"},"KeyName":{"locationName":"keyName"}}}},"CreateNatGateway":{"input":{"type":"structure","required":["AllocationId","SubnetId"],"members":{"AllocationId":{},"ClientToken":{},"SubnetId":{}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"NatGateway":{"shape":"S5h","locationName":"natGateway"}}}},"CreateNetworkAcl":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"NetworkAcl":{"shape":"S5o","locationName":"networkAcl"}}}},"CreateNetworkAclEntry":{"input":{"type":"structure","required":["Egress","NetworkAclId","Protocol","RuleAction","RuleNumber"],"members":{"CidrBlock":{"locationName":"cidrBlock"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Egress":{"locationName":"egress","type":"boolean"},"IcmpTypeCode":{"shape":"S5t","locationName":"Icmp"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"NetworkAclId":{"locationName":"networkAclId"},"PortRange":{"shape":"S5u","locationName":"portRange"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"CreateNetworkInterface":{"input":{"type":"structure","required":["SubnetId"],"members":{"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Groups":{"shape":"S5y","locationName":"SecurityGroupId"},"Ipv6AddressCount":{"locationName":"ipv6AddressCount","type":"integer"},"Ipv6Addresses":{"shape":"S5z","locationName":"ipv6Addresses"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"shape":"S61","locationName":"privateIpAddresses"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"SubnetId":{"locationName":"subnetId"}}},"output":{"type":"structure","members":{"NetworkInterface":{"shape":"S64","locationName":"networkInterface"}}}},"CreateNetworkInterfacePermission":{"input":{"type":"structure","required":["NetworkInterfaceId","Permission"],"members":{"NetworkInterfaceId":{},"AwsAccountId":{},"AwsService":{},"Permission":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"InterfacePermission":{"shape":"S6i","locationName":"interfacePermission"}}}},"CreatePlacementGroup":{"input":{"type":"structure","required":["GroupName","Strategy"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{"locationName":"groupName"},"Strategy":{"locationName":"strategy"}}}},"CreateReservedInstancesListing":{"input":{"type":"structure","required":["ClientToken","InstanceCount","PriceSchedules","ReservedInstancesId"],"members":{"ClientToken":{"locationName":"clientToken"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"PriceSchedules":{"locationName":"priceSchedules","type":"list","member":{"locationName":"item","type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Price":{"locationName":"price","type":"double"},"Term":{"locationName":"term","type":"long"}}}},"ReservedInstancesId":{"locationName":"reservedInstancesId"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S2q","locationName":"reservedInstancesListingsSet"}}}},"CreateRoute":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"NatGatewayId":{"locationName":"natGatewayId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"RouteTableId":{"locationName":"routeTableId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"CreateRouteTable":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"RouteTable":{"shape":"S6v","locationName":"routeTable"}}}},"CreateSecurityGroup":{"input":{"type":"structure","required":["Description","GroupName"],"members":{"Description":{"locationName":"GroupDescription"},"GroupName":{},"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"GroupId":{"locationName":"groupId"}}}},"CreateSnapshot":{"input":{"type":"structure","required":["VolumeId"],"members":{"Description":{},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"shape":"S77"}},"CreateSpotDatafeedSubscription":{"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"locationName":"bucket"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Prefix":{"locationName":"prefix"}}},"output":{"type":"structure","members":{"SpotDatafeedSubscription":{"shape":"S7b","locationName":"spotDatafeedSubscription"}}}},"CreateSubnet":{"input":{"type":"structure","required":["CidrBlock","VpcId"],"members":{"AvailabilityZone":{},"CidrBlock":{},"Ipv6CidrBlock":{},"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Subnet":{"shape":"S3v","locationName":"subnet"}}}},"CreateTags":{"input":{"type":"structure","required":["Resources","Tags"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Resources":{"shape":"S7h","locationName":"ResourceId"},"Tags":{"shape":"Sl","locationName":"Tag"}}}},"CreateVolume":{"input":{"type":"structure","required":["AvailabilityZone"],"members":{"AvailabilityZone":{},"Encrypted":{"locationName":"encrypted","type":"boolean"},"Iops":{"type":"integer"},"KmsKeyId":{},"Size":{"type":"integer"},"SnapshotId":{},"VolumeType":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"TagSpecifications":{"shape":"S7j","locationName":"TagSpecification"}}},"output":{"shape":"S7m"}},"CreateVpc":{"input":{"type":"structure","required":["CidrBlock"],"members":{"CidrBlock":{},"AmazonProvidedIpv6CidrBlock":{"locationName":"amazonProvidedIpv6CidrBlock","type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceTenancy":{"locationName":"instanceTenancy"}}},"output":{"type":"structure","members":{"Vpc":{"shape":"S40","locationName":"vpc"}}}},"CreateVpcEndpoint":{"input":{"type":"structure","required":["VpcId","ServiceName"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointType":{},"VpcId":{},"ServiceName":{},"PolicyDocument":{},"RouteTableIds":{"shape":"S32","locationName":"RouteTableId"},"SubnetIds":{"shape":"S32","locationName":"SubnetId"},"SecurityGroupIds":{"shape":"S32","locationName":"SecurityGroupId"},"ClientToken":{},"PrivateDnsEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"VpcEndpoint":{"shape":"S7u","locationName":"vpcEndpoint"},"ClientToken":{"locationName":"clientToken"}}}},"CreateVpcPeeringConnection":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PeerOwnerId":{"locationName":"peerOwnerId"},"PeerVpcId":{"locationName":"peerVpcId"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"VpcPeeringConnection":{"shape":"Sb","locationName":"vpcPeeringConnection"}}}},"CreateVpnConnection":{"input":{"type":"structure","required":["CustomerGatewayId","Type","VpnGatewayId"],"members":{"CustomerGatewayId":{},"Type":{},"VpnGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"Options":{"locationName":"options","type":"structure","members":{"StaticRoutesOnly":{"locationName":"staticRoutesOnly","type":"boolean"},"TunnelOptions":{"type":"list","member":{"locationName":"item","type":"structure","members":{"TunnelInsideCidr":{},"PreSharedKey":{}}}}}}}},"output":{"type":"structure","members":{"VpnConnection":{"shape":"S87","locationName":"vpnConnection"}}}},"CreateVpnConnectionRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","VpnConnectionId"],"members":{"DestinationCidrBlock":{},"VpnConnectionId":{}}}},"CreateVpnGateway":{"input":{"type":"structure","required":["Type"],"members":{"AvailabilityZone":{},"Type":{},"AmazonSideAsn":{"type":"long"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpnGateway":{"shape":"S8j","locationName":"vpnGateway"}}}},"DeleteCustomerGateway":{"input":{"type":"structure","required":["CustomerGatewayId"],"members":{"CustomerGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteDhcpOptions":{"input":{"type":"structure","required":["DhcpOptionsId"],"members":{"DhcpOptionsId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteEgressOnlyInternetGateway":{"input":{"type":"structure","required":["EgressOnlyInternetGatewayId"],"members":{"DryRun":{"type":"boolean"},"EgressOnlyInternetGatewayId":{}}},"output":{"type":"structure","members":{"ReturnCode":{"locationName":"returnCode","type":"boolean"}}}},"DeleteFlowLogs":{"input":{"type":"structure","required":["FlowLogIds"],"members":{"FlowLogIds":{"shape":"S32","locationName":"FlowLogId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S4o","locationName":"unsuccessful"}}}},"DeleteFpgaImage":{"input":{"type":"structure","required":["FpgaImageId"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DeleteInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"}}}},"DeleteKeyPair":{"input":{"type":"structure","required":["KeyName"],"members":{"KeyName":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteNatGateway":{"input":{"type":"structure","required":["NatGatewayId"],"members":{"NatGatewayId":{}}},"output":{"type":"structure","members":{"NatGatewayId":{"locationName":"natGatewayId"}}}},"DeleteNetworkAcl":{"input":{"type":"structure","required":["NetworkAclId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"}}}},"DeleteNetworkAclEntry":{"input":{"type":"structure","required":["Egress","NetworkAclId","RuleNumber"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Egress":{"locationName":"egress","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"DeleteNetworkInterface":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}}},"DeleteNetworkInterfacePermission":{"input":{"type":"structure","required":["NetworkInterfacePermissionId"],"members":{"NetworkInterfacePermissionId":{},"Force":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DeletePlacementGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupName":{"locationName":"groupName"}}}},"DeleteRoute":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"}}}},"DeleteRouteTable":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"}}}},"DeleteSecurityGroup":{"input":{"type":"structure","members":{"GroupId":{},"GroupName":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteSnapshot":{"input":{"type":"structure","required":["SnapshotId"],"members":{"SnapshotId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteSpotDatafeedSubscription":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteSubnet":{"input":{"type":"structure","required":["SubnetId"],"members":{"SubnetId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteTags":{"input":{"type":"structure","required":["Resources"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Resources":{"shape":"S7h","locationName":"resourceId"},"Tags":{"shape":"Sl","locationName":"tag"}}}},"DeleteVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteVpc":{"input":{"type":"structure","required":["VpcId"],"members":{"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteVpcEndpoints":{"input":{"type":"structure","required":["VpcEndpointIds"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointIds":{"shape":"S32","locationName":"VpcEndpointId"}}},"output":{"type":"structure","members":{"Unsuccessful":{"shape":"S4o","locationName":"unsuccessful"}}}},"DeleteVpcPeeringConnection":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DeleteVpnConnection":{"input":{"type":"structure","required":["VpnConnectionId"],"members":{"VpnConnectionId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeleteVpnConnectionRoute":{"input":{"type":"structure","required":["DestinationCidrBlock","VpnConnectionId"],"members":{"DestinationCidrBlock":{},"VpnConnectionId":{}}}},"DeleteVpnGateway":{"input":{"type":"structure","required":["VpnGatewayId"],"members":{"VpnGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DeregisterImage":{"input":{"type":"structure","required":["ImageId"],"members":{"ImageId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{"AttributeNames":{"locationName":"attributeName","type":"list","member":{"locationName":"attributeName"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"AccountAttributes":{"locationName":"accountAttributeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AttributeName":{"locationName":"attributeName"},"AttributeValues":{"locationName":"attributeValueSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AttributeValue":{"locationName":"attributeValue"}}}}}}}}}},"DescribeAddresses":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"PublicIps":{"locationName":"PublicIp","type":"list","member":{"locationName":"PublicIp"}},"AllocationIds":{"locationName":"AllocationId","type":"list","member":{"locationName":"AllocationId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Addresses":{"locationName":"addressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"PublicIp":{"locationName":"publicIp"},"AllocationId":{"locationName":"allocationId"},"AssociationId":{"locationName":"associationId"},"Domain":{"locationName":"domain"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"NetworkInterfaceOwnerId":{"locationName":"networkInterfaceOwnerId"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}}}}},"DescribeAvailabilityZones":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"ZoneNames":{"locationName":"ZoneName","type":"list","member":{"locationName":"ZoneName"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"AvailabilityZones":{"locationName":"availabilityZoneInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"State":{"locationName":"zoneState"},"Messages":{"locationName":"messageSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Message":{"locationName":"message"}}}},"RegionName":{"locationName":"regionName"},"ZoneName":{"locationName":"zoneName"}}}}}}},"DescribeBundleTasks":{"input":{"type":"structure","members":{"BundleIds":{"locationName":"BundleId","type":"list","member":{"locationName":"BundleId"}},"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BundleTasks":{"locationName":"bundleInstanceTasksSet","type":"list","member":{"shape":"S2f","locationName":"item"}}}}},"DescribeClassicLinkInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Instances":{"locationName":"instancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Groups":{"shape":"S67","locationName":"groupSet"},"InstanceId":{"locationName":"instanceId"},"Tags":{"shape":"Sl","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeConversionTasks":{"input":{"type":"structure","members":{"ConversionTaskIds":{"locationName":"conversionTaskId","type":"list","member":{"locationName":"item"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"ConversionTasks":{"locationName":"conversionTasks","type":"list","member":{"shape":"Sal","locationName":"item"}}}}},"DescribeCustomerGateways":{"input":{"type":"structure","members":{"CustomerGatewayIds":{"locationName":"CustomerGatewayId","type":"list","member":{"locationName":"CustomerGatewayId"}},"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"CustomerGateways":{"locationName":"customerGatewaySet","type":"list","member":{"shape":"S3s","locationName":"item"}}}}},"DescribeDhcpOptions":{"input":{"type":"structure","members":{"DhcpOptionsIds":{"locationName":"DhcpOptionsId","type":"list","member":{"locationName":"DhcpOptionsId"}},"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"DhcpOptions":{"locationName":"dhcpOptionsSet","type":"list","member":{"shape":"S49","locationName":"item"}}}}},"DescribeEgressOnlyInternetGateways":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"EgressOnlyInternetGatewayIds":{"locationName":"EgressOnlyInternetGatewayId","type":"list","member":{"locationName":"item"}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"EgressOnlyInternetGateways":{"locationName":"egressOnlyInternetGatewaySet","type":"list","member":{"shape":"S4g","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeElasticGpus":{"input":{"type":"structure","members":{"ElasticGpuIds":{"locationName":"ElasticGpuId","type":"list","member":{"locationName":"item"}},"DryRun":{"type":"boolean"},"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ElasticGpuSet":{"locationName":"elasticGpuSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ElasticGpuId":{"locationName":"elasticGpuId"},"AvailabilityZone":{"locationName":"availabilityZone"},"ElasticGpuType":{"locationName":"elasticGpuType"},"ElasticGpuHealth":{"locationName":"elasticGpuHealth","type":"structure","members":{"Status":{"locationName":"status"}}},"ElasticGpuState":{"locationName":"elasticGpuState"},"InstanceId":{"locationName":"instanceId"}}}},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}}},"DescribeExportTasks":{"input":{"type":"structure","members":{"ExportTaskIds":{"locationName":"exportTaskId","type":"list","member":{"locationName":"ExportTaskId"}}}},"output":{"type":"structure","members":{"ExportTasks":{"locationName":"exportTaskSet","type":"list","member":{"shape":"S56","locationName":"item"}}}}},"DescribeFlowLogs":{"input":{"type":"structure","members":{"Filter":{"shape":"S9t"},"FlowLogIds":{"shape":"S32","locationName":"FlowLogId"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FlowLogs":{"locationName":"flowLogSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CreationTime":{"locationName":"creationTime","type":"timestamp"},"DeliverLogsErrorMessage":{"locationName":"deliverLogsErrorMessage"},"DeliverLogsPermissionArn":{"locationName":"deliverLogsPermissionArn"},"DeliverLogsStatus":{"locationName":"deliverLogsStatus"},"FlowLogId":{"locationName":"flowLogId"},"FlowLogStatus":{"locationName":"flowLogStatus"},"LogGroupName":{"locationName":"logGroupName"},"ResourceId":{"locationName":"resourceId"},"TrafficType":{"locationName":"trafficType"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeFpgaImageAttribute":{"input":{"type":"structure","required":["FpgaImageId","Attribute"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{},"Attribute":{}}},"output":{"type":"structure","members":{"FpgaImageAttribute":{"shape":"Sbp","locationName":"fpgaImageAttribute"}}}},"DescribeFpgaImages":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"FpgaImageIds":{"locationName":"FpgaImageId","type":"list","member":{"locationName":"item"}},"Owners":{"shape":"Sby","locationName":"Owner"},"Filters":{"shape":"S9t","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FpgaImages":{"locationName":"fpgaImageSet","type":"list","member":{"locationName":"item","type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"},"FpgaImageGlobalId":{"locationName":"fpgaImageGlobalId"},"Name":{"locationName":"name"},"Description":{"locationName":"description"},"ShellVersion":{"locationName":"shellVersion"},"PciId":{"locationName":"pciId","type":"structure","members":{"DeviceId":{},"VendorId":{},"SubsystemId":{},"SubsystemVendorId":{}}},"State":{"locationName":"state","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"CreateTime":{"locationName":"createTime","type":"timestamp"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"},"OwnerId":{"locationName":"ownerId"},"OwnerAlias":{"locationName":"ownerAlias"},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"},"Tags":{"shape":"Sl","locationName":"tags"},"Public":{"locationName":"public","type":"boolean"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeHostReservationOfferings":{"input":{"type":"structure","members":{"Filter":{"shape":"S9t"},"MaxDuration":{"type":"integer"},"MaxResults":{"type":"integer"},"MinDuration":{"type":"integer"},"NextToken":{},"OfferingId":{}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"OfferingSet":{"locationName":"offeringSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Duration":{"locationName":"duration","type":"integer"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceFamily":{"locationName":"instanceFamily"},"OfferingId":{"locationName":"offeringId"},"PaymentOption":{"locationName":"paymentOption"},"UpfrontPrice":{"locationName":"upfrontPrice"}}}}}}},"DescribeHostReservations":{"input":{"type":"structure","members":{"Filter":{"shape":"S9t"},"HostReservationIdSet":{"type":"list","member":{"locationName":"item"}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"HostReservationSet":{"locationName":"hostReservationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Count":{"locationName":"count","type":"integer"},"CurrencyCode":{"locationName":"currencyCode"},"Duration":{"locationName":"duration","type":"integer"},"End":{"locationName":"end","type":"timestamp"},"HostIdSet":{"shape":"Sch","locationName":"hostIdSet"},"HostReservationId":{"locationName":"hostReservationId"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceFamily":{"locationName":"instanceFamily"},"OfferingId":{"locationName":"offeringId"},"PaymentOption":{"locationName":"paymentOption"},"Start":{"locationName":"start","type":"timestamp"},"State":{"locationName":"state"},"UpfrontPrice":{"locationName":"upfrontPrice"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeHosts":{"input":{"type":"structure","members":{"Filter":{"shape":"S9t","locationName":"filter"},"HostIds":{"shape":"Sck","locationName":"hostId"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Hosts":{"locationName":"hostSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AutoPlacement":{"locationName":"autoPlacement"},"AvailabilityZone":{"locationName":"availabilityZone"},"AvailableCapacity":{"locationName":"availableCapacity","type":"structure","members":{"AvailableInstanceCapacity":{"locationName":"availableInstanceCapacity","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailableCapacity":{"locationName":"availableCapacity","type":"integer"},"InstanceType":{"locationName":"instanceType"},"TotalCapacity":{"locationName":"totalCapacity","type":"integer"}}}},"AvailableVCpus":{"locationName":"availableVCpus","type":"integer"}}},"ClientToken":{"locationName":"clientToken"},"HostId":{"locationName":"hostId"},"HostProperties":{"locationName":"hostProperties","type":"structure","members":{"Cores":{"locationName":"cores","type":"integer"},"InstanceType":{"locationName":"instanceType"},"Sockets":{"locationName":"sockets","type":"integer"},"TotalVCpus":{"locationName":"totalVCpus","type":"integer"}}},"HostReservationId":{"locationName":"hostReservationId"},"Instances":{"locationName":"instances","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"InstanceType":{"locationName":"instanceType"}}}},"State":{"locationName":"state"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeIamInstanceProfileAssociations":{"input":{"type":"structure","members":{"AssociationIds":{"locationName":"AssociationId","type":"list","member":{"locationName":"AssociationId"}},"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociations":{"locationName":"iamInstanceProfileAssociationSet","type":"list","member":{"shape":"S15","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeIdFormat":{"input":{"type":"structure","members":{"Resource":{}}},"output":{"type":"structure","members":{"Statuses":{"shape":"Sd1","locationName":"statusSet"}}}},"DescribeIdentityIdFormat":{"input":{"type":"structure","required":["PrincipalArn"],"members":{"PrincipalArn":{"locationName":"principalArn"},"Resource":{"locationName":"resource"}}},"output":{"type":"structure","members":{"Statuses":{"shape":"Sd1","locationName":"statusSet"}}}},"DescribeImageAttribute":{"input":{"type":"structure","required":["Attribute","ImageId"],"members":{"Attribute":{},"ImageId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"BlockDeviceMappings":{"shape":"Sd8","locationName":"blockDeviceMapping"},"ImageId":{"locationName":"imageId"},"LaunchPermissions":{"shape":"Sd9","locationName":"launchPermission"},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"},"Description":{"shape":"S4d","locationName":"description"},"KernelId":{"shape":"S4d","locationName":"kernel"},"RamdiskId":{"shape":"S4d","locationName":"ramdisk"},"SriovNetSupport":{"shape":"S4d","locationName":"sriovNetSupport"}}}},"DescribeImages":{"input":{"type":"structure","members":{"ExecutableUsers":{"locationName":"ExecutableBy","type":"list","member":{"locationName":"ExecutableBy"}},"Filters":{"shape":"S9t","locationName":"Filter"},"ImageIds":{"locationName":"ImageId","type":"list","member":{"locationName":"ImageId"}},"Owners":{"shape":"Sby","locationName":"Owner"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Images":{"locationName":"imagesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Architecture":{"locationName":"architecture"},"CreationDate":{"locationName":"creationDate"},"ImageId":{"locationName":"imageId"},"ImageLocation":{"locationName":"imageLocation"},"ImageType":{"locationName":"imageType"},"Public":{"locationName":"isPublic","type":"boolean"},"KernelId":{"locationName":"kernelId"},"OwnerId":{"locationName":"imageOwnerId"},"Platform":{"locationName":"platform"},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"},"RamdiskId":{"locationName":"ramdiskId"},"State":{"locationName":"imageState"},"BlockDeviceMappings":{"shape":"Sd8","locationName":"blockDeviceMapping"},"Description":{"locationName":"description"},"EnaSupport":{"locationName":"enaSupport","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"ImageOwnerAlias":{"locationName":"imageOwnerAlias"},"Name":{"locationName":"name"},"RootDeviceName":{"locationName":"rootDeviceName"},"RootDeviceType":{"locationName":"rootDeviceType"},"SriovNetSupport":{"locationName":"sriovNetSupport"},"StateReason":{"shape":"Sdm","locationName":"stateReason"},"Tags":{"shape":"Sl","locationName":"tagSet"},"VirtualizationType":{"locationName":"virtualizationType"}}}}}}},"DescribeImportImageTasks":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"S9t"},"ImportTaskIds":{"shape":"Sdp","locationName":"ImportTaskId"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ImportImageTasks":{"locationName":"importImageTaskSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Architecture":{"locationName":"architecture"},"Description":{"locationName":"description"},"Hypervisor":{"locationName":"hypervisor"},"ImageId":{"locationName":"imageId"},"ImportTaskId":{"locationName":"importTaskId"},"LicenseType":{"locationName":"licenseType"},"Platform":{"locationName":"platform"},"Progress":{"locationName":"progress"},"SnapshotDetails":{"shape":"Sdt","locationName":"snapshotDetailSet"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeImportSnapshotTasks":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"S9t"},"ImportTaskIds":{"shape":"Sdp","locationName":"ImportTaskId"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ImportSnapshotTasks":{"locationName":"importSnapshotTaskSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"ImportTaskId":{"locationName":"importTaskId"},"SnapshotTaskDetail":{"shape":"Se0","locationName":"snapshotTaskDetail"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstanceAttribute":{"input":{"type":"structure","required":["Attribute","InstanceId"],"members":{"Attribute":{"locationName":"attribute"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"}}},"output":{"type":"structure","members":{"Groups":{"shape":"S67","locationName":"groupSet"},"BlockDeviceMappings":{"shape":"Se4","locationName":"blockDeviceMapping"},"DisableApiTermination":{"shape":"Se7","locationName":"disableApiTermination"},"EnaSupport":{"shape":"Se7","locationName":"enaSupport"},"EbsOptimized":{"shape":"Se7","locationName":"ebsOptimized"},"InstanceId":{"locationName":"instanceId"},"InstanceInitiatedShutdownBehavior":{"shape":"S4d","locationName":"instanceInitiatedShutdownBehavior"},"InstanceType":{"shape":"S4d","locationName":"instanceType"},"KernelId":{"shape":"S4d","locationName":"kernel"},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"},"RamdiskId":{"shape":"S4d","locationName":"ramdisk"},"RootDeviceName":{"shape":"S4d","locationName":"rootDeviceName"},"SourceDestCheck":{"shape":"Se7","locationName":"sourceDestCheck"},"SriovNetSupport":{"shape":"S4d","locationName":"sriovNetSupport"},"UserData":{"shape":"S4d","locationName":"userData"}}}},"DescribeInstanceStatus":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"MaxResults":{"type":"integer"},"NextToken":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"IncludeAllInstances":{"locationName":"includeAllInstances","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceStatuses":{"locationName":"instanceStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Events":{"locationName":"eventsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Code":{"locationName":"code"},"Description":{"locationName":"description"},"NotAfter":{"locationName":"notAfter","type":"timestamp"},"NotBefore":{"locationName":"notBefore","type":"timestamp"}}}},"InstanceId":{"locationName":"instanceId"},"InstanceState":{"shape":"Sef","locationName":"instanceState"},"InstanceStatus":{"shape":"Seh","locationName":"instanceStatus"},"SystemStatus":{"shape":"Seh","locationName":"systemStatus"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Reservations":{"locationName":"reservationSet","type":"list","member":{"shape":"Seq","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeInternetGateways":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayIds":{"shape":"S32","locationName":"internetGatewayId"}}},"output":{"type":"structure","members":{"InternetGateways":{"locationName":"internetGatewaySet","type":"list","member":{"shape":"S5c","locationName":"item"}}}}},"DescribeKeyPairs":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"KeyNames":{"locationName":"KeyName","type":"list","member":{"locationName":"KeyName"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"KeyPairs":{"locationName":"keySet","type":"list","member":{"locationName":"item","type":"structure","members":{"KeyFingerprint":{"locationName":"keyFingerprint"},"KeyName":{"locationName":"keyName"}}}}}}},"DescribeMovingAddresses":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"PublicIps":{"shape":"S32","locationName":"publicIp"}}},"output":{"type":"structure","members":{"MovingAddressStatuses":{"locationName":"movingAddressStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"MoveStatus":{"locationName":"moveStatus"},"PublicIp":{"locationName":"publicIp"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNatGateways":{"input":{"type":"structure","members":{"Filter":{"shape":"S9t"},"MaxResults":{"type":"integer"},"NatGatewayIds":{"shape":"S32","locationName":"NatGatewayId"},"NextToken":{}}},"output":{"type":"structure","members":{"NatGateways":{"locationName":"natGatewaySet","type":"list","member":{"shape":"S5h","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNetworkAcls":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclIds":{"shape":"S32","locationName":"NetworkAclId"}}},"output":{"type":"structure","members":{"NetworkAcls":{"locationName":"networkAclSet","type":"list","member":{"shape":"S5o","locationName":"item"}}}}},"DescribeNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"Attribute":{"locationName":"attribute"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"output":{"type":"structure","members":{"Attachment":{"shape":"S66","locationName":"attachment"},"Description":{"shape":"S4d","locationName":"description"},"Groups":{"shape":"S67","locationName":"groupSet"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SourceDestCheck":{"shape":"Se7","locationName":"sourceDestCheck"}}}},"DescribeNetworkInterfacePermissions":{"input":{"type":"structure","members":{"NetworkInterfacePermissionIds":{"locationName":"NetworkInterfacePermissionId","type":"list","member":{}},"Filters":{"shape":"S9t","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NetworkInterfacePermissions":{"locationName":"networkInterfacePermissions","type":"list","member":{"shape":"S6i","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeNetworkInterfaces":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceIds":{"locationName":"NetworkInterfaceId","type":"list","member":{"locationName":"item"}}}},"output":{"type":"structure","members":{"NetworkInterfaces":{"locationName":"networkInterfaceSet","type":"list","member":{"shape":"S64","locationName":"item"}}}}},"DescribePlacementGroups":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupNames":{"locationName":"groupName","type":"list","member":{}}}},"output":{"type":"structure","members":{"PlacementGroups":{"locationName":"placementGroupSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GroupName":{"locationName":"groupName"},"State":{"locationName":"state"},"Strategy":{"locationName":"strategy"}}}}}}},"DescribePrefixLists":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"PrefixListIds":{"shape":"S32","locationName":"PrefixListId"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"PrefixLists":{"locationName":"prefixListSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Cidrs":{"shape":"S32","locationName":"cidrSet"},"PrefixListId":{"locationName":"prefixListId"},"PrefixListName":{"locationName":"prefixListName"}}}}}}},"DescribeRegions":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"RegionNames":{"locationName":"RegionName","type":"list","member":{"locationName":"RegionName"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Regions":{"locationName":"regionInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"Endpoint":{"locationName":"regionEndpoint"},"RegionName":{"locationName":"regionName"}}}}}}},"DescribeReservedInstances":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"OfferingClass":{},"ReservedInstancesIds":{"shape":"Sgh","locationName":"ReservedInstancesId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"OfferingType":{"locationName":"offeringType"}}},"output":{"type":"structure","members":{"ReservedInstances":{"locationName":"reservedInstancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Duration":{"locationName":"duration","type":"long"},"End":{"locationName":"end","type":"timestamp"},"FixedPrice":{"locationName":"fixedPrice","type":"float"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"InstanceType":{"locationName":"instanceType"},"ProductDescription":{"locationName":"productDescription"},"ReservedInstancesId":{"locationName":"reservedInstancesId"},"Start":{"locationName":"start","type":"timestamp"},"State":{"locationName":"state"},"UsagePrice":{"locationName":"usagePrice","type":"float"},"CurrencyCode":{"locationName":"currencyCode"},"InstanceTenancy":{"locationName":"instanceTenancy"},"OfferingClass":{"locationName":"offeringClass"},"OfferingType":{"locationName":"offeringType"},"RecurringCharges":{"shape":"Sgp","locationName":"recurringCharges"},"Scope":{"locationName":"scope"},"Tags":{"shape":"Sl","locationName":"tagSet"}}}}}}},"DescribeReservedInstancesListings":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"ReservedInstancesId":{"locationName":"reservedInstancesId"},"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"}}},"output":{"type":"structure","members":{"ReservedInstancesListings":{"shape":"S2q","locationName":"reservedInstancesListingsSet"}}}},"DescribeReservedInstancesModifications":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"ReservedInstancesModificationIds":{"locationName":"ReservedInstancesModificationId","type":"list","member":{"locationName":"ReservedInstancesModificationId"}},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ReservedInstancesModifications":{"locationName":"reservedInstancesModificationsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"EffectiveDate":{"locationName":"effectiveDate","type":"timestamp"},"ModificationResults":{"locationName":"modificationResultSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"},"TargetConfiguration":{"shape":"Sh2","locationName":"targetConfiguration"}}}},"ReservedInstancesIds":{"locationName":"reservedInstancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"}}}},"ReservedInstancesModificationId":{"locationName":"reservedInstancesModificationId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"UpdateDate":{"locationName":"updateDate","type":"timestamp"}}}}}}},"DescribeReservedInstancesOfferings":{"input":{"type":"structure","members":{"AvailabilityZone":{},"Filters":{"shape":"S9t","locationName":"Filter"},"IncludeMarketplace":{"type":"boolean"},"InstanceType":{},"MaxDuration":{"type":"long"},"MaxInstanceCount":{"type":"integer"},"MinDuration":{"type":"long"},"OfferingClass":{},"ProductDescription":{},"ReservedInstancesOfferingIds":{"locationName":"ReservedInstancesOfferingId","type":"list","member":{}},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceTenancy":{"locationName":"instanceTenancy"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"OfferingType":{"locationName":"offeringType"}}},"output":{"type":"structure","members":{"ReservedInstancesOfferings":{"locationName":"reservedInstancesOfferingsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Duration":{"locationName":"duration","type":"long"},"FixedPrice":{"locationName":"fixedPrice","type":"float"},"InstanceType":{"locationName":"instanceType"},"ProductDescription":{"locationName":"productDescription"},"ReservedInstancesOfferingId":{"locationName":"reservedInstancesOfferingId"},"UsagePrice":{"locationName":"usagePrice","type":"float"},"CurrencyCode":{"locationName":"currencyCode"},"InstanceTenancy":{"locationName":"instanceTenancy"},"Marketplace":{"locationName":"marketplace","type":"boolean"},"OfferingClass":{"locationName":"offeringClass"},"OfferingType":{"locationName":"offeringType"},"PricingDetails":{"locationName":"pricingDetailsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Count":{"locationName":"count","type":"integer"},"Price":{"locationName":"price","type":"double"}}}},"RecurringCharges":{"shape":"Sgp","locationName":"recurringCharges"},"Scope":{"locationName":"scope"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeRouteTables":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableIds":{"shape":"S32","locationName":"RouteTableId"}}},"output":{"type":"structure","members":{"RouteTables":{"locationName":"routeTableSet","type":"list","member":{"shape":"S6v","locationName":"item"}}}}},"DescribeScheduledInstanceAvailability":{"input":{"type":"structure","required":["FirstSlotStartTimeRange","Recurrence"],"members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"S9t","locationName":"Filter"},"FirstSlotStartTimeRange":{"type":"structure","required":["EarliestTime","LatestTime"],"members":{"EarliestTime":{"type":"timestamp"},"LatestTime":{"type":"timestamp"}}},"MaxResults":{"type":"integer"},"MaxSlotDurationInHours":{"type":"integer"},"MinSlotDurationInHours":{"type":"integer"},"NextToken":{},"Recurrence":{"type":"structure","members":{"Frequency":{},"Interval":{"type":"integer"},"OccurrenceDays":{"locationName":"OccurrenceDay","type":"list","member":{"locationName":"OccurenceDay","type":"integer"}},"OccurrenceRelativeToEnd":{"type":"boolean"},"OccurrenceUnit":{}}}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ScheduledInstanceAvailabilitySet":{"locationName":"scheduledInstanceAvailabilitySet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"AvailableInstanceCount":{"locationName":"availableInstanceCount","type":"integer"},"FirstSlotStartTime":{"locationName":"firstSlotStartTime","type":"timestamp"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceType":{"locationName":"instanceType"},"MaxTermDurationInDays":{"locationName":"maxTermDurationInDays","type":"integer"},"MinTermDurationInDays":{"locationName":"minTermDurationInDays","type":"integer"},"NetworkPlatform":{"locationName":"networkPlatform"},"Platform":{"locationName":"platform"},"PurchaseToken":{"locationName":"purchaseToken"},"Recurrence":{"shape":"Shm","locationName":"recurrence"},"SlotDurationInHours":{"locationName":"slotDurationInHours","type":"integer"},"TotalScheduledInstanceHours":{"locationName":"totalScheduledInstanceHours","type":"integer"}}}}}}},"DescribeScheduledInstances":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"ScheduledInstanceIds":{"locationName":"ScheduledInstanceId","type":"list","member":{"locationName":"ScheduledInstanceId"}},"SlotStartTimeRange":{"type":"structure","members":{"EarliestTime":{"type":"timestamp"},"LatestTime":{"type":"timestamp"}}}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"ScheduledInstanceSet":{"locationName":"scheduledInstanceSet","type":"list","member":{"shape":"Sht","locationName":"item"}}}}},"DescribeSecurityGroupReferences":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"type":"boolean"},"GroupId":{"type":"list","member":{"locationName":"item"}}}},"output":{"type":"structure","members":{"SecurityGroupReferenceSet":{"locationName":"securityGroupReferenceSet","type":"list","member":{"locationName":"item","type":"structure","required":["GroupId","ReferencingVpcId"],"members":{"GroupId":{"locationName":"groupId"},"ReferencingVpcId":{"locationName":"referencingVpcId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}}}}}},"DescribeSecurityGroups":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"GroupIds":{"shape":"S1m","locationName":"GroupId"},"GroupNames":{"shape":"Si0","locationName":"GroupName"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"SecurityGroups":{"locationName":"securityGroupInfo","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"groupDescription"},"GroupName":{"locationName":"groupName"},"IpPermissions":{"shape":"S1z","locationName":"ipPermissions"},"OwnerId":{"locationName":"ownerId"},"GroupId":{"locationName":"groupId"},"IpPermissionsEgress":{"shape":"S1z","locationName":"ipPermissionsEgress"},"Tags":{"shape":"Sl","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeSnapshotAttribute":{"input":{"type":"structure","required":["Attribute","SnapshotId"],"members":{"Attribute":{},"SnapshotId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"CreateVolumePermissions":{"shape":"Si7","locationName":"createVolumePermission"},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"},"SnapshotId":{"locationName":"snapshotId"}}}},"DescribeSnapshots":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"OwnerIds":{"shape":"Sby","locationName":"Owner"},"RestorableByUserIds":{"locationName":"RestorableBy","type":"list","member":{}},"SnapshotIds":{"locationName":"SnapshotId","type":"list","member":{"locationName":"SnapshotId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Snapshots":{"locationName":"snapshotSet","type":"list","member":{"shape":"S77","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeSpotDatafeedSubscription":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"SpotDatafeedSubscription":{"shape":"S7b","locationName":"spotDatafeedSubscription"}}}},"DescribeSpotFleetInstances":{"input":{"type":"structure","required":["SpotFleetRequestId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}},"output":{"type":"structure","required":["ActiveInstances","SpotFleetRequestId"],"members":{"ActiveInstances":{"locationName":"activeInstanceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"InstanceType":{"locationName":"instanceType"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"InstanceHealth":{"locationName":"instanceHealth"}}}},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}},"DescribeSpotFleetRequestHistory":{"input":{"type":"structure","required":["SpotFleetRequestId","StartTime"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"EventType":{"locationName":"eventType"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"StartTime":{"locationName":"startTime","type":"timestamp"}}},"output":{"type":"structure","required":["HistoryRecords","LastEvaluatedTime","SpotFleetRequestId","StartTime"],"members":{"HistoryRecords":{"locationName":"historyRecordSet","type":"list","member":{"locationName":"item","type":"structure","required":["EventInformation","EventType","Timestamp"],"members":{"EventInformation":{"locationName":"eventInformation","type":"structure","members":{"EventDescription":{"locationName":"eventDescription"},"EventSubType":{"locationName":"eventSubType"},"InstanceId":{"locationName":"instanceId"}}},"EventType":{"locationName":"eventType"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}},"LastEvaluatedTime":{"locationName":"lastEvaluatedTime","type":"timestamp"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"StartTime":{"locationName":"startTime","type":"timestamp"}}}},"DescribeSpotFleetRequests":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"SpotFleetRequestIds":{"shape":"S32","locationName":"spotFleetRequestId"}}},"output":{"type":"structure","required":["SpotFleetRequestConfigs"],"members":{"NextToken":{"locationName":"nextToken"},"SpotFleetRequestConfigs":{"locationName":"spotFleetRequestConfigSet","type":"list","member":{"locationName":"item","type":"structure","required":["CreateTime","SpotFleetRequestConfig","SpotFleetRequestId","SpotFleetRequestState"],"members":{"ActivityStatus":{"locationName":"activityStatus"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"SpotFleetRequestConfig":{"shape":"Siw","locationName":"spotFleetRequestConfig"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"SpotFleetRequestState":{"locationName":"spotFleetRequestState"}}}}}}},"DescribeSpotInstanceRequests":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotInstanceRequestIds":{"shape":"S3c","locationName":"SpotInstanceRequestId"}}},"output":{"type":"structure","members":{"SpotInstanceRequests":{"shape":"Sji","locationName":"spotInstanceRequestSet"}}}},"DescribeSpotPriceHistory":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"AvailabilityZone":{"locationName":"availabilityZone"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EndTime":{"locationName":"endTime","type":"timestamp"},"InstanceTypes":{"locationName":"InstanceType","type":"list","member":{}},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"ProductDescriptions":{"locationName":"ProductDescription","type":"list","member":{}},"StartTime":{"locationName":"startTime","type":"timestamp"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"SpotPriceHistory":{"locationName":"spotPriceHistorySet","type":"list","member":{"locationName":"item","type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"InstanceType":{"locationName":"instanceType"},"ProductDescription":{"locationName":"productDescription"},"SpotPrice":{"locationName":"spotPrice"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}}}}},"DescribeStaleSecurityGroups":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{},"VpcId":{}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"StaleSecurityGroupSet":{"locationName":"staleSecurityGroupSet","type":"list","member":{"locationName":"item","type":"structure","required":["GroupId"],"members":{"Description":{"locationName":"description"},"GroupId":{"locationName":"groupId"},"GroupName":{"locationName":"groupName"},"StaleIpPermissions":{"shape":"Sjz","locationName":"staleIpPermissions"},"StaleIpPermissionsEgress":{"shape":"Sjz","locationName":"staleIpPermissionsEgress"},"VpcId":{"locationName":"vpcId"}}}}}}},"DescribeSubnets":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"SubnetIds":{"locationName":"SubnetId","type":"list","member":{"locationName":"SubnetId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Subnets":{"locationName":"subnetSet","type":"list","member":{"shape":"S3v","locationName":"item"}}}}},"DescribeTags":{"input":{"type":"structure","members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"Tags":{"locationName":"tagSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"ResourceId":{"locationName":"resourceId"},"ResourceType":{"locationName":"resourceType"},"Value":{"locationName":"value"}}}}}}},"DescribeVolumeAttribute":{"input":{"type":"structure","required":["VolumeId"],"members":{"Attribute":{},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"AutoEnableIO":{"shape":"Se7","locationName":"autoEnableIO"},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"},"VolumeId":{"locationName":"volumeId"}}}},"DescribeVolumeStatus":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{},"VolumeIds":{"shape":"Skg","locationName":"VolumeId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"VolumeStatuses":{"locationName":"volumeStatusSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Actions":{"locationName":"actionsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Code":{"locationName":"code"},"Description":{"locationName":"description"},"EventId":{"locationName":"eventId"},"EventType":{"locationName":"eventType"}}}},"AvailabilityZone":{"locationName":"availabilityZone"},"Events":{"locationName":"eventsSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"EventId":{"locationName":"eventId"},"EventType":{"locationName":"eventType"},"NotAfter":{"locationName":"notAfter","type":"timestamp"},"NotBefore":{"locationName":"notBefore","type":"timestamp"}}}},"VolumeId":{"locationName":"volumeId"},"VolumeStatus":{"locationName":"volumeStatus","type":"structure","members":{"Details":{"locationName":"details","type":"list","member":{"locationName":"item","type":"structure","members":{"Name":{"locationName":"name"},"Status":{"locationName":"status"}}}},"Status":{"locationName":"status"}}}}}}}}},"DescribeVolumes":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"VolumeIds":{"shape":"Skg","locationName":"VolumeId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"}}},"output":{"type":"structure","members":{"Volumes":{"locationName":"volumeSet","type":"list","member":{"shape":"S7m","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVolumesModifications":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"VolumeIds":{"shape":"Skg","locationName":"VolumeId"},"Filters":{"shape":"S9t","locationName":"Filter"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"VolumesModifications":{"locationName":"volumeModificationSet","type":"list","member":{"shape":"Skz","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcAttribute":{"input":{"type":"structure","required":["Attribute","VpcId"],"members":{"Attribute":{},"VpcId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpcId":{"locationName":"vpcId"},"EnableDnsHostnames":{"shape":"Se7","locationName":"enableDnsHostnames"},"EnableDnsSupport":{"shape":"Se7","locationName":"enableDnsSupport"}}}},"DescribeVpcClassicLink":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcIds":{"shape":"Sl5","locationName":"VpcId"}}},"output":{"type":"structure","members":{"Vpcs":{"locationName":"vpcSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ClassicLinkEnabled":{"locationName":"classicLinkEnabled","type":"boolean"},"Tags":{"shape":"Sl","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}}}}}},"DescribeVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"MaxResults":{"locationName":"maxResults","type":"integer"},"NextToken":{"locationName":"nextToken"},"VpcIds":{"shape":"Sl5"}}},"output":{"type":"structure","members":{"NextToken":{"locationName":"nextToken"},"Vpcs":{"locationName":"vpcs","type":"list","member":{"locationName":"item","type":"structure","members":{"ClassicLinkDnsSupported":{"locationName":"classicLinkDnsSupported","type":"boolean"},"VpcId":{"locationName":"vpcId"}}}}}}},"DescribeVpcEndpointServices":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"ServiceNames":{"shape":"S32","locationName":"ServiceName"},"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ServiceNames":{"shape":"S32","locationName":"serviceNameSet"},"ServiceDetails":{"locationName":"serviceDetailSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ServiceName":{"locationName":"serviceName"},"ServiceType":{"locationName":"serviceType","type":"list","member":{"locationName":"item","type":"structure","members":{"ServiceType":{"locationName":"serviceType"}}}},"AvailabilityZones":{"shape":"S32","locationName":"availabilityZoneSet"},"Owner":{"locationName":"owner"},"BaseEndpointDnsNames":{"shape":"S32","locationName":"baseEndpointDnsNameSet"},"PrivateDnsName":{"locationName":"privateDnsName"},"VpcEndpointPolicySupported":{"locationName":"vpcEndpointPolicySupported","type":"boolean"},"AcceptanceRequired":{"locationName":"acceptanceRequired","type":"boolean"}}}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcEndpoints":{"input":{"type":"structure","members":{"DryRun":{"type":"boolean"},"VpcEndpointIds":{"shape":"S32","locationName":"VpcEndpointId"},"Filters":{"shape":"S9t","locationName":"Filter"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"VpcEndpoints":{"locationName":"vpcEndpointSet","type":"list","member":{"shape":"S7u","locationName":"item"}},"NextToken":{"locationName":"nextToken"}}}},"DescribeVpcPeeringConnections":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionIds":{"shape":"S32","locationName":"VpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"VpcPeeringConnections":{"locationName":"vpcPeeringConnectionSet","type":"list","member":{"shape":"Sb","locationName":"item"}}}}},"DescribeVpcs":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"VpcIds":{"locationName":"VpcId","type":"list","member":{"locationName":"VpcId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"Vpcs":{"locationName":"vpcSet","type":"list","member":{"shape":"S40","locationName":"item"}}}}},"DescribeVpnConnections":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"VpnConnectionIds":{"locationName":"VpnConnectionId","type":"list","member":{"locationName":"VpnConnectionId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpnConnections":{"locationName":"vpnConnectionSet","type":"list","member":{"shape":"S87","locationName":"item"}}}}},"DescribeVpnGateways":{"input":{"type":"structure","members":{"Filters":{"shape":"S9t","locationName":"Filter"},"VpnGatewayIds":{"locationName":"VpnGatewayId","type":"list","member":{"locationName":"VpnGatewayId"}},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"VpnGateways":{"locationName":"vpnGatewaySet","type":"list","member":{"shape":"S8j","locationName":"item"}}}}},"DetachClassicLinkVpc":{"input":{"type":"structure","required":["InstanceId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DetachInternetGateway":{"input":{"type":"structure","required":["InternetGatewayId","VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"InternetGatewayId":{"locationName":"internetGatewayId"},"VpcId":{"locationName":"vpcId"}}}},"DetachNetworkInterface":{"input":{"type":"structure","required":["AttachmentId"],"members":{"AttachmentId":{"locationName":"attachmentId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Force":{"locationName":"force","type":"boolean"}}}},"DetachVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"Device":{},"Force":{"type":"boolean"},"InstanceId":{},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"shape":"S1s"}},"DetachVpnGateway":{"input":{"type":"structure","required":["VpcId","VpnGatewayId"],"members":{"VpcId":{},"VpnGatewayId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DisableVgwRoutePropagation":{"input":{"type":"structure","required":["GatewayId","RouteTableId"],"members":{"GatewayId":{},"RouteTableId":{}}}},"DisableVpcClassicLink":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DisableVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"VpcId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"DisassociateAddress":{"input":{"type":"structure","members":{"AssociationId":{},"PublicIp":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DisassociateIamInstanceProfile":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociation":{"shape":"S15","locationName":"iamInstanceProfileAssociation"}}}},"DisassociateRouteTable":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{"locationName":"associationId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"DisassociateSubnetCidrBlock":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{"locationName":"associationId"}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S1c","locationName":"ipv6CidrBlockAssociation"},"SubnetId":{"locationName":"subnetId"}}}},"DisassociateVpcCidrBlock":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{"locationName":"associationId"}}},"output":{"type":"structure","members":{"Ipv6CidrBlockAssociation":{"shape":"S1h","locationName":"ipv6CidrBlockAssociation"},"CidrBlockAssociation":{"shape":"S1k","locationName":"cidrBlockAssociation"},"VpcId":{"locationName":"vpcId"}}}},"EnableVgwRoutePropagation":{"input":{"type":"structure","required":["GatewayId","RouteTableId"],"members":{"GatewayId":{},"RouteTableId":{}}}},"EnableVolumeIO":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VolumeId":{"locationName":"volumeId"}}}},"EnableVpcClassicLink":{"input":{"type":"structure","required":["VpcId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcId":{"locationName":"vpcId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"EnableVpcClassicLinkDnsSupport":{"input":{"type":"structure","members":{"VpcId":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"GetConsoleOutput":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Output":{"locationName":"output"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}},"GetConsoleScreenshot":{"input":{"type":"structure","required":["InstanceId"],"members":{"DryRun":{"type":"boolean"},"InstanceId":{},"WakeUp":{"type":"boolean"}}},"output":{"type":"structure","members":{"ImageData":{"locationName":"imageData"},"InstanceId":{"locationName":"instanceId"}}}},"GetHostReservationPurchasePreview":{"input":{"type":"structure","required":["HostIdSet","OfferingId"],"members":{"HostIdSet":{"shape":"Smw"},"OfferingId":{}}},"output":{"type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Purchase":{"shape":"Smy","locationName":"purchase"},"TotalHourlyPrice":{"locationName":"totalHourlyPrice"},"TotalUpfrontPrice":{"locationName":"totalUpfrontPrice"}}}},"GetPasswordData":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"PasswordData":{"locationName":"passwordData"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}}},"GetReservedInstancesExchangeQuote":{"input":{"type":"structure","required":["ReservedInstanceIds"],"members":{"DryRun":{"type":"boolean"},"ReservedInstanceIds":{"shape":"S3","locationName":"ReservedInstanceId"},"TargetConfigurations":{"shape":"S5","locationName":"TargetConfiguration"}}},"output":{"type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"IsValidExchange":{"locationName":"isValidExchange","type":"boolean"},"OutputReservedInstancesWillExpireAt":{"locationName":"outputReservedInstancesWillExpireAt","type":"timestamp"},"PaymentDue":{"locationName":"paymentDue"},"ReservedInstanceValueRollup":{"shape":"Sn4","locationName":"reservedInstanceValueRollup"},"ReservedInstanceValueSet":{"locationName":"reservedInstanceValueSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservationValue":{"shape":"Sn4","locationName":"reservationValue"},"ReservedInstanceId":{"locationName":"reservedInstanceId"}}}},"TargetConfigurationValueRollup":{"shape":"Sn4","locationName":"targetConfigurationValueRollup"},"TargetConfigurationValueSet":{"locationName":"targetConfigurationValueSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ReservationValue":{"shape":"Sn4","locationName":"reservationValue"},"TargetConfiguration":{"locationName":"targetConfiguration","type":"structure","members":{"InstanceCount":{"locationName":"instanceCount","type":"integer"},"OfferingId":{"locationName":"offeringId"}}}}}},"ValidationFailureReason":{"locationName":"validationFailureReason"}}}},"ImportImage":{"input":{"type":"structure","members":{"Architecture":{},"ClientData":{"shape":"Snb"},"ClientToken":{},"Description":{},"DiskContainers":{"locationName":"DiskContainer","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{},"DeviceName":{},"Format":{},"SnapshotId":{},"Url":{},"UserBucket":{"shape":"Sne"}}}},"DryRun":{"type":"boolean"},"Hypervisor":{},"LicenseType":{},"Platform":{},"RoleName":{}}},"output":{"type":"structure","members":{"Architecture":{"locationName":"architecture"},"Description":{"locationName":"description"},"Hypervisor":{"locationName":"hypervisor"},"ImageId":{"locationName":"imageId"},"ImportTaskId":{"locationName":"importTaskId"},"LicenseType":{"locationName":"licenseType"},"Platform":{"locationName":"platform"},"Progress":{"locationName":"progress"},"SnapshotDetails":{"shape":"Sdt","locationName":"snapshotDetailSet"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"}}}},"ImportInstance":{"input":{"type":"structure","required":["Platform"],"members":{"Description":{"locationName":"description"},"DiskImages":{"locationName":"diskImage","type":"list","member":{"type":"structure","members":{"Description":{},"Image":{"shape":"Snj"},"Volume":{"shape":"Snk"}}}},"DryRun":{"locationName":"dryRun","type":"boolean"},"LaunchSpecification":{"locationName":"launchSpecification","type":"structure","members":{"AdditionalInfo":{"locationName":"additionalInfo"},"Architecture":{"locationName":"architecture"},"GroupIds":{"shape":"S5y","locationName":"GroupId"},"GroupNames":{"shape":"Snm","locationName":"GroupName"},"InstanceInitiatedShutdownBehavior":{"locationName":"instanceInitiatedShutdownBehavior"},"InstanceType":{"locationName":"instanceType"},"Monitoring":{"locationName":"monitoring","type":"boolean"},"Placement":{"shape":"Sew","locationName":"placement"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"SubnetId":{"locationName":"subnetId"},"UserData":{"locationName":"userData","type":"structure","members":{"Data":{"locationName":"data"}}}}},"Platform":{"locationName":"platform"}}},"output":{"type":"structure","members":{"ConversionTask":{"shape":"Sal","locationName":"conversionTask"}}}},"ImportKeyPair":{"input":{"type":"structure","required":["KeyName","PublicKeyMaterial"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"KeyName":{"locationName":"keyName"},"PublicKeyMaterial":{"locationName":"publicKeyMaterial","type":"blob"}}},"output":{"type":"structure","members":{"KeyFingerprint":{"locationName":"keyFingerprint"},"KeyName":{"locationName":"keyName"}}}},"ImportSnapshot":{"input":{"type":"structure","members":{"ClientData":{"shape":"Snb"},"ClientToken":{},"Description":{},"DiskContainer":{"type":"structure","members":{"Description":{},"Format":{},"Url":{},"UserBucket":{"shape":"Sne"}}},"DryRun":{"type":"boolean"},"RoleName":{}}},"output":{"type":"structure","members":{"Description":{"locationName":"description"},"ImportTaskId":{"locationName":"importTaskId"},"SnapshotTaskDetail":{"shape":"Se0","locationName":"snapshotTaskDetail"}}}},"ImportVolume":{"input":{"type":"structure","required":["AvailabilityZone","Image","Volume"],"members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Image":{"shape":"Snj","locationName":"image"},"Volume":{"shape":"Snk","locationName":"volume"}}},"output":{"type":"structure","members":{"ConversionTask":{"shape":"Sal","locationName":"conversionTask"}}}},"ModifyFpgaImageAttribute":{"input":{"type":"structure","required":["FpgaImageId"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{},"Attribute":{},"OperationType":{},"UserIds":{"shape":"Snz","locationName":"UserId"},"UserGroups":{"shape":"So0","locationName":"UserGroup"},"ProductCodes":{"shape":"So1","locationName":"ProductCode"},"LoadPermission":{"type":"structure","members":{"Add":{"shape":"So3"},"Remove":{"shape":"So3"}}},"Description":{},"Name":{}}},"output":{"type":"structure","members":{"FpgaImageAttribute":{"shape":"Sbp","locationName":"fpgaImageAttribute"}}}},"ModifyHosts":{"input":{"type":"structure","required":["AutoPlacement","HostIds"],"members":{"AutoPlacement":{"locationName":"autoPlacement"},"HostIds":{"shape":"Sck","locationName":"hostId"}}},"output":{"type":"structure","members":{"Successful":{"shape":"St","locationName":"successful"},"Unsuccessful":{"shape":"So8","locationName":"unsuccessful"}}}},"ModifyIdFormat":{"input":{"type":"structure","required":["Resource","UseLongIds"],"members":{"Resource":{},"UseLongIds":{"type":"boolean"}}}},"ModifyIdentityIdFormat":{"input":{"type":"structure","required":["PrincipalArn","Resource","UseLongIds"],"members":{"PrincipalArn":{"locationName":"principalArn"},"Resource":{"locationName":"resource"},"UseLongIds":{"locationName":"useLongIds","type":"boolean"}}}},"ModifyImageAttribute":{"input":{"type":"structure","required":["ImageId"],"members":{"Attribute":{},"Description":{"shape":"S4d"},"ImageId":{},"LaunchPermission":{"type":"structure","members":{"Add":{"shape":"Sd9"},"Remove":{"shape":"Sd9"}}},"OperationType":{},"ProductCodes":{"shape":"So1","locationName":"ProductCode"},"UserGroups":{"shape":"So0","locationName":"UserGroup"},"UserIds":{"shape":"Snz","locationName":"UserId"},"Value":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ModifyInstanceAttribute":{"input":{"type":"structure","required":["InstanceId"],"members":{"SourceDestCheck":{"shape":"Se7"},"Attribute":{"locationName":"attribute"},"BlockDeviceMappings":{"locationName":"blockDeviceMapping","type":"list","member":{"locationName":"item","type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"VolumeId":{"locationName":"volumeId"}}},"NoDevice":{"locationName":"noDevice"},"VirtualName":{"locationName":"virtualName"}}}},"DisableApiTermination":{"shape":"Se7","locationName":"disableApiTermination"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EbsOptimized":{"shape":"Se7","locationName":"ebsOptimized"},"EnaSupport":{"shape":"Se7","locationName":"enaSupport"},"Groups":{"shape":"S1m","locationName":"GroupId"},"InstanceId":{"locationName":"instanceId"},"InstanceInitiatedShutdownBehavior":{"shape":"S4d","locationName":"instanceInitiatedShutdownBehavior"},"InstanceType":{"shape":"S4d","locationName":"instanceType"},"Kernel":{"shape":"S4d","locationName":"kernel"},"Ramdisk":{"shape":"S4d","locationName":"ramdisk"},"SriovNetSupport":{"shape":"S4d","locationName":"sriovNetSupport"},"UserData":{"locationName":"userData","type":"structure","members":{"Value":{"locationName":"value","type":"blob"}}},"Value":{"locationName":"value"}}}},"ModifyInstancePlacement":{"input":{"type":"structure","required":["InstanceId"],"members":{"Affinity":{"locationName":"affinity"},"HostId":{"locationName":"hostId"},"InstanceId":{"locationName":"instanceId"},"Tenancy":{"locationName":"tenancy"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"Attachment":{"locationName":"attachment","type":"structure","members":{"AttachmentId":{"locationName":"attachmentId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"Description":{"shape":"S4d","locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Groups":{"shape":"S5y","locationName":"SecurityGroupId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SourceDestCheck":{"shape":"Se7","locationName":"sourceDestCheck"}}}},"ModifyReservedInstances":{"input":{"type":"structure","required":["ReservedInstancesIds","TargetConfigurations"],"members":{"ReservedInstancesIds":{"shape":"Sgh","locationName":"ReservedInstancesId"},"ClientToken":{"locationName":"clientToken"},"TargetConfigurations":{"locationName":"ReservedInstancesConfigurationSetItemType","type":"list","member":{"shape":"Sh2","locationName":"item"}}}},"output":{"type":"structure","members":{"ReservedInstancesModificationId":{"locationName":"reservedInstancesModificationId"}}}},"ModifySnapshotAttribute":{"input":{"type":"structure","required":["SnapshotId"],"members":{"Attribute":{},"CreateVolumePermission":{"type":"structure","members":{"Add":{"shape":"Si7"},"Remove":{"shape":"Si7"}}},"GroupNames":{"shape":"Si0","locationName":"UserGroup"},"OperationType":{},"SnapshotId":{},"UserIds":{"shape":"Snz","locationName":"UserId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ModifySpotFleetRequest":{"input":{"type":"structure","required":["SpotFleetRequestId"],"members":{"ExcessCapacityTerminationPolicy":{"locationName":"excessCapacityTerminationPolicy"},"SpotFleetRequestId":{"locationName":"spotFleetRequestId"},"TargetCapacity":{"locationName":"targetCapacity","type":"integer"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifySubnetAttribute":{"input":{"type":"structure","required":["SubnetId"],"members":{"AssignIpv6AddressOnCreation":{"shape":"Se7"},"MapPublicIpOnLaunch":{"shape":"Se7"},"SubnetId":{"locationName":"subnetId"}}}},"ModifyVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"DryRun":{"type":"boolean"},"VolumeId":{},"Size":{"type":"integer"},"VolumeType":{},"Iops":{"type":"integer"}}},"output":{"type":"structure","members":{"VolumeModification":{"shape":"Skz","locationName":"volumeModification"}}}},"ModifyVolumeAttribute":{"input":{"type":"structure","required":["VolumeId"],"members":{"AutoEnableIO":{"shape":"Se7"},"VolumeId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ModifyVpcAttribute":{"input":{"type":"structure","required":["VpcId"],"members":{"EnableDnsHostnames":{"shape":"Se7"},"EnableDnsSupport":{"shape":"Se7"},"VpcId":{"locationName":"vpcId"}}}},"ModifyVpcEndpoint":{"input":{"type":"structure","required":["VpcEndpointId"],"members":{"DryRun":{"type":"boolean"},"VpcEndpointId":{},"ResetPolicy":{"type":"boolean"},"PolicyDocument":{},"AddRouteTableIds":{"shape":"S32","locationName":"AddRouteTableId"},"RemoveRouteTableIds":{"shape":"S32","locationName":"RemoveRouteTableId"},"AddSubnetIds":{"shape":"S32","locationName":"AddSubnetId"},"RemoveSubnetIds":{"shape":"S32","locationName":"RemoveSubnetId"},"AddSecurityGroupIds":{"shape":"S32","locationName":"AddSecurityGroupId"},"RemoveSecurityGroupIds":{"shape":"S32","locationName":"RemoveSecurityGroupId"},"PrivateDnsEnabled":{"type":"boolean"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ModifyVpcPeeringConnectionOptions":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"AccepterPeeringConnectionOptions":{"shape":"Sp3"},"DryRun":{"type":"boolean"},"RequesterPeeringConnectionOptions":{"shape":"Sp3"},"VpcPeeringConnectionId":{}}},"output":{"type":"structure","members":{"AccepterPeeringConnectionOptions":{"shape":"Sp5","locationName":"accepterPeeringConnectionOptions"},"RequesterPeeringConnectionOptions":{"shape":"Sp5","locationName":"requesterPeeringConnectionOptions"}}}},"ModifyVpcTenancy":{"input":{"type":"structure","required":["VpcId","InstanceTenancy"],"members":{"VpcId":{},"InstanceTenancy":{},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"ReturnValue":{"locationName":"return","type":"boolean"}}}},"MonitorInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceMonitorings":{"shape":"Spb","locationName":"instancesSet"}}}},"MoveAddressToVpc":{"input":{"type":"structure","required":["PublicIp"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{"locationName":"publicIp"}}},"output":{"type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"Status":{"locationName":"status"}}}},"PurchaseHostReservation":{"input":{"type":"structure","required":["HostIdSet","OfferingId"],"members":{"ClientToken":{},"CurrencyCode":{},"HostIdSet":{"shape":"Smw"},"LimitPrice":{},"OfferingId":{}}},"output":{"type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"CurrencyCode":{"locationName":"currencyCode"},"Purchase":{"shape":"Smy","locationName":"purchase"},"TotalHourlyPrice":{"locationName":"totalHourlyPrice"},"TotalUpfrontPrice":{"locationName":"totalUpfrontPrice"}}}},"PurchaseReservedInstancesOffering":{"input":{"type":"structure","required":["InstanceCount","ReservedInstancesOfferingId"],"members":{"InstanceCount":{"type":"integer"},"ReservedInstancesOfferingId":{},"DryRun":{"locationName":"dryRun","type":"boolean"},"LimitPrice":{"locationName":"limitPrice","type":"structure","members":{"Amount":{"locationName":"amount","type":"double"},"CurrencyCode":{"locationName":"currencyCode"}}}}},"output":{"type":"structure","members":{"ReservedInstancesId":{"locationName":"reservedInstancesId"}}}},"PurchaseScheduledInstances":{"input":{"type":"structure","required":["PurchaseRequests"],"members":{"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"},"PurchaseRequests":{"locationName":"PurchaseRequest","type":"list","member":{"locationName":"PurchaseRequest","type":"structure","required":["InstanceCount","PurchaseToken"],"members":{"InstanceCount":{"type":"integer"},"PurchaseToken":{}}}}}},"output":{"type":"structure","members":{"ScheduledInstanceSet":{"locationName":"scheduledInstanceSet","type":"list","member":{"shape":"Sht","locationName":"item"}}}}},"RebootInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"RegisterImage":{"input":{"type":"structure","required":["Name"],"members":{"ImageLocation":{},"Architecture":{"locationName":"architecture"},"BlockDeviceMappings":{"shape":"S4v","locationName":"BlockDeviceMapping"},"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EnaSupport":{"locationName":"enaSupport","type":"boolean"},"KernelId":{"locationName":"kernelId"},"Name":{"locationName":"name"},"BillingProducts":{"locationName":"BillingProduct","type":"list","member":{"locationName":"item"}},"RamdiskId":{"locationName":"ramdiskId"},"RootDeviceName":{"locationName":"rootDeviceName"},"SriovNetSupport":{"locationName":"sriovNetSupport"},"VirtualizationType":{"locationName":"virtualizationType"}}},"output":{"type":"structure","members":{"ImageId":{"locationName":"imageId"}}}},"RejectVpcPeeringConnection":{"input":{"type":"structure","required":["VpcPeeringConnectionId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ReleaseAddress":{"input":{"type":"structure","members":{"AllocationId":{},"PublicIp":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ReleaseHosts":{"input":{"type":"structure","required":["HostIds"],"members":{"HostIds":{"shape":"Sck","locationName":"hostId"}}},"output":{"type":"structure","members":{"Successful":{"shape":"St","locationName":"successful"},"Unsuccessful":{"shape":"So8","locationName":"unsuccessful"}}}},"ReplaceIamInstanceProfileAssociation":{"input":{"type":"structure","required":["IamInstanceProfile","AssociationId"],"members":{"IamInstanceProfile":{"shape":"S13"},"AssociationId":{}}},"output":{"type":"structure","members":{"IamInstanceProfileAssociation":{"shape":"S15","locationName":"iamInstanceProfileAssociation"}}}},"ReplaceNetworkAclAssociation":{"input":{"type":"structure","required":["AssociationId","NetworkAclId"],"members":{"AssociationId":{"locationName":"associationId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"}}},"output":{"type":"structure","members":{"NewAssociationId":{"locationName":"newAssociationId"}}}},"ReplaceNetworkAclEntry":{"input":{"type":"structure","required":["Egress","NetworkAclId","Protocol","RuleAction","RuleNumber"],"members":{"CidrBlock":{"locationName":"cidrBlock"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Egress":{"locationName":"egress","type":"boolean"},"IcmpTypeCode":{"shape":"S5t","locationName":"Icmp"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"NetworkAclId":{"locationName":"networkAclId"},"PortRange":{"shape":"S5u","locationName":"portRange"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"ReplaceRoute":{"input":{"type":"structure","required":["RouteTableId"],"members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"NatGatewayId":{"locationName":"natGatewayId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"RouteTableId":{"locationName":"routeTableId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}}},"ReplaceRouteTableAssociation":{"input":{"type":"structure","required":["AssociationId","RouteTableId"],"members":{"AssociationId":{"locationName":"associationId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"RouteTableId":{"locationName":"routeTableId"}}},"output":{"type":"structure","members":{"NewAssociationId":{"locationName":"newAssociationId"}}}},"ReportInstanceStatus":{"input":{"type":"structure","required":["Instances","ReasonCodes","Status"],"members":{"Description":{"locationName":"description"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EndTime":{"locationName":"endTime","type":"timestamp"},"Instances":{"shape":"Sad","locationName":"instanceId"},"ReasonCodes":{"locationName":"reasonCode","type":"list","member":{"locationName":"item"}},"StartTime":{"locationName":"startTime","type":"timestamp"},"Status":{"locationName":"status"}}}},"RequestSpotFleet":{"input":{"type":"structure","required":["SpotFleetRequestConfig"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"SpotFleetRequestConfig":{"shape":"Siw","locationName":"spotFleetRequestConfig"}}},"output":{"type":"structure","required":["SpotFleetRequestId"],"members":{"SpotFleetRequestId":{"locationName":"spotFleetRequestId"}}}},"RequestSpotInstances":{"input":{"type":"structure","required":["SpotPrice"],"members":{"AvailabilityZoneGroup":{"locationName":"availabilityZoneGroup"},"BlockDurationMinutes":{"locationName":"blockDurationMinutes","type":"integer"},"ClientToken":{"locationName":"clientToken"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"LaunchGroup":{"locationName":"launchGroup"},"LaunchSpecification":{"type":"structure","members":{"SecurityGroupIds":{"shape":"S32","locationName":"SecurityGroupId"},"SecurityGroups":{"shape":"S32","locationName":"SecurityGroup"},"AddressingType":{"locationName":"addressingType"},"BlockDeviceMappings":{"shape":"Sd8","locationName":"blockDeviceMapping"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S13","locationName":"iamInstanceProfile"},"ImageId":{"locationName":"imageId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"Monitoring":{"shape":"Sjl","locationName":"monitoring"},"NetworkInterfaces":{"shape":"Sj2","locationName":"NetworkInterface"},"Placement":{"shape":"Sj4","locationName":"placement"},"RamdiskId":{"locationName":"ramdiskId"},"SubnetId":{"locationName":"subnetId"},"UserData":{"locationName":"userData"}}},"SpotPrice":{"locationName":"spotPrice"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"InstanceInterruptionBehavior":{}}},"output":{"type":"structure","members":{"SpotInstanceRequests":{"shape":"Sji","locationName":"spotInstanceRequestSet"}}}},"ResetFpgaImageAttribute":{"input":{"type":"structure","required":["FpgaImageId"],"members":{"DryRun":{"type":"boolean"},"FpgaImageId":{},"Attribute":{}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"ResetImageAttribute":{"input":{"type":"structure","required":["Attribute","ImageId"],"members":{"Attribute":{},"ImageId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"ResetInstanceAttribute":{"input":{"type":"structure","required":["Attribute","InstanceId"],"members":{"Attribute":{"locationName":"attribute"},"DryRun":{"locationName":"dryRun","type":"boolean"},"InstanceId":{"locationName":"instanceId"}}}},"ResetNetworkInterfaceAttribute":{"input":{"type":"structure","required":["NetworkInterfaceId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"SourceDestCheck":{"locationName":"sourceDestCheck"}}}},"ResetSnapshotAttribute":{"input":{"type":"structure","required":["Attribute","SnapshotId"],"members":{"Attribute":{},"SnapshotId":{},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"RestoreAddressToClassic":{"input":{"type":"structure","required":["PublicIp"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"PublicIp":{"locationName":"publicIp"}}},"output":{"type":"structure","members":{"PublicIp":{"locationName":"publicIp"},"Status":{"locationName":"status"}}}},"RevokeSecurityGroupEgress":{"input":{"type":"structure","required":["GroupId"],"members":{"DryRun":{"locationName":"dryRun","type":"boolean"},"GroupId":{"locationName":"groupId"},"IpPermissions":{"shape":"S1z","locationName":"ipPermissions"},"CidrIp":{"locationName":"cidrIp"},"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"ToPort":{"locationName":"toPort","type":"integer"},"SourceSecurityGroupName":{"locationName":"sourceSecurityGroupName"},"SourceSecurityGroupOwnerId":{"locationName":"sourceSecurityGroupOwnerId"}}}},"RevokeSecurityGroupIngress":{"input":{"type":"structure","members":{"CidrIp":{},"FromPort":{"type":"integer"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S1z"},"IpProtocol":{},"SourceSecurityGroupName":{},"SourceSecurityGroupOwnerId":{},"ToPort":{"type":"integer"},"DryRun":{"locationName":"dryRun","type":"boolean"}}}},"RunInstances":{"input":{"type":"structure","required":["ImageId","MaxCount","MinCount"],"members":{"BlockDeviceMappings":{"shape":"S4v","locationName":"BlockDeviceMapping"},"ImageId":{},"InstanceType":{},"Ipv6AddressCount":{"type":"integer"},"Ipv6Addresses":{"shape":"S5z","locationName":"Ipv6Address"},"KernelId":{},"KeyName":{},"MaxCount":{"type":"integer"},"MinCount":{"type":"integer"},"Monitoring":{"shape":"Sjl"},"Placement":{"shape":"Sew"},"RamdiskId":{},"SecurityGroupIds":{"shape":"S5y","locationName":"SecurityGroupId"},"SecurityGroups":{"shape":"Snm","locationName":"SecurityGroup"},"SubnetId":{},"UserData":{},"AdditionalInfo":{"locationName":"additionalInfo"},"ClientToken":{"locationName":"clientToken"},"DisableApiTermination":{"locationName":"disableApiTermination","type":"boolean"},"DryRun":{"locationName":"dryRun","type":"boolean"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S13","locationName":"iamInstanceProfile"},"InstanceInitiatedShutdownBehavior":{"locationName":"instanceInitiatedShutdownBehavior"},"NetworkInterfaces":{"shape":"Sj2","locationName":"networkInterface"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"ElasticGpuSpecification":{"type":"list","member":{"locationName":"item","type":"structure","required":["Type"],"members":{"Type":{}}}},"TagSpecifications":{"shape":"S7j","locationName":"TagSpecification"}}},"output":{"shape":"Seq"}},"RunScheduledInstances":{"input":{"type":"structure","required":["LaunchSpecification","ScheduledInstanceId"],"members":{"ClientToken":{"idempotencyToken":true},"DryRun":{"type":"boolean"},"InstanceCount":{"type":"integer"},"LaunchSpecification":{"type":"structure","required":["ImageId"],"members":{"BlockDeviceMappings":{"locationName":"BlockDeviceMapping","type":"list","member":{"locationName":"BlockDeviceMapping","type":"structure","members":{"DeviceName":{},"Ebs":{"type":"structure","members":{"DeleteOnTermination":{"type":"boolean"},"Encrypted":{"type":"boolean"},"Iops":{"type":"integer"},"SnapshotId":{},"VolumeSize":{"type":"integer"},"VolumeType":{}}},"NoDevice":{},"VirtualName":{}}}},"EbsOptimized":{"type":"boolean"},"IamInstanceProfile":{"type":"structure","members":{"Arn":{},"Name":{}}},"ImageId":{},"InstanceType":{},"KernelId":{},"KeyName":{},"Monitoring":{"type":"structure","members":{"Enabled":{"type":"boolean"}}},"NetworkInterfaces":{"locationName":"NetworkInterface","type":"list","member":{"locationName":"NetworkInterface","type":"structure","members":{"AssociatePublicIpAddress":{"type":"boolean"},"DeleteOnTermination":{"type":"boolean"},"Description":{},"DeviceIndex":{"type":"integer"},"Groups":{"shape":"Sr4","locationName":"Group"},"Ipv6AddressCount":{"type":"integer"},"Ipv6Addresses":{"locationName":"Ipv6Address","type":"list","member":{"locationName":"Ipv6Address","type":"structure","members":{"Ipv6Address":{}}}},"NetworkInterfaceId":{},"PrivateIpAddress":{},"PrivateIpAddressConfigs":{"locationName":"PrivateIpAddressConfig","type":"list","member":{"locationName":"PrivateIpAddressConfigSet","type":"structure","members":{"Primary":{"type":"boolean"},"PrivateIpAddress":{}}}},"SecondaryPrivateIpAddressCount":{"type":"integer"},"SubnetId":{}}}},"Placement":{"type":"structure","members":{"AvailabilityZone":{},"GroupName":{}}},"RamdiskId":{},"SecurityGroupIds":{"shape":"Sr4","locationName":"SecurityGroupId"},"SubnetId":{},"UserData":{}}},"ScheduledInstanceId":{}}},"output":{"type":"structure","members":{"InstanceIdSet":{"locationName":"instanceIdSet","type":"list","member":{"locationName":"item"}}}}},"StartInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"AdditionalInfo":{"locationName":"additionalInfo"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"StartingInstances":{"shape":"Srf","locationName":"instancesSet"}}}},"StopInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"},"Force":{"locationName":"force","type":"boolean"}}},"output":{"type":"structure","members":{"StoppingInstances":{"shape":"Srf","locationName":"instancesSet"}}}},"TerminateInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"TerminatingInstances":{"shape":"Srf","locationName":"instancesSet"}}}},"UnassignIpv6Addresses":{"input":{"type":"structure","required":["Ipv6Addresses","NetworkInterfaceId"],"members":{"Ipv6Addresses":{"shape":"Sv","locationName":"ipv6Addresses"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"}}},"output":{"type":"structure","members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"UnassignedIpv6Addresses":{"shape":"Sv","locationName":"unassignedIpv6Addresses"}}}},"UnassignPrivateIpAddresses":{"input":{"type":"structure","required":["NetworkInterfaceId","PrivateIpAddresses"],"members":{"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddresses":{"shape":"Sy","locationName":"privateIpAddress"}}}},"UnmonitorInstances":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Sad","locationName":"InstanceId"},"DryRun":{"locationName":"dryRun","type":"boolean"}}},"output":{"type":"structure","members":{"InstanceMonitorings":{"shape":"Spb","locationName":"instancesSet"}}}},"UpdateSecurityGroupRuleDescriptionsEgress":{"input":{"type":"structure","required":["IpPermissions"],"members":{"DryRun":{"type":"boolean"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S1z"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}},"UpdateSecurityGroupRuleDescriptionsIngress":{"input":{"type":"structure","required":["IpPermissions"],"members":{"DryRun":{"type":"boolean"},"GroupId":{},"GroupName":{},"IpPermissions":{"shape":"S1z"}}},"output":{"type":"structure","members":{"Return":{"locationName":"return","type":"boolean"}}}}},"shapes":{"S3":{"type":"list","member":{"locationName":"ReservedInstanceId"}},"S5":{"type":"list","member":{"locationName":"TargetConfigurationRequest","type":"structure","required":["OfferingId"],"members":{"InstanceCount":{"type":"integer"},"OfferingId":{}}}},"Sb":{"type":"structure","members":{"AccepterVpcInfo":{"shape":"Sc","locationName":"accepterVpcInfo"},"ExpirationTime":{"locationName":"expirationTime","type":"timestamp"},"RequesterVpcInfo":{"shape":"Sc","locationName":"requesterVpcInfo"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"Tags":{"shape":"Sl","locationName":"tagSet"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"Sc":{"type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"},"Ipv6CidrBlockSet":{"locationName":"ipv6CidrBlockSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"}}}},"CidrBlockSet":{"locationName":"cidrBlockSet","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"}}}},"OwnerId":{"locationName":"ownerId"},"PeeringOptions":{"locationName":"peeringOptions","type":"structure","members":{"AllowDnsResolutionFromRemoteVpc":{"locationName":"allowDnsResolutionFromRemoteVpc","type":"boolean"},"AllowEgressFromLocalClassicLinkToRemoteVpc":{"locationName":"allowEgressFromLocalClassicLinkToRemoteVpc","type":"boolean"},"AllowEgressFromLocalVpcToRemoteClassicLink":{"locationName":"allowEgressFromLocalVpcToRemoteClassicLink","type":"boolean"}}},"VpcId":{"locationName":"vpcId"}}},"Sl":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Value":{"locationName":"value"}}}},"St":{"type":"list","member":{"locationName":"item"}},"Sv":{"type":"list","member":{"locationName":"item"}},"Sy":{"type":"list","member":{"locationName":"PrivateIpAddress"}},"S13":{"type":"structure","members":{"Arn":{"locationName":"arn"},"Name":{"locationName":"name"}}},"S15":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"InstanceId":{"locationName":"instanceId"},"IamInstanceProfile":{"shape":"S16","locationName":"iamInstanceProfile"},"State":{"locationName":"state"},"Timestamp":{"locationName":"timestamp","type":"timestamp"}}},"S16":{"type":"structure","members":{"Arn":{"locationName":"arn"},"Id":{"locationName":"id"}}},"S1c":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"Ipv6CidrBlockState":{"locationName":"ipv6CidrBlockState","type":"structure","members":{"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}}}},"S1h":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"Ipv6CidrBlockState":{"shape":"S1i","locationName":"ipv6CidrBlockState"}}},"S1i":{"type":"structure","members":{"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}},"S1k":{"type":"structure","members":{"AssociationId":{"locationName":"associationId"},"CidrBlock":{"locationName":"cidrBlock"},"CidrBlockState":{"shape":"S1i","locationName":"cidrBlockState"}}},"S1m":{"type":"list","member":{"locationName":"groupId"}},"S1s":{"type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"Device":{"locationName":"device"},"InstanceId":{"locationName":"instanceId"},"State":{"locationName":"status"},"VolumeId":{"locationName":"volumeId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"}}},"S1w":{"type":"structure","members":{"State":{"locationName":"state"},"VpcId":{"locationName":"vpcId"}}},"S1z":{"type":"list","member":{"locationName":"item","type":"structure","members":{"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"IpRanges":{"locationName":"ipRanges","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrIp":{"locationName":"cidrIp"},"Description":{"locationName":"description"}}}},"Ipv6Ranges":{"locationName":"ipv6Ranges","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrIpv6":{"locationName":"cidrIpv6"},"Description":{"locationName":"description"}}}},"PrefixListIds":{"locationName":"prefixListIds","type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"PrefixListId":{"locationName":"prefixListId"}}}},"ToPort":{"locationName":"toPort","type":"integer"},"UserIdGroupPairs":{"locationName":"groups","type":"list","member":{"shape":"S28","locationName":"item"}}}}},"S28":{"type":"structure","members":{"Description":{"locationName":"description"},"GroupId":{"locationName":"groupId"},"GroupName":{"locationName":"groupName"},"PeeringStatus":{"locationName":"peeringStatus"},"UserId":{"locationName":"userId"},"VpcId":{"locationName":"vpcId"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}},"S2b":{"type":"structure","members":{"S3":{"type":"structure","members":{"AWSAccessKeyId":{},"Bucket":{"locationName":"bucket"},"Prefix":{"locationName":"prefix"},"UploadPolicy":{"locationName":"uploadPolicy","type":"blob"},"UploadPolicySignature":{"locationName":"uploadPolicySignature"}}}}},"S2f":{"type":"structure","members":{"BundleId":{"locationName":"bundleId"},"BundleTaskError":{"locationName":"error","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"InstanceId":{"locationName":"instanceId"},"Progress":{"locationName":"progress"},"StartTime":{"locationName":"startTime","type":"timestamp"},"State":{"locationName":"state"},"Storage":{"shape":"S2b","locationName":"storage"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"}}},"S2q":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ClientToken":{"locationName":"clientToken"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"InstanceCounts":{"locationName":"instanceCounts","type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceCount":{"locationName":"instanceCount","type":"integer"},"State":{"locationName":"state"}}}},"PriceSchedules":{"locationName":"priceSchedules","type":"list","member":{"locationName":"item","type":"structure","members":{"Active":{"locationName":"active","type":"boolean"},"CurrencyCode":{"locationName":"currencyCode"},"Price":{"locationName":"price","type":"double"},"Term":{"locationName":"term","type":"long"}}}},"ReservedInstancesId":{"locationName":"reservedInstancesId"},"ReservedInstancesListingId":{"locationName":"reservedInstancesListingId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Sl","locationName":"tagSet"},"UpdateDate":{"locationName":"updateDate","type":"timestamp"}}}},"S32":{"type":"list","member":{"locationName":"item"}},"S3c":{"type":"list","member":{"locationName":"SpotInstanceRequestId"}},"S3s":{"type":"structure","members":{"BgpAsn":{"locationName":"bgpAsn"},"CustomerGatewayId":{"locationName":"customerGatewayId"},"IpAddress":{"locationName":"ipAddress"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S3v":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"AvailableIpAddressCount":{"locationName":"availableIpAddressCount","type":"integer"},"CidrBlock":{"locationName":"cidrBlock"},"DefaultForAz":{"locationName":"defaultForAz","type":"boolean"},"MapPublicIpOnLaunch":{"locationName":"mapPublicIpOnLaunch","type":"boolean"},"State":{"locationName":"state"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"AssignIpv6AddressOnCreation":{"locationName":"assignIpv6AddressOnCreation","type":"boolean"},"Ipv6CidrBlockAssociationSet":{"locationName":"ipv6CidrBlockAssociationSet","type":"list","member":{"shape":"S1c","locationName":"item"}},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S40":{"type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"},"DhcpOptionsId":{"locationName":"dhcpOptionsId"},"State":{"locationName":"state"},"VpcId":{"locationName":"vpcId"},"InstanceTenancy":{"locationName":"instanceTenancy"},"Ipv6CidrBlockAssociationSet":{"locationName":"ipv6CidrBlockAssociationSet","type":"list","member":{"shape":"S1h","locationName":"item"}},"CidrBlockAssociationSet":{"locationName":"cidrBlockAssociationSet","type":"list","member":{"shape":"S1k","locationName":"item"}},"IsDefault":{"locationName":"isDefault","type":"boolean"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S49":{"type":"structure","members":{"DhcpConfigurations":{"locationName":"dhcpConfigurationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Key":{"locationName":"key"},"Values":{"locationName":"valueSet","type":"list","member":{"shape":"S4d","locationName":"item"}}}}},"DhcpOptionsId":{"locationName":"dhcpOptionsId"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S4d":{"type":"structure","members":{"Value":{"locationName":"value"}}},"S4g":{"type":"structure","members":{"Attachments":{"shape":"S4h","locationName":"attachmentSet"},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"}}},"S4h":{"type":"list","member":{"locationName":"item","type":"structure","members":{"State":{"locationName":"state"},"VpcId":{"locationName":"vpcId"}}}},"S4o":{"type":"list","member":{"shape":"S4p","locationName":"item"}},"S4p":{"type":"structure","required":["Error"],"members":{"Error":{"locationName":"error","type":"structure","required":["Code","Message"],"members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"ResourceId":{"locationName":"resourceId"}}},"S4s":{"type":"structure","members":{"Bucket":{},"Key":{}}},"S4v":{"type":"list","member":{"shape":"S4w","locationName":"BlockDeviceMapping"}},"S4w":{"type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"VirtualName":{"locationName":"virtualName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"Encrypted":{"locationName":"encrypted","type":"boolean"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Iops":{"locationName":"iops","type":"integer"},"SnapshotId":{"locationName":"snapshotId"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"VolumeType":{"locationName":"volumeType"}}},"NoDevice":{"locationName":"noDevice"}}},"S56":{"type":"structure","members":{"Description":{"locationName":"description"},"ExportTaskId":{"locationName":"exportTaskId"},"ExportToS3Task":{"locationName":"exportToS3","type":"structure","members":{"ContainerFormat":{"locationName":"containerFormat"},"DiskImageFormat":{"locationName":"diskImageFormat"},"S3Bucket":{"locationName":"s3Bucket"},"S3Key":{"locationName":"s3Key"}}},"InstanceExportDetails":{"locationName":"instanceExport","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"TargetEnvironment":{"locationName":"targetEnvironment"}}},"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}},"S5c":{"type":"structure","members":{"Attachments":{"shape":"S4h","locationName":"attachmentSet"},"InternetGatewayId":{"locationName":"internetGatewayId"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S5h":{"type":"structure","members":{"CreateTime":{"locationName":"createTime","type":"timestamp"},"DeleteTime":{"locationName":"deleteTime","type":"timestamp"},"FailureCode":{"locationName":"failureCode"},"FailureMessage":{"locationName":"failureMessage"},"NatGatewayAddresses":{"locationName":"natGatewayAddressSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIp":{"locationName":"privateIp"},"PublicIp":{"locationName":"publicIp"}}}},"NatGatewayId":{"locationName":"natGatewayId"},"ProvisionedBandwidth":{"locationName":"provisionedBandwidth","type":"structure","members":{"ProvisionTime":{"locationName":"provisionTime","type":"timestamp"},"Provisioned":{"locationName":"provisioned"},"RequestTime":{"locationName":"requestTime","type":"timestamp"},"Requested":{"locationName":"requested"},"Status":{"locationName":"status"}}},"State":{"locationName":"state"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S5o":{"type":"structure","members":{"Associations":{"locationName":"associationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"NetworkAclAssociationId":{"locationName":"networkAclAssociationId"},"NetworkAclId":{"locationName":"networkAclId"},"SubnetId":{"locationName":"subnetId"}}}},"Entries":{"locationName":"entrySet","type":"list","member":{"locationName":"item","type":"structure","members":{"CidrBlock":{"locationName":"cidrBlock"},"Egress":{"locationName":"egress","type":"boolean"},"IcmpTypeCode":{"shape":"S5t","locationName":"icmpTypeCode"},"Ipv6CidrBlock":{"locationName":"ipv6CidrBlock"},"PortRange":{"shape":"S5u","locationName":"portRange"},"Protocol":{"locationName":"protocol"},"RuleAction":{"locationName":"ruleAction"},"RuleNumber":{"locationName":"ruleNumber","type":"integer"}}}},"IsDefault":{"locationName":"default","type":"boolean"},"NetworkAclId":{"locationName":"networkAclId"},"Tags":{"shape":"Sl","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}},"S5t":{"type":"structure","members":{"Code":{"locationName":"code","type":"integer"},"Type":{"locationName":"type","type":"integer"}}},"S5u":{"type":"structure","members":{"From":{"locationName":"from","type":"integer"},"To":{"locationName":"to","type":"integer"}}},"S5y":{"type":"list","member":{"locationName":"SecurityGroupId"}},"S5z":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Address":{"locationName":"ipv6Address"}}}},"S61":{"type":"list","member":{"locationName":"item","type":"structure","required":["PrivateIpAddress"],"members":{"Primary":{"locationName":"primary","type":"boolean"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}},"S64":{"type":"structure","members":{"Association":{"shape":"S65","locationName":"association"},"Attachment":{"shape":"S66","locationName":"attachment"},"AvailabilityZone":{"locationName":"availabilityZone"},"Description":{"locationName":"description"},"Groups":{"shape":"S67","locationName":"groupSet"},"InterfaceType":{"locationName":"interfaceType"},"Ipv6Addresses":{"locationName":"ipv6AddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Ipv6Address":{"locationName":"ipv6Address"}}}},"MacAddress":{"locationName":"macAddress"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"OwnerId":{"locationName":"ownerId"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"locationName":"privateIpAddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Association":{"shape":"S65","locationName":"association"},"Primary":{"locationName":"primary","type":"boolean"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}},"RequesterId":{"locationName":"requesterId"},"RequesterManaged":{"locationName":"requesterManaged","type":"boolean"},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"Status":{"locationName":"status"},"SubnetId":{"locationName":"subnetId"},"TagSet":{"shape":"Sl","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}},"S65":{"type":"structure","members":{"AllocationId":{"locationName":"allocationId"},"AssociationId":{"locationName":"associationId"},"IpOwnerId":{"locationName":"ipOwnerId"},"PublicDnsName":{"locationName":"publicDnsName"},"PublicIp":{"locationName":"publicIp"}}},"S66":{"type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"AttachmentId":{"locationName":"attachmentId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"InstanceId":{"locationName":"instanceId"},"InstanceOwnerId":{"locationName":"instanceOwnerId"},"Status":{"locationName":"status"}}},"S67":{"type":"list","member":{"locationName":"item","type":"structure","members":{"GroupName":{"locationName":"groupName"},"GroupId":{"locationName":"groupId"}}}},"S6i":{"type":"structure","members":{"NetworkInterfacePermissionId":{"locationName":"networkInterfacePermissionId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"AwsAccountId":{"locationName":"awsAccountId"},"AwsService":{"locationName":"awsService"},"Permission":{"locationName":"permission"},"PermissionState":{"locationName":"permissionState","type":"structure","members":{"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"}}}}},"S6v":{"type":"structure","members":{"Associations":{"locationName":"associationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Main":{"locationName":"main","type":"boolean"},"RouteTableAssociationId":{"locationName":"routeTableAssociationId"},"RouteTableId":{"locationName":"routeTableId"},"SubnetId":{"locationName":"subnetId"}}}},"PropagatingVgws":{"locationName":"propagatingVgwSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GatewayId":{"locationName":"gatewayId"}}}},"RouteTableId":{"locationName":"routeTableId"},"Routes":{"locationName":"routeSet","type":"list","member":{"locationName":"item","type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"DestinationIpv6CidrBlock":{"locationName":"destinationIpv6CidrBlock"},"DestinationPrefixListId":{"locationName":"destinationPrefixListId"},"EgressOnlyInternetGatewayId":{"locationName":"egressOnlyInternetGatewayId"},"GatewayId":{"locationName":"gatewayId"},"InstanceId":{"locationName":"instanceId"},"InstanceOwnerId":{"locationName":"instanceOwnerId"},"NatGatewayId":{"locationName":"natGatewayId"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"Origin":{"locationName":"origin"},"State":{"locationName":"state"},"VpcPeeringConnectionId":{"locationName":"vpcPeeringConnectionId"}}}},"Tags":{"shape":"Sl","locationName":"tagSet"},"VpcId":{"locationName":"vpcId"}}},"S77":{"type":"structure","members":{"DataEncryptionKeyId":{"locationName":"dataEncryptionKeyId"},"Description":{"locationName":"description"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"OwnerId":{"locationName":"ownerId"},"Progress":{"locationName":"progress"},"SnapshotId":{"locationName":"snapshotId"},"StartTime":{"locationName":"startTime","type":"timestamp"},"State":{"locationName":"status"},"StateMessage":{"locationName":"statusMessage"},"VolumeId":{"locationName":"volumeId"},"VolumeSize":{"locationName":"volumeSize","type":"integer"},"OwnerAlias":{"locationName":"ownerAlias"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S7b":{"type":"structure","members":{"Bucket":{"locationName":"bucket"},"Fault":{"shape":"S7c","locationName":"fault"},"OwnerId":{"locationName":"ownerId"},"Prefix":{"locationName":"prefix"},"State":{"locationName":"state"}}},"S7c":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"S7h":{"type":"list","member":{}},"S7j":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceType":{"locationName":"resourceType"},"Tags":{"shape":"Sl","locationName":"Tag"}}}},"S7m":{"type":"structure","members":{"Attachments":{"locationName":"attachmentSet","type":"list","member":{"shape":"S1s","locationName":"item"}},"AvailabilityZone":{"locationName":"availabilityZone"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"Encrypted":{"locationName":"encrypted","type":"boolean"},"KmsKeyId":{"locationName":"kmsKeyId"},"Size":{"locationName":"size","type":"integer"},"SnapshotId":{"locationName":"snapshotId"},"State":{"locationName":"status"},"VolumeId":{"locationName":"volumeId"},"Iops":{"locationName":"iops","type":"integer"},"Tags":{"shape":"Sl","locationName":"tagSet"},"VolumeType":{"locationName":"volumeType"}}},"S7u":{"type":"structure","members":{"VpcEndpointId":{"locationName":"vpcEndpointId"},"VpcEndpointType":{"locationName":"vpcEndpointType"},"VpcId":{"locationName":"vpcId"},"ServiceName":{"locationName":"serviceName"},"State":{"locationName":"state"},"PolicyDocument":{"locationName":"policyDocument"},"RouteTableIds":{"shape":"S32","locationName":"routeTableIdSet"},"SubnetIds":{"shape":"S32","locationName":"subnetIdSet"},"Groups":{"locationName":"groupSet","type":"list","member":{"locationName":"item","type":"structure","members":{"GroupId":{"locationName":"groupId"},"GroupName":{"locationName":"groupName"}}}},"PrivateDnsEnabled":{"locationName":"privateDnsEnabled","type":"boolean"},"NetworkInterfaceIds":{"shape":"S32","locationName":"networkInterfaceIdSet"},"DnsEntries":{"locationName":"dnsEntrySet","type":"list","member":{"locationName":"item","type":"structure","members":{"DnsName":{"locationName":"dnsName"},"HostedZoneId":{"locationName":"hostedZoneId"}}}},"CreationTimestamp":{"locationName":"creationTimestamp","type":"timestamp"}}},"S87":{"type":"structure","members":{"CustomerGatewayConfiguration":{"locationName":"customerGatewayConfiguration"},"CustomerGatewayId":{"locationName":"customerGatewayId"},"Category":{"locationName":"category"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"VpnConnectionId":{"locationName":"vpnConnectionId"},"VpnGatewayId":{"locationName":"vpnGatewayId"},"Options":{"locationName":"options","type":"structure","members":{"StaticRoutesOnly":{"locationName":"staticRoutesOnly","type":"boolean"}}},"Routes":{"locationName":"routes","type":"list","member":{"locationName":"item","type":"structure","members":{"DestinationCidrBlock":{"locationName":"destinationCidrBlock"},"Source":{"locationName":"source"},"State":{"locationName":"state"}}}},"Tags":{"shape":"Sl","locationName":"tagSet"},"VgwTelemetry":{"locationName":"vgwTelemetry","type":"list","member":{"locationName":"item","type":"structure","members":{"AcceptedRouteCount":{"locationName":"acceptedRouteCount","type":"integer"},"LastStatusChange":{"locationName":"lastStatusChange","type":"timestamp"},"OutsideIpAddress":{"locationName":"outsideIpAddress"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"}}}}}},"S8j":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"State":{"locationName":"state"},"Type":{"locationName":"type"},"VpcAttachments":{"locationName":"attachments","type":"list","member":{"shape":"S1w","locationName":"item"}},"VpnGatewayId":{"locationName":"vpnGatewayId"},"AmazonSideAsn":{"locationName":"amazonSideAsn","type":"long"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"S9t":{"type":"list","member":{"locationName":"Filter","type":"structure","members":{"Name":{},"Values":{"shape":"S32","locationName":"Value"}}}},"Sad":{"type":"list","member":{"locationName":"InstanceId"}},"Sal":{"type":"structure","required":["ConversionTaskId","State"],"members":{"ConversionTaskId":{"locationName":"conversionTaskId"},"ExpirationTime":{"locationName":"expirationTime"},"ImportInstance":{"locationName":"importInstance","type":"structure","required":["Volumes"],"members":{"Description":{"locationName":"description"},"InstanceId":{"locationName":"instanceId"},"Platform":{"locationName":"platform"},"Volumes":{"locationName":"volumes","type":"list","member":{"locationName":"item","type":"structure","required":["AvailabilityZone","BytesConverted","Image","Status","Volume"],"members":{"AvailabilityZone":{"locationName":"availabilityZone"},"BytesConverted":{"locationName":"bytesConverted","type":"long"},"Description":{"locationName":"description"},"Image":{"shape":"Saq","locationName":"image"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Volume":{"shape":"Sar","locationName":"volume"}}}}}},"ImportVolume":{"locationName":"importVolume","type":"structure","required":["AvailabilityZone","BytesConverted","Image","Volume"],"members":{"AvailabilityZone":{"locationName":"availabilityZone"},"BytesConverted":{"locationName":"bytesConverted","type":"long"},"Description":{"locationName":"description"},"Image":{"shape":"Saq","locationName":"image"},"Volume":{"shape":"Sar","locationName":"volume"}}},"State":{"locationName":"state"},"StatusMessage":{"locationName":"statusMessage"},"Tags":{"shape":"Sl","locationName":"tagSet"}}},"Saq":{"type":"structure","required":["Format","ImportManifestUrl","Size"],"members":{"Checksum":{"locationName":"checksum"},"Format":{"locationName":"format"},"ImportManifestUrl":{"locationName":"importManifestUrl"},"Size":{"locationName":"size","type":"long"}}},"Sar":{"type":"structure","required":["Id"],"members":{"Id":{"locationName":"id"},"Size":{"locationName":"size","type":"long"}}},"Sbp":{"type":"structure","members":{"FpgaImageId":{"locationName":"fpgaImageId"},"Name":{"locationName":"name"},"Description":{"locationName":"description"},"LoadPermissions":{"locationName":"loadPermissions","type":"list","member":{"locationName":"item","type":"structure","members":{"UserId":{"locationName":"userId"},"Group":{"locationName":"group"}}}},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"}}},"Sbt":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ProductCodeId":{"locationName":"productCode"},"ProductCodeType":{"locationName":"type"}}}},"Sby":{"type":"list","member":{"locationName":"Owner"}},"Sch":{"type":"list","member":{"locationName":"item"}},"Sck":{"type":"list","member":{"locationName":"item"}},"Sd1":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Deadline":{"locationName":"deadline","type":"timestamp"},"Resource":{"locationName":"resource"},"UseLongIds":{"locationName":"useLongIds","type":"boolean"}}}},"Sd8":{"type":"list","member":{"shape":"S4w","locationName":"item"}},"Sd9":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Group":{"locationName":"group"},"UserId":{"locationName":"userId"}}}},"Sdm":{"type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"}}},"Sdp":{"type":"list","member":{"locationName":"ImportTaskId"}},"Sdt":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Description":{"locationName":"description"},"DeviceName":{"locationName":"deviceName"},"DiskImageSize":{"locationName":"diskImageSize","type":"double"},"Format":{"locationName":"format"},"Progress":{"locationName":"progress"},"SnapshotId":{"locationName":"snapshotId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Url":{"locationName":"url"},"UserBucket":{"shape":"Sdv","locationName":"userBucket"}}}},"Sdv":{"type":"structure","members":{"S3Bucket":{"locationName":"s3Bucket"},"S3Key":{"locationName":"s3Key"}}},"Se0":{"type":"structure","members":{"Description":{"locationName":"description"},"DiskImageSize":{"locationName":"diskImageSize","type":"double"},"Format":{"locationName":"format"},"Progress":{"locationName":"progress"},"SnapshotId":{"locationName":"snapshotId"},"Status":{"locationName":"status"},"StatusMessage":{"locationName":"statusMessage"},"Url":{"locationName":"url"},"UserBucket":{"shape":"Sdv","locationName":"userBucket"}}},"Se4":{"type":"list","member":{"locationName":"item","type":"structure","members":{"DeviceName":{"locationName":"deviceName"},"Ebs":{"locationName":"ebs","type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Status":{"locationName":"status"},"VolumeId":{"locationName":"volumeId"}}}}}},"Se7":{"type":"structure","members":{"Value":{"locationName":"value","type":"boolean"}}},"Sef":{"type":"structure","members":{"Code":{"locationName":"code","type":"integer"},"Name":{"locationName":"name"}}},"Seh":{"type":"structure","members":{"Details":{"locationName":"details","type":"list","member":{"locationName":"item","type":"structure","members":{"ImpairedSince":{"locationName":"impairedSince","type":"timestamp"},"Name":{"locationName":"name"},"Status":{"locationName":"status"}}}},"Status":{"locationName":"status"}}},"Seq":{"type":"structure","members":{"Groups":{"shape":"S67","locationName":"groupSet"},"Instances":{"locationName":"instancesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"AmiLaunchIndex":{"locationName":"amiLaunchIndex","type":"integer"},"ImageId":{"locationName":"imageId"},"InstanceId":{"locationName":"instanceId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"LaunchTime":{"locationName":"launchTime","type":"timestamp"},"Monitoring":{"shape":"Seu","locationName":"monitoring"},"Placement":{"shape":"Sew","locationName":"placement"},"Platform":{"locationName":"platform"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"ProductCodes":{"shape":"Sbt","locationName":"productCodes"},"PublicDnsName":{"locationName":"dnsName"},"PublicIpAddress":{"locationName":"ipAddress"},"RamdiskId":{"locationName":"ramdiskId"},"State":{"shape":"Sef","locationName":"instanceState"},"StateTransitionReason":{"locationName":"reason"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"},"Architecture":{"locationName":"architecture"},"BlockDeviceMappings":{"shape":"Se4","locationName":"blockDeviceMapping"},"ClientToken":{"locationName":"clientToken"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"EnaSupport":{"locationName":"enaSupport","type":"boolean"},"Hypervisor":{"locationName":"hypervisor"},"IamInstanceProfile":{"shape":"S16","locationName":"iamInstanceProfile"},"InstanceLifecycle":{"locationName":"instanceLifecycle"},"ElasticGpuAssociations":{"locationName":"elasticGpuAssociationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ElasticGpuId":{"locationName":"elasticGpuId"},"ElasticGpuAssociationId":{"locationName":"elasticGpuAssociationId"},"ElasticGpuAssociationState":{"locationName":"elasticGpuAssociationState"},"ElasticGpuAssociationTime":{"locationName":"elasticGpuAssociationTime"}}}},"NetworkInterfaces":{"locationName":"networkInterfaceSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Association":{"shape":"Sf2","locationName":"association"},"Attachment":{"locationName":"attachment","type":"structure","members":{"AttachTime":{"locationName":"attachTime","type":"timestamp"},"AttachmentId":{"locationName":"attachmentId"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"Status":{"locationName":"status"}}},"Description":{"locationName":"description"},"Groups":{"shape":"S67","locationName":"groupSet"},"Ipv6Addresses":{"shape":"S5z","locationName":"ipv6AddressesSet"},"MacAddress":{"locationName":"macAddress"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"OwnerId":{"locationName":"ownerId"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"locationName":"privateIpAddressesSet","type":"list","member":{"locationName":"item","type":"structure","members":{"Association":{"shape":"Sf2","locationName":"association"},"Primary":{"locationName":"primary","type":"boolean"},"PrivateDnsName":{"locationName":"privateDnsName"},"PrivateIpAddress":{"locationName":"privateIpAddress"}}}},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"Status":{"locationName":"status"},"SubnetId":{"locationName":"subnetId"},"VpcId":{"locationName":"vpcId"}}}},"RootDeviceName":{"locationName":"rootDeviceName"},"RootDeviceType":{"locationName":"rootDeviceType"},"SecurityGroups":{"shape":"S67","locationName":"groupSet"},"SourceDestCheck":{"locationName":"sourceDestCheck","type":"boolean"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"SriovNetSupport":{"locationName":"sriovNetSupport"},"StateReason":{"shape":"Sdm","locationName":"stateReason"},"Tags":{"shape":"Sl","locationName":"tagSet"},"VirtualizationType":{"locationName":"virtualizationType"}}}},"OwnerId":{"locationName":"ownerId"},"RequesterId":{"locationName":"requesterId"},"ReservationId":{"locationName":"reservationId"}}},"Seu":{"type":"structure","members":{"State":{"locationName":"state"}}},"Sew":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"Affinity":{"locationName":"affinity"},"GroupName":{"locationName":"groupName"},"HostId":{"locationName":"hostId"},"Tenancy":{"locationName":"tenancy"},"SpreadDomain":{"locationName":"spreadDomain"}}},"Sf2":{"type":"structure","members":{"IpOwnerId":{"locationName":"ipOwnerId"},"PublicDnsName":{"locationName":"publicDnsName"},"PublicIp":{"locationName":"publicIp"}}},"Sgh":{"type":"list","member":{"locationName":"ReservedInstancesId"}},"Sgp":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Amount":{"locationName":"amount","type":"double"},"Frequency":{"locationName":"frequency"}}}},"Sh2":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"InstanceType":{"locationName":"instanceType"},"Platform":{"locationName":"platform"},"Scope":{"locationName":"scope"}}},"Shm":{"type":"structure","members":{"Frequency":{"locationName":"frequency"},"Interval":{"locationName":"interval","type":"integer"},"OccurrenceDaySet":{"locationName":"occurrenceDaySet","type":"list","member":{"locationName":"item","type":"integer"}},"OccurrenceRelativeToEnd":{"locationName":"occurrenceRelativeToEnd","type":"boolean"},"OccurrenceUnit":{"locationName":"occurrenceUnit"}}},"Sht":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"CreateDate":{"locationName":"createDate","type":"timestamp"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceCount":{"locationName":"instanceCount","type":"integer"},"InstanceType":{"locationName":"instanceType"},"NetworkPlatform":{"locationName":"networkPlatform"},"NextSlotStartTime":{"locationName":"nextSlotStartTime","type":"timestamp"},"Platform":{"locationName":"platform"},"PreviousSlotEndTime":{"locationName":"previousSlotEndTime","type":"timestamp"},"Recurrence":{"shape":"Shm","locationName":"recurrence"},"ScheduledInstanceId":{"locationName":"scheduledInstanceId"},"SlotDurationInHours":{"locationName":"slotDurationInHours","type":"integer"},"TermEndDate":{"locationName":"termEndDate","type":"timestamp"},"TermStartDate":{"locationName":"termStartDate","type":"timestamp"},"TotalScheduledInstanceHours":{"locationName":"totalScheduledInstanceHours","type":"integer"}}},"Si0":{"type":"list","member":{"locationName":"GroupName"}},"Si7":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Group":{"locationName":"group"},"UserId":{"locationName":"userId"}}}},"Siw":{"type":"structure","required":["IamFleetRole","LaunchSpecifications","SpotPrice","TargetCapacity"],"members":{"AllocationStrategy":{"locationName":"allocationStrategy"},"ClientToken":{"locationName":"clientToken"},"ExcessCapacityTerminationPolicy":{"locationName":"excessCapacityTerminationPolicy"},"FulfilledCapacity":{"locationName":"fulfilledCapacity","type":"double"},"IamFleetRole":{"locationName":"iamFleetRole"},"LaunchSpecifications":{"locationName":"launchSpecifications","type":"list","member":{"locationName":"item","type":"structure","members":{"SecurityGroups":{"shape":"S67","locationName":"groupSet"},"AddressingType":{"locationName":"addressingType"},"BlockDeviceMappings":{"shape":"Sd8","locationName":"blockDeviceMapping"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S13","locationName":"iamInstanceProfile"},"ImageId":{"locationName":"imageId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"Monitoring":{"locationName":"monitoring","type":"structure","members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"NetworkInterfaces":{"shape":"Sj2","locationName":"networkInterfaceSet"},"Placement":{"shape":"Sj4","locationName":"placement"},"RamdiskId":{"locationName":"ramdiskId"},"SpotPrice":{"locationName":"spotPrice"},"SubnetId":{"locationName":"subnetId"},"UserData":{"locationName":"userData"},"WeightedCapacity":{"locationName":"weightedCapacity","type":"double"},"TagSpecifications":{"locationName":"tagSpecificationSet","type":"list","member":{"locationName":"item","type":"structure","members":{"ResourceType":{"locationName":"resourceType"},"Tags":{"shape":"Sl","locationName":"tag"}}}}}}},"SpotPrice":{"locationName":"spotPrice"},"TargetCapacity":{"locationName":"targetCapacity","type":"integer"},"TerminateInstancesWithExpiration":{"locationName":"terminateInstancesWithExpiration","type":"boolean"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"ReplaceUnhealthyInstances":{"locationName":"replaceUnhealthyInstances","type":"boolean"},"InstanceInterruptionBehavior":{"locationName":"instanceInterruptionBehavior"},"LoadBalancersConfig":{"locationName":"loadBalancersConfig","type":"structure","members":{"ClassicLoadBalancersConfig":{"locationName":"classicLoadBalancersConfig","type":"structure","required":["ClassicLoadBalancers"],"members":{"ClassicLoadBalancers":{"locationName":"classicLoadBalancers","type":"list","member":{"locationName":"item","type":"structure","required":["Name"],"members":{"Name":{"locationName":"name"}}}}}},"TargetGroupsConfig":{"locationName":"targetGroupsConfig","type":"structure","required":["TargetGroups"],"members":{"TargetGroups":{"locationName":"targetGroups","type":"list","member":{"locationName":"item","type":"structure","required":["Arn"],"members":{"Arn":{"locationName":"arn"}}}}}}}}}},"Sj2":{"type":"list","member":{"locationName":"item","type":"structure","members":{"AssociatePublicIpAddress":{"locationName":"associatePublicIpAddress","type":"boolean"},"DeleteOnTermination":{"locationName":"deleteOnTermination","type":"boolean"},"Description":{"locationName":"description"},"DeviceIndex":{"locationName":"deviceIndex","type":"integer"},"Groups":{"shape":"S5y","locationName":"SecurityGroupId"},"Ipv6AddressCount":{"locationName":"ipv6AddressCount","type":"integer"},"Ipv6Addresses":{"shape":"S5z","locationName":"ipv6AddressesSet","queryName":"Ipv6Addresses"},"NetworkInterfaceId":{"locationName":"networkInterfaceId"},"PrivateIpAddress":{"locationName":"privateIpAddress"},"PrivateIpAddresses":{"shape":"S61","locationName":"privateIpAddressesSet","queryName":"PrivateIpAddresses"},"SecondaryPrivateIpAddressCount":{"locationName":"secondaryPrivateIpAddressCount","type":"integer"},"SubnetId":{"locationName":"subnetId"}}}},"Sj4":{"type":"structure","members":{"AvailabilityZone":{"locationName":"availabilityZone"},"GroupName":{"locationName":"groupName"},"Tenancy":{"locationName":"tenancy"}}},"Sji":{"type":"list","member":{"locationName":"item","type":"structure","members":{"ActualBlockHourlyPrice":{"locationName":"actualBlockHourlyPrice"},"AvailabilityZoneGroup":{"locationName":"availabilityZoneGroup"},"BlockDurationMinutes":{"locationName":"blockDurationMinutes","type":"integer"},"CreateTime":{"locationName":"createTime","type":"timestamp"},"Fault":{"shape":"S7c","locationName":"fault"},"InstanceId":{"locationName":"instanceId"},"LaunchGroup":{"locationName":"launchGroup"},"LaunchSpecification":{"locationName":"launchSpecification","type":"structure","members":{"UserData":{"locationName":"userData"},"SecurityGroups":{"shape":"S67","locationName":"groupSet"},"AddressingType":{"locationName":"addressingType"},"BlockDeviceMappings":{"shape":"Sd8","locationName":"blockDeviceMapping"},"EbsOptimized":{"locationName":"ebsOptimized","type":"boolean"},"IamInstanceProfile":{"shape":"S13","locationName":"iamInstanceProfile"},"ImageId":{"locationName":"imageId"},"InstanceType":{"locationName":"instanceType"},"KernelId":{"locationName":"kernelId"},"KeyName":{"locationName":"keyName"},"NetworkInterfaces":{"shape":"Sj2","locationName":"networkInterfaceSet"},"Placement":{"shape":"Sj4","locationName":"placement"},"RamdiskId":{"locationName":"ramdiskId"},"SubnetId":{"locationName":"subnetId"},"Monitoring":{"shape":"Sjl","locationName":"monitoring"}}},"LaunchedAvailabilityZone":{"locationName":"launchedAvailabilityZone"},"ProductDescription":{"locationName":"productDescription"},"SpotInstanceRequestId":{"locationName":"spotInstanceRequestId"},"SpotPrice":{"locationName":"spotPrice"},"State":{"locationName":"state"},"Status":{"locationName":"status","type":"structure","members":{"Code":{"locationName":"code"},"Message":{"locationName":"message"},"UpdateTime":{"locationName":"updateTime","type":"timestamp"}}},"Tags":{"shape":"Sl","locationName":"tagSet"},"Type":{"locationName":"type"},"ValidFrom":{"locationName":"validFrom","type":"timestamp"},"ValidUntil":{"locationName":"validUntil","type":"timestamp"},"InstanceInterruptionBehavior":{"locationName":"instanceInterruptionBehavior"}}}},"Sjl":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"locationName":"enabled","type":"boolean"}}},"Sjz":{"type":"list","member":{"locationName":"item","type":"structure","members":{"FromPort":{"locationName":"fromPort","type":"integer"},"IpProtocol":{"locationName":"ipProtocol"},"IpRanges":{"locationName":"ipRanges","type":"list","member":{"locationName":"item"}},"PrefixListIds":{"locationName":"prefixListIds","type":"list","member":{"locationName":"item"}},"ToPort":{"locationName":"toPort","type":"integer"},"UserIdGroupPairs":{"locationName":"groups","type":"list","member":{"shape":"S28","locationName":"item"}}}}},"Skg":{"type":"list","member":{"locationName":"VolumeId"}},"Skz":{"type":"structure","members":{"VolumeId":{"locationName":"volumeId"},"ModificationState":{"locationName":"modificationState"},"StatusMessage":{"locationName":"statusMessage"},"TargetSize":{"locationName":"targetSize","type":"integer"},"TargetIops":{"locationName":"targetIops","type":"integer"},"TargetVolumeType":{"locationName":"targetVolumeType"},"OriginalSize":{"locationName":"originalSize","type":"integer"},"OriginalIops":{"locationName":"originalIops","type":"integer"},"OriginalVolumeType":{"locationName":"originalVolumeType"},"Progress":{"locationName":"progress","type":"long"},"StartTime":{"locationName":"startTime","type":"timestamp"},"EndTime":{"locationName":"endTime","type":"timestamp"}}},"Sl5":{"type":"list","member":{"locationName":"VpcId"}},"Smw":{"type":"list","member":{"locationName":"item"}},"Smy":{"type":"list","member":{"locationName":"item","type":"structure","members":{"CurrencyCode":{"locationName":"currencyCode"},"Duration":{"locationName":"duration","type":"integer"},"HostIdSet":{"shape":"Sch","locationName":"hostIdSet"},"HostReservationId":{"locationName":"hostReservationId"},"HourlyPrice":{"locationName":"hourlyPrice"},"InstanceFamily":{"locationName":"instanceFamily"},"PaymentOption":{"locationName":"paymentOption"},"UpfrontPrice":{"locationName":"upfrontPrice"}}}},"Sn4":{"type":"structure","members":{"HourlyPrice":{"locationName":"hourlyPrice"},"RemainingTotalValue":{"locationName":"remainingTotalValue"},"RemainingUpfrontValue":{"locationName":"remainingUpfrontValue"}}},"Snb":{"type":"structure","members":{"Comment":{},"UploadEnd":{"type":"timestamp"},"UploadSize":{"type":"double"},"UploadStart":{"type":"timestamp"}}},"Sne":{"type":"structure","members":{"S3Bucket":{},"S3Key":{}}},"Snj":{"type":"structure","required":["Bytes","Format","ImportManifestUrl"],"members":{"Bytes":{"locationName":"bytes","type":"long"},"Format":{"locationName":"format"},"ImportManifestUrl":{"locationName":"importManifestUrl"}}},"Snk":{"type":"structure","required":["Size"],"members":{"Size":{"locationName":"size","type":"long"}}},"Snm":{"type":"list","member":{"locationName":"SecurityGroup"}},"Snz":{"type":"list","member":{"locationName":"UserId"}},"So0":{"type":"list","member":{"locationName":"UserGroup"}},"So1":{"type":"list","member":{"locationName":"ProductCode"}},"So3":{"type":"list","member":{"locationName":"item","type":"structure","members":{"Group":{},"UserId":{}}}},"So8":{"type":"list","member":{"shape":"S4p","locationName":"item"}},"Sp3":{"type":"structure","members":{"AllowDnsResolutionFromRemoteVpc":{"type":"boolean"},"AllowEgressFromLocalClassicLinkToRemoteVpc":{"type":"boolean"},"AllowEgressFromLocalVpcToRemoteClassicLink":{"type":"boolean"}}},"Sp5":{"type":"structure","members":{"AllowDnsResolutionFromRemoteVpc":{"locationName":"allowDnsResolutionFromRemoteVpc","type":"boolean"},"AllowEgressFromLocalClassicLinkToRemoteVpc":{"locationName":"allowEgressFromLocalClassicLinkToRemoteVpc","type":"boolean"},"AllowEgressFromLocalVpcToRemoteClassicLink":{"locationName":"allowEgressFromLocalVpcToRemoteClassicLink","type":"boolean"}}},"Spb":{"type":"list","member":{"locationName":"item","type":"structure","members":{"InstanceId":{"locationName":"instanceId"},"Monitoring":{"shape":"Seu","locationName":"monitoring"}}}},"Sr4":{"type":"list","member":{"locationName":"SecurityGroupId"}},"Srf":{"type":"list","member":{"locationName":"item","type":"structure","members":{"CurrentState":{"shape":"Sef","locationName":"currentState"},"InstanceId":{"locationName":"instanceId"},"PreviousState":{"shape":"Sef","locationName":"previousState"}}}}}}

/***/ }),
/* 204 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeAccountAttributes":{"result_key":"AccountAttributes"},"DescribeAddresses":{"result_key":"Addresses"},"DescribeAvailabilityZones":{"result_key":"AvailabilityZones"},"DescribeBundleTasks":{"result_key":"BundleTasks"},"DescribeConversionTasks":{"result_key":"ConversionTasks"},"DescribeCustomerGateways":{"result_key":"CustomerGateways"},"DescribeDhcpOptions":{"result_key":"DhcpOptions"},"DescribeExportTasks":{"result_key":"ExportTasks"},"DescribeImages":{"result_key":"Images"},"DescribeInstanceStatus":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InstanceStatuses"},"DescribeInstances":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Reservations"},"DescribeInternetGateways":{"result_key":"InternetGateways"},"DescribeKeyPairs":{"result_key":"KeyPairs"},"DescribeNatGateways":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"NatGateways"},"DescribeNetworkAcls":{"result_key":"NetworkAcls"},"DescribeNetworkInterfaces":{"result_key":"NetworkInterfaces"},"DescribePlacementGroups":{"result_key":"PlacementGroups"},"DescribeRegions":{"result_key":"Regions"},"DescribeReservedInstances":{"result_key":"ReservedInstances"},"DescribeReservedInstancesListings":{"result_key":"ReservedInstancesListings"},"DescribeReservedInstancesModifications":{"input_token":"NextToken","output_token":"NextToken","result_key":"ReservedInstancesModifications"},"DescribeReservedInstancesOfferings":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ReservedInstancesOfferings"},"DescribeRouteTables":{"result_key":"RouteTables"},"DescribeSecurityGroups":{"result_key":"SecurityGroups"},"DescribeSnapshots":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Snapshots"},"DescribeSpotFleetRequests":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"SpotFleetRequestConfigs"},"DescribeSpotInstanceRequests":{"result_key":"SpotInstanceRequests"},"DescribeSpotPriceHistory":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"SpotPriceHistory"},"DescribeSubnets":{"result_key":"Subnets"},"DescribeTags":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Tags"},"DescribeVolumeStatus":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"VolumeStatuses"},"DescribeVolumes":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Volumes"},"DescribeVpcPeeringConnections":{"result_key":"VpcPeeringConnections"},"DescribeVpcs":{"result_key":"Vpcs"},"DescribeVpnConnections":{"result_key":"VpnConnections"},"DescribeVpnGateways":{"result_key":"VpnGateways"}}}

/***/ }),
/* 205 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"InstanceExists":{"delay":5,"maxAttempts":40,"operation":"DescribeInstances","acceptors":[{"matcher":"path","expected":true,"argument":"length(Reservations[]) > `0`","state":"success"},{"matcher":"error","expected":"InvalidInstanceID.NotFound","state":"retry"}]},"BundleTaskComplete":{"delay":15,"operation":"DescribeBundleTasks","maxAttempts":40,"acceptors":[{"expected":"complete","matcher":"pathAll","state":"success","argument":"BundleTasks[].State"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"BundleTasks[].State"}]},"ConversionTaskCancelled":{"delay":15,"operation":"DescribeConversionTasks","maxAttempts":40,"acceptors":[{"expected":"cancelled","matcher":"pathAll","state":"success","argument":"ConversionTasks[].State"}]},"ConversionTaskCompleted":{"delay":15,"operation":"DescribeConversionTasks","maxAttempts":40,"acceptors":[{"expected":"completed","matcher":"pathAll","state":"success","argument":"ConversionTasks[].State"},{"expected":"cancelled","matcher":"pathAny","state":"failure","argument":"ConversionTasks[].State"},{"expected":"cancelling","matcher":"pathAny","state":"failure","argument":"ConversionTasks[].State"}]},"ConversionTaskDeleted":{"delay":15,"operation":"DescribeConversionTasks","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"ConversionTasks[].State"}]},"CustomerGatewayAvailable":{"delay":15,"operation":"DescribeCustomerGateways","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"CustomerGateways[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"CustomerGateways[].State"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"CustomerGateways[].State"}]},"ExportTaskCancelled":{"delay":15,"operation":"DescribeExportTasks","maxAttempts":40,"acceptors":[{"expected":"cancelled","matcher":"pathAll","state":"success","argument":"ExportTasks[].State"}]},"ExportTaskCompleted":{"delay":15,"operation":"DescribeExportTasks","maxAttempts":40,"acceptors":[{"expected":"completed","matcher":"pathAll","state":"success","argument":"ExportTasks[].State"}]},"ImageExists":{"operation":"DescribeImages","maxAttempts":40,"delay":15,"acceptors":[{"matcher":"path","expected":true,"argument":"length(Images[]) > `0`","state":"success"},{"matcher":"error","expected":"InvalidAMIID.NotFound","state":"retry"}]},"ImageAvailable":{"operation":"DescribeImages","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"Images[].State","expected":"available"},{"state":"failure","matcher":"pathAny","argument":"Images[].State","expected":"failed"}]},"InstanceRunning":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"acceptors":[{"expected":"running","matcher":"pathAll","state":"success","argument":"Reservations[].Instances[].State.Name"},{"expected":"shutting-down","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"matcher":"error","expected":"InvalidInstanceID.NotFound","state":"retry"}]},"InstanceStatusOk":{"operation":"DescribeInstanceStatus","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"InstanceStatuses[].InstanceStatus.Status","expected":"ok"},{"matcher":"error","expected":"InvalidInstanceID.NotFound","state":"retry"}]},"InstanceStopped":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"acceptors":[{"expected":"stopped","matcher":"pathAll","state":"success","argument":"Reservations[].Instances[].State.Name"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"}]},"InstanceTerminated":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"acceptors":[{"expected":"terminated","matcher":"pathAll","state":"success","argument":"Reservations[].Instances[].State.Name"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Reservations[].Instances[].State.Name"}]},"KeyPairExists":{"operation":"DescribeKeyPairs","delay":5,"maxAttempts":6,"acceptors":[{"expected":true,"matcher":"path","state":"success","argument":"length(KeyPairs[].KeyName) > `0`"},{"expected":"InvalidKeyPair.NotFound","matcher":"error","state":"retry"}]},"NatGatewayAvailable":{"operation":"DescribeNatGateways","delay":15,"maxAttempts":40,"acceptors":[{"state":"success","matcher":"pathAll","argument":"NatGateways[].State","expected":"available"},{"state":"failure","matcher":"pathAny","argument":"NatGateways[].State","expected":"failed"},{"state":"failure","matcher":"pathAny","argument":"NatGateways[].State","expected":"deleting"},{"state":"failure","matcher":"pathAny","argument":"NatGateways[].State","expected":"deleted"},{"state":"retry","matcher":"error","expected":"NatGatewayNotFound"}]},"NetworkInterfaceAvailable":{"operation":"DescribeNetworkInterfaces","delay":20,"maxAttempts":10,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"NetworkInterfaces[].Status"},{"expected":"InvalidNetworkInterfaceID.NotFound","matcher":"error","state":"failure"}]},"PasswordDataAvailable":{"operation":"GetPasswordData","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"path","argument":"length(PasswordData) > `0`","expected":true}]},"SnapshotCompleted":{"delay":15,"operation":"DescribeSnapshots","maxAttempts":40,"acceptors":[{"expected":"completed","matcher":"pathAll","state":"success","argument":"Snapshots[].State"}]},"SpotInstanceRequestFulfilled":{"operation":"DescribeSpotInstanceRequests","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"SpotInstanceRequests[].Status.Code","expected":"fulfilled"},{"state":"success","matcher":"pathAll","argument":"SpotInstanceRequests[].Status.Code","expected":"request-canceled-and-instance-running"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"schedule-expired"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"canceled-before-fulfillment"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"bad-parameters"},{"state":"failure","matcher":"pathAny","argument":"SpotInstanceRequests[].Status.Code","expected":"system-error"},{"state":"retry","matcher":"error","expected":"InvalidSpotInstanceRequestID.NotFound"}]},"SubnetAvailable":{"delay":15,"operation":"DescribeSubnets","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Subnets[].State"}]},"SystemStatusOk":{"operation":"DescribeInstanceStatus","maxAttempts":40,"delay":15,"acceptors":[{"state":"success","matcher":"pathAll","argument":"InstanceStatuses[].SystemStatus.Status","expected":"ok"}]},"VolumeAvailable":{"delay":15,"operation":"DescribeVolumes","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Volumes[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"Volumes[].State"}]},"VolumeDeleted":{"delay":15,"operation":"DescribeVolumes","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"Volumes[].State"},{"matcher":"error","expected":"InvalidVolume.NotFound","state":"success"}]},"VolumeInUse":{"delay":15,"operation":"DescribeVolumes","maxAttempts":40,"acceptors":[{"expected":"in-use","matcher":"pathAll","state":"success","argument":"Volumes[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"Volumes[].State"}]},"VpcAvailable":{"delay":15,"operation":"DescribeVpcs","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Vpcs[].State"}]},"VpcExists":{"operation":"DescribeVpcs","delay":1,"maxAttempts":5,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"InvalidVpcID.NotFound","state":"retry"}]},"VpnConnectionAvailable":{"delay":15,"operation":"DescribeVpnConnections","maxAttempts":40,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"VpnConnections[].State"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"VpnConnections[].State"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"VpnConnections[].State"}]},"VpnConnectionDeleted":{"delay":15,"operation":"DescribeVpnConnections","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"VpnConnections[].State"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"VpnConnections[].State"}]},"VpcPeeringConnectionExists":{"delay":15,"operation":"DescribeVpcPeeringConnections","maxAttempts":40,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"InvalidVpcPeeringConnectionID.NotFound","state":"retry"}]},"VpcPeeringConnectionDeleted":{"delay":15,"operation":"DescribeVpcPeeringConnections","maxAttempts":40,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"VpcPeeringConnections[].Status.Code"},{"matcher":"error","expected":"InvalidVpcPeeringConnectionID.NotFound","state":"success"}]}}}

/***/ }),
/* 206 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-09-21","endpointPrefix":"ecr","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon ECR","serviceFullName":"Amazon EC2 Container Registry","signatureVersion":"v4","targetPrefix":"AmazonEC2ContainerRegistry_V20150921","uid":"ecr-2015-09-21"},"operations":{"BatchCheckLayerAvailability":{"input":{"type":"structure","required":["repositoryName","layerDigests"],"members":{"registryId":{},"repositoryName":{},"layerDigests":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"layers":{"type":"list","member":{"type":"structure","members":{"layerDigest":{},"layerAvailability":{},"layerSize":{"type":"long"},"mediaType":{}}}},"failures":{"type":"list","member":{"type":"structure","members":{"layerDigest":{},"failureCode":{},"failureReason":{}}}}}}},"BatchDeleteImage":{"input":{"type":"structure","required":["repositoryName","imageIds"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"}}},"output":{"type":"structure","members":{"imageIds":{"shape":"Si"},"failures":{"shape":"Sn"}}}},"BatchGetImage":{"input":{"type":"structure","required":["repositoryName","imageIds"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"},"acceptedMediaTypes":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"images":{"type":"list","member":{"shape":"Sv"}},"failures":{"shape":"Sn"}}}},"CompleteLayerUpload":{"input":{"type":"structure","required":["repositoryName","uploadId","layerDigests"],"members":{"registryId":{},"repositoryName":{},"uploadId":{},"layerDigests":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"uploadId":{},"layerDigest":{}}}},"CreateRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"repositoryName":{}}},"output":{"type":"structure","members":{"repository":{"shape":"S13"}}}},"DeleteLifecyclePolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"lastEvaluatedAt":{"type":"timestamp"}}}},"DeleteRepository":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"repository":{"shape":"S13"}}}},"DeleteRepositoryPolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"policyText":{}}}},"DescribeImages":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"type":"structure","members":{"tagStatus":{}}}}},"output":{"type":"structure","members":{"imageDetails":{"type":"list","member":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageDigest":{},"imageTags":{"shape":"S1p"},"imageSizeInBytes":{"type":"long"},"imagePushedAt":{"type":"timestamp"}}}},"nextToken":{}}}},"DescribeRepositories":{"input":{"type":"structure","members":{"registryId":{},"repositoryNames":{"type":"list","member":{}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"repositories":{"type":"list","member":{"shape":"S13"}},"nextToken":{}}}},"GetAuthorizationToken":{"input":{"type":"structure","members":{"registryIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"authorizationData":{"type":"list","member":{"type":"structure","members":{"authorizationToken":{},"expiresAt":{"type":"timestamp"},"proxyEndpoint":{}}}}}}},"GetDownloadUrlForLayer":{"input":{"type":"structure","required":["repositoryName","layerDigest"],"members":{"registryId":{},"repositoryName":{},"layerDigest":{}}},"output":{"type":"structure","members":{"downloadUrl":{},"layerDigest":{}}}},"GetLifecyclePolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"lastEvaluatedAt":{"type":"timestamp"}}}},"GetLifecyclePolicyPreview":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"imageIds":{"shape":"Si"},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"type":"structure","members":{"tagStatus":{}}}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"status":{},"nextToken":{},"previewResults":{"type":"list","member":{"type":"structure","members":{"imageTags":{"shape":"S1p"},"imageDigest":{},"imagePushedAt":{"type":"timestamp"},"action":{"type":"structure","members":{"type":{}}},"appliedRulePriority":{"type":"integer"}}}},"summary":{"type":"structure","members":{"expiringImageTotalCount":{"type":"integer"}}}}}},"GetRepositoryPolicy":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"policyText":{}}}},"InitiateLayerUpload":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{}}},"output":{"type":"structure","members":{"uploadId":{},"partSize":{"type":"long"}}}},"ListImages":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"nextToken":{},"maxResults":{"type":"integer"},"filter":{"type":"structure","members":{"tagStatus":{}}}}},"output":{"type":"structure","members":{"imageIds":{"shape":"Si"},"nextToken":{}}}},"PutImage":{"input":{"type":"structure","required":["repositoryName","imageManifest"],"members":{"registryId":{},"repositoryName":{},"imageManifest":{},"imageTag":{}}},"output":{"type":"structure","members":{"image":{"shape":"Sv"}}}},"PutLifecyclePolicy":{"input":{"type":"structure","required":["repositoryName","lifecyclePolicyText"],"members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{}}}},"SetRepositoryPolicy":{"input":{"type":"structure","required":["repositoryName","policyText"],"members":{"registryId":{},"repositoryName":{},"policyText":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"policyText":{}}}},"StartLifecyclePolicyPreview":{"input":{"type":"structure","required":["repositoryName"],"members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"lifecyclePolicyText":{},"status":{}}}},"UploadLayerPart":{"input":{"type":"structure","required":["repositoryName","uploadId","partFirstByte","partLastByte","layerPartBlob"],"members":{"registryId":{},"repositoryName":{},"uploadId":{},"partFirstByte":{"type":"long"},"partLastByte":{"type":"long"},"layerPartBlob":{"type":"blob"}}},"output":{"type":"structure","members":{"registryId":{},"repositoryName":{},"uploadId":{},"lastByteReceived":{"type":"long"}}}}},"shapes":{"Si":{"type":"list","member":{"shape":"Sj"}},"Sj":{"type":"structure","members":{"imageDigest":{},"imageTag":{}}},"Sn":{"type":"list","member":{"type":"structure","members":{"imageId":{"shape":"Sj"},"failureCode":{},"failureReason":{}}}},"Sv":{"type":"structure","members":{"registryId":{},"repositoryName":{},"imageId":{"shape":"Sj"},"imageManifest":{}}},"S13":{"type":"structure","members":{"repositoryArn":{},"registryId":{},"repositoryName":{},"repositoryUri":{},"createdAt":{"type":"timestamp"}}},"S1p":{"type":"list","member":{}}}}

/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeImages":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"imageDetails"},"DescribeRepositories":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"repositories"},"ListImages":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"imageIds"}}}

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-11-13","endpointPrefix":"ecs","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon ECS","serviceFullName":"Amazon EC2 Container Service","signatureVersion":"v4","targetPrefix":"AmazonEC2ContainerServiceV20141113","uid":"ecs-2014-11-13"},"operations":{"CreateCluster":{"input":{"type":"structure","members":{"clusterName":{}}},"output":{"type":"structure","members":{"cluster":{"shape":"S4"}}}},"CreateService":{"input":{"type":"structure","required":["serviceName","taskDefinition","desiredCount"],"members":{"cluster":{},"serviceName":{},"taskDefinition":{},"loadBalancers":{"shape":"S7"},"desiredCount":{"type":"integer"},"clientToken":{},"role":{},"deploymentConfiguration":{"shape":"Sa"},"placementConstraints":{"shape":"Sb"},"placementStrategy":{"shape":"Se"}}},"output":{"type":"structure","members":{"service":{"shape":"Si"}}}},"DeleteAttributes":{"input":{"type":"structure","required":["attributes"],"members":{"cluster":{},"attributes":{"shape":"Sp"}}},"output":{"type":"structure","members":{"attributes":{"shape":"Sp"}}}},"DeleteCluster":{"input":{"type":"structure","required":["cluster"],"members":{"cluster":{}}},"output":{"type":"structure","members":{"cluster":{"shape":"S4"}}}},"DeleteService":{"input":{"type":"structure","required":["service"],"members":{"cluster":{},"service":{}}},"output":{"type":"structure","members":{"service":{"shape":"Si"}}}},"DeregisterContainerInstance":{"input":{"type":"structure","required":["containerInstance"],"members":{"cluster":{},"containerInstance":{},"force":{"type":"boolean"}}},"output":{"type":"structure","members":{"containerInstance":{"shape":"S10"}}}},"DeregisterTaskDefinition":{"input":{"type":"structure","required":["taskDefinition"],"members":{"taskDefinition":{}}},"output":{"type":"structure","members":{"taskDefinition":{"shape":"S1b"}}}},"DescribeClusters":{"input":{"type":"structure","members":{"clusters":{"shape":"S16"}}},"output":{"type":"structure","members":{"clusters":{"type":"list","member":{"shape":"S4"}},"failures":{"shape":"S2e"}}}},"DescribeContainerInstances":{"input":{"type":"structure","required":["containerInstances"],"members":{"cluster":{},"containerInstances":{"shape":"S16"}}},"output":{"type":"structure","members":{"containerInstances":{"shape":"S2i"},"failures":{"shape":"S2e"}}}},"DescribeServices":{"input":{"type":"structure","required":["services"],"members":{"cluster":{},"services":{"shape":"S16"}}},"output":{"type":"structure","members":{"services":{"type":"list","member":{"shape":"Si"}},"failures":{"shape":"S2e"}}}},"DescribeTaskDefinition":{"input":{"type":"structure","required":["taskDefinition"],"members":{"taskDefinition":{}}},"output":{"type":"structure","members":{"taskDefinition":{"shape":"S1b"}}}},"DescribeTasks":{"input":{"type":"structure","required":["tasks"],"members":{"cluster":{},"tasks":{"shape":"S16"}}},"output":{"type":"structure","members":{"tasks":{"shape":"S2q"},"failures":{"shape":"S2e"}}}},"DiscoverPollEndpoint":{"input":{"type":"structure","members":{"containerInstance":{},"cluster":{}}},"output":{"type":"structure","members":{"endpoint":{},"telemetryEndpoint":{}}}},"ListAttributes":{"input":{"type":"structure","required":["targetType"],"members":{"cluster":{},"targetType":{},"attributeName":{},"attributeValue":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"attributes":{"shape":"Sp"},"nextToken":{}}}},"ListClusters":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"clusterArns":{"shape":"S16"},"nextToken":{}}}},"ListContainerInstances":{"input":{"type":"structure","members":{"cluster":{},"filter":{},"nextToken":{},"maxResults":{"type":"integer"},"status":{}}},"output":{"type":"structure","members":{"containerInstanceArns":{"shape":"S16"},"nextToken":{}}}},"ListServices":{"input":{"type":"structure","members":{"cluster":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"serviceArns":{"shape":"S16"},"nextToken":{}}}},"ListTaskDefinitionFamilies":{"input":{"type":"structure","members":{"familyPrefix":{},"status":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"families":{"shape":"S16"},"nextToken":{}}}},"ListTaskDefinitions":{"input":{"type":"structure","members":{"familyPrefix":{},"status":{},"sort":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"taskDefinitionArns":{"shape":"S16"},"nextToken":{}}}},"ListTasks":{"input":{"type":"structure","members":{"cluster":{},"containerInstance":{},"family":{},"nextToken":{},"maxResults":{"type":"integer"},"startedBy":{},"serviceName":{},"desiredStatus":{}}},"output":{"type":"structure","members":{"taskArns":{"shape":"S16"},"nextToken":{}}}},"PutAttributes":{"input":{"type":"structure","required":["attributes"],"members":{"cluster":{},"attributes":{"shape":"Sp"}}},"output":{"type":"structure","members":{"attributes":{"shape":"Sp"}}}},"RegisterContainerInstance":{"input":{"type":"structure","members":{"cluster":{},"instanceIdentityDocument":{},"instanceIdentityDocumentSignature":{},"totalResources":{"shape":"S13"},"versionInfo":{"shape":"S12"},"containerInstanceArn":{},"attributes":{"shape":"Sp"}}},"output":{"type":"structure","members":{"containerInstance":{"shape":"S10"}}}},"RegisterTaskDefinition":{"input":{"type":"structure","required":["family","containerDefinitions"],"members":{"family":{},"taskRoleArn":{},"networkMode":{},"containerDefinitions":{"shape":"S1c"},"volumes":{"shape":"S23"},"placementConstraints":{"shape":"S28"}}},"output":{"type":"structure","members":{"taskDefinition":{"shape":"S1b"}}}},"RunTask":{"input":{"type":"structure","required":["taskDefinition"],"members":{"cluster":{},"taskDefinition":{},"overrides":{"shape":"S2s"},"count":{"type":"integer"},"startedBy":{},"group":{},"placementConstraints":{"shape":"Sb"},"placementStrategy":{"shape":"Se"}}},"output":{"type":"structure","members":{"tasks":{"shape":"S2q"},"failures":{"shape":"S2e"}}}},"StartTask":{"input":{"type":"structure","required":["taskDefinition","containerInstances"],"members":{"cluster":{},"taskDefinition":{},"overrides":{"shape":"S2s"},"containerInstances":{"shape":"S16"},"startedBy":{},"group":{}}},"output":{"type":"structure","members":{"tasks":{"shape":"S2q"},"failures":{"shape":"S2e"}}}},"StopTask":{"input":{"type":"structure","required":["task"],"members":{"cluster":{},"task":{},"reason":{}}},"output":{"type":"structure","members":{"task":{"shape":"S2r"}}}},"SubmitContainerStateChange":{"input":{"type":"structure","members":{"cluster":{},"task":{},"containerName":{},"status":{},"exitCode":{"type":"integer"},"reason":{},"networkBindings":{"shape":"S2x"}}},"output":{"type":"structure","members":{"acknowledgment":{}}}},"SubmitTaskStateChange":{"input":{"type":"structure","members":{"cluster":{},"task":{},"status":{},"reason":{}}},"output":{"type":"structure","members":{"acknowledgment":{}}}},"UpdateContainerAgent":{"input":{"type":"structure","required":["containerInstance"],"members":{"cluster":{},"containerInstance":{}}},"output":{"type":"structure","members":{"containerInstance":{"shape":"S10"}}}},"UpdateContainerInstancesState":{"input":{"type":"structure","required":["containerInstances","status"],"members":{"cluster":{},"containerInstances":{"shape":"S16"},"status":{}}},"output":{"type":"structure","members":{"containerInstances":{"shape":"S2i"},"failures":{"shape":"S2e"}}}},"UpdateService":{"input":{"type":"structure","required":["service"],"members":{"cluster":{},"service":{},"desiredCount":{"type":"integer"},"taskDefinition":{},"deploymentConfiguration":{"shape":"Sa"}}},"output":{"type":"structure","members":{"service":{"shape":"Si"}}}}},"shapes":{"S4":{"type":"structure","members":{"clusterArn":{},"clusterName":{},"status":{},"registeredContainerInstancesCount":{"type":"integer"},"runningTasksCount":{"type":"integer"},"pendingTasksCount":{"type":"integer"},"activeServicesCount":{"type":"integer"}}},"S7":{"type":"list","member":{"type":"structure","members":{"targetGroupArn":{},"loadBalancerName":{},"containerName":{},"containerPort":{"type":"integer"}}}},"Sa":{"type":"structure","members":{"maximumPercent":{"type":"integer"},"minimumHealthyPercent":{"type":"integer"}}},"Sb":{"type":"list","member":{"type":"structure","members":{"type":{},"expression":{}}}},"Se":{"type":"list","member":{"type":"structure","members":{"type":{},"field":{}}}},"Si":{"type":"structure","members":{"serviceArn":{},"serviceName":{},"clusterArn":{},"loadBalancers":{"shape":"S7"},"status":{},"desiredCount":{"type":"integer"},"runningCount":{"type":"integer"},"pendingCount":{"type":"integer"},"taskDefinition":{},"deploymentConfiguration":{"shape":"Sa"},"deployments":{"type":"list","member":{"type":"structure","members":{"id":{},"status":{},"taskDefinition":{},"desiredCount":{"type":"integer"},"pendingCount":{"type":"integer"},"runningCount":{"type":"integer"},"createdAt":{"type":"timestamp"},"updatedAt":{"type":"timestamp"}}}},"roleArn":{},"events":{"type":"list","member":{"type":"structure","members":{"id":{},"createdAt":{"type":"timestamp"},"message":{}}}},"createdAt":{"type":"timestamp"},"placementConstraints":{"shape":"Sb"},"placementStrategy":{"shape":"Se"}}},"Sp":{"type":"list","member":{"shape":"Sq"}},"Sq":{"type":"structure","required":["name"],"members":{"name":{},"value":{},"targetType":{},"targetId":{}}},"S10":{"type":"structure","members":{"containerInstanceArn":{},"ec2InstanceId":{},"version":{"type":"long"},"versionInfo":{"shape":"S12"},"remainingResources":{"shape":"S13"},"registeredResources":{"shape":"S13"},"status":{},"agentConnected":{"type":"boolean"},"runningTasksCount":{"type":"integer"},"pendingTasksCount":{"type":"integer"},"agentUpdateStatus":{},"attributes":{"shape":"Sp"},"registeredAt":{"type":"timestamp"}}},"S12":{"type":"structure","members":{"agentVersion":{},"agentHash":{},"dockerVersion":{}}},"S13":{"type":"list","member":{"type":"structure","members":{"name":{},"type":{},"doubleValue":{"type":"double"},"longValue":{"type":"long"},"integerValue":{"type":"integer"},"stringSetValue":{"shape":"S16"}}}},"S16":{"type":"list","member":{}},"S1b":{"type":"structure","members":{"taskDefinitionArn":{},"containerDefinitions":{"shape":"S1c"},"family":{},"taskRoleArn":{},"networkMode":{},"revision":{"type":"integer"},"volumes":{"shape":"S23"},"status":{},"requiresAttributes":{"type":"list","member":{"shape":"Sq"}},"placementConstraints":{"shape":"S28"}}},"S1c":{"type":"list","member":{"type":"structure","members":{"name":{},"image":{},"cpu":{"type":"integer"},"memory":{"type":"integer"},"memoryReservation":{"type":"integer"},"links":{"shape":"S16"},"portMappings":{"type":"list","member":{"type":"structure","members":{"containerPort":{"type":"integer"},"hostPort":{"type":"integer"},"protocol":{}}}},"essential":{"type":"boolean"},"entryPoint":{"shape":"S16"},"command":{"shape":"S16"},"environment":{"shape":"S1h"},"mountPoints":{"type":"list","member":{"type":"structure","members":{"sourceVolume":{},"containerPath":{},"readOnly":{"type":"boolean"}}}},"volumesFrom":{"type":"list","member":{"type":"structure","members":{"sourceContainer":{},"readOnly":{"type":"boolean"}}}},"linuxParameters":{"type":"structure","members":{"capabilities":{"type":"structure","members":{"add":{"shape":"S16"},"drop":{"shape":"S16"}}},"devices":{"type":"list","member":{"type":"structure","required":["hostPath"],"members":{"hostPath":{},"containerPath":{},"permissions":{"type":"list","member":{}}}}},"initProcessEnabled":{"type":"boolean"}}},"hostname":{},"user":{},"workingDirectory":{},"disableNetworking":{"type":"boolean"},"privileged":{"type":"boolean"},"readonlyRootFilesystem":{"type":"boolean"},"dnsServers":{"shape":"S16"},"dnsSearchDomains":{"shape":"S16"},"extraHosts":{"type":"list","member":{"type":"structure","required":["hostname","ipAddress"],"members":{"hostname":{},"ipAddress":{}}}},"dockerSecurityOptions":{"shape":"S16"},"dockerLabels":{"type":"map","key":{},"value":{}},"ulimits":{"type":"list","member":{"type":"structure","required":["name","softLimit","hardLimit"],"members":{"name":{},"softLimit":{"type":"integer"},"hardLimit":{"type":"integer"}}}},"logConfiguration":{"type":"structure","required":["logDriver"],"members":{"logDriver":{},"options":{"type":"map","key":{},"value":{}}}}}}},"S1h":{"type":"list","member":{"type":"structure","members":{"name":{},"value":{}}}},"S23":{"type":"list","member":{"type":"structure","members":{"name":{},"host":{"type":"structure","members":{"sourcePath":{}}}}}},"S28":{"type":"list","member":{"type":"structure","members":{"type":{},"expression":{}}}},"S2e":{"type":"list","member":{"type":"structure","members":{"arn":{},"reason":{}}}},"S2i":{"type":"list","member":{"shape":"S10"}},"S2q":{"type":"list","member":{"shape":"S2r"}},"S2r":{"type":"structure","members":{"taskArn":{},"clusterArn":{},"taskDefinitionArn":{},"containerInstanceArn":{},"overrides":{"shape":"S2s"},"lastStatus":{},"desiredStatus":{},"containers":{"type":"list","member":{"type":"structure","members":{"containerArn":{},"taskArn":{},"name":{},"lastStatus":{},"exitCode":{"type":"integer"},"reason":{},"networkBindings":{"shape":"S2x"}}}},"startedBy":{},"version":{"type":"long"},"stoppedReason":{},"createdAt":{"type":"timestamp"},"startedAt":{"type":"timestamp"},"stoppedAt":{"type":"timestamp"},"group":{}}},"S2s":{"type":"structure","members":{"containerOverrides":{"type":"list","member":{"type":"structure","members":{"name":{},"command":{"shape":"S16"},"environment":{"shape":"S1h"},"cpu":{"type":"integer"},"memory":{"type":"integer"},"memoryReservation":{"type":"integer"}}}},"taskRoleArn":{}}},"S2x":{"type":"list","member":{"type":"structure","members":{"bindIP":{},"containerPort":{"type":"integer"},"hostPort":{"type":"integer"},"protocol":{}}}}}}

/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListClusters":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"clusterArns"},"ListContainerInstances":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"containerInstanceArns"},"ListServices":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"serviceArns"},"ListTaskDefinitionFamilies":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"families"},"ListTaskDefinitions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"taskDefinitionArns"},"ListTasks":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"taskArns"}}}

/***/ }),
/* 210 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"TasksRunning":{"delay":6,"operation":"DescribeTasks","maxAttempts":100,"acceptors":[{"expected":"STOPPED","matcher":"pathAny","state":"failure","argument":"tasks[].lastStatus"},{"expected":"MISSING","matcher":"pathAny","state":"failure","argument":"failures[].reason"},{"expected":"RUNNING","matcher":"pathAll","state":"success","argument":"tasks[].lastStatus"}]},"TasksStopped":{"delay":6,"operation":"DescribeTasks","maxAttempts":100,"acceptors":[{"expected":"STOPPED","matcher":"pathAll","state":"success","argument":"tasks[].lastStatus"}]},"ServicesStable":{"delay":15,"operation":"DescribeServices","maxAttempts":40,"acceptors":[{"expected":"MISSING","matcher":"pathAny","state":"failure","argument":"failures[].reason"},{"expected":"DRAINING","matcher":"pathAny","state":"failure","argument":"services[].status"},{"expected":"INACTIVE","matcher":"pathAny","state":"failure","argument":"services[].status"},{"expected":true,"matcher":"path","state":"success","argument":"length(services[?!(length(deployments) == `1` && runningCount == desiredCount)]) == `0`"}]},"ServicesInactive":{"delay":15,"operation":"DescribeServices","maxAttempts":40,"acceptors":[{"expected":"MISSING","matcher":"pathAny","state":"failure","argument":"failures[].reason"},{"expected":"INACTIVE","matcher":"pathAny","state":"success","argument":"services[].status"}]}}}

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-02-02","endpointPrefix":"elasticache","protocol":"query","serviceFullName":"Amazon ElastiCache","signatureVersion":"v4","uid":"elasticache-2015-02-02","xmlNamespace":"http://elasticache.amazonaws.com/doc/2015-02-02/"},"operations":{"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S3"}}},"output":{"shape":"S5","resultWrapper":"AddTagsToResourceResult"}},"AuthorizeCacheSecurityGroupIngress":{"input":{"type":"structure","required":["CacheSecurityGroupName","EC2SecurityGroupName","EC2SecurityGroupOwnerId"],"members":{"CacheSecurityGroupName":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeCacheSecurityGroupIngressResult","type":"structure","members":{"CacheSecurityGroup":{"shape":"S8"}}}},"CopySnapshot":{"input":{"type":"structure","required":["SourceSnapshotName","TargetSnapshotName"],"members":{"SourceSnapshotName":{},"TargetSnapshotName":{},"TargetBucket":{}}},"output":{"resultWrapper":"CopySnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"CreateCacheCluster":{"input":{"type":"structure","required":["CacheClusterId"],"members":{"CacheClusterId":{},"ReplicationGroupId":{},"AZMode":{},"PreferredAvailabilityZone":{},"PreferredAvailabilityZones":{"shape":"So"},"NumCacheNodes":{"type":"integer"},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"CacheParameterGroupName":{},"CacheSubnetGroupName":{},"CacheSecurityGroupNames":{"shape":"Sp"},"SecurityGroupIds":{"shape":"Sq"},"Tags":{"shape":"S3"},"SnapshotArns":{"shape":"Sr"},"SnapshotName":{},"PreferredMaintenanceWindow":{},"Port":{"type":"integer"},"NotificationTopicArn":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"AuthToken":{}}},"output":{"resultWrapper":"CreateCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"Su"}}}},"CreateCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName","CacheParameterGroupFamily","Description"],"members":{"CacheParameterGroupName":{},"CacheParameterGroupFamily":{},"Description":{}}},"output":{"resultWrapper":"CreateCacheParameterGroupResult","type":"structure","members":{"CacheParameterGroup":{"shape":"S19"}}}},"CreateCacheSecurityGroup":{"input":{"type":"structure","required":["CacheSecurityGroupName","Description"],"members":{"CacheSecurityGroupName":{},"Description":{}}},"output":{"resultWrapper":"CreateCacheSecurityGroupResult","type":"structure","members":{"CacheSecurityGroup":{"shape":"S8"}}}},"CreateCacheSubnetGroup":{"input":{"type":"structure","required":["CacheSubnetGroupName","CacheSubnetGroupDescription","SubnetIds"],"members":{"CacheSubnetGroupName":{},"CacheSubnetGroupDescription":{},"SubnetIds":{"shape":"S1d"}}},"output":{"resultWrapper":"CreateCacheSubnetGroupResult","type":"structure","members":{"CacheSubnetGroup":{"shape":"S1f"}}}},"CreateReplicationGroup":{"input":{"type":"structure","required":["ReplicationGroupId","ReplicationGroupDescription"],"members":{"ReplicationGroupId":{},"ReplicationGroupDescription":{},"PrimaryClusterId":{},"AutomaticFailoverEnabled":{"type":"boolean"},"NumCacheClusters":{"type":"integer"},"PreferredCacheClusterAZs":{"shape":"Sl"},"NumNodeGroups":{"type":"integer"},"ReplicasPerNodeGroup":{"type":"integer"},"NodeGroupConfiguration":{"type":"list","member":{"shape":"Sk","locationName":"NodeGroupConfiguration"}},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"CacheParameterGroupName":{},"CacheSubnetGroupName":{},"CacheSecurityGroupNames":{"shape":"Sp"},"SecurityGroupIds":{"shape":"Sq"},"Tags":{"shape":"S3"},"SnapshotArns":{"shape":"Sr"},"SnapshotName":{},"PreferredMaintenanceWindow":{},"Port":{"type":"integer"},"NotificationTopicArn":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"AuthToken":{},"TransitEncryptionEnabled":{"type":"boolean"},"AtRestEncryptionEnabled":{"type":"boolean"}}},"output":{"resultWrapper":"CreateReplicationGroupResult","type":"structure","members":{"ReplicationGroup":{"shape":"S1m"}}}},"CreateSnapshot":{"input":{"type":"structure","required":["SnapshotName"],"members":{"ReplicationGroupId":{},"CacheClusterId":{},"SnapshotName":{}}},"output":{"resultWrapper":"CreateSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"DeleteCacheCluster":{"input":{"type":"structure","required":["CacheClusterId"],"members":{"CacheClusterId":{},"FinalSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"Su"}}}},"DeleteCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName"],"members":{"CacheParameterGroupName":{}}}},"DeleteCacheSecurityGroup":{"input":{"type":"structure","required":["CacheSecurityGroupName"],"members":{"CacheSecurityGroupName":{}}}},"DeleteCacheSubnetGroup":{"input":{"type":"structure","required":["CacheSubnetGroupName"],"members":{"CacheSubnetGroupName":{}}}},"DeleteReplicationGroup":{"input":{"type":"structure","required":["ReplicationGroupId"],"members":{"ReplicationGroupId":{},"RetainPrimaryCluster":{"type":"boolean"},"FinalSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteReplicationGroupResult","type":"structure","members":{"ReplicationGroup":{"shape":"S1m"}}}},"DeleteSnapshot":{"input":{"type":"structure","required":["SnapshotName"],"members":{"SnapshotName":{}}},"output":{"resultWrapper":"DeleteSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"DescribeCacheClusters":{"input":{"type":"structure","members":{"CacheClusterId":{},"MaxRecords":{"type":"integer"},"Marker":{},"ShowCacheNodeInfo":{"type":"boolean"},"ShowCacheClustersNotInReplicationGroups":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeCacheClustersResult","type":"structure","members":{"Marker":{},"CacheClusters":{"type":"list","member":{"shape":"Su","locationName":"CacheCluster"}}}}},"DescribeCacheEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"CacheParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeCacheEngineVersionsResult","type":"structure","members":{"Marker":{},"CacheEngineVersions":{"type":"list","member":{"locationName":"CacheEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"CacheParameterGroupFamily":{},"CacheEngineDescription":{},"CacheEngineVersionDescription":{}}}}}}},"DescribeCacheParameterGroups":{"input":{"type":"structure","members":{"CacheParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheParameterGroupsResult","type":"structure","members":{"Marker":{},"CacheParameterGroups":{"type":"list","member":{"shape":"S19","locationName":"CacheParameterGroup"}}}}},"DescribeCacheParameters":{"input":{"type":"structure","required":["CacheParameterGroupName"],"members":{"CacheParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheParametersResult","type":"structure","members":{"Marker":{},"Parameters":{"shape":"S2k"},"CacheNodeTypeSpecificParameters":{"shape":"S2n"}}}},"DescribeCacheSecurityGroups":{"input":{"type":"structure","members":{"CacheSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheSecurityGroupsResult","type":"structure","members":{"Marker":{},"CacheSecurityGroups":{"type":"list","member":{"shape":"S8","locationName":"CacheSecurityGroup"}}}}},"DescribeCacheSubnetGroups":{"input":{"type":"structure","members":{"CacheSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCacheSubnetGroupsResult","type":"structure","members":{"Marker":{},"CacheSubnetGroups":{"type":"list","member":{"shape":"S1f","locationName":"CacheSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["CacheParameterGroupFamily"],"members":{"CacheParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"CacheParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2k"},"CacheNodeTypeSpecificParameters":{"shape":"S2n"}},"wrapper":true}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"Date":{"type":"timestamp"}}}}}}},"DescribeReplicationGroups":{"input":{"type":"structure","members":{"ReplicationGroupId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReplicationGroupsResult","type":"structure","members":{"Marker":{},"ReplicationGroups":{"type":"list","member":{"shape":"S1m","locationName":"ReplicationGroup"}}}}},"DescribeReservedCacheNodes":{"input":{"type":"structure","members":{"ReservedCacheNodeId":{},"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedCacheNodesResult","type":"structure","members":{"Marker":{},"ReservedCacheNodes":{"type":"list","member":{"shape":"S3b","locationName":"ReservedCacheNode"}}}}},"DescribeReservedCacheNodesOfferings":{"input":{"type":"structure","members":{"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedCacheNodesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedCacheNodesOfferings":{"type":"list","member":{"locationName":"ReservedCacheNodesOffering","type":"structure","members":{"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"ProductDescription":{},"OfferingType":{},"RecurringCharges":{"shape":"S3c"}},"wrapper":true}}}}},"DescribeSnapshots":{"input":{"type":"structure","members":{"ReplicationGroupId":{},"CacheClusterId":{},"SnapshotName":{},"SnapshotSource":{},"Marker":{},"MaxRecords":{"type":"integer"},"ShowNodeGroupConfig":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeSnapshotsResult","type":"structure","members":{"Marker":{},"Snapshots":{"type":"list","member":{"shape":"Sd","locationName":"Snapshot"}}}}},"ListAllowedNodeTypeModifications":{"input":{"type":"structure","members":{"CacheClusterId":{},"ReplicationGroupId":{}}},"output":{"resultWrapper":"ListAllowedNodeTypeModificationsResult","type":"structure","members":{"ScaleUpModifications":{"type":"list","member":{}}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{}}},"output":{"shape":"S5","resultWrapper":"ListTagsForResourceResult"}},"ModifyCacheCluster":{"input":{"type":"structure","required":["CacheClusterId"],"members":{"CacheClusterId":{},"NumCacheNodes":{"type":"integer"},"CacheNodeIdsToRemove":{"shape":"Sy"},"AZMode":{},"NewAvailabilityZones":{"shape":"So"},"CacheSecurityGroupNames":{"shape":"Sp"},"SecurityGroupIds":{"shape":"Sq"},"PreferredMaintenanceWindow":{},"NotificationTopicArn":{},"CacheParameterGroupName":{},"NotificationTopicStatus":{},"ApplyImmediately":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"CacheNodeType":{}}},"output":{"resultWrapper":"ModifyCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"Su"}}}},"ModifyCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName","ParameterNameValues"],"members":{"CacheParameterGroupName":{},"ParameterNameValues":{"shape":"S3s"}}},"output":{"shape":"S3u","resultWrapper":"ModifyCacheParameterGroupResult"}},"ModifyCacheSubnetGroup":{"input":{"type":"structure","required":["CacheSubnetGroupName"],"members":{"CacheSubnetGroupName":{},"CacheSubnetGroupDescription":{},"SubnetIds":{"shape":"S1d"}}},"output":{"resultWrapper":"ModifyCacheSubnetGroupResult","type":"structure","members":{"CacheSubnetGroup":{"shape":"S1f"}}}},"ModifyReplicationGroup":{"input":{"type":"structure","required":["ReplicationGroupId"],"members":{"ReplicationGroupId":{},"ReplicationGroupDescription":{},"PrimaryClusterId":{},"SnapshottingClusterId":{},"AutomaticFailoverEnabled":{"type":"boolean"},"CacheSecurityGroupNames":{"shape":"Sp"},"SecurityGroupIds":{"shape":"Sq"},"PreferredMaintenanceWindow":{},"NotificationTopicArn":{},"CacheParameterGroupName":{},"NotificationTopicStatus":{},"ApplyImmediately":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"CacheNodeType":{},"NodeGroupId":{}}},"output":{"resultWrapper":"ModifyReplicationGroupResult","type":"structure","members":{"ReplicationGroup":{"shape":"S1m"}}}},"ModifyReplicationGroupShardConfiguration":{"input":{"type":"structure","required":["ReplicationGroupId","NodeGroupCount","ApplyImmediately"],"members":{"ReplicationGroupId":{},"NodeGroupCount":{"type":"integer"},"ApplyImmediately":{"type":"boolean"},"ReshardingConfiguration":{"type":"list","member":{"locationName":"ReshardingConfiguration","type":"structure","members":{"PreferredAvailabilityZones":{"shape":"Sl"}}}},"NodeGroupsToRemove":{"type":"list","member":{"locationName":"NodeGroupToRemove"}}}},"output":{"resultWrapper":"ModifyReplicationGroupShardConfigurationResult","type":"structure","members":{"ReplicationGroup":{"shape":"S1m"}}}},"PurchaseReservedCacheNodesOffering":{"input":{"type":"structure","required":["ReservedCacheNodesOfferingId"],"members":{"ReservedCacheNodesOfferingId":{},"ReservedCacheNodeId":{},"CacheNodeCount":{"type":"integer"}}},"output":{"resultWrapper":"PurchaseReservedCacheNodesOfferingResult","type":"structure","members":{"ReservedCacheNode":{"shape":"S3b"}}}},"RebootCacheCluster":{"input":{"type":"structure","required":["CacheClusterId","CacheNodeIdsToReboot"],"members":{"CacheClusterId":{},"CacheNodeIdsToReboot":{"shape":"Sy"}}},"output":{"resultWrapper":"RebootCacheClusterResult","type":"structure","members":{"CacheCluster":{"shape":"Su"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}},"output":{"shape":"S5","resultWrapper":"RemoveTagsFromResourceResult"}},"ResetCacheParameterGroup":{"input":{"type":"structure","required":["CacheParameterGroupName"],"members":{"CacheParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"ParameterNameValues":{"shape":"S3s"}}},"output":{"shape":"S3u","resultWrapper":"ResetCacheParameterGroupResult"}},"RevokeCacheSecurityGroupIngress":{"input":{"type":"structure","required":["CacheSecurityGroupName","EC2SecurityGroupName","EC2SecurityGroupOwnerId"],"members":{"CacheSecurityGroupName":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeCacheSecurityGroupIngressResult","type":"structure","members":{"CacheSecurityGroup":{"shape":"S8"}}}},"TestFailover":{"input":{"type":"structure","required":["ReplicationGroupId","NodeGroupId"],"members":{"ReplicationGroupId":{},"NodeGroupId":{}}},"output":{"resultWrapper":"TestFailoverResult","type":"structure","members":{"ReplicationGroup":{"shape":"S1m"}}}}},"shapes":{"S3":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"S5":{"type":"structure","members":{"TagList":{"shape":"S3"}}},"S8":{"type":"structure","members":{"OwnerId":{},"CacheSecurityGroupName":{},"Description":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}}}},"wrapper":true},"Sd":{"type":"structure","members":{"SnapshotName":{},"ReplicationGroupId":{},"ReplicationGroupDescription":{},"CacheClusterId":{},"SnapshotStatus":{},"SnapshotSource":{},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"NumCacheNodes":{"type":"integer"},"PreferredAvailabilityZone":{},"CacheClusterCreateTime":{"type":"timestamp"},"PreferredMaintenanceWindow":{},"TopicArn":{},"Port":{"type":"integer"},"CacheParameterGroupName":{},"CacheSubnetGroupName":{},"VpcId":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"NumNodeGroups":{"type":"integer"},"AutomaticFailover":{},"NodeSnapshots":{"type":"list","member":{"locationName":"NodeSnapshot","type":"structure","members":{"CacheClusterId":{},"NodeGroupId":{},"CacheNodeId":{},"NodeGroupConfiguration":{"shape":"Sk"},"CacheSize":{},"CacheNodeCreateTime":{"type":"timestamp"},"SnapshotCreateTime":{"type":"timestamp"}},"wrapper":true}}},"wrapper":true},"Sk":{"type":"structure","members":{"Slots":{},"ReplicaCount":{"type":"integer"},"PrimaryAvailabilityZone":{},"ReplicaAvailabilityZones":{"shape":"Sl"}}},"Sl":{"type":"list","member":{"locationName":"AvailabilityZone"}},"So":{"type":"list","member":{"locationName":"PreferredAvailabilityZone"}},"Sp":{"type":"list","member":{"locationName":"CacheSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"SecurityGroupId"}},"Sr":{"type":"list","member":{"locationName":"SnapshotArn"}},"Su":{"type":"structure","members":{"CacheClusterId":{},"ConfigurationEndpoint":{"shape":"Sv"},"ClientDownloadLandingPage":{},"CacheNodeType":{},"Engine":{},"EngineVersion":{},"CacheClusterStatus":{},"NumCacheNodes":{"type":"integer"},"PreferredAvailabilityZone":{},"CacheClusterCreateTime":{"type":"timestamp"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"NumCacheNodes":{"type":"integer"},"CacheNodeIdsToRemove":{"shape":"Sy"},"EngineVersion":{},"CacheNodeType":{}}},"NotificationConfiguration":{"type":"structure","members":{"TopicArn":{},"TopicStatus":{}}},"CacheSecurityGroups":{"type":"list","member":{"locationName":"CacheSecurityGroup","type":"structure","members":{"CacheSecurityGroupName":{},"Status":{}}}},"CacheParameterGroup":{"type":"structure","members":{"CacheParameterGroupName":{},"ParameterApplyStatus":{},"CacheNodeIdsToReboot":{"shape":"Sy"}}},"CacheSubnetGroupName":{},"CacheNodes":{"type":"list","member":{"locationName":"CacheNode","type":"structure","members":{"CacheNodeId":{},"CacheNodeStatus":{},"CacheNodeCreateTime":{"type":"timestamp"},"Endpoint":{"shape":"Sv"},"ParameterGroupStatus":{},"SourceCacheNodeId":{},"CustomerAvailabilityZone":{}}}},"AutoMinorVersionUpgrade":{"type":"boolean"},"SecurityGroups":{"type":"list","member":{"type":"structure","members":{"SecurityGroupId":{},"Status":{}}}},"ReplicationGroupId":{},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"AuthTokenEnabled":{"type":"boolean"},"TransitEncryptionEnabled":{"type":"boolean"},"AtRestEncryptionEnabled":{"type":"boolean"}},"wrapper":true},"Sv":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"Sy":{"type":"list","member":{"locationName":"CacheNodeId"}},"S19":{"type":"structure","members":{"CacheParameterGroupName":{},"CacheParameterGroupFamily":{},"Description":{}},"wrapper":true},"S1d":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1f":{"type":"structure","members":{"CacheSubnetGroupName":{},"CacheSubnetGroupDescription":{},"VpcId":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"type":"structure","members":{"Name":{}},"wrapper":true}}}}},"wrapper":true},"S1m":{"type":"structure","members":{"ReplicationGroupId":{},"Description":{},"Status":{},"PendingModifiedValues":{"type":"structure","members":{"PrimaryClusterId":{},"AutomaticFailoverStatus":{},"Resharding":{"type":"structure","members":{"SlotMigration":{"type":"structure","members":{"ProgressPercentage":{"type":"double"}}}}}}},"MemberClusters":{"type":"list","member":{"locationName":"ClusterId"}},"NodeGroups":{"type":"list","member":{"locationName":"NodeGroup","type":"structure","members":{"NodeGroupId":{},"Status":{},"PrimaryEndpoint":{"shape":"Sv"},"Slots":{},"NodeGroupMembers":{"type":"list","member":{"locationName":"NodeGroupMember","type":"structure","members":{"CacheClusterId":{},"CacheNodeId":{},"ReadEndpoint":{"shape":"Sv"},"PreferredAvailabilityZone":{},"CurrentRole":{}}}}}}},"SnapshottingClusterId":{},"AutomaticFailover":{},"ConfigurationEndpoint":{"shape":"Sv"},"SnapshotRetentionLimit":{"type":"integer"},"SnapshotWindow":{},"ClusterEnabled":{"type":"boolean"},"CacheNodeType":{},"AuthTokenEnabled":{"type":"boolean"},"TransitEncryptionEnabled":{"type":"boolean"},"AtRestEncryptionEnabled":{"type":"boolean"}},"wrapper":true},"S2k":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ChangeType":{}}}},"S2n":{"type":"list","member":{"locationName":"CacheNodeTypeSpecificParameter","type":"structure","members":{"ParameterName":{},"Description":{},"Source":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"CacheNodeTypeSpecificValues":{"type":"list","member":{"locationName":"CacheNodeTypeSpecificValue","type":"structure","members":{"CacheNodeType":{},"Value":{}}}},"ChangeType":{}}}},"S3b":{"type":"structure","members":{"ReservedCacheNodeId":{},"ReservedCacheNodesOfferingId":{},"CacheNodeType":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CacheNodeCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"State":{},"RecurringCharges":{"shape":"S3c"}},"wrapper":true},"S3c":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S3s":{"type":"list","member":{"locationName":"ParameterNameValue","type":"structure","members":{"ParameterName":{},"ParameterValue":{}}}},"S3u":{"type":"structure","members":{"CacheParameterGroupName":{}}}}}

/***/ }),
/* 212 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeCacheClusters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheClusters"},"DescribeCacheEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheEngineVersions"},"DescribeCacheParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheParameterGroups"},"DescribeCacheParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeCacheSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheSecurityGroups"},"DescribeCacheSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"CacheSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeReplicationGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReplicationGroups"},"DescribeReservedCacheNodes":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedCacheNodes"},"DescribeReservedCacheNodesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedCacheNodesOfferings"},"DescribeSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Snapshots"}}}

/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"CacheClusterAvailable":{"acceptors":[{"argument":"CacheClusters[].CacheClusterStatus","expected":"available","matcher":"pathAll","state":"success"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"deleted","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"deleting","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"incompatible-network","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"restore-failed","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until ElastiCache cluster is available.","maxAttempts":40,"operation":"DescribeCacheClusters"},"CacheClusterDeleted":{"acceptors":[{"argument":"CacheClusters[].CacheClusterStatus","expected":"deleted","matcher":"pathAll","state":"success"},{"expected":"CacheClusterNotFound","matcher":"error","state":"success"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"available","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"creating","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"incompatible-network","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"modifying","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"restore-failed","matcher":"pathAny","state":"failure"},{"argument":"CacheClusters[].CacheClusterStatus","expected":"snapshotting","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until ElastiCache cluster is deleted.","maxAttempts":40,"operation":"DescribeCacheClusters"},"ReplicationGroupAvailable":{"acceptors":[{"argument":"ReplicationGroups[].Status","expected":"available","matcher":"pathAll","state":"success"},{"argument":"ReplicationGroups[].Status","expected":"deleted","matcher":"pathAny","state":"failure"}],"delay":15,"description":"Wait until ElastiCache replication group is available.","maxAttempts":40,"operation":"DescribeReplicationGroups"},"ReplicationGroupDeleted":{"acceptors":[{"argument":"ReplicationGroups[].Status","expected":"deleted","matcher":"pathAll","state":"success"},{"argument":"ReplicationGroups[].Status","expected":"available","matcher":"pathAny","state":"failure"},{"expected":"ReplicationGroupNotFoundFault","matcher":"error","state":"success"}],"delay":15,"description":"Wait until ElastiCache replication group is deleted.","maxAttempts":40,"operation":"DescribeReplicationGroups"}}}

/***/ }),
/* 214 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-12-01","endpointPrefix":"elasticbeanstalk","protocol":"query","serviceAbbreviation":"Elastic Beanstalk","serviceFullName":"AWS Elastic Beanstalk","signatureVersion":"v4","uid":"elasticbeanstalk-2010-12-01","xmlNamespace":"http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/"},"operations":{"AbortEnvironmentUpdate":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}}},"ApplyEnvironmentManagedAction":{"input":{"type":"structure","required":["ActionId"],"members":{"EnvironmentName":{},"EnvironmentId":{},"ActionId":{}}},"output":{"resultWrapper":"ApplyEnvironmentManagedActionResult","type":"structure","members":{"ActionId":{},"ActionDescription":{},"ActionType":{},"Status":{}}}},"CheckDNSAvailability":{"input":{"type":"structure","required":["CNAMEPrefix"],"members":{"CNAMEPrefix":{}}},"output":{"resultWrapper":"CheckDNSAvailabilityResult","type":"structure","members":{"Available":{"type":"boolean"},"FullyQualifiedCNAME":{}}}},"ComposeEnvironments":{"input":{"type":"structure","members":{"ApplicationName":{},"GroupName":{},"VersionLabels":{"type":"list","member":{}}}},"output":{"shape":"Si","resultWrapper":"ComposeEnvironmentsResult"}},"CreateApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"Description":{},"ResourceLifecycleConfig":{"shape":"S17"}}},"output":{"shape":"S1d","resultWrapper":"CreateApplicationResult"}},"CreateApplicationVersion":{"input":{"type":"structure","required":["ApplicationName","VersionLabel"],"members":{"ApplicationName":{},"VersionLabel":{},"Description":{},"SourceBuildInformation":{"shape":"S1i"},"SourceBundle":{"shape":"S1m"},"BuildConfiguration":{"type":"structure","required":["CodeBuildServiceRole","Image"],"members":{"ArtifactName":{},"CodeBuildServiceRole":{},"ComputeType":{},"Image":{},"TimeoutInMinutes":{"type":"integer"}}},"AutoCreateApplication":{"type":"boolean"},"Process":{"type":"boolean"}}},"output":{"shape":"S1u","resultWrapper":"CreateApplicationVersionResult"}},"CreateConfigurationTemplate":{"input":{"type":"structure","required":["ApplicationName","TemplateName"],"members":{"ApplicationName":{},"TemplateName":{},"SolutionStackName":{},"PlatformArn":{},"SourceConfiguration":{"type":"structure","members":{"ApplicationName":{},"TemplateName":{}}},"EnvironmentId":{},"Description":{},"OptionSettings":{"shape":"S1z"}}},"output":{"shape":"S25","resultWrapper":"CreateConfigurationTemplateResult"}},"CreateEnvironment":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"EnvironmentName":{},"GroupName":{},"Description":{},"CNAMEPrefix":{},"Tier":{"shape":"S11"},"Tags":{"type":"list","member":{"shape":"S29"}},"VersionLabel":{},"TemplateName":{},"SolutionStackName":{},"PlatformArn":{},"OptionSettings":{"shape":"S1z"},"OptionsToRemove":{"shape":"S2c"}}},"output":{"shape":"Sk","resultWrapper":"CreateEnvironmentResult"}},"CreatePlatformVersion":{"input":{"type":"structure","required":["PlatformName","PlatformVersion","PlatformDefinitionBundle"],"members":{"PlatformName":{},"PlatformVersion":{},"PlatformDefinitionBundle":{"shape":"S1m"},"EnvironmentName":{},"OptionSettings":{"shape":"S1z"}}},"output":{"resultWrapper":"CreatePlatformVersionResult","type":"structure","members":{"PlatformSummary":{"shape":"S2i"},"Builder":{"type":"structure","members":{"ARN":{}}}}}},"CreateStorageLocation":{"output":{"resultWrapper":"CreateStorageLocationResult","type":"structure","members":{"S3Bucket":{}}}},"DeleteApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"TerminateEnvByForce":{"type":"boolean"}}}},"DeleteApplicationVersion":{"input":{"type":"structure","required":["ApplicationName","VersionLabel"],"members":{"ApplicationName":{},"VersionLabel":{},"DeleteSourceBundle":{"type":"boolean"}}}},"DeleteConfigurationTemplate":{"input":{"type":"structure","required":["ApplicationName","TemplateName"],"members":{"ApplicationName":{},"TemplateName":{}}}},"DeleteEnvironmentConfiguration":{"input":{"type":"structure","required":["ApplicationName","EnvironmentName"],"members":{"ApplicationName":{},"EnvironmentName":{}}}},"DeletePlatformVersion":{"input":{"type":"structure","members":{"PlatformArn":{}}},"output":{"resultWrapper":"DeletePlatformVersionResult","type":"structure","members":{"PlatformSummary":{"shape":"S2i"}}}},"DescribeApplicationVersions":{"input":{"type":"structure","members":{"ApplicationName":{},"VersionLabels":{"shape":"S1f"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeApplicationVersionsResult","type":"structure","members":{"ApplicationVersions":{"type":"list","member":{"shape":"S1v"}},"NextToken":{}}}},"DescribeApplications":{"input":{"type":"structure","members":{"ApplicationNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeApplicationsResult","type":"structure","members":{"Applications":{"type":"list","member":{"shape":"S1e"}}}}},"DescribeConfigurationOptions":{"input":{"type":"structure","members":{"ApplicationName":{},"TemplateName":{},"EnvironmentName":{},"SolutionStackName":{},"PlatformArn":{},"Options":{"shape":"S2c"}}},"output":{"resultWrapper":"DescribeConfigurationOptionsResult","type":"structure","members":{"SolutionStackName":{},"PlatformArn":{},"Options":{"type":"list","member":{"type":"structure","members":{"Namespace":{},"Name":{},"DefaultValue":{},"ChangeSeverity":{},"UserDefined":{"type":"boolean"},"ValueType":{},"ValueOptions":{"type":"list","member":{}},"MinValue":{"type":"integer"},"MaxValue":{"type":"integer"},"MaxLength":{"type":"integer"},"Regex":{"type":"structure","members":{"Pattern":{},"Label":{}}}}}}}}},"DescribeConfigurationSettings":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"TemplateName":{},"EnvironmentName":{}}},"output":{"resultWrapper":"DescribeConfigurationSettingsResult","type":"structure","members":{"ConfigurationSettings":{"type":"list","member":{"shape":"S25"}}}}},"DescribeEnvironmentHealth":{"input":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"AttributeNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeEnvironmentHealthResult","type":"structure","members":{"EnvironmentName":{},"HealthStatus":{},"Status":{},"Color":{},"Causes":{"shape":"S3y"},"ApplicationMetrics":{"shape":"S40"},"InstancesHealth":{"type":"structure","members":{"NoData":{"type":"integer"},"Unknown":{"type":"integer"},"Pending":{"type":"integer"},"Ok":{"type":"integer"},"Info":{"type":"integer"},"Warning":{"type":"integer"},"Degraded":{"type":"integer"},"Severe":{"type":"integer"}}},"RefreshedAt":{"type":"timestamp"}}}},"DescribeEnvironmentManagedActionHistory":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{},"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"DescribeEnvironmentManagedActionHistoryResult","type":"structure","members":{"ManagedActionHistoryItems":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"ActionType":{},"ActionDescription":{},"FailureType":{},"Status":{},"FailureDescription":{},"ExecutedTime":{"type":"timestamp"},"FinishedTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeEnvironmentManagedActions":{"input":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"Status":{}}},"output":{"resultWrapper":"DescribeEnvironmentManagedActionsResult","type":"structure","members":{"ManagedActions":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"ActionDescription":{},"ActionType":{},"Status":{},"WindowStartTime":{"type":"timestamp"}}}}}}},"DescribeEnvironmentResources":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}},"output":{"resultWrapper":"DescribeEnvironmentResourcesResult","type":"structure","members":{"EnvironmentResources":{"type":"structure","members":{"EnvironmentName":{},"AutoScalingGroups":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"Instances":{"type":"list","member":{"type":"structure","members":{"Id":{}}}},"LaunchConfigurations":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"LoadBalancers":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"Triggers":{"type":"list","member":{"type":"structure","members":{"Name":{}}}},"Queues":{"type":"list","member":{"type":"structure","members":{"Name":{},"URL":{}}}}}}}}},"DescribeEnvironments":{"input":{"type":"structure","members":{"ApplicationName":{},"VersionLabel":{},"EnvironmentIds":{"type":"list","member":{}},"EnvironmentNames":{"type":"list","member":{}},"IncludeDeleted":{"type":"boolean"},"IncludedDeletedBackTo":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"shape":"Si","resultWrapper":"DescribeEnvironmentsResult"}},"DescribeEvents":{"input":{"type":"structure","members":{"ApplicationName":{},"VersionLabel":{},"TemplateName":{},"EnvironmentId":{},"EnvironmentName":{},"PlatformArn":{},"RequestId":{},"Severity":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Events":{"type":"list","member":{"type":"structure","members":{"EventDate":{"type":"timestamp"},"Message":{},"ApplicationName":{},"VersionLabel":{},"TemplateName":{},"EnvironmentName":{},"PlatformArn":{},"RequestId":{},"Severity":{}}}},"NextToken":{}}}},"DescribeInstancesHealth":{"input":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"AttributeNames":{"type":"list","member":{}},"NextToken":{}}},"output":{"resultWrapper":"DescribeInstancesHealthResult","type":"structure","members":{"InstanceHealthList":{"type":"list","member":{"type":"structure","members":{"InstanceId":{},"HealthStatus":{},"Color":{},"Causes":{"shape":"S3y"},"LaunchedAt":{"type":"timestamp"},"ApplicationMetrics":{"shape":"S40"},"System":{"type":"structure","members":{"CPUUtilization":{"type":"structure","members":{"User":{"type":"double"},"Nice":{"type":"double"},"System":{"type":"double"},"Idle":{"type":"double"},"IOWait":{"type":"double"},"IRQ":{"type":"double"},"SoftIRQ":{"type":"double"}}},"LoadAverage":{"type":"list","member":{"type":"double"}}}},"Deployment":{"type":"structure","members":{"VersionLabel":{},"DeploymentId":{"type":"long"},"Status":{},"DeploymentTime":{"type":"timestamp"}}},"AvailabilityZone":{},"InstanceType":{}}}},"RefreshedAt":{"type":"timestamp"},"NextToken":{}}}},"DescribePlatformVersion":{"input":{"type":"structure","members":{"PlatformArn":{}}},"output":{"resultWrapper":"DescribePlatformVersionResult","type":"structure","members":{"PlatformDescription":{"type":"structure","members":{"PlatformArn":{},"PlatformOwner":{},"PlatformName":{},"PlatformVersion":{},"SolutionStackName":{},"PlatformStatus":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"PlatformCategory":{},"Description":{},"Maintainer":{},"OperatingSystemName":{},"OperatingSystemVersion":{},"ProgrammingLanguages":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{}}}},"Frameworks":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{}}}},"CustomAmiList":{"type":"list","member":{"type":"structure","members":{"VirtualizationType":{},"ImageId":{}}}},"SupportedTierList":{"shape":"S2o"},"SupportedAddonList":{"shape":"S2q"}}}}}},"ListAvailableSolutionStacks":{"output":{"resultWrapper":"ListAvailableSolutionStacksResult","type":"structure","members":{"SolutionStacks":{"type":"list","member":{}},"SolutionStackDetails":{"type":"list","member":{"type":"structure","members":{"SolutionStackName":{},"PermittedFileTypes":{"type":"list","member":{}}}}}}}},"ListPlatformVersions":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","members":{"Type":{},"Operator":{},"Values":{"type":"list","member":{}}}}},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"ListPlatformVersionsResult","type":"structure","members":{"PlatformSummaryList":{"type":"list","member":{"shape":"S2i"}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"ResourceArn":{},"ResourceTags":{"shape":"S6q"}}}},"RebuildEnvironment":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}}},"RequestEnvironmentInfo":{"input":{"type":"structure","required":["InfoType"],"members":{"EnvironmentId":{},"EnvironmentName":{},"InfoType":{}}}},"RestartAppServer":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{}}}},"RetrieveEnvironmentInfo":{"input":{"type":"structure","required":["InfoType"],"members":{"EnvironmentId":{},"EnvironmentName":{},"InfoType":{}}},"output":{"resultWrapper":"RetrieveEnvironmentInfoResult","type":"structure","members":{"EnvironmentInfo":{"type":"list","member":{"type":"structure","members":{"InfoType":{},"Ec2InstanceId":{},"SampleTimestamp":{"type":"timestamp"},"Message":{}}}}}}},"SwapEnvironmentCNAMEs":{"input":{"type":"structure","members":{"SourceEnvironmentId":{},"SourceEnvironmentName":{},"DestinationEnvironmentId":{},"DestinationEnvironmentName":{}}}},"TerminateEnvironment":{"input":{"type":"structure","members":{"EnvironmentId":{},"EnvironmentName":{},"TerminateResources":{"type":"boolean"},"ForceTerminate":{"type":"boolean"}}},"output":{"shape":"Sk","resultWrapper":"TerminateEnvironmentResult"}},"UpdateApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"Description":{}}},"output":{"shape":"S1d","resultWrapper":"UpdateApplicationResult"}},"UpdateApplicationResourceLifecycle":{"input":{"type":"structure","required":["ApplicationName","ResourceLifecycleConfig"],"members":{"ApplicationName":{},"ResourceLifecycleConfig":{"shape":"S17"}}},"output":{"resultWrapper":"UpdateApplicationResourceLifecycleResult","type":"structure","members":{"ApplicationName":{},"ResourceLifecycleConfig":{"shape":"S17"}}}},"UpdateApplicationVersion":{"input":{"type":"structure","required":["ApplicationName","VersionLabel"],"members":{"ApplicationName":{},"VersionLabel":{},"Description":{}}},"output":{"shape":"S1u","resultWrapper":"UpdateApplicationVersionResult"}},"UpdateConfigurationTemplate":{"input":{"type":"structure","required":["ApplicationName","TemplateName"],"members":{"ApplicationName":{},"TemplateName":{},"Description":{},"OptionSettings":{"shape":"S1z"},"OptionsToRemove":{"shape":"S2c"}}},"output":{"shape":"S25","resultWrapper":"UpdateConfigurationTemplateResult"}},"UpdateEnvironment":{"input":{"type":"structure","members":{"ApplicationName":{},"EnvironmentId":{},"EnvironmentName":{},"GroupName":{},"Description":{},"Tier":{"shape":"S11"},"VersionLabel":{},"TemplateName":{},"SolutionStackName":{},"PlatformArn":{},"OptionSettings":{"shape":"S1z"},"OptionsToRemove":{"shape":"S2c"}}},"output":{"shape":"Sk","resultWrapper":"UpdateEnvironmentResult"}},"UpdateTagsForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"TagsToAdd":{"shape":"S6q"},"TagsToRemove":{"type":"list","member":{}}}}},"ValidateConfigurationSettings":{"input":{"type":"structure","required":["ApplicationName","OptionSettings"],"members":{"ApplicationName":{},"TemplateName":{},"EnvironmentName":{},"OptionSettings":{"shape":"S1z"}}},"output":{"resultWrapper":"ValidateConfigurationSettingsResult","type":"structure","members":{"Messages":{"type":"list","member":{"type":"structure","members":{"Message":{},"Severity":{},"Namespace":{},"OptionName":{}}}}}}}},"shapes":{"Si":{"type":"structure","members":{"Environments":{"type":"list","member":{"shape":"Sk"}},"NextToken":{}}},"Sk":{"type":"structure","members":{"EnvironmentName":{},"EnvironmentId":{},"ApplicationName":{},"VersionLabel":{},"SolutionStackName":{},"PlatformArn":{},"TemplateName":{},"Description":{},"EndpointURL":{},"CNAME":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"Status":{},"AbortableOperationInProgress":{"type":"boolean"},"Health":{},"HealthStatus":{},"Resources":{"type":"structure","members":{"LoadBalancer":{"type":"structure","members":{"LoadBalancerName":{},"Domain":{},"Listeners":{"type":"list","member":{"type":"structure","members":{"Protocol":{},"Port":{"type":"integer"}}}}}}}},"Tier":{"shape":"S11"},"EnvironmentLinks":{"type":"list","member":{"type":"structure","members":{"LinkName":{},"EnvironmentName":{}}}},"EnvironmentArn":{}}},"S11":{"type":"structure","members":{"Name":{},"Type":{},"Version":{}}},"S17":{"type":"structure","members":{"ServiceRole":{},"VersionLifecycleConfig":{"type":"structure","members":{"MaxCountRule":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"MaxCount":{"type":"integer"},"DeleteSourceFromS3":{"type":"boolean"}}},"MaxAgeRule":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"MaxAgeInDays":{"type":"integer"},"DeleteSourceFromS3":{"type":"boolean"}}}}}}},"S1d":{"type":"structure","members":{"Application":{"shape":"S1e"}}},"S1e":{"type":"structure","members":{"ApplicationName":{},"Description":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"Versions":{"shape":"S1f"},"ConfigurationTemplates":{"type":"list","member":{}},"ResourceLifecycleConfig":{"shape":"S17"}}},"S1f":{"type":"list","member":{}},"S1i":{"type":"structure","required":["SourceType","SourceRepository","SourceLocation"],"members":{"SourceType":{},"SourceRepository":{},"SourceLocation":{}}},"S1m":{"type":"structure","members":{"S3Bucket":{},"S3Key":{}}},"S1u":{"type":"structure","members":{"ApplicationVersion":{"shape":"S1v"}}},"S1v":{"type":"structure","members":{"ApplicationName":{},"Description":{},"VersionLabel":{},"SourceBuildInformation":{"shape":"S1i"},"BuildArn":{},"SourceBundle":{"shape":"S1m"},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"Status":{}}},"S1z":{"type":"list","member":{"type":"structure","members":{"ResourceName":{},"Namespace":{},"OptionName":{},"Value":{}}}},"S25":{"type":"structure","members":{"SolutionStackName":{},"PlatformArn":{},"ApplicationName":{},"TemplateName":{},"Description":{},"EnvironmentName":{},"DeploymentStatus":{},"DateCreated":{"type":"timestamp"},"DateUpdated":{"type":"timestamp"},"OptionSettings":{"shape":"S1z"}}},"S29":{"type":"structure","members":{"Key":{},"Value":{}}},"S2c":{"type":"list","member":{"type":"structure","members":{"ResourceName":{},"Namespace":{},"OptionName":{}}}},"S2i":{"type":"structure","members":{"PlatformArn":{},"PlatformOwner":{},"PlatformStatus":{},"PlatformCategory":{},"OperatingSystemName":{},"OperatingSystemVersion":{},"SupportedTierList":{"shape":"S2o"},"SupportedAddonList":{"shape":"S2q"}}},"S2o":{"type":"list","member":{}},"S2q":{"type":"list","member":{}},"S3y":{"type":"list","member":{}},"S40":{"type":"structure","members":{"Duration":{"type":"integer"},"RequestCount":{"type":"integer"},"StatusCodes":{"type":"structure","members":{"Status2xx":{"type":"integer"},"Status3xx":{"type":"integer"},"Status4xx":{"type":"integer"},"Status5xx":{"type":"integer"}}},"Latency":{"type":"structure","members":{"P999":{"type":"double"},"P99":{"type":"double"},"P95":{"type":"double"},"P90":{"type":"double"},"P85":{"type":"double"},"P75":{"type":"double"},"P50":{"type":"double"},"P10":{"type":"double"}}}}},"S6q":{"type":"list","member":{"shape":"S29"}}}}

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeApplicationVersions":{"result_key":"ApplicationVersions"},"DescribeApplications":{"result_key":"Applications"},"DescribeConfigurationOptions":{"result_key":"Options"},"DescribeEnvironments":{"result_key":"Environments"},"DescribeEvents":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"Events"},"ListAvailableSolutionStacks":{"result_key":"SolutionStacks"}}}

/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-02-01","endpointPrefix":"elasticfilesystem","protocol":"rest-json","serviceAbbreviation":"EFS","serviceFullName":"Amazon Elastic File System","signatureVersion":"v4","uid":"elasticfilesystem-2015-02-01"},"operations":{"CreateFileSystem":{"http":{"requestUri":"/2015-02-01/file-systems","responseCode":201},"input":{"type":"structure","required":["CreationToken"],"members":{"CreationToken":{},"PerformanceMode":{},"Encrypted":{"type":"boolean"},"KmsKeyId":{}}},"output":{"shape":"S6"}},"CreateMountTarget":{"http":{"requestUri":"/2015-02-01/mount-targets","responseCode":200},"input":{"type":"structure","required":["FileSystemId","SubnetId"],"members":{"FileSystemId":{},"SubnetId":{},"IpAddress":{},"SecurityGroups":{"shape":"Si"}}},"output":{"shape":"Sk"}},"CreateTags":{"http":{"requestUri":"/2015-02-01/create-tags/{FileSystemId}","responseCode":204},"input":{"type":"structure","required":["FileSystemId","Tags"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"Tags":{"shape":"So"}}}},"DeleteFileSystem":{"http":{"method":"DELETE","requestUri":"/2015-02-01/file-systems/{FileSystemId}","responseCode":204},"input":{"type":"structure","required":["FileSystemId"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}}},"DeleteMountTarget":{"http":{"method":"DELETE","requestUri":"/2015-02-01/mount-targets/{MountTargetId}","responseCode":204},"input":{"type":"structure","required":["MountTargetId"],"members":{"MountTargetId":{"location":"uri","locationName":"MountTargetId"}}}},"DeleteTags":{"http":{"requestUri":"/2015-02-01/delete-tags/{FileSystemId}","responseCode":204},"input":{"type":"structure","required":["FileSystemId","TagKeys"],"members":{"FileSystemId":{"location":"uri","locationName":"FileSystemId"},"TagKeys":{"type":"list","member":{}}}}},"DescribeFileSystems":{"http":{"method":"GET","requestUri":"/2015-02-01/file-systems","responseCode":200},"input":{"type":"structure","members":{"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"},"Marker":{"location":"querystring","locationName":"Marker"},"CreationToken":{"location":"querystring","locationName":"CreationToken"},"FileSystemId":{"location":"querystring","locationName":"FileSystemId"}}},"output":{"type":"structure","members":{"Marker":{},"FileSystems":{"type":"list","member":{"shape":"S6"}},"NextMarker":{}}}},"DescribeMountTargetSecurityGroups":{"http":{"method":"GET","requestUri":"/2015-02-01/mount-targets/{MountTargetId}/security-groups","responseCode":200},"input":{"type":"structure","required":["MountTargetId"],"members":{"MountTargetId":{"location":"uri","locationName":"MountTargetId"}}},"output":{"type":"structure","required":["SecurityGroups"],"members":{"SecurityGroups":{"shape":"Si"}}}},"DescribeMountTargets":{"http":{"method":"GET","requestUri":"/2015-02-01/mount-targets","responseCode":200},"input":{"type":"structure","members":{"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"},"Marker":{"location":"querystring","locationName":"Marker"},"FileSystemId":{"location":"querystring","locationName":"FileSystemId"},"MountTargetId":{"location":"querystring","locationName":"MountTargetId"}}},"output":{"type":"structure","members":{"Marker":{},"MountTargets":{"type":"list","member":{"shape":"Sk"}},"NextMarker":{}}}},"DescribeTags":{"http":{"method":"GET","requestUri":"/2015-02-01/tags/{FileSystemId}/","responseCode":200},"input":{"type":"structure","required":["FileSystemId"],"members":{"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"},"Marker":{"location":"querystring","locationName":"Marker"},"FileSystemId":{"location":"uri","locationName":"FileSystemId"}}},"output":{"type":"structure","required":["Tags"],"members":{"Marker":{},"Tags":{"shape":"So"},"NextMarker":{}}}},"ModifyMountTargetSecurityGroups":{"http":{"method":"PUT","requestUri":"/2015-02-01/mount-targets/{MountTargetId}/security-groups","responseCode":204},"input":{"type":"structure","required":["MountTargetId"],"members":{"MountTargetId":{"location":"uri","locationName":"MountTargetId"},"SecurityGroups":{"shape":"Si"}}}}},"shapes":{"S6":{"type":"structure","required":["OwnerId","CreationToken","FileSystemId","CreationTime","LifeCycleState","NumberOfMountTargets","SizeInBytes","PerformanceMode"],"members":{"OwnerId":{},"CreationToken":{},"FileSystemId":{},"CreationTime":{"type":"timestamp"},"LifeCycleState":{},"Name":{},"NumberOfMountTargets":{"type":"integer"},"SizeInBytes":{"type":"structure","required":["Value"],"members":{"Value":{"type":"long"},"Timestamp":{"type":"timestamp"}}},"PerformanceMode":{},"Encrypted":{"type":"boolean"},"KmsKeyId":{}}},"Si":{"type":"list","member":{}},"Sk":{"type":"structure","required":["MountTargetId","FileSystemId","SubnetId","LifeCycleState"],"members":{"OwnerId":{},"MountTargetId":{},"FileSystemId":{},"SubnetId":{},"LifeCycleState":{},"IpAddress":{},"NetworkInterfaceId":{}}},"So":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 217 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 218 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-06-01","endpointPrefix":"elasticloadbalancing","protocol":"query","serviceFullName":"Elastic Load Balancing","signatureVersion":"v4","uid":"elasticloadbalancing-2012-06-01","xmlNamespace":"http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/"},"operations":{"AddTags":{"input":{"type":"structure","required":["LoadBalancerNames","Tags"],"members":{"LoadBalancerNames":{"shape":"S2"},"Tags":{"shape":"S4"}}},"output":{"resultWrapper":"AddTagsResult","type":"structure","members":{}}},"ApplySecurityGroupsToLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","SecurityGroups"],"members":{"LoadBalancerName":{},"SecurityGroups":{"shape":"Sa"}}},"output":{"resultWrapper":"ApplySecurityGroupsToLoadBalancerResult","type":"structure","members":{"SecurityGroups":{"shape":"Sa"}}}},"AttachLoadBalancerToSubnets":{"input":{"type":"structure","required":["LoadBalancerName","Subnets"],"members":{"LoadBalancerName":{},"Subnets":{"shape":"Se"}}},"output":{"resultWrapper":"AttachLoadBalancerToSubnetsResult","type":"structure","members":{"Subnets":{"shape":"Se"}}}},"ConfigureHealthCheck":{"input":{"type":"structure","required":["LoadBalancerName","HealthCheck"],"members":{"LoadBalancerName":{},"HealthCheck":{"shape":"Si"}}},"output":{"resultWrapper":"ConfigureHealthCheckResult","type":"structure","members":{"HealthCheck":{"shape":"Si"}}}},"CreateAppCookieStickinessPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName","CookieName"],"members":{"LoadBalancerName":{},"PolicyName":{},"CookieName":{}}},"output":{"resultWrapper":"CreateAppCookieStickinessPolicyResult","type":"structure","members":{}}},"CreateLBCookieStickinessPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName"],"members":{"LoadBalancerName":{},"PolicyName":{},"CookieExpirationPeriod":{"type":"long"}}},"output":{"resultWrapper":"CreateLBCookieStickinessPolicyResult","type":"structure","members":{}}},"CreateLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","Listeners"],"members":{"LoadBalancerName":{},"Listeners":{"shape":"Sx"},"AvailabilityZones":{"shape":"S13"},"Subnets":{"shape":"Se"},"SecurityGroups":{"shape":"Sa"},"Scheme":{},"Tags":{"shape":"S4"}}},"output":{"resultWrapper":"CreateLoadBalancerResult","type":"structure","members":{"DNSName":{}}}},"CreateLoadBalancerListeners":{"input":{"type":"structure","required":["LoadBalancerName","Listeners"],"members":{"LoadBalancerName":{},"Listeners":{"shape":"Sx"}}},"output":{"resultWrapper":"CreateLoadBalancerListenersResult","type":"structure","members":{}}},"CreateLoadBalancerPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName","PolicyTypeName"],"members":{"LoadBalancerName":{},"PolicyName":{},"PolicyTypeName":{},"PolicyAttributes":{"type":"list","member":{"type":"structure","members":{"AttributeName":{},"AttributeValue":{}}}}}},"output":{"resultWrapper":"CreateLoadBalancerPolicyResult","type":"structure","members":{}}},"DeleteLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName"],"members":{"LoadBalancerName":{}}},"output":{"resultWrapper":"DeleteLoadBalancerResult","type":"structure","members":{}}},"DeleteLoadBalancerListeners":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerPorts"],"members":{"LoadBalancerName":{},"LoadBalancerPorts":{"type":"list","member":{"type":"integer"}}}},"output":{"resultWrapper":"DeleteLoadBalancerListenersResult","type":"structure","members":{}}},"DeleteLoadBalancerPolicy":{"input":{"type":"structure","required":["LoadBalancerName","PolicyName"],"members":{"LoadBalancerName":{},"PolicyName":{}}},"output":{"resultWrapper":"DeleteLoadBalancerPolicyResult","type":"structure","members":{}}},"DeregisterInstancesFromLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","Instances"],"members":{"LoadBalancerName":{},"Instances":{"shape":"S1p"}}},"output":{"resultWrapper":"DeregisterInstancesFromLoadBalancerResult","type":"structure","members":{"Instances":{"shape":"S1p"}}}},"DescribeAccountLimits":{"input":{"type":"structure","members":{"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"Limits":{"type":"list","member":{"type":"structure","members":{"Name":{},"Max":{}}}},"NextMarker":{}}}},"DescribeInstanceHealth":{"input":{"type":"structure","required":["LoadBalancerName"],"members":{"LoadBalancerName":{},"Instances":{"shape":"S1p"}}},"output":{"resultWrapper":"DescribeInstanceHealthResult","type":"structure","members":{"InstanceStates":{"type":"list","member":{"type":"structure","members":{"InstanceId":{},"State":{},"ReasonCode":{},"Description":{}}}}}}},"DescribeLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerName"],"members":{"LoadBalancerName":{}}},"output":{"resultWrapper":"DescribeLoadBalancerAttributesResult","type":"structure","members":{"LoadBalancerAttributes":{"shape":"S2a"}}}},"DescribeLoadBalancerPolicies":{"input":{"type":"structure","members":{"LoadBalancerName":{},"PolicyNames":{"shape":"S2s"}}},"output":{"resultWrapper":"DescribeLoadBalancerPoliciesResult","type":"structure","members":{"PolicyDescriptions":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyTypeName":{},"PolicyAttributeDescriptions":{"type":"list","member":{"type":"structure","members":{"AttributeName":{},"AttributeValue":{}}}}}}}}}},"DescribeLoadBalancerPolicyTypes":{"input":{"type":"structure","members":{"PolicyTypeNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeLoadBalancerPolicyTypesResult","type":"structure","members":{"PolicyTypeDescriptions":{"type":"list","member":{"type":"structure","members":{"PolicyTypeName":{},"Description":{},"PolicyAttributeTypeDescriptions":{"type":"list","member":{"type":"structure","members":{"AttributeName":{},"AttributeType":{},"Description":{},"DefaultValue":{},"Cardinality":{}}}}}}}}}},"DescribeLoadBalancers":{"input":{"type":"structure","members":{"LoadBalancerNames":{"shape":"S2"},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancersResult","type":"structure","members":{"LoadBalancerDescriptions":{"type":"list","member":{"type":"structure","members":{"LoadBalancerName":{},"DNSName":{},"CanonicalHostedZoneName":{},"CanonicalHostedZoneNameID":{},"ListenerDescriptions":{"type":"list","member":{"type":"structure","members":{"Listener":{"shape":"Sy"},"PolicyNames":{"shape":"S2s"}}}},"Policies":{"type":"structure","members":{"AppCookieStickinessPolicies":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"CookieName":{}}}},"LBCookieStickinessPolicies":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"CookieExpirationPeriod":{"type":"long"}}}},"OtherPolicies":{"shape":"S2s"}}},"BackendServerDescriptions":{"type":"list","member":{"type":"structure","members":{"InstancePort":{"type":"integer"},"PolicyNames":{"shape":"S2s"}}}},"AvailabilityZones":{"shape":"S13"},"Subnets":{"shape":"Se"},"VPCId":{},"Instances":{"shape":"S1p"},"HealthCheck":{"shape":"Si"},"SourceSecurityGroup":{"type":"structure","members":{"OwnerAlias":{},"GroupName":{}}},"SecurityGroups":{"shape":"Sa"},"CreatedTime":{"type":"timestamp"},"Scheme":{}}}},"NextMarker":{}}}},"DescribeTags":{"input":{"type":"structure","required":["LoadBalancerNames"],"members":{"LoadBalancerNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"TagDescriptions":{"type":"list","member":{"type":"structure","members":{"LoadBalancerName":{},"Tags":{"shape":"S4"}}}}}}},"DetachLoadBalancerFromSubnets":{"input":{"type":"structure","required":["LoadBalancerName","Subnets"],"members":{"LoadBalancerName":{},"Subnets":{"shape":"Se"}}},"output":{"resultWrapper":"DetachLoadBalancerFromSubnetsResult","type":"structure","members":{"Subnets":{"shape":"Se"}}}},"DisableAvailabilityZonesForLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","AvailabilityZones"],"members":{"LoadBalancerName":{},"AvailabilityZones":{"shape":"S13"}}},"output":{"resultWrapper":"DisableAvailabilityZonesForLoadBalancerResult","type":"structure","members":{"AvailabilityZones":{"shape":"S13"}}}},"EnableAvailabilityZonesForLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","AvailabilityZones"],"members":{"LoadBalancerName":{},"AvailabilityZones":{"shape":"S13"}}},"output":{"resultWrapper":"EnableAvailabilityZonesForLoadBalancerResult","type":"structure","members":{"AvailabilityZones":{"shape":"S13"}}}},"ModifyLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerAttributes"],"members":{"LoadBalancerName":{},"LoadBalancerAttributes":{"shape":"S2a"}}},"output":{"resultWrapper":"ModifyLoadBalancerAttributesResult","type":"structure","members":{"LoadBalancerName":{},"LoadBalancerAttributes":{"shape":"S2a"}}}},"RegisterInstancesWithLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerName","Instances"],"members":{"LoadBalancerName":{},"Instances":{"shape":"S1p"}}},"output":{"resultWrapper":"RegisterInstancesWithLoadBalancerResult","type":"structure","members":{"Instances":{"shape":"S1p"}}}},"RemoveTags":{"input":{"type":"structure","required":["LoadBalancerNames","Tags"],"members":{"LoadBalancerNames":{"shape":"S2"},"Tags":{"type":"list","member":{"type":"structure","members":{"Key":{}}}}}},"output":{"resultWrapper":"RemoveTagsResult","type":"structure","members":{}}},"SetLoadBalancerListenerSSLCertificate":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerPort","SSLCertificateId"],"members":{"LoadBalancerName":{},"LoadBalancerPort":{"type":"integer"},"SSLCertificateId":{}}},"output":{"resultWrapper":"SetLoadBalancerListenerSSLCertificateResult","type":"structure","members":{}}},"SetLoadBalancerPoliciesForBackendServer":{"input":{"type":"structure","required":["LoadBalancerName","InstancePort","PolicyNames"],"members":{"LoadBalancerName":{},"InstancePort":{"type":"integer"},"PolicyNames":{"shape":"S2s"}}},"output":{"resultWrapper":"SetLoadBalancerPoliciesForBackendServerResult","type":"structure","members":{}}},"SetLoadBalancerPoliciesOfListener":{"input":{"type":"structure","required":["LoadBalancerName","LoadBalancerPort","PolicyNames"],"members":{"LoadBalancerName":{},"LoadBalancerPort":{"type":"integer"},"PolicyNames":{"shape":"S2s"}}},"output":{"resultWrapper":"SetLoadBalancerPoliciesOfListenerResult","type":"structure","members":{}}}},"shapes":{"S2":{"type":"list","member":{}},"S4":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sa":{"type":"list","member":{}},"Se":{"type":"list","member":{}},"Si":{"type":"structure","required":["Target","Interval","Timeout","UnhealthyThreshold","HealthyThreshold"],"members":{"Target":{},"Interval":{"type":"integer"},"Timeout":{"type":"integer"},"UnhealthyThreshold":{"type":"integer"},"HealthyThreshold":{"type":"integer"}}},"Sx":{"type":"list","member":{"shape":"Sy"}},"Sy":{"type":"structure","required":["Protocol","LoadBalancerPort","InstancePort"],"members":{"Protocol":{},"LoadBalancerPort":{"type":"integer"},"InstanceProtocol":{},"InstancePort":{"type":"integer"},"SSLCertificateId":{}}},"S13":{"type":"list","member":{}},"S1p":{"type":"list","member":{"type":"structure","members":{"InstanceId":{}}}},"S2a":{"type":"structure","members":{"CrossZoneLoadBalancing":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"}}},"AccessLog":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"S3BucketName":{},"EmitInterval":{"type":"integer"},"S3BucketPrefix":{}}},"ConnectionDraining":{"type":"structure","required":["Enabled"],"members":{"Enabled":{"type":"boolean"},"Timeout":{"type":"integer"}}},"ConnectionSettings":{"type":"structure","required":["IdleTimeout"],"members":{"IdleTimeout":{"type":"integer"}}},"AdditionalAttributes":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}},"S2s":{"type":"list","member":{}}}}

/***/ }),
/* 219 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeInstanceHealth":{"result_key":"InstanceStates"},"DescribeLoadBalancerPolicies":{"result_key":"PolicyDescriptions"},"DescribeLoadBalancerPolicyTypes":{"result_key":"PolicyTypeDescriptions"},"DescribeLoadBalancers":{"input_token":"Marker","output_token":"NextMarker","result_key":"LoadBalancerDescriptions"}}}

/***/ }),
/* 220 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"InstanceDeregistered":{"delay":15,"operation":"DescribeInstanceHealth","maxAttempts":40,"acceptors":[{"expected":"OutOfService","matcher":"pathAll","state":"success","argument":"InstanceStates[].State"},{"matcher":"error","expected":"InvalidInstance","state":"success"}]},"AnyInstanceInService":{"acceptors":[{"argument":"InstanceStates[].State","expected":"InService","matcher":"pathAny","state":"success"}],"delay":15,"maxAttempts":40,"operation":"DescribeInstanceHealth"},"InstanceInService":{"acceptors":[{"argument":"InstanceStates[].State","expected":"InService","matcher":"pathAll","state":"success"},{"matcher":"error","expected":"InvalidInstance","state":"retry"}],"delay":15,"maxAttempts":40,"operation":"DescribeInstanceHealth"}}}

/***/ }),
/* 221 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-12-01","endpointPrefix":"elasticloadbalancing","protocol":"query","serviceAbbreviation":"Elastic Load Balancing v2","serviceFullName":"Elastic Load Balancing","signatureVersion":"v4","uid":"elasticloadbalancingv2-2015-12-01","xmlNamespace":"http://elasticloadbalancing.amazonaws.com/doc/2015-12-01/"},"operations":{"AddListenerCertificates":{"input":{"type":"structure","required":["ListenerArn","Certificates"],"members":{"ListenerArn":{},"Certificates":{"shape":"S3"}}},"output":{"resultWrapper":"AddListenerCertificatesResult","type":"structure","members":{"Certificates":{"shape":"S3"}}}},"AddTags":{"input":{"type":"structure","required":["ResourceArns","Tags"],"members":{"ResourceArns":{"shape":"S9"},"Tags":{"shape":"Sb"}}},"output":{"resultWrapper":"AddTagsResult","type":"structure","members":{}}},"CreateListener":{"input":{"type":"structure","required":["LoadBalancerArn","Protocol","Port","DefaultActions"],"members":{"LoadBalancerArn":{},"Protocol":{},"Port":{"type":"integer"},"SslPolicy":{},"Certificates":{"shape":"S3"},"DefaultActions":{"shape":"Sl"}}},"output":{"resultWrapper":"CreateListenerResult","type":"structure","members":{"Listeners":{"shape":"Sq"}}}},"CreateLoadBalancer":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Subnets":{"shape":"Su"},"SubnetMappings":{"shape":"Sw"},"SecurityGroups":{"shape":"Sz"},"Scheme":{},"Tags":{"shape":"Sb"},"Type":{},"IpAddressType":{}}},"output":{"resultWrapper":"CreateLoadBalancerResult","type":"structure","members":{"LoadBalancers":{"shape":"S15"}}}},"CreateRule":{"input":{"type":"structure","required":["ListenerArn","Conditions","Priority","Actions"],"members":{"ListenerArn":{},"Conditions":{"shape":"S1l"},"Priority":{"type":"integer"},"Actions":{"shape":"Sl"}}},"output":{"resultWrapper":"CreateRuleResult","type":"structure","members":{"Rules":{"shape":"S1s"}}}},"CreateTargetGroup":{"input":{"type":"structure","required":["Name","Protocol","Port","VpcId"],"members":{"Name":{},"Protocol":{},"Port":{"type":"integer"},"VpcId":{},"HealthCheckProtocol":{},"HealthCheckPort":{},"HealthCheckPath":{},"HealthCheckIntervalSeconds":{"type":"integer"},"HealthCheckTimeoutSeconds":{"type":"integer"},"HealthyThresholdCount":{"type":"integer"},"UnhealthyThresholdCount":{"type":"integer"},"Matcher":{"shape":"S24"},"TargetType":{}}},"output":{"resultWrapper":"CreateTargetGroupResult","type":"structure","members":{"TargetGroups":{"shape":"S28"}}}},"DeleteListener":{"input":{"type":"structure","required":["ListenerArn"],"members":{"ListenerArn":{}}},"output":{"resultWrapper":"DeleteListenerResult","type":"structure","members":{}}},"DeleteLoadBalancer":{"input":{"type":"structure","required":["LoadBalancerArn"],"members":{"LoadBalancerArn":{}}},"output":{"resultWrapper":"DeleteLoadBalancerResult","type":"structure","members":{}}},"DeleteRule":{"input":{"type":"structure","required":["RuleArn"],"members":{"RuleArn":{}}},"output":{"resultWrapper":"DeleteRuleResult","type":"structure","members":{}}},"DeleteTargetGroup":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{}}},"output":{"resultWrapper":"DeleteTargetGroupResult","type":"structure","members":{}}},"DeregisterTargets":{"input":{"type":"structure","required":["TargetGroupArn","Targets"],"members":{"TargetGroupArn":{},"Targets":{"shape":"S2k"}}},"output":{"resultWrapper":"DeregisterTargetsResult","type":"structure","members":{}}},"DescribeAccountLimits":{"input":{"type":"structure","members":{"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeAccountLimitsResult","type":"structure","members":{"Limits":{"type":"list","member":{"type":"structure","members":{"Name":{},"Max":{}}}},"NextMarker":{}}}},"DescribeListenerCertificates":{"input":{"type":"structure","required":["ListenerArn"],"members":{"ListenerArn":{},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeListenerCertificatesResult","type":"structure","members":{"Certificates":{"shape":"S3"},"NextMarker":{}}}},"DescribeListeners":{"input":{"type":"structure","members":{"LoadBalancerArn":{},"ListenerArns":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeListenersResult","type":"structure","members":{"Listeners":{"shape":"Sq"},"NextMarker":{}}}},"DescribeLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerArn"],"members":{"LoadBalancerArn":{}}},"output":{"resultWrapper":"DescribeLoadBalancerAttributesResult","type":"structure","members":{"Attributes":{"shape":"S33"}}}},"DescribeLoadBalancers":{"input":{"type":"structure","members":{"LoadBalancerArns":{"shape":"S2a"},"Names":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeLoadBalancersResult","type":"structure","members":{"LoadBalancers":{"shape":"S15"},"NextMarker":{}}}},"DescribeRules":{"input":{"type":"structure","members":{"ListenerArn":{},"RuleArns":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeRulesResult","type":"structure","members":{"Rules":{"shape":"S1s"},"NextMarker":{}}}},"DescribeSSLPolicies":{"input":{"type":"structure","members":{"Names":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeSSLPoliciesResult","type":"structure","members":{"SslPolicies":{"type":"list","member":{"type":"structure","members":{"SslProtocols":{"type":"list","member":{}},"Ciphers":{"type":"list","member":{"type":"structure","members":{"Name":{},"Priority":{"type":"integer"}}}},"Name":{}}}},"NextMarker":{}}}},"DescribeTags":{"input":{"type":"structure","required":["ResourceArns"],"members":{"ResourceArns":{"shape":"S9"}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"TagDescriptions":{"type":"list","member":{"type":"structure","members":{"ResourceArn":{},"Tags":{"shape":"Sb"}}}}}}},"DescribeTargetGroupAttributes":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{}}},"output":{"resultWrapper":"DescribeTargetGroupAttributesResult","type":"structure","members":{"Attributes":{"shape":"S3u"}}}},"DescribeTargetGroups":{"input":{"type":"structure","members":{"LoadBalancerArn":{},"TargetGroupArns":{"type":"list","member":{}},"Names":{"type":"list","member":{}},"Marker":{},"PageSize":{"type":"integer"}}},"output":{"resultWrapper":"DescribeTargetGroupsResult","type":"structure","members":{"TargetGroups":{"shape":"S28"},"NextMarker":{}}}},"DescribeTargetHealth":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{},"Targets":{"shape":"S2k"}}},"output":{"resultWrapper":"DescribeTargetHealthResult","type":"structure","members":{"TargetHealthDescriptions":{"type":"list","member":{"type":"structure","members":{"Target":{"shape":"S2l"},"HealthCheckPort":{},"TargetHealth":{"type":"structure","members":{"State":{},"Reason":{},"Description":{}}}}}}}}},"ModifyListener":{"input":{"type":"structure","required":["ListenerArn"],"members":{"ListenerArn":{},"Port":{"type":"integer"},"Protocol":{},"SslPolicy":{},"Certificates":{"shape":"S3"},"DefaultActions":{"shape":"Sl"}}},"output":{"resultWrapper":"ModifyListenerResult","type":"structure","members":{"Listeners":{"shape":"Sq"}}}},"ModifyLoadBalancerAttributes":{"input":{"type":"structure","required":["LoadBalancerArn","Attributes"],"members":{"LoadBalancerArn":{},"Attributes":{"shape":"S33"}}},"output":{"resultWrapper":"ModifyLoadBalancerAttributesResult","type":"structure","members":{"Attributes":{"shape":"S33"}}}},"ModifyRule":{"input":{"type":"structure","required":["RuleArn"],"members":{"RuleArn":{},"Conditions":{"shape":"S1l"},"Actions":{"shape":"Sl"}}},"output":{"resultWrapper":"ModifyRuleResult","type":"structure","members":{"Rules":{"shape":"S1s"}}}},"ModifyTargetGroup":{"input":{"type":"structure","required":["TargetGroupArn"],"members":{"TargetGroupArn":{},"HealthCheckProtocol":{},"HealthCheckPort":{},"HealthCheckPath":{},"HealthCheckIntervalSeconds":{"type":"integer"},"HealthCheckTimeoutSeconds":{"type":"integer"},"HealthyThresholdCount":{"type":"integer"},"UnhealthyThresholdCount":{"type":"integer"},"Matcher":{"shape":"S24"}}},"output":{"resultWrapper":"ModifyTargetGroupResult","type":"structure","members":{"TargetGroups":{"shape":"S28"}}}},"ModifyTargetGroupAttributes":{"input":{"type":"structure","required":["TargetGroupArn","Attributes"],"members":{"TargetGroupArn":{},"Attributes":{"shape":"S3u"}}},"output":{"resultWrapper":"ModifyTargetGroupAttributesResult","type":"structure","members":{"Attributes":{"shape":"S3u"}}}},"RegisterTargets":{"input":{"type":"structure","required":["TargetGroupArn","Targets"],"members":{"TargetGroupArn":{},"Targets":{"shape":"S2k"}}},"output":{"resultWrapper":"RegisterTargetsResult","type":"structure","members":{}}},"RemoveListenerCertificates":{"input":{"type":"structure","required":["ListenerArn","Certificates"],"members":{"ListenerArn":{},"Certificates":{"shape":"S3"}}},"output":{"resultWrapper":"RemoveListenerCertificatesResult","type":"structure","members":{}}},"RemoveTags":{"input":{"type":"structure","required":["ResourceArns","TagKeys"],"members":{"ResourceArns":{"shape":"S9"},"TagKeys":{"type":"list","member":{}}}},"output":{"resultWrapper":"RemoveTagsResult","type":"structure","members":{}}},"SetIpAddressType":{"input":{"type":"structure","required":["LoadBalancerArn","IpAddressType"],"members":{"LoadBalancerArn":{},"IpAddressType":{}}},"output":{"resultWrapper":"SetIpAddressTypeResult","type":"structure","members":{"IpAddressType":{}}}},"SetRulePriorities":{"input":{"type":"structure","required":["RulePriorities"],"members":{"RulePriorities":{"type":"list","member":{"type":"structure","members":{"RuleArn":{},"Priority":{"type":"integer"}}}}}},"output":{"resultWrapper":"SetRulePrioritiesResult","type":"structure","members":{"Rules":{"shape":"S1s"}}}},"SetSecurityGroups":{"input":{"type":"structure","required":["LoadBalancerArn","SecurityGroups"],"members":{"LoadBalancerArn":{},"SecurityGroups":{"shape":"Sz"}}},"output":{"resultWrapper":"SetSecurityGroupsResult","type":"structure","members":{"SecurityGroupIds":{"shape":"Sz"}}}},"SetSubnets":{"input":{"type":"structure","required":["LoadBalancerArn","Subnets"],"members":{"LoadBalancerArn":{},"Subnets":{"shape":"Su"},"SubnetMappings":{"shape":"Sw"}}},"output":{"resultWrapper":"SetSubnetsResult","type":"structure","members":{"AvailabilityZones":{"shape":"S1e"}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","members":{"CertificateArn":{},"IsDefault":{"type":"boolean"}}}},"S9":{"type":"list","member":{}},"Sb":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sl":{"type":"list","member":{"type":"structure","required":["Type","TargetGroupArn"],"members":{"Type":{},"TargetGroupArn":{}}}},"Sq":{"type":"list","member":{"type":"structure","members":{"ListenerArn":{},"LoadBalancerArn":{},"Port":{"type":"integer"},"Protocol":{},"Certificates":{"shape":"S3"},"SslPolicy":{},"DefaultActions":{"shape":"Sl"}}}},"Su":{"type":"list","member":{}},"Sw":{"type":"list","member":{"type":"structure","members":{"SubnetId":{},"AllocationId":{}}}},"Sz":{"type":"list","member":{}},"S15":{"type":"list","member":{"type":"structure","members":{"LoadBalancerArn":{},"DNSName":{},"CanonicalHostedZoneId":{},"CreatedTime":{"type":"timestamp"},"LoadBalancerName":{},"Scheme":{},"VpcId":{},"State":{"type":"structure","members":{"Code":{},"Reason":{}}},"Type":{},"AvailabilityZones":{"shape":"S1e"},"SecurityGroups":{"shape":"Sz"},"IpAddressType":{}}}},"S1e":{"type":"list","member":{"type":"structure","members":{"ZoneName":{},"SubnetId":{},"LoadBalancerAddresses":{"type":"list","member":{"type":"structure","members":{"IpAddress":{},"AllocationId":{}}}}}}},"S1l":{"type":"list","member":{"type":"structure","members":{"Field":{},"Values":{"type":"list","member":{}}}}},"S1s":{"type":"list","member":{"type":"structure","members":{"RuleArn":{},"Priority":{},"Conditions":{"shape":"S1l"},"Actions":{"shape":"Sl"},"IsDefault":{"type":"boolean"}}}},"S24":{"type":"structure","required":["HttpCode"],"members":{"HttpCode":{}}},"S28":{"type":"list","member":{"type":"structure","members":{"TargetGroupArn":{},"TargetGroupName":{},"Protocol":{},"Port":{"type":"integer"},"VpcId":{},"HealthCheckProtocol":{},"HealthCheckPort":{},"HealthCheckIntervalSeconds":{"type":"integer"},"HealthCheckTimeoutSeconds":{"type":"integer"},"HealthyThresholdCount":{"type":"integer"},"UnhealthyThresholdCount":{"type":"integer"},"HealthCheckPath":{},"Matcher":{"shape":"S24"},"LoadBalancerArns":{"shape":"S2a"},"TargetType":{}}}},"S2a":{"type":"list","member":{}},"S2k":{"type":"list","member":{"shape":"S2l"}},"S2l":{"type":"structure","required":["Id"],"members":{"Id":{},"Port":{"type":"integer"},"AvailabilityZone":{}}},"S33":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S3u":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 222 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeListeners":{"input_token":"Marker","output_token":"NextMarker","result_key":"Listeners"},"DescribeLoadBalancers":{"input_token":"Marker","output_token":"NextMarker","result_key":"LoadBalancers"},"DescribeTargetGroups":{"input_token":"Marker","output_token":"NextMarker","result_key":"TargetGroups"}}}

/***/ }),
/* 223 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"LoadBalancerExists":{"delay":15,"operation":"DescribeLoadBalancers","maxAttempts":40,"acceptors":[{"matcher":"status","expected":200,"state":"success"},{"matcher":"error","expected":"LoadBalancerNotFound","state":"retry"}]},"LoadBalancerAvailable":{"delay":15,"operation":"DescribeLoadBalancers","maxAttempts":40,"acceptors":[{"state":"success","matcher":"pathAll","argument":"LoadBalancers[].State.Code","expected":"active"},{"state":"retry","matcher":"pathAny","argument":"LoadBalancers[].State.Code","expected":"provisioning"},{"state":"retry","matcher":"error","expected":"LoadBalancerNotFound"}]},"LoadBalancersDeleted":{"delay":15,"operation":"DescribeLoadBalancers","maxAttempts":40,"acceptors":[{"state":"retry","matcher":"pathAll","argument":"LoadBalancers[].State.Code","expected":"active"},{"matcher":"error","expected":"LoadBalancerNotFound","state":"success"}]},"TargetInService":{"delay":15,"maxAttempts":40,"operation":"DescribeTargetHealth","acceptors":[{"argument":"TargetHealthDescriptions[].TargetHealth.State","expected":"healthy","matcher":"pathAll","state":"success"},{"matcher":"error","expected":"InvalidInstance","state":"retry"}]},"TargetDeregistered":{"delay":15,"maxAttempts":40,"operation":"DescribeTargetHealth","acceptors":[{"matcher":"error","expected":"InvalidTarget","state":"success"},{"argument":"TargetHealthDescriptions[].TargetHealth.State","expected":"unused","matcher":"pathAll","state":"success"}]}}}

/***/ }),
/* 224 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2009-03-31","endpointPrefix":"elasticmapreduce","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon EMR","serviceFullName":"Amazon Elastic MapReduce","signatureVersion":"v4","targetPrefix":"ElasticMapReduce","timestampFormat":"unixTimestamp","uid":"elasticmapreduce-2009-03-31"},"operations":{"AddInstanceFleet":{"input":{"type":"structure","required":["ClusterId","InstanceFleet"],"members":{"ClusterId":{},"InstanceFleet":{"shape":"S3"}}},"output":{"type":"structure","members":{"ClusterId":{},"InstanceFleetId":{}}}},"AddInstanceGroups":{"input":{"type":"structure","required":["InstanceGroups","JobFlowId"],"members":{"InstanceGroups":{"shape":"Sq"},"JobFlowId":{}}},"output":{"type":"structure","members":{"JobFlowId":{},"InstanceGroupIds":{"type":"list","member":{}}}}},"AddJobFlowSteps":{"input":{"type":"structure","required":["JobFlowId","Steps"],"members":{"JobFlowId":{},"Steps":{"shape":"S1b"}}},"output":{"type":"structure","members":{"StepIds":{"shape":"S1k"}}}},"AddTags":{"input":{"type":"structure","required":["ResourceId","Tags"],"members":{"ResourceId":{},"Tags":{"shape":"S1n"}}},"output":{"type":"structure","members":{}}},"CancelSteps":{"input":{"type":"structure","members":{"ClusterId":{},"StepIds":{"shape":"S1k"}}},"output":{"type":"structure","members":{"CancelStepsInfoList":{"type":"list","member":{"type":"structure","members":{"StepId":{},"Status":{},"Reason":{}}}}}}},"CreateSecurityConfiguration":{"input":{"type":"structure","required":["Name","SecurityConfiguration"],"members":{"Name":{},"SecurityConfiguration":{}}},"output":{"type":"structure","required":["Name","CreationDateTime"],"members":{"Name":{},"CreationDateTime":{"type":"timestamp"}}}},"DeleteSecurityConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DescribeCluster":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{}}},"output":{"type":"structure","members":{"Cluster":{"type":"structure","members":{"Id":{},"Name":{},"Status":{"shape":"S25"},"Ec2InstanceAttributes":{"type":"structure","members":{"Ec2KeyName":{},"Ec2SubnetId":{},"RequestedEc2SubnetIds":{"shape":"S2b"},"Ec2AvailabilityZone":{},"RequestedEc2AvailabilityZones":{"shape":"S2b"},"IamInstanceProfile":{},"EmrManagedMasterSecurityGroup":{},"EmrManagedSlaveSecurityGroup":{},"ServiceAccessSecurityGroup":{},"AdditionalMasterSecurityGroups":{"shape":"S2c"},"AdditionalSlaveSecurityGroups":{"shape":"S2c"}}},"InstanceCollectionType":{},"LogUri":{},"RequestedAmiVersion":{},"RunningAmiVersion":{},"ReleaseLabel":{},"AutoTerminate":{"type":"boolean"},"TerminationProtected":{"type":"boolean"},"VisibleToAllUsers":{"type":"boolean"},"Applications":{"shape":"S2f"},"Tags":{"shape":"S1n"},"ServiceRole":{},"NormalizedInstanceHours":{"type":"integer"},"MasterPublicDnsName":{},"Configurations":{"shape":"Sh"},"SecurityConfiguration":{},"AutoScalingRole":{},"ScaleDownBehavior":{},"CustomAmiId":{},"EbsRootVolumeSize":{"type":"integer"},"RepoUpgradeOnBoot":{}}}}}},"DescribeJobFlows":{"input":{"type":"structure","members":{"CreatedAfter":{"type":"timestamp"},"CreatedBefore":{"type":"timestamp"},"JobFlowIds":{"shape":"S1i"},"JobFlowStates":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"JobFlows":{"type":"list","member":{"type":"structure","required":["JobFlowId","Name","ExecutionStatusDetail","Instances"],"members":{"JobFlowId":{},"Name":{},"LogUri":{},"AmiVersion":{},"ExecutionStatusDetail":{"type":"structure","required":["State","CreationDateTime"],"members":{"State":{},"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"},"LastStateChangeReason":{}}},"Instances":{"type":"structure","required":["MasterInstanceType","SlaveInstanceType","InstanceCount"],"members":{"MasterInstanceType":{},"MasterPublicDnsName":{},"MasterInstanceId":{},"SlaveInstanceType":{},"InstanceCount":{"type":"integer"},"InstanceGroups":{"type":"list","member":{"type":"structure","required":["Market","InstanceRole","InstanceType","InstanceRequestCount","InstanceRunningCount","State","CreationDateTime"],"members":{"InstanceGroupId":{},"Name":{},"Market":{},"InstanceRole":{},"BidPrice":{},"InstanceType":{},"InstanceRequestCount":{"type":"integer"},"InstanceRunningCount":{"type":"integer"},"State":{},"LastStateChangeReason":{},"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}},"NormalizedInstanceHours":{"type":"integer"},"Ec2KeyName":{},"Ec2SubnetId":{},"Placement":{"shape":"S2u"},"KeepJobFlowAliveWhenNoSteps":{"type":"boolean"},"TerminationProtected":{"type":"boolean"},"HadoopVersion":{}}},"Steps":{"type":"list","member":{"type":"structure","required":["StepConfig","ExecutionStatusDetail"],"members":{"StepConfig":{"shape":"S1c"},"ExecutionStatusDetail":{"type":"structure","required":["State","CreationDateTime"],"members":{"State":{},"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"},"LastStateChangeReason":{}}}}}},"BootstrapActions":{"type":"list","member":{"type":"structure","members":{"BootstrapActionConfig":{"shape":"S31"}}}},"SupportedProducts":{"shape":"S33"},"VisibleToAllUsers":{"type":"boolean"},"JobFlowRole":{},"ServiceRole":{},"AutoScalingRole":{},"ScaleDownBehavior":{}}}}}},"deprecated":true},"DescribeSecurityConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{},"SecurityConfiguration":{},"CreationDateTime":{"type":"timestamp"}}}},"DescribeStep":{"input":{"type":"structure","required":["ClusterId","StepId"],"members":{"ClusterId":{},"StepId":{}}},"output":{"type":"structure","members":{"Step":{"type":"structure","members":{"Id":{},"Name":{},"Config":{"shape":"S39"},"ActionOnFailure":{},"Status":{"shape":"S3a"}}}}}},"ListBootstrapActions":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"Marker":{}}},"output":{"type":"structure","members":{"BootstrapActions":{"type":"list","member":{"type":"structure","members":{"Name":{},"ScriptPath":{},"Args":{"shape":"S2c"}}}},"Marker":{}}}},"ListClusters":{"input":{"type":"structure","members":{"CreatedAfter":{"type":"timestamp"},"CreatedBefore":{"type":"timestamp"},"ClusterStates":{"type":"list","member":{}},"Marker":{}}},"output":{"type":"structure","members":{"Clusters":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Status":{"shape":"S25"},"NormalizedInstanceHours":{"type":"integer"}}}},"Marker":{}}}},"ListInstanceFleets":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"Marker":{}}},"output":{"type":"structure","members":{"InstanceFleets":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"InstanceFleetType":{},"TargetOnDemandCapacity":{"type":"integer"},"TargetSpotCapacity":{"type":"integer"},"ProvisionedOnDemandCapacity":{"type":"integer"},"ProvisionedSpotCapacity":{"type":"integer"},"InstanceTypeSpecifications":{"type":"list","member":{"type":"structure","members":{"InstanceType":{},"WeightedCapacity":{"type":"integer"},"BidPrice":{},"BidPriceAsPercentageOfOnDemandPrice":{"type":"double"},"Configurations":{"shape":"Sh"},"EbsBlockDevices":{"shape":"S41"},"EbsOptimized":{"type":"boolean"}}}},"LaunchSpecifications":{"shape":"Sk"}}}},"Marker":{}}}},"ListInstanceGroups":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"Marker":{}}},"output":{"type":"structure","members":{"InstanceGroups":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Market":{},"InstanceGroupType":{},"BidPrice":{},"InstanceType":{},"RequestedInstanceCount":{"type":"integer"},"RunningInstanceCount":{"type":"integer"},"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"Configurations":{"shape":"Sh"},"EbsBlockDevices":{"shape":"S41"},"EbsOptimized":{"type":"boolean"},"ShrinkPolicy":{"shape":"S4d"},"AutoScalingPolicy":{"shape":"S4h"}}}},"Marker":{}}}},"ListInstances":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"InstanceGroupId":{},"InstanceGroupTypes":{"type":"list","member":{}},"InstanceFleetId":{},"InstanceFleetType":{},"InstanceStates":{"type":"list","member":{}},"Marker":{}}},"output":{"type":"structure","members":{"Instances":{"type":"list","member":{"type":"structure","members":{"Id":{},"Ec2InstanceId":{},"PublicDnsName":{},"PublicIpAddress":{},"PrivateDnsName":{},"PrivateIpAddress":{},"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"InstanceGroupId":{},"InstanceFleetId":{},"Market":{},"InstanceType":{},"EbsVolumes":{"type":"list","member":{"type":"structure","members":{"Device":{},"VolumeId":{}}}}}}},"Marker":{}}}},"ListSecurityConfigurations":{"input":{"type":"structure","members":{"Marker":{}}},"output":{"type":"structure","members":{"SecurityConfigurations":{"type":"list","member":{"type":"structure","members":{"Name":{},"CreationDateTime":{"type":"timestamp"}}}},"Marker":{}}}},"ListSteps":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"StepStates":{"type":"list","member":{}},"StepIds":{"shape":"S1i"},"Marker":{}}},"output":{"type":"structure","members":{"Steps":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Config":{"shape":"S39"},"ActionOnFailure":{},"Status":{"shape":"S3a"}}}},"Marker":{}}}},"ModifyInstanceFleet":{"input":{"type":"structure","required":["ClusterId","InstanceFleet"],"members":{"ClusterId":{},"InstanceFleet":{"type":"structure","required":["InstanceFleetId"],"members":{"InstanceFleetId":{},"TargetOnDemandCapacity":{"type":"integer"},"TargetSpotCapacity":{"type":"integer"}}}}}},"ModifyInstanceGroups":{"input":{"type":"structure","members":{"ClusterId":{},"InstanceGroups":{"type":"list","member":{"type":"structure","required":["InstanceGroupId"],"members":{"InstanceGroupId":{},"InstanceCount":{"type":"integer"},"EC2InstanceIdsToTerminate":{"type":"list","member":{}},"ShrinkPolicy":{"shape":"S4d"}}}}}}},"PutAutoScalingPolicy":{"input":{"type":"structure","required":["ClusterId","InstanceGroupId","AutoScalingPolicy"],"members":{"ClusterId":{},"InstanceGroupId":{},"AutoScalingPolicy":{"shape":"Su"}}},"output":{"type":"structure","members":{"ClusterId":{},"InstanceGroupId":{},"AutoScalingPolicy":{"shape":"S4h"}}}},"RemoveAutoScalingPolicy":{"input":{"type":"structure","required":["ClusterId","InstanceGroupId"],"members":{"ClusterId":{},"InstanceGroupId":{}}},"output":{"type":"structure","members":{}}},"RemoveTags":{"input":{"type":"structure","required":["ResourceId","TagKeys"],"members":{"ResourceId":{},"TagKeys":{"shape":"S2c"}}},"output":{"type":"structure","members":{}}},"RunJobFlow":{"input":{"type":"structure","required":["Name","Instances"],"members":{"Name":{},"LogUri":{},"AdditionalInfo":{},"AmiVersion":{},"ReleaseLabel":{},"Instances":{"type":"structure","members":{"MasterInstanceType":{},"SlaveInstanceType":{},"InstanceCount":{"type":"integer"},"InstanceGroups":{"shape":"Sq"},"InstanceFleets":{"type":"list","member":{"shape":"S3"}},"Ec2KeyName":{},"Placement":{"shape":"S2u"},"KeepJobFlowAliveWhenNoSteps":{"type":"boolean"},"TerminationProtected":{"type":"boolean"},"HadoopVersion":{},"Ec2SubnetId":{},"Ec2SubnetIds":{"shape":"S2b"},"EmrManagedMasterSecurityGroup":{},"EmrManagedSlaveSecurityGroup":{},"ServiceAccessSecurityGroup":{},"AdditionalMasterSecurityGroups":{"shape":"S5n"},"AdditionalSlaveSecurityGroups":{"shape":"S5n"}}},"Steps":{"shape":"S1b"},"BootstrapActions":{"type":"list","member":{"shape":"S31"}},"SupportedProducts":{"shape":"S33"},"NewSupportedProducts":{"type":"list","member":{"type":"structure","members":{"Name":{},"Args":{"shape":"S1i"}}}},"Applications":{"shape":"S2f"},"Configurations":{"shape":"Sh"},"VisibleToAllUsers":{"type":"boolean"},"JobFlowRole":{},"ServiceRole":{},"Tags":{"shape":"S1n"},"SecurityConfiguration":{},"AutoScalingRole":{},"ScaleDownBehavior":{},"CustomAmiId":{},"EbsRootVolumeSize":{"type":"integer"},"RepoUpgradeOnBoot":{}}},"output":{"type":"structure","members":{"JobFlowId":{}}}},"SetTerminationProtection":{"input":{"type":"structure","required":["JobFlowIds","TerminationProtected"],"members":{"JobFlowIds":{"shape":"S1i"},"TerminationProtected":{"type":"boolean"}}}},"SetVisibleToAllUsers":{"input":{"type":"structure","required":["JobFlowIds","VisibleToAllUsers"],"members":{"JobFlowIds":{"shape":"S1i"},"VisibleToAllUsers":{"type":"boolean"}}}},"TerminateJobFlows":{"input":{"type":"structure","required":["JobFlowIds"],"members":{"JobFlowIds":{"shape":"S1i"}}}}},"shapes":{"S3":{"type":"structure","required":["InstanceFleetType"],"members":{"Name":{},"InstanceFleetType":{},"TargetOnDemandCapacity":{"type":"integer"},"TargetSpotCapacity":{"type":"integer"},"InstanceTypeConfigs":{"type":"list","member":{"type":"structure","required":["InstanceType"],"members":{"InstanceType":{},"WeightedCapacity":{"type":"integer"},"BidPrice":{},"BidPriceAsPercentageOfOnDemandPrice":{"type":"double"},"EbsConfiguration":{"shape":"Sa"},"Configurations":{"shape":"Sh"}}}},"LaunchSpecifications":{"shape":"Sk"}}},"Sa":{"type":"structure","members":{"EbsBlockDeviceConfigs":{"type":"list","member":{"type":"structure","required":["VolumeSpecification"],"members":{"VolumeSpecification":{"shape":"Sd"},"VolumesPerInstance":{"type":"integer"}}}},"EbsOptimized":{"type":"boolean"}}},"Sd":{"type":"structure","required":["VolumeType","SizeInGB"],"members":{"VolumeType":{},"Iops":{"type":"integer"},"SizeInGB":{"type":"integer"}}},"Sh":{"type":"list","member":{"type":"structure","members":{"Classification":{},"Configurations":{"shape":"Sh"},"Properties":{"shape":"Sj"}}}},"Sj":{"type":"map","key":{},"value":{}},"Sk":{"type":"structure","required":["SpotSpecification"],"members":{"SpotSpecification":{"type":"structure","required":["TimeoutDurationMinutes","TimeoutAction"],"members":{"TimeoutDurationMinutes":{"type":"integer"},"TimeoutAction":{},"BlockDurationMinutes":{"type":"integer"}}}}},"Sq":{"type":"list","member":{"type":"structure","required":["InstanceRole","InstanceType","InstanceCount"],"members":{"Name":{},"Market":{},"InstanceRole":{},"BidPrice":{},"InstanceType":{},"InstanceCount":{"type":"integer"},"Configurations":{"shape":"Sh"},"EbsConfiguration":{"shape":"Sa"},"AutoScalingPolicy":{"shape":"Su"}}}},"Su":{"type":"structure","required":["Constraints","Rules"],"members":{"Constraints":{"shape":"Sv"},"Rules":{"shape":"Sw"}}},"Sv":{"type":"structure","required":["MinCapacity","MaxCapacity"],"members":{"MinCapacity":{"type":"integer"},"MaxCapacity":{"type":"integer"}}},"Sw":{"type":"list","member":{"type":"structure","required":["Name","Action","Trigger"],"members":{"Name":{},"Description":{},"Action":{"type":"structure","required":["SimpleScalingPolicyConfiguration"],"members":{"Market":{},"SimpleScalingPolicyConfiguration":{"type":"structure","required":["ScalingAdjustment"],"members":{"AdjustmentType":{},"ScalingAdjustment":{"type":"integer"},"CoolDown":{"type":"integer"}}}}},"Trigger":{"type":"structure","required":["CloudWatchAlarmDefinition"],"members":{"CloudWatchAlarmDefinition":{"type":"structure","required":["ComparisonOperator","MetricName","Period","Threshold"],"members":{"ComparisonOperator":{},"EvaluationPeriods":{"type":"integer"},"MetricName":{},"Namespace":{},"Period":{"type":"integer"},"Statistic":{},"Threshold":{"type":"double"},"Unit":{},"Dimensions":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}}}}}},"S1b":{"type":"list","member":{"shape":"S1c"}},"S1c":{"type":"structure","required":["Name","HadoopJarStep"],"members":{"Name":{},"ActionOnFailure":{},"HadoopJarStep":{"type":"structure","required":["Jar"],"members":{"Properties":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"Jar":{},"MainClass":{},"Args":{"shape":"S1i"}}}}},"S1i":{"type":"list","member":{}},"S1k":{"type":"list","member":{}},"S1n":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"S25":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"ReadyDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"S2b":{"type":"list","member":{}},"S2c":{"type":"list","member":{}},"S2f":{"type":"list","member":{"type":"structure","members":{"Name":{},"Version":{},"Args":{"shape":"S2c"},"AdditionalInfo":{"shape":"Sj"}}}},"S2u":{"type":"structure","members":{"AvailabilityZone":{},"AvailabilityZones":{"shape":"S2b"}}},"S31":{"type":"structure","required":["Name","ScriptBootstrapAction"],"members":{"Name":{},"ScriptBootstrapAction":{"type":"structure","required":["Path"],"members":{"Path":{},"Args":{"shape":"S1i"}}}}},"S33":{"type":"list","member":{}},"S39":{"type":"structure","members":{"Jar":{},"Properties":{"shape":"Sj"},"MainClass":{},"Args":{"shape":"S2c"}}},"S3a":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}},"FailureDetails":{"type":"structure","members":{"Reason":{},"Message":{},"LogFile":{}}},"Timeline":{"type":"structure","members":{"CreationDateTime":{"type":"timestamp"},"StartDateTime":{"type":"timestamp"},"EndDateTime":{"type":"timestamp"}}}}},"S41":{"type":"list","member":{"type":"structure","members":{"VolumeSpecification":{"shape":"Sd"},"Device":{}}}},"S4d":{"type":"structure","members":{"DecommissionTimeout":{"type":"integer"},"InstanceResizePolicy":{"type":"structure","members":{"InstancesToTerminate":{"shape":"S4f"},"InstancesToProtect":{"shape":"S4f"},"InstanceTerminationTimeout":{"type":"integer"}}}}},"S4f":{"type":"list","member":{}},"S4h":{"type":"structure","members":{"Status":{"type":"structure","members":{"State":{},"StateChangeReason":{"type":"structure","members":{"Code":{},"Message":{}}}}},"Constraints":{"shape":"Sv"},"Rules":{"shape":"Sw"}}},"S5n":{"type":"list","member":{}}}}

/***/ }),
/* 225 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeJobFlows":{"result_key":"JobFlows"},"ListBootstrapActions":{"input_token":"Marker","output_token":"Marker","result_key":"BootstrapActions"},"ListClusters":{"input_token":"Marker","output_token":"Marker","result_key":"Clusters"},"ListInstanceFleets":{"input_token":"Marker","output_token":"Marker","result_key":"InstanceFleets"},"ListInstanceGroups":{"input_token":"Marker","output_token":"Marker","result_key":"InstanceGroups"},"ListInstances":{"input_token":"Marker","output_token":"Marker","result_key":"Instances"},"ListSteps":{"input_token":"Marker","output_token":"Marker","result_key":"Steps"}}}

/***/ }),
/* 226 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"ClusterRunning":{"delay":30,"operation":"DescribeCluster","maxAttempts":60,"acceptors":[{"state":"success","matcher":"path","argument":"Cluster.Status.State","expected":"RUNNING"},{"state":"success","matcher":"path","argument":"Cluster.Status.State","expected":"WAITING"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATING"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED_WITH_ERRORS"}]},"StepComplete":{"delay":30,"operation":"DescribeStep","maxAttempts":60,"acceptors":[{"state":"success","matcher":"path","argument":"Step.Status.State","expected":"COMPLETED"},{"state":"failure","matcher":"path","argument":"Step.Status.State","expected":"FAILED"},{"state":"failure","matcher":"path","argument":"Step.Status.State","expected":"CANCELLED"}]},"ClusterTerminated":{"delay":30,"operation":"DescribeCluster","maxAttempts":60,"acceptors":[{"state":"success","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED"},{"state":"failure","matcher":"path","argument":"Cluster.Status.State","expected":"TERMINATED_WITH_ERRORS"}]}}}

/***/ }),
/* 227 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"elastictranscoder-2012-09-25","apiVersion":"2012-09-25","endpointPrefix":"elastictranscoder","protocol":"rest-json","serviceFullName":"Amazon Elastic Transcoder","signatureVersion":"v4"},"operations":{"CancelJob":{"http":{"method":"DELETE","requestUri":"/2012-09-25/jobs/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"CreateJob":{"http":{"requestUri":"/2012-09-25/jobs","responseCode":201},"input":{"type":"structure","required":["PipelineId"],"members":{"PipelineId":{},"Input":{"shape":"S5"},"Inputs":{"shape":"St"},"Output":{"shape":"Su"},"Outputs":{"type":"list","member":{"shape":"Su"}},"OutputKeyPrefix":{},"Playlists":{"type":"list","member":{"type":"structure","members":{"Name":{},"Format":{},"OutputKeys":{"shape":"S1l"},"HlsContentProtection":{"shape":"S1m"},"PlayReadyDrm":{"shape":"S1q"}}}},"UserMetadata":{"shape":"S1v"}}},"output":{"type":"structure","members":{"Job":{"shape":"S1y"}}}},"CreatePipeline":{"http":{"requestUri":"/2012-09-25/pipelines","responseCode":201},"input":{"type":"structure","required":["Name","InputBucket","Role"],"members":{"Name":{},"InputBucket":{},"OutputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S2a"},"ContentConfig":{"shape":"S2c"},"ThumbnailConfig":{"shape":"S2c"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"},"Warnings":{"shape":"S2n"}}}},"CreatePreset":{"http":{"requestUri":"/2012-09-25/presets","responseCode":201},"input":{"type":"structure","required":["Name","Container"],"members":{"Name":{},"Description":{},"Container":{},"Video":{"shape":"S2r"},"Audio":{"shape":"S37"},"Thumbnails":{"shape":"S3i"}}},"output":{"type":"structure","members":{"Preset":{"shape":"S3m"},"Warning":{}}}},"DeletePipeline":{"http":{"method":"DELETE","requestUri":"/2012-09-25/pipelines/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DeletePreset":{"http":{"method":"DELETE","requestUri":"/2012-09-25/presets/{Id}","responseCode":202},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"ListJobsByPipeline":{"http":{"method":"GET","requestUri":"/2012-09-25/jobsByPipeline/{PipelineId}"},"input":{"type":"structure","required":["PipelineId"],"members":{"PipelineId":{"location":"uri","locationName":"PipelineId"},"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Jobs":{"shape":"S3v"},"NextPageToken":{}}}},"ListJobsByStatus":{"http":{"method":"GET","requestUri":"/2012-09-25/jobsByStatus/{Status}"},"input":{"type":"structure","required":["Status"],"members":{"Status":{"location":"uri","locationName":"Status"},"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Jobs":{"shape":"S3v"},"NextPageToken":{}}}},"ListPipelines":{"http":{"method":"GET","requestUri":"/2012-09-25/pipelines"},"input":{"type":"structure","members":{"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Pipelines":{"type":"list","member":{"shape":"S2l"}},"NextPageToken":{}}}},"ListPresets":{"http":{"method":"GET","requestUri":"/2012-09-25/presets"},"input":{"type":"structure","members":{"Ascending":{"location":"querystring","locationName":"Ascending"},"PageToken":{"location":"querystring","locationName":"PageToken"}}},"output":{"type":"structure","members":{"Presets":{"type":"list","member":{"shape":"S3m"}},"NextPageToken":{}}}},"ReadJob":{"http":{"method":"GET","requestUri":"/2012-09-25/jobs/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Job":{"shape":"S1y"}}}},"ReadPipeline":{"http":{"method":"GET","requestUri":"/2012-09-25/pipelines/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"},"Warnings":{"shape":"S2n"}}}},"ReadPreset":{"http":{"method":"GET","requestUri":"/2012-09-25/presets/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{"Preset":{"shape":"S3m"}}}},"TestRole":{"http":{"requestUri":"/2012-09-25/roleTests","responseCode":200},"input":{"type":"structure","required":["Role","InputBucket","OutputBucket","Topics"],"members":{"Role":{},"InputBucket":{},"OutputBucket":{},"Topics":{"type":"list","member":{}}},"deprecated":true},"output":{"type":"structure","members":{"Success":{},"Messages":{"type":"list","member":{}}},"deprecated":true},"deprecated":true},"UpdatePipeline":{"http":{"method":"PUT","requestUri":"/2012-09-25/pipelines/{Id}","responseCode":200},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"Name":{},"InputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S2a"},"ContentConfig":{"shape":"S2c"},"ThumbnailConfig":{"shape":"S2c"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"},"Warnings":{"shape":"S2n"}}}},"UpdatePipelineNotifications":{"http":{"requestUri":"/2012-09-25/pipelines/{Id}/notifications"},"input":{"type":"structure","required":["Id","Notifications"],"members":{"Id":{"location":"uri","locationName":"Id"},"Notifications":{"shape":"S2a"}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"}}}},"UpdatePipelineStatus":{"http":{"requestUri":"/2012-09-25/pipelines/{Id}/status"},"input":{"type":"structure","required":["Id","Status"],"members":{"Id":{"location":"uri","locationName":"Id"},"Status":{}}},"output":{"type":"structure","members":{"Pipeline":{"shape":"S2l"}}}}},"shapes":{"S5":{"type":"structure","members":{"Key":{},"FrameRate":{},"Resolution":{},"AspectRatio":{},"Interlaced":{},"Container":{},"Encryption":{"shape":"Sc"},"TimeSpan":{"shape":"Sg"},"InputCaptions":{"type":"structure","members":{"MergePolicy":{},"CaptionSources":{"shape":"Sk"}}},"DetectedProperties":{"type":"structure","members":{"Width":{"type":"integer"},"Height":{"type":"integer"},"FrameRate":{},"FileSize":{"type":"long"},"DurationMillis":{"type":"long"}}}}},"Sc":{"type":"structure","members":{"Mode":{},"Key":{},"KeyMd5":{},"InitializationVector":{}}},"Sg":{"type":"structure","members":{"StartTime":{},"Duration":{}}},"Sk":{"type":"list","member":{"type":"structure","members":{"Key":{},"Language":{},"TimeOffset":{},"Label":{},"Encryption":{"shape":"Sc"}}}},"St":{"type":"list","member":{"shape":"S5"}},"Su":{"type":"structure","members":{"Key":{},"ThumbnailPattern":{},"ThumbnailEncryption":{"shape":"Sc"},"Rotate":{},"PresetId":{},"SegmentDuration":{},"Watermarks":{"shape":"Sx"},"AlbumArt":{"shape":"S11"},"Composition":{"shape":"S19","deprecated":true},"Captions":{"shape":"S1b"},"Encryption":{"shape":"Sc"}}},"Sx":{"type":"list","member":{"type":"structure","members":{"PresetWatermarkId":{},"InputKey":{},"Encryption":{"shape":"Sc"}}}},"S11":{"type":"structure","members":{"MergePolicy":{},"Artwork":{"type":"list","member":{"type":"structure","members":{"InputKey":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"PaddingPolicy":{},"AlbumArtFormat":{},"Encryption":{"shape":"Sc"}}}}}},"S19":{"type":"list","member":{"type":"structure","members":{"TimeSpan":{"shape":"Sg"}},"deprecated":true},"deprecated":true},"S1b":{"type":"structure","members":{"MergePolicy":{"deprecated":true},"CaptionSources":{"shape":"Sk","deprecated":true},"CaptionFormats":{"type":"list","member":{"type":"structure","members":{"Format":{},"Pattern":{},"Encryption":{"shape":"Sc"}}}}}},"S1l":{"type":"list","member":{}},"S1m":{"type":"structure","members":{"Method":{},"Key":{},"KeyMd5":{},"InitializationVector":{},"LicenseAcquisitionUrl":{},"KeyStoragePolicy":{}}},"S1q":{"type":"structure","members":{"Format":{},"Key":{},"KeyMd5":{},"KeyId":{},"InitializationVector":{},"LicenseAcquisitionUrl":{}}},"S1v":{"type":"map","key":{},"value":{}},"S1y":{"type":"structure","members":{"Id":{},"Arn":{},"PipelineId":{},"Input":{"shape":"S5"},"Inputs":{"shape":"St"},"Output":{"shape":"S1z"},"Outputs":{"type":"list","member":{"shape":"S1z"}},"OutputKeyPrefix":{},"Playlists":{"type":"list","member":{"type":"structure","members":{"Name":{},"Format":{},"OutputKeys":{"shape":"S1l"},"HlsContentProtection":{"shape":"S1m"},"PlayReadyDrm":{"shape":"S1q"},"Status":{},"StatusDetail":{}}}},"Status":{},"UserMetadata":{"shape":"S1v"},"Timing":{"type":"structure","members":{"SubmitTimeMillis":{"type":"long"},"StartTimeMillis":{"type":"long"},"FinishTimeMillis":{"type":"long"}}}}},"S1z":{"type":"structure","members":{"Id":{},"Key":{},"ThumbnailPattern":{},"ThumbnailEncryption":{"shape":"Sc"},"Rotate":{},"PresetId":{},"SegmentDuration":{},"Status":{},"StatusDetail":{},"Duration":{"type":"long"},"Width":{"type":"integer"},"Height":{"type":"integer"},"FrameRate":{},"FileSize":{"type":"long"},"DurationMillis":{"type":"long"},"Watermarks":{"shape":"Sx"},"AlbumArt":{"shape":"S11"},"Composition":{"shape":"S19","deprecated":true},"Captions":{"shape":"S1b"},"Encryption":{"shape":"Sc"},"AppliedColorSpaceConversion":{}}},"S2a":{"type":"structure","members":{"Progressing":{},"Completed":{},"Warning":{},"Error":{}}},"S2c":{"type":"structure","members":{"Bucket":{},"StorageClass":{},"Permissions":{"type":"list","member":{"type":"structure","members":{"GranteeType":{},"Grantee":{},"Access":{"type":"list","member":{}}}}}}},"S2l":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Status":{},"InputBucket":{},"OutputBucket":{},"Role":{},"AwsKmsKeyArn":{},"Notifications":{"shape":"S2a"},"ContentConfig":{"shape":"S2c"},"ThumbnailConfig":{"shape":"S2c"}}},"S2n":{"type":"list","member":{"type":"structure","members":{"Code":{},"Message":{}}}},"S2r":{"type":"structure","members":{"Codec":{},"CodecOptions":{"type":"map","key":{},"value":{}},"KeyframesMaxDist":{},"FixedGOP":{},"BitRate":{},"FrameRate":{},"MaxFrameRate":{},"Resolution":{},"AspectRatio":{},"MaxWidth":{},"MaxHeight":{},"DisplayAspectRatio":{},"SizingPolicy":{},"PaddingPolicy":{},"Watermarks":{"type":"list","member":{"type":"structure","members":{"Id":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"HorizontalAlign":{},"HorizontalOffset":{},"VerticalAlign":{},"VerticalOffset":{},"Opacity":{},"Target":{}}}}}},"S37":{"type":"structure","members":{"Codec":{},"SampleRate":{},"BitRate":{},"Channels":{},"AudioPackingMode":{},"CodecOptions":{"type":"structure","members":{"Profile":{},"BitDepth":{},"BitOrder":{},"Signed":{}}}}},"S3i":{"type":"structure","members":{"Format":{},"Interval":{},"Resolution":{},"AspectRatio":{},"MaxWidth":{},"MaxHeight":{},"SizingPolicy":{},"PaddingPolicy":{}}},"S3m":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Description":{},"Container":{},"Audio":{"shape":"S37"},"Video":{"shape":"S2r"},"Thumbnails":{"shape":"S3i"},"Type":{}}},"S3v":{"type":"list","member":{"shape":"S1y"}}}}

/***/ }),
/* 228 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListJobsByPipeline":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Jobs"},"ListJobsByStatus":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Jobs"},"ListPipelines":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Pipelines"},"ListPresets":{"input_token":"PageToken","output_token":"NextPageToken","result_key":"Presets"}}}

/***/ }),
/* 229 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"JobComplete":{"delay":30,"operation":"ReadJob","maxAttempts":120,"acceptors":[{"expected":"Complete","matcher":"path","state":"success","argument":"Job.Status"},{"expected":"Canceled","matcher":"path","state":"failure","argument":"Job.Status"},{"expected":"Error","matcher":"path","state":"failure","argument":"Job.Status"}]}}}

/***/ }),
/* 230 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-12-01","endpointPrefix":"email","protocol":"query","serviceAbbreviation":"Amazon SES","serviceFullName":"Amazon Simple Email Service","signatureVersion":"v4","signingName":"ses","uid":"email-2010-12-01","xmlNamespace":"http://ses.amazonaws.com/doc/2010-12-01/"},"operations":{"CloneReceiptRuleSet":{"input":{"type":"structure","required":["RuleSetName","OriginalRuleSetName"],"members":{"RuleSetName":{},"OriginalRuleSetName":{}}},"output":{"resultWrapper":"CloneReceiptRuleSetResult","type":"structure","members":{}}},"CreateConfigurationSet":{"input":{"type":"structure","required":["ConfigurationSet"],"members":{"ConfigurationSet":{"shape":"S5"}}},"output":{"resultWrapper":"CreateConfigurationSetResult","type":"structure","members":{}}},"CreateConfigurationSetEventDestination":{"input":{"type":"structure","required":["ConfigurationSetName","EventDestination"],"members":{"ConfigurationSetName":{},"EventDestination":{"shape":"S9"}}},"output":{"resultWrapper":"CreateConfigurationSetEventDestinationResult","type":"structure","members":{}}},"CreateConfigurationSetTrackingOptions":{"input":{"type":"structure","required":["ConfigurationSetName","TrackingOptions"],"members":{"ConfigurationSetName":{},"TrackingOptions":{"shape":"Sp"}}},"output":{"resultWrapper":"CreateConfigurationSetTrackingOptionsResult","type":"structure","members":{}}},"CreateReceiptFilter":{"input":{"type":"structure","required":["Filter"],"members":{"Filter":{"shape":"St"}}},"output":{"resultWrapper":"CreateReceiptFilterResult","type":"structure","members":{}}},"CreateReceiptRule":{"input":{"type":"structure","required":["RuleSetName","Rule"],"members":{"RuleSetName":{},"After":{},"Rule":{"shape":"S11"}}},"output":{"resultWrapper":"CreateReceiptRuleResult","type":"structure","members":{}}},"CreateReceiptRuleSet":{"input":{"type":"structure","required":["RuleSetName"],"members":{"RuleSetName":{}}},"output":{"resultWrapper":"CreateReceiptRuleSetResult","type":"structure","members":{}}},"CreateTemplate":{"input":{"type":"structure","required":["Template"],"members":{"Template":{"shape":"S1t"}}},"output":{"resultWrapper":"CreateTemplateResult","type":"structure","members":{}}},"DeleteConfigurationSet":{"input":{"type":"structure","required":["ConfigurationSetName"],"members":{"ConfigurationSetName":{}}},"output":{"resultWrapper":"DeleteConfigurationSetResult","type":"structure","members":{}}},"DeleteConfigurationSetEventDestination":{"input":{"type":"structure","required":["ConfigurationSetName","EventDestinationName"],"members":{"ConfigurationSetName":{},"EventDestinationName":{}}},"output":{"resultWrapper":"DeleteConfigurationSetEventDestinationResult","type":"structure","members":{}}},"DeleteConfigurationSetTrackingOptions":{"input":{"type":"structure","required":["ConfigurationSetName"],"members":{"ConfigurationSetName":{}}},"output":{"resultWrapper":"DeleteConfigurationSetTrackingOptionsResult","type":"structure","members":{}}},"DeleteIdentity":{"input":{"type":"structure","required":["Identity"],"members":{"Identity":{}}},"output":{"resultWrapper":"DeleteIdentityResult","type":"structure","members":{}}},"DeleteIdentityPolicy":{"input":{"type":"structure","required":["Identity","PolicyName"],"members":{"Identity":{},"PolicyName":{}}},"output":{"resultWrapper":"DeleteIdentityPolicyResult","type":"structure","members":{}}},"DeleteReceiptFilter":{"input":{"type":"structure","required":["FilterName"],"members":{"FilterName":{}}},"output":{"resultWrapper":"DeleteReceiptFilterResult","type":"structure","members":{}}},"DeleteReceiptRule":{"input":{"type":"structure","required":["RuleSetName","RuleName"],"members":{"RuleSetName":{},"RuleName":{}}},"output":{"resultWrapper":"DeleteReceiptRuleResult","type":"structure","members":{}}},"DeleteReceiptRuleSet":{"input":{"type":"structure","required":["RuleSetName"],"members":{"RuleSetName":{}}},"output":{"resultWrapper":"DeleteReceiptRuleSetResult","type":"structure","members":{}}},"DeleteTemplate":{"input":{"type":"structure","required":["TemplateName"],"members":{"TemplateName":{}}},"output":{"resultWrapper":"DeleteTemplateResult","type":"structure","members":{}}},"DeleteVerifiedEmailAddress":{"input":{"type":"structure","required":["EmailAddress"],"members":{"EmailAddress":{}}}},"DescribeActiveReceiptRuleSet":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"DescribeActiveReceiptRuleSetResult","type":"structure","members":{"Metadata":{"shape":"S2m"},"Rules":{"shape":"S2o"}}}},"DescribeConfigurationSet":{"input":{"type":"structure","required":["ConfigurationSetName"],"members":{"ConfigurationSetName":{},"ConfigurationSetAttributeNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DescribeConfigurationSetResult","type":"structure","members":{"ConfigurationSet":{"shape":"S5"},"EventDestinations":{"type":"list","member":{"shape":"S9"}},"TrackingOptions":{"shape":"Sp"}}}},"DescribeReceiptRule":{"input":{"type":"structure","required":["RuleSetName","RuleName"],"members":{"RuleSetName":{},"RuleName":{}}},"output":{"resultWrapper":"DescribeReceiptRuleResult","type":"structure","members":{"Rule":{"shape":"S11"}}}},"DescribeReceiptRuleSet":{"input":{"type":"structure","required":["RuleSetName"],"members":{"RuleSetName":{}}},"output":{"resultWrapper":"DescribeReceiptRuleSetResult","type":"structure","members":{"Metadata":{"shape":"S2m"},"Rules":{"shape":"S2o"}}}},"GetIdentityDkimAttributes":{"input":{"type":"structure","required":["Identities"],"members":{"Identities":{"shape":"S2z"}}},"output":{"resultWrapper":"GetIdentityDkimAttributesResult","type":"structure","required":["DkimAttributes"],"members":{"DkimAttributes":{"type":"map","key":{},"value":{"type":"structure","required":["DkimEnabled","DkimVerificationStatus"],"members":{"DkimEnabled":{"type":"boolean"},"DkimVerificationStatus":{},"DkimTokens":{"shape":"S34"}}}}}}},"GetIdentityMailFromDomainAttributes":{"input":{"type":"structure","required":["Identities"],"members":{"Identities":{"shape":"S2z"}}},"output":{"resultWrapper":"GetIdentityMailFromDomainAttributesResult","type":"structure","required":["MailFromDomainAttributes"],"members":{"MailFromDomainAttributes":{"type":"map","key":{},"value":{"type":"structure","required":["MailFromDomain","MailFromDomainStatus","BehaviorOnMXFailure"],"members":{"MailFromDomain":{},"MailFromDomainStatus":{},"BehaviorOnMXFailure":{}}}}}}},"GetIdentityNotificationAttributes":{"input":{"type":"structure","required":["Identities"],"members":{"Identities":{"shape":"S2z"}}},"output":{"resultWrapper":"GetIdentityNotificationAttributesResult","type":"structure","required":["NotificationAttributes"],"members":{"NotificationAttributes":{"type":"map","key":{},"value":{"type":"structure","required":["BounceTopic","ComplaintTopic","DeliveryTopic","ForwardingEnabled"],"members":{"BounceTopic":{},"ComplaintTopic":{},"DeliveryTopic":{},"ForwardingEnabled":{"type":"boolean"},"HeadersInBounceNotificationsEnabled":{"type":"boolean"},"HeadersInComplaintNotificationsEnabled":{"type":"boolean"},"HeadersInDeliveryNotificationsEnabled":{"type":"boolean"}}}}}}},"GetIdentityPolicies":{"input":{"type":"structure","required":["Identity","PolicyNames"],"members":{"Identity":{},"PolicyNames":{"shape":"S3j"}}},"output":{"resultWrapper":"GetIdentityPoliciesResult","type":"structure","required":["Policies"],"members":{"Policies":{"type":"map","key":{},"value":{}}}}},"GetIdentityVerificationAttributes":{"input":{"type":"structure","required":["Identities"],"members":{"Identities":{"shape":"S2z"}}},"output":{"resultWrapper":"GetIdentityVerificationAttributesResult","type":"structure","required":["VerificationAttributes"],"members":{"VerificationAttributes":{"type":"map","key":{},"value":{"type":"structure","required":["VerificationStatus"],"members":{"VerificationStatus":{},"VerificationToken":{}}}}}}},"GetSendQuota":{"output":{"resultWrapper":"GetSendQuotaResult","type":"structure","members":{"Max24HourSend":{"type":"double"},"MaxSendRate":{"type":"double"},"SentLast24Hours":{"type":"double"}}}},"GetSendStatistics":{"output":{"resultWrapper":"GetSendStatisticsResult","type":"structure","members":{"SendDataPoints":{"type":"list","member":{"type":"structure","members":{"Timestamp":{"type":"timestamp"},"DeliveryAttempts":{"type":"long"},"Bounces":{"type":"long"},"Complaints":{"type":"long"},"Rejects":{"type":"long"}}}}}}},"GetTemplate":{"input":{"type":"structure","required":["TemplateName"],"members":{"TemplateName":{}}},"output":{"resultWrapper":"GetTemplateResult","type":"structure","members":{"Template":{"shape":"S1t"}}}},"ListConfigurationSets":{"input":{"type":"structure","members":{"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListConfigurationSetsResult","type":"structure","members":{"ConfigurationSets":{"type":"list","member":{"shape":"S5"}},"NextToken":{}}}},"ListIdentities":{"input":{"type":"structure","members":{"IdentityType":{},"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListIdentitiesResult","type":"structure","required":["Identities"],"members":{"Identities":{"shape":"S2z"},"NextToken":{}}}},"ListIdentityPolicies":{"input":{"type":"structure","required":["Identity"],"members":{"Identity":{}}},"output":{"resultWrapper":"ListIdentityPoliciesResult","type":"structure","required":["PolicyNames"],"members":{"PolicyNames":{"shape":"S3j"}}}},"ListReceiptFilters":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"ListReceiptFiltersResult","type":"structure","members":{"Filters":{"type":"list","member":{"shape":"St"}}}}},"ListReceiptRuleSets":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListReceiptRuleSetsResult","type":"structure","members":{"RuleSets":{"type":"list","member":{"shape":"S2m"}},"NextToken":{}}}},"ListTemplates":{"input":{"type":"structure","members":{"NextToken":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListTemplatesResult","type":"structure","members":{"TemplatesMetadata":{"type":"list","member":{"type":"structure","members":{"Name":{},"CreatedTimestamp":{"type":"timestamp"}}}},"NextToken":{}}}},"ListVerifiedEmailAddresses":{"output":{"resultWrapper":"ListVerifiedEmailAddressesResult","type":"structure","members":{"VerifiedEmailAddresses":{"shape":"S4m"}}}},"PutIdentityPolicy":{"input":{"type":"structure","required":["Identity","PolicyName","Policy"],"members":{"Identity":{},"PolicyName":{},"Policy":{}}},"output":{"resultWrapper":"PutIdentityPolicyResult","type":"structure","members":{}}},"ReorderReceiptRuleSet":{"input":{"type":"structure","required":["RuleSetName","RuleNames"],"members":{"RuleSetName":{},"RuleNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"ReorderReceiptRuleSetResult","type":"structure","members":{}}},"SendBounce":{"input":{"type":"structure","required":["OriginalMessageId","BounceSender","BouncedRecipientInfoList"],"members":{"OriginalMessageId":{},"BounceSender":{},"Explanation":{},"MessageDsn":{"type":"structure","required":["ReportingMta"],"members":{"ReportingMta":{},"ArrivalDate":{"type":"timestamp"},"ExtensionFields":{"shape":"S4y"}}},"BouncedRecipientInfoList":{"type":"list","member":{"type":"structure","required":["Recipient"],"members":{"Recipient":{},"RecipientArn":{},"BounceType":{},"RecipientDsnFields":{"type":"structure","required":["Action","Status"],"members":{"FinalRecipient":{},"Action":{},"RemoteMta":{},"Status":{},"DiagnosticCode":{},"LastAttemptDate":{"type":"timestamp"},"ExtensionFields":{"shape":"S4y"}}}}}},"BounceSenderArn":{}}},"output":{"resultWrapper":"SendBounceResult","type":"structure","members":{"MessageId":{}}}},"SendBulkTemplatedEmail":{"input":{"type":"structure","required":["Source","Template","Destinations"],"members":{"Source":{},"SourceArn":{},"ReplyToAddresses":{"shape":"S4m"},"ReturnPath":{},"ReturnPathArn":{},"ConfigurationSetName":{},"DefaultTags":{"shape":"S5d"},"Template":{},"TemplateArn":{},"DefaultTemplateData":{},"Destinations":{"type":"list","member":{"type":"structure","required":["Destination"],"members":{"Destination":{"shape":"S5k"},"ReplacementTags":{"shape":"S5d"},"ReplacementTemplateData":{}}}}}},"output":{"resultWrapper":"SendBulkTemplatedEmailResult","type":"structure","required":["Status"],"members":{"Status":{"type":"list","member":{"type":"structure","members":{"Status":{},"Error":{},"MessageId":{}}}}}}},"SendEmail":{"input":{"type":"structure","required":["Source","Destination","Message"],"members":{"Source":{},"Destination":{"shape":"S5k"},"Message":{"type":"structure","required":["Subject","Body"],"members":{"Subject":{"shape":"S5s"},"Body":{"type":"structure","members":{"Text":{"shape":"S5s"},"Html":{"shape":"S5s"}}}}},"ReplyToAddresses":{"shape":"S4m"},"ReturnPath":{},"SourceArn":{},"ReturnPathArn":{},"Tags":{"shape":"S5d"},"ConfigurationSetName":{}}},"output":{"resultWrapper":"SendEmailResult","type":"structure","required":["MessageId"],"members":{"MessageId":{}}}},"SendRawEmail":{"input":{"type":"structure","required":["RawMessage"],"members":{"Source":{},"Destinations":{"shape":"S4m"},"RawMessage":{"type":"structure","required":["Data"],"members":{"Data":{"type":"blob"}}},"FromArn":{},"SourceArn":{},"ReturnPathArn":{},"Tags":{"shape":"S5d"},"ConfigurationSetName":{}}},"output":{"resultWrapper":"SendRawEmailResult","type":"structure","required":["MessageId"],"members":{"MessageId":{}}}},"SendTemplatedEmail":{"input":{"type":"structure","required":["Source","Destination","Template","TemplateData"],"members":{"Source":{},"Destination":{"shape":"S5k"},"ReplyToAddresses":{"shape":"S4m"},"ReturnPath":{},"SourceArn":{},"ReturnPathArn":{},"Tags":{"shape":"S5d"},"ConfigurationSetName":{},"Template":{},"TemplateArn":{},"TemplateData":{}}},"output":{"resultWrapper":"SendTemplatedEmailResult","type":"structure","required":["MessageId"],"members":{"MessageId":{}}}},"SetActiveReceiptRuleSet":{"input":{"type":"structure","members":{"RuleSetName":{}}},"output":{"resultWrapper":"SetActiveReceiptRuleSetResult","type":"structure","members":{}}},"SetIdentityDkimEnabled":{"input":{"type":"structure","required":["Identity","DkimEnabled"],"members":{"Identity":{},"DkimEnabled":{"type":"boolean"}}},"output":{"resultWrapper":"SetIdentityDkimEnabledResult","type":"structure","members":{}}},"SetIdentityFeedbackForwardingEnabled":{"input":{"type":"structure","required":["Identity","ForwardingEnabled"],"members":{"Identity":{},"ForwardingEnabled":{"type":"boolean"}}},"output":{"resultWrapper":"SetIdentityFeedbackForwardingEnabledResult","type":"structure","members":{}}},"SetIdentityHeadersInNotificationsEnabled":{"input":{"type":"structure","required":["Identity","NotificationType","Enabled"],"members":{"Identity":{},"NotificationType":{},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"SetIdentityHeadersInNotificationsEnabledResult","type":"structure","members":{}}},"SetIdentityMailFromDomain":{"input":{"type":"structure","required":["Identity"],"members":{"Identity":{},"MailFromDomain":{},"BehaviorOnMXFailure":{}}},"output":{"resultWrapper":"SetIdentityMailFromDomainResult","type":"structure","members":{}}},"SetIdentityNotificationTopic":{"input":{"type":"structure","required":["Identity","NotificationType"],"members":{"Identity":{},"NotificationType":{},"SnsTopic":{}}},"output":{"resultWrapper":"SetIdentityNotificationTopicResult","type":"structure","members":{}}},"SetReceiptRulePosition":{"input":{"type":"structure","required":["RuleSetName","RuleName"],"members":{"RuleSetName":{},"RuleName":{},"After":{}}},"output":{"resultWrapper":"SetReceiptRulePositionResult","type":"structure","members":{}}},"TestRenderTemplate":{"input":{"type":"structure","required":["TemplateName","TemplateData"],"members":{"TemplateName":{},"TemplateData":{}}},"output":{"resultWrapper":"TestRenderTemplateResult","type":"structure","members":{"RenderedTemplate":{}}}},"UpdateConfigurationSetEventDestination":{"input":{"type":"structure","required":["ConfigurationSetName","EventDestination"],"members":{"ConfigurationSetName":{},"EventDestination":{"shape":"S9"}}},"output":{"resultWrapper":"UpdateConfigurationSetEventDestinationResult","type":"structure","members":{}}},"UpdateConfigurationSetTrackingOptions":{"input":{"type":"structure","required":["ConfigurationSetName","TrackingOptions"],"members":{"ConfigurationSetName":{},"TrackingOptions":{"shape":"Sp"}}},"output":{"resultWrapper":"UpdateConfigurationSetTrackingOptionsResult","type":"structure","members":{}}},"UpdateReceiptRule":{"input":{"type":"structure","required":["RuleSetName","Rule"],"members":{"RuleSetName":{},"Rule":{"shape":"S11"}}},"output":{"resultWrapper":"UpdateReceiptRuleResult","type":"structure","members":{}}},"UpdateTemplate":{"input":{"type":"structure","required":["Template"],"members":{"Template":{"shape":"S1t"}}},"output":{"resultWrapper":"UpdateTemplateResult","type":"structure","members":{}}},"VerifyDomainDkim":{"input":{"type":"structure","required":["Domain"],"members":{"Domain":{}}},"output":{"resultWrapper":"VerifyDomainDkimResult","type":"structure","required":["DkimTokens"],"members":{"DkimTokens":{"shape":"S34"}}}},"VerifyDomainIdentity":{"input":{"type":"structure","required":["Domain"],"members":{"Domain":{}}},"output":{"resultWrapper":"VerifyDomainIdentityResult","type":"structure","required":["VerificationToken"],"members":{"VerificationToken":{}}}},"VerifyEmailAddress":{"input":{"type":"structure","required":["EmailAddress"],"members":{"EmailAddress":{}}}},"VerifyEmailIdentity":{"input":{"type":"structure","required":["EmailAddress"],"members":{"EmailAddress":{}}},"output":{"resultWrapper":"VerifyEmailIdentityResult","type":"structure","members":{}}}},"shapes":{"S5":{"type":"structure","required":["Name"],"members":{"Name":{}}},"S9":{"type":"structure","required":["Name","MatchingEventTypes"],"members":{"Name":{},"Enabled":{"type":"boolean"},"MatchingEventTypes":{"type":"list","member":{}},"KinesisFirehoseDestination":{"type":"structure","required":["IAMRoleARN","DeliveryStreamARN"],"members":{"IAMRoleARN":{},"DeliveryStreamARN":{}}},"CloudWatchDestination":{"type":"structure","required":["DimensionConfigurations"],"members":{"DimensionConfigurations":{"type":"list","member":{"type":"structure","required":["DimensionName","DimensionValueSource","DefaultDimensionValue"],"members":{"DimensionName":{},"DimensionValueSource":{},"DefaultDimensionValue":{}}}}}},"SNSDestination":{"type":"structure","required":["TopicARN"],"members":{"TopicARN":{}}}}},"Sp":{"type":"structure","members":{"CustomRedirectDomain":{}}},"St":{"type":"structure","required":["Name","IpFilter"],"members":{"Name":{},"IpFilter":{"type":"structure","required":["Policy","Cidr"],"members":{"Policy":{},"Cidr":{}}}}},"S11":{"type":"structure","required":["Name"],"members":{"Name":{},"Enabled":{"type":"boolean"},"TlsPolicy":{},"Recipients":{"type":"list","member":{}},"Actions":{"type":"list","member":{"type":"structure","members":{"S3Action":{"type":"structure","required":["BucketName"],"members":{"TopicArn":{},"BucketName":{},"ObjectKeyPrefix":{},"KmsKeyArn":{}}},"BounceAction":{"type":"structure","required":["SmtpReplyCode","Message","Sender"],"members":{"TopicArn":{},"SmtpReplyCode":{},"StatusCode":{},"Message":{},"Sender":{}}},"WorkmailAction":{"type":"structure","required":["OrganizationArn"],"members":{"TopicArn":{},"OrganizationArn":{}}},"LambdaAction":{"type":"structure","required":["FunctionArn"],"members":{"TopicArn":{},"FunctionArn":{},"InvocationType":{}}},"StopAction":{"type":"structure","required":["Scope"],"members":{"Scope":{},"TopicArn":{}}},"AddHeaderAction":{"type":"structure","required":["HeaderName","HeaderValue"],"members":{"HeaderName":{},"HeaderValue":{}}},"SNSAction":{"type":"structure","required":["TopicArn"],"members":{"TopicArn":{},"Encoding":{}}}}}},"ScanEnabled":{"type":"boolean"}}},"S1t":{"type":"structure","required":["TemplateName"],"members":{"TemplateName":{},"SubjectPart":{},"TextPart":{},"HtmlPart":{}}},"S2m":{"type":"structure","members":{"Name":{},"CreatedTimestamp":{"type":"timestamp"}}},"S2o":{"type":"list","member":{"shape":"S11"}},"S2z":{"type":"list","member":{}},"S34":{"type":"list","member":{}},"S3j":{"type":"list","member":{}},"S4m":{"type":"list","member":{}},"S4y":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"S5d":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"S5k":{"type":"structure","members":{"ToAddresses":{"shape":"S4m"},"CcAddresses":{"shape":"S4m"},"BccAddresses":{"shape":"S4m"}}},"S5s":{"type":"structure","required":["Data"],"members":{"Data":{},"Charset":{}}}}}

/***/ }),
/* 231 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListIdentities":{"input_token":"NextToken","limit_key":"MaxItems","output_token":"NextToken","result_key":"Identities"},"ListVerifiedEmailAddresses":{"result_key":"VerifiedEmailAddresses"}}}

/***/ }),
/* 232 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"IdentityExists":{"delay":3,"operation":"GetIdentityVerificationAttributes","maxAttempts":20,"acceptors":[{"expected":"Success","matcher":"pathAll","state":"success","argument":"VerificationAttributes.*.VerificationStatus"}]}}}

/***/ }),
/* 233 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-01-11","endpointPrefix":"entitlement.marketplace","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Marketplace Entitlement Service","signatureVersion":"v4","signingName":"aws-marketplace","targetPrefix":"AWSMPEntitlementService","uid":"entitlement.marketplace-2017-01-11"},"operations":{"GetEntitlements":{"input":{"type":"structure","required":["ProductCode"],"members":{"ProductCode":{},"Filter":{"type":"map","key":{},"value":{"type":"list","member":{}}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Entitlements":{"type":"list","member":{"type":"structure","members":{"ProductCode":{},"Dimension":{},"CustomerIdentifier":{},"Value":{"type":"structure","members":{"IntegerValue":{"type":"integer"},"DoubleValue":{"type":"double"},"BooleanValue":{"type":"boolean"},"StringValue":{}}},"ExpirationDate":{"type":"timestamp"}}}},"NextToken":{}}}}},"shapes":{}}

/***/ }),
/* 234 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 235 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-01-01","endpointPrefix":"es","protocol":"rest-json","serviceFullName":"Amazon Elasticsearch Service","signatureVersion":"v4","uid":"es-2015-01-01"},"operations":{"AddTags":{"http":{"requestUri":"/2015-01-01/tags"},"input":{"type":"structure","required":["ARN","TagList"],"members":{"ARN":{},"TagList":{"shape":"S3"}}}},"CreateElasticsearchDomain":{"http":{"requestUri":"/2015-01-01/es/domain"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"ElasticsearchVersion":{},"ElasticsearchClusterConfig":{"shape":"Sa"},"EBSOptions":{"shape":"Se"},"AccessPolicies":{},"SnapshotOptions":{"shape":"Sh"},"VPCOptions":{"shape":"Si"},"AdvancedOptions":{"shape":"Sl"},"LogPublishingOptions":{"shape":"Sm"}}},"output":{"type":"structure","members":{"DomainStatus":{"shape":"Sr"}}}},"DeleteElasticsearchDomain":{"http":{"method":"DELETE","requestUri":"/2015-01-01/es/domain/{DomainName}"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","members":{"DomainStatus":{"shape":"Sr"}}}},"DeleteElasticsearchServiceRole":{"http":{"method":"DELETE","requestUri":"/2015-01-01/es/role"}},"DescribeElasticsearchDomain":{"http":{"method":"GET","requestUri":"/2015-01-01/es/domain/{DomainName}"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","required":["DomainStatus"],"members":{"DomainStatus":{"shape":"Sr"}}}},"DescribeElasticsearchDomainConfig":{"http":{"method":"GET","requestUri":"/2015-01-01/es/domain/{DomainName}/config"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"}}},"output":{"type":"structure","required":["DomainConfig"],"members":{"DomainConfig":{"shape":"S12"}}}},"DescribeElasticsearchDomains":{"http":{"requestUri":"/2015-01-01/es/domain-info"},"input":{"type":"structure","required":["DomainNames"],"members":{"DomainNames":{"type":"list","member":{}}}},"output":{"type":"structure","required":["DomainStatusList"],"members":{"DomainStatusList":{"type":"list","member":{"shape":"Sr"}}}}},"DescribeElasticsearchInstanceTypeLimits":{"http":{"method":"GET","requestUri":"/2015-01-01/es/instanceTypeLimits/{ElasticsearchVersion}/{InstanceType}"},"input":{"type":"structure","required":["InstanceType","ElasticsearchVersion"],"members":{"DomainName":{"location":"querystring","locationName":"domainName"},"InstanceType":{"location":"uri","locationName":"InstanceType"},"ElasticsearchVersion":{"location":"uri","locationName":"ElasticsearchVersion"}}},"output":{"type":"structure","members":{"LimitsByRole":{"type":"map","key":{},"value":{"type":"structure","members":{"StorageTypes":{"type":"list","member":{"type":"structure","members":{"StorageTypeName":{},"StorageSubTypeName":{},"StorageTypeLimits":{"type":"list","member":{"type":"structure","members":{"LimitName":{},"LimitValues":{"shape":"S1v"}}}}}}},"InstanceLimits":{"type":"structure","members":{"InstanceCountLimits":{"type":"structure","members":{"MinimumInstanceCount":{"type":"integer"},"MaximumInstanceCount":{"type":"integer"}}}}},"AdditionalLimits":{"type":"list","member":{"type":"structure","members":{"LimitName":{},"LimitValues":{"shape":"S1v"}}}}}}}}}},"ListDomainNames":{"http":{"method":"GET","requestUri":"/2015-01-01/domain"},"output":{"type":"structure","members":{"DomainNames":{"type":"list","member":{"type":"structure","members":{"DomainName":{}}}}}}},"ListElasticsearchInstanceTypes":{"http":{"method":"GET","requestUri":"/2015-01-01/es/instanceTypes/{ElasticsearchVersion}"},"input":{"type":"structure","required":["ElasticsearchVersion"],"members":{"ElasticsearchVersion":{"location":"uri","locationName":"ElasticsearchVersion"},"DomainName":{"location":"querystring","locationName":"domainName"},"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"ElasticsearchInstanceTypes":{"type":"list","member":{}},"NextToken":{}}}},"ListElasticsearchVersions":{"http":{"method":"GET","requestUri":"/2015-01-01/es/versions"},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"NextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"ElasticsearchVersions":{"type":"list","member":{}},"NextToken":{}}}},"ListTags":{"http":{"method":"GET","requestUri":"/2015-01-01/tags/"},"input":{"type":"structure","required":["ARN"],"members":{"ARN":{"location":"querystring","locationName":"arn"}}},"output":{"type":"structure","members":{"TagList":{"shape":"S3"}}}},"RemoveTags":{"http":{"requestUri":"/2015-01-01/tags-removal"},"input":{"type":"structure","required":["ARN","TagKeys"],"members":{"ARN":{},"TagKeys":{"shape":"Sj"}}}},"UpdateElasticsearchDomainConfig":{"http":{"requestUri":"/2015-01-01/es/domain/{DomainName}/config"},"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{"location":"uri","locationName":"DomainName"},"ElasticsearchClusterConfig":{"shape":"Sa"},"EBSOptions":{"shape":"Se"},"SnapshotOptions":{"shape":"Sh"},"VPCOptions":{"shape":"Si"},"AdvancedOptions":{"shape":"Sl"},"AccessPolicies":{},"LogPublishingOptions":{"shape":"Sm"}}},"output":{"type":"structure","required":["DomainConfig"],"members":{"DomainConfig":{"shape":"S12"}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sa":{"type":"structure","members":{"InstanceType":{},"InstanceCount":{"type":"integer"},"DedicatedMasterEnabled":{"type":"boolean"},"ZoneAwarenessEnabled":{"type":"boolean"},"DedicatedMasterType":{},"DedicatedMasterCount":{"type":"integer"}}},"Se":{"type":"structure","members":{"EBSEnabled":{"type":"boolean"},"VolumeType":{},"VolumeSize":{"type":"integer"},"Iops":{"type":"integer"}}},"Sh":{"type":"structure","members":{"AutomatedSnapshotStartHour":{"type":"integer"}}},"Si":{"type":"structure","members":{"SubnetIds":{"shape":"Sj"},"SecurityGroupIds":{"shape":"Sj"}}},"Sj":{"type":"list","member":{}},"Sl":{"type":"map","key":{},"value":{}},"Sm":{"type":"map","key":{},"value":{"type":"structure","members":{"CloudWatchLogsLogGroupArn":{},"Enabled":{"type":"boolean"}}}},"Sr":{"type":"structure","required":["DomainId","DomainName","ARN","ElasticsearchClusterConfig"],"members":{"DomainId":{},"DomainName":{},"ARN":{},"Created":{"type":"boolean"},"Deleted":{"type":"boolean"},"Endpoint":{},"Endpoints":{"type":"map","key":{},"value":{}},"Processing":{"type":"boolean"},"ElasticsearchVersion":{},"ElasticsearchClusterConfig":{"shape":"Sa"},"EBSOptions":{"shape":"Se"},"AccessPolicies":{},"SnapshotOptions":{"shape":"Sh"},"VPCOptions":{"shape":"Sv"},"AdvancedOptions":{"shape":"Sl"},"LogPublishingOptions":{"shape":"Sm"}}},"Sv":{"type":"structure","members":{"VPCId":{},"SubnetIds":{"shape":"Sj"},"AvailabilityZones":{"shape":"Sj"},"SecurityGroupIds":{"shape":"Sj"}}},"S12":{"type":"structure","members":{"ElasticsearchVersion":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"S14"}}},"ElasticsearchClusterConfig":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sa"},"Status":{"shape":"S14"}}},"EBSOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Se"},"Status":{"shape":"S14"}}},"AccessPolicies":{"type":"structure","required":["Options","Status"],"members":{"Options":{},"Status":{"shape":"S14"}}},"SnapshotOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sh"},"Status":{"shape":"S14"}}},"VPCOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sv"},"Status":{"shape":"S14"}}},"AdvancedOptions":{"type":"structure","required":["Options","Status"],"members":{"Options":{"shape":"Sl"},"Status":{"shape":"S14"}}},"LogPublishingOptions":{"type":"structure","members":{"Options":{"shape":"Sm"},"Status":{"shape":"S14"}}}}},"S14":{"type":"structure","required":["CreationDate","UpdateDate","State"],"members":{"CreationDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"UpdateVersion":{"type":"integer"},"State":{},"PendingDeletion":{"type":"boolean"}}},"S1v":{"type":"list","member":{}}}}

/***/ }),
/* 236 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListElasticsearchInstanceTypes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListElasticsearchVersions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 237 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-10-07","endpointPrefix":"events","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon CloudWatch Events","signatureVersion":"v4","targetPrefix":"AWSEvents","uid":"events-2015-10-07"},"operations":{"DeleteRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}}},"DescribeEventBus":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"Name":{},"Arn":{},"Policy":{}}}},"DescribeRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{},"Arn":{},"EventPattern":{},"ScheduleExpression":{},"State":{},"Description":{},"RoleArn":{}}}},"DisableRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}}},"EnableRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}}},"ListRuleNamesByTarget":{"input":{"type":"structure","required":["TargetArn"],"members":{"TargetArn":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"RuleNames":{"type":"list","member":{}},"NextToken":{}}}},"ListRules":{"input":{"type":"structure","members":{"NamePrefix":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Rules":{"type":"list","member":{"type":"structure","members":{"Name":{},"Arn":{},"EventPattern":{},"State":{},"Description":{},"ScheduleExpression":{},"RoleArn":{}}}},"NextToken":{}}}},"ListTargetsByRule":{"input":{"type":"structure","required":["Rule"],"members":{"Rule":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Targets":{"shape":"Ss"},"NextToken":{}}}},"PutEvents":{"input":{"type":"structure","required":["Entries"],"members":{"Entries":{"type":"list","member":{"type":"structure","members":{"Time":{"type":"timestamp"},"Source":{},"Resources":{"type":"list","member":{}},"DetailType":{},"Detail":{}}}}}},"output":{"type":"structure","members":{"FailedEntryCount":{"type":"integer"},"Entries":{"type":"list","member":{"type":"structure","members":{"EventId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"PutPermission":{"input":{"type":"structure","required":["Action","Principal","StatementId"],"members":{"Action":{},"Principal":{},"StatementId":{}}}},"PutRule":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"ScheduleExpression":{},"EventPattern":{},"State":{},"Description":{},"RoleArn":{}}},"output":{"type":"structure","members":{"RuleArn":{}}}},"PutTargets":{"input":{"type":"structure","required":["Rule","Targets"],"members":{"Rule":{},"Targets":{"shape":"Ss"}}},"output":{"type":"structure","members":{"FailedEntryCount":{"type":"integer"},"FailedEntries":{"type":"list","member":{"type":"structure","members":{"TargetId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"RemovePermission":{"input":{"type":"structure","required":["StatementId"],"members":{"StatementId":{}}}},"RemoveTargets":{"input":{"type":"structure","required":["Rule","Ids"],"members":{"Rule":{},"Ids":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"FailedEntryCount":{"type":"integer"},"FailedEntries":{"type":"list","member":{"type":"structure","members":{"TargetId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"TestEventPattern":{"input":{"type":"structure","required":["EventPattern","Event"],"members":{"EventPattern":{},"Event":{}}},"output":{"type":"structure","members":{"Result":{"type":"boolean"}}}}},"shapes":{"Ss":{"type":"list","member":{"type":"structure","required":["Id","Arn"],"members":{"Id":{},"Arn":{},"RoleArn":{},"Input":{},"InputPath":{},"InputTransformer":{"type":"structure","required":["InputTemplate"],"members":{"InputPathsMap":{"type":"map","key":{},"value":{}},"InputTemplate":{}}},"KinesisParameters":{"type":"structure","required":["PartitionKeyPath"],"members":{"PartitionKeyPath":{}}},"RunCommandParameters":{"type":"structure","required":["RunCommandTargets"],"members":{"RunCommandTargets":{"type":"list","member":{"type":"structure","required":["Key","Values"],"members":{"Key":{},"Values":{"type":"list","member":{}}}}}}},"EcsParameters":{"type":"structure","required":["TaskDefinitionArn"],"members":{"TaskDefinitionArn":{},"TaskCount":{"type":"integer"}}}}}}}}

/***/ }),
/* 238 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 239 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-08-04","endpointPrefix":"firehose","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Firehose","serviceFullName":"Amazon Kinesis Firehose","signatureVersion":"v4","targetPrefix":"Firehose_20150804","uid":"firehose-2015-08-04"},"operations":{"CreateDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"DeliveryStreamType":{},"KinesisStreamSourceConfiguration":{"type":"structure","required":["KinesisStreamARN","RoleARN"],"members":{"KinesisStreamARN":{},"RoleARN":{}}},"S3DestinationConfiguration":{"shape":"S7","deprecated":true},"ExtendedS3DestinationConfiguration":{"type":"structure","required":["RoleARN","BucketARN"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"Sa"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Se"},"CloudWatchLoggingOptions":{"shape":"Si"},"ProcessingConfiguration":{"shape":"Sn"},"S3BackupMode":{},"S3BackupConfiguration":{"shape":"S7"}}},"RedshiftDestinationConfiguration":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","Password","S3Configuration"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"Sy"},"Username":{"shape":"S12"},"Password":{"shape":"S13"},"RetryOptions":{"shape":"S14"},"S3Configuration":{"shape":"S7"},"ProcessingConfiguration":{"shape":"Sn"},"S3BackupMode":{},"S3BackupConfiguration":{"shape":"S7"},"CloudWatchLoggingOptions":{"shape":"Si"}}},"ElasticsearchDestinationConfiguration":{"type":"structure","required":["RoleARN","DomainARN","IndexName","TypeName","S3Configuration"],"members":{"RoleARN":{},"DomainARN":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S1c"},"RetryOptions":{"shape":"S1f"},"S3BackupMode":{},"S3Configuration":{"shape":"S7"},"ProcessingConfiguration":{"shape":"Sn"},"CloudWatchLoggingOptions":{"shape":"Si"}}}}},"output":{"type":"structure","members":{"DeliveryStreamARN":{}}}},"DeleteDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{}}},"output":{"type":"structure","members":{}}},"DescribeDeliveryStream":{"input":{"type":"structure","required":["DeliveryStreamName"],"members":{"DeliveryStreamName":{},"Limit":{"type":"integer"},"ExclusiveStartDestinationId":{}}},"output":{"type":"structure","required":["DeliveryStreamDescription"],"members":{"DeliveryStreamDescription":{"type":"structure","required":["DeliveryStreamName","DeliveryStreamARN","DeliveryStreamStatus","DeliveryStreamType","VersionId","Destinations","HasMoreDestinations"],"members":{"DeliveryStreamName":{},"DeliveryStreamARN":{},"DeliveryStreamStatus":{},"DeliveryStreamType":{},"VersionId":{},"CreateTimestamp":{"type":"timestamp"},"LastUpdateTimestamp":{"type":"timestamp"},"Source":{"type":"structure","members":{"KinesisStreamSourceDescription":{"type":"structure","members":{"KinesisStreamARN":{},"RoleARN":{},"DeliveryStartTimestamp":{"type":"timestamp"}}}}},"Destinations":{"type":"list","member":{"type":"structure","required":["DestinationId"],"members":{"DestinationId":{},"S3DestinationDescription":{"shape":"S1z"},"ExtendedS3DestinationDescription":{"type":"structure","required":["RoleARN","BucketARN","BufferingHints","CompressionFormat","EncryptionConfiguration"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"Sa"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Se"},"CloudWatchLoggingOptions":{"shape":"Si"},"ProcessingConfiguration":{"shape":"Sn"},"S3BackupMode":{},"S3BackupDescription":{"shape":"S1z"}}},"RedshiftDestinationDescription":{"type":"structure","required":["RoleARN","ClusterJDBCURL","CopyCommand","Username","S3DestinationDescription"],"members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"Sy"},"Username":{"shape":"S12"},"RetryOptions":{"shape":"S14"},"S3DestinationDescription":{"shape":"S1z"},"ProcessingConfiguration":{"shape":"Sn"},"S3BackupMode":{},"S3BackupDescription":{"shape":"S1z"},"CloudWatchLoggingOptions":{"shape":"Si"}}},"ElasticsearchDestinationDescription":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S1c"},"RetryOptions":{"shape":"S1f"},"S3BackupMode":{},"S3DestinationDescription":{"shape":"S1z"},"ProcessingConfiguration":{"shape":"Sn"},"CloudWatchLoggingOptions":{"shape":"Si"}}}}}},"HasMoreDestinations":{"type":"boolean"}}}}}},"GetKinesisStream":{"input":{"type":"structure","required":["DeliveryStreamARN"],"members":{"DeliveryStreamARN":{}}},"output":{"type":"structure","members":{"KinesisStreamARN":{},"CredentialsForReadingKinesisStream":{"type":"structure","required":["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],"members":{"AccessKeyId":{},"SecretAccessKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}}}},"internalonly":true},"ListDeliveryStreams":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"DeliveryStreamType":{},"ExclusiveStartDeliveryStreamName":{}}},"output":{"type":"structure","required":["DeliveryStreamNames","HasMoreDeliveryStreams"],"members":{"DeliveryStreamNames":{"type":"list","member":{}},"HasMoreDeliveryStreams":{"type":"boolean"}}}},"PutRecord":{"input":{"type":"structure","required":["DeliveryStreamName","Record"],"members":{"DeliveryStreamName":{},"Record":{"shape":"S2e"}}},"output":{"type":"structure","required":["RecordId"],"members":{"RecordId":{}}}},"PutRecordBatch":{"input":{"type":"structure","required":["DeliveryStreamName","Records"],"members":{"DeliveryStreamName":{},"Records":{"type":"list","member":{"shape":"S2e"}}}},"output":{"type":"structure","required":["FailedPutCount","RequestResponses"],"members":{"FailedPutCount":{"type":"integer"},"RequestResponses":{"type":"list","member":{"type":"structure","members":{"RecordId":{},"ErrorCode":{},"ErrorMessage":{}}}}}}},"UpdateDestination":{"input":{"type":"structure","required":["DeliveryStreamName","CurrentDeliveryStreamVersionId","DestinationId"],"members":{"DeliveryStreamName":{},"CurrentDeliveryStreamVersionId":{},"DestinationId":{},"S3DestinationUpdate":{"shape":"S2r","deprecated":true},"ExtendedS3DestinationUpdate":{"type":"structure","members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"Sa"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Se"},"CloudWatchLoggingOptions":{"shape":"Si"},"ProcessingConfiguration":{"shape":"Sn"},"S3BackupMode":{},"S3BackupUpdate":{"shape":"S2r"}}},"RedshiftDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"ClusterJDBCURL":{},"CopyCommand":{"shape":"Sy"},"Username":{"shape":"S12"},"Password":{"shape":"S13"},"RetryOptions":{"shape":"S14"},"S3Update":{"shape":"S2r"},"ProcessingConfiguration":{"shape":"Sn"},"S3BackupMode":{},"S3BackupUpdate":{"shape":"S2r"},"CloudWatchLoggingOptions":{"shape":"Si"}}},"ElasticsearchDestinationUpdate":{"type":"structure","members":{"RoleARN":{},"DomainARN":{},"IndexName":{},"TypeName":{},"IndexRotationPeriod":{},"BufferingHints":{"shape":"S1c"},"RetryOptions":{"shape":"S1f"},"S3Update":{"shape":"S2r"},"ProcessingConfiguration":{"shape":"Sn"},"CloudWatchLoggingOptions":{"shape":"Si"}}}}},"output":{"type":"structure","members":{}}}},"shapes":{"S7":{"type":"structure","required":["RoleARN","BucketARN"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"Sa"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Se"},"CloudWatchLoggingOptions":{"shape":"Si"}}},"Sa":{"type":"structure","members":{"SizeInMBs":{"type":"integer"},"IntervalInSeconds":{"type":"integer"}}},"Se":{"type":"structure","members":{"NoEncryptionConfig":{},"KMSEncryptionConfig":{"type":"structure","required":["AWSKMSKeyARN"],"members":{"AWSKMSKeyARN":{}}}}},"Si":{"type":"structure","members":{"Enabled":{"type":"boolean"},"LogGroupName":{},"LogStreamName":{}}},"Sn":{"type":"structure","members":{"Enabled":{"type":"boolean"},"Processors":{"type":"list","member":{"type":"structure","required":["Type"],"members":{"Type":{},"Parameters":{"type":"list","member":{"type":"structure","required":["ParameterName","ParameterValue"],"members":{"ParameterName":{},"ParameterValue":{}}}}}}}}},"Sy":{"type":"structure","required":["DataTableName"],"members":{"DataTableName":{},"DataTableColumns":{},"CopyOptions":{}}},"S12":{"type":"string","sensitive":true},"S13":{"type":"string","sensitive":true},"S14":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S1c":{"type":"structure","members":{"IntervalInSeconds":{"type":"integer"},"SizeInMBs":{"type":"integer"}}},"S1f":{"type":"structure","members":{"DurationInSeconds":{"type":"integer"}}},"S1z":{"type":"structure","required":["RoleARN","BucketARN","BufferingHints","CompressionFormat","EncryptionConfiguration"],"members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"Sa"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Se"},"CloudWatchLoggingOptions":{"shape":"Si"}}},"S2e":{"type":"structure","required":["Data"],"members":{"Data":{"type":"blob"}}},"S2r":{"type":"structure","members":{"RoleARN":{},"BucketARN":{},"Prefix":{},"BufferingHints":{"shape":"Sa"},"CompressionFormat":{},"EncryptionConfiguration":{"shape":"Se"},"CloudWatchLoggingOptions":{"shape":"Si"}}}}}

/***/ }),
/* 240 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 241 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-10-01","endpointPrefix":"gamelift","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon GameLift","signatureVersion":"v4","targetPrefix":"GameLift","uid":"gamelift-2015-10-01"},"operations":{"AcceptMatch":{"input":{"type":"structure","required":["TicketId","PlayerIds","AcceptanceType"],"members":{"TicketId":{},"PlayerIds":{"type":"list","member":{}},"AcceptanceType":{}}},"output":{"type":"structure","members":{}}},"CreateAlias":{"input":{"type":"structure","required":["Name","RoutingStrategy"],"members":{"Name":{},"Description":{},"RoutingStrategy":{"shape":"Sa"}}},"output":{"type":"structure","members":{"Alias":{"shape":"Sf"}}}},"CreateBuild":{"input":{"type":"structure","members":{"Name":{},"Version":{},"StorageLocation":{"shape":"Sk"},"OperatingSystem":{}}},"output":{"type":"structure","members":{"Build":{"shape":"So"},"UploadCredentials":{"shape":"Ss"},"StorageLocation":{"shape":"Sk"}}}},"CreateFleet":{"input":{"type":"structure","required":["Name","BuildId","EC2InstanceType"],"members":{"Name":{},"Description":{},"BuildId":{},"ServerLaunchPath":{},"ServerLaunchParameters":{},"LogPaths":{"shape":"Su"},"EC2InstanceType":{},"EC2InboundPermissions":{"shape":"Sw"},"NewGameSessionProtectionPolicy":{},"RuntimeConfiguration":{"shape":"S12"},"ResourceCreationLimitPolicy":{"shape":"S18"},"MetricGroups":{"shape":"S1a"},"PeerVpcAwsAccountId":{},"PeerVpcId":{}}},"output":{"type":"structure","members":{"FleetAttributes":{"shape":"S1d"}}}},"CreateGameSession":{"input":{"type":"structure","required":["MaximumPlayerSessionCount"],"members":{"FleetId":{},"AliasId":{},"MaximumPlayerSessionCount":{"type":"integer"},"Name":{},"GameProperties":{"shape":"S1g"},"CreatorId":{},"GameSessionId":{},"IdempotencyToken":{},"GameSessionData":{}}},"output":{"type":"structure","members":{"GameSession":{"shape":"S1n"}}}},"CreateGameSessionQueue":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"TimeoutInSeconds":{"type":"integer"},"PlayerLatencyPolicies":{"shape":"S1t"},"Destinations":{"shape":"S1v"}}},"output":{"type":"structure","members":{"GameSessionQueue":{"shape":"S1y"}}}},"CreateMatchmakingConfiguration":{"input":{"type":"structure","required":["Name","GameSessionQueueArns","RequestTimeoutSeconds","AcceptanceRequired","RuleSetName"],"members":{"Name":{},"Description":{},"GameSessionQueueArns":{"shape":"S20"},"RequestTimeoutSeconds":{"type":"integer"},"AcceptanceTimeoutSeconds":{"type":"integer"},"AcceptanceRequired":{"type":"boolean"},"RuleSetName":{},"NotificationTarget":{},"AdditionalPlayerCount":{"type":"integer"},"CustomEventData":{},"GameProperties":{"shape":"S1g"},"GameSessionData":{}}},"output":{"type":"structure","members":{"Configuration":{"shape":"S27"}}}},"CreateMatchmakingRuleSet":{"input":{"type":"structure","required":["Name","RuleSetBody"],"members":{"Name":{},"RuleSetBody":{}}},"output":{"type":"structure","required":["RuleSet"],"members":{"RuleSet":{"shape":"S2b"}}}},"CreatePlayerSession":{"input":{"type":"structure","required":["GameSessionId","PlayerId"],"members":{"GameSessionId":{},"PlayerId":{},"PlayerData":{}}},"output":{"type":"structure","members":{"PlayerSession":{"shape":"S2f"}}}},"CreatePlayerSessions":{"input":{"type":"structure","required":["GameSessionId","PlayerIds"],"members":{"GameSessionId":{},"PlayerIds":{"type":"list","member":{}},"PlayerDataMap":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"PlayerSessions":{"shape":"S2m"}}}},"CreateVpcPeeringAuthorization":{"input":{"type":"structure","required":["GameLiftAwsAccountId","PeerVpcId"],"members":{"GameLiftAwsAccountId":{},"PeerVpcId":{}}},"output":{"type":"structure","members":{"VpcPeeringAuthorization":{"shape":"S2p"}}}},"CreateVpcPeeringConnection":{"input":{"type":"structure","required":["FleetId","PeerVpcAwsAccountId","PeerVpcId"],"members":{"FleetId":{},"PeerVpcAwsAccountId":{},"PeerVpcId":{}}},"output":{"type":"structure","members":{}}},"DeleteAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{}}}},"DeleteBuild":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{}}}},"DeleteFleet":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{}}}},"DeleteGameSessionQueue":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteMatchmakingConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteScalingPolicy":{"input":{"type":"structure","required":["Name","FleetId"],"members":{"Name":{},"FleetId":{}}}},"DeleteVpcPeeringAuthorization":{"input":{"type":"structure","required":["GameLiftAwsAccountId","PeerVpcId"],"members":{"GameLiftAwsAccountId":{},"PeerVpcId":{}}},"output":{"type":"structure","members":{}}},"DeleteVpcPeeringConnection":{"input":{"type":"structure","required":["FleetId","VpcPeeringConnectionId"],"members":{"FleetId":{},"VpcPeeringConnectionId":{}}},"output":{"type":"structure","members":{}}},"DescribeAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{}}},"output":{"type":"structure","members":{"Alias":{"shape":"Sf"}}}},"DescribeBuild":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{}}},"output":{"type":"structure","members":{"Build":{"shape":"So"}}}},"DescribeEC2InstanceLimits":{"input":{"type":"structure","members":{"EC2InstanceType":{}}},"output":{"type":"structure","members":{"EC2InstanceLimits":{"type":"list","member":{"type":"structure","members":{"EC2InstanceType":{},"CurrentInstances":{"type":"integer"},"InstanceLimit":{"type":"integer"}}}}}}},"DescribeFleetAttributes":{"input":{"type":"structure","members":{"FleetIds":{"shape":"S3d"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetAttributes":{"type":"list","member":{"shape":"S1d"}},"NextToken":{}}}},"DescribeFleetCapacity":{"input":{"type":"structure","members":{"FleetIds":{"shape":"S3d"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetCapacity":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"InstanceType":{},"InstanceCounts":{"type":"structure","members":{"DESIRED":{"type":"integer"},"MINIMUM":{"type":"integer"},"MAXIMUM":{"type":"integer"},"PENDING":{"type":"integer"},"ACTIVE":{"type":"integer"},"IDLE":{"type":"integer"},"TERMINATING":{"type":"integer"}}}}}},"NextToken":{}}}},"DescribeFleetEvents":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Events":{"type":"list","member":{"type":"structure","members":{"EventId":{},"ResourceId":{},"EventCode":{},"Message":{},"EventTime":{"type":"timestamp"},"PreSignedLogUrl":{}}}},"NextToken":{}}}},"DescribeFleetPortSettings":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{}}},"output":{"type":"structure","members":{"InboundPermissions":{"shape":"Sw"}}}},"DescribeFleetUtilization":{"input":{"type":"structure","members":{"FleetIds":{"shape":"S3d"},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetUtilization":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"ActiveServerProcessCount":{"type":"integer"},"ActiveGameSessionCount":{"type":"integer"},"CurrentPlayerSessionCount":{"type":"integer"},"MaximumPlayerSessionCount":{"type":"integer"}}}},"NextToken":{}}}},"DescribeGameSessionDetails":{"input":{"type":"structure","members":{"FleetId":{},"GameSessionId":{},"AliasId":{},"StatusFilter":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessionDetails":{"type":"list","member":{"type":"structure","members":{"GameSession":{"shape":"S1n"},"ProtectionPolicy":{}}}},"NextToken":{}}}},"DescribeGameSessionPlacement":{"input":{"type":"structure","required":["PlacementId"],"members":{"PlacementId":{}}},"output":{"type":"structure","members":{"GameSessionPlacement":{"shape":"S42"}}}},"DescribeGameSessionQueues":{"input":{"type":"structure","members":{"Names":{"type":"list","member":{}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessionQueues":{"type":"list","member":{"shape":"S1y"}},"NextToken":{}}}},"DescribeGameSessions":{"input":{"type":"structure","members":{"FleetId":{},"GameSessionId":{},"AliasId":{},"StatusFilter":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessions":{"shape":"S4f"},"NextToken":{}}}},"DescribeInstances":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"InstanceId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Instances":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"InstanceId":{},"IpAddress":{},"OperatingSystem":{},"Type":{},"Status":{},"CreationTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeMatchmaking":{"input":{"type":"structure","required":["TicketIds"],"members":{"TicketIds":{"shape":"S4n"}}},"output":{"type":"structure","members":{"TicketList":{"type":"list","member":{"shape":"S4q"}}}}},"DescribeMatchmakingConfigurations":{"input":{"type":"structure","members":{"Names":{"shape":"S4n"},"RuleSetName":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Configurations":{"type":"list","member":{"shape":"S27"}},"NextToken":{}}}},"DescribeMatchmakingRuleSets":{"input":{"type":"structure","members":{"Names":{"type":"list","member":{}},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","required":["RuleSets"],"members":{"RuleSets":{"type":"list","member":{"shape":"S2b"}},"NextToken":{}}}},"DescribePlayerSessions":{"input":{"type":"structure","members":{"GameSessionId":{},"PlayerId":{},"PlayerSessionId":{},"PlayerSessionStatusFilter":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"PlayerSessions":{"shape":"S2m"},"NextToken":{}}}},"DescribeRuntimeConfiguration":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{}}},"output":{"type":"structure","members":{"RuntimeConfiguration":{"shape":"S12"}}}},"DescribeScalingPolicies":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"StatusFilter":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ScalingPolicies":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"Name":{},"Status":{},"ScalingAdjustment":{"type":"integer"},"ScalingAdjustmentType":{},"ComparisonOperator":{},"Threshold":{"type":"double"},"EvaluationPeriods":{"type":"integer"},"MetricName":{}}}},"NextToken":{}}}},"DescribeVpcPeeringAuthorizations":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"VpcPeeringAuthorizations":{"type":"list","member":{"shape":"S2p"}}}}},"DescribeVpcPeeringConnections":{"input":{"type":"structure","members":{"FleetId":{}}},"output":{"type":"structure","members":{"VpcPeeringConnections":{"type":"list","member":{"type":"structure","members":{"FleetId":{},"IpV4CidrBlock":{},"VpcPeeringConnectionId":{},"Status":{"type":"structure","members":{"Code":{},"Message":{}}},"PeerVpcId":{},"GameLiftVpcId":{}}}}}}},"GetGameSessionLogUrl":{"input":{"type":"structure","required":["GameSessionId"],"members":{"GameSessionId":{}}},"output":{"type":"structure","members":{"PreSignedUrl":{}}}},"GetInstanceAccess":{"input":{"type":"structure","required":["FleetId","InstanceId"],"members":{"FleetId":{},"InstanceId":{}}},"output":{"type":"structure","members":{"InstanceAccess":{"type":"structure","members":{"FleetId":{},"InstanceId":{},"IpAddress":{},"OperatingSystem":{},"Credentials":{"type":"structure","members":{"UserName":{},"Secret":{}},"sensitive":true}}}}}},"ListAliases":{"input":{"type":"structure","members":{"RoutingStrategyType":{},"Name":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Aliases":{"type":"list","member":{"shape":"Sf"}},"NextToken":{}}}},"ListBuilds":{"input":{"type":"structure","members":{"Status":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Builds":{"type":"list","member":{"shape":"So"}},"NextToken":{}}}},"ListFleets":{"input":{"type":"structure","members":{"BuildId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"FleetIds":{"shape":"S3d"},"NextToken":{}}}},"PutScalingPolicy":{"input":{"type":"structure","required":["Name","FleetId","ScalingAdjustment","ScalingAdjustmentType","Threshold","ComparisonOperator","EvaluationPeriods","MetricName"],"members":{"Name":{},"FleetId":{},"ScalingAdjustment":{"type":"integer"},"ScalingAdjustmentType":{},"Threshold":{"type":"double"},"ComparisonOperator":{},"EvaluationPeriods":{"type":"integer"},"MetricName":{}}},"output":{"type":"structure","members":{"Name":{}}}},"RequestUploadCredentials":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{}}},"output":{"type":"structure","members":{"UploadCredentials":{"shape":"Ss"},"StorageLocation":{"shape":"Sk"}}}},"ResolveAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{}}},"output":{"type":"structure","members":{"FleetId":{}}}},"SearchGameSessions":{"input":{"type":"structure","members":{"FleetId":{},"AliasId":{},"FilterExpression":{},"SortExpression":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"GameSessions":{"shape":"S4f"},"NextToken":{}}}},"StartGameSessionPlacement":{"input":{"type":"structure","required":["PlacementId","GameSessionQueueName","MaximumPlayerSessionCount"],"members":{"PlacementId":{},"GameSessionQueueName":{},"GameProperties":{"shape":"S1g"},"MaximumPlayerSessionCount":{"type":"integer"},"GameSessionName":{},"PlayerLatencies":{"shape":"S44"},"DesiredPlayerSessions":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerData":{}}}},"GameSessionData":{}}},"output":{"type":"structure","members":{"GameSessionPlacement":{"shape":"S42"}}}},"StartMatchmaking":{"input":{"type":"structure","required":["ConfigurationName","Players"],"members":{"TicketId":{},"ConfigurationName":{},"Players":{"shape":"S4t"}}},"output":{"type":"structure","members":{"MatchmakingTicket":{"shape":"S4q"}}}},"StopGameSessionPlacement":{"input":{"type":"structure","required":["PlacementId"],"members":{"PlacementId":{}}},"output":{"type":"structure","members":{"GameSessionPlacement":{"shape":"S42"}}}},"StopMatchmaking":{"input":{"type":"structure","required":["TicketId"],"members":{"TicketId":{}}},"output":{"type":"structure","members":{}}},"UpdateAlias":{"input":{"type":"structure","required":["AliasId"],"members":{"AliasId":{},"Name":{},"Description":{},"RoutingStrategy":{"shape":"Sa"}}},"output":{"type":"structure","members":{"Alias":{"shape":"Sf"}}}},"UpdateBuild":{"input":{"type":"structure","required":["BuildId"],"members":{"BuildId":{},"Name":{},"Version":{}}},"output":{"type":"structure","members":{"Build":{"shape":"So"}}}},"UpdateFleetAttributes":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"Name":{},"Description":{},"NewGameSessionProtectionPolicy":{},"ResourceCreationLimitPolicy":{"shape":"S18"},"MetricGroups":{"shape":"S1a"}}},"output":{"type":"structure","members":{"FleetId":{}}}},"UpdateFleetCapacity":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"DesiredInstances":{"type":"integer"},"MinSize":{"type":"integer"},"MaxSize":{"type":"integer"}}},"output":{"type":"structure","members":{"FleetId":{}}}},"UpdateFleetPortSettings":{"input":{"type":"structure","required":["FleetId"],"members":{"FleetId":{},"InboundPermissionAuthorizations":{"shape":"Sw"},"InboundPermissionRevocations":{"shape":"Sw"}}},"output":{"type":"structure","members":{"FleetId":{}}}},"UpdateGameSession":{"input":{"type":"structure","required":["GameSessionId"],"members":{"GameSessionId":{},"MaximumPlayerSessionCount":{"type":"integer"},"Name":{},"PlayerSessionCreationPolicy":{},"ProtectionPolicy":{}}},"output":{"type":"structure","members":{"GameSession":{"shape":"S1n"}}}},"UpdateGameSessionQueue":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"TimeoutInSeconds":{"type":"integer"},"PlayerLatencyPolicies":{"shape":"S1t"},"Destinations":{"shape":"S1v"}}},"output":{"type":"structure","members":{"GameSessionQueue":{"shape":"S1y"}}}},"UpdateMatchmakingConfiguration":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"GameSessionQueueArns":{"shape":"S20"},"RequestTimeoutSeconds":{"type":"integer"},"AcceptanceTimeoutSeconds":{"type":"integer"},"AcceptanceRequired":{"type":"boolean"},"RuleSetName":{},"NotificationTarget":{},"AdditionalPlayerCount":{"type":"integer"},"CustomEventData":{},"GameProperties":{"shape":"S1g"},"GameSessionData":{}}},"output":{"type":"structure","members":{"Configuration":{"shape":"S27"}}}},"UpdateRuntimeConfiguration":{"input":{"type":"structure","required":["FleetId","RuntimeConfiguration"],"members":{"FleetId":{},"RuntimeConfiguration":{"shape":"S12"}}},"output":{"type":"structure","members":{"RuntimeConfiguration":{"shape":"S12"}}}},"ValidateMatchmakingRuleSet":{"input":{"type":"structure","required":["RuleSetBody"],"members":{"RuleSetBody":{}}},"output":{"type":"structure","members":{"Valid":{"type":"boolean"}}}}},"shapes":{"Sa":{"type":"structure","members":{"Type":{},"FleetId":{},"Message":{}}},"Sf":{"type":"structure","members":{"AliasId":{},"Name":{},"AliasArn":{},"Description":{},"RoutingStrategy":{"shape":"Sa"},"CreationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"}}},"Sk":{"type":"structure","members":{"Bucket":{},"Key":{},"RoleArn":{}}},"So":{"type":"structure","members":{"BuildId":{},"Name":{},"Version":{},"Status":{},"SizeOnDisk":{"type":"long"},"OperatingSystem":{},"CreationTime":{"type":"timestamp"}}},"Ss":{"type":"structure","members":{"AccessKeyId":{},"SecretAccessKey":{},"SessionToken":{}},"sensitive":true},"Su":{"type":"list","member":{}},"Sw":{"type":"list","member":{"type":"structure","required":["FromPort","ToPort","IpRange","Protocol"],"members":{"FromPort":{"type":"integer"},"ToPort":{"type":"integer"},"IpRange":{},"Protocol":{}}}},"S12":{"type":"structure","members":{"ServerProcesses":{"type":"list","member":{"type":"structure","required":["LaunchPath","ConcurrentExecutions"],"members":{"LaunchPath":{},"Parameters":{},"ConcurrentExecutions":{"type":"integer"}}}},"MaxConcurrentGameSessionActivations":{"type":"integer"},"GameSessionActivationTimeoutSeconds":{"type":"integer"}}},"S18":{"type":"structure","members":{"NewGameSessionsPerCreator":{"type":"integer"},"PolicyPeriodInMinutes":{"type":"integer"}}},"S1a":{"type":"list","member":{}},"S1d":{"type":"structure","members":{"FleetId":{},"FleetArn":{},"Description":{},"Name":{},"CreationTime":{"type":"timestamp"},"TerminationTime":{"type":"timestamp"},"Status":{},"BuildId":{},"ServerLaunchPath":{},"ServerLaunchParameters":{},"LogPaths":{"shape":"Su"},"NewGameSessionProtectionPolicy":{},"OperatingSystem":{},"ResourceCreationLimitPolicy":{"shape":"S18"},"MetricGroups":{"shape":"S1a"}}},"S1g":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S1n":{"type":"structure","members":{"GameSessionId":{},"Name":{},"FleetId":{},"CreationTime":{"type":"timestamp"},"TerminationTime":{"type":"timestamp"},"CurrentPlayerSessionCount":{"type":"integer"},"MaximumPlayerSessionCount":{"type":"integer"},"Status":{},"GameProperties":{"shape":"S1g"},"IpAddress":{},"Port":{"type":"integer"},"PlayerSessionCreationPolicy":{},"CreatorId":{},"GameSessionData":{}}},"S1t":{"type":"list","member":{"type":"structure","members":{"MaximumIndividualPlayerLatencyMilliseconds":{"type":"integer"},"PolicyDurationSeconds":{"type":"integer"}}}},"S1v":{"type":"list","member":{"type":"structure","members":{"DestinationArn":{}}}},"S1y":{"type":"structure","members":{"Name":{},"GameSessionQueueArn":{},"TimeoutInSeconds":{"type":"integer"},"PlayerLatencyPolicies":{"shape":"S1t"},"Destinations":{"shape":"S1v"}}},"S20":{"type":"list","member":{}},"S27":{"type":"structure","members":{"Name":{},"Description":{},"GameSessionQueueArns":{"shape":"S20"},"RequestTimeoutSeconds":{"type":"integer"},"AcceptanceTimeoutSeconds":{"type":"integer"},"AcceptanceRequired":{"type":"boolean"},"RuleSetName":{},"NotificationTarget":{},"AdditionalPlayerCount":{"type":"integer"},"CustomEventData":{},"CreationTime":{"type":"timestamp"},"GameProperties":{"shape":"S1g"},"GameSessionData":{}}},"S2b":{"type":"structure","required":["RuleSetBody"],"members":{"RuleSetName":{},"RuleSetBody":{},"CreationTime":{"type":"timestamp"}}},"S2f":{"type":"structure","members":{"PlayerSessionId":{},"PlayerId":{},"GameSessionId":{},"FleetId":{},"CreationTime":{"type":"timestamp"},"TerminationTime":{"type":"timestamp"},"Status":{},"IpAddress":{},"Port":{"type":"integer"},"PlayerData":{}}},"S2m":{"type":"list","member":{"shape":"S2f"}},"S2p":{"type":"structure","members":{"GameLiftAwsAccountId":{},"PeerVpcAwsAccountId":{},"PeerVpcId":{},"CreationTime":{"type":"timestamp"},"ExpirationTime":{"type":"timestamp"}}},"S3d":{"type":"list","member":{}},"S42":{"type":"structure","members":{"PlacementId":{},"GameSessionQueueName":{},"Status":{},"GameProperties":{"shape":"S1g"},"MaximumPlayerSessionCount":{"type":"integer"},"GameSessionName":{},"GameSessionId":{},"GameSessionArn":{},"GameSessionRegion":{},"PlayerLatencies":{"shape":"S44"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"IpAddress":{},"Port":{"type":"integer"},"PlacedPlayerSessions":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerSessionId":{}}}},"GameSessionData":{}}},"S44":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"RegionIdentifier":{},"LatencyInMilliseconds":{"type":"float"}}}},"S4f":{"type":"list","member":{"shape":"S1n"}},"S4n":{"type":"list","member":{}},"S4q":{"type":"structure","members":{"TicketId":{},"ConfigurationName":{},"Status":{},"StatusReason":{},"StatusMessage":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Players":{"shape":"S4t"},"GameSessionConnectionInfo":{"type":"structure","members":{"GameSessionArn":{},"IpAddress":{},"Port":{"type":"integer"},"MatchedPlayerSessions":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerSessionId":{}}}}}},"EstimatedWaitTime":{"type":"integer"}}},"S4t":{"type":"list","member":{"type":"structure","members":{"PlayerId":{},"PlayerAttributes":{"type":"map","key":{},"value":{"type":"structure","members":{"S":{},"N":{"type":"double"},"SL":{"shape":"Su"},"SDM":{"type":"map","key":{},"value":{"type":"double"}}}}},"Team":{},"LatencyInMs":{"type":"map","key":{},"value":{"type":"integer"}}}}}}}

/***/ }),
/* 242 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 243 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-06-01","checksumFormat":"sha256","endpointPrefix":"glacier","protocol":"rest-json","serviceFullName":"Amazon Glacier","signatureVersion":"v4","uid":"glacier-2012-06-01"},"operations":{"AbortMultipartUpload":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"}}}},"AbortVaultLock":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/lock-policy","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"AddTagsToVault":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/tags?operation=add","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"Tags":{"shape":"S5"}}}},"CompleteMultipartUpload":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"},"archiveSize":{"location":"header","locationName":"x-amz-archive-size"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"}}},"output":{"shape":"S9"}},"CompleteVaultLock":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/lock-policy/{lockId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","lockId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"lockId":{"location":"uri","locationName":"lockId"}}}},"CreateVault":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"}}}},"DeleteArchive":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/archives/{archiveId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","archiveId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"archiveId":{"location":"uri","locationName":"archiveId"}}}},"DeleteVault":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"DeleteVaultAccessPolicy":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/access-policy","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"DeleteVaultNotifications":{"http":{"method":"DELETE","requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}}},"DescribeJob":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/jobs/{jobId}"},"input":{"type":"structure","required":["accountId","vaultName","jobId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"jobId":{"location":"uri","locationName":"jobId"}}},"output":{"shape":"Si"}},"DescribeVault":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"shape":"Sq"}},"GetDataRetrievalPolicy":{"http":{"method":"GET","requestUri":"/{accountId}/policies/data-retrieval"},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"}}},"output":{"type":"structure","members":{"Policy":{"shape":"Su"}}}},"GetJobOutput":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/jobs/{jobId}/output"},"input":{"type":"structure","required":["accountId","vaultName","jobId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"jobId":{"location":"uri","locationName":"jobId"},"range":{"location":"header","locationName":"Range"}}},"output":{"type":"structure","members":{"body":{"shape":"S10"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"status":{"location":"statusCode","type":"integer"},"contentRange":{"location":"header","locationName":"Content-Range"},"acceptRanges":{"location":"header","locationName":"Accept-Ranges"},"contentType":{"location":"header","locationName":"Content-Type"},"archiveDescription":{"location":"header","locationName":"x-amz-archive-description"}},"payload":"body"}},"GetVaultAccessPolicy":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/access-policy"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"policy":{"shape":"S14"}},"payload":"policy"}},"GetVaultLock":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/lock-policy"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"Policy":{},"State":{},"ExpirationDate":{},"CreationDate":{}}}},"GetVaultNotifications":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"vaultNotificationConfig":{"shape":"S19"}},"payload":"vaultNotificationConfig"}},"InitiateJob":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/jobs","responseCode":202},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"jobParameters":{"type":"structure","members":{"Format":{},"Type":{},"ArchiveId":{},"Description":{},"SNSTopic":{},"RetrievalByteRange":{},"Tier":{},"InventoryRetrievalParameters":{"type":"structure","members":{"StartDate":{},"EndDate":{},"Limit":{},"Marker":{}}}}}},"payload":"jobParameters"},"output":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"},"jobId":{"location":"header","locationName":"x-amz-job-id"}}}},"InitiateMultipartUpload":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"archiveDescription":{"location":"header","locationName":"x-amz-archive-description"},"partSize":{"location":"header","locationName":"x-amz-part-size"}}},"output":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"},"uploadId":{"location":"header","locationName":"x-amz-multipart-upload-id"}}}},"InitiateVaultLock":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/lock-policy","responseCode":201},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"policy":{"type":"structure","members":{"Policy":{}}}},"payload":"policy"},"output":{"type":"structure","members":{"lockId":{"location":"header","locationName":"x-amz-lock-id"}}}},"ListJobs":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/jobs"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"limit":{"location":"querystring","locationName":"limit"},"marker":{"location":"querystring","locationName":"marker"},"statuscode":{"location":"querystring","locationName":"statuscode"},"completed":{"location":"querystring","locationName":"completed"}}},"output":{"type":"structure","members":{"JobList":{"type":"list","member":{"shape":"Si"}},"Marker":{}}}},"ListMultipartUploads":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"marker":{"location":"querystring","locationName":"marker"},"limit":{"location":"querystring","locationName":"limit"}}},"output":{"type":"structure","members":{"UploadsList":{"type":"list","member":{"type":"structure","members":{"MultipartUploadId":{},"VaultARN":{},"ArchiveDescription":{},"PartSizeInBytes":{"type":"long"},"CreationDate":{}}}},"Marker":{}}}},"ListParts":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"},"marker":{"location":"querystring","locationName":"marker"},"limit":{"location":"querystring","locationName":"limit"}}},"output":{"type":"structure","members":{"MultipartUploadId":{},"VaultARN":{},"ArchiveDescription":{},"PartSizeInBytes":{"type":"long"},"CreationDate":{},"Parts":{"type":"list","member":{"type":"structure","members":{"RangeInBytes":{},"SHA256TreeHash":{}}}},"Marker":{}}}},"ListProvisionedCapacity":{"http":{"method":"GET","requestUri":"/{accountId}/provisioned-capacity"},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"}}},"output":{"type":"structure","members":{"ProvisionedCapacityList":{"type":"list","member":{"type":"structure","members":{"CapacityId":{},"StartDate":{},"ExpirationDate":{}}}}}}},"ListTagsForVault":{"http":{"method":"GET","requestUri":"/{accountId}/vaults/{vaultName}/tags"},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S5"}}}},"ListVaults":{"http":{"method":"GET","requestUri":"/{accountId}/vaults"},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"marker":{"location":"querystring","locationName":"marker"},"limit":{"location":"querystring","locationName":"limit"}}},"output":{"type":"structure","members":{"VaultList":{"type":"list","member":{"shape":"Sq"}},"Marker":{}}}},"PurchaseProvisionedCapacity":{"http":{"requestUri":"/{accountId}/provisioned-capacity","responseCode":201},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"}}},"output":{"type":"structure","members":{"capacityId":{"location":"header","locationName":"x-amz-capacity-id"}}}},"RemoveTagsFromVault":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/tags?operation=remove","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"TagKeys":{"type":"list","member":{}}}}},"SetDataRetrievalPolicy":{"http":{"method":"PUT","requestUri":"/{accountId}/policies/data-retrieval","responseCode":204},"input":{"type":"structure","required":["accountId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"Policy":{"shape":"Su"}}}},"SetVaultAccessPolicy":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}/access-policy","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"policy":{"shape":"S14"}},"payload":"policy"}},"SetVaultNotifications":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"vaultNotificationConfig":{"shape":"S19"}},"payload":"vaultNotificationConfig"}},"UploadArchive":{"http":{"requestUri":"/{accountId}/vaults/{vaultName}/archives","responseCode":201},"input":{"type":"structure","required":["vaultName","accountId"],"members":{"vaultName":{"location":"uri","locationName":"vaultName"},"accountId":{"location":"uri","locationName":"accountId"},"archiveDescription":{"location":"header","locationName":"x-amz-archive-description"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"body":{"shape":"S10"}},"payload":"body"},"output":{"shape":"S9"}},"UploadMultipartPart":{"http":{"method":"PUT","requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}","responseCode":204},"input":{"type":"structure","required":["accountId","vaultName","uploadId"],"members":{"accountId":{"location":"uri","locationName":"accountId"},"vaultName":{"location":"uri","locationName":"vaultName"},"uploadId":{"location":"uri","locationName":"uploadId"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"range":{"location":"header","locationName":"Content-Range"},"body":{"shape":"S10"}},"payload":"body"},"output":{"type":"structure","members":{"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"}}}}},"shapes":{"S5":{"type":"map","key":{},"value":{}},"S9":{"type":"structure","members":{"location":{"location":"header","locationName":"Location"},"checksum":{"location":"header","locationName":"x-amz-sha256-tree-hash"},"archiveId":{"location":"header","locationName":"x-amz-archive-id"}}},"Si":{"type":"structure","members":{"JobId":{},"JobDescription":{},"Action":{},"ArchiveId":{},"VaultARN":{},"CreationDate":{},"Completed":{"type":"boolean"},"StatusCode":{},"StatusMessage":{},"ArchiveSizeInBytes":{"type":"long"},"InventorySizeInBytes":{"type":"long"},"SNSTopic":{},"CompletionDate":{},"SHA256TreeHash":{},"ArchiveSHA256TreeHash":{},"RetrievalByteRange":{},"Tier":{},"InventoryRetrievalParameters":{"type":"structure","members":{"Format":{},"StartDate":{},"EndDate":{},"Limit":{},"Marker":{}}}}},"Sq":{"type":"structure","members":{"VaultARN":{},"VaultName":{},"CreationDate":{},"LastInventoryDate":{},"NumberOfArchives":{"type":"long"},"SizeInBytes":{"type":"long"}}},"Su":{"type":"structure","members":{"Rules":{"type":"list","member":{"type":"structure","members":{"Strategy":{},"BytesPerHour":{"type":"long"}}}}}},"S10":{"type":"blob","streaming":true},"S14":{"type":"structure","members":{"Policy":{}}},"S19":{"type":"structure","members":{"SNSTopic":{},"Events":{"type":"list","member":{}}}}}}

/***/ }),
/* 244 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListJobs":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"JobList"},"ListMultipartUploads":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"UploadsList"},"ListParts":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"Parts"},"ListVaults":{"input_token":"marker","limit_key":"limit","output_token":"Marker","result_key":"VaultList"}}}

/***/ }),
/* 245 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"VaultExists":{"operation":"DescribeVault","delay":3,"maxAttempts":15,"acceptors":[{"state":"success","matcher":"status","expected":200},{"state":"retry","matcher":"error","expected":"ResourceNotFoundException"}]},"VaultNotExists":{"operation":"DescribeVault","delay":3,"maxAttempts":15,"acceptors":[{"state":"retry","matcher":"status","expected":200},{"state":"success","matcher":"error","expected":"ResourceNotFoundException"}]}}}

/***/ }),
/* 246 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-03-31","endpointPrefix":"glue","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Glue","signatureVersion":"v4","targetPrefix":"AWSGlue","uid":"glue-2017-03-31"},"operations":{"BatchCreatePartition":{"input":{"type":"structure","required":["DatabaseName","TableName","PartitionInputList"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"PartitionInputList":{"type":"list","member":{"shape":"S5"}}}},"output":{"type":"structure","members":{"Errors":{"shape":"Sv"}}}},"BatchDeleteConnection":{"input":{"type":"structure","required":["ConnectionNameList"],"members":{"CatalogId":{},"ConnectionNameList":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"Succeeded":{"shape":"Sm"},"Errors":{"type":"map","key":{},"value":{"shape":"Sx"}}}}},"BatchDeletePartition":{"input":{"type":"structure","required":["DatabaseName","TableName","PartitionsToDelete"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"PartitionsToDelete":{"type":"list","member":{"shape":"S15"}}}},"output":{"type":"structure","members":{"Errors":{"shape":"Sv"}}}},"BatchDeleteTable":{"input":{"type":"structure","required":["DatabaseName","TablesToDelete"],"members":{"CatalogId":{},"DatabaseName":{},"TablesToDelete":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"Errors":{"type":"list","member":{"type":"structure","members":{"TableName":{},"ErrorDetail":{"shape":"Sx"}}}}}}},"BatchGetPartition":{"input":{"type":"structure","required":["DatabaseName","TableName","PartitionsToGet"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"PartitionsToGet":{"shape":"S1d"}}},"output":{"type":"structure","members":{"Partitions":{"shape":"S1f"},"UnprocessedKeys":{"shape":"S1d"}}}},"BatchStopJobRun":{"input":{"type":"structure","required":["JobName","JobRunIds"],"members":{"JobName":{},"JobRunIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"SuccessfulSubmissions":{"type":"list","member":{"type":"structure","members":{"JobName":{},"JobRunId":{}}}},"Errors":{"type":"list","member":{"type":"structure","members":{"JobName":{},"JobRunId":{},"ErrorDetail":{"shape":"Sx"}}}}}}},"CreateClassifier":{"input":{"type":"structure","members":{"GrokClassifier":{"type":"structure","required":["Classification","Name","GrokPattern"],"members":{"Classification":{},"Name":{},"GrokPattern":{},"CustomPatterns":{}}}}},"output":{"type":"structure","members":{}}},"CreateConnection":{"input":{"type":"structure","required":["ConnectionInput"],"members":{"CatalogId":{},"ConnectionInput":{"shape":"S1w"}}},"output":{"type":"structure","members":{}}},"CreateCrawler":{"input":{"type":"structure","required":["Name","Role","DatabaseName","Targets"],"members":{"Name":{},"Role":{},"DatabaseName":{},"Description":{},"Targets":{"shape":"S27"},"Schedule":{},"Classifiers":{"shape":"S2g"},"TablePrefix":{},"SchemaChangePolicy":{"shape":"S2i"}}},"output":{"type":"structure","members":{}}},"CreateDatabase":{"input":{"type":"structure","required":["DatabaseInput"],"members":{"CatalogId":{},"DatabaseInput":{"shape":"S2n"}}},"output":{"type":"structure","members":{}}},"CreateDevEndpoint":{"input":{"type":"structure","required":["EndpointName","RoleArn","PublicKey"],"members":{"EndpointName":{},"RoleArn":{},"SecurityGroupIds":{"shape":"S2s"},"SubnetId":{},"PublicKey":{},"NumberOfNodes":{"type":"integer"},"ExtraPythonLibsS3Path":{},"ExtraJarsS3Path":{}}},"output":{"type":"structure","members":{"EndpointName":{},"Status":{},"SecurityGroupIds":{"shape":"S2s"},"SubnetId":{},"RoleArn":{},"YarnEndpointAddress":{},"ZeppelinRemoteSparkInterpreterPort":{"type":"integer"},"NumberOfNodes":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"ExtraPythonLibsS3Path":{},"ExtraJarsS3Path":{},"FailureReason":{},"CreatedTimestamp":{"type":"timestamp"}}}},"CreateJob":{"input":{"type":"structure","required":["Name","Role","Command"],"members":{"Name":{},"Description":{},"LogUri":{},"Role":{},"ExecutionProperty":{"shape":"S2z"},"Command":{"shape":"S31"},"DefaultArguments":{"shape":"S33"},"Connections":{"shape":"S34"},"MaxRetries":{"type":"integer"},"AllocatedCapacity":{"type":"integer"}}},"output":{"type":"structure","members":{"Name":{}}}},"CreatePartition":{"input":{"type":"structure","required":["DatabaseName","TableName","PartitionInput"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"PartitionInput":{"shape":"S5"}}},"output":{"type":"structure","members":{}}},"CreateScript":{"input":{"type":"structure","members":{"DagNodes":{"shape":"S3a"},"DagEdges":{"shape":"S3i"}}},"output":{"type":"structure","members":{"PythonScript":{}}}},"CreateTable":{"input":{"type":"structure","required":["DatabaseName","TableInput"],"members":{"CatalogId":{},"DatabaseName":{},"TableInput":{"shape":"S3n"}}},"output":{"type":"structure","members":{}}},"CreateTrigger":{"input":{"type":"structure","required":["Name","Type","Actions"],"members":{"Name":{},"Type":{},"Schedule":{},"Predicate":{"shape":"S3u"},"Actions":{"shape":"S40"},"Description":{}}},"output":{"type":"structure","members":{"Name":{}}}},"CreateUserDefinedFunction":{"input":{"type":"structure","required":["DatabaseName","FunctionInput"],"members":{"CatalogId":{},"DatabaseName":{},"FunctionInput":{"shape":"S44"}}},"output":{"type":"structure","members":{}}},"DeleteClassifier":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteConnection":{"input":{"type":"structure","required":["ConnectionName"],"members":{"CatalogId":{},"ConnectionName":{}}},"output":{"type":"structure","members":{}}},"DeleteCrawler":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteDatabase":{"input":{"type":"structure","required":["Name"],"members":{"CatalogId":{},"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteDevEndpoint":{"input":{"type":"structure","required":["EndpointName"],"members":{"EndpointName":{}}},"output":{"type":"structure","members":{}}},"DeleteJob":{"input":{"type":"structure","required":["JobName"],"members":{"JobName":{}}},"output":{"type":"structure","members":{"JobName":{}}}},"DeletePartition":{"input":{"type":"structure","required":["DatabaseName","TableName","PartitionValues"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"PartitionValues":{"shape":"S6"}}},"output":{"type":"structure","members":{}}},"DeleteTable":{"input":{"type":"structure","required":["DatabaseName","Name"],"members":{"CatalogId":{},"DatabaseName":{},"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteTrigger":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{}}}},"DeleteUserDefinedFunction":{"input":{"type":"structure","required":["DatabaseName","FunctionName"],"members":{"CatalogId":{},"DatabaseName":{},"FunctionName":{}}},"output":{"type":"structure","members":{}}},"GetCatalogImportStatus":{"input":{"type":"structure","members":{"CatalogId":{}}},"output":{"type":"structure","members":{"ImportStatus":{"type":"structure","members":{"ImportCompleted":{"type":"boolean"},"ImportTime":{"type":"timestamp"},"ImportedBy":{}}}}}},"GetClassifier":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Classifier":{"shape":"S4z"}}}},"GetClassifiers":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Classifiers":{"type":"list","member":{"shape":"S4z"}},"NextToken":{}}}},"GetConnection":{"input":{"type":"structure","required":["Name"],"members":{"CatalogId":{},"Name":{}}},"output":{"type":"structure","members":{"Connection":{"shape":"S59"}}}},"GetConnections":{"input":{"type":"structure","members":{"CatalogId":{},"Filter":{"type":"structure","members":{"MatchCriteria":{"shape":"S1y"},"ConnectionType":{}}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ConnectionList":{"type":"list","member":{"shape":"S59"}},"NextToken":{}}}},"GetCrawler":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Crawler":{"shape":"S5g"}}}},"GetCrawlerMetrics":{"input":{"type":"structure","members":{"CrawlerNameList":{"type":"list","member":{}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"CrawlerMetricsList":{"type":"list","member":{"type":"structure","members":{"CrawlerName":{},"TimeLeftSeconds":{"type":"double"},"StillEstimating":{"type":"boolean"},"LastRuntimeSeconds":{"type":"double"},"MedianRuntimeSeconds":{"type":"double"},"TablesCreated":{"type":"integer"},"TablesUpdated":{"type":"integer"},"TablesDeleted":{"type":"integer"}}}},"NextToken":{}}}},"GetCrawlers":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Crawlers":{"type":"list","member":{"shape":"S5g"}},"NextToken":{}}}},"GetDatabase":{"input":{"type":"structure","required":["Name"],"members":{"CatalogId":{},"Name":{}}},"output":{"type":"structure","members":{"Database":{"shape":"S61"}}}},"GetDatabases":{"input":{"type":"structure","members":{"CatalogId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","required":["DatabaseList"],"members":{"DatabaseList":{"type":"list","member":{"shape":"S61"}},"NextToken":{}}}},"GetDataflowGraph":{"input":{"type":"structure","members":{"PythonScript":{}}},"output":{"type":"structure","members":{"DagNodes":{"shape":"S3a"},"DagEdges":{"shape":"S3i"}}}},"GetDevEndpoint":{"input":{"type":"structure","required":["EndpointName"],"members":{"EndpointName":{}}},"output":{"type":"structure","members":{"DevEndpoint":{"shape":"S69"}}}},"GetDevEndpoints":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"DevEndpoints":{"type":"list","member":{"shape":"S69"}},"NextToken":{}}}},"GetJob":{"input":{"type":"structure","required":["JobName"],"members":{"JobName":{}}},"output":{"type":"structure","members":{"Job":{"shape":"S6f"}}}},"GetJobRun":{"input":{"type":"structure","required":["JobName","RunId"],"members":{"JobName":{},"RunId":{},"PredecessorsIncluded":{"type":"boolean"}}},"output":{"type":"structure","members":{"JobRun":{"shape":"S6j"}}}},"GetJobRuns":{"input":{"type":"structure","required":["JobName"],"members":{"JobName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"JobRuns":{"type":"list","member":{"shape":"S6j"}},"NextToken":{}}}},"GetJobs":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Jobs":{"type":"list","member":{"shape":"S6f"}},"NextToken":{}}}},"GetMapping":{"input":{"type":"structure","required":["Source"],"members":{"Source":{"shape":"S6v"},"Sinks":{"shape":"S6w"},"Location":{"shape":"S6x"}}},"output":{"type":"structure","required":["Mapping"],"members":{"Mapping":{"shape":"S6z"}}}},"GetPartition":{"input":{"type":"structure","required":["DatabaseName","TableName","PartitionValues"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"PartitionValues":{"shape":"S6"}}},"output":{"type":"structure","members":{"Partition":{"shape":"S1g"}}}},"GetPartitions":{"input":{"type":"structure","required":["DatabaseName","TableName"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"Expression":{},"NextToken":{},"Segment":{"type":"structure","required":["SegmentNumber","TotalSegments"],"members":{"SegmentNumber":{"type":"integer"},"TotalSegments":{"type":"integer"}}},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Partitions":{"shape":"S1f"},"NextToken":{}}}},"GetPlan":{"input":{"type":"structure","required":["Mapping","Source"],"members":{"Mapping":{"shape":"S6z"},"Source":{"shape":"S6v"},"Sinks":{"shape":"S6w"},"Location":{"shape":"S6x"}}},"output":{"type":"structure","members":{"PythonScript":{}}}},"GetTable":{"input":{"type":"structure","required":["DatabaseName","Name"],"members":{"CatalogId":{},"DatabaseName":{},"Name":{}}},"output":{"type":"structure","members":{"Table":{"shape":"S7f"}}}},"GetTableVersions":{"input":{"type":"structure","required":["DatabaseName","TableName"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"TableVersions":{"type":"list","member":{"type":"structure","members":{"Table":{"shape":"S7f"},"VersionId":{}}}},"NextToken":{}}}},"GetTables":{"input":{"type":"structure","required":["DatabaseName"],"members":{"CatalogId":{},"DatabaseName":{},"Expression":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"TableList":{"type":"list","member":{"shape":"S7f"}},"NextToken":{}}}},"GetTrigger":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Trigger":{"shape":"S7r"}}}},"GetTriggers":{"input":{"type":"structure","members":{"NextToken":{},"DependentJobName":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Triggers":{"type":"list","member":{"shape":"S7r"}},"NextToken":{}}}},"GetUserDefinedFunction":{"input":{"type":"structure","required":["DatabaseName","FunctionName"],"members":{"CatalogId":{},"DatabaseName":{},"FunctionName":{}}},"output":{"type":"structure","members":{"UserDefinedFunction":{"shape":"S7y"}}}},"GetUserDefinedFunctions":{"input":{"type":"structure","required":["DatabaseName","Pattern"],"members":{"CatalogId":{},"DatabaseName":{},"Pattern":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"UserDefinedFunctions":{"type":"list","member":{"shape":"S7y"}},"NextToken":{}}}},"ImportCatalogToGlue":{"input":{"type":"structure","members":{"CatalogId":{}}},"output":{"type":"structure","members":{}}},"ResetJobBookmark":{"input":{"type":"structure","required":["JobName"],"members":{"JobName":{}}},"output":{"type":"structure","members":{"JobBookmarkEntry":{"type":"structure","members":{"JobName":{},"Version":{"type":"integer"},"Run":{"type":"integer"},"Attempt":{"type":"integer"},"JobBookmark":{}}}}}},"StartCrawler":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"StartCrawlerSchedule":{"input":{"type":"structure","required":["CrawlerName"],"members":{"CrawlerName":{}}},"output":{"type":"structure","members":{}}},"StartJobRun":{"input":{"type":"structure","required":["JobName"],"members":{"JobName":{},"JobRunId":{},"Arguments":{"shape":"S33"},"AllocatedCapacity":{"type":"integer"}}},"output":{"type":"structure","members":{"JobRunId":{}}}},"StartTrigger":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{}}}},"StopCrawler":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"StopCrawlerSchedule":{"input":{"type":"structure","required":["CrawlerName"],"members":{"CrawlerName":{}}},"output":{"type":"structure","members":{}}},"StopTrigger":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{"Name":{}}}},"UpdateClassifier":{"input":{"type":"structure","members":{"GrokClassifier":{"type":"structure","required":["Name"],"members":{"Name":{},"Classification":{},"GrokPattern":{},"CustomPatterns":{}}}}},"output":{"type":"structure","members":{}}},"UpdateConnection":{"input":{"type":"structure","required":["Name","ConnectionInput"],"members":{"CatalogId":{},"Name":{},"ConnectionInput":{"shape":"S1w"}}},"output":{"type":"structure","members":{}}},"UpdateCrawler":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Role":{},"DatabaseName":{},"Description":{},"Targets":{"shape":"S27"},"Schedule":{},"Classifiers":{"shape":"S2g"},"TablePrefix":{},"SchemaChangePolicy":{"shape":"S2i"}}},"output":{"type":"structure","members":{}}},"UpdateCrawlerSchedule":{"input":{"type":"structure","required":["CrawlerName"],"members":{"CrawlerName":{},"Schedule":{}}},"output":{"type":"structure","members":{}}},"UpdateDatabase":{"input":{"type":"structure","required":["Name","DatabaseInput"],"members":{"CatalogId":{},"Name":{},"DatabaseInput":{"shape":"S2n"}}},"output":{"type":"structure","members":{}}},"UpdateDevEndpoint":{"input":{"type":"structure","required":["EndpointName"],"members":{"EndpointName":{},"PublicKey":{},"CustomLibraries":{"type":"structure","members":{"ExtraPythonLibsS3Path":{},"ExtraJarsS3Path":{}}},"UpdateEtlLibraries":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"UpdateJob":{"input":{"type":"structure","required":["JobName","JobUpdate"],"members":{"JobName":{},"JobUpdate":{"type":"structure","members":{"Description":{},"LogUri":{},"Role":{},"ExecutionProperty":{"shape":"S2z"},"Command":{"shape":"S31"},"DefaultArguments":{"shape":"S33"},"Connections":{"shape":"S34"},"MaxRetries":{"type":"integer"},"AllocatedCapacity":{"type":"integer"}}}}},"output":{"type":"structure","members":{"JobName":{}}}},"UpdatePartition":{"input":{"type":"structure","required":["DatabaseName","TableName","PartitionValueList","PartitionInput"],"members":{"CatalogId":{},"DatabaseName":{},"TableName":{},"PartitionValueList":{"type":"list","member":{}},"PartitionInput":{"shape":"S5"}}},"output":{"type":"structure","members":{}}},"UpdateTable":{"input":{"type":"structure","required":["DatabaseName","TableInput"],"members":{"CatalogId":{},"DatabaseName":{},"TableInput":{"shape":"S3n"}}},"output":{"type":"structure","members":{}}},"UpdateTrigger":{"input":{"type":"structure","required":["Name","TriggerUpdate"],"members":{"Name":{},"TriggerUpdate":{"type":"structure","members":{"Name":{},"Description":{},"Schedule":{},"Actions":{"shape":"S40"},"Predicate":{"shape":"S3u"}}}}},"output":{"type":"structure","members":{"Trigger":{"shape":"S7r"}}}},"UpdateUserDefinedFunction":{"input":{"type":"structure","required":["DatabaseName","FunctionName","FunctionInput"],"members":{"CatalogId":{},"DatabaseName":{},"FunctionName":{},"FunctionInput":{"shape":"S44"}}},"output":{"type":"structure","members":{}}}},"shapes":{"S5":{"type":"structure","members":{"Values":{"shape":"S6"},"LastAccessTime":{"type":"timestamp"},"StorageDescriptor":{"shape":"S9"},"Parameters":{"shape":"Sj"},"LastAnalyzedTime":{"type":"timestamp"}}},"S6":{"type":"list","member":{}},"S9":{"type":"structure","members":{"Columns":{"shape":"Sa"},"Location":{},"InputFormat":{},"OutputFormat":{},"Compressed":{"type":"boolean"},"NumberOfBuckets":{"type":"integer"},"SerdeInfo":{"type":"structure","members":{"Name":{},"SerializationLibrary":{},"Parameters":{"shape":"Sj"}}},"BucketColumns":{"shape":"Sm"},"SortColumns":{"type":"list","member":{"type":"structure","required":["Column","SortOrder"],"members":{"Column":{},"SortOrder":{"type":"integer"}}}},"Parameters":{"shape":"Sj"},"SkewedInfo":{"type":"structure","members":{"SkewedColumnNames":{"shape":"Sm"},"SkewedColumnValues":{"type":"list","member":{}},"SkewedColumnValueLocationMaps":{"type":"map","key":{},"value":{}}}},"StoredAsSubDirectories":{"type":"boolean"}}},"Sa":{"type":"list","member":{"type":"structure","required":["Name"],"members":{"Name":{},"Type":{},"Comment":{}}}},"Sj":{"type":"map","key":{},"value":{}},"Sm":{"type":"list","member":{}},"Sv":{"type":"list","member":{"type":"structure","members":{"PartitionValues":{"shape":"S6"},"ErrorDetail":{"shape":"Sx"}}}},"Sx":{"type":"structure","members":{"ErrorCode":{},"ErrorMessage":{}}},"S15":{"type":"structure","required":["Values"],"members":{"Values":{"shape":"S6"}}},"S1d":{"type":"list","member":{"shape":"S15"}},"S1f":{"type":"list","member":{"shape":"S1g"}},"S1g":{"type":"structure","members":{"Values":{"shape":"S6"},"DatabaseName":{},"TableName":{},"CreationTime":{"type":"timestamp"},"LastAccessTime":{"type":"timestamp"},"StorageDescriptor":{"shape":"S9"},"Parameters":{"shape":"Sj"},"LastAnalyzedTime":{"type":"timestamp"}}},"S1w":{"type":"structure","members":{"Name":{},"Description":{},"ConnectionType":{},"MatchCriteria":{"shape":"S1y"},"ConnectionProperties":{"shape":"S1z"},"PhysicalConnectionRequirements":{"shape":"S21"}}},"S1y":{"type":"list","member":{}},"S1z":{"type":"map","key":{},"value":{}},"S21":{"type":"structure","members":{"SubnetId":{},"SecurityGroupIdList":{"type":"list","member":{}},"AvailabilityZone":{}}},"S27":{"type":"structure","members":{"S3Targets":{"type":"list","member":{"type":"structure","members":{"Path":{},"Exclusions":{"shape":"S2b"}}}},"JdbcTargets":{"type":"list","member":{"type":"structure","members":{"ConnectionName":{},"Path":{},"Exclusions":{"shape":"S2b"}}}}}},"S2b":{"type":"list","member":{}},"S2g":{"type":"list","member":{}},"S2i":{"type":"structure","members":{"UpdateBehavior":{},"DeleteBehavior":{}}},"S2n":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"LocationUri":{},"Parameters":{"shape":"Sj"}}},"S2s":{"type":"list","member":{}},"S2z":{"type":"structure","members":{"MaxConcurrentRuns":{"type":"integer"}}},"S31":{"type":"structure","members":{"Name":{},"ScriptLocation":{}}},"S33":{"type":"map","key":{},"value":{}},"S34":{"type":"structure","members":{"Connections":{"shape":"S2s"}}},"S3a":{"type":"list","member":{"type":"structure","required":["Id","NodeType","Args"],"members":{"Id":{},"NodeType":{},"Args":{"shape":"S3e"},"LineNumber":{"type":"integer"}}}},"S3e":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{},"Param":{"type":"boolean"}}}},"S3i":{"type":"list","member":{"type":"structure","required":["Source","Target"],"members":{"Source":{},"Target":{},"TargetParameter":{}}}},"S3n":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"Owner":{},"LastAccessTime":{"type":"timestamp"},"LastAnalyzedTime":{"type":"timestamp"},"Retention":{"type":"integer"},"StorageDescriptor":{"shape":"S9"},"PartitionKeys":{"shape":"Sa"},"ViewOriginalText":{},"ViewExpandedText":{},"TableType":{},"Parameters":{"shape":"Sj"}}},"S3u":{"type":"structure","members":{"Logical":{},"Conditions":{"type":"list","member":{"type":"structure","members":{"LogicalOperator":{},"JobName":{},"State":{}}}}}},"S40":{"type":"list","member":{"type":"structure","members":{"JobName":{},"Arguments":{"shape":"S33"}}}},"S44":{"type":"structure","members":{"FunctionName":{},"ClassName":{},"OwnerName":{},"OwnerType":{},"ResourceUris":{"shape":"S46"}}},"S46":{"type":"list","member":{"type":"structure","members":{"ResourceType":{},"Uri":{}}}},"S4z":{"type":"structure","members":{"GrokClassifier":{"type":"structure","required":["Name","Classification","GrokPattern"],"members":{"Name":{},"Classification":{},"CreationTime":{"type":"timestamp"},"LastUpdated":{"type":"timestamp"},"Version":{"type":"long"},"GrokPattern":{},"CustomPatterns":{}}}}},"S59":{"type":"structure","members":{"Name":{},"Description":{},"ConnectionType":{},"MatchCriteria":{"shape":"S1y"},"ConnectionProperties":{"shape":"S1z"},"PhysicalConnectionRequirements":{"shape":"S21"},"CreationTime":{"type":"timestamp"},"LastUpdatedTime":{"type":"timestamp"},"LastUpdatedBy":{}}},"S5g":{"type":"structure","members":{"Name":{},"Role":{},"Targets":{"shape":"S27"},"DatabaseName":{},"Description":{},"Classifiers":{"shape":"S2g"},"SchemaChangePolicy":{"shape":"S2i"},"State":{},"TablePrefix":{},"Schedule":{"type":"structure","members":{"ScheduleExpression":{},"State":{}}},"CrawlElapsedTime":{"type":"long"},"CreationTime":{"type":"timestamp"},"LastUpdated":{"type":"timestamp"},"LastCrawl":{"type":"structure","members":{"Status":{},"ErrorMessage":{},"LogGroup":{},"LogStream":{},"MessagePrefix":{},"StartTime":{"type":"timestamp"}}},"Version":{"type":"long"}}},"S61":{"type":"structure","required":["Name"],"members":{"Name":{},"Description":{},"LocationUri":{},"Parameters":{"shape":"Sj"},"CreateTime":{"type":"timestamp"}}},"S69":{"type":"structure","members":{"EndpointName":{},"RoleArn":{},"SecurityGroupIds":{"shape":"S2s"},"SubnetId":{},"YarnEndpointAddress":{},"ZeppelinRemoteSparkInterpreterPort":{"type":"integer"},"PublicAddress":{},"Status":{},"NumberOfNodes":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"ExtraPythonLibsS3Path":{},"ExtraJarsS3Path":{},"FailureReason":{},"LastUpdateStatus":{},"CreatedTimestamp":{"type":"timestamp"},"LastModifiedTimestamp":{"type":"timestamp"},"PublicKey":{}}},"S6f":{"type":"structure","members":{"Name":{},"Description":{},"LogUri":{},"Role":{},"CreatedOn":{"type":"timestamp"},"LastModifiedOn":{"type":"timestamp"},"ExecutionProperty":{"shape":"S2z"},"Command":{"shape":"S31"},"DefaultArguments":{"shape":"S33"},"Connections":{"shape":"S34"},"MaxRetries":{"type":"integer"},"AllocatedCapacity":{"type":"integer"}}},"S6j":{"type":"structure","members":{"Id":{},"Attempt":{"type":"integer"},"PreviousRunId":{},"TriggerName":{},"JobName":{},"StartedOn":{"type":"timestamp"},"LastModifiedOn":{"type":"timestamp"},"CompletedOn":{"type":"timestamp"},"JobRunState":{},"Arguments":{"shape":"S33"},"ErrorMessage":{},"PredecessorRuns":{"type":"list","member":{"type":"structure","members":{"JobName":{},"RunId":{}}}},"AllocatedCapacity":{"type":"integer"}}},"S6v":{"type":"structure","required":["DatabaseName","TableName"],"members":{"DatabaseName":{},"TableName":{}}},"S6w":{"type":"list","member":{"shape":"S6v"}},"S6x":{"type":"structure","members":{"Jdbc":{"shape":"S3e"},"S3":{"shape":"S3e"}}},"S6z":{"type":"list","member":{"type":"structure","members":{"SourceTable":{},"SourcePath":{},"SourceType":{},"TargetTable":{},"TargetPath":{},"TargetType":{}}}},"S7f":{"type":"structure","required":["Name"],"members":{"Name":{},"DatabaseName":{},"Description":{},"Owner":{},"CreateTime":{"type":"timestamp"},"UpdateTime":{"type":"timestamp"},"LastAccessTime":{"type":"timestamp"},"LastAnalyzedTime":{"type":"timestamp"},"Retention":{"type":"integer"},"StorageDescriptor":{"shape":"S9"},"PartitionKeys":{"shape":"Sa"},"ViewOriginalText":{},"ViewExpandedText":{},"TableType":{},"Parameters":{"shape":"Sj"},"CreatedBy":{}}},"S7r":{"type":"structure","members":{"Name":{},"Id":{},"Type":{},"State":{},"Description":{},"Schedule":{},"Actions":{"shape":"S40"},"Predicate":{"shape":"S3u"}}},"S7y":{"type":"structure","members":{"FunctionName":{},"ClassName":{},"OwnerName":{},"OwnerType":{},"CreateTime":{"type":"timestamp"},"ResourceUris":{"shape":"S46"}}}}}

/***/ }),
/* 247 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetClassifiers":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetConnections":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetCrawlerMetrics":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetCrawlers":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetDatabases":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetDevEndpoints":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetJobRuns":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetJobs":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetPartitions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetTableVersions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetTables":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetTriggers":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetUserDefinedFunctions":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 248 */
/***/ (function(module, exports) {

module.exports = {"metadata":{"apiVersion":"2017-06-07","endpointPrefix":"greengrass","signingName":"greengrass","serviceFullName":"AWS Greengrass","protocol":"rest-json","jsonVersion":"1.1","uid":"greengrass-2017-06-07","signatureVersion":"v4"},"operations":{"AssociateRoleToGroup":{"http":{"method":"PUT","requestUri":"/greengrass/groups/{GroupId}/role","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"},"RoleArn":{}},"required":["GroupId"]},"output":{"type":"structure","members":{"AssociatedAt":{}}}},"AssociateServiceRoleToAccount":{"http":{"method":"PUT","requestUri":"/greengrass/servicerole","responseCode":200},"input":{"type":"structure","members":{"RoleArn":{}}},"output":{"type":"structure","members":{"AssociatedAt":{}}}},"CreateCoreDefinition":{"http":{"requestUri":"/greengrass/definition/cores","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"InitialVersion":{"shape":"S7"},"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"CreateCoreDefinitionVersion":{"http":{"requestUri":"/greengrass/definition/cores/{CoreDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"CoreDefinitionId":{"location":"uri","locationName":"CoreDefinitionId"},"Cores":{"shape":"S8"}},"required":["CoreDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"Version":{}}}},"CreateDeployment":{"http":{"requestUri":"/greengrass/groups/{GroupId}/deployments","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"DeploymentId":{},"DeploymentType":{},"GroupId":{"location":"uri","locationName":"GroupId"},"GroupVersionId":{}},"required":["GroupId"]},"output":{"type":"structure","members":{"DeploymentArn":{},"DeploymentId":{}}}},"CreateDeviceDefinition":{"http":{"requestUri":"/greengrass/definition/devices","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"InitialVersion":{"shape":"Si"},"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"CreateDeviceDefinitionVersion":{"http":{"requestUri":"/greengrass/definition/devices/{DeviceDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"DeviceDefinitionId":{"location":"uri","locationName":"DeviceDefinitionId"},"Devices":{"shape":"Sj"}},"required":["DeviceDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"Version":{}}}},"CreateFunctionDefinition":{"http":{"requestUri":"/greengrass/definition/functions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"InitialVersion":{"shape":"Sp"},"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"CreateFunctionDefinitionVersion":{"http":{"requestUri":"/greengrass/definition/functions/{FunctionDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"FunctionDefinitionId":{"location":"uri","locationName":"FunctionDefinitionId"},"Functions":{"shape":"Sq"}},"required":["FunctionDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"Version":{}}}},"CreateGroup":{"http":{"requestUri":"/greengrass/groups","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"InitialVersion":{"shape":"S10"},"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"CreateGroupCertificateAuthority":{"http":{"requestUri":"/greengrass/groups/{GroupId}/certificateauthorities","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"GroupCertificateAuthorityArn":{}}}},"CreateGroupVersion":{"http":{"requestUri":"/greengrass/groups/{GroupId}/versions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"CoreDefinitionVersionArn":{},"DeviceDefinitionVersionArn":{},"FunctionDefinitionVersionArn":{},"GroupId":{"location":"uri","locationName":"GroupId"},"LoggerDefinitionVersionArn":{},"SubscriptionDefinitionVersionArn":{}},"required":["GroupId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"Version":{}}}},"CreateLoggerDefinition":{"http":{"requestUri":"/greengrass/definition/loggers","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"InitialVersion":{"shape":"S17"},"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"CreateLoggerDefinitionVersion":{"http":{"requestUri":"/greengrass/definition/loggers/{LoggerDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"LoggerDefinitionId":{"location":"uri","locationName":"LoggerDefinitionId"},"Loggers":{"shape":"S18"}},"required":["LoggerDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"Version":{}}}},"CreateSubscriptionDefinition":{"http":{"requestUri":"/greengrass/definition/subscriptions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"InitialVersion":{"shape":"S1h"},"Name":{}}},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"CreateSubscriptionDefinitionVersion":{"http":{"requestUri":"/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"SubscriptionDefinitionId":{"location":"uri","locationName":"SubscriptionDefinitionId"},"Subscriptions":{"shape":"S1i"}},"required":["SubscriptionDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"Version":{}}}},"DeleteCoreDefinition":{"http":{"method":"DELETE","requestUri":"/greengrass/definition/cores/{CoreDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"CoreDefinitionId":{"location":"uri","locationName":"CoreDefinitionId"}},"required":["CoreDefinitionId"]},"output":{"type":"structure","members":{}}},"DeleteDeviceDefinition":{"http":{"method":"DELETE","requestUri":"/greengrass/definition/devices/{DeviceDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"DeviceDefinitionId":{"location":"uri","locationName":"DeviceDefinitionId"}},"required":["DeviceDefinitionId"]},"output":{"type":"structure","members":{}}},"DeleteFunctionDefinition":{"http":{"method":"DELETE","requestUri":"/greengrass/definition/functions/{FunctionDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"FunctionDefinitionId":{"location":"uri","locationName":"FunctionDefinitionId"}},"required":["FunctionDefinitionId"]},"output":{"type":"structure","members":{}}},"DeleteGroup":{"http":{"method":"DELETE","requestUri":"/greengrass/groups/{GroupId}","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{}}},"DeleteLoggerDefinition":{"http":{"method":"DELETE","requestUri":"/greengrass/definition/loggers/{LoggerDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"LoggerDefinitionId":{"location":"uri","locationName":"LoggerDefinitionId"}},"required":["LoggerDefinitionId"]},"output":{"type":"structure","members":{}}},"DeleteSubscriptionDefinition":{"http":{"method":"DELETE","requestUri":"/greengrass/definition/subscriptions/{SubscriptionDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"SubscriptionDefinitionId":{"location":"uri","locationName":"SubscriptionDefinitionId"}},"required":["SubscriptionDefinitionId"]},"output":{"type":"structure","members":{}}},"DisassociateRoleFromGroup":{"http":{"method":"DELETE","requestUri":"/greengrass/groups/{GroupId}/role","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"DisassociatedAt":{}}}},"DisassociateServiceRoleFromAccount":{"http":{"method":"DELETE","requestUri":"/greengrass/servicerole","responseCode":200},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"DisassociatedAt":{}}}},"GetAssociatedRole":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/role","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"AssociatedAt":{},"RoleArn":{}}}},"GetConnectivityInfo":{"http":{"method":"GET","requestUri":"/greengrass/things/{ThingName}/connectivityInfo","responseCode":200},"input":{"type":"structure","members":{"ThingName":{"location":"uri","locationName":"ThingName"}},"required":["ThingName"]},"output":{"type":"structure","members":{"ConnectivityInfo":{"shape":"S27"},"Message":{"locationName":"message"}}}},"GetCoreDefinition":{"http":{"method":"GET","requestUri":"/greengrass/definition/cores/{CoreDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"CoreDefinitionId":{"location":"uri","locationName":"CoreDefinitionId"}},"required":["CoreDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"GetCoreDefinitionVersion":{"http":{"method":"GET","requestUri":"/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}","responseCode":200},"input":{"type":"structure","members":{"CoreDefinitionId":{"location":"uri","locationName":"CoreDefinitionId"},"CoreDefinitionVersionId":{"location":"uri","locationName":"CoreDefinitionVersionId"}},"required":["CoreDefinitionId","CoreDefinitionVersionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Definition":{"shape":"S7"},"Id":{},"Version":{}}}},"GetDeploymentStatus":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status","responseCode":200},"input":{"type":"structure","members":{"DeploymentId":{"location":"uri","locationName":"DeploymentId"},"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId","DeploymentId"]},"output":{"type":"structure","members":{"DeploymentStatus":{},"DeploymentType":{},"ErrorDetails":{"type":"list","member":{"type":"structure","members":{"DetailedErrorCode":{},"DetailedErrorMessage":{}}}},"ErrorMessage":{},"UpdatedAt":{}}}},"GetDeviceDefinition":{"http":{"method":"GET","requestUri":"/greengrass/definition/devices/{DeviceDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"DeviceDefinitionId":{"location":"uri","locationName":"DeviceDefinitionId"}},"required":["DeviceDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"GetDeviceDefinitionVersion":{"http":{"method":"GET","requestUri":"/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}","responseCode":200},"input":{"type":"structure","members":{"DeviceDefinitionId":{"location":"uri","locationName":"DeviceDefinitionId"},"DeviceDefinitionVersionId":{"location":"uri","locationName":"DeviceDefinitionVersionId"}},"required":["DeviceDefinitionVersionId","DeviceDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Definition":{"shape":"Si"},"Id":{},"Version":{}}}},"GetFunctionDefinition":{"http":{"method":"GET","requestUri":"/greengrass/definition/functions/{FunctionDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"FunctionDefinitionId":{"location":"uri","locationName":"FunctionDefinitionId"}},"required":["FunctionDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"GetFunctionDefinitionVersion":{"http":{"method":"GET","requestUri":"/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}","responseCode":200},"input":{"type":"structure","members":{"FunctionDefinitionId":{"location":"uri","locationName":"FunctionDefinitionId"},"FunctionDefinitionVersionId":{"location":"uri","locationName":"FunctionDefinitionVersionId"}},"required":["FunctionDefinitionId","FunctionDefinitionVersionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Definition":{"shape":"Sp"},"Id":{},"Version":{}}}},"GetGroup":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"GetGroupCertificateAuthority":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}","responseCode":200},"input":{"type":"structure","members":{"CertificateAuthorityId":{"location":"uri","locationName":"CertificateAuthorityId"},"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["CertificateAuthorityId","GroupId"]},"output":{"type":"structure","members":{"GroupCertificateAuthorityArn":{},"GroupCertificateAuthorityId":{},"PemEncodedCertificate":{}}}},"GetGroupCertificateConfiguration":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"CertificateAuthorityExpiryInMilliseconds":{},"CertificateExpiryInMilliseconds":{},"GroupId":{}}}},"GetGroupVersion":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/versions/{GroupVersionId}","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"},"GroupVersionId":{"location":"uri","locationName":"GroupVersionId"}},"required":["GroupVersionId","GroupId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Definition":{"shape":"S10"},"Id":{},"Version":{}}}},"GetLoggerDefinition":{"http":{"method":"GET","requestUri":"/greengrass/definition/loggers/{LoggerDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"LoggerDefinitionId":{"location":"uri","locationName":"LoggerDefinitionId"}},"required":["LoggerDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"GetLoggerDefinitionVersion":{"http":{"method":"GET","requestUri":"/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}","responseCode":200},"input":{"type":"structure","members":{"LoggerDefinitionId":{"location":"uri","locationName":"LoggerDefinitionId"},"LoggerDefinitionVersionId":{"location":"uri","locationName":"LoggerDefinitionVersionId"}},"required":["LoggerDefinitionVersionId","LoggerDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Definition":{"shape":"S17"},"Id":{},"Version":{}}}},"GetServiceRoleForAccount":{"http":{"method":"GET","requestUri":"/greengrass/servicerole","responseCode":200},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AssociatedAt":{},"RoleArn":{}}}},"GetSubscriptionDefinition":{"http":{"method":"GET","requestUri":"/greengrass/definition/subscriptions/{SubscriptionDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"SubscriptionDefinitionId":{"location":"uri","locationName":"SubscriptionDefinitionId"}},"required":["SubscriptionDefinitionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"GetSubscriptionDefinitionVersion":{"http":{"method":"GET","requestUri":"/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}","responseCode":200},"input":{"type":"structure","members":{"SubscriptionDefinitionId":{"location":"uri","locationName":"SubscriptionDefinitionId"},"SubscriptionDefinitionVersionId":{"location":"uri","locationName":"SubscriptionDefinitionVersionId"}},"required":["SubscriptionDefinitionId","SubscriptionDefinitionVersionId"]},"output":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Definition":{"shape":"S1h"},"Id":{},"Version":{}}}},"ListCoreDefinitionVersions":{"http":{"method":"GET","requestUri":"/greengrass/definition/cores/{CoreDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"CoreDefinitionId":{"location":"uri","locationName":"CoreDefinitionId"},"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}},"required":["CoreDefinitionId"]},"output":{"type":"structure","members":{"NextToken":{},"Versions":{"shape":"S39"}}}},"ListCoreDefinitions":{"http":{"method":"GET","requestUri":"/greengrass/definition/cores","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Definitions":{"shape":"S3d"},"NextToken":{}}}},"ListDeployments":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/deployments","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"},"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}},"required":["GroupId"]},"output":{"type":"structure","members":{"Deployments":{"type":"list","member":{"type":"structure","members":{"CreatedAt":{},"DeploymentArn":{},"DeploymentId":{},"DeploymentType":{},"GroupArn":{}}}},"NextToken":{}}}},"ListDeviceDefinitionVersions":{"http":{"method":"GET","requestUri":"/greengrass/definition/devices/{DeviceDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"DeviceDefinitionId":{"location":"uri","locationName":"DeviceDefinitionId"},"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}},"required":["DeviceDefinitionId"]},"output":{"type":"structure","members":{"NextToken":{},"Versions":{"shape":"S39"}}}},"ListDeviceDefinitions":{"http":{"method":"GET","requestUri":"/greengrass/definition/devices","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Definitions":{"shape":"S3d"},"NextToken":{}}}},"ListFunctionDefinitionVersions":{"http":{"method":"GET","requestUri":"/greengrass/definition/functions/{FunctionDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"FunctionDefinitionId":{"location":"uri","locationName":"FunctionDefinitionId"},"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}},"required":["FunctionDefinitionId"]},"output":{"type":"structure","members":{"NextToken":{},"Versions":{"shape":"S39"}}}},"ListFunctionDefinitions":{"http":{"method":"GET","requestUri":"/greengrass/definition/functions","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Definitions":{"shape":"S3d"},"NextToken":{}}}},"ListGroupCertificateAuthorities":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/certificateauthorities","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"GroupCertificateAuthorities":{"type":"list","member":{"type":"structure","members":{"GroupCertificateAuthorityArn":{},"GroupCertificateAuthorityId":{}}}}}}},"ListGroupVersions":{"http":{"method":"GET","requestUri":"/greengrass/groups/{GroupId}/versions","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"},"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}},"required":["GroupId"]},"output":{"type":"structure","members":{"NextToken":{},"Versions":{"shape":"S39"}}}},"ListGroups":{"http":{"method":"GET","requestUri":"/greengrass/groups","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Groups":{"type":"list","member":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}},"NextToken":{}}}},"ListLoggerDefinitionVersions":{"http":{"method":"GET","requestUri":"/greengrass/definition/loggers/{LoggerDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"LoggerDefinitionId":{"location":"uri","locationName":"LoggerDefinitionId"},"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}},"required":["LoggerDefinitionId"]},"output":{"type":"structure","members":{"NextToken":{},"Versions":{"shape":"S39"}}}},"ListLoggerDefinitions":{"http":{"method":"GET","requestUri":"/greengrass/definition/loggers","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Definitions":{"shape":"S3d"},"NextToken":{}}}},"ListSubscriptionDefinitionVersions":{"http":{"method":"GET","requestUri":"/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"},"SubscriptionDefinitionId":{"location":"uri","locationName":"SubscriptionDefinitionId"}},"required":["SubscriptionDefinitionId"]},"output":{"type":"structure","members":{"NextToken":{},"Versions":{"shape":"S39"}}}},"ListSubscriptionDefinitions":{"http":{"method":"GET","requestUri":"/greengrass/definition/subscriptions","responseCode":200},"input":{"type":"structure","members":{"MaxResults":{"location":"querystring","locationName":"MaxResults"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Definitions":{"shape":"S3d"},"NextToken":{}}}},"ResetDeployments":{"http":{"requestUri":"/greengrass/groups/{GroupId}/deployments/$reset","responseCode":200},"input":{"type":"structure","members":{"AmznClientToken":{"location":"header","locationName":"X-Amzn-Client-Token"},"Force":{"type":"boolean"},"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"DeploymentArn":{},"DeploymentId":{}}}},"UpdateConnectivityInfo":{"http":{"method":"PUT","requestUri":"/greengrass/things/{ThingName}/connectivityInfo","responseCode":200},"input":{"type":"structure","members":{"ConnectivityInfo":{"shape":"S27"},"ThingName":{"location":"uri","locationName":"ThingName"}},"required":["ThingName"]},"output":{"type":"structure","members":{"Message":{"locationName":"message"},"Version":{}}}},"UpdateCoreDefinition":{"http":{"method":"PUT","requestUri":"/greengrass/definition/cores/{CoreDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"CoreDefinitionId":{"location":"uri","locationName":"CoreDefinitionId"},"Name":{}},"required":["CoreDefinitionId"]},"output":{"type":"structure","members":{}}},"UpdateDeviceDefinition":{"http":{"method":"PUT","requestUri":"/greengrass/definition/devices/{DeviceDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"DeviceDefinitionId":{"location":"uri","locationName":"DeviceDefinitionId"},"Name":{}},"required":["DeviceDefinitionId"]},"output":{"type":"structure","members":{}}},"UpdateFunctionDefinition":{"http":{"method":"PUT","requestUri":"/greengrass/definition/functions/{FunctionDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"FunctionDefinitionId":{"location":"uri","locationName":"FunctionDefinitionId"},"Name":{}},"required":["FunctionDefinitionId"]},"output":{"type":"structure","members":{}}},"UpdateGroup":{"http":{"method":"PUT","requestUri":"/greengrass/groups/{GroupId}","responseCode":200},"input":{"type":"structure","members":{"GroupId":{"location":"uri","locationName":"GroupId"},"Name":{}},"required":["GroupId"]},"output":{"type":"structure","members":{}}},"UpdateGroupCertificateConfiguration":{"http":{"method":"PUT","requestUri":"/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry","responseCode":200},"input":{"type":"structure","members":{"CertificateExpiryInMilliseconds":{},"GroupId":{"location":"uri","locationName":"GroupId"}},"required":["GroupId"]},"output":{"type":"structure","members":{"CertificateAuthorityExpiryInMilliseconds":{},"CertificateExpiryInMilliseconds":{},"GroupId":{}}}},"UpdateLoggerDefinition":{"http":{"method":"PUT","requestUri":"/greengrass/definition/loggers/{LoggerDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"LoggerDefinitionId":{"location":"uri","locationName":"LoggerDefinitionId"},"Name":{}},"required":["LoggerDefinitionId"]},"output":{"type":"structure","members":{}}},"UpdateSubscriptionDefinition":{"http":{"method":"PUT","requestUri":"/greengrass/definition/subscriptions/{SubscriptionDefinitionId}","responseCode":200},"input":{"type":"structure","members":{"Name":{},"SubscriptionDefinitionId":{"location":"uri","locationName":"SubscriptionDefinitionId"}},"required":["SubscriptionDefinitionId"]},"output":{"type":"structure","members":{}}}},"shapes":{"S7":{"type":"structure","members":{"Cores":{"shape":"S8"}}},"S8":{"type":"list","member":{"type":"structure","members":{"CertificateArn":{},"Id":{},"SyncShadow":{"type":"boolean"},"ThingArn":{}}}},"Si":{"type":"structure","members":{"Devices":{"shape":"Sj"}}},"Sj":{"type":"list","member":{"type":"structure","members":{"CertificateArn":{},"Id":{},"SyncShadow":{"type":"boolean"},"ThingArn":{}}}},"Sp":{"type":"structure","members":{"Functions":{"shape":"Sq"}}},"Sq":{"type":"list","member":{"type":"structure","members":{"FunctionArn":{},"FunctionConfiguration":{"type":"structure","members":{"Environment":{"type":"structure","members":{"Variables":{"type":"map","key":{},"value":{}}}},"ExecArgs":{},"Executable":{},"MemorySize":{"type":"integer"},"Pinned":{"type":"boolean"},"Timeout":{"type":"integer"}}},"Id":{}}}},"S10":{"type":"structure","members":{"CoreDefinitionVersionArn":{},"DeviceDefinitionVersionArn":{},"FunctionDefinitionVersionArn":{},"LoggerDefinitionVersionArn":{},"SubscriptionDefinitionVersionArn":{}}},"S17":{"type":"structure","members":{"Loggers":{"shape":"S18"}}},"S18":{"type":"list","member":{"type":"structure","members":{"Component":{},"Id":{},"Level":{},"Space":{"type":"integer"},"Type":{}}}},"S1h":{"type":"structure","members":{"Subscriptions":{"shape":"S1i"}}},"S1i":{"type":"list","member":{"type":"structure","members":{"Id":{},"Source":{},"Subject":{},"Target":{}}}},"S27":{"type":"list","member":{"type":"structure","members":{"HostAddress":{},"Id":{},"Metadata":{},"PortNumber":{"type":"integer"}}}},"S39":{"type":"list","member":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"Version":{}}}},"S3d":{"type":"list","member":{"type":"structure","members":{"Arn":{},"CreationTimestamp":{},"Id":{},"LastUpdatedTimestamp":{},"LatestVersion":{},"LatestVersionArn":{},"Name":{}}}}}}

/***/ }),
/* 249 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-08-04","endpointPrefix":"health","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"AWSHealth","serviceFullName":"AWS Health APIs and Notifications","signatureVersion":"v4","targetPrefix":"AWSHealth_20160804","uid":"health-2016-08-04"},"operations":{"DescribeAffectedEntities":{"input":{"type":"structure","required":["filter"],"members":{"filter":{"type":"structure","required":["eventArns"],"members":{"eventArns":{"shape":"S3"},"entityArns":{"shape":"S5"},"entityValues":{"shape":"S7"},"lastUpdatedTimes":{"shape":"S9"},"tags":{"shape":"Sc"},"statusCodes":{"type":"list","member":{}}}},"locale":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"entities":{"type":"list","member":{"type":"structure","members":{"entityArn":{},"eventArn":{},"entityValue":{},"awsAccountId":{},"lastUpdatedTime":{"type":"timestamp"},"statusCode":{},"tags":{"shape":"Sd"}}}},"nextToken":{}}},"idempotent":true},"DescribeEntityAggregates":{"input":{"type":"structure","members":{"eventArns":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"entityAggregates":{"type":"list","member":{"type":"structure","members":{"eventArn":{},"count":{"type":"integer"}}}}}},"idempotent":true},"DescribeEventAggregates":{"input":{"type":"structure","required":["aggregateField"],"members":{"filter":{"shape":"Sw"},"aggregateField":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","members":{"eventAggregates":{"type":"list","member":{"type":"structure","members":{"aggregateValue":{},"count":{"type":"integer"}}}},"nextToken":{}}},"idempotent":true},"DescribeEventDetails":{"input":{"type":"structure","required":["eventArns"],"members":{"eventArns":{"shape":"S3"},"locale":{}}},"output":{"type":"structure","members":{"successfulSet":{"type":"list","member":{"type":"structure","members":{"event":{"shape":"S1i"},"eventDescription":{"type":"structure","members":{"latestDescription":{}}},"eventMetadata":{"type":"map","key":{},"value":{}}}}},"failedSet":{"type":"list","member":{"type":"structure","members":{"eventArn":{},"errorName":{},"errorMessage":{}}}}}},"idempotent":true},"DescribeEventTypes":{"input":{"type":"structure","members":{"filter":{"type":"structure","members":{"eventTypeCodes":{"type":"list","member":{}},"services":{"shape":"Sz"},"eventTypeCategories":{"type":"list","member":{}}}},"locale":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"eventTypes":{"type":"list","member":{"type":"structure","members":{"service":{},"code":{},"category":{}}}},"nextToken":{}}},"idempotent":true},"DescribeEvents":{"input":{"type":"structure","members":{"filter":{"shape":"Sw"},"nextToken":{},"maxResults":{"type":"integer"},"locale":{}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"shape":"S1i"}},"nextToken":{}}},"idempotent":true}},"shapes":{"S3":{"type":"list","member":{}},"S5":{"type":"list","member":{}},"S7":{"type":"list","member":{}},"S9":{"type":"list","member":{"type":"structure","members":{"from":{"type":"timestamp"},"to":{"type":"timestamp"}}}},"Sc":{"type":"list","member":{"shape":"Sd"}},"Sd":{"type":"map","key":{},"value":{}},"Sw":{"type":"structure","members":{"eventArns":{"shape":"S3"},"eventTypeCodes":{"type":"list","member":{}},"services":{"shape":"Sz"},"regions":{"type":"list","member":{}},"availabilityZones":{"type":"list","member":{}},"startTimes":{"shape":"S9"},"endTimes":{"shape":"S9"},"lastUpdatedTimes":{"shape":"S9"},"entityArns":{"shape":"S5"},"entityValues":{"shape":"S7"},"eventTypeCategories":{"type":"list","member":{}},"tags":{"shape":"Sc"},"eventStatusCodes":{"type":"list","member":{}}}},"Sz":{"type":"list","member":{}},"S1i":{"type":"structure","members":{"arn":{},"service":{},"eventTypeCode":{},"eventTypeCategory":{},"region":{},"availabilityZone":{},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"lastUpdatedTime":{"type":"timestamp"},"statusCode":{}}}}}

/***/ }),
/* 250 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeAffectedEntities":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"entities"},"DescribeEntityAggregates":{"result_key":"entityAggregates"},"DescribeEventAggregates":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"eventAggregates"},"DescribeEvents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"events"},"DescribeEventTypes":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"eventTypes"}}}

/***/ }),
/* 251 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-05-08","endpointPrefix":"iam","globalEndpoint":"iam.amazonaws.com","protocol":"query","serviceAbbreviation":"IAM","serviceFullName":"AWS Identity and Access Management","signatureVersion":"v4","uid":"iam-2010-05-08","xmlNamespace":"https://iam.amazonaws.com/doc/2010-05-08/"},"operations":{"AddClientIDToOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","ClientID"],"members":{"OpenIDConnectProviderArn":{},"ClientID":{}}}},"AddRoleToInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName","RoleName"],"members":{"InstanceProfileName":{},"RoleName":{}}}},"AddUserToGroup":{"input":{"type":"structure","required":["GroupName","UserName"],"members":{"GroupName":{},"UserName":{}}}},"AttachGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyArn"],"members":{"GroupName":{},"PolicyArn":{}}}},"AttachRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyArn"],"members":{"RoleName":{},"PolicyArn":{}}}},"AttachUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyArn"],"members":{"UserName":{},"PolicyArn":{}}}},"ChangePassword":{"input":{"type":"structure","required":["OldPassword","NewPassword"],"members":{"OldPassword":{"shape":"Sf"},"NewPassword":{"shape":"Sf"}}}},"CreateAccessKey":{"input":{"type":"structure","members":{"UserName":{}}},"output":{"resultWrapper":"CreateAccessKeyResult","type":"structure","required":["AccessKey"],"members":{"AccessKey":{"type":"structure","required":["UserName","AccessKeyId","Status","SecretAccessKey"],"members":{"UserName":{},"AccessKeyId":{},"Status":{},"SecretAccessKey":{"type":"string","sensitive":true},"CreateDate":{"type":"timestamp"}}}}}},"CreateAccountAlias":{"input":{"type":"structure","required":["AccountAlias"],"members":{"AccountAlias":{}}}},"CreateGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"Path":{},"GroupName":{}}},"output":{"resultWrapper":"CreateGroupResult","type":"structure","required":["Group"],"members":{"Group":{"shape":"Ss"}}}},"CreateInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName"],"members":{"InstanceProfileName":{},"Path":{}}},"output":{"resultWrapper":"CreateInstanceProfileResult","type":"structure","required":["InstanceProfile"],"members":{"InstanceProfile":{"shape":"Sw"}}}},"CreateLoginProfile":{"input":{"type":"structure","required":["UserName","Password"],"members":{"UserName":{},"Password":{"shape":"Sf"},"PasswordResetRequired":{"type":"boolean"}}},"output":{"resultWrapper":"CreateLoginProfileResult","type":"structure","required":["LoginProfile"],"members":{"LoginProfile":{"shape":"S14"}}}},"CreateOpenIDConnectProvider":{"input":{"type":"structure","required":["Url","ThumbprintList"],"members":{"Url":{},"ClientIDList":{"shape":"S17"},"ThumbprintList":{"shape":"S18"}}},"output":{"resultWrapper":"CreateOpenIDConnectProviderResult","type":"structure","members":{"OpenIDConnectProviderArn":{}}}},"CreatePolicy":{"input":{"type":"structure","required":["PolicyName","PolicyDocument"],"members":{"PolicyName":{},"Path":{},"PolicyDocument":{},"Description":{}}},"output":{"resultWrapper":"CreatePolicyResult","type":"structure","members":{"Policy":{"shape":"S1g"}}}},"CreatePolicyVersion":{"input":{"type":"structure","required":["PolicyArn","PolicyDocument"],"members":{"PolicyArn":{},"PolicyDocument":{},"SetAsDefault":{"type":"boolean"}}},"output":{"resultWrapper":"CreatePolicyVersionResult","type":"structure","members":{"PolicyVersion":{"shape":"S1l"}}}},"CreateRole":{"input":{"type":"structure","required":["RoleName","AssumeRolePolicyDocument"],"members":{"Path":{},"RoleName":{},"AssumeRolePolicyDocument":{},"Description":{}}},"output":{"resultWrapper":"CreateRoleResult","type":"structure","required":["Role"],"members":{"Role":{"shape":"Sy"}}}},"CreateSAMLProvider":{"input":{"type":"structure","required":["SAMLMetadataDocument","Name"],"members":{"SAMLMetadataDocument":{},"Name":{}}},"output":{"resultWrapper":"CreateSAMLProviderResult","type":"structure","members":{"SAMLProviderArn":{}}}},"CreateServiceLinkedRole":{"input":{"type":"structure","required":["AWSServiceName"],"members":{"AWSServiceName":{},"Description":{},"CustomSuffix":{}}},"output":{"resultWrapper":"CreateServiceLinkedRoleResult","type":"structure","members":{"Role":{"shape":"Sy"}}}},"CreateServiceSpecificCredential":{"input":{"type":"structure","required":["UserName","ServiceName"],"members":{"UserName":{},"ServiceName":{}}},"output":{"resultWrapper":"CreateServiceSpecificCredentialResult","type":"structure","members":{"ServiceSpecificCredential":{"shape":"S1y"}}}},"CreateUser":{"input":{"type":"structure","required":["UserName"],"members":{"Path":{},"UserName":{}}},"output":{"resultWrapper":"CreateUserResult","type":"structure","members":{"User":{"shape":"S24"}}}},"CreateVirtualMFADevice":{"input":{"type":"structure","required":["VirtualMFADeviceName"],"members":{"Path":{},"VirtualMFADeviceName":{}}},"output":{"resultWrapper":"CreateVirtualMFADeviceResult","type":"structure","required":["VirtualMFADevice"],"members":{"VirtualMFADevice":{"shape":"S28"}}}},"DeactivateMFADevice":{"input":{"type":"structure","required":["UserName","SerialNumber"],"members":{"UserName":{},"SerialNumber":{}}}},"DeleteAccessKey":{"input":{"type":"structure","required":["AccessKeyId"],"members":{"UserName":{},"AccessKeyId":{}}}},"DeleteAccountAlias":{"input":{"type":"structure","required":["AccountAlias"],"members":{"AccountAlias":{}}}},"DeleteAccountPasswordPolicy":{},"DeleteGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{}}}},"DeleteGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyName"],"members":{"GroupName":{},"PolicyName":{}}}},"DeleteInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName"],"members":{"InstanceProfileName":{}}}},"DeleteLoginProfile":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{}}}},"DeleteOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn"],"members":{"OpenIDConnectProviderArn":{}}}},"DeletePolicy":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{}}}},"DeletePolicyVersion":{"input":{"type":"structure","required":["PolicyArn","VersionId"],"members":{"PolicyArn":{},"VersionId":{}}}},"DeleteRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{}}}},"DeleteRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyName"],"members":{"RoleName":{},"PolicyName":{}}}},"DeleteSAMLProvider":{"input":{"type":"structure","required":["SAMLProviderArn"],"members":{"SAMLProviderArn":{}}}},"DeleteSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyId"],"members":{"UserName":{},"SSHPublicKeyId":{}}}},"DeleteServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName"],"members":{"ServerCertificateName":{}}}},"DeleteServiceLinkedRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{}}},"output":{"resultWrapper":"DeleteServiceLinkedRoleResult","type":"structure","required":["DeletionTaskId"],"members":{"DeletionTaskId":{}}}},"DeleteServiceSpecificCredential":{"input":{"type":"structure","required":["ServiceSpecificCredentialId"],"members":{"UserName":{},"ServiceSpecificCredentialId":{}}}},"DeleteSigningCertificate":{"input":{"type":"structure","required":["CertificateId"],"members":{"UserName":{},"CertificateId":{}}}},"DeleteUser":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{}}}},"DeleteUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyName"],"members":{"UserName":{},"PolicyName":{}}}},"DeleteVirtualMFADevice":{"input":{"type":"structure","required":["SerialNumber"],"members":{"SerialNumber":{}}}},"DetachGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyArn"],"members":{"GroupName":{},"PolicyArn":{}}}},"DetachRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyArn"],"members":{"RoleName":{},"PolicyArn":{}}}},"DetachUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyArn"],"members":{"UserName":{},"PolicyArn":{}}}},"EnableMFADevice":{"input":{"type":"structure","required":["UserName","SerialNumber","AuthenticationCode1","AuthenticationCode2"],"members":{"UserName":{},"SerialNumber":{},"AuthenticationCode1":{},"AuthenticationCode2":{}}}},"GenerateCredentialReport":{"output":{"resultWrapper":"GenerateCredentialReportResult","type":"structure","members":{"State":{},"Description":{}}}},"GetAccessKeyLastUsed":{"input":{"type":"structure","required":["AccessKeyId"],"members":{"AccessKeyId":{}}},"output":{"resultWrapper":"GetAccessKeyLastUsedResult","type":"structure","members":{"UserName":{},"AccessKeyLastUsed":{"type":"structure","required":["LastUsedDate","ServiceName","Region"],"members":{"LastUsedDate":{"type":"timestamp"},"ServiceName":{},"Region":{}}}}}},"GetAccountAuthorizationDetails":{"input":{"type":"structure","members":{"Filter":{"type":"list","member":{}},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"GetAccountAuthorizationDetailsResult","type":"structure","members":{"UserDetailList":{"type":"list","member":{"type":"structure","members":{"Path":{},"UserName":{},"UserId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"UserPolicyList":{"shape":"S3l"},"GroupList":{"type":"list","member":{}},"AttachedManagedPolicies":{"shape":"S3o"}}}},"GroupDetailList":{"type":"list","member":{"type":"structure","members":{"Path":{},"GroupName":{},"GroupId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"GroupPolicyList":{"shape":"S3l"},"AttachedManagedPolicies":{"shape":"S3o"}}}},"RoleDetailList":{"type":"list","member":{"type":"structure","members":{"Path":{},"RoleName":{},"RoleId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"AssumeRolePolicyDocument":{},"InstanceProfileList":{"shape":"S3u"},"RolePolicyList":{"shape":"S3l"},"AttachedManagedPolicies":{"shape":"S3o"}}}},"Policies":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyId":{},"Arn":{},"Path":{},"DefaultVersionId":{},"AttachmentCount":{"type":"integer"},"IsAttachable":{"type":"boolean"},"Description":{},"CreateDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"},"PolicyVersionList":{"shape":"S3x"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"GetAccountPasswordPolicy":{"output":{"resultWrapper":"GetAccountPasswordPolicyResult","type":"structure","required":["PasswordPolicy"],"members":{"PasswordPolicy":{"type":"structure","members":{"MinimumPasswordLength":{"type":"integer"},"RequireSymbols":{"type":"boolean"},"RequireNumbers":{"type":"boolean"},"RequireUppercaseCharacters":{"type":"boolean"},"RequireLowercaseCharacters":{"type":"boolean"},"AllowUsersToChangePassword":{"type":"boolean"},"ExpirePasswords":{"type":"boolean"},"MaxPasswordAge":{"type":"integer"},"PasswordReusePrevention":{"type":"integer"},"HardExpiry":{"type":"boolean"}}}}}},"GetAccountSummary":{"output":{"resultWrapper":"GetAccountSummaryResult","type":"structure","members":{"SummaryMap":{"type":"map","key":{},"value":{"type":"integer"}}}}},"GetContextKeysForCustomPolicy":{"input":{"type":"structure","required":["PolicyInputList"],"members":{"PolicyInputList":{"shape":"S49"}}},"output":{"shape":"S4a","resultWrapper":"GetContextKeysForCustomPolicyResult"}},"GetContextKeysForPrincipalPolicy":{"input":{"type":"structure","required":["PolicySourceArn"],"members":{"PolicySourceArn":{},"PolicyInputList":{"shape":"S49"}}},"output":{"shape":"S4a","resultWrapper":"GetContextKeysForPrincipalPolicyResult"}},"GetCredentialReport":{"output":{"resultWrapper":"GetCredentialReportResult","type":"structure","members":{"Content":{"type":"blob"},"ReportFormat":{},"GeneratedTime":{"type":"timestamp"}}}},"GetGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"GetGroupResult","type":"structure","required":["Group","Users"],"members":{"Group":{"shape":"Ss"},"Users":{"shape":"S4j"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"GetGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyName"],"members":{"GroupName":{},"PolicyName":{}}},"output":{"resultWrapper":"GetGroupPolicyResult","type":"structure","required":["GroupName","PolicyName","PolicyDocument"],"members":{"GroupName":{},"PolicyName":{},"PolicyDocument":{}}}},"GetInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName"],"members":{"InstanceProfileName":{}}},"output":{"resultWrapper":"GetInstanceProfileResult","type":"structure","required":["InstanceProfile"],"members":{"InstanceProfile":{"shape":"Sw"}}}},"GetLoginProfile":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{}}},"output":{"resultWrapper":"GetLoginProfileResult","type":"structure","required":["LoginProfile"],"members":{"LoginProfile":{"shape":"S14"}}}},"GetOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn"],"members":{"OpenIDConnectProviderArn":{}}},"output":{"resultWrapper":"GetOpenIDConnectProviderResult","type":"structure","members":{"Url":{},"ClientIDList":{"shape":"S17"},"ThumbprintList":{"shape":"S18"},"CreateDate":{"type":"timestamp"}}}},"GetPolicy":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{}}},"output":{"resultWrapper":"GetPolicyResult","type":"structure","members":{"Policy":{"shape":"S1g"}}}},"GetPolicyVersion":{"input":{"type":"structure","required":["PolicyArn","VersionId"],"members":{"PolicyArn":{},"VersionId":{}}},"output":{"resultWrapper":"GetPolicyVersionResult","type":"structure","members":{"PolicyVersion":{"shape":"S1l"}}}},"GetRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{}}},"output":{"resultWrapper":"GetRoleResult","type":"structure","required":["Role"],"members":{"Role":{"shape":"Sy"}}}},"GetRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyName"],"members":{"RoleName":{},"PolicyName":{}}},"output":{"resultWrapper":"GetRolePolicyResult","type":"structure","required":["RoleName","PolicyName","PolicyDocument"],"members":{"RoleName":{},"PolicyName":{},"PolicyDocument":{}}}},"GetSAMLProvider":{"input":{"type":"structure","required":["SAMLProviderArn"],"members":{"SAMLProviderArn":{}}},"output":{"resultWrapper":"GetSAMLProviderResult","type":"structure","members":{"SAMLMetadataDocument":{},"CreateDate":{"type":"timestamp"},"ValidUntil":{"type":"timestamp"}}}},"GetSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyId","Encoding"],"members":{"UserName":{},"SSHPublicKeyId":{},"Encoding":{}}},"output":{"resultWrapper":"GetSSHPublicKeyResult","type":"structure","members":{"SSHPublicKey":{"shape":"S55"}}}},"GetServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName"],"members":{"ServerCertificateName":{}}},"output":{"resultWrapper":"GetServerCertificateResult","type":"structure","required":["ServerCertificate"],"members":{"ServerCertificate":{"type":"structure","required":["ServerCertificateMetadata","CertificateBody"],"members":{"ServerCertificateMetadata":{"shape":"S5b"},"CertificateBody":{},"CertificateChain":{}}}}}},"GetServiceLinkedRoleDeletionStatus":{"input":{"type":"structure","required":["DeletionTaskId"],"members":{"DeletionTaskId":{}}},"output":{"resultWrapper":"GetServiceLinkedRoleDeletionStatusResult","type":"structure","required":["Status"],"members":{"Status":{},"Reason":{"type":"structure","members":{"Reason":{},"RoleUsageList":{"type":"list","member":{"type":"structure","members":{"Region":{},"Resources":{"type":"list","member":{}}}}}}}}}},"GetUser":{"input":{"type":"structure","members":{"UserName":{}}},"output":{"resultWrapper":"GetUserResult","type":"structure","required":["User"],"members":{"User":{"shape":"S24"}}}},"GetUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyName"],"members":{"UserName":{},"PolicyName":{}}},"output":{"resultWrapper":"GetUserPolicyResult","type":"structure","required":["UserName","PolicyName","PolicyDocument"],"members":{"UserName":{},"PolicyName":{},"PolicyDocument":{}}}},"ListAccessKeys":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAccessKeysResult","type":"structure","required":["AccessKeyMetadata"],"members":{"AccessKeyMetadata":{"type":"list","member":{"type":"structure","members":{"UserName":{},"AccessKeyId":{},"Status":{},"CreateDate":{"type":"timestamp"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAccountAliases":{"input":{"type":"structure","members":{"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAccountAliasesResult","type":"structure","required":["AccountAliases"],"members":{"AccountAliases":{"type":"list","member":{}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAttachedGroupPolicies":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAttachedGroupPoliciesResult","type":"structure","members":{"AttachedPolicies":{"shape":"S3o"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAttachedRolePolicies":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAttachedRolePoliciesResult","type":"structure","members":{"AttachedPolicies":{"shape":"S3o"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListAttachedUserPolicies":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListAttachedUserPoliciesResult","type":"structure","members":{"AttachedPolicies":{"shape":"S3o"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListEntitiesForPolicy":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{},"EntityFilter":{},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListEntitiesForPolicyResult","type":"structure","members":{"PolicyGroups":{"type":"list","member":{"type":"structure","members":{"GroupName":{},"GroupId":{}}}},"PolicyUsers":{"type":"list","member":{"type":"structure","members":{"UserName":{},"UserId":{}}}},"PolicyRoles":{"type":"list","member":{"type":"structure","members":{"RoleName":{},"RoleId":{}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListGroupPolicies":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListGroupPoliciesResult","type":"structure","required":["PolicyNames"],"members":{"PolicyNames":{"shape":"S6e"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListGroups":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListGroupsResult","type":"structure","required":["Groups"],"members":{"Groups":{"shape":"S6i"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListGroupsForUser":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListGroupsForUserResult","type":"structure","required":["Groups"],"members":{"Groups":{"shape":"S6i"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListInstanceProfiles":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListInstanceProfilesResult","type":"structure","required":["InstanceProfiles"],"members":{"InstanceProfiles":{"shape":"S3u"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListInstanceProfilesForRole":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListInstanceProfilesForRoleResult","type":"structure","required":["InstanceProfiles"],"members":{"InstanceProfiles":{"shape":"S3u"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListMFADevices":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListMFADevicesResult","type":"structure","required":["MFADevices"],"members":{"MFADevices":{"type":"list","member":{"type":"structure","required":["UserName","SerialNumber","EnableDate"],"members":{"UserName":{},"SerialNumber":{},"EnableDate":{"type":"timestamp"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListOpenIDConnectProviders":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"ListOpenIDConnectProvidersResult","type":"structure","members":{"OpenIDConnectProviderList":{"type":"list","member":{"type":"structure","members":{"Arn":{}}}}}}},"ListPolicies":{"input":{"type":"structure","members":{"Scope":{},"OnlyAttached":{"type":"boolean"},"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListPoliciesResult","type":"structure","members":{"Policies":{"type":"list","member":{"shape":"S1g"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListPolicyVersions":{"input":{"type":"structure","required":["PolicyArn"],"members":{"PolicyArn":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListPolicyVersionsResult","type":"structure","members":{"Versions":{"shape":"S3x"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListRolePolicies":{"input":{"type":"structure","required":["RoleName"],"members":{"RoleName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListRolePoliciesResult","type":"structure","required":["PolicyNames"],"members":{"PolicyNames":{"shape":"S6e"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListRoles":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListRolesResult","type":"structure","required":["Roles"],"members":{"Roles":{"shape":"Sx"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListSAMLProviders":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"ListSAMLProvidersResult","type":"structure","members":{"SAMLProviderList":{"type":"list","member":{"type":"structure","members":{"Arn":{},"ValidUntil":{"type":"timestamp"},"CreateDate":{"type":"timestamp"}}}}}}},"ListSSHPublicKeys":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListSSHPublicKeysResult","type":"structure","members":{"SSHPublicKeys":{"type":"list","member":{"type":"structure","required":["UserName","SSHPublicKeyId","Status","UploadDate"],"members":{"UserName":{},"SSHPublicKeyId":{},"Status":{},"UploadDate":{"type":"timestamp"}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListServerCertificates":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListServerCertificatesResult","type":"structure","required":["ServerCertificateMetadataList"],"members":{"ServerCertificateMetadataList":{"type":"list","member":{"shape":"S5b"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListServiceSpecificCredentials":{"input":{"type":"structure","members":{"UserName":{},"ServiceName":{}}},"output":{"resultWrapper":"ListServiceSpecificCredentialsResult","type":"structure","members":{"ServiceSpecificCredentials":{"type":"list","member":{"type":"structure","required":["UserName","Status","ServiceUserName","CreateDate","ServiceSpecificCredentialId","ServiceName"],"members":{"UserName":{},"Status":{},"ServiceUserName":{},"CreateDate":{"type":"timestamp"},"ServiceSpecificCredentialId":{},"ServiceName":{}}}}}}},"ListSigningCertificates":{"input":{"type":"structure","members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListSigningCertificatesResult","type":"structure","required":["Certificates"],"members":{"Certificates":{"type":"list","member":{"shape":"S7p"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListUserPolicies":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListUserPoliciesResult","type":"structure","required":["PolicyNames"],"members":{"PolicyNames":{"shape":"S6e"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListUsers":{"input":{"type":"structure","members":{"PathPrefix":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListUsersResult","type":"structure","required":["Users"],"members":{"Users":{"shape":"S4j"},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"ListVirtualMFADevices":{"input":{"type":"structure","members":{"AssignmentStatus":{},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"resultWrapper":"ListVirtualMFADevicesResult","type":"structure","required":["VirtualMFADevices"],"members":{"VirtualMFADevices":{"type":"list","member":{"shape":"S28"}},"IsTruncated":{"type":"boolean"},"Marker":{}}}},"PutGroupPolicy":{"input":{"type":"structure","required":["GroupName","PolicyName","PolicyDocument"],"members":{"GroupName":{},"PolicyName":{},"PolicyDocument":{}}}},"PutRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyName","PolicyDocument"],"members":{"RoleName":{},"PolicyName":{},"PolicyDocument":{}}}},"PutUserPolicy":{"input":{"type":"structure","required":["UserName","PolicyName","PolicyDocument"],"members":{"UserName":{},"PolicyName":{},"PolicyDocument":{}}}},"RemoveClientIDFromOpenIDConnectProvider":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","ClientID"],"members":{"OpenIDConnectProviderArn":{},"ClientID":{}}}},"RemoveRoleFromInstanceProfile":{"input":{"type":"structure","required":["InstanceProfileName","RoleName"],"members":{"InstanceProfileName":{},"RoleName":{}}}},"RemoveUserFromGroup":{"input":{"type":"structure","required":["GroupName","UserName"],"members":{"GroupName":{},"UserName":{}}}},"ResetServiceSpecificCredential":{"input":{"type":"structure","required":["ServiceSpecificCredentialId"],"members":{"UserName":{},"ServiceSpecificCredentialId":{}}},"output":{"resultWrapper":"ResetServiceSpecificCredentialResult","type":"structure","members":{"ServiceSpecificCredential":{"shape":"S1y"}}}},"ResyncMFADevice":{"input":{"type":"structure","required":["UserName","SerialNumber","AuthenticationCode1","AuthenticationCode2"],"members":{"UserName":{},"SerialNumber":{},"AuthenticationCode1":{},"AuthenticationCode2":{}}}},"SetDefaultPolicyVersion":{"input":{"type":"structure","required":["PolicyArn","VersionId"],"members":{"PolicyArn":{},"VersionId":{}}}},"SimulateCustomPolicy":{"input":{"type":"structure","required":["PolicyInputList","ActionNames"],"members":{"PolicyInputList":{"shape":"S49"},"ActionNames":{"shape":"S89"},"ResourceArns":{"shape":"S8b"},"ResourcePolicy":{},"ResourceOwner":{},"CallerArn":{},"ContextEntries":{"shape":"S8d"},"ResourceHandlingOption":{},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"shape":"S8j","resultWrapper":"SimulateCustomPolicyResult"}},"SimulatePrincipalPolicy":{"input":{"type":"structure","required":["PolicySourceArn","ActionNames"],"members":{"PolicySourceArn":{},"PolicyInputList":{"shape":"S49"},"ActionNames":{"shape":"S89"},"ResourceArns":{"shape":"S8b"},"ResourcePolicy":{},"ResourceOwner":{},"CallerArn":{},"ContextEntries":{"shape":"S8d"},"ResourceHandlingOption":{},"MaxItems":{"type":"integer"},"Marker":{}}},"output":{"shape":"S8j","resultWrapper":"SimulatePrincipalPolicyResult"}},"UpdateAccessKey":{"input":{"type":"structure","required":["AccessKeyId","Status"],"members":{"UserName":{},"AccessKeyId":{},"Status":{}}}},"UpdateAccountPasswordPolicy":{"input":{"type":"structure","members":{"MinimumPasswordLength":{"type":"integer"},"RequireSymbols":{"type":"boolean"},"RequireNumbers":{"type":"boolean"},"RequireUppercaseCharacters":{"type":"boolean"},"RequireLowercaseCharacters":{"type":"boolean"},"AllowUsersToChangePassword":{"type":"boolean"},"MaxPasswordAge":{"type":"integer"},"PasswordReusePrevention":{"type":"integer"},"HardExpiry":{"type":"boolean"}}}},"UpdateAssumeRolePolicy":{"input":{"type":"structure","required":["RoleName","PolicyDocument"],"members":{"RoleName":{},"PolicyDocument":{}}}},"UpdateGroup":{"input":{"type":"structure","required":["GroupName"],"members":{"GroupName":{},"NewPath":{},"NewGroupName":{}}}},"UpdateLoginProfile":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"Password":{"shape":"Sf"},"PasswordResetRequired":{"type":"boolean"}}}},"UpdateOpenIDConnectProviderThumbprint":{"input":{"type":"structure","required":["OpenIDConnectProviderArn","ThumbprintList"],"members":{"OpenIDConnectProviderArn":{},"ThumbprintList":{"shape":"S18"}}}},"UpdateRoleDescription":{"input":{"type":"structure","required":["RoleName","Description"],"members":{"RoleName":{},"Description":{}}},"output":{"resultWrapper":"UpdateRoleDescriptionResult","type":"structure","members":{"Role":{"shape":"Sy"}}}},"UpdateSAMLProvider":{"input":{"type":"structure","required":["SAMLMetadataDocument","SAMLProviderArn"],"members":{"SAMLMetadataDocument":{},"SAMLProviderArn":{}}},"output":{"resultWrapper":"UpdateSAMLProviderResult","type":"structure","members":{"SAMLProviderArn":{}}}},"UpdateSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyId","Status"],"members":{"UserName":{},"SSHPublicKeyId":{},"Status":{}}}},"UpdateServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName"],"members":{"ServerCertificateName":{},"NewPath":{},"NewServerCertificateName":{}}}},"UpdateServiceSpecificCredential":{"input":{"type":"structure","required":["ServiceSpecificCredentialId","Status"],"members":{"UserName":{},"ServiceSpecificCredentialId":{},"Status":{}}}},"UpdateSigningCertificate":{"input":{"type":"structure","required":["CertificateId","Status"],"members":{"UserName":{},"CertificateId":{},"Status":{}}}},"UpdateUser":{"input":{"type":"structure","required":["UserName"],"members":{"UserName":{},"NewPath":{},"NewUserName":{}}}},"UploadSSHPublicKey":{"input":{"type":"structure","required":["UserName","SSHPublicKeyBody"],"members":{"UserName":{},"SSHPublicKeyBody":{}}},"output":{"resultWrapper":"UploadSSHPublicKeyResult","type":"structure","members":{"SSHPublicKey":{"shape":"S55"}}}},"UploadServerCertificate":{"input":{"type":"structure","required":["ServerCertificateName","CertificateBody","PrivateKey"],"members":{"Path":{},"ServerCertificateName":{},"CertificateBody":{},"PrivateKey":{"type":"string","sensitive":true},"CertificateChain":{}}},"output":{"resultWrapper":"UploadServerCertificateResult","type":"structure","members":{"ServerCertificateMetadata":{"shape":"S5b"}}}},"UploadSigningCertificate":{"input":{"type":"structure","required":["CertificateBody"],"members":{"UserName":{},"CertificateBody":{}}},"output":{"resultWrapper":"UploadSigningCertificateResult","type":"structure","required":["Certificate"],"members":{"Certificate":{"shape":"S7p"}}}}},"shapes":{"Sf":{"type":"string","sensitive":true},"Ss":{"type":"structure","required":["Path","GroupName","GroupId","Arn","CreateDate"],"members":{"Path":{},"GroupName":{},"GroupId":{},"Arn":{},"CreateDate":{"type":"timestamp"}}},"Sw":{"type":"structure","required":["Path","InstanceProfileName","InstanceProfileId","Arn","CreateDate","Roles"],"members":{"Path":{},"InstanceProfileName":{},"InstanceProfileId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"Roles":{"shape":"Sx"}}},"Sx":{"type":"list","member":{"shape":"Sy"}},"Sy":{"type":"structure","required":["Path","RoleName","RoleId","Arn","CreateDate"],"members":{"Path":{},"RoleName":{},"RoleId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"AssumeRolePolicyDocument":{},"Description":{}}},"S14":{"type":"structure","required":["UserName","CreateDate"],"members":{"UserName":{},"CreateDate":{"type":"timestamp"},"PasswordResetRequired":{"type":"boolean"}}},"S17":{"type":"list","member":{}},"S18":{"type":"list","member":{}},"S1g":{"type":"structure","members":{"PolicyName":{},"PolicyId":{},"Arn":{},"Path":{},"DefaultVersionId":{},"AttachmentCount":{"type":"integer"},"IsAttachable":{"type":"boolean"},"Description":{},"CreateDate":{"type":"timestamp"},"UpdateDate":{"type":"timestamp"}}},"S1l":{"type":"structure","members":{"Document":{},"VersionId":{},"IsDefaultVersion":{"type":"boolean"},"CreateDate":{"type":"timestamp"}}},"S1y":{"type":"structure","required":["CreateDate","ServiceName","ServiceUserName","ServicePassword","ServiceSpecificCredentialId","UserName","Status"],"members":{"CreateDate":{"type":"timestamp"},"ServiceName":{},"ServiceUserName":{},"ServicePassword":{"type":"string","sensitive":true},"ServiceSpecificCredentialId":{},"UserName":{},"Status":{}}},"S24":{"type":"structure","required":["Path","UserName","UserId","Arn","CreateDate"],"members":{"Path":{},"UserName":{},"UserId":{},"Arn":{},"CreateDate":{"type":"timestamp"},"PasswordLastUsed":{"type":"timestamp"}}},"S28":{"type":"structure","required":["SerialNumber"],"members":{"SerialNumber":{},"Base32StringSeed":{"shape":"S2a"},"QRCodePNG":{"shape":"S2a"},"User":{"shape":"S24"},"EnableDate":{"type":"timestamp"}}},"S2a":{"type":"blob","sensitive":true},"S3l":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyDocument":{}}}},"S3o":{"type":"list","member":{"type":"structure","members":{"PolicyName":{},"PolicyArn":{}}}},"S3u":{"type":"list","member":{"shape":"Sw"}},"S3x":{"type":"list","member":{"shape":"S1l"}},"S49":{"type":"list","member":{}},"S4a":{"type":"structure","members":{"ContextKeyNames":{"shape":"S4b"}}},"S4b":{"type":"list","member":{}},"S4j":{"type":"list","member":{"shape":"S24"}},"S55":{"type":"structure","required":["UserName","SSHPublicKeyId","Fingerprint","SSHPublicKeyBody","Status"],"members":{"UserName":{},"SSHPublicKeyId":{},"Fingerprint":{},"SSHPublicKeyBody":{},"Status":{},"UploadDate":{"type":"timestamp"}}},"S5b":{"type":"structure","required":["Path","ServerCertificateName","ServerCertificateId","Arn"],"members":{"Path":{},"ServerCertificateName":{},"ServerCertificateId":{},"Arn":{},"UploadDate":{"type":"timestamp"},"Expiration":{"type":"timestamp"}}},"S6e":{"type":"list","member":{}},"S6i":{"type":"list","member":{"shape":"Ss"}},"S7p":{"type":"structure","required":["UserName","CertificateId","CertificateBody","Status"],"members":{"UserName":{},"CertificateId":{},"CertificateBody":{},"Status":{},"UploadDate":{"type":"timestamp"}}},"S89":{"type":"list","member":{}},"S8b":{"type":"list","member":{}},"S8d":{"type":"list","member":{"type":"structure","members":{"ContextKeyName":{},"ContextKeyValues":{"type":"list","member":{}},"ContextKeyType":{}}}},"S8j":{"type":"structure","members":{"EvaluationResults":{"type":"list","member":{"type":"structure","required":["EvalActionName","EvalDecision"],"members":{"EvalActionName":{},"EvalResourceName":{},"EvalDecision":{},"MatchedStatements":{"shape":"S8n"},"MissingContextValues":{"shape":"S4b"},"OrganizationsDecisionDetail":{"type":"structure","members":{"AllowedByOrganizations":{"type":"boolean"}}},"EvalDecisionDetails":{"shape":"S8v"},"ResourceSpecificResults":{"type":"list","member":{"type":"structure","required":["EvalResourceName","EvalResourceDecision"],"members":{"EvalResourceName":{},"EvalResourceDecision":{},"MatchedStatements":{"shape":"S8n"},"MissingContextValues":{"shape":"S4b"},"EvalDecisionDetails":{"shape":"S8v"}}}}}}},"IsTruncated":{"type":"boolean"},"Marker":{}}},"S8n":{"type":"list","member":{"type":"structure","members":{"SourcePolicyId":{},"SourcePolicyType":{},"StartPosition":{"shape":"S8r"},"EndPosition":{"shape":"S8r"}}}},"S8r":{"type":"structure","members":{"Line":{"type":"integer"},"Column":{"type":"integer"}}},"S8v":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 252 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetAccountAuthorizationDetails":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":["UserDetailList","GroupDetailList","RoleDetailList","Policies"]},"GetGroup":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Users"},"ListAccessKeys":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AccessKeyMetadata"},"ListAccountAliases":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AccountAliases"},"ListAttachedGroupPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AttachedPolicies"},"ListAttachedRolePolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AttachedPolicies"},"ListAttachedUserPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"AttachedPolicies"},"ListEntitiesForPolicy":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":["PolicyGroups","PolicyUsers","PolicyRoles"]},"ListGroupPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"PolicyNames"},"ListGroups":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Groups"},"ListGroupsForUser":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Groups"},"ListInstanceProfiles":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"InstanceProfiles"},"ListInstanceProfilesForRole":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"InstanceProfiles"},"ListMFADevices":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"MFADevices"},"ListPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Policies"},"ListPolicyVersions":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Versions"},"ListRolePolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"PolicyNames"},"ListRoles":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Roles"},"ListSAMLProviders":{"result_key":"SAMLProviderList"},"ListSSHPublicKeys":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"SSHPublicKeys"},"ListServerCertificates":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"ServerCertificateMetadataList"},"ListSigningCertificates":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Certificates"},"ListUserPolicies":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"PolicyNames"},"ListUsers":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"Users"},"ListVirtualMFADevices":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"VirtualMFADevices"},"SimulateCustomPolicy":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"EvaluationResults"},"SimulatePrincipalPolicy":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"Marker","result_key":"EvaluationResults"}}}

/***/ }),
/* 253 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"InstanceProfileExists":{"delay":1,"operation":"GetInstanceProfile","maxAttempts":40,"acceptors":[{"expected":200,"matcher":"status","state":"success"},{"state":"retry","matcher":"status","expected":404}]},"UserExists":{"delay":1,"operation":"GetUser","maxAttempts":20,"acceptors":[{"state":"success","matcher":"status","expected":200},{"state":"retry","matcher":"error","expected":"NoSuchEntity"}]}}}

/***/ }),
/* 254 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"importexport-2010-06-01","apiVersion":"2010-06-01","endpointPrefix":"importexport","globalEndpoint":"importexport.amazonaws.com","serviceFullName":"AWS Import/Export","signatureVersion":"v2","xmlNamespace":"http://importexport.amazonaws.com/doc/2010-06-01/","protocol":"query"},"operations":{"CancelJob":{"http":{"requestUri":"/?Operation=CancelJob"},"input":{"type":"structure","required":["JobId"],"members":{"JobId":{},"APIVersion":{}}},"output":{"resultWrapper":"CancelJobResult","type":"structure","members":{"Success":{"type":"boolean"}}}},"CreateJob":{"http":{"requestUri":"/?Operation=CreateJob"},"input":{"type":"structure","required":["JobType","Manifest","ValidateOnly"],"members":{"JobType":{},"Manifest":{},"ManifestAddendum":{},"ValidateOnly":{"type":"boolean"},"APIVersion":{}}},"output":{"resultWrapper":"CreateJobResult","type":"structure","members":{"JobId":{},"JobType":{},"Signature":{},"SignatureFileContents":{},"WarningMessage":{},"ArtifactList":{"shape":"Sf"}}}},"GetShippingLabel":{"http":{"requestUri":"/?Operation=GetShippingLabel"},"input":{"type":"structure","required":["jobIds"],"members":{"jobIds":{"type":"list","member":{}},"name":{},"company":{},"phoneNumber":{},"country":{},"stateOrProvince":{},"city":{},"postalCode":{},"street1":{},"street2":{},"street3":{},"APIVersion":{}}},"output":{"resultWrapper":"GetShippingLabelResult","type":"structure","members":{"ShippingLabelURL":{},"Warning":{}}}},"GetStatus":{"http":{"requestUri":"/?Operation=GetStatus"},"input":{"type":"structure","required":["JobId"],"members":{"JobId":{},"APIVersion":{}}},"output":{"resultWrapper":"GetStatusResult","type":"structure","members":{"JobId":{},"JobType":{},"LocationCode":{},"LocationMessage":{},"ProgressCode":{},"ProgressMessage":{},"Carrier":{},"TrackingNumber":{},"LogBucket":{},"LogKey":{},"ErrorCount":{"type":"integer"},"Signature":{},"SignatureFileContents":{},"CurrentManifest":{},"CreationDate":{"type":"timestamp"},"ArtifactList":{"shape":"Sf"}}}},"ListJobs":{"http":{"requestUri":"/?Operation=ListJobs"},"input":{"type":"structure","members":{"MaxJobs":{"type":"integer"},"Marker":{},"APIVersion":{}}},"output":{"resultWrapper":"ListJobsResult","type":"structure","members":{"Jobs":{"type":"list","member":{"type":"structure","members":{"JobId":{},"CreationDate":{"type":"timestamp"},"IsCanceled":{"type":"boolean"},"JobType":{}}}},"IsTruncated":{"type":"boolean"}}}},"UpdateJob":{"http":{"requestUri":"/?Operation=UpdateJob"},"input":{"type":"structure","required":["JobId","Manifest","JobType","ValidateOnly"],"members":{"JobId":{},"Manifest":{},"JobType":{},"ValidateOnly":{"type":"boolean"},"APIVersion":{}}},"output":{"resultWrapper":"UpdateJobResult","type":"structure","members":{"Success":{"type":"boolean"},"WarningMessage":{},"ArtifactList":{"shape":"Sf"}}}}},"shapes":{"Sf":{"type":"list","member":{"type":"structure","members":{"Description":{},"URL":{}}}}},"examples":{}}

/***/ }),
/* 255 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListJobs":{"input_token":"Marker","output_token":"Jobs[-1].JobId","more_results":"IsTruncated","limit_key":"MaxJobs","result_key":"Jobs"}}}

/***/ }),
/* 256 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-02-16","endpointPrefix":"inspector","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Inspector","signatureVersion":"v4","targetPrefix":"InspectorService","uid":"inspector-2016-02-16"},"operations":{"AddAttributesToFindings":{"input":{"type":"structure","required":["findingArns","attributes"],"members":{"findingArns":{"shape":"S2"},"attributes":{"shape":"S4"}}},"output":{"type":"structure","required":["failedItems"],"members":{"failedItems":{"shape":"S9"}}}},"CreateAssessmentTarget":{"input":{"type":"structure","required":["assessmentTargetName","resourceGroupArn"],"members":{"assessmentTargetName":{},"resourceGroupArn":{}}},"output":{"type":"structure","required":["assessmentTargetArn"],"members":{"assessmentTargetArn":{}}}},"CreateAssessmentTemplate":{"input":{"type":"structure","required":["assessmentTargetArn","assessmentTemplateName","durationInSeconds","rulesPackageArns"],"members":{"assessmentTargetArn":{},"assessmentTemplateName":{},"durationInSeconds":{"type":"integer"},"rulesPackageArns":{"shape":"Sj"},"userAttributesForFindings":{"shape":"S4"}}},"output":{"type":"structure","required":["assessmentTemplateArn"],"members":{"assessmentTemplateArn":{}}}},"CreateResourceGroup":{"input":{"type":"structure","required":["resourceGroupTags"],"members":{"resourceGroupTags":{"shape":"Sm"}}},"output":{"type":"structure","required":["resourceGroupArn"],"members":{"resourceGroupArn":{}}}},"DeleteAssessmentRun":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{}}}},"DeleteAssessmentTarget":{"input":{"type":"structure","required":["assessmentTargetArn"],"members":{"assessmentTargetArn":{}}}},"DeleteAssessmentTemplate":{"input":{"type":"structure","required":["assessmentTemplateArn"],"members":{"assessmentTemplateArn":{}}}},"DescribeAssessmentRuns":{"input":{"type":"structure","required":["assessmentRunArns"],"members":{"assessmentRunArns":{"shape":"Sv"}}},"output":{"type":"structure","required":["assessmentRuns","failedItems"],"members":{"assessmentRuns":{"type":"list","member":{"type":"structure","required":["arn","name","assessmentTemplateArn","state","durationInSeconds","rulesPackageArns","userAttributesForFindings","createdAt","stateChangedAt","dataCollected","stateChanges","notifications","findingCounts"],"members":{"arn":{},"name":{},"assessmentTemplateArn":{},"state":{},"durationInSeconds":{"type":"integer"},"rulesPackageArns":{"type":"list","member":{}},"userAttributesForFindings":{"shape":"S4"},"createdAt":{"type":"timestamp"},"startedAt":{"type":"timestamp"},"completedAt":{"type":"timestamp"},"stateChangedAt":{"type":"timestamp"},"dataCollected":{"type":"boolean"},"stateChanges":{"type":"list","member":{"type":"structure","required":["stateChangedAt","state"],"members":{"stateChangedAt":{"type":"timestamp"},"state":{}}}},"notifications":{"type":"list","member":{"type":"structure","required":["date","event","error"],"members":{"date":{"type":"timestamp"},"event":{},"message":{},"error":{"type":"boolean"},"snsTopicArn":{},"snsPublishStatusCode":{}}}},"findingCounts":{"type":"map","key":{},"value":{"type":"integer"}}}}},"failedItems":{"shape":"S9"}}}},"DescribeAssessmentTargets":{"input":{"type":"structure","required":["assessmentTargetArns"],"members":{"assessmentTargetArns":{"shape":"Sv"}}},"output":{"type":"structure","required":["assessmentTargets","failedItems"],"members":{"assessmentTargets":{"type":"list","member":{"type":"structure","required":["arn","name","resourceGroupArn","createdAt","updatedAt"],"members":{"arn":{},"name":{},"resourceGroupArn":{},"createdAt":{"type":"timestamp"},"updatedAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeAssessmentTemplates":{"input":{"type":"structure","required":["assessmentTemplateArns"],"members":{"assessmentTemplateArns":{"shape":"Sv"}}},"output":{"type":"structure","required":["assessmentTemplates","failedItems"],"members":{"assessmentTemplates":{"type":"list","member":{"type":"structure","required":["arn","name","assessmentTargetArn","durationInSeconds","rulesPackageArns","userAttributesForFindings","createdAt"],"members":{"arn":{},"name":{},"assessmentTargetArn":{},"durationInSeconds":{"type":"integer"},"rulesPackageArns":{"shape":"Sj"},"userAttributesForFindings":{"shape":"S4"},"createdAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeCrossAccountAccessRole":{"output":{"type":"structure","required":["roleArn","valid","registeredAt"],"members":{"roleArn":{},"valid":{"type":"boolean"},"registeredAt":{"type":"timestamp"}}}},"DescribeFindings":{"input":{"type":"structure","required":["findingArns"],"members":{"findingArns":{"shape":"Sv"},"locale":{}}},"output":{"type":"structure","required":["findings","failedItems"],"members":{"findings":{"type":"list","member":{"type":"structure","required":["arn","attributes","userAttributes","createdAt","updatedAt"],"members":{"arn":{},"schemaVersion":{"type":"integer"},"service":{},"serviceAttributes":{"type":"structure","required":["schemaVersion"],"members":{"schemaVersion":{"type":"integer"},"assessmentRunArn":{},"rulesPackageArn":{}}},"assetType":{},"assetAttributes":{"type":"structure","required":["schemaVersion"],"members":{"schemaVersion":{"type":"integer"},"agentId":{},"autoScalingGroup":{},"amiId":{},"hostname":{},"ipv4Addresses":{"type":"list","member":{}}}},"id":{},"title":{},"description":{},"recommendation":{},"severity":{},"numericSeverity":{"type":"double"},"confidence":{"type":"integer"},"indicatorOfCompromise":{"type":"boolean"},"attributes":{"shape":"S26"},"userAttributes":{"shape":"S4"},"createdAt":{"type":"timestamp"},"updatedAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeResourceGroups":{"input":{"type":"structure","required":["resourceGroupArns"],"members":{"resourceGroupArns":{"shape":"Sv"}}},"output":{"type":"structure","required":["resourceGroups","failedItems"],"members":{"resourceGroups":{"type":"list","member":{"type":"structure","required":["arn","tags","createdAt"],"members":{"arn":{},"tags":{"shape":"Sm"},"createdAt":{"type":"timestamp"}}}},"failedItems":{"shape":"S9"}}}},"DescribeRulesPackages":{"input":{"type":"structure","required":["rulesPackageArns"],"members":{"rulesPackageArns":{"shape":"Sv"},"locale":{}}},"output":{"type":"structure","required":["rulesPackages","failedItems"],"members":{"rulesPackages":{"type":"list","member":{"type":"structure","required":["arn","name","version","provider"],"members":{"arn":{},"name":{},"version":{},"provider":{},"description":{}}}},"failedItems":{"shape":"S9"}}}},"GetAssessmentReport":{"input":{"type":"structure","required":["assessmentRunArn","reportFileFormat","reportType"],"members":{"assessmentRunArn":{},"reportFileFormat":{},"reportType":{}}},"output":{"type":"structure","required":["status"],"members":{"status":{},"url":{}}}},"GetTelemetryMetadata":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{}}},"output":{"type":"structure","required":["telemetryMetadata"],"members":{"telemetryMetadata":{"shape":"S2q"}}}},"ListAssessmentRunAgents":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{},"filter":{"type":"structure","required":["agentHealths","agentHealthCodes"],"members":{"agentHealths":{"type":"list","member":{}},"agentHealthCodes":{"type":"list","member":{}}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentRunAgents"],"members":{"assessmentRunAgents":{"type":"list","member":{"type":"structure","required":["agentId","assessmentRunArn","agentHealth","agentHealthCode","telemetryMetadata"],"members":{"agentId":{},"assessmentRunArn":{},"agentHealth":{},"agentHealthCode":{},"agentHealthDetails":{},"autoScalingGroup":{},"telemetryMetadata":{"shape":"S2q"}}}},"nextToken":{}}}},"ListAssessmentRuns":{"input":{"type":"structure","members":{"assessmentTemplateArns":{"shape":"S36"},"filter":{"type":"structure","members":{"namePattern":{},"states":{"type":"list","member":{}},"durationRange":{"shape":"S3a"},"rulesPackageArns":{"shape":"S3b"},"startTimeRange":{"shape":"S3c"},"completionTimeRange":{"shape":"S3c"},"stateChangeTimeRange":{"shape":"S3c"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentRunArns"],"members":{"assessmentRunArns":{"shape":"S3e"},"nextToken":{}}}},"ListAssessmentTargets":{"input":{"type":"structure","members":{"filter":{"type":"structure","members":{"assessmentTargetNamePattern":{}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentTargetArns"],"members":{"assessmentTargetArns":{"shape":"S3e"},"nextToken":{}}}},"ListAssessmentTemplates":{"input":{"type":"structure","members":{"assessmentTargetArns":{"shape":"S36"},"filter":{"type":"structure","members":{"namePattern":{},"durationRange":{"shape":"S3a"},"rulesPackageArns":{"shape":"S3b"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["assessmentTemplateArns"],"members":{"assessmentTemplateArns":{"shape":"S3e"},"nextToken":{}}}},"ListEventSubscriptions":{"input":{"type":"structure","members":{"resourceArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["subscriptions"],"members":{"subscriptions":{"type":"list","member":{"type":"structure","required":["resourceArn","topicArn","eventSubscriptions"],"members":{"resourceArn":{},"topicArn":{},"eventSubscriptions":{"type":"list","member":{"type":"structure","required":["event","subscribedAt"],"members":{"event":{},"subscribedAt":{"type":"timestamp"}}}}}}},"nextToken":{}}}},"ListFindings":{"input":{"type":"structure","members":{"assessmentRunArns":{"shape":"S36"},"filter":{"type":"structure","members":{"agentIds":{"type":"list","member":{}},"autoScalingGroups":{"type":"list","member":{}},"ruleNames":{"type":"list","member":{}},"severities":{"type":"list","member":{}},"rulesPackageArns":{"shape":"S3b"},"attributes":{"shape":"S26"},"userAttributes":{"shape":"S26"},"creationTimeRange":{"shape":"S3c"}}},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["findingArns"],"members":{"findingArns":{"shape":"S3e"},"nextToken":{}}}},"ListRulesPackages":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["rulesPackageArns"],"members":{"rulesPackageArns":{"shape":"S3e"},"nextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{}}},"output":{"type":"structure","required":["tags"],"members":{"tags":{"shape":"S44"}}}},"PreviewAgents":{"input":{"type":"structure","required":["previewAgentsArn"],"members":{"previewAgentsArn":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","required":["agentPreviews"],"members":{"agentPreviews":{"type":"list","member":{"type":"structure","required":["agentId"],"members":{"agentId":{},"autoScalingGroup":{}}}},"nextToken":{}}}},"RegisterCrossAccountAccessRole":{"input":{"type":"structure","required":["roleArn"],"members":{"roleArn":{}}}},"RemoveAttributesFromFindings":{"input":{"type":"structure","required":["findingArns","attributeKeys"],"members":{"findingArns":{"shape":"S2"},"attributeKeys":{"type":"list","member":{}}}},"output":{"type":"structure","required":["failedItems"],"members":{"failedItems":{"shape":"S9"}}}},"SetTagsForResource":{"input":{"type":"structure","required":["resourceArn"],"members":{"resourceArn":{},"tags":{"shape":"S44"}}}},"StartAssessmentRun":{"input":{"type":"structure","required":["assessmentTemplateArn"],"members":{"assessmentTemplateArn":{},"assessmentRunName":{}}},"output":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{}}}},"StopAssessmentRun":{"input":{"type":"structure","required":["assessmentRunArn"],"members":{"assessmentRunArn":{},"stopAction":{}}}},"SubscribeToEvent":{"input":{"type":"structure","required":["resourceArn","event","topicArn"],"members":{"resourceArn":{},"event":{},"topicArn":{}}}},"UnsubscribeFromEvent":{"input":{"type":"structure","required":["resourceArn","event","topicArn"],"members":{"resourceArn":{},"event":{},"topicArn":{}}}},"UpdateAssessmentTarget":{"input":{"type":"structure","required":["assessmentTargetArn","assessmentTargetName","resourceGroupArn"],"members":{"assessmentTargetArn":{},"assessmentTargetName":{},"resourceGroupArn":{}}}}},"shapes":{"S2":{"type":"list","member":{}},"S4":{"type":"list","member":{"shape":"S5"}},"S5":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}},"S9":{"type":"map","key":{},"value":{"type":"structure","required":["failureCode","retryable"],"members":{"failureCode":{},"retryable":{"type":"boolean"}}}},"Sj":{"type":"list","member":{}},"Sm":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}}},"Sv":{"type":"list","member":{}},"S26":{"type":"list","member":{"shape":"S5"}},"S2q":{"type":"list","member":{"type":"structure","required":["messageType","count"],"members":{"messageType":{},"count":{"type":"long"},"dataSize":{"type":"long"}}}},"S36":{"type":"list","member":{}},"S3a":{"type":"structure","members":{"minSeconds":{"type":"integer"},"maxSeconds":{"type":"integer"}}},"S3b":{"type":"list","member":{}},"S3c":{"type":"structure","members":{"beginDate":{"type":"timestamp"},"endDate":{"type":"timestamp"}}},"S3e":{"type":"list","member":{}},"S44":{"type":"list","member":{"type":"structure","required":["key"],"members":{"key":{},"value":{}}}}}}

/***/ }),
/* 257 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListAssessmentRunAgents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListAssessmentRuns":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListAssessmentTargets":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListAssessmentTemplates":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListEventSubscriptions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListFindings":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListRulesPackages":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"PreviewAgents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"}}}

/***/ }),
/* 258 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-05-28","endpointPrefix":"iot","protocol":"rest-json","serviceFullName":"AWS IoT","signatureVersion":"v4","signingName":"execute-api","uid":"iot-2015-05-28"},"operations":{"AcceptCertificateTransfer":{"http":{"method":"PATCH","requestUri":"/accept-certificate-transfer/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"}}}},"AttachPrincipalPolicy":{"http":{"method":"PUT","requestUri":"/principal-policies/{policyName}"},"input":{"type":"structure","required":["policyName","principal"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"principal":{"location":"header","locationName":"x-amzn-iot-principal"}}}},"AttachThingPrincipal":{"http":{"method":"PUT","requestUri":"/things/{thingName}/principals"},"input":{"type":"structure","required":["thingName","principal"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"principal":{"location":"header","locationName":"x-amzn-principal"}}},"output":{"type":"structure","members":{}}},"CancelCertificateTransfer":{"http":{"method":"PATCH","requestUri":"/cancel-certificate-transfer/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"}}}},"CreateCertificateFromCsr":{"http":{"requestUri":"/certificates"},"input":{"type":"structure","required":["certificateSigningRequest"],"members":{"certificateSigningRequest":{},"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"certificatePem":{}}}},"CreateKeysAndCertificate":{"http":{"requestUri":"/keys-and-certificate"},"input":{"type":"structure","members":{"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"certificatePem":{},"keyPair":{"type":"structure","members":{"PublicKey":{},"PrivateKey":{"type":"string","sensitive":true}}}}}},"CreatePolicy":{"http":{"requestUri":"/policies/{policyName}"},"input":{"type":"structure","required":["policyName","policyDocument"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyDocument":{}}},"output":{"type":"structure","members":{"policyName":{},"policyArn":{},"policyDocument":{},"policyVersionId":{}}}},"CreatePolicyVersion":{"http":{"requestUri":"/policies/{policyName}/version"},"input":{"type":"structure","required":["policyName","policyDocument"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyDocument":{},"setAsDefault":{"location":"querystring","locationName":"setAsDefault","type":"boolean"}}},"output":{"type":"structure","members":{"policyArn":{},"policyDocument":{},"policyVersionId":{},"isDefaultVersion":{"type":"boolean"}}}},"CreateThing":{"http":{"requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"thingTypeName":{},"attributePayload":{"shape":"Sw"}}},"output":{"type":"structure","members":{"thingName":{},"thingArn":{}}}},"CreateThingType":{"http":{"requestUri":"/thing-types/{thingTypeName}"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"},"thingTypeProperties":{"shape":"S14"}}},"output":{"type":"structure","members":{"thingTypeName":{},"thingTypeArn":{}}}},"CreateTopicRule":{"http":{"requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName","topicRulePayload"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"},"topicRulePayload":{"shape":"S1b"}},"payload":"topicRulePayload"}},"DeleteCACertificate":{"http":{"method":"DELETE","requestUri":"/cacertificate/{caCertificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"caCertificateId"}}},"output":{"type":"structure","members":{}}},"DeleteCertificate":{"http":{"method":"DELETE","requestUri":"/certificates/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"}}}},"DeletePolicy":{"http":{"method":"DELETE","requestUri":"/policies/{policyName}"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"uri","locationName":"policyName"}}}},"DeletePolicyVersion":{"http":{"method":"DELETE","requestUri":"/policies/{policyName}/version/{policyVersionId}"},"input":{"type":"structure","required":["policyName","policyVersionId"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyVersionId":{"location":"uri","locationName":"policyVersionId"}}}},"DeleteRegistrationCode":{"http":{"method":"DELETE","requestUri":"/registrationcode"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"DeleteThing":{"http":{"method":"DELETE","requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"expectedVersion":{"location":"querystring","locationName":"expectedVersion","type":"long"}}},"output":{"type":"structure","members":{}}},"DeleteThingType":{"http":{"method":"DELETE","requestUri":"/thing-types/{thingTypeName}"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"}}},"output":{"type":"structure","members":{}}},"DeleteTopicRule":{"http":{"method":"DELETE","requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}}},"DeprecateThingType":{"http":{"requestUri":"/thing-types/{thingTypeName}/deprecate"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"},"undoDeprecate":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"DescribeCACertificate":{"http":{"method":"GET","requestUri":"/cacertificate/{caCertificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"caCertificateId"}}},"output":{"type":"structure","members":{"certificateDescription":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"status":{},"certificatePem":{},"ownedBy":{},"creationDate":{"type":"timestamp"},"autoRegistrationStatus":{}}}}}},"DescribeCertificate":{"http":{"method":"GET","requestUri":"/certificates/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"}}},"output":{"type":"structure","members":{"certificateDescription":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"caCertificateId":{},"status":{},"certificatePem":{},"ownedBy":{},"previousOwnedBy":{},"creationDate":{"type":"timestamp"},"lastModifiedDate":{"type":"timestamp"},"transferData":{"type":"structure","members":{"transferMessage":{},"rejectReason":{},"transferDate":{"type":"timestamp"},"acceptDate":{"type":"timestamp"},"rejectDate":{"type":"timestamp"}}}}}}}},"DescribeEndpoint":{"http":{"method":"GET","requestUri":"/endpoint"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"endpointAddress":{}}}},"DescribeThing":{"http":{"method":"GET","requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"}}},"output":{"type":"structure","members":{"defaultClientId":{},"thingName":{},"thingTypeName":{},"attributes":{"shape":"Sx"},"version":{"type":"long"}}}},"DescribeThingType":{"http":{"method":"GET","requestUri":"/thing-types/{thingTypeName}"},"input":{"type":"structure","required":["thingTypeName"],"members":{"thingTypeName":{"location":"uri","locationName":"thingTypeName"}}},"output":{"type":"structure","members":{"thingTypeName":{},"thingTypeProperties":{"shape":"S14"},"thingTypeMetadata":{"shape":"S3x"}}}},"DetachPrincipalPolicy":{"http":{"method":"DELETE","requestUri":"/principal-policies/{policyName}"},"input":{"type":"structure","required":["policyName","principal"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"principal":{"location":"header","locationName":"x-amzn-iot-principal"}}}},"DetachThingPrincipal":{"http":{"method":"DELETE","requestUri":"/things/{thingName}/principals"},"input":{"type":"structure","required":["thingName","principal"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"principal":{"location":"header","locationName":"x-amzn-principal"}}},"output":{"type":"structure","members":{}}},"DisableTopicRule":{"http":{"requestUri":"/rules/{ruleName}/disable"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}}},"EnableTopicRule":{"http":{"requestUri":"/rules/{ruleName}/enable"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}}},"GetLoggingOptions":{"http":{"method":"GET","requestUri":"/loggingOptions"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"roleArn":{},"logLevel":{}}}},"GetPolicy":{"http":{"method":"GET","requestUri":"/policies/{policyName}"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"uri","locationName":"policyName"}}},"output":{"type":"structure","members":{"policyName":{},"policyArn":{},"policyDocument":{},"defaultVersionId":{}}}},"GetPolicyVersion":{"http":{"method":"GET","requestUri":"/policies/{policyName}/version/{policyVersionId}"},"input":{"type":"structure","required":["policyName","policyVersionId"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyVersionId":{"location":"uri","locationName":"policyVersionId"}}},"output":{"type":"structure","members":{"policyArn":{},"policyName":{},"policyDocument":{},"policyVersionId":{},"isDefaultVersion":{"type":"boolean"}}}},"GetRegistrationCode":{"http":{"method":"GET","requestUri":"/registrationcode"},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"registrationCode":{}}}},"GetTopicRule":{"http":{"method":"GET","requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"}}},"output":{"type":"structure","members":{"ruleArn":{},"rule":{"type":"structure","members":{"ruleName":{},"sql":{},"description":{},"createdAt":{"type":"timestamp"},"actions":{"shape":"S1e"},"ruleDisabled":{"type":"boolean"},"awsIotSqlVersion":{}}}}}},"ListCACertificates":{"http":{"method":"GET","requestUri":"/cacertificates"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"certificates":{"type":"list","member":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"status":{},"creationDate":{"type":"timestamp"}}}},"nextMarker":{}}}},"ListCertificates":{"http":{"method":"GET","requestUri":"/certificates"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"certificates":{"shape":"S4u"},"nextMarker":{}}}},"ListCertificatesByCA":{"http":{"method":"GET","requestUri":"/certificates-by-ca/{caCertificateId}"},"input":{"type":"structure","required":["caCertificateId"],"members":{"caCertificateId":{"location":"uri","locationName":"caCertificateId"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"certificates":{"shape":"S4u"},"nextMarker":{}}}},"ListOutgoingCertificates":{"http":{"method":"GET","requestUri":"/certificates-out-going"},"input":{"type":"structure","members":{"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"marker":{"location":"querystring","locationName":"marker"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"outgoingCertificates":{"type":"list","member":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"transferredTo":{},"transferDate":{"type":"timestamp"},"transferMessage":{},"creationDate":{"type":"timestamp"}}}},"nextMarker":{}}}},"ListPolicies":{"http":{"method":"GET","requestUri":"/policies"},"input":{"type":"structure","members":{"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"policies":{"shape":"S54"},"nextMarker":{}}}},"ListPolicyPrincipals":{"http":{"method":"GET","requestUri":"/policy-principals"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"header","locationName":"x-amzn-iot-policy"},"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"principals":{"shape":"S58"},"nextMarker":{}}}},"ListPolicyVersions":{"http":{"method":"GET","requestUri":"/policies/{policyName}/version"},"input":{"type":"structure","required":["policyName"],"members":{"policyName":{"location":"uri","locationName":"policyName"}}},"output":{"type":"structure","members":{"policyVersions":{"type":"list","member":{"type":"structure","members":{"versionId":{},"isDefaultVersion":{"type":"boolean"},"createDate":{"type":"timestamp"}}}}}}},"ListPrincipalPolicies":{"http":{"method":"GET","requestUri":"/principal-policies"},"input":{"type":"structure","required":["principal"],"members":{"principal":{"location":"header","locationName":"x-amzn-iot-principal"},"marker":{"location":"querystring","locationName":"marker"},"pageSize":{"location":"querystring","locationName":"pageSize","type":"integer"},"ascendingOrder":{"location":"querystring","locationName":"isAscendingOrder","type":"boolean"}}},"output":{"type":"structure","members":{"policies":{"shape":"S54"},"nextMarker":{}}}},"ListPrincipalThings":{"http":{"method":"GET","requestUri":"/principals/things"},"input":{"type":"structure","required":["principal"],"members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"principal":{"location":"header","locationName":"x-amzn-principal"}}},"output":{"type":"structure","members":{"things":{"type":"list","member":{}},"nextToken":{}}}},"ListThingPrincipals":{"http":{"method":"GET","requestUri":"/things/{thingName}/principals"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"}}},"output":{"type":"structure","members":{"principals":{"shape":"S58"}}}},"ListThingTypes":{"http":{"method":"GET","requestUri":"/thing-types"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"thingTypeName":{"location":"querystring","locationName":"thingTypeName"}}},"output":{"type":"structure","members":{"thingTypes":{"type":"list","member":{"type":"structure","members":{"thingTypeName":{},"thingTypeProperties":{"shape":"S14"},"thingTypeMetadata":{"shape":"S3x"}}}},"nextToken":{}}}},"ListThings":{"http":{"method":"GET","requestUri":"/things"},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"attributeName":{"location":"querystring","locationName":"attributeName"},"attributeValue":{"location":"querystring","locationName":"attributeValue"},"thingTypeName":{"location":"querystring","locationName":"thingTypeName"}}},"output":{"type":"structure","members":{"things":{"type":"list","member":{"type":"structure","members":{"thingName":{},"thingTypeName":{},"attributes":{"shape":"Sx"},"version":{"type":"long"}}}},"nextToken":{}}}},"ListTopicRules":{"http":{"method":"GET","requestUri":"/rules"},"input":{"type":"structure","members":{"topic":{"location":"querystring","locationName":"topic"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"},"ruleDisabled":{"location":"querystring","locationName":"ruleDisabled","type":"boolean"}}},"output":{"type":"structure","members":{"rules":{"type":"list","member":{"type":"structure","members":{"ruleArn":{},"ruleName":{},"topicPattern":{},"createdAt":{"type":"timestamp"},"ruleDisabled":{"type":"boolean"}}}},"nextToken":{}}}},"RegisterCACertificate":{"http":{"requestUri":"/cacertificate"},"input":{"type":"structure","required":["caCertificate","verificationCertificate"],"members":{"caCertificate":{},"verificationCertificate":{},"setAsActive":{"location":"querystring","locationName":"setAsActive","type":"boolean"},"allowAutoRegistration":{"location":"querystring","locationName":"allowAutoRegistration","type":"boolean"}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{}}}},"RegisterCertificate":{"http":{"requestUri":"/certificate/register"},"input":{"type":"structure","required":["certificatePem"],"members":{"certificatePem":{},"caCertificatePem":{},"setAsActive":{"deprecated":true,"location":"querystring","locationName":"setAsActive","type":"boolean"},"status":{}}},"output":{"type":"structure","members":{"certificateArn":{},"certificateId":{}}}},"RejectCertificateTransfer":{"http":{"method":"PATCH","requestUri":"/reject-certificate-transfer/{certificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"rejectReason":{}}}},"ReplaceTopicRule":{"http":{"method":"PATCH","requestUri":"/rules/{ruleName}"},"input":{"type":"structure","required":["ruleName","topicRulePayload"],"members":{"ruleName":{"location":"uri","locationName":"ruleName"},"topicRulePayload":{"shape":"S1b"}},"payload":"topicRulePayload"}},"SetDefaultPolicyVersion":{"http":{"method":"PATCH","requestUri":"/policies/{policyName}/version/{policyVersionId}"},"input":{"type":"structure","required":["policyName","policyVersionId"],"members":{"policyName":{"location":"uri","locationName":"policyName"},"policyVersionId":{"location":"uri","locationName":"policyVersionId"}}}},"SetLoggingOptions":{"http":{"requestUri":"/loggingOptions"},"input":{"type":"structure","required":["loggingOptionsPayload"],"members":{"loggingOptionsPayload":{"type":"structure","required":["roleArn"],"members":{"roleArn":{},"logLevel":{}}}},"payload":"loggingOptionsPayload"}},"TransferCertificate":{"http":{"method":"PATCH","requestUri":"/transfer-certificate/{certificateId}"},"input":{"type":"structure","required":["certificateId","targetAwsAccount"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"targetAwsAccount":{"location":"querystring","locationName":"targetAwsAccount"},"transferMessage":{}}},"output":{"type":"structure","members":{"transferredCertificateArn":{}}}},"UpdateCACertificate":{"http":{"method":"PUT","requestUri":"/cacertificate/{caCertificateId}"},"input":{"type":"structure","required":["certificateId"],"members":{"certificateId":{"location":"uri","locationName":"caCertificateId"},"newStatus":{"location":"querystring","locationName":"newStatus"},"newAutoRegistrationStatus":{"location":"querystring","locationName":"newAutoRegistrationStatus"}}}},"UpdateCertificate":{"http":{"method":"PUT","requestUri":"/certificates/{certificateId}"},"input":{"type":"structure","required":["certificateId","newStatus"],"members":{"certificateId":{"location":"uri","locationName":"certificateId"},"newStatus":{"location":"querystring","locationName":"newStatus"}}}},"UpdateThing":{"http":{"method":"PATCH","requestUri":"/things/{thingName}"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"thingTypeName":{},"attributePayload":{"shape":"Sw"},"expectedVersion":{"type":"long"},"removeThingType":{"type":"boolean"}}},"output":{"type":"structure","members":{}}}},"shapes":{"Sw":{"type":"structure","members":{"attributes":{"shape":"Sx"},"merge":{"type":"boolean"}}},"Sx":{"type":"map","key":{},"value":{}},"S14":{"type":"structure","members":{"thingTypeDescription":{},"searchableAttributes":{"type":"list","member":{}}}},"S1b":{"type":"structure","required":["sql","actions"],"members":{"sql":{},"description":{},"actions":{"shape":"S1e"},"ruleDisabled":{"type":"boolean"},"awsIotSqlVersion":{}}},"S1e":{"type":"list","member":{"type":"structure","members":{"dynamoDB":{"type":"structure","required":["tableName","roleArn","hashKeyField","hashKeyValue"],"members":{"tableName":{},"roleArn":{},"operation":{},"hashKeyField":{},"hashKeyValue":{},"hashKeyType":{},"rangeKeyField":{},"rangeKeyValue":{},"rangeKeyType":{},"payloadField":{}}},"dynamoDBv2":{"type":"structure","members":{"roleArn":{},"putItem":{"type":"structure","required":["tableName"],"members":{"tableName":{}}}}},"lambda":{"type":"structure","required":["functionArn"],"members":{"functionArn":{}}},"sns":{"type":"structure","required":["targetArn","roleArn"],"members":{"targetArn":{},"roleArn":{},"messageFormat":{}}},"sqs":{"type":"structure","required":["roleArn","queueUrl"],"members":{"roleArn":{},"queueUrl":{},"useBase64":{"type":"boolean"}}},"kinesis":{"type":"structure","required":["roleArn","streamName"],"members":{"roleArn":{},"streamName":{},"partitionKey":{}}},"republish":{"type":"structure","required":["roleArn","topic"],"members":{"roleArn":{},"topic":{}}},"s3":{"type":"structure","required":["roleArn","bucketName","key"],"members":{"roleArn":{},"bucketName":{},"key":{},"cannedAcl":{}}},"firehose":{"type":"structure","required":["roleArn","deliveryStreamName"],"members":{"roleArn":{},"deliveryStreamName":{},"separator":{}}},"cloudwatchMetric":{"type":"structure","required":["roleArn","metricNamespace","metricName","metricValue","metricUnit"],"members":{"roleArn":{},"metricNamespace":{},"metricName":{},"metricValue":{},"metricUnit":{},"metricTimestamp":{}}},"cloudwatchAlarm":{"type":"structure","required":["roleArn","alarmName","stateReason","stateValue"],"members":{"roleArn":{},"alarmName":{},"stateReason":{},"stateValue":{}}},"elasticsearch":{"type":"structure","required":["roleArn","endpoint","index","type","id"],"members":{"roleArn":{},"endpoint":{},"index":{},"type":{},"id":{}}},"salesforce":{"type":"structure","required":["token","url"],"members":{"token":{},"url":{}}}}}},"S3x":{"type":"structure","members":{"deprecated":{"type":"boolean"},"deprecationDate":{"type":"timestamp"},"creationDate":{"type":"timestamp"}}},"S4u":{"type":"list","member":{"type":"structure","members":{"certificateArn":{},"certificateId":{},"status":{},"creationDate":{"type":"timestamp"}}}},"S54":{"type":"list","member":{"type":"structure","members":{"policyName":{},"policyArn":{}}}},"S58":{"type":"list","member":{}}}}

/***/ }),
/* 259 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 260 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"iot-data-2015-05-28","apiVersion":"2015-05-28","endpointPrefix":"data.iot","protocol":"rest-json","serviceFullName":"AWS IoT Data Plane","signatureVersion":"v4","signingName":"iotdata"},"operations":{"DeleteThingShadow":{"http":{"method":"DELETE","requestUri":"/things/{thingName}/shadow"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"}}},"output":{"type":"structure","required":["payload"],"members":{"payload":{"type":"blob"}},"payload":"payload"}},"GetThingShadow":{"http":{"method":"GET","requestUri":"/things/{thingName}/shadow"},"input":{"type":"structure","required":["thingName"],"members":{"thingName":{"location":"uri","locationName":"thingName"}}},"output":{"type":"structure","members":{"payload":{"type":"blob"}},"payload":"payload"}},"Publish":{"http":{"requestUri":"/topics/{topic}"},"input":{"type":"structure","required":["topic"],"members":{"topic":{"location":"uri","locationName":"topic"},"qos":{"location":"querystring","locationName":"qos","type":"integer"},"payload":{"type":"blob"}},"payload":"payload"}},"UpdateThingShadow":{"http":{"requestUri":"/things/{thingName}/shadow"},"input":{"type":"structure","required":["thingName","payload"],"members":{"thingName":{"location":"uri","locationName":"thingName"},"payload":{"type":"blob"}},"payload":"payload"},"output":{"type":"structure","members":{"payload":{"type":"blob"}},"payload":"payload"}}},"shapes":{}}

/***/ }),
/* 261 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-12-02","endpointPrefix":"kinesis","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Kinesis","serviceFullName":"Amazon Kinesis","signatureVersion":"v4","targetPrefix":"Kinesis_20131202","uid":"kinesis-2013-12-02"},"operations":{"AddTagsToStream":{"input":{"type":"structure","required":["StreamName","Tags"],"members":{"StreamName":{},"Tags":{"type":"map","key":{},"value":{}}}}},"CreateStream":{"input":{"type":"structure","required":["StreamName","ShardCount"],"members":{"StreamName":{},"ShardCount":{"type":"integer"}}}},"DecreaseStreamRetentionPeriod":{"input":{"type":"structure","required":["StreamName","RetentionPeriodHours"],"members":{"StreamName":{},"RetentionPeriodHours":{"type":"integer"}}}},"DeleteStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{}}}},"DescribeLimits":{"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["ShardLimit","OpenShardCount"],"members":{"ShardLimit":{"type":"integer"},"OpenShardCount":{"type":"integer"}}}},"DescribeStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{},"Limit":{"type":"integer"},"ExclusiveStartShardId":{}}},"output":{"type":"structure","required":["StreamDescription"],"members":{"StreamDescription":{"type":"structure","required":["StreamName","StreamARN","StreamStatus","Shards","HasMoreShards","RetentionPeriodHours","StreamCreationTimestamp","EnhancedMonitoring"],"members":{"StreamName":{},"StreamARN":{},"StreamStatus":{},"Shards":{"type":"list","member":{"type":"structure","required":["ShardId","HashKeyRange","SequenceNumberRange"],"members":{"ShardId":{},"ParentShardId":{},"AdjacentParentShardId":{},"HashKeyRange":{"type":"structure","required":["StartingHashKey","EndingHashKey"],"members":{"StartingHashKey":{},"EndingHashKey":{}}},"SequenceNumberRange":{"type":"structure","required":["StartingSequenceNumber"],"members":{"StartingSequenceNumber":{},"EndingSequenceNumber":{}}}}}},"HasMoreShards":{"type":"boolean"},"RetentionPeriodHours":{"type":"integer"},"StreamCreationTimestamp":{"type":"timestamp"},"EnhancedMonitoring":{"type":"list","member":{"type":"structure","members":{"ShardLevelMetrics":{"shape":"Su"}}}},"EncryptionType":{},"KeyId":{}}}}}},"DisableEnhancedMonitoring":{"input":{"type":"structure","required":["StreamName","ShardLevelMetrics"],"members":{"StreamName":{},"ShardLevelMetrics":{"shape":"Su"}}},"output":{"shape":"Sz"}},"EnableEnhancedMonitoring":{"input":{"type":"structure","required":["StreamName","ShardLevelMetrics"],"members":{"StreamName":{},"ShardLevelMetrics":{"shape":"Su"}}},"output":{"shape":"Sz"}},"GetRecords":{"input":{"type":"structure","required":["ShardIterator"],"members":{"ShardIterator":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Records"],"members":{"Records":{"type":"list","member":{"type":"structure","required":["SequenceNumber","Data","PartitionKey"],"members":{"SequenceNumber":{},"ApproximateArrivalTimestamp":{"type":"timestamp"},"Data":{"type":"blob"},"PartitionKey":{},"EncryptionType":{}}}},"NextShardIterator":{},"MillisBehindLatest":{"type":"long"}}}},"GetShardIterator":{"input":{"type":"structure","required":["StreamName","ShardId","ShardIteratorType"],"members":{"StreamName":{},"ShardId":{},"ShardIteratorType":{},"StartingSequenceNumber":{},"Timestamp":{"type":"timestamp"}}},"output":{"type":"structure","members":{"ShardIterator":{}}}},"IncreaseStreamRetentionPeriod":{"input":{"type":"structure","required":["StreamName","RetentionPeriodHours"],"members":{"StreamName":{},"RetentionPeriodHours":{"type":"integer"}}}},"ListStreams":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"ExclusiveStartStreamName":{}}},"output":{"type":"structure","required":["StreamNames","HasMoreStreams"],"members":{"StreamNames":{"type":"list","member":{}},"HasMoreStreams":{"type":"boolean"}}}},"ListTagsForStream":{"input":{"type":"structure","required":["StreamName"],"members":{"StreamName":{},"ExclusiveStartTagKey":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","required":["Tags","HasMoreTags"],"members":{"Tags":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"HasMoreTags":{"type":"boolean"}}}},"MergeShards":{"input":{"type":"structure","required":["StreamName","ShardToMerge","AdjacentShardToMerge"],"members":{"StreamName":{},"ShardToMerge":{},"AdjacentShardToMerge":{}}}},"PutRecord":{"input":{"type":"structure","required":["StreamName","Data","PartitionKey"],"members":{"StreamName":{},"Data":{"type":"blob"},"PartitionKey":{},"ExplicitHashKey":{},"SequenceNumberForOrdering":{}}},"output":{"type":"structure","required":["ShardId","SequenceNumber"],"members":{"ShardId":{},"SequenceNumber":{},"EncryptionType":{}}}},"PutRecords":{"input":{"type":"structure","required":["Records","StreamName"],"members":{"Records":{"type":"list","member":{"type":"structure","required":["Data","PartitionKey"],"members":{"Data":{"type":"blob"},"ExplicitHashKey":{},"PartitionKey":{}}}},"StreamName":{}}},"output":{"type":"structure","required":["Records"],"members":{"FailedRecordCount":{"type":"integer"},"Records":{"type":"list","member":{"type":"structure","members":{"SequenceNumber":{},"ShardId":{},"ErrorCode":{},"ErrorMessage":{}}}},"EncryptionType":{}}}},"RemoveTagsFromStream":{"input":{"type":"structure","required":["StreamName","TagKeys"],"members":{"StreamName":{},"TagKeys":{"type":"list","member":{}}}}},"SplitShard":{"input":{"type":"structure","required":["StreamName","ShardToSplit","NewStartingHashKey"],"members":{"StreamName":{},"ShardToSplit":{},"NewStartingHashKey":{}}}},"StartStreamEncryption":{"input":{"type":"structure","required":["StreamName","EncryptionType","KeyId"],"members":{"StreamName":{},"EncryptionType":{},"KeyId":{}}}},"StopStreamEncryption":{"input":{"type":"structure","required":["StreamName","EncryptionType","KeyId"],"members":{"StreamName":{},"EncryptionType":{},"KeyId":{}}}},"UpdateShardCount":{"input":{"type":"structure","required":["StreamName","TargetShardCount","ScalingType"],"members":{"StreamName":{},"TargetShardCount":{"type":"integer"},"ScalingType":{}}},"output":{"type":"structure","members":{"StreamName":{},"CurrentShardCount":{"type":"integer"},"TargetShardCount":{"type":"integer"}}}}},"shapes":{"Su":{"type":"list","member":{}},"Sz":{"type":"structure","members":{"StreamName":{},"CurrentShardLevelMetrics":{"shape":"Su"},"DesiredShardLevelMetrics":{"shape":"Su"}}}}}

/***/ }),
/* 262 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeStream":{"input_token":"ExclusiveStartShardId","limit_key":"Limit","more_results":"StreamDescription.HasMoreShards","output_token":"StreamDescription.Shards[-1].ShardId","result_key":"StreamDescription.Shards"},"ListStreams":{"input_token":"ExclusiveStartStreamName","limit_key":"Limit","more_results":"HasMoreStreams","output_token":"StreamNames[-1]","result_key":"StreamNames"}}}

/***/ }),
/* 263 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"StreamExists":{"delay":10,"operation":"DescribeStream","maxAttempts":18,"acceptors":[{"expected":"ACTIVE","matcher":"path","state":"success","argument":"StreamDescription.StreamStatus"}]},"StreamNotExists":{"delay":10,"operation":"DescribeStream","maxAttempts":18,"acceptors":[{"expected":"ResourceNotFoundException","matcher":"error","state":"success"}]}}}

/***/ }),
/* 264 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-08-14","endpointPrefix":"kinesisanalytics","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Kinesis Analytics","serviceFullName":"Amazon Kinesis Analytics","signatureVersion":"v4","targetPrefix":"KinesisAnalytics_20150814","timestampFormat":"unixTimestamp","uid":"kinesisanalytics-2015-08-14"},"operations":{"AddApplicationCloudWatchLoggingOption":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","CloudWatchLoggingOption"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"CloudWatchLoggingOption":{"shape":"S4"}}},"output":{"type":"structure","members":{}}},"AddApplicationInput":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","Input"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"Input":{"shape":"S9"}}},"output":{"type":"structure","members":{}}},"AddApplicationInputProcessingConfiguration":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","InputId","InputProcessingConfiguration"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"InputId":{},"InputProcessingConfiguration":{"shape":"Sb"}}},"output":{"type":"structure","members":{}}},"AddApplicationOutput":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","Output"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"Output":{"shape":"S12"}}},"output":{"type":"structure","members":{}}},"AddApplicationReferenceDataSource":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","ReferenceDataSource"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"ReferenceDataSource":{"type":"structure","required":["TableName","ReferenceSchema"],"members":{"TableName":{},"S3ReferenceDataSource":{"type":"structure","required":["BucketARN","FileKey","ReferenceRoleARN"],"members":{"BucketARN":{},"FileKey":{},"ReferenceRoleARN":{}}},"ReferenceSchema":{"shape":"Si"}}}}},"output":{"type":"structure","members":{}}},"CreateApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{},"ApplicationDescription":{},"Inputs":{"type":"list","member":{"shape":"S9"}},"Outputs":{"type":"list","member":{"shape":"S12"}},"CloudWatchLoggingOptions":{"type":"list","member":{"shape":"S4"}},"ApplicationCode":{}}},"output":{"type":"structure","required":["ApplicationSummary"],"members":{"ApplicationSummary":{"shape":"S1l"}}}},"DeleteApplication":{"input":{"type":"structure","required":["ApplicationName","CreateTimestamp"],"members":{"ApplicationName":{},"CreateTimestamp":{"type":"timestamp"}}},"output":{"type":"structure","members":{}}},"DeleteApplicationCloudWatchLoggingOption":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","CloudWatchLoggingOptionId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"CloudWatchLoggingOptionId":{}}},"output":{"type":"structure","members":{}}},"DeleteApplicationInputProcessingConfiguration":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","InputId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"InputId":{}}},"output":{"type":"structure","members":{}}},"DeleteApplicationOutput":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","OutputId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"OutputId":{}}},"output":{"type":"structure","members":{}}},"DeleteApplicationReferenceDataSource":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","ReferenceId"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"ReferenceId":{}}},"output":{"type":"structure","members":{}}},"DescribeApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{}}},"output":{"type":"structure","required":["ApplicationDetail"],"members":{"ApplicationDetail":{"type":"structure","required":["ApplicationName","ApplicationARN","ApplicationStatus","ApplicationVersionId"],"members":{"ApplicationName":{},"ApplicationDescription":{},"ApplicationARN":{},"ApplicationStatus":{},"CreateTimestamp":{"type":"timestamp"},"LastUpdateTimestamp":{"type":"timestamp"},"InputDescriptions":{"type":"list","member":{"type":"structure","members":{"InputId":{},"NamePrefix":{},"InAppStreamNames":{"type":"list","member":{}},"InputProcessingConfigurationDescription":{"type":"structure","members":{"InputLambdaProcessorDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}}}},"KinesisStreamsInputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseInputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"InputSchema":{"shape":"Si"},"InputParallelism":{"shape":"Sg"},"InputStartingPositionConfiguration":{"shape":"S28"}}}},"OutputDescriptions":{"type":"list","member":{"type":"structure","members":{"OutputId":{},"Name":{},"KinesisStreamsOutputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseOutputDescription":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{}}},"DestinationSchema":{"shape":"S15"}}}},"ReferenceDataSourceDescriptions":{"type":"list","member":{"type":"structure","required":["ReferenceId","TableName","S3ReferenceDataSourceDescription"],"members":{"ReferenceId":{},"TableName":{},"S3ReferenceDataSourceDescription":{"type":"structure","required":["BucketARN","FileKey","ReferenceRoleARN"],"members":{"BucketARN":{},"FileKey":{},"ReferenceRoleARN":{}}},"ReferenceSchema":{"shape":"Si"}}}},"CloudWatchLoggingOptionDescriptions":{"type":"list","member":{"type":"structure","required":["LogStreamARN","RoleARN"],"members":{"CloudWatchLoggingOptionId":{},"LogStreamARN":{},"RoleARN":{}}}},"ApplicationCode":{},"ApplicationVersionId":{"type":"long"}}}}}},"DiscoverInputSchema":{"input":{"type":"structure","members":{"ResourceARN":{},"RoleARN":{},"InputStartingPositionConfiguration":{"shape":"S28"},"S3Configuration":{"type":"structure","required":["RoleARN","BucketARN","FileKey"],"members":{"RoleARN":{},"BucketARN":{},"FileKey":{}}},"InputProcessingConfiguration":{"shape":"Sb"}}},"output":{"type":"structure","members":{"InputSchema":{"shape":"Si"},"ParsedInputRecords":{"type":"list","member":{"type":"list","member":{}}},"ProcessedInputRecords":{"type":"list","member":{}},"RawInputRecords":{"type":"list","member":{}}}}},"ListApplications":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"ExclusiveStartApplicationName":{}}},"output":{"type":"structure","required":["ApplicationSummaries","HasMoreApplications"],"members":{"ApplicationSummaries":{"type":"list","member":{"shape":"S1l"}},"HasMoreApplications":{"type":"boolean"}}}},"StartApplication":{"input":{"type":"structure","required":["ApplicationName","InputConfigurations"],"members":{"ApplicationName":{},"InputConfigurations":{"type":"list","member":{"type":"structure","required":["Id","InputStartingPositionConfiguration"],"members":{"Id":{},"InputStartingPositionConfiguration":{"shape":"S28"}}}}}},"output":{"type":"structure","members":{}}},"StopApplication":{"input":{"type":"structure","required":["ApplicationName"],"members":{"ApplicationName":{}}},"output":{"type":"structure","members":{}}},"UpdateApplication":{"input":{"type":"structure","required":["ApplicationName","CurrentApplicationVersionId","ApplicationUpdate"],"members":{"ApplicationName":{},"CurrentApplicationVersionId":{"type":"long"},"ApplicationUpdate":{"type":"structure","members":{"InputUpdates":{"type":"list","member":{"type":"structure","required":["InputId"],"members":{"InputId":{},"NamePrefixUpdate":{},"InputProcessingConfigurationUpdate":{"type":"structure","required":["InputLambdaProcessorUpdate"],"members":{"InputLambdaProcessorUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}}}},"KinesisStreamsInputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"KinesisFirehoseInputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"InputSchemaUpdate":{"type":"structure","members":{"RecordFormatUpdate":{"shape":"Sj"},"RecordEncodingUpdate":{},"RecordColumnUpdates":{"shape":"Ss"}}},"InputParallelismUpdate":{"type":"structure","members":{"CountUpdate":{"type":"integer"}}}}}},"ApplicationCodeUpdate":{},"OutputUpdates":{"type":"list","member":{"type":"structure","required":["OutputId"],"members":{"OutputId":{},"NameUpdate":{},"KinesisStreamsOutputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"KinesisFirehoseOutputUpdate":{"type":"structure","members":{"ResourceARNUpdate":{},"RoleARNUpdate":{}}},"DestinationSchemaUpdate":{"shape":"S15"}}}},"ReferenceDataSourceUpdates":{"type":"list","member":{"type":"structure","required":["ReferenceId"],"members":{"ReferenceId":{},"TableNameUpdate":{},"S3ReferenceDataSourceUpdate":{"type":"structure","members":{"BucketARNUpdate":{},"FileKeyUpdate":{},"ReferenceRoleARNUpdate":{}}},"ReferenceSchemaUpdate":{"shape":"Si"}}}},"CloudWatchLoggingOptionUpdates":{"type":"list","member":{"type":"structure","required":["CloudWatchLoggingOptionId"],"members":{"CloudWatchLoggingOptionId":{},"LogStreamARNUpdate":{},"RoleARNUpdate":{}}}}}}}},"output":{"type":"structure","members":{}}}},"shapes":{"S4":{"type":"structure","required":["LogStreamARN","RoleARN"],"members":{"LogStreamARN":{},"RoleARN":{}}},"S9":{"type":"structure","required":["NamePrefix","InputSchema"],"members":{"NamePrefix":{},"InputProcessingConfiguration":{"shape":"Sb"},"KinesisStreamsInput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseInput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"InputParallelism":{"shape":"Sg"},"InputSchema":{"shape":"Si"}}},"Sb":{"type":"structure","required":["InputLambdaProcessor"],"members":{"InputLambdaProcessor":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}}}},"Sg":{"type":"structure","members":{"Count":{"type":"integer"}}},"Si":{"type":"structure","required":["RecordFormat","RecordColumns"],"members":{"RecordFormat":{"shape":"Sj"},"RecordEncoding":{},"RecordColumns":{"shape":"Ss"}}},"Sj":{"type":"structure","required":["RecordFormatType"],"members":{"RecordFormatType":{},"MappingParameters":{"type":"structure","members":{"JSONMappingParameters":{"type":"structure","required":["RecordRowPath"],"members":{"RecordRowPath":{}}},"CSVMappingParameters":{"type":"structure","required":["RecordRowDelimiter","RecordColumnDelimiter"],"members":{"RecordRowDelimiter":{},"RecordColumnDelimiter":{}}}}}}},"Ss":{"type":"list","member":{"type":"structure","required":["Name","SqlType"],"members":{"Name":{},"Mapping":{},"SqlType":{}}}},"S12":{"type":"structure","required":["Name","DestinationSchema"],"members":{"Name":{},"KinesisStreamsOutput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"KinesisFirehoseOutput":{"type":"structure","required":["ResourceARN","RoleARN"],"members":{"ResourceARN":{},"RoleARN":{}}},"DestinationSchema":{"shape":"S15"}}},"S15":{"type":"structure","members":{"RecordFormatType":{}}},"S1l":{"type":"structure","required":["ApplicationName","ApplicationARN","ApplicationStatus"],"members":{"ApplicationName":{},"ApplicationARN":{},"ApplicationStatus":{}}},"S28":{"type":"structure","members":{"InputStartingPosition":{}}}}}

/***/ }),
/* 265 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 266 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-11-01","endpointPrefix":"kms","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"KMS","serviceFullName":"AWS Key Management Service","serviceId":"KMS","signatureVersion":"v4","targetPrefix":"TrentService","uid":"kms-2014-11-01"},"operations":{"CancelKeyDeletion":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"output":{"type":"structure","members":{"KeyId":{}}}},"CreateAlias":{"input":{"type":"structure","required":["AliasName","TargetKeyId"],"members":{"AliasName":{},"TargetKeyId":{}}}},"CreateGrant":{"input":{"type":"structure","required":["KeyId","GranteePrincipal","Operations"],"members":{"KeyId":{},"GranteePrincipal":{},"RetiringPrincipal":{},"Operations":{"shape":"S8"},"Constraints":{"shape":"Sa"},"GrantTokens":{"shape":"Se"},"Name":{}}},"output":{"type":"structure","members":{"GrantToken":{},"GrantId":{}}}},"CreateKey":{"input":{"type":"structure","members":{"Policy":{},"Description":{},"KeyUsage":{},"Origin":{},"BypassPolicyLockoutSafetyCheck":{"type":"boolean"},"Tags":{"shape":"Sp"}}},"output":{"type":"structure","members":{"KeyMetadata":{"shape":"Su"}}}},"Decrypt":{"input":{"type":"structure","required":["CiphertextBlob"],"members":{"CiphertextBlob":{"type":"blob"},"EncryptionContext":{"shape":"Sb"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"KeyId":{},"Plaintext":{"shape":"S14"}}}},"DeleteAlias":{"input":{"type":"structure","required":["AliasName"],"members":{"AliasName":{}}}},"DeleteImportedKeyMaterial":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"DescribeKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"KeyMetadata":{"shape":"Su"}}}},"DisableKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"DisableKeyRotation":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"EnableKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"EnableKeyRotation":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}}},"Encrypt":{"input":{"type":"structure","required":["KeyId","Plaintext"],"members":{"KeyId":{},"Plaintext":{"shape":"S14"},"EncryptionContext":{"shape":"Sb"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"KeyId":{}}}},"GenerateDataKey":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"EncryptionContext":{"shape":"Sb"},"NumberOfBytes":{"type":"integer"},"KeySpec":{},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"Plaintext":{"shape":"S14"},"KeyId":{}}}},"GenerateDataKeyWithoutPlaintext":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"EncryptionContext":{"shape":"Sb"},"KeySpec":{},"NumberOfBytes":{"type":"integer"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"KeyId":{}}}},"GenerateRandom":{"input":{"type":"structure","members":{"NumberOfBytes":{"type":"integer"}}},"output":{"type":"structure","members":{"Plaintext":{"shape":"S14"}}}},"GetKeyPolicy":{"input":{"type":"structure","required":["KeyId","PolicyName"],"members":{"KeyId":{},"PolicyName":{}}},"output":{"type":"structure","members":{"Policy":{}}}},"GetKeyRotationStatus":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{}}},"output":{"type":"structure","members":{"KeyRotationEnabled":{"type":"boolean"}}}},"GetParametersForImport":{"input":{"type":"structure","required":["KeyId","WrappingAlgorithm","WrappingKeySpec"],"members":{"KeyId":{},"WrappingAlgorithm":{},"WrappingKeySpec":{}}},"output":{"type":"structure","members":{"KeyId":{},"ImportToken":{"type":"blob"},"PublicKey":{"shape":"S14"},"ParametersValidTo":{"type":"timestamp"}}}},"ImportKeyMaterial":{"input":{"type":"structure","required":["KeyId","ImportToken","EncryptedKeyMaterial"],"members":{"KeyId":{},"ImportToken":{"type":"blob"},"EncryptedKeyMaterial":{"type":"blob"},"ValidTo":{"type":"timestamp"},"ExpirationModel":{}}},"output":{"type":"structure","members":{}}},"ListAliases":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Aliases":{"type":"list","member":{"type":"structure","members":{"AliasName":{},"AliasArn":{},"TargetKeyId":{}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListGrants":{"input":{"type":"structure","required":["KeyId"],"members":{"Limit":{"type":"integer"},"Marker":{},"KeyId":{}}},"output":{"shape":"S25"}},"ListKeyPolicies":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"PolicyNames":{"type":"list","member":{}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListKeys":{"input":{"type":"structure","members":{"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Keys":{"type":"list","member":{"type":"structure","members":{"KeyId":{},"KeyArn":{}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListResourceTags":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"Sp"},"NextMarker":{},"Truncated":{"type":"boolean"}}}},"ListRetirableGrants":{"input":{"type":"structure","required":["RetiringPrincipal"],"members":{"Limit":{"type":"integer"},"Marker":{},"RetiringPrincipal":{}}},"output":{"shape":"S25"}},"PutKeyPolicy":{"input":{"type":"structure","required":["KeyId","PolicyName","Policy"],"members":{"KeyId":{},"PolicyName":{},"Policy":{},"BypassPolicyLockoutSafetyCheck":{"type":"boolean"}}}},"ReEncrypt":{"input":{"type":"structure","required":["CiphertextBlob","DestinationKeyId"],"members":{"CiphertextBlob":{"type":"blob"},"SourceEncryptionContext":{"shape":"Sb"},"DestinationKeyId":{},"DestinationEncryptionContext":{"shape":"Sb"},"GrantTokens":{"shape":"Se"}}},"output":{"type":"structure","members":{"CiphertextBlob":{"type":"blob"},"SourceKeyId":{},"KeyId":{}}}},"RetireGrant":{"input":{"type":"structure","members":{"GrantToken":{},"KeyId":{},"GrantId":{}}}},"RevokeGrant":{"input":{"type":"structure","required":["KeyId","GrantId"],"members":{"KeyId":{},"GrantId":{}}}},"ScheduleKeyDeletion":{"input":{"type":"structure","required":["KeyId"],"members":{"KeyId":{},"PendingWindowInDays":{"type":"integer"}}},"output":{"type":"structure","members":{"KeyId":{},"DeletionDate":{"type":"timestamp"}}}},"TagResource":{"input":{"type":"structure","required":["KeyId","Tags"],"members":{"KeyId":{},"Tags":{"shape":"Sp"}}}},"UntagResource":{"input":{"type":"structure","required":["KeyId","TagKeys"],"members":{"KeyId":{},"TagKeys":{"type":"list","member":{}}}}},"UpdateAlias":{"input":{"type":"structure","required":["AliasName","TargetKeyId"],"members":{"AliasName":{},"TargetKeyId":{}}}},"UpdateKeyDescription":{"input":{"type":"structure","required":["KeyId","Description"],"members":{"KeyId":{},"Description":{}}}}},"shapes":{"S8":{"type":"list","member":{}},"Sa":{"type":"structure","members":{"EncryptionContextSubset":{"shape":"Sb"},"EncryptionContextEquals":{"shape":"Sb"}}},"Sb":{"type":"map","key":{},"value":{}},"Se":{"type":"list","member":{}},"Sp":{"type":"list","member":{"type":"structure","required":["TagKey","TagValue"],"members":{"TagKey":{},"TagValue":{}}}},"Su":{"type":"structure","required":["KeyId"],"members":{"AWSAccountId":{},"KeyId":{},"Arn":{},"CreationDate":{"type":"timestamp"},"Enabled":{"type":"boolean"},"Description":{},"KeyUsage":{},"KeyState":{},"DeletionDate":{"type":"timestamp"},"ValidTo":{"type":"timestamp"},"Origin":{},"ExpirationModel":{},"KeyManager":{}}},"S14":{"type":"blob","sensitive":true},"S25":{"type":"structure","members":{"Grants":{"type":"list","member":{"type":"structure","members":{"KeyId":{},"GrantId":{},"Name":{},"CreationDate":{"type":"timestamp"},"GranteePrincipal":{},"RetiringPrincipal":{},"IssuingAccount":{},"Operations":{"shape":"S8"},"Constraints":{"shape":"Sa"}}}},"NextMarker":{},"Truncated":{"type":"boolean"}}}}}

/***/ }),
/* 267 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListAliases":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"Aliases"},"ListGrants":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"Grants"},"ListKeyPolicies":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"PolicyNames"},"ListKeys":{"input_token":"Marker","limit_key":"Limit","more_results":"Truncated","output_token":"NextMarker","result_key":"Keys"}}}

/***/ }),
/* 268 */
/***/ (function(module, exports) {

module.exports = {"metadata":{"apiVersion":"2014-11-11","endpointPrefix":"lambda","serviceFullName":"AWS Lambda","signatureVersion":"v4","protocol":"rest-json"},"operations":{"AddEventSource":{"http":{"requestUri":"/2014-11-13/event-source-mappings/"},"input":{"type":"structure","required":["EventSource","FunctionName","Role"],"members":{"EventSource":{},"FunctionName":{},"Role":{},"BatchSize":{"type":"integer"},"Parameters":{"shape":"S6"}}},"output":{"shape":"S7"}},"DeleteFunction":{"http":{"method":"DELETE","requestUri":"/2014-11-13/functions/{FunctionName}","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}}},"GetEventSource":{"http":{"method":"GET","requestUri":"/2014-11-13/event-source-mappings/{UUID}","responseCode":200},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"S7"}},"GetFunction":{"http":{"method":"GET","requestUri":"/2014-11-13/functions/{FunctionName}","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}},"output":{"type":"structure","members":{"Configuration":{"shape":"Se"},"Code":{"type":"structure","members":{"RepositoryType":{},"Location":{}}}}}},"GetFunctionConfiguration":{"http":{"method":"GET","requestUri":"/2014-11-13/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"}}},"output":{"shape":"Se"}},"InvokeAsync":{"http":{"requestUri":"/2014-11-13/functions/{FunctionName}/invoke-async/","responseCode":202},"input":{"type":"structure","required":["FunctionName","InvokeArgs"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvokeArgs":{"shape":"Sq"}},"payload":"InvokeArgs"},"output":{"type":"structure","members":{"Status":{"location":"statusCode","type":"integer"}}}},"ListEventSources":{"http":{"method":"GET","requestUri":"/2014-11-13/event-source-mappings/","responseCode":200},"input":{"type":"structure","members":{"EventSourceArn":{"location":"querystring","locationName":"EventSource"},"FunctionName":{"location":"querystring","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"EventSources":{"type":"list","member":{"shape":"S7"}}}}},"ListFunctions":{"http":{"method":"GET","requestUri":"/2014-11-13/functions/","responseCode":200},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Functions":{"type":"list","member":{"shape":"Se"}}}}},"RemoveEventSource":{"http":{"method":"DELETE","requestUri":"/2014-11-13/event-source-mappings/{UUID}","responseCode":204},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}}},"UpdateFunctionConfiguration":{"http":{"method":"PUT","requestUri":"/2014-11-13/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Role":{"location":"querystring","locationName":"Role"},"Handler":{"location":"querystring","locationName":"Handler"},"Description":{"location":"querystring","locationName":"Description"},"Timeout":{"location":"querystring","locationName":"Timeout","type":"integer"},"MemorySize":{"location":"querystring","locationName":"MemorySize","type":"integer"}}},"output":{"shape":"Se"}},"UploadFunction":{"http":{"method":"PUT","requestUri":"/2014-11-13/functions/{FunctionName}","responseCode":201},"input":{"type":"structure","required":["FunctionName","FunctionZip","Runtime","Role","Handler","Mode"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"FunctionZip":{"shape":"Sq"},"Runtime":{"location":"querystring","locationName":"Runtime"},"Role":{"location":"querystring","locationName":"Role"},"Handler":{"location":"querystring","locationName":"Handler"},"Mode":{"location":"querystring","locationName":"Mode"},"Description":{"location":"querystring","locationName":"Description"},"Timeout":{"location":"querystring","locationName":"Timeout","type":"integer"},"MemorySize":{"location":"querystring","locationName":"MemorySize","type":"integer"}},"payload":"FunctionZip"},"output":{"shape":"Se"}}},"shapes":{"S6":{"type":"map","key":{},"value":{}},"S7":{"type":"structure","members":{"UUID":{},"BatchSize":{"type":"integer"},"EventSource":{},"FunctionName":{},"Parameters":{"shape":"S6"},"Role":{},"LastModified":{"type":"timestamp"},"IsActive":{"type":"boolean"},"Status":{}}},"Se":{"type":"structure","members":{"FunctionName":{},"FunctionARN":{},"ConfigurationId":{},"Runtime":{},"Role":{},"Handler":{},"Mode":{},"CodeSize":{"type":"long"},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"LastModified":{"type":"timestamp"}}},"Sq":{"type":"blob","streaming":true}}}

/***/ }),
/* 269 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListEventSources":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems","result_key":"EventSources"},"ListFunctions":{"input_token":"Marker","output_token":"NextMarker","limit_key":"MaxItems","result_key":"Functions"}}}

/***/ }),
/* 270 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-03-31","endpointPrefix":"lambda","protocol":"rest-json","serviceFullName":"AWS Lambda","signatureVersion":"v4","uid":"lambda-2015-03-31"},"operations":{"AddPermission":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/policy","responseCode":201},"input":{"type":"structure","required":["FunctionName","StatementId","Action","Principal"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"StatementId":{},"Action":{},"Principal":{},"SourceArn":{},"SourceAccount":{},"EventSourceToken":{},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Statement":{}}}},"CreateAlias":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/aliases","responseCode":201},"input":{"type":"structure","required":["FunctionName","Name","FunctionVersion"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{},"FunctionVersion":{},"Description":{}}},"output":{"shape":"Sg"}},"CreateEventSourceMapping":{"http":{"requestUri":"/2015-03-31/event-source-mappings/","responseCode":202},"input":{"type":"structure","required":["EventSourceArn","FunctionName","StartingPosition"],"members":{"EventSourceArn":{},"FunctionName":{},"Enabled":{"type":"boolean"},"BatchSize":{"type":"integer"},"StartingPosition":{},"StartingPositionTimestamp":{"type":"timestamp"}}},"output":{"shape":"Sn"}},"CreateFunction":{"http":{"requestUri":"/2015-03-31/functions","responseCode":201},"input":{"type":"structure","required":["FunctionName","Runtime","Role","Handler","Code"],"members":{"FunctionName":{},"Runtime":{},"Role":{},"Handler":{},"Code":{"type":"structure","members":{"ZipFile":{"shape":"St"},"S3Bucket":{},"S3Key":{},"S3ObjectVersion":{}}},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"Publish":{"type":"boolean"},"VpcConfig":{"shape":"S10"},"DeadLetterConfig":{"shape":"S15"},"Environment":{"shape":"S17"},"KMSKeyArn":{},"TracingConfig":{"shape":"S1c"},"Tags":{"shape":"S1e"}}},"output":{"shape":"S1h"}},"DeleteAlias":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":204},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"}}}},"DeleteEventSourceMapping":{"http":{"method":"DELETE","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":202},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"Sn"}},"DeleteFunction":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}","responseCode":204},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}}},"GetAccountSettings":{"http":{"method":"GET","requestUri":"/2016-08-19/account-settings/","responseCode":200},"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AccountLimit":{"type":"structure","members":{"TotalCodeSize":{"type":"long"},"CodeSizeUnzipped":{"type":"long"},"CodeSizeZipped":{"type":"long"},"ConcurrentExecutions":{"type":"integer"}}},"AccountUsage":{"type":"structure","members":{"TotalCodeSize":{"type":"long"},"FunctionCount":{"type":"long"}}}}}},"GetAlias":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":200},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"}}},"output":{"shape":"Sg"}},"GetEventSourceMapping":{"http":{"method":"GET","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":200},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"}}},"output":{"shape":"Sn"}},"GetFunction":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Configuration":{"shape":"S1h"},"Code":{"type":"structure","members":{"RepositoryType":{},"Location":{}}},"Tags":{"shape":"S1e"}}}},"GetFunctionConfiguration":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"shape":"S1h"}},"GetPolicy":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/policy","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}},"output":{"type":"structure","members":{"Policy":{}}}},"Invoke":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/invocations"},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvocationType":{"location":"header","locationName":"X-Amz-Invocation-Type"},"LogType":{"location":"header","locationName":"X-Amz-Log-Type"},"ClientContext":{"location":"header","locationName":"X-Amz-Client-Context"},"Payload":{"shape":"St"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}},"payload":"Payload"},"output":{"type":"structure","members":{"StatusCode":{"location":"statusCode","type":"integer"},"FunctionError":{"location":"header","locationName":"X-Amz-Function-Error"},"LogResult":{"location":"header","locationName":"X-Amz-Log-Result"},"Payload":{"shape":"St"}},"payload":"Payload"}},"InvokeAsync":{"http":{"requestUri":"/2014-11-13/functions/{FunctionName}/invoke-async/","responseCode":202},"input":{"type":"structure","required":["FunctionName","InvokeArgs"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"InvokeArgs":{"type":"blob","streaming":true}},"deprecated":true,"payload":"InvokeArgs"},"output":{"type":"structure","members":{"Status":{"location":"statusCode","type":"integer"}},"deprecated":true},"deprecated":true},"ListAliases":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/aliases","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"FunctionVersion":{"location":"querystring","locationName":"FunctionVersion"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Aliases":{"type":"list","member":{"shape":"Sg"}}}}},"ListEventSourceMappings":{"http":{"method":"GET","requestUri":"/2015-03-31/event-source-mappings/","responseCode":200},"input":{"type":"structure","members":{"EventSourceArn":{"location":"querystring","locationName":"EventSourceArn"},"FunctionName":{"location":"querystring","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"EventSourceMappings":{"type":"list","member":{"shape":"Sn"}}}}},"ListFunctions":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/","responseCode":200},"input":{"type":"structure","members":{"MasterRegion":{"location":"querystring","locationName":"MasterRegion"},"FunctionVersion":{"location":"querystring","locationName":"FunctionVersion"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Functions":{"shape":"S2r"}}}},"ListTags":{"http":{"method":"GET","requestUri":"/2017-03-31/tags/{ARN}"},"input":{"type":"structure","required":["Resource"],"members":{"Resource":{"location":"uri","locationName":"ARN"}}},"output":{"type":"structure","members":{"Tags":{"shape":"S1e"}}}},"ListVersionsByFunction":{"http":{"method":"GET","requestUri":"/2015-03-31/functions/{FunctionName}/versions","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Marker":{"location":"querystring","locationName":"Marker"},"MaxItems":{"location":"querystring","locationName":"MaxItems","type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Versions":{"shape":"S2r"}}}},"PublishVersion":{"http":{"requestUri":"/2015-03-31/functions/{FunctionName}/versions","responseCode":201},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"CodeSha256":{},"Description":{}}},"output":{"shape":"S1h"}},"RemovePermission":{"http":{"method":"DELETE","requestUri":"/2015-03-31/functions/{FunctionName}/policy/{StatementId}","responseCode":204},"input":{"type":"structure","required":["FunctionName","StatementId"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"StatementId":{"location":"uri","locationName":"StatementId"},"Qualifier":{"location":"querystring","locationName":"Qualifier"}}}},"TagResource":{"http":{"requestUri":"/2017-03-31/tags/{ARN}","responseCode":204},"input":{"type":"structure","required":["Resource","Tags"],"members":{"Resource":{"location":"uri","locationName":"ARN"},"Tags":{"shape":"S1e"}}}},"UntagResource":{"http":{"method":"DELETE","requestUri":"/2017-03-31/tags/{ARN}","responseCode":204},"input":{"type":"structure","required":["Resource","TagKeys"],"members":{"Resource":{"location":"uri","locationName":"ARN"},"TagKeys":{"location":"querystring","locationName":"tagKeys","type":"list","member":{}}}}},"UpdateAlias":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/aliases/{Name}","responseCode":200},"input":{"type":"structure","required":["FunctionName","Name"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Name":{"location":"uri","locationName":"Name"},"FunctionVersion":{},"Description":{}}},"output":{"shape":"Sg"}},"UpdateEventSourceMapping":{"http":{"method":"PUT","requestUri":"/2015-03-31/event-source-mappings/{UUID}","responseCode":202},"input":{"type":"structure","required":["UUID"],"members":{"UUID":{"location":"uri","locationName":"UUID"},"FunctionName":{},"Enabled":{"type":"boolean"},"BatchSize":{"type":"integer"}}},"output":{"shape":"Sn"}},"UpdateFunctionCode":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/code","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"ZipFile":{"shape":"St"},"S3Bucket":{},"S3Key":{},"S3ObjectVersion":{},"Publish":{"type":"boolean"},"DryRun":{"type":"boolean"}}},"output":{"shape":"S1h"}},"UpdateFunctionConfiguration":{"http":{"method":"PUT","requestUri":"/2015-03-31/functions/{FunctionName}/configuration","responseCode":200},"input":{"type":"structure","required":["FunctionName"],"members":{"FunctionName":{"location":"uri","locationName":"FunctionName"},"Role":{},"Handler":{},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"VpcConfig":{"shape":"S10"},"Environment":{"shape":"S17"},"Runtime":{},"DeadLetterConfig":{"shape":"S15"},"KMSKeyArn":{},"TracingConfig":{"shape":"S1c"}}},"output":{"shape":"S1h"}}},"shapes":{"Sg":{"type":"structure","members":{"AliasArn":{},"Name":{},"FunctionVersion":{},"Description":{}}},"Sn":{"type":"structure","members":{"UUID":{},"BatchSize":{"type":"integer"},"EventSourceArn":{},"FunctionArn":{},"LastModified":{"type":"timestamp"},"LastProcessingResult":{},"State":{},"StateTransitionReason":{}}},"St":{"type":"blob","sensitive":true},"S10":{"type":"structure","members":{"SubnetIds":{"shape":"S11"},"SecurityGroupIds":{"shape":"S13"}}},"S11":{"type":"list","member":{}},"S13":{"type":"list","member":{}},"S15":{"type":"structure","members":{"TargetArn":{}}},"S17":{"type":"structure","members":{"Variables":{"shape":"S18"}}},"S18":{"type":"map","key":{"type":"string","sensitive":true},"value":{"type":"string","sensitive":true},"sensitive":true},"S1c":{"type":"structure","members":{"Mode":{}}},"S1e":{"type":"map","key":{},"value":{}},"S1h":{"type":"structure","members":{"FunctionName":{},"FunctionArn":{},"Runtime":{},"Role":{},"Handler":{},"CodeSize":{"type":"long"},"Description":{},"Timeout":{"type":"integer"},"MemorySize":{"type":"integer"},"LastModified":{},"CodeSha256":{},"Version":{},"VpcConfig":{"type":"structure","members":{"SubnetIds":{"shape":"S11"},"SecurityGroupIds":{"shape":"S13"},"VpcId":{}}},"DeadLetterConfig":{"shape":"S15"},"Environment":{"type":"structure","members":{"Variables":{"shape":"S18"},"Error":{"type":"structure","members":{"ErrorCode":{},"Message":{"type":"string","sensitive":true}}}}},"KMSKeyArn":{},"TracingConfig":{"type":"structure","members":{"Mode":{}}},"MasterArn":{}}},"S2r":{"type":"list","member":{"shape":"S1h"}}}}

/***/ }),
/* 271 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListEventSourceMappings":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"EventSourceMappings"},"ListFunctions":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextMarker","result_key":"Functions"}}}

/***/ }),
/* 272 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-04-19","endpointPrefix":"models.lex","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"Amazon Lex Model Building Service","signatureVersion":"v4","signingName":"lex","uid":"lex-models-2017-04-19"},"operations":{"CreateBotVersion":{"http":{"requestUri":"/bots/{name}/versions","responseCode":201},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"checksum":{}}},"output":{"type":"structure","members":{"name":{},"description":{},"intents":{"shape":"S6"},"clarificationPrompt":{"shape":"Sa"},"abortStatement":{"shape":"Sh"},"status":{},"failureReason":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"idleSessionTTLInSeconds":{"type":"integer"},"voiceId":{},"checksum":{},"version":{},"locale":{},"childDirected":{"type":"boolean"}}}},"CreateIntentVersion":{"http":{"requestUri":"/intents/{name}/versions","responseCode":201},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"checksum":{}}},"output":{"type":"structure","members":{"name":{},"description":{},"slots":{"shape":"Sp"},"sampleUtterances":{"shape":"Sx"},"confirmationPrompt":{"shape":"Sa"},"rejectionStatement":{"shape":"Sh"},"followUpPrompt":{"shape":"Sy"},"conclusionStatement":{"shape":"Sh"},"dialogCodeHook":{"shape":"Sz"},"fulfillmentActivity":{"shape":"S12"},"parentIntentSignature":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{},"checksum":{}}}},"CreateSlotTypeVersion":{"http":{"requestUri":"/slottypes/{name}/versions","responseCode":201},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"checksum":{}}},"output":{"type":"structure","members":{"name":{},"description":{},"enumerationValues":{"shape":"S18"},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{},"checksum":{},"valueSelectionStrategy":{}}}},"DeleteBot":{"http":{"method":"DELETE","requestUri":"/bots/{name}","responseCode":204},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"}}}},"DeleteBotAlias":{"http":{"method":"DELETE","requestUri":"/bots/{botName}/aliases/{name}","responseCode":204},"input":{"type":"structure","required":["name","botName"],"members":{"name":{"location":"uri","locationName":"name"},"botName":{"location":"uri","locationName":"botName"}}}},"DeleteBotChannelAssociation":{"http":{"method":"DELETE","requestUri":"/bots/{botName}/aliases/{aliasName}/channels/{name}","responseCode":204},"input":{"type":"structure","required":["name","botName","botAlias"],"members":{"name":{"location":"uri","locationName":"name"},"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"aliasName"}}}},"DeleteBotVersion":{"http":{"method":"DELETE","requestUri":"/bots/{name}/versions/{version}","responseCode":204},"input":{"type":"structure","required":["name","version"],"members":{"name":{"location":"uri","locationName":"name"},"version":{"location":"uri","locationName":"version"}}}},"DeleteIntent":{"http":{"method":"DELETE","requestUri":"/intents/{name}","responseCode":204},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"}}}},"DeleteIntentVersion":{"http":{"method":"DELETE","requestUri":"/intents/{name}/versions/{version}","responseCode":204},"input":{"type":"structure","required":["name","version"],"members":{"name":{"location":"uri","locationName":"name"},"version":{"location":"uri","locationName":"version"}}}},"DeleteSlotType":{"http":{"method":"DELETE","requestUri":"/slottypes/{name}","responseCode":204},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"}}}},"DeleteSlotTypeVersion":{"http":{"method":"DELETE","requestUri":"/slottypes/{name}/version/{version}","responseCode":204},"input":{"type":"structure","required":["name","version"],"members":{"name":{"location":"uri","locationName":"name"},"version":{"location":"uri","locationName":"version"}}}},"DeleteUtterances":{"http":{"method":"DELETE","requestUri":"/bots/{botName}/utterances/{userId}","responseCode":204},"input":{"type":"structure","required":["botName","userId"],"members":{"botName":{"location":"uri","locationName":"botName"},"userId":{"location":"uri","locationName":"userId"}}}},"GetBot":{"http":{"method":"GET","requestUri":"/bots/{name}/versions/{versionoralias}","responseCode":200},"input":{"type":"structure","required":["name","versionOrAlias"],"members":{"name":{"location":"uri","locationName":"name"},"versionOrAlias":{"location":"uri","locationName":"versionoralias"}}},"output":{"type":"structure","members":{"name":{},"description":{},"intents":{"shape":"S6"},"clarificationPrompt":{"shape":"Sa"},"abortStatement":{"shape":"Sh"},"status":{},"failureReason":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"idleSessionTTLInSeconds":{"type":"integer"},"voiceId":{},"checksum":{},"version":{},"locale":{},"childDirected":{"type":"boolean"}}}},"GetBotAlias":{"http":{"method":"GET","requestUri":"/bots/{botName}/aliases/{name}","responseCode":200},"input":{"type":"structure","required":["name","botName"],"members":{"name":{"location":"uri","locationName":"name"},"botName":{"location":"uri","locationName":"botName"}}},"output":{"type":"structure","members":{"name":{},"description":{},"botVersion":{},"botName":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"checksum":{}}}},"GetBotAliases":{"http":{"method":"GET","requestUri":"/bots/{botName}/aliases/","responseCode":200},"input":{"type":"structure","required":["botName"],"members":{"botName":{"location":"uri","locationName":"botName"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nameContains":{"location":"querystring","locationName":"nameContains"}}},"output":{"type":"structure","members":{"BotAliases":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{},"botVersion":{},"botName":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"checksum":{}}}},"nextToken":{}}}},"GetBotChannelAssociation":{"http":{"method":"GET","requestUri":"/bots/{botName}/aliases/{aliasName}/channels/{name}","responseCode":200},"input":{"type":"structure","required":["name","botName","botAlias"],"members":{"name":{"location":"uri","locationName":"name"},"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"aliasName"}}},"output":{"type":"structure","members":{"name":{},"description":{},"botAlias":{},"botName":{},"createdDate":{"type":"timestamp"},"type":{},"botConfiguration":{"shape":"S23"}}}},"GetBotChannelAssociations":{"http":{"method":"GET","requestUri":"/bots/{botName}/aliases/{aliasName}/channels/","responseCode":200},"input":{"type":"structure","required":["botName","botAlias"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"aliasName"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nameContains":{"location":"querystring","locationName":"nameContains"}}},"output":{"type":"structure","members":{"botChannelAssociations":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{},"botAlias":{},"botName":{},"createdDate":{"type":"timestamp"},"type":{},"botConfiguration":{"shape":"S23"}}}},"nextToken":{}}}},"GetBotVersions":{"http":{"method":"GET","requestUri":"/bots/{name}/versions/","responseCode":200},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"bots":{"shape":"S2b"},"nextToken":{}}}},"GetBots":{"http":{"method":"GET","requestUri":"/bots/","responseCode":200},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nameContains":{"location":"querystring","locationName":"nameContains"}}},"output":{"type":"structure","members":{"bots":{"shape":"S2b"},"nextToken":{}}}},"GetBuiltinIntent":{"http":{"method":"GET","requestUri":"/builtins/intents/{signature}","responseCode":200},"input":{"type":"structure","required":["signature"],"members":{"signature":{"location":"uri","locationName":"signature"}}},"output":{"type":"structure","members":{"signature":{},"supportedLocales":{"shape":"S2h"},"slots":{"type":"list","member":{"type":"structure","members":{"name":{}}}}}}},"GetBuiltinIntents":{"http":{"method":"GET","requestUri":"/builtins/intents/","responseCode":200},"input":{"type":"structure","members":{"locale":{"location":"querystring","locationName":"locale"},"signatureContains":{"location":"querystring","locationName":"signatureContains"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"intents":{"type":"list","member":{"type":"structure","members":{"signature":{},"supportedLocales":{"shape":"S2h"}}}},"nextToken":{}}}},"GetBuiltinSlotTypes":{"http":{"method":"GET","requestUri":"/builtins/slottypes/","responseCode":200},"input":{"type":"structure","members":{"locale":{"location":"querystring","locationName":"locale"},"signatureContains":{"location":"querystring","locationName":"signatureContains"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"slotTypes":{"type":"list","member":{"type":"structure","members":{"signature":{},"supportedLocales":{"shape":"S2h"}}}},"nextToken":{}}}},"GetExport":{"http":{"method":"GET","requestUri":"/exports/","responseCode":200},"input":{"type":"structure","required":["name","version","resourceType","exportType"],"members":{"name":{"location":"querystring","locationName":"name"},"version":{"location":"querystring","locationName":"version"},"resourceType":{"location":"querystring","locationName":"resourceType"},"exportType":{"location":"querystring","locationName":"exportType"}}},"output":{"type":"structure","members":{"name":{},"version":{},"resourceType":{},"exportType":{},"exportStatus":{},"failureReason":{},"url":{}}}},"GetIntent":{"http":{"method":"GET","requestUri":"/intents/{name}/versions/{version}","responseCode":200},"input":{"type":"structure","required":["name","version"],"members":{"name":{"location":"uri","locationName":"name"},"version":{"location":"uri","locationName":"version"}}},"output":{"type":"structure","members":{"name":{},"description":{},"slots":{"shape":"Sp"},"sampleUtterances":{"shape":"Sx"},"confirmationPrompt":{"shape":"Sa"},"rejectionStatement":{"shape":"Sh"},"followUpPrompt":{"shape":"Sy"},"conclusionStatement":{"shape":"Sh"},"dialogCodeHook":{"shape":"Sz"},"fulfillmentActivity":{"shape":"S12"},"parentIntentSignature":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{},"checksum":{}}}},"GetIntentVersions":{"http":{"method":"GET","requestUri":"/intents/{name}/versions/","responseCode":200},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"intents":{"shape":"S33"},"nextToken":{}}}},"GetIntents":{"http":{"method":"GET","requestUri":"/intents/","responseCode":200},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nameContains":{"location":"querystring","locationName":"nameContains"}}},"output":{"type":"structure","members":{"intents":{"shape":"S33"},"nextToken":{}}}},"GetSlotType":{"http":{"method":"GET","requestUri":"/slottypes/{name}/versions/{version}","responseCode":200},"input":{"type":"structure","required":["name","version"],"members":{"name":{"location":"uri","locationName":"name"},"version":{"location":"uri","locationName":"version"}}},"output":{"type":"structure","members":{"name":{},"description":{},"enumerationValues":{"shape":"S18"},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{},"checksum":{},"valueSelectionStrategy":{}}}},"GetSlotTypeVersions":{"http":{"method":"GET","requestUri":"/slottypes/{name}/versions/","responseCode":200},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"}}},"output":{"type":"structure","members":{"slotTypes":{"shape":"S3b"},"nextToken":{}}}},"GetSlotTypes":{"http":{"method":"GET","requestUri":"/slottypes/","responseCode":200},"input":{"type":"structure","members":{"nextToken":{"location":"querystring","locationName":"nextToken"},"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nameContains":{"location":"querystring","locationName":"nameContains"}}},"output":{"type":"structure","members":{"slotTypes":{"shape":"S3b"},"nextToken":{}}}},"GetUtterancesView":{"http":{"method":"GET","requestUri":"/bots/{botname}/utterances?view=aggregation","responseCode":200},"input":{"type":"structure","required":["botName","botVersions","statusType"],"members":{"botName":{"location":"uri","locationName":"botname"},"botVersions":{"location":"querystring","locationName":"bot_versions","type":"list","member":{}},"statusType":{"location":"querystring","locationName":"status_type"}}},"output":{"type":"structure","members":{"botName":{},"utterances":{"type":"list","member":{"type":"structure","members":{"botVersion":{},"utterances":{"type":"list","member":{"type":"structure","members":{"utteranceString":{},"count":{"type":"integer"},"distinctUsers":{"type":"integer"},"firstUtteredDate":{"type":"timestamp"},"lastUtteredDate":{"type":"timestamp"}}}}}}}}}},"PutBot":{"http":{"method":"PUT","requestUri":"/bots/{name}/versions/$LATEST","responseCode":200},"input":{"type":"structure","required":["name","locale","childDirected"],"members":{"name":{"location":"uri","locationName":"name"},"description":{},"intents":{"shape":"S6"},"clarificationPrompt":{"shape":"Sa"},"abortStatement":{"shape":"Sh"},"idleSessionTTLInSeconds":{"type":"integer"},"voiceId":{},"checksum":{},"processBehavior":{},"locale":{},"childDirected":{"type":"boolean"}}},"output":{"type":"structure","members":{"name":{},"description":{},"intents":{"shape":"S6"},"clarificationPrompt":{"shape":"Sa"},"abortStatement":{"shape":"Sh"},"status":{},"failureReason":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"idleSessionTTLInSeconds":{"type":"integer"},"voiceId":{},"checksum":{},"version":{},"locale":{},"childDirected":{"type":"boolean"}}}},"PutBotAlias":{"http":{"method":"PUT","requestUri":"/bots/{botName}/aliases/{name}","responseCode":200},"input":{"type":"structure","required":["name","botVersion","botName"],"members":{"name":{"location":"uri","locationName":"name"},"description":{},"botVersion":{},"botName":{"location":"uri","locationName":"botName"},"checksum":{}}},"output":{"type":"structure","members":{"name":{},"description":{},"botVersion":{},"botName":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"checksum":{}}}},"PutIntent":{"http":{"method":"PUT","requestUri":"/intents/{name}/versions/$LATEST","responseCode":200},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"description":{},"slots":{"shape":"Sp"},"sampleUtterances":{"shape":"Sx"},"confirmationPrompt":{"shape":"Sa"},"rejectionStatement":{"shape":"Sh"},"followUpPrompt":{"shape":"Sy"},"conclusionStatement":{"shape":"Sh"},"dialogCodeHook":{"shape":"Sz"},"fulfillmentActivity":{"shape":"S12"},"parentIntentSignature":{},"checksum":{}}},"output":{"type":"structure","members":{"name":{},"description":{},"slots":{"shape":"Sp"},"sampleUtterances":{"shape":"Sx"},"confirmationPrompt":{"shape":"Sa"},"rejectionStatement":{"shape":"Sh"},"followUpPrompt":{"shape":"Sy"},"conclusionStatement":{"shape":"Sh"},"dialogCodeHook":{"shape":"Sz"},"fulfillmentActivity":{"shape":"S12"},"parentIntentSignature":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{},"checksum":{}}}},"PutSlotType":{"http":{"method":"PUT","requestUri":"/slottypes/{name}/versions/$LATEST","responseCode":200},"input":{"type":"structure","required":["name"],"members":{"name":{"location":"uri","locationName":"name"},"description":{},"enumerationValues":{"shape":"S18"},"checksum":{},"valueSelectionStrategy":{}}},"output":{"type":"structure","members":{"name":{},"description":{},"enumerationValues":{"shape":"S18"},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{},"checksum":{},"valueSelectionStrategy":{}}}}},"shapes":{"S6":{"type":"list","member":{"type":"structure","required":["intentName","intentVersion"],"members":{"intentName":{},"intentVersion":{}}}},"Sa":{"type":"structure","required":["messages","maxAttempts"],"members":{"messages":{"shape":"Sb"},"maxAttempts":{"type":"integer"},"responseCard":{}}},"Sb":{"type":"list","member":{"type":"structure","required":["contentType","content"],"members":{"contentType":{},"content":{}}}},"Sh":{"type":"structure","required":["messages"],"members":{"messages":{"shape":"Sb"},"responseCard":{}}},"Sp":{"type":"list","member":{"type":"structure","required":["name","slotConstraint"],"members":{"name":{},"description":{},"slotConstraint":{},"slotType":{},"slotTypeVersion":{},"valueElicitationPrompt":{"shape":"Sa"},"priority":{"type":"integer"},"sampleUtterances":{"type":"list","member":{}},"responseCard":{}}}},"Sx":{"type":"list","member":{}},"Sy":{"type":"structure","required":["prompt","rejectionStatement"],"members":{"prompt":{"shape":"Sa"},"rejectionStatement":{"shape":"Sh"}}},"Sz":{"type":"structure","required":["uri","messageVersion"],"members":{"uri":{},"messageVersion":{}}},"S12":{"type":"structure","required":["type"],"members":{"type":{},"codeHook":{"shape":"Sz"}}},"S18":{"type":"list","member":{"type":"structure","required":["value"],"members":{"value":{},"synonyms":{"type":"list","member":{}}}}},"S23":{"type":"map","key":{},"value":{},"sensitive":true},"S2b":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{},"status":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{}}}},"S2h":{"type":"list","member":{}},"S33":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{}}}},"S3b":{"type":"list","member":{"type":"structure","members":{"name":{},"description":{},"lastUpdatedDate":{"type":"timestamp"},"createdDate":{"type":"timestamp"},"version":{}}}}}}

/***/ }),
/* 273 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetBotAliases":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetBotChannelAssociations":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetBotVersions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetBots":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetBuiltinIntents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetBuiltinSlotTypes":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetIntentVersions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetIntents":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetSlotTypeVersions":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"GetSlotTypes":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"}}}

/***/ }),
/* 274 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-28","endpointPrefix":"lightsail","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Lightsail","signatureVersion":"v4","targetPrefix":"Lightsail_20161128","uid":"lightsail-2016-11-28"},"operations":{"AllocateStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"AttachStaticIp":{"input":{"type":"structure","required":["staticIpName","instanceName"],"members":{"staticIpName":{},"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CloseInstancePublicPorts":{"input":{"type":"structure","required":["portInfo","instanceName"],"members":{"portInfo":{"shape":"Si"},"instanceName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"CreateDomain":{"input":{"type":"structure","required":["domainName"],"members":{"domainName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"CreateDomainEntry":{"input":{"type":"structure","required":["domainName","domainEntry"],"members":{"domainName":{},"domainEntry":{"shape":"Sq"}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"CreateInstanceSnapshot":{"input":{"type":"structure","required":["instanceSnapshotName","instanceName"],"members":{"instanceSnapshotName":{},"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateInstances":{"input":{"type":"structure","required":["instanceNames","availabilityZone","blueprintId","bundleId"],"members":{"instanceNames":{"shape":"Sy"},"availabilityZone":{},"customImageName":{"deprecated":true},"blueprintId":{},"bundleId":{},"userData":{},"keyPairName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateInstancesFromSnapshot":{"input":{"type":"structure","required":["instanceNames","availabilityZone","instanceSnapshotName","bundleId"],"members":{"instanceNames":{"shape":"Sy"},"availabilityZone":{},"instanceSnapshotName":{},"bundleId":{},"userData":{},"keyPairName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"CreateKeyPair":{"input":{"type":"structure","required":["keyPairName"],"members":{"keyPairName":{}}},"output":{"type":"structure","members":{"keyPair":{"shape":"S14"},"publicKeyBase64":{},"privateKeyBase64":{},"operation":{"shape":"S5"}}}},"DeleteDomain":{"input":{"type":"structure","required":["domainName"],"members":{"domainName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DeleteDomainEntry":{"input":{"type":"structure","required":["domainName","domainEntry"],"members":{"domainName":{},"domainEntry":{"shape":"Sq"}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DeleteInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteInstanceSnapshot":{"input":{"type":"structure","required":["instanceSnapshotName"],"members":{"instanceSnapshotName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DeleteKeyPair":{"input":{"type":"structure","required":["keyPairName"],"members":{"keyPairName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"DetachStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"DownloadDefaultKeyPair":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"publicKeyBase64":{},"privateKeyBase64":{}}}},"GetActiveNames":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"activeNames":{"shape":"Sy"},"nextPageToken":{}}}},"GetBlueprints":{"input":{"type":"structure","members":{"includeInactive":{"type":"boolean"},"pageToken":{}}},"output":{"type":"structure","members":{"blueprints":{"type":"list","member":{"type":"structure","members":{"blueprintId":{},"name":{},"group":{},"type":{},"description":{},"isActive":{"type":"boolean"},"minPower":{"type":"integer"},"version":{},"versionCode":{},"productUrl":{},"licenseUrl":{},"platform":{}}}},"nextPageToken":{}}}},"GetBundles":{"input":{"type":"structure","members":{"includeInactive":{"type":"boolean"},"pageToken":{}}},"output":{"type":"structure","members":{"bundles":{"type":"list","member":{"type":"structure","members":{"price":{"type":"float"},"cpuCount":{"type":"integer"},"diskSizeInGb":{"type":"integer"},"bundleId":{},"instanceType":{},"isActive":{"type":"boolean"},"name":{},"power":{"type":"integer"},"ramSizeInGb":{"type":"float"},"transferPerMonthInGb":{"type":"integer"},"supportedPlatforms":{"type":"list","member":{}}}}},"nextPageToken":{}}}},"GetDomain":{"input":{"type":"structure","required":["domainName"],"members":{"domainName":{}}},"output":{"type":"structure","members":{"domain":{"shape":"S21"}}}},"GetDomains":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"domains":{"type":"list","member":{"shape":"S21"}},"nextPageToken":{}}}},"GetInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"instance":{"shape":"S28"}}}},"GetInstanceAccessDetails":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{},"protocol":{}}},"output":{"type":"structure","members":{"accessDetails":{"type":"structure","members":{"certKey":{},"expiresAt":{"type":"timestamp"},"ipAddress":{},"password":{},"passwordData":{"type":"structure","members":{"ciphertext":{},"keyPairName":{}}},"privateKey":{},"protocol":{},"instanceName":{},"username":{}}}}}},"GetInstanceMetricData":{"input":{"type":"structure","required":["instanceName","metricName","period","startTime","endTime","unit","statistics"],"members":{"instanceName":{},"metricName":{},"period":{"type":"integer"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"unit":{},"statistics":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"metricName":{},"metricData":{"type":"list","member":{"type":"structure","members":{"average":{"type":"double"},"maximum":{"type":"double"},"minimum":{"type":"double"},"sampleCount":{"type":"double"},"sum":{"type":"double"},"timestamp":{"type":"timestamp"},"unit":{}}}}}}},"GetInstancePortStates":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"portStates":{"type":"list","member":{"type":"structure","members":{"fromPort":{"type":"integer"},"toPort":{"type":"integer"},"protocol":{},"state":{}}}}}}},"GetInstanceSnapshot":{"input":{"type":"structure","required":["instanceSnapshotName"],"members":{"instanceSnapshotName":{}}},"output":{"type":"structure","members":{"instanceSnapshot":{"shape":"S38"}}}},"GetInstanceSnapshots":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"instanceSnapshots":{"type":"list","member":{"shape":"S38"}},"nextPageToken":{}}}},"GetInstanceState":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"state":{"shape":"S2k"}}}},"GetInstances":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"instances":{"type":"list","member":{"shape":"S28"}},"nextPageToken":{}}}},"GetKeyPair":{"input":{"type":"structure","required":["keyPairName"],"members":{"keyPairName":{}}},"output":{"type":"structure","members":{"keyPair":{"shape":"S14"}}}},"GetKeyPairs":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"keyPairs":{"type":"list","member":{"shape":"S14"}},"nextPageToken":{}}}},"GetOperation":{"input":{"type":"structure","required":["operationId"],"members":{"operationId":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"GetOperations":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"},"nextPageToken":{}}}},"GetOperationsForResource":{"input":{"type":"structure","required":["resourceName"],"members":{"resourceName":{},"pageToken":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"},"nextPageCount":{"deprecated":true},"nextPageToken":{}}}},"GetRegions":{"input":{"type":"structure","members":{"includeAvailabilityZones":{"type":"boolean"}}},"output":{"type":"structure","members":{"regions":{"type":"list","member":{"type":"structure","members":{"continentCode":{},"description":{},"displayName":{},"name":{},"availabilityZones":{"type":"list","member":{"type":"structure","members":{"zoneName":{},"state":{}}}}}}}}}},"GetStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"staticIp":{"shape":"S41"}}}},"GetStaticIps":{"input":{"type":"structure","members":{"pageToken":{}}},"output":{"type":"structure","members":{"staticIps":{"type":"list","member":{"shape":"S41"}},"nextPageToken":{}}}},"ImportKeyPair":{"input":{"type":"structure","required":["keyPairName","publicKeyBase64"],"members":{"keyPairName":{},"publicKeyBase64":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"IsVpcPeered":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"isPeered":{"type":"boolean"}}}},"OpenInstancePublicPorts":{"input":{"type":"structure","required":["portInfo","instanceName"],"members":{"portInfo":{"shape":"Si"},"instanceName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"PeerVpc":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"PutInstancePublicPorts":{"input":{"type":"structure","required":["portInfos","instanceName"],"members":{"portInfos":{"type":"list","member":{"shape":"Si"}},"instanceName":{}}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"RebootInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"ReleaseStaticIp":{"input":{"type":"structure","required":["staticIpName"],"members":{"staticIpName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"StartInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"StopInstance":{"input":{"type":"structure","required":["instanceName"],"members":{"instanceName":{}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}},"UnpeerVpc":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"operation":{"shape":"S5"}}}},"UpdateDomainEntry":{"input":{"type":"structure","required":["domainName","domainEntry"],"members":{"domainName":{},"domainEntry":{"shape":"Sq"}}},"output":{"type":"structure","members":{"operations":{"shape":"S4"}}}}},"shapes":{"S4":{"type":"list","member":{"shape":"S5"}},"S5":{"type":"structure","members":{"id":{},"resourceName":{},"resourceType":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"isTerminal":{"type":"boolean"},"operationDetails":{},"operationType":{},"status":{},"statusChangedAt":{"type":"timestamp"},"errorCode":{},"errorDetails":{}}},"S9":{"type":"structure","members":{"availabilityZone":{},"regionName":{}}},"Si":{"type":"structure","members":{"fromPort":{"type":"integer"},"toPort":{"type":"integer"},"protocol":{}}},"Sq":{"type":"structure","members":{"id":{},"name":{},"target":{},"type":{},"options":{"type":"map","key":{},"value":{}}}},"Sy":{"type":"list","member":{}},"S14":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"fingerprint":{}}},"S21":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"domainEntries":{"type":"list","member":{"shape":"Sq"}}}},"S28":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"blueprintId":{},"blueprintName":{},"bundleId":{},"isStaticIp":{"type":"boolean"},"privateIpAddress":{},"publicIpAddress":{},"ipv6Address":{},"hardware":{"type":"structure","members":{"cpuCount":{"type":"integer"},"disks":{"type":"list","member":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"sizeInGb":{"type":"integer"},"gbInUse":{"type":"integer"},"isSystemDisk":{"type":"boolean"},"iops":{"type":"integer"},"path":{},"attachedTo":{},"isAttached":{"type":"boolean"},"attachmentState":{}}}},"ramSizeInGb":{"type":"float"}}},"networking":{"type":"structure","members":{"monthlyTransfer":{"type":"structure","members":{"gbPerMonthAllocated":{"type":"integer"}}},"ports":{"type":"list","member":{"type":"structure","members":{"fromPort":{"type":"integer"},"toPort":{"type":"integer"},"protocol":{},"accessFrom":{},"accessType":{},"commonName":{},"accessDirection":{}}}}}},"state":{"shape":"S2k"},"username":{},"sshKeyName":{}}},"S2k":{"type":"structure","members":{"code":{"type":"integer"},"name":{}}},"S38":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"state":{},"progress":{},"fromInstanceName":{},"fromInstanceArn":{},"fromBlueprintId":{},"fromBundleId":{},"sizeInGb":{"type":"integer"}}},"S41":{"type":"structure","members":{"name":{},"arn":{},"supportCode":{},"createdAt":{"type":"timestamp"},"location":{"shape":"S9"},"resourceType":{},"ipAddress":{},"attachedTo":{},"isAttached":{"type":"boolean"}}}}}

/***/ }),
/* 275 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 276 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-03-28","endpointPrefix":"logs","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon CloudWatch Logs","signatureVersion":"v4","targetPrefix":"Logs_20140328","uid":"logs-2014-03-28"},"operations":{"AssociateKmsKey":{"input":{"type":"structure","required":["logGroupName","kmsKeyId"],"members":{"logGroupName":{},"kmsKeyId":{}}}},"CancelExportTask":{"input":{"type":"structure","required":["taskId"],"members":{"taskId":{}}}},"CreateExportTask":{"input":{"type":"structure","required":["logGroupName","from","to","destination"],"members":{"taskName":{},"logGroupName":{},"logStreamNamePrefix":{},"from":{"type":"long"},"to":{"type":"long"},"destination":{},"destinationPrefix":{}}},"output":{"type":"structure","members":{"taskId":{}}}},"CreateLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"kmsKeyId":{},"tags":{"shape":"Se"}}}},"CreateLogStream":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{}}}},"DeleteDestination":{"input":{"type":"structure","required":["destinationName"],"members":{"destinationName":{}}}},"DeleteLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}}},"DeleteLogStream":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{}}}},"DeleteMetricFilter":{"input":{"type":"structure","required":["logGroupName","filterName"],"members":{"logGroupName":{},"filterName":{}}}},"DeleteResourcePolicy":{"input":{"type":"structure","members":{"policyName":{}}}},"DeleteRetentionPolicy":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}}},"DeleteSubscriptionFilter":{"input":{"type":"structure","required":["logGroupName","filterName"],"members":{"logGroupName":{},"filterName":{}}}},"DescribeDestinations":{"input":{"type":"structure","members":{"DestinationNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"destinations":{"type":"list","member":{"shape":"Sx"}},"nextToken":{}}}},"DescribeExportTasks":{"input":{"type":"structure","members":{"taskId":{},"statusCode":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"exportTasks":{"type":"list","member":{"type":"structure","members":{"taskId":{},"taskName":{},"logGroupName":{},"from":{"type":"long"},"to":{"type":"long"},"destination":{},"destinationPrefix":{},"status":{"type":"structure","members":{"code":{},"message":{}}},"executionInfo":{"type":"structure","members":{"creationTime":{"type":"long"},"completionTime":{"type":"long"}}}}}},"nextToken":{}}}},"DescribeLogGroups":{"input":{"type":"structure","members":{"logGroupNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"logGroups":{"type":"list","member":{"type":"structure","members":{"logGroupName":{},"creationTime":{"type":"long"},"retentionInDays":{"type":"integer"},"metricFilterCount":{"type":"integer"},"arn":{},"storedBytes":{"type":"long"},"kmsKeyId":{}}}},"nextToken":{}}}},"DescribeLogStreams":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"logStreamNamePrefix":{},"orderBy":{},"descending":{"type":"boolean"},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"logStreams":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"creationTime":{"type":"long"},"firstEventTimestamp":{"type":"long"},"lastEventTimestamp":{"type":"long"},"lastIngestionTime":{"type":"long"},"uploadSequenceToken":{},"arn":{},"storedBytes":{"type":"long"}}}},"nextToken":{}}}},"DescribeMetricFilters":{"input":{"type":"structure","members":{"logGroupName":{},"filterNamePrefix":{},"nextToken":{},"limit":{"type":"integer"},"metricName":{},"metricNamespace":{}}},"output":{"type":"structure","members":{"metricFilters":{"type":"list","member":{"type":"structure","members":{"filterName":{},"filterPattern":{},"metricTransformations":{"shape":"S1v"},"creationTime":{"type":"long"},"logGroupName":{}}}},"nextToken":{}}}},"DescribeResourcePolicies":{"input":{"type":"structure","members":{"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"resourcePolicies":{"type":"list","member":{"shape":"S22"}},"nextToken":{}}}},"DescribeSubscriptionFilters":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"filterNamePrefix":{},"nextToken":{},"limit":{"type":"integer"}}},"output":{"type":"structure","members":{"subscriptionFilters":{"type":"list","member":{"type":"structure","members":{"filterName":{},"logGroupName":{},"filterPattern":{},"destinationArn":{},"roleArn":{},"distribution":{},"creationTime":{"type":"long"}}}},"nextToken":{}}}},"DisassociateKmsKey":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}}},"FilterLogEvents":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{},"logStreamNames":{"type":"list","member":{}},"startTime":{"type":"long"},"endTime":{"type":"long"},"filterPattern":{},"nextToken":{},"limit":{"type":"integer"},"interleaved":{"type":"boolean"}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"timestamp":{"type":"long"},"message":{},"ingestionTime":{"type":"long"},"eventId":{}}}},"searchedLogStreams":{"type":"list","member":{"type":"structure","members":{"logStreamName":{},"searchedCompletely":{"type":"boolean"}}}},"nextToken":{}}}},"GetLogEvents":{"input":{"type":"structure","required":["logGroupName","logStreamName"],"members":{"logGroupName":{},"logStreamName":{},"startTime":{"type":"long"},"endTime":{"type":"long"},"nextToken":{},"limit":{"type":"integer"},"startFromHead":{"type":"boolean"}}},"output":{"type":"structure","members":{"events":{"type":"list","member":{"type":"structure","members":{"timestamp":{"type":"long"},"message":{},"ingestionTime":{"type":"long"}}}},"nextForwardToken":{},"nextBackwardToken":{}}}},"ListTagsLogGroup":{"input":{"type":"structure","required":["logGroupName"],"members":{"logGroupName":{}}},"output":{"type":"structure","members":{"tags":{"shape":"Se"}}}},"PutDestination":{"input":{"type":"structure","required":["destinationName","targetArn","roleArn"],"members":{"destinationName":{},"targetArn":{},"roleArn":{}}},"output":{"type":"structure","members":{"destination":{"shape":"Sx"}}}},"PutDestinationPolicy":{"input":{"type":"structure","required":["destinationName","accessPolicy"],"members":{"destinationName":{},"accessPolicy":{}}}},"PutLogEvents":{"input":{"type":"structure","required":["logGroupName","logStreamName","logEvents"],"members":{"logGroupName":{},"logStreamName":{},"logEvents":{"type":"list","member":{"type":"structure","required":["timestamp","message"],"members":{"timestamp":{"type":"long"},"message":{}}}},"sequenceToken":{}}},"output":{"type":"structure","members":{"nextSequenceToken":{},"rejectedLogEventsInfo":{"type":"structure","members":{"tooNewLogEventStartIndex":{"type":"integer"},"tooOldLogEventEndIndex":{"type":"integer"},"expiredLogEventEndIndex":{"type":"integer"}}}}}},"PutMetricFilter":{"input":{"type":"structure","required":["logGroupName","filterName","filterPattern","metricTransformations"],"members":{"logGroupName":{},"filterName":{},"filterPattern":{},"metricTransformations":{"shape":"S1v"}}}},"PutResourcePolicy":{"input":{"type":"structure","members":{"policyName":{},"policyDocument":{}}},"output":{"type":"structure","members":{"resourcePolicy":{"shape":"S22"}}}},"PutRetentionPolicy":{"input":{"type":"structure","required":["logGroupName","retentionInDays"],"members":{"logGroupName":{},"retentionInDays":{"type":"integer"}}}},"PutSubscriptionFilter":{"input":{"type":"structure","required":["logGroupName","filterName","filterPattern","destinationArn"],"members":{"logGroupName":{},"filterName":{},"filterPattern":{},"destinationArn":{},"roleArn":{},"distribution":{}}}},"TagLogGroup":{"input":{"type":"structure","required":["logGroupName","tags"],"members":{"logGroupName":{},"tags":{"shape":"Se"}}}},"TestMetricFilter":{"input":{"type":"structure","required":["filterPattern","logEventMessages"],"members":{"filterPattern":{},"logEventMessages":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"matches":{"type":"list","member":{"type":"structure","members":{"eventNumber":{"type":"long"},"eventMessage":{},"extractedValues":{"type":"map","key":{},"value":{}}}}}}}},"UntagLogGroup":{"input":{"type":"structure","required":["logGroupName","tags"],"members":{"logGroupName":{},"tags":{"type":"list","member":{}}}}}},"shapes":{"Se":{"type":"map","key":{},"value":{}},"Sx":{"type":"structure","members":{"destinationName":{},"targetArn":{},"roleArn":{},"accessPolicy":{},"arn":{},"creationTime":{"type":"long"}}},"S1v":{"type":"list","member":{"type":"structure","required":["metricName","metricNamespace","metricValue"],"members":{"metricName":{},"metricNamespace":{},"metricValue":{},"defaultValue":{"type":"double"}}}},"S22":{"type":"structure","members":{"policyName":{},"policyDocument":{},"lastUpdatedTime":{"type":"long"}}}}}

/***/ }),
/* 277 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDestinations":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"destinations"},"DescribeLogGroups":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"logGroups"},"DescribeLogStreams":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"logStreams"},"DescribeMetricFilters":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"metricFilters"},"DescribeSubscriptionFilters":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":"subscriptionFilters"},"FilterLogEvents":{"input_token":"nextToken","limit_key":"limit","output_token":"nextToken","result_key":["events","searchedLogStreams"]},"GetLogEvents":{"input_token":"nextToken","limit_key":"limit","output_token":"nextForwardToken","result_key":"events"}}}

/***/ }),
/* 278 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"machinelearning-2014-12-12","apiVersion":"2014-12-12","endpointPrefix":"machinelearning","jsonVersion":"1.1","serviceFullName":"Amazon Machine Learning","signatureVersion":"v4","targetPrefix":"AmazonML_20141212","protocol":"json"},"operations":{"AddTags":{"input":{"type":"structure","required":["Tags","ResourceId","ResourceType"],"members":{"Tags":{"shape":"S2"},"ResourceId":{},"ResourceType":{}}},"output":{"type":"structure","members":{"ResourceId":{},"ResourceType":{}}}},"CreateBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId","MLModelId","BatchPredictionDataSourceId","OutputUri"],"members":{"BatchPredictionId":{},"BatchPredictionName":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"OutputUri":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}}},"CreateDataSourceFromRDS":{"input":{"type":"structure","required":["DataSourceId","RDSData","RoleARN"],"members":{"DataSourceId":{},"DataSourceName":{},"RDSData":{"type":"structure","required":["DatabaseInformation","SelectSqlQuery","DatabaseCredentials","S3StagingLocation","ResourceRole","ServiceRole","SubnetId","SecurityGroupIds"],"members":{"DatabaseInformation":{"shape":"Sf"},"SelectSqlQuery":{},"DatabaseCredentials":{"type":"structure","required":["Username","Password"],"members":{"Username":{},"Password":{}}},"S3StagingLocation":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaUri":{},"ResourceRole":{},"ServiceRole":{},"SubnetId":{},"SecurityGroupIds":{"type":"list","member":{}}}},"RoleARN":{},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"CreateDataSourceFromRedshift":{"input":{"type":"structure","required":["DataSourceId","DataSpec","RoleARN"],"members":{"DataSourceId":{},"DataSourceName":{},"DataSpec":{"type":"structure","required":["DatabaseInformation","SelectSqlQuery","DatabaseCredentials","S3StagingLocation"],"members":{"DatabaseInformation":{"shape":"Sy"},"SelectSqlQuery":{},"DatabaseCredentials":{"type":"structure","required":["Username","Password"],"members":{"Username":{},"Password":{}}},"S3StagingLocation":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaUri":{}}},"RoleARN":{},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"CreateDataSourceFromS3":{"input":{"type":"structure","required":["DataSourceId","DataSpec"],"members":{"DataSourceId":{},"DataSourceName":{},"DataSpec":{"type":"structure","required":["DataLocationS3"],"members":{"DataLocationS3":{},"DataRearrangement":{},"DataSchema":{},"DataSchemaLocationS3":{}}},"ComputeStatistics":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"CreateEvaluation":{"input":{"type":"structure","required":["EvaluationId","MLModelId","EvaluationDataSourceId"],"members":{"EvaluationId":{},"EvaluationName":{},"MLModelId":{},"EvaluationDataSourceId":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}}},"CreateMLModel":{"input":{"type":"structure","required":["MLModelId","MLModelType","TrainingDataSourceId"],"members":{"MLModelId":{},"MLModelName":{},"MLModelType":{},"Parameters":{"shape":"S1d"},"TrainingDataSourceId":{},"Recipe":{},"RecipeUri":{}}},"output":{"type":"structure","members":{"MLModelId":{}}}},"CreateRealtimeEndpoint":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{},"RealtimeEndpointInfo":{"shape":"S1j"}}}},"DeleteBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId"],"members":{"BatchPredictionId":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}}},"DeleteDataSource":{"input":{"type":"structure","required":["DataSourceId"],"members":{"DataSourceId":{}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"DeleteEvaluation":{"input":{"type":"structure","required":["EvaluationId"],"members":{"EvaluationId":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}}},"DeleteMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{}}}},"DeleteRealtimeEndpoint":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{}}},"output":{"type":"structure","members":{"MLModelId":{},"RealtimeEndpointInfo":{"shape":"S1j"}}}},"DeleteTags":{"input":{"type":"structure","required":["TagKeys","ResourceId","ResourceType"],"members":{"TagKeys":{"type":"list","member":{}},"ResourceId":{},"ResourceType":{}}},"output":{"type":"structure","members":{"ResourceId":{},"ResourceType":{}}}},"DescribeBatchPredictions":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"BatchPredictionId":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"OutputUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"TotalRecordCount":{"type":"long"},"InvalidRecordCount":{"type":"long"}}}},"NextToken":{}}}},"DescribeDataSources":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"DataSourceId":{},"DataLocationS3":{},"DataRearrangement":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"DataSizeInBytes":{"type":"long"},"NumberOfFiles":{"type":"long"},"Name":{},"Status":{},"Message":{},"RedshiftMetadata":{"shape":"S2i"},"RDSMetadata":{"shape":"S2j"},"RoleARN":{},"ComputeStatistics":{"type":"boolean"},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeEvaluations":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"EvaluationId":{},"MLModelId":{},"EvaluationDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"PerformanceMetrics":{"shape":"S2q"},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeMLModels":{"input":{"type":"structure","members":{"FilterVariable":{},"EQ":{},"GT":{},"LT":{},"GE":{},"LE":{},"NE":{},"Prefix":{},"SortOrder":{},"NextToken":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"MLModelId":{},"TrainingDataSourceId":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"SizeInBytes":{"type":"long"},"EndpointInfo":{"shape":"S1j"},"TrainingParameters":{"shape":"S1d"},"InputDataLocationS3":{},"Algorithm":{},"MLModelType":{},"ScoreThreshold":{"type":"float"},"ScoreThresholdLastUpdatedAt":{"type":"timestamp"},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeTags":{"input":{"type":"structure","required":["ResourceId","ResourceType"],"members":{"ResourceId":{},"ResourceType":{}}},"output":{"type":"structure","members":{"ResourceId":{},"ResourceType":{},"Tags":{"shape":"S2"}}}},"GetBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId"],"members":{"BatchPredictionId":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{},"MLModelId":{},"BatchPredictionDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"OutputUri":{},"LogUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"TotalRecordCount":{"type":"long"},"InvalidRecordCount":{"type":"long"}}}},"GetDataSource":{"input":{"type":"structure","required":["DataSourceId"],"members":{"DataSourceId":{},"Verbose":{"type":"boolean"}}},"output":{"type":"structure","members":{"DataSourceId":{},"DataLocationS3":{},"DataRearrangement":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"DataSizeInBytes":{"type":"long"},"NumberOfFiles":{"type":"long"},"Name":{},"Status":{},"LogUri":{},"Message":{},"RedshiftMetadata":{"shape":"S2i"},"RDSMetadata":{"shape":"S2j"},"RoleARN":{},"ComputeStatistics":{"type":"boolean"},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"DataSourceSchema":{}}}},"GetEvaluation":{"input":{"type":"structure","required":["EvaluationId"],"members":{"EvaluationId":{}}},"output":{"type":"structure","members":{"EvaluationId":{},"MLModelId":{},"EvaluationDataSourceId":{},"InputDataLocationS3":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"PerformanceMetrics":{"shape":"S2q"},"LogUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"}}}},"GetMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{},"Verbose":{"type":"boolean"}}},"output":{"type":"structure","members":{"MLModelId":{},"TrainingDataSourceId":{},"CreatedByIamUser":{},"CreatedAt":{"type":"timestamp"},"LastUpdatedAt":{"type":"timestamp"},"Name":{},"Status":{},"SizeInBytes":{"type":"long"},"EndpointInfo":{"shape":"S1j"},"TrainingParameters":{"shape":"S1d"},"InputDataLocationS3":{},"MLModelType":{},"ScoreThreshold":{"type":"float"},"ScoreThresholdLastUpdatedAt":{"type":"timestamp"},"LogUri":{},"Message":{},"ComputeTime":{"type":"long"},"FinishedAt":{"type":"timestamp"},"StartedAt":{"type":"timestamp"},"Recipe":{},"Schema":{}}}},"Predict":{"input":{"type":"structure","required":["MLModelId","Record","PredictEndpoint"],"members":{"MLModelId":{},"Record":{"type":"map","key":{},"value":{}},"PredictEndpoint":{}}},"output":{"type":"structure","members":{"Prediction":{"type":"structure","members":{"predictedLabel":{},"predictedValue":{"type":"float"},"predictedScores":{"type":"map","key":{},"value":{"type":"float"}},"details":{"type":"map","key":{},"value":{}}}}}}},"UpdateBatchPrediction":{"input":{"type":"structure","required":["BatchPredictionId","BatchPredictionName"],"members":{"BatchPredictionId":{},"BatchPredictionName":{}}},"output":{"type":"structure","members":{"BatchPredictionId":{}}}},"UpdateDataSource":{"input":{"type":"structure","required":["DataSourceId","DataSourceName"],"members":{"DataSourceId":{},"DataSourceName":{}}},"output":{"type":"structure","members":{"DataSourceId":{}}}},"UpdateEvaluation":{"input":{"type":"structure","required":["EvaluationId","EvaluationName"],"members":{"EvaluationId":{},"EvaluationName":{}}},"output":{"type":"structure","members":{"EvaluationId":{}}}},"UpdateMLModel":{"input":{"type":"structure","required":["MLModelId"],"members":{"MLModelId":{},"MLModelName":{},"ScoreThreshold":{"type":"float"}}},"output":{"type":"structure","members":{"MLModelId":{}}}}},"shapes":{"S2":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"Sf":{"type":"structure","required":["InstanceIdentifier","DatabaseName"],"members":{"InstanceIdentifier":{},"DatabaseName":{}}},"Sy":{"type":"structure","required":["DatabaseName","ClusterIdentifier"],"members":{"DatabaseName":{},"ClusterIdentifier":{}}},"S1d":{"type":"map","key":{},"value":{}},"S1j":{"type":"structure","members":{"PeakRequestsPerSecond":{"type":"integer"},"CreatedAt":{"type":"timestamp"},"EndpointUrl":{},"EndpointStatus":{}}},"S2i":{"type":"structure","members":{"RedshiftDatabase":{"shape":"Sy"},"DatabaseUserName":{},"SelectSqlQuery":{}}},"S2j":{"type":"structure","members":{"Database":{"shape":"Sf"},"DatabaseUserName":{},"SelectSqlQuery":{},"ResourceRole":{},"ServiceRole":{},"DataPipelineId":{}}},"S2q":{"type":"structure","members":{"Properties":{"type":"map","key":{},"value":{}}}}},"examples":{}}

/***/ }),
/* 279 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeBatchPredictions":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"},"DescribeDataSources":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"},"DescribeEvaluations":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"},"DescribeMLModels":{"limit_key":"Limit","output_token":"NextToken","input_token":"NextToken","result_key":"Results"}}}

/***/ }),
/* 280 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"DataSourceAvailable":{"delay":30,"operation":"DescribeDataSources","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]},"MLModelAvailable":{"delay":30,"operation":"DescribeMLModels","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]},"EvaluationAvailable":{"delay":30,"operation":"DescribeEvaluations","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]},"BatchPredictionAvailable":{"delay":30,"operation":"DescribeBatchPredictions","maxAttempts":60,"acceptors":[{"expected":"COMPLETED","matcher":"pathAll","state":"success","argument":"Results[].Status"},{"expected":"FAILED","matcher":"pathAny","state":"failure","argument":"Results[].Status"}]}}}

/***/ }),
/* 281 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-07-01","endpointPrefix":"marketplacecommerceanalytics","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Marketplace Commerce Analytics","signatureVersion":"v4","signingName":"marketplacecommerceanalytics","targetPrefix":"MarketplaceCommerceAnalytics20150701","uid":"marketplacecommerceanalytics-2015-07-01"},"operations":{"GenerateDataSet":{"input":{"type":"structure","required":["dataSetType","dataSetPublicationDate","roleNameArn","destinationS3BucketName","snsTopicArn"],"members":{"dataSetType":{},"dataSetPublicationDate":{"type":"timestamp"},"roleNameArn":{},"destinationS3BucketName":{},"destinationS3Prefix":{},"snsTopicArn":{},"customerDefinedValues":{"shape":"S8"}}},"output":{"type":"structure","members":{"dataSetRequestId":{}}}},"StartSupportDataExport":{"input":{"type":"structure","required":["dataSetType","fromDate","roleNameArn","destinationS3BucketName","snsTopicArn"],"members":{"dataSetType":{},"fromDate":{"type":"timestamp"},"roleNameArn":{},"destinationS3BucketName":{},"destinationS3Prefix":{},"snsTopicArn":{},"customerDefinedValues":{"shape":"S8"}}},"output":{"type":"structure","members":{"dataSetRequestId":{}}}}},"shapes":{"S8":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 282 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 283 */
/***/ (function(module, exports) {

module.exports = {"acm":{"name":"ACM","cors":true},"apigateway":{"name":"APIGateway","cors":true},"applicationautoscaling":{"prefix":"application-autoscaling","name":"ApplicationAutoScaling","cors":true},"appstream":{"name":"AppStream"},"autoscaling":{"name":"AutoScaling","cors":true},"batch":{"name":"Batch"},"budgets":{"name":"Budgets"},"clouddirectory":{"name":"CloudDirectory"},"cloudformation":{"name":"CloudFormation","cors":true},"cloudfront":{"name":"CloudFront","versions":["2013-05-12*","2013-11-11*","2014-05-31*","2014-10-21*","2014-11-06*","2015-04-17*","2015-07-27*","2015-09-17*","2016-01-13*","2016-01-28*","2016-08-01*","2016-08-20*","2016-09-07*","2016-09-29*","2016-11-25*"],"cors":true},"cloudhsm":{"name":"CloudHSM","cors":true},"cloudsearch":{"name":"CloudSearch"},"cloudsearchdomain":{"name":"CloudSearchDomain"},"cloudtrail":{"name":"CloudTrail","cors":true},"cloudwatch":{"prefix":"monitoring","name":"CloudWatch","cors":true},"cloudwatchevents":{"prefix":"events","name":"CloudWatchEvents","versions":["2014-02-03*"],"cors":true},"cloudwatchlogs":{"prefix":"logs","name":"CloudWatchLogs","cors":true},"codebuild":{"name":"CodeBuild"},"codecommit":{"name":"CodeCommit","cors":true},"codedeploy":{"name":"CodeDeploy","cors":true},"codepipeline":{"name":"CodePipeline","cors":true},"cognitoidentity":{"prefix":"cognito-identity","name":"CognitoIdentity","cors":true},"cognitoidentityserviceprovider":{"prefix":"cognito-idp","name":"CognitoIdentityServiceProvider","cors":true},"cognitosync":{"prefix":"cognito-sync","name":"CognitoSync","cors":true},"configservice":{"prefix":"config","name":"ConfigService","cors":true},"cur":{"name":"CUR","cors":true},"datapipeline":{"name":"DataPipeline"},"devicefarm":{"name":"DeviceFarm","cors":true},"directconnect":{"name":"DirectConnect","cors":true},"directoryservice":{"prefix":"ds","name":"DirectoryService"},"discovery":{"name":"Discovery"},"dms":{"name":"DMS"},"dynamodb":{"name":"DynamoDB","cors":true},"dynamodbstreams":{"prefix":"streams.dynamodb","name":"DynamoDBStreams","cors":true},"ec2":{"name":"EC2","versions":["2013-06-15*","2013-10-15*","2014-02-01*","2014-05-01*","2014-06-15*","2014-09-01*","2014-10-01*","2015-03-01*","2015-04-15*","2015-10-01*","2016-04-01*","2016-09-15*"],"cors":true},"ecr":{"name":"ECR","cors":true},"ecs":{"name":"ECS","cors":true},"efs":{"prefix":"elasticfilesystem","name":"EFS","cors":true},"elasticache":{"name":"ElastiCache","versions":["2012-11-15*","2014-03-24*","2014-07-15*","2014-09-30*"],"cors":true},"elasticbeanstalk":{"name":"ElasticBeanstalk","cors":true},"elb":{"prefix":"elasticloadbalancing","name":"ELB","cors":true},"elbv2":{"prefix":"elasticloadbalancingv2","name":"ELBv2","cors":true},"emr":{"prefix":"elasticmapreduce","name":"EMR","cors":true},"es":{"name":"ES"},"elastictranscoder":{"name":"ElasticTranscoder","cors":true},"firehose":{"name":"Firehose","cors":true},"gamelift":{"name":"GameLift","cors":true},"glacier":{"name":"Glacier"},"health":{"name":"Health"},"iam":{"name":"IAM"},"importexport":{"name":"ImportExport"},"inspector":{"name":"Inspector","versions":["2015-08-18*"],"cors":true},"iot":{"name":"Iot","cors":true},"iotdata":{"prefix":"iot-data","name":"IotData","cors":true},"kinesis":{"name":"Kinesis","cors":true},"kinesisanalytics":{"name":"KinesisAnalytics"},"kms":{"name":"KMS","cors":true},"lambda":{"name":"Lambda","cors":true},"lexruntime":{"prefix":"runtime.lex","name":"LexRuntime","cors":true},"lightsail":{"name":"Lightsail"},"machinelearning":{"name":"MachineLearning","cors":true},"marketplacecommerceanalytics":{"name":"MarketplaceCommerceAnalytics","cors":true},"marketplacemetering":{"prefix":"meteringmarketplace","name":"MarketplaceMetering"},"mturk":{"prefix":"mturk-requester","name":"MTurk","cors":true},"mobileanalytics":{"name":"MobileAnalytics","cors":true},"opsworks":{"name":"OpsWorks","cors":true},"opsworkscm":{"name":"OpsWorksCM"},"organizations":{"name":"Organizations"},"pinpoint":{"name":"Pinpoint"},"polly":{"name":"Polly","cors":true},"rds":{"name":"RDS","versions":["2014-09-01*"],"cors":true},"redshift":{"name":"Redshift","cors":true},"rekognition":{"name":"Rekognition","cors":true},"resourcegroupstaggingapi":{"name":"ResourceGroupsTaggingAPI"},"route53":{"name":"Route53","cors":true},"route53domains":{"name":"Route53Domains","cors":true},"s3":{"name":"S3","dualstackAvailable":true,"cors":true},"servicecatalog":{"name":"ServiceCatalog","cors":true},"ses":{"prefix":"email","name":"SES","cors":true},"shield":{"name":"Shield"},"simpledb":{"prefix":"sdb","name":"SimpleDB"},"sms":{"name":"SMS"},"snowball":{"name":"Snowball"},"sns":{"name":"SNS","cors":true},"sqs":{"name":"SQS","cors":true},"ssm":{"name":"SSM","cors":true},"storagegateway":{"name":"StorageGateway","cors":true},"stepfunctions":{"prefix":"states","name":"StepFunctions"},"sts":{"name":"STS","cors":true},"support":{"name":"Support"},"swf":{"name":"SWF"},"xray":{"name":"XRay"},"waf":{"name":"WAF","cors":true},"wafregional":{"prefix":"waf-regional","name":"WAFRegional"},"workdocs":{"name":"WorkDocs","cors":true},"workspaces":{"name":"WorkSpaces"},"codestar":{"name":"CodeStar"},"lexmodelbuildingservice":{"prefix":"lex-models","name":"LexModelBuildingService","cors":true},"marketplaceentitlementservice":{"prefix":"entitlement.marketplace","name":"MarketplaceEntitlementService"},"athena":{"name":"Athena"},"greengrass":{"name":"Greengrass"},"dax":{"name":"DAX"},"migrationhub":{"prefix":"AWSMigrationHub","name":"MigrationHub"},"cloudhsmv2":{"name":"CloudHSMV2"},"glue":{"name":"Glue"},"mobile":{"name":"Mobile"},"pricing":{"name":"Pricing"}}

/***/ }),
/* 284 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"meteringmarketplace-2016-01-14","apiVersion":"2016-01-14","endpointPrefix":"metering.marketplace","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWSMarketplace Metering","signatureVersion":"v4","signingName":"aws-marketplace","targetPrefix":"AWSMPMeteringService"},"operations":{"BatchMeterUsage":{"input":{"type":"structure","required":["UsageRecords","ProductCode"],"members":{"UsageRecords":{"shape":"S2"},"ProductCode":{}}},"output":{"type":"structure","members":{"Results":{"type":"list","member":{"type":"structure","members":{"UsageRecord":{"shape":"S3"},"MeteringRecordId":{},"Status":{}}}},"UnprocessedRecords":{"shape":"S2"}}}},"MeterUsage":{"input":{"type":"structure","required":["ProductCode","Timestamp","UsageDimension","UsageQuantity","DryRun"],"members":{"ProductCode":{},"Timestamp":{"type":"timestamp"},"UsageDimension":{},"UsageQuantity":{"type":"integer"},"DryRun":{"type":"boolean"}}},"output":{"type":"structure","members":{"MeteringRecordId":{}}}},"ResolveCustomer":{"input":{"type":"structure","required":["RegistrationToken"],"members":{"RegistrationToken":{}}},"output":{"type":"structure","members":{"CustomerIdentifier":{},"ProductCode":{}}}}},"shapes":{"S2":{"type":"list","member":{"shape":"S3"}},"S3":{"type":"structure","required":["Timestamp","CustomerIdentifier","Dimension","Quantity"],"members":{"Timestamp":{"type":"timestamp"},"CustomerIdentifier":{},"Dimension":{},"Quantity":{"type":"integer"}}}}}

/***/ }),
/* 285 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-07-01","endpointPrefix":"mobile","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"AWS Mobile","signatureVersion":"v4","signingName":"AWSMobileHubService","uid":"mobile-2017-07-01"},"operations":{"CreateProject":{"http":{"requestUri":"/projects"},"input":{"type":"structure","members":{"name":{"location":"querystring","locationName":"name"},"region":{"location":"querystring","locationName":"region"},"contents":{"type":"blob"},"snapshotId":{"location":"querystring","locationName":"snapshotId"}},"payload":"contents"},"output":{"type":"structure","members":{"details":{"shape":"S7"}}}},"DeleteProject":{"http":{"method":"DELETE","requestUri":"/projects/{projectId}"},"input":{"type":"structure","required":["projectId"],"members":{"projectId":{"location":"uri","locationName":"projectId"}}},"output":{"type":"structure","members":{"deletedResources":{"shape":"Sc"},"orphanedResources":{"shape":"Sc"}}}},"DescribeBundle":{"http":{"method":"GET","requestUri":"/bundles/{bundleId}"},"input":{"type":"structure","required":["bundleId"],"members":{"bundleId":{"location":"uri","locationName":"bundleId"}}},"output":{"type":"structure","members":{"details":{"shape":"Sq"}}}},"DescribeProject":{"http":{"method":"GET","requestUri":"/project"},"input":{"type":"structure","required":["projectId"],"members":{"projectId":{"location":"querystring","locationName":"projectId"},"syncFromResources":{"location":"querystring","locationName":"syncFromResources","type":"boolean"}}},"output":{"type":"structure","members":{"details":{"shape":"S7"}}}},"ExportBundle":{"http":{"requestUri":"/bundles/{bundleId}"},"input":{"type":"structure","required":["bundleId"],"members":{"bundleId":{"location":"uri","locationName":"bundleId"},"projectId":{"location":"querystring","locationName":"projectId"},"platform":{"location":"querystring","locationName":"platform"}}},"output":{"type":"structure","members":{"downloadUrl":{}}}},"ExportProject":{"http":{"requestUri":"/exports/{projectId}"},"input":{"type":"structure","required":["projectId"],"members":{"projectId":{"location":"uri","locationName":"projectId"}}},"output":{"type":"structure","members":{"downloadUrl":{},"shareUrl":{},"snapshotId":{}}}},"ListBundles":{"http":{"method":"GET","requestUri":"/bundles"},"input":{"type":"structure","members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"bundleList":{"type":"list","member":{"shape":"Sq"}},"nextToken":{}}}},"ListProjects":{"http":{"method":"GET","requestUri":"/projects"},"input":{"type":"structure","members":{"maxResults":{"location":"querystring","locationName":"maxResults","type":"integer"},"nextToken":{"location":"querystring","locationName":"nextToken"}}},"output":{"type":"structure","members":{"projects":{"type":"list","member":{"type":"structure","members":{"name":{},"projectId":{}}}},"nextToken":{}}}},"UpdateProject":{"http":{"requestUri":"/update"},"input":{"type":"structure","required":["projectId"],"members":{"contents":{"type":"blob"},"projectId":{"location":"querystring","locationName":"projectId"}},"payload":"contents"},"output":{"type":"structure","members":{"details":{"shape":"S7"}}}}},"shapes":{"S7":{"type":"structure","members":{"name":{},"projectId":{},"region":{},"state":{},"createdDate":{"type":"timestamp"},"lastUpdatedDate":{"type":"timestamp"},"consoleUrl":{},"resources":{"shape":"Sc"}}},"Sc":{"type":"list","member":{"type":"structure","members":{"type":{},"name":{},"arn":{},"feature":{},"attributes":{"type":"map","key":{},"value":{}}}}},"Sq":{"type":"structure","members":{"bundleId":{},"title":{},"version":{},"description":{},"iconUrl":{},"availablePlatforms":{"type":"list","member":{}}}}}}

/***/ }),
/* 286 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListBundles":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"},"ListProjects":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults"}}}

/***/ }),
/* 287 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-06-05","endpointPrefix":"mobileanalytics","serviceFullName":"Amazon Mobile Analytics","signatureVersion":"v4","protocol":"rest-json"},"operations":{"PutEvents":{"http":{"requestUri":"/2014-06-05/events","responseCode":202},"input":{"type":"structure","required":["events","clientContext"],"members":{"events":{"type":"list","member":{"type":"structure","required":["eventType","timestamp"],"members":{"eventType":{},"timestamp":{},"session":{"type":"structure","members":{"id":{},"duration":{"type":"long"},"startTimestamp":{},"stopTimestamp":{}}},"version":{},"attributes":{"type":"map","key":{},"value":{}},"metrics":{"type":"map","key":{},"value":{"type":"double"}}}}},"clientContext":{"location":"header","locationName":"x-amz-Client-Context"},"clientContextEncoding":{"location":"header","locationName":"x-amz-Client-Context-Encoding"}}}}},"shapes":{}}

/***/ }),
/* 288 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2010-08-01","endpointPrefix":"monitoring","protocol":"query","serviceAbbreviation":"CloudWatch","serviceFullName":"Amazon CloudWatch","signatureVersion":"v4","uid":"monitoring-2010-08-01","xmlNamespace":"http://monitoring.amazonaws.com/doc/2010-08-01/"},"operations":{"DeleteAlarms":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}}},"DeleteDashboards":{"input":{"type":"structure","members":{"DashboardNames":{"type":"list","member":{}}}},"output":{"resultWrapper":"DeleteDashboardsResult","type":"structure","members":{}}},"DescribeAlarmHistory":{"input":{"type":"structure","members":{"AlarmName":{},"HistoryItemType":{},"StartDate":{"type":"timestamp"},"EndDate":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeAlarmHistoryResult","type":"structure","members":{"AlarmHistoryItems":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"Timestamp":{"type":"timestamp"},"HistoryItemType":{},"HistorySummary":{},"HistoryData":{}}}},"NextToken":{}}}},"DescribeAlarms":{"input":{"type":"structure","members":{"AlarmNames":{"shape":"S2"},"AlarmNamePrefix":{},"StateValue":{},"ActionPrefix":{},"MaxRecords":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"DescribeAlarmsResult","type":"structure","members":{"MetricAlarms":{"shape":"Sn"},"NextToken":{}}}},"DescribeAlarmsForMetric":{"input":{"type":"structure","required":["MetricName","Namespace"],"members":{"MetricName":{},"Namespace":{},"Statistic":{},"ExtendedStatistic":{},"Dimensions":{"shape":"S10"},"Period":{"type":"integer"},"Unit":{}}},"output":{"resultWrapper":"DescribeAlarmsForMetricResult","type":"structure","members":{"MetricAlarms":{"shape":"Sn"}}}},"DisableAlarmActions":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}}},"EnableAlarmActions":{"input":{"type":"structure","required":["AlarmNames"],"members":{"AlarmNames":{"shape":"S2"}}}},"GetDashboard":{"input":{"type":"structure","members":{"DashboardName":{}}},"output":{"resultWrapper":"GetDashboardResult","type":"structure","members":{"DashboardArn":{},"DashboardBody":{},"DashboardName":{}}}},"GetMetricStatistics":{"input":{"type":"structure","required":["Namespace","MetricName","StartTime","EndTime","Period"],"members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S10"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Period":{"type":"integer"},"Statistics":{"type":"list","member":{}},"ExtendedStatistics":{"type":"list","member":{}},"Unit":{}}},"output":{"resultWrapper":"GetMetricStatisticsResult","type":"structure","members":{"Label":{},"Datapoints":{"type":"list","member":{"type":"structure","members":{"Timestamp":{"type":"timestamp"},"SampleCount":{"type":"double"},"Average":{"type":"double"},"Sum":{"type":"double"},"Minimum":{"type":"double"},"Maximum":{"type":"double"},"Unit":{},"ExtendedStatistics":{"type":"map","key":{},"value":{"type":"double"}}},"xmlOrder":["Timestamp","SampleCount","Average","Sum","Minimum","Maximum","Unit","ExtendedStatistics"]}}}}},"ListDashboards":{"input":{"type":"structure","members":{"DashboardNamePrefix":{},"NextToken":{}}},"output":{"resultWrapper":"ListDashboardsResult","type":"structure","members":{"DashboardEntries":{"type":"list","member":{"type":"structure","members":{"DashboardName":{},"DashboardArn":{},"LastModified":{"type":"timestamp"},"Size":{"type":"long"}}}},"NextToken":{}}}},"ListMetrics":{"input":{"type":"structure","members":{"Namespace":{},"MetricName":{},"Dimensions":{"type":"list","member":{"type":"structure","required":["Name"],"members":{"Name":{},"Value":{}}}},"NextToken":{}}},"output":{"resultWrapper":"ListMetricsResult","type":"structure","members":{"Metrics":{"type":"list","member":{"type":"structure","members":{"Namespace":{},"MetricName":{},"Dimensions":{"shape":"S10"}},"xmlOrder":["Namespace","MetricName","Dimensions"]}},"NextToken":{}},"xmlOrder":["Metrics","NextToken"]}},"PutDashboard":{"input":{"type":"structure","members":{"DashboardName":{},"DashboardBody":{}}},"output":{"resultWrapper":"PutDashboardResult","type":"structure","members":{"DashboardValidationMessages":{"type":"list","member":{"type":"structure","members":{"DataPath":{},"Message":{}}}}}}},"PutMetricAlarm":{"input":{"type":"structure","required":["AlarmName","MetricName","Namespace","Period","EvaluationPeriods","Threshold","ComparisonOperator"],"members":{"AlarmName":{},"AlarmDescription":{},"ActionsEnabled":{"type":"boolean"},"OKActions":{"shape":"Ss"},"AlarmActions":{"shape":"Ss"},"InsufficientDataActions":{"shape":"Ss"},"MetricName":{},"Namespace":{},"Statistic":{},"ExtendedStatistic":{},"Dimensions":{"shape":"S10"},"Period":{"type":"integer"},"Unit":{},"EvaluationPeriods":{"type":"integer"},"Threshold":{"type":"double"},"ComparisonOperator":{},"TreatMissingData":{},"EvaluateLowSampleCountPercentile":{}}}},"PutMetricData":{"input":{"type":"structure","required":["Namespace","MetricData"],"members":{"Namespace":{},"MetricData":{"type":"list","member":{"type":"structure","required":["MetricName"],"members":{"MetricName":{},"Dimensions":{"shape":"S10"},"Timestamp":{"type":"timestamp"},"Value":{"type":"double"},"StatisticValues":{"type":"structure","required":["SampleCount","Sum","Minimum","Maximum"],"members":{"SampleCount":{"type":"double"},"Sum":{"type":"double"},"Minimum":{"type":"double"},"Maximum":{"type":"double"}}},"Unit":{},"StorageResolution":{"type":"integer"}}}}}}},"SetAlarmState":{"input":{"type":"structure","required":["AlarmName","StateValue","StateReason"],"members":{"AlarmName":{},"StateValue":{},"StateReason":{},"StateReasonData":{}}}}},"shapes":{"S2":{"type":"list","member":{}},"Sn":{"type":"list","member":{"type":"structure","members":{"AlarmName":{},"AlarmArn":{},"AlarmDescription":{},"AlarmConfigurationUpdatedTimestamp":{"type":"timestamp"},"ActionsEnabled":{"type":"boolean"},"OKActions":{"shape":"Ss"},"AlarmActions":{"shape":"Ss"},"InsufficientDataActions":{"shape":"Ss"},"StateValue":{},"StateReason":{},"StateReasonData":{},"StateUpdatedTimestamp":{"type":"timestamp"},"MetricName":{},"Namespace":{},"Statistic":{},"ExtendedStatistic":{},"Dimensions":{"shape":"S10"},"Period":{"type":"integer"},"Unit":{},"EvaluationPeriods":{"type":"integer"},"Threshold":{"type":"double"},"ComparisonOperator":{},"TreatMissingData":{},"EvaluateLowSampleCountPercentile":{}},"xmlOrder":["AlarmName","AlarmArn","AlarmDescription","AlarmConfigurationUpdatedTimestamp","ActionsEnabled","OKActions","AlarmActions","InsufficientDataActions","StateValue","StateReason","StateReasonData","StateUpdatedTimestamp","MetricName","Namespace","Statistic","Dimensions","Period","Unit","EvaluationPeriods","Threshold","ComparisonOperator","ExtendedStatistic","TreatMissingData","EvaluateLowSampleCountPercentile"]}},"Ss":{"type":"list","member":{}},"S10":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}},"xmlOrder":["Name","Value"]}}}}

/***/ }),
/* 289 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeAlarmHistory":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"AlarmHistoryItems"},"DescribeAlarms":{"input_token":"NextToken","limit_key":"MaxRecords","output_token":"NextToken","result_key":"MetricAlarms"},"DescribeAlarmsForMetric":{"result_key":"MetricAlarms"},"ListMetrics":{"input_token":"NextToken","output_token":"NextToken","result_key":"Metrics"}}}

/***/ }),
/* 290 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"AlarmExists":{"delay":5,"maxAttempts":40,"operation":"DescribeAlarms","acceptors":[{"matcher":"path","expected":true,"argument":"length(MetricAlarms[]) > `0`","state":"success"}]}}}

/***/ }),
/* 291 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-01-17","endpointPrefix":"mturk-requester","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon MTurk","serviceFullName":"Amazon Mechanical Turk","signatureVersion":"v4","targetPrefix":"MTurkRequesterServiceV20170117","uid":"mturk-requester-2017-01-17"},"operations":{"AcceptQualificationRequest":{"input":{"type":"structure","required":["QualificationRequestId"],"members":{"QualificationRequestId":{},"IntegerValue":{"type":"integer"}}},"output":{"type":"structure","members":{}}},"ApproveAssignment":{"input":{"type":"structure","required":["AssignmentId"],"members":{"AssignmentId":{},"RequesterFeedback":{},"OverrideRejection":{"type":"boolean"}}},"output":{"type":"structure","members":{}},"idempotent":true},"AssociateQualificationWithWorker":{"input":{"type":"structure","required":["QualificationTypeId","WorkerId"],"members":{"QualificationTypeId":{},"WorkerId":{},"IntegerValue":{"type":"integer"},"SendNotification":{"type":"boolean"}}},"output":{"type":"structure","members":{}}},"CreateAdditionalAssignmentsForHIT":{"input":{"type":"structure","required":["HITId","NumberOfAdditionalAssignments"],"members":{"HITId":{},"NumberOfAdditionalAssignments":{"type":"integer"},"UniqueRequestToken":{}}},"output":{"type":"structure","members":{}}},"CreateHIT":{"input":{"type":"structure","required":["LifetimeInSeconds","AssignmentDurationInSeconds","Reward","Title","Description"],"members":{"MaxAssignments":{"type":"integer"},"AutoApprovalDelayInSeconds":{"type":"long"},"LifetimeInSeconds":{"type":"long"},"AssignmentDurationInSeconds":{"type":"long"},"Reward":{},"Title":{},"Keywords":{},"Description":{},"Question":{},"RequesterAnnotation":{},"QualificationRequirements":{"shape":"Si"},"UniqueRequestToken":{},"AssignmentReviewPolicy":{"shape":"Sp"},"HITReviewPolicy":{"shape":"Sp"},"HITLayoutId":{},"HITLayoutParameters":{"shape":"Sv"}}},"output":{"type":"structure","members":{"HIT":{"shape":"Sy"}}}},"CreateHITType":{"input":{"type":"structure","required":["AssignmentDurationInSeconds","Reward","Title","Description"],"members":{"AutoApprovalDelayInSeconds":{"type":"long"},"AssignmentDurationInSeconds":{"type":"long"},"Reward":{},"Title":{},"Keywords":{},"Description":{},"QualificationRequirements":{"shape":"Si"}}},"output":{"type":"structure","members":{"HITTypeId":{}}},"idempotent":true},"CreateHITWithHITType":{"input":{"type":"structure","required":["HITTypeId","LifetimeInSeconds"],"members":{"HITTypeId":{},"MaxAssignments":{"type":"integer"},"LifetimeInSeconds":{"type":"long"},"Question":{},"RequesterAnnotation":{},"UniqueRequestToken":{},"AssignmentReviewPolicy":{"shape":"Sp"},"HITReviewPolicy":{"shape":"Sp"},"HITLayoutId":{},"HITLayoutParameters":{"shape":"Sv"}}},"output":{"type":"structure","members":{"HIT":{"shape":"Sy"}}}},"CreateQualificationType":{"input":{"type":"structure","required":["Name","Description","QualificationTypeStatus"],"members":{"Name":{},"Keywords":{},"Description":{},"QualificationTypeStatus":{},"RetryDelayInSeconds":{"type":"long"},"Test":{},"AnswerKey":{},"TestDurationInSeconds":{"type":"long"},"AutoGranted":{"type":"boolean"},"AutoGrantedValue":{"type":"integer"}}},"output":{"type":"structure","members":{"QualificationType":{"shape":"S19"}}}},"CreateWorkerBlock":{"input":{"type":"structure","required":["WorkerId","Reason"],"members":{"WorkerId":{},"Reason":{}}},"output":{"type":"structure","members":{}}},"DeleteHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DeleteQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DeleteWorkerBlock":{"input":{"type":"structure","required":["WorkerId"],"members":{"WorkerId":{},"Reason":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"DisassociateQualificationFromWorker":{"input":{"type":"structure","required":["WorkerId","QualificationTypeId"],"members":{"WorkerId":{},"QualificationTypeId":{},"Reason":{}}},"output":{"type":"structure","members":{}}},"GetAccountBalance":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"AvailableBalance":{},"OnHoldBalance":{}}},"idempotent":true},"GetAssignment":{"input":{"type":"structure","required":["AssignmentId"],"members":{"AssignmentId":{}}},"output":{"type":"structure","members":{"Assignment":{"shape":"S1o"},"HIT":{"shape":"Sy"}}},"idempotent":true},"GetFileUploadURL":{"input":{"type":"structure","required":["AssignmentId","QuestionIdentifier"],"members":{"AssignmentId":{},"QuestionIdentifier":{}}},"output":{"type":"structure","members":{"FileUploadURL":{}}},"idempotent":true},"GetHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{}}},"output":{"type":"structure","members":{"HIT":{"shape":"Sy"}}},"idempotent":true},"GetQualificationScore":{"input":{"type":"structure","required":["QualificationTypeId","WorkerId"],"members":{"QualificationTypeId":{},"WorkerId":{}}},"output":{"type":"structure","members":{"Qualification":{"shape":"S1w"}}},"idempotent":true},"GetQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{}}},"output":{"type":"structure","members":{"QualificationType":{"shape":"S19"}}},"idempotent":true},"ListAssignmentsForHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{},"NextToken":{},"MaxResults":{"type":"integer"},"AssignmentStatuses":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"Assignments":{"type":"list","member":{"shape":"S1o"}}}},"idempotent":true},"ListBonusPayments":{"input":{"type":"structure","members":{"HITId":{},"AssignmentId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NumResults":{"type":"integer"},"NextToken":{},"BonusPayments":{"type":"list","member":{"type":"structure","members":{"WorkerId":{},"BonusAmount":{},"AssignmentId":{},"Reason":{},"GrantTime":{"type":"timestamp"}}}}}},"idempotent":true},"ListHITs":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"HITs":{"shape":"S2c"}}},"idempotent":true},"ListHITsForQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"HITs":{"shape":"S2c"}}},"idempotent":true},"ListQualificationRequests":{"input":{"type":"structure","members":{"QualificationTypeId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NumResults":{"type":"integer"},"NextToken":{},"QualificationRequests":{"type":"list","member":{"type":"structure","members":{"QualificationRequestId":{},"QualificationTypeId":{},"WorkerId":{},"Test":{},"Answer":{},"SubmitTime":{"type":"timestamp"}}}}}},"idempotent":true},"ListQualificationTypes":{"input":{"type":"structure","required":["MustBeRequestable"],"members":{"Query":{},"MustBeRequestable":{"type":"boolean"},"MustBeOwnedByCaller":{"type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NumResults":{"type":"integer"},"NextToken":{},"QualificationTypes":{"type":"list","member":{"shape":"S19"}}}},"idempotent":true},"ListReviewPolicyResultsForHIT":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{},"PolicyLevels":{"type":"list","member":{}},"RetrieveActions":{"type":"boolean"},"RetrieveResults":{"type":"boolean"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"HITId":{},"AssignmentReviewPolicy":{"shape":"Sp"},"HITReviewPolicy":{"shape":"Sp"},"AssignmentReviewReport":{"shape":"S2q"},"HITReviewReport":{"shape":"S2q"},"NextToken":{}}},"idempotent":true},"ListReviewableHITs":{"input":{"type":"structure","members":{"HITTypeId":{},"Status":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"HITs":{"shape":"S2c"}}},"idempotent":true},"ListWorkerBlocks":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"WorkerBlocks":{"type":"list","member":{"type":"structure","members":{"WorkerId":{},"Reason":{}}}}}},"idempotent":true},"ListWorkersWithQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{},"Status":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"NextToken":{},"NumResults":{"type":"integer"},"Qualifications":{"type":"list","member":{"shape":"S1w"}}}},"idempotent":true},"NotifyWorkers":{"input":{"type":"structure","required":["Subject","MessageText","WorkerIds"],"members":{"Subject":{},"MessageText":{},"WorkerIds":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"NotifyWorkersFailureStatuses":{"type":"list","member":{"type":"structure","members":{"NotifyWorkersFailureCode":{},"NotifyWorkersFailureMessage":{},"WorkerId":{}}}}}}},"RejectAssignment":{"input":{"type":"structure","required":["AssignmentId","RequesterFeedback"],"members":{"AssignmentId":{},"RequesterFeedback":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"RejectQualificationRequest":{"input":{"type":"structure","required":["QualificationRequestId"],"members":{"QualificationRequestId":{},"Reason":{}}},"output":{"type":"structure","members":{}}},"SendBonus":{"input":{"type":"structure","required":["WorkerId","BonusAmount","AssignmentId","Reason"],"members":{"WorkerId":{},"BonusAmount":{},"AssignmentId":{},"Reason":{},"UniqueRequestToken":{}}},"output":{"type":"structure","members":{}}},"SendTestEventNotification":{"input":{"type":"structure","required":["Notification","TestEventType"],"members":{"Notification":{"shape":"S3j"},"TestEventType":{}}},"output":{"type":"structure","members":{}}},"UpdateExpirationForHIT":{"input":{"type":"structure","required":["HITId","ExpireAt"],"members":{"HITId":{},"ExpireAt":{"type":"timestamp"}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateHITReviewStatus":{"input":{"type":"structure","required":["HITId"],"members":{"HITId":{},"Revert":{"type":"boolean"}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateHITTypeOfHIT":{"input":{"type":"structure","required":["HITId","HITTypeId"],"members":{"HITId":{},"HITTypeId":{}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateNotificationSettings":{"input":{"type":"structure","required":["HITTypeId"],"members":{"HITTypeId":{},"Notification":{"shape":"S3j"},"Active":{"type":"boolean"}}},"output":{"type":"structure","members":{}},"idempotent":true},"UpdateQualificationType":{"input":{"type":"structure","required":["QualificationTypeId"],"members":{"QualificationTypeId":{},"Description":{},"QualificationTypeStatus":{},"Test":{},"AnswerKey":{},"TestDurationInSeconds":{"type":"long"},"RetryDelayInSeconds":{"type":"long"},"AutoGranted":{"type":"boolean"},"AutoGrantedValue":{"type":"integer"}}},"output":{"type":"structure","members":{"QualificationType":{"shape":"S19"}}}}},"shapes":{"Si":{"type":"list","member":{"type":"structure","required":["QualificationTypeId","Comparator"],"members":{"QualificationTypeId":{},"Comparator":{},"IntegerValues":{"type":"list","member":{"type":"integer"}},"LocaleValues":{"type":"list","member":{"shape":"Sn"}},"RequiredToPreview":{"type":"boolean"}}}},"Sn":{"type":"structure","required":["Country"],"members":{"Country":{},"Subdivision":{}}},"Sp":{"type":"structure","required":["PolicyName"],"members":{"PolicyName":{},"Parameters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"shape":"Ss"},"MapEntries":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"shape":"Ss"}}}}}}}}},"Ss":{"type":"list","member":{}},"Sv":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}},"Sy":{"type":"structure","members":{"HITId":{},"HITTypeId":{},"HITGroupId":{},"HITLayoutId":{},"CreationTime":{"type":"timestamp"},"Title":{},"Description":{},"Question":{},"Keywords":{},"HITStatus":{},"MaxAssignments":{"type":"integer"},"Reward":{},"AutoApprovalDelayInSeconds":{"type":"long"},"Expiration":{"type":"timestamp"},"AssignmentDurationInSeconds":{"type":"long"},"RequesterAnnotation":{},"QualificationRequirements":{"shape":"Si"},"HITReviewStatus":{},"NumberOfAssignmentsPending":{"type":"integer"},"NumberOfAssignmentsAvailable":{"type":"integer"},"NumberOfAssignmentsCompleted":{"type":"integer"}}},"S19":{"type":"structure","members":{"QualificationTypeId":{},"CreationTime":{"type":"timestamp"},"Name":{},"Description":{},"Keywords":{},"QualificationTypeStatus":{},"Test":{},"TestDurationInSeconds":{"type":"long"},"AnswerKey":{},"RetryDelayInSeconds":{"type":"long"},"IsRequestable":{"type":"boolean"},"AutoGranted":{"type":"boolean"},"AutoGrantedValue":{"type":"integer"}}},"S1o":{"type":"structure","members":{"AssignmentId":{},"WorkerId":{},"HITId":{},"AssignmentStatus":{},"AutoApprovalTime":{"type":"timestamp"},"AcceptTime":{"type":"timestamp"},"SubmitTime":{"type":"timestamp"},"ApprovalTime":{"type":"timestamp"},"RejectionTime":{"type":"timestamp"},"Deadline":{"type":"timestamp"},"Answer":{},"RequesterFeedback":{}}},"S1w":{"type":"structure","members":{"QualificationTypeId":{},"WorkerId":{},"GrantTime":{"type":"timestamp"},"IntegerValue":{"type":"integer"},"LocaleValue":{"shape":"Sn"},"Status":{}}},"S2c":{"type":"list","member":{"shape":"Sy"}},"S2q":{"type":"structure","members":{"ReviewResults":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"SubjectId":{},"SubjectType":{},"QuestionId":{},"Key":{},"Value":{}}}},"ReviewActions":{"type":"list","member":{"type":"structure","members":{"ActionId":{},"ActionName":{},"TargetId":{},"TargetType":{},"Status":{},"CompleteTime":{"type":"timestamp"},"Result":{},"ErrorCode":{}}}}}},"S3j":{"type":"structure","required":["Destination","Transport","Version","EventTypes"],"members":{"Destination":{},"Transport":{},"Version":{},"EventTypes":{"type":"list","member":{}}}}}}

/***/ }),
/* 292 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListAssignmentsForHIT":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListBonusPayments":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListHITs":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListHITsForQualificationType":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListQualificationRequests":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListQualificationTypes":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListReviewPolicyResultsForHIT":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListReviewableHITs":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListWorkerBlocks":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListWorkersWithQualificationType":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 293 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-02-18","endpointPrefix":"opsworks","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS OpsWorks","signatureVersion":"v4","targetPrefix":"OpsWorks_20130218","uid":"opsworks-2013-02-18"},"operations":{"AssignInstance":{"input":{"type":"structure","required":["InstanceId","LayerIds"],"members":{"InstanceId":{},"LayerIds":{"shape":"S3"}}}},"AssignVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"InstanceId":{}}}},"AssociateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{},"InstanceId":{}}}},"AttachElasticLoadBalancer":{"input":{"type":"structure","required":["ElasticLoadBalancerName","LayerId"],"members":{"ElasticLoadBalancerName":{},"LayerId":{}}}},"CloneStack":{"input":{"type":"structure","required":["SourceStackId","ServiceRoleArn"],"members":{"SourceStackId":{},"Name":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"ClonePermissions":{"type":"boolean"},"CloneAppIds":{"shape":"S3"},"DefaultRootDeviceType":{},"AgentVersion":{}}},"output":{"type":"structure","members":{"StackId":{}}}},"CreateApp":{"input":{"type":"structure","required":["StackId","Name","Type"],"members":{"StackId":{},"Shortname":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"Environment":{"shape":"So"}}},"output":{"type":"structure","members":{"AppId":{}}}},"CreateDeployment":{"input":{"type":"structure","required":["StackId","Command"],"members":{"StackId":{},"AppId":{},"InstanceIds":{"shape":"S3"},"LayerIds":{"shape":"S3"},"Command":{"shape":"Ss"},"Comment":{},"CustomJson":{}}},"output":{"type":"structure","members":{"DeploymentId":{}}}},"CreateInstance":{"input":{"type":"structure","required":["StackId","LayerIds","InstanceType"],"members":{"StackId":{},"LayerIds":{"shape":"S3"},"InstanceType":{},"AutoScalingType":{},"Hostname":{},"Os":{},"AmiId":{},"SshKeyName":{},"AvailabilityZone":{},"VirtualizationType":{},"SubnetId":{},"Architecture":{},"RootDeviceType":{},"BlockDeviceMappings":{"shape":"Sz"},"InstallUpdatesOnBoot":{"type":"boolean"},"EbsOptimized":{"type":"boolean"},"AgentVersion":{},"Tenancy":{}}},"output":{"type":"structure","members":{"InstanceId":{}}}},"CreateLayer":{"input":{"type":"structure","required":["StackId","Type","Name","Shortname"],"members":{"StackId":{},"Type":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CloudWatchLogsConfiguration":{"shape":"S19"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S1f"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"CustomRecipes":{"shape":"S1h"},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1i"}}},"output":{"type":"structure","members":{"LayerId":{}}}},"CreateStack":{"input":{"type":"structure","required":["Name","Region","ServiceRoleArn","DefaultInstanceProfileArn"],"members":{"Name":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"DefaultRootDeviceType":{},"AgentVersion":{}}},"output":{"type":"structure","members":{"StackId":{}}}},"CreateUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}},"output":{"type":"structure","members":{"IamUserArn":{}}}},"DeleteApp":{"input":{"type":"structure","required":["AppId"],"members":{"AppId":{}}}},"DeleteInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"DeleteElasticIp":{"type":"boolean"},"DeleteVolumes":{"type":"boolean"}}}},"DeleteLayer":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{}}}},"DeleteStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}}},"DeleteUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{}}}},"DeregisterEcsCluster":{"input":{"type":"structure","required":["EcsClusterArn"],"members":{"EcsClusterArn":{}}}},"DeregisterElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{}}}},"DeregisterInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"DeregisterRdsDbInstance":{"input":{"type":"structure","required":["RdsDbInstanceArn"],"members":{"RdsDbInstanceArn":{}}}},"DeregisterVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{}}}},"DescribeAgentVersions":{"input":{"type":"structure","members":{"StackId":{},"ConfigurationManager":{"shape":"Sa"}}},"output":{"type":"structure","members":{"AgentVersions":{"type":"list","member":{"type":"structure","members":{"Version":{},"ConfigurationManager":{"shape":"Sa"}}}}}}},"DescribeApps":{"input":{"type":"structure","members":{"StackId":{},"AppIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Apps":{"type":"list","member":{"type":"structure","members":{"AppId":{},"StackId":{},"Shortname":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"CreatedAt":{},"Environment":{"shape":"So"}}}}}}},"DescribeCommands":{"input":{"type":"structure","members":{"DeploymentId":{},"InstanceId":{},"CommandIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Commands":{"type":"list","member":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"DeploymentId":{},"CreatedAt":{},"AcknowledgedAt":{},"CompletedAt":{},"Status":{},"ExitCode":{"type":"integer"},"LogUrl":{},"Type":{}}}}}}},"DescribeDeployments":{"input":{"type":"structure","members":{"StackId":{},"AppId":{},"DeploymentIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Deployments":{"type":"list","member":{"type":"structure","members":{"DeploymentId":{},"StackId":{},"AppId":{},"CreatedAt":{},"CompletedAt":{},"Duration":{"type":"integer"},"IamUserArn":{},"Comment":{},"Command":{"shape":"Ss"},"Status":{},"CustomJson":{},"InstanceIds":{"shape":"S3"}}}}}}},"DescribeEcsClusters":{"input":{"type":"structure","members":{"EcsClusterArns":{"shape":"S3"},"StackId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"EcsClusters":{"type":"list","member":{"type":"structure","members":{"EcsClusterArn":{},"EcsClusterName":{},"StackId":{},"RegisteredAt":{}}}},"NextToken":{}}}},"DescribeElasticIps":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"Ips":{"shape":"S3"}}},"output":{"type":"structure","members":{"ElasticIps":{"type":"list","member":{"type":"structure","members":{"Ip":{},"Name":{},"Domain":{},"Region":{},"InstanceId":{}}}}}}},"DescribeElasticLoadBalancers":{"input":{"type":"structure","members":{"StackId":{},"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"ElasticLoadBalancers":{"type":"list","member":{"type":"structure","members":{"ElasticLoadBalancerName":{},"Region":{},"DnsName":{},"StackId":{},"LayerId":{},"VpcId":{},"AvailabilityZones":{"shape":"S3"},"SubnetIds":{"shape":"S3"},"Ec2InstanceIds":{"shape":"S3"}}}}}}},"DescribeInstances":{"input":{"type":"structure","members":{"StackId":{},"LayerId":{},"InstanceIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Instances":{"type":"list","member":{"type":"structure","members":{"AgentVersion":{},"AmiId":{},"Architecture":{},"Arn":{},"AutoScalingType":{},"AvailabilityZone":{},"BlockDeviceMappings":{"shape":"Sz"},"CreatedAt":{},"EbsOptimized":{"type":"boolean"},"Ec2InstanceId":{},"EcsClusterArn":{},"EcsContainerInstanceArn":{},"ElasticIp":{},"Hostname":{},"InfrastructureClass":{},"InstallUpdatesOnBoot":{"type":"boolean"},"InstanceId":{},"InstanceProfileArn":{},"InstanceType":{},"LastServiceErrorId":{},"LayerIds":{"shape":"S3"},"Os":{},"Platform":{},"PrivateDns":{},"PrivateIp":{},"PublicDns":{},"PublicIp":{},"RegisteredBy":{},"ReportedAgentVersion":{},"ReportedOs":{"type":"structure","members":{"Family":{},"Name":{},"Version":{}}},"RootDeviceType":{},"RootDeviceVolumeId":{},"SecurityGroupIds":{"shape":"S3"},"SshHostDsaKeyFingerprint":{},"SshHostRsaKeyFingerprint":{},"SshKeyName":{},"StackId":{},"Status":{},"SubnetId":{},"Tenancy":{},"VirtualizationType":{}}}}}}},"DescribeLayers":{"input":{"type":"structure","members":{"StackId":{},"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Layers":{"type":"list","member":{"type":"structure","members":{"Arn":{},"StackId":{},"LayerId":{},"Type":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CloudWatchLogsConfiguration":{"shape":"S19"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"DefaultSecurityGroupNames":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S1f"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"DefaultRecipes":{"shape":"S1h"},"CustomRecipes":{"shape":"S1h"},"CreatedAt":{},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1i"}}}}}}},"DescribeLoadBasedAutoScaling":{"input":{"type":"structure","required":["LayerIds"],"members":{"LayerIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"LoadBasedAutoScalingConfigurations":{"type":"list","member":{"type":"structure","members":{"LayerId":{},"Enable":{"type":"boolean"},"UpScaling":{"shape":"S36"},"DownScaling":{"shape":"S36"}}}}}}},"DescribeMyUserProfile":{"output":{"type":"structure","members":{"UserProfile":{"type":"structure","members":{"IamUserArn":{},"Name":{},"SshUsername":{},"SshPublicKey":{}}}}}},"DescribePermissions":{"input":{"type":"structure","members":{"IamUserArn":{},"StackId":{}}},"output":{"type":"structure","members":{"Permissions":{"type":"list","member":{"type":"structure","members":{"StackId":{},"IamUserArn":{},"AllowSsh":{"type":"boolean"},"AllowSudo":{"type":"boolean"},"Level":{}}}}}}},"DescribeRaidArrays":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"RaidArrayIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"RaidArrays":{"type":"list","member":{"type":"structure","members":{"RaidArrayId":{},"InstanceId":{},"Name":{},"RaidLevel":{"type":"integer"},"NumberOfDisks":{"type":"integer"},"Size":{"type":"integer"},"Device":{},"MountPoint":{},"AvailabilityZone":{},"CreatedAt":{},"StackId":{},"VolumeType":{},"Iops":{"type":"integer"}}}}}}},"DescribeRdsDbInstances":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"RdsDbInstanceArns":{"shape":"S3"}}},"output":{"type":"structure","members":{"RdsDbInstances":{"type":"list","member":{"type":"structure","members":{"RdsDbInstanceArn":{},"DbInstanceIdentifier":{},"DbUser":{},"DbPassword":{},"Region":{},"Address":{},"Engine":{},"StackId":{},"MissingOnRds":{"type":"boolean"}}}}}}},"DescribeServiceErrors":{"input":{"type":"structure","members":{"StackId":{},"InstanceId":{},"ServiceErrorIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"ServiceErrors":{"type":"list","member":{"type":"structure","members":{"ServiceErrorId":{},"StackId":{},"InstanceId":{},"Type":{},"Message":{},"CreatedAt":{}}}}}}},"DescribeStackProvisioningParameters":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"output":{"type":"structure","members":{"AgentInstallerUrl":{},"Parameters":{"type":"map","key":{},"value":{}}}}},"DescribeStackSummary":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}},"output":{"type":"structure","members":{"StackSummary":{"type":"structure","members":{"StackId":{},"Name":{},"Arn":{},"LayersCount":{"type":"integer"},"AppsCount":{"type":"integer"},"InstancesCount":{"type":"structure","members":{"Assigning":{"type":"integer"},"Booting":{"type":"integer"},"ConnectionLost":{"type":"integer"},"Deregistering":{"type":"integer"},"Online":{"type":"integer"},"Pending":{"type":"integer"},"Rebooting":{"type":"integer"},"Registered":{"type":"integer"},"Registering":{"type":"integer"},"Requested":{"type":"integer"},"RunningSetup":{"type":"integer"},"SetupFailed":{"type":"integer"},"ShuttingDown":{"type":"integer"},"StartFailed":{"type":"integer"},"Stopped":{"type":"integer"},"Stopping":{"type":"integer"},"Terminated":{"type":"integer"},"Terminating":{"type":"integer"},"Unassigning":{"type":"integer"}}}}}}}},"DescribeStacks":{"input":{"type":"structure","members":{"StackIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Stacks":{"type":"list","member":{"type":"structure","members":{"StackId":{},"Name":{},"Arn":{},"Region":{},"VpcId":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"UseOpsworksSecurityGroups":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"CreatedAt":{},"DefaultRootDeviceType":{},"AgentVersion":{}}}}}}},"DescribeTimeBasedAutoScaling":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"TimeBasedAutoScalingConfigurations":{"type":"list","member":{"type":"structure","members":{"InstanceId":{},"AutoScalingSchedule":{"shape":"S46"}}}}}}},"DescribeUserProfiles":{"input":{"type":"structure","members":{"IamUserArns":{"shape":"S3"}}},"output":{"type":"structure","members":{"UserProfiles":{"type":"list","member":{"type":"structure","members":{"IamUserArn":{},"Name":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}}}}}},"DescribeVolumes":{"input":{"type":"structure","members":{"InstanceId":{},"StackId":{},"RaidArrayId":{},"VolumeIds":{"shape":"S3"}}},"output":{"type":"structure","members":{"Volumes":{"type":"list","member":{"type":"structure","members":{"VolumeId":{},"Ec2VolumeId":{},"Name":{},"RaidArrayId":{},"InstanceId":{},"Status":{},"Size":{"type":"integer"},"Device":{},"MountPoint":{},"Region":{},"AvailabilityZone":{},"VolumeType":{},"Iops":{"type":"integer"}}}}}}},"DetachElasticLoadBalancer":{"input":{"type":"structure","required":["ElasticLoadBalancerName","LayerId"],"members":{"ElasticLoadBalancerName":{},"LayerId":{}}}},"DisassociateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{}}}},"GetHostnameSuggestion":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{}}},"output":{"type":"structure","members":{"LayerId":{},"Hostname":{}}}},"GrantAccess":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"ValidForInMinutes":{"type":"integer"}}},"output":{"type":"structure","members":{"TemporaryCredential":{"type":"structure","members":{"Username":{},"Password":{},"ValidForInMinutes":{"type":"integer"},"InstanceId":{}}}}}},"ListTags":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Tags":{"shape":"S4v"},"NextToken":{}}}},"RebootInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"RegisterEcsCluster":{"input":{"type":"structure","required":["EcsClusterArn","StackId"],"members":{"EcsClusterArn":{},"StackId":{}}},"output":{"type":"structure","members":{"EcsClusterArn":{}}}},"RegisterElasticIp":{"input":{"type":"structure","required":["ElasticIp","StackId"],"members":{"ElasticIp":{},"StackId":{}}},"output":{"type":"structure","members":{"ElasticIp":{}}}},"RegisterInstance":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"Hostname":{},"PublicIp":{},"PrivateIp":{},"RsaPublicKey":{},"RsaPublicKeyFingerprint":{},"InstanceIdentity":{"type":"structure","members":{"Document":{},"Signature":{}}}}},"output":{"type":"structure","members":{"InstanceId":{}}}},"RegisterRdsDbInstance":{"input":{"type":"structure","required":["StackId","RdsDbInstanceArn","DbUser","DbPassword"],"members":{"StackId":{},"RdsDbInstanceArn":{},"DbUser":{},"DbPassword":{}}}},"RegisterVolume":{"input":{"type":"structure","required":["StackId"],"members":{"Ec2VolumeId":{},"StackId":{}}},"output":{"type":"structure","members":{"VolumeId":{}}}},"SetLoadBasedAutoScaling":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{},"Enable":{"type":"boolean"},"UpScaling":{"shape":"S36"},"DownScaling":{"shape":"S36"}}}},"SetPermission":{"input":{"type":"structure","required":["StackId","IamUserArn"],"members":{"StackId":{},"IamUserArn":{},"AllowSsh":{"type":"boolean"},"AllowSudo":{"type":"boolean"},"Level":{}}}},"SetTimeBasedAutoScaling":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"AutoScalingSchedule":{"shape":"S46"}}}},"StartInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"StartStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}}},"StopInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"StopStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{}}}},"TagResource":{"input":{"type":"structure","required":["ResourceArn","Tags"],"members":{"ResourceArn":{},"Tags":{"shape":"S4v"}}}},"UnassignInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}}},"UnassignVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{}}}},"UntagResource":{"input":{"type":"structure","required":["ResourceArn","TagKeys"],"members":{"ResourceArn":{},"TagKeys":{"type":"list","member":{}}}}},"UpdateApp":{"input":{"type":"structure","required":["AppId"],"members":{"AppId":{},"Name":{},"Description":{},"DataSources":{"shape":"Si"},"Type":{},"AppSource":{"shape":"Sd"},"Domains":{"shape":"S3"},"EnableSsl":{"type":"boolean"},"SslConfiguration":{"shape":"Sl"},"Attributes":{"shape":"Sm"},"Environment":{"shape":"So"}}}},"UpdateElasticIp":{"input":{"type":"structure","required":["ElasticIp"],"members":{"ElasticIp":{},"Name":{}}}},"UpdateInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"LayerIds":{"shape":"S3"},"InstanceType":{},"AutoScalingType":{},"Hostname":{},"Os":{},"AmiId":{},"SshKeyName":{},"Architecture":{},"InstallUpdatesOnBoot":{"type":"boolean"},"EbsOptimized":{"type":"boolean"},"AgentVersion":{}}}},"UpdateLayer":{"input":{"type":"structure","required":["LayerId"],"members":{"LayerId":{},"Name":{},"Shortname":{},"Attributes":{"shape":"S17"},"CloudWatchLogsConfiguration":{"shape":"S19"},"CustomInstanceProfileArn":{},"CustomJson":{},"CustomSecurityGroupIds":{"shape":"S3"},"Packages":{"shape":"S3"},"VolumeConfigurations":{"shape":"S1f"},"EnableAutoHealing":{"type":"boolean"},"AutoAssignElasticIps":{"type":"boolean"},"AutoAssignPublicIps":{"type":"boolean"},"CustomRecipes":{"shape":"S1h"},"InstallUpdatesOnBoot":{"type":"boolean"},"UseEbsOptimizedInstances":{"type":"boolean"},"LifecycleEventConfiguration":{"shape":"S1i"}}}},"UpdateMyUserProfile":{"input":{"type":"structure","members":{"SshPublicKey":{}}}},"UpdateRdsDbInstance":{"input":{"type":"structure","required":["RdsDbInstanceArn"],"members":{"RdsDbInstanceArn":{},"DbUser":{},"DbPassword":{}}}},"UpdateStack":{"input":{"type":"structure","required":["StackId"],"members":{"StackId":{},"Name":{},"Attributes":{"shape":"S8"},"ServiceRoleArn":{},"DefaultInstanceProfileArn":{},"DefaultOs":{},"HostnameTheme":{},"DefaultAvailabilityZone":{},"DefaultSubnetId":{},"CustomJson":{},"ConfigurationManager":{"shape":"Sa"},"ChefConfiguration":{"shape":"Sb"},"UseCustomCookbooks":{"type":"boolean"},"CustomCookbooksSource":{"shape":"Sd"},"DefaultSshKeyName":{},"DefaultRootDeviceType":{},"UseOpsworksSecurityGroups":{"type":"boolean"},"AgentVersion":{}}}},"UpdateUserProfile":{"input":{"type":"structure","required":["IamUserArn"],"members":{"IamUserArn":{},"SshUsername":{},"SshPublicKey":{},"AllowSelfManagement":{"type":"boolean"}}}},"UpdateVolume":{"input":{"type":"structure","required":["VolumeId"],"members":{"VolumeId":{},"Name":{},"MountPoint":{}}}}},"shapes":{"S3":{"type":"list","member":{}},"S8":{"type":"map","key":{},"value":{}},"Sa":{"type":"structure","members":{"Name":{},"Version":{}}},"Sb":{"type":"structure","members":{"ManageBerkshelf":{"type":"boolean"},"BerkshelfVersion":{}}},"Sd":{"type":"structure","members":{"Type":{},"Url":{},"Username":{},"Password":{},"SshKey":{},"Revision":{}}},"Si":{"type":"list","member":{"type":"structure","members":{"Type":{},"Arn":{},"DatabaseName":{}}}},"Sl":{"type":"structure","required":["Certificate","PrivateKey"],"members":{"Certificate":{},"PrivateKey":{},"Chain":{}}},"Sm":{"type":"map","key":{},"value":{}},"So":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{},"Secure":{"type":"boolean"}}}},"Ss":{"type":"structure","required":["Name"],"members":{"Name":{},"Args":{"type":"map","key":{},"value":{"shape":"S3"}}}},"Sz":{"type":"list","member":{"type":"structure","members":{"DeviceName":{},"NoDevice":{},"VirtualName":{},"Ebs":{"type":"structure","members":{"SnapshotId":{},"Iops":{"type":"integer"},"VolumeSize":{"type":"integer"},"VolumeType":{},"DeleteOnTermination":{"type":"boolean"}}}}}},"S17":{"type":"map","key":{},"value":{}},"S19":{"type":"structure","members":{"Enabled":{"type":"boolean"},"LogStreams":{"type":"list","member":{"type":"structure","members":{"LogGroupName":{},"DatetimeFormat":{},"TimeZone":{},"File":{},"FileFingerprintLines":{},"MultiLineStartPattern":{},"InitialPosition":{},"Encoding":{},"BufferDuration":{"type":"integer"},"BatchCount":{"type":"integer"},"BatchSize":{"type":"integer"}}}}}},"S1f":{"type":"list","member":{"type":"structure","required":["MountPoint","NumberOfDisks","Size"],"members":{"MountPoint":{},"RaidLevel":{"type":"integer"},"NumberOfDisks":{"type":"integer"},"Size":{"type":"integer"},"VolumeType":{},"Iops":{"type":"integer"}}}},"S1h":{"type":"structure","members":{"Setup":{"shape":"S3"},"Configure":{"shape":"S3"},"Deploy":{"shape":"S3"},"Undeploy":{"shape":"S3"},"Shutdown":{"shape":"S3"}}},"S1i":{"type":"structure","members":{"Shutdown":{"type":"structure","members":{"ExecutionTimeout":{"type":"integer"},"DelayUntilElbConnectionsDrained":{"type":"boolean"}}}}},"S36":{"type":"structure","members":{"InstanceCount":{"type":"integer"},"ThresholdsWaitTime":{"type":"integer"},"IgnoreMetricsTime":{"type":"integer"},"CpuThreshold":{"type":"double"},"MemoryThreshold":{"type":"double"},"LoadThreshold":{"type":"double"},"Alarms":{"shape":"S3"}}},"S46":{"type":"structure","members":{"Monday":{"shape":"S47"},"Tuesday":{"shape":"S47"},"Wednesday":{"shape":"S47"},"Thursday":{"shape":"S47"},"Friday":{"shape":"S47"},"Saturday":{"shape":"S47"},"Sunday":{"shape":"S47"}}},"S47":{"type":"map","key":{},"value":{}},"S4v":{"type":"map","key":{},"value":{}}}}

/***/ }),
/* 294 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeApps":{"result_key":"Apps"},"DescribeCommands":{"result_key":"Commands"},"DescribeDeployments":{"result_key":"Deployments"},"DescribeEcsClusters":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"EcsClusters"},"DescribeElasticIps":{"result_key":"ElasticIps"},"DescribeElasticLoadBalancers":{"result_key":"ElasticLoadBalancers"},"DescribeInstances":{"result_key":"Instances"},"DescribeLayers":{"result_key":"Layers"},"DescribeLoadBasedAutoScaling":{"result_key":"LoadBasedAutoScalingConfigurations"},"DescribePermissions":{"result_key":"Permissions"},"DescribeRaidArrays":{"result_key":"RaidArrays"},"DescribeServiceErrors":{"result_key":"ServiceErrors"},"DescribeStacks":{"result_key":"Stacks"},"DescribeTimeBasedAutoScaling":{"result_key":"TimeBasedAutoScalingConfigurations"},"DescribeUserProfiles":{"result_key":"UserProfiles"},"DescribeVolumes":{"result_key":"Volumes"}}}

/***/ }),
/* 295 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"AppExists":{"delay":1,"operation":"DescribeApps","maxAttempts":40,"acceptors":[{"expected":200,"matcher":"status","state":"success"},{"matcher":"status","expected":400,"state":"failure"}]},"DeploymentSuccessful":{"delay":15,"operation":"DescribeDeployments","maxAttempts":40,"description":"Wait until a deployment has completed successfully","acceptors":[{"expected":"successful","matcher":"pathAll","state":"success","argument":"Deployments[].Status"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"Deployments[].Status"}]},"InstanceOnline":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is online.","acceptors":[{"expected":"online","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"shutting_down","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"start_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopped","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminating","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stop_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]},"InstanceRegistered":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is registered.","acceptors":[{"expected":"registered","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"shutting_down","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopped","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stopping","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminating","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"terminated","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stop_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]},"InstanceStopped":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is stopped.","acceptors":[{"expected":"stopped","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"booting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"online","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"requested","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"running_setup","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"start_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"stop_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]},"InstanceTerminated":{"delay":15,"operation":"DescribeInstances","maxAttempts":40,"description":"Wait until OpsWorks instance is terminated.","acceptors":[{"expected":"terminated","matcher":"pathAll","state":"success","argument":"Instances[].Status"},{"expected":"ResourceNotFoundException","matcher":"error","state":"success"},{"expected":"booting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"online","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"pending","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"requested","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"running_setup","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"setup_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"},{"expected":"start_failed","matcher":"pathAny","state":"failure","argument":"Instances[].Status"}]}}}

/***/ }),
/* 296 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-01","endpointPrefix":"opsworks-cm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"OpsWorksCM","serviceFullName":"AWS OpsWorks for Chef Automate","signatureVersion":"v4","signingName":"opsworks-cm","targetPrefix":"OpsWorksCM_V2016_11_01","uid":"opsworkscm-2016-11-01"},"operations":{"AssociateNode":{"input":{"type":"structure","required":["ServerName","NodeName","EngineAttributes"],"members":{"ServerName":{},"NodeName":{},"EngineAttributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"NodeAssociationStatusToken":{}}}},"CreateBackup":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{},"Description":{}}},"output":{"type":"structure","members":{"Backup":{"shape":"Sd"}}}},"CreateServer":{"input":{"type":"structure","required":["ServerName","InstanceProfileArn","InstanceType","ServiceRoleArn"],"members":{"AssociatePublicIpAddress":{"type":"boolean"},"DisableAutomatedBackup":{"type":"boolean"},"Engine":{},"EngineModel":{},"EngineVersion":{},"EngineAttributes":{"shape":"S4"},"BackupRetentionCount":{"type":"integer"},"ServerName":{},"InstanceProfileArn":{},"InstanceType":{},"KeyPair":{},"PreferredMaintenanceWindow":{},"PreferredBackupWindow":{},"SecurityGroupIds":{"shape":"Sj"},"ServiceRoleArn":{},"SubnetIds":{"shape":"Sj"},"BackupId":{}}},"output":{"type":"structure","members":{"Server":{"shape":"Ss"}}}},"DeleteBackup":{"input":{"type":"structure","required":["BackupId"],"members":{"BackupId":{}}},"output":{"type":"structure","members":{}}},"DeleteServer":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{}}},"output":{"type":"structure","members":{}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"Attributes":{"type":"list","member":{"type":"structure","members":{"Name":{},"Maximum":{"type":"integer"},"Used":{"type":"integer"}}}}}}},"DescribeBackups":{"input":{"type":"structure","members":{"BackupId":{},"ServerName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Backups":{"type":"list","member":{"shape":"Sd"}},"NextToken":{}}}},"DescribeEvents":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ServerEvents":{"type":"list","member":{"type":"structure","members":{"CreatedAt":{"type":"timestamp"},"ServerName":{},"Message":{},"LogUrl":{}}}},"NextToken":{}}}},"DescribeNodeAssociationStatus":{"input":{"type":"structure","required":["NodeAssociationStatusToken","ServerName"],"members":{"NodeAssociationStatusToken":{},"ServerName":{}}},"output":{"type":"structure","members":{"NodeAssociationStatus":{},"EngineAttributes":{"shape":"S4"}}}},"DescribeServers":{"input":{"type":"structure","members":{"ServerName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Servers":{"type":"list","member":{"shape":"Ss"}},"NextToken":{}}}},"DisassociateNode":{"input":{"type":"structure","required":["ServerName","NodeName"],"members":{"ServerName":{},"NodeName":{},"EngineAttributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"NodeAssociationStatusToken":{}}}},"RestoreServer":{"input":{"type":"structure","required":["BackupId","ServerName"],"members":{"BackupId":{},"ServerName":{},"InstanceType":{},"KeyPair":{}}},"output":{"type":"structure","members":{}}},"StartMaintenance":{"input":{"type":"structure","required":["ServerName"],"members":{"ServerName":{},"EngineAttributes":{"shape":"S4"}}},"output":{"type":"structure","members":{"Server":{"shape":"Ss"}}}},"UpdateServer":{"input":{"type":"structure","required":["ServerName"],"members":{"DisableAutomatedBackup":{"type":"boolean"},"BackupRetentionCount":{"type":"integer"},"ServerName":{},"PreferredMaintenanceWindow":{},"PreferredBackupWindow":{}}},"output":{"type":"structure","members":{"Server":{"shape":"Ss"}}}},"UpdateServerEngineAttributes":{"input":{"type":"structure","required":["ServerName","AttributeName"],"members":{"ServerName":{},"AttributeName":{},"AttributeValue":{}}},"output":{"type":"structure","members":{"Server":{"shape":"Ss"}}}}},"shapes":{"S4":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{"type":"string","sensitive":true}}}},"Sd":{"type":"structure","members":{"BackupArn":{},"BackupId":{},"BackupType":{},"CreatedAt":{"type":"timestamp"},"Description":{},"Engine":{},"EngineModel":{},"EngineVersion":{},"InstanceProfileArn":{},"InstanceType":{},"KeyPair":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"S3DataSize":{"deprecated":true,"type":"integer"},"S3DataUrl":{"deprecated":true},"S3LogUrl":{},"SecurityGroupIds":{"shape":"Sj"},"ServerName":{},"ServiceRoleArn":{},"Status":{},"StatusDescription":{},"SubnetIds":{"shape":"Sj"},"ToolsVersion":{},"UserArn":{}}},"Sj":{"type":"list","member":{}},"Ss":{"type":"structure","members":{"AssociatePublicIpAddress":{"type":"boolean"},"BackupRetentionCount":{"type":"integer"},"ServerName":{},"CreatedAt":{"type":"timestamp"},"CloudFormationStackArn":{},"DisableAutomatedBackup":{"type":"boolean"},"Endpoint":{},"Engine":{},"EngineModel":{},"EngineAttributes":{"shape":"S4"},"EngineVersion":{},"InstanceProfileArn":{},"InstanceType":{},"KeyPair":{},"MaintenanceStatus":{},"PreferredMaintenanceWindow":{},"PreferredBackupWindow":{},"SecurityGroupIds":{"shape":"Sj"},"ServiceRoleArn":{},"Status":{},"StatusReason":{},"SubnetIds":{"shape":"Sj"},"ServerArn":{}}}}}

/***/ }),
/* 297 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 298 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-28","endpointPrefix":"organizations","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Organizations","serviceFullName":"AWS Organizations","serviceId":"Organizations","signatureVersion":"v4","targetPrefix":"AWSOrganizationsV20161128","timestampFormat":"unixTimestamp","uid":"organizations-2016-11-28"},"operations":{"AcceptHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"AttachPolicy":{"input":{"type":"structure","required":["PolicyId","TargetId"],"members":{"PolicyId":{},"TargetId":{}}}},"CancelHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"CreateAccount":{"input":{"type":"structure","required":["Email","AccountName"],"members":{"Email":{"shape":"Sn"},"AccountName":{"shape":"So"},"RoleName":{},"IamUserAccessToBilling":{}}},"output":{"type":"structure","members":{"CreateAccountStatus":{"shape":"Ss"}}}},"CreateOrganization":{"input":{"type":"structure","members":{"FeatureSet":{}}},"output":{"type":"structure","members":{"Organization":{"shape":"S10"}}}},"CreateOrganizationalUnit":{"input":{"type":"structure","required":["ParentId","Name"],"members":{"ParentId":{},"Name":{}}},"output":{"type":"structure","members":{"OrganizationalUnit":{"shape":"S1c"}}}},"CreatePolicy":{"input":{"type":"structure","required":["Content","Description","Name","Type"],"members":{"Content":{},"Description":{},"Name":{},"Type":{}}},"output":{"type":"structure","members":{"Policy":{"shape":"S1k"}}}},"DeclineHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"DeleteOrganization":{},"DeleteOrganizationalUnit":{"input":{"type":"structure","required":["OrganizationalUnitId"],"members":{"OrganizationalUnitId":{}}}},"DeletePolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{}}}},"DescribeAccount":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{}}},"output":{"type":"structure","members":{"Account":{"shape":"S1u"}}}},"DescribeCreateAccountStatus":{"input":{"type":"structure","required":["CreateAccountRequestId"],"members":{"CreateAccountRequestId":{}}},"output":{"type":"structure","members":{"CreateAccountStatus":{"shape":"Ss"}}}},"DescribeHandshake":{"input":{"type":"structure","required":["HandshakeId"],"members":{"HandshakeId":{}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"DescribeOrganization":{"output":{"type":"structure","members":{"Organization":{"shape":"S10"}}}},"DescribeOrganizationalUnit":{"input":{"type":"structure","required":["OrganizationalUnitId"],"members":{"OrganizationalUnitId":{}}},"output":{"type":"structure","members":{"OrganizationalUnit":{"shape":"S1c"}}}},"DescribePolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{}}},"output":{"type":"structure","members":{"Policy":{"shape":"S1k"}}}},"DetachPolicy":{"input":{"type":"structure","required":["PolicyId","TargetId"],"members":{"PolicyId":{},"TargetId":{}}}},"DisablePolicyType":{"input":{"type":"structure","required":["RootId","PolicyType"],"members":{"RootId":{},"PolicyType":{}}},"output":{"type":"structure","members":{"Root":{"shape":"S2a"}}}},"EnableAllFeatures":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"EnablePolicyType":{"input":{"type":"structure","required":["RootId","PolicyType"],"members":{"RootId":{},"PolicyType":{}}},"output":{"type":"structure","members":{"Root":{"shape":"S2a"}}}},"InviteAccountToOrganization":{"input":{"type":"structure","required":["Target"],"members":{"Target":{"shape":"S7"},"Notes":{"type":"string","sensitive":true}}},"output":{"type":"structure","members":{"Handshake":{"shape":"S4"}}}},"LeaveOrganization":{},"ListAccounts":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Accounts":{"shape":"S2o"},"NextToken":{}}}},"ListAccountsForParent":{"input":{"type":"structure","required":["ParentId"],"members":{"ParentId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Accounts":{"shape":"S2o"},"NextToken":{}}}},"ListChildren":{"input":{"type":"structure","required":["ParentId","ChildType"],"members":{"ParentId":{},"ChildType":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Children":{"type":"list","member":{"type":"structure","members":{"Id":{},"Type":{}}}},"NextToken":{}}}},"ListCreateAccountStatus":{"input":{"type":"structure","members":{"States":{"type":"list","member":{}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"CreateAccountStatuses":{"type":"list","member":{"shape":"Ss"}},"NextToken":{}}}},"ListHandshakesForAccount":{"input":{"type":"structure","members":{"Filter":{"shape":"S32"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Handshakes":{"shape":"S34"},"NextToken":{}}}},"ListHandshakesForOrganization":{"input":{"type":"structure","members":{"Filter":{"shape":"S32"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Handshakes":{"shape":"S34"},"NextToken":{}}}},"ListOrganizationalUnitsForParent":{"input":{"type":"structure","required":["ParentId"],"members":{"ParentId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"OrganizationalUnits":{"type":"list","member":{"shape":"S1c"}},"NextToken":{}}}},"ListParents":{"input":{"type":"structure","required":["ChildId"],"members":{"ChildId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Parents":{"type":"list","member":{"type":"structure","members":{"Id":{},"Type":{}}}},"NextToken":{}}}},"ListPolicies":{"input":{"type":"structure","required":["Filter"],"members":{"Filter":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Policies":{"shape":"S3h"},"NextToken":{}}}},"ListPoliciesForTarget":{"input":{"type":"structure","required":["TargetId","Filter"],"members":{"TargetId":{},"Filter":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Policies":{"shape":"S3h"},"NextToken":{}}}},"ListRoots":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Roots":{"type":"list","member":{"shape":"S2a"}},"NextToken":{}}}},"ListTargetsForPolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Targets":{"type":"list","member":{"type":"structure","members":{"TargetId":{},"Arn":{},"Name":{},"Type":{}}}},"NextToken":{}}}},"MoveAccount":{"input":{"type":"structure","required":["AccountId","SourceParentId","DestinationParentId"],"members":{"AccountId":{},"SourceParentId":{},"DestinationParentId":{}}}},"RemoveAccountFromOrganization":{"input":{"type":"structure","required":["AccountId"],"members":{"AccountId":{}}}},"UpdateOrganizationalUnit":{"input":{"type":"structure","required":["OrganizationalUnitId"],"members":{"OrganizationalUnitId":{},"Name":{}}},"output":{"type":"structure","members":{"OrganizationalUnit":{"shape":"S1c"}}}},"UpdatePolicy":{"input":{"type":"structure","required":["PolicyId"],"members":{"PolicyId":{},"Name":{},"Description":{},"Content":{}}},"output":{"type":"structure","members":{"Policy":{"shape":"S1k"}}}}},"shapes":{"S4":{"type":"structure","members":{"Id":{},"Arn":{},"Parties":{"type":"list","member":{"shape":"S7"}},"State":{},"RequestedTimestamp":{"type":"timestamp"},"ExpirationTimestamp":{"type":"timestamp"},"Action":{},"Resources":{"shape":"Sd"}}},"S7":{"type":"structure","required":["Id","Type"],"members":{"Id":{"type":"string","sensitive":true},"Type":{}}},"Sd":{"type":"list","member":{"type":"structure","members":{"Value":{"type":"string","sensitive":true},"Type":{},"Resources":{"shape":"Sd"}}}},"Sn":{"type":"string","sensitive":true},"So":{"type":"string","sensitive":true},"Ss":{"type":"structure","members":{"Id":{},"AccountName":{"shape":"So"},"State":{},"RequestedTimestamp":{"type":"timestamp"},"CompletedTimestamp":{"type":"timestamp"},"AccountId":{},"FailureReason":{}}},"S10":{"type":"structure","members":{"Id":{},"Arn":{},"FeatureSet":{},"MasterAccountArn":{},"MasterAccountId":{},"MasterAccountEmail":{"shape":"Sn"},"AvailablePolicyTypes":{"shape":"S14"}}},"S14":{"type":"list","member":{"type":"structure","members":{"Type":{},"Status":{}}}},"S1c":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{}}},"S1k":{"type":"structure","members":{"PolicySummary":{"shape":"S1l"},"Content":{}}},"S1l":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"Description":{},"Type":{},"AwsManaged":{"type":"boolean"}}},"S1u":{"type":"structure","members":{"Id":{},"Arn":{},"Email":{"shape":"Sn"},"Name":{"shape":"So"},"Status":{},"JoinedMethod":{},"JoinedTimestamp":{"type":"timestamp"}}},"S2a":{"type":"structure","members":{"Id":{},"Arn":{},"Name":{},"PolicyTypes":{"shape":"S14"}}},"S2o":{"type":"list","member":{"shape":"S1u"}},"S32":{"type":"structure","members":{"ActionType":{},"ParentHandshakeId":{}}},"S34":{"type":"list","member":{"shape":"S4"}},"S3h":{"type":"list","member":{"shape":"S1l"}}}}

/***/ }),
/* 299 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListAccounts":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListAccountsForParent":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListChildren":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListCreateAccountStatus":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListHandshakesForAccount":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListHandshakesForOrganization":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListOrganizationalUnitsForParent":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListParents":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPolicies":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListPoliciesForTarget":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListRoots":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"ListTargetsForPolicy":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 300 */
/***/ (function(module, exports) {

module.exports = {"metadata":{"apiVersion":"2016-12-01","endpointPrefix":"pinpoint","signingName":"mobiletargeting","serviceFullName":"Amazon Pinpoint","protocol":"rest-json","jsonVersion":"1.1","uid":"pinpoint-2016-12-01","signatureVersion":"v4"},"operations":{"CreateApp":{"http":{"requestUri":"/v1/apps","responseCode":201},"input":{"type":"structure","members":{"CreateApplicationRequest":{"type":"structure","members":{"Name":{}}}},"required":["CreateApplicationRequest"],"payload":"CreateApplicationRequest"},"output":{"type":"structure","members":{"ApplicationResponse":{"shape":"S5"}},"required":["ApplicationResponse"],"payload":"ApplicationResponse"}},"CreateCampaign":{"http":{"requestUri":"/v1/apps/{application-id}/campaigns","responseCode":201},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteCampaignRequest":{"shape":"S7"}},"required":["ApplicationId","WriteCampaignRequest"],"payload":"WriteCampaignRequest"},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"Sn"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"CreateImportJob":{"http":{"requestUri":"/v1/apps/{application-id}/jobs/import","responseCode":201},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"ImportJobRequest":{"type":"structure","members":{"DefineSegment":{"type":"boolean"},"ExternalId":{},"Format":{},"RegisterEndpoints":{"type":"boolean"},"RoleArn":{},"S3Url":{},"SegmentId":{},"SegmentName":{}}}},"required":["ApplicationId","ImportJobRequest"],"payload":"ImportJobRequest"},"output":{"type":"structure","members":{"ImportJobResponse":{"shape":"Sw"}},"required":["ImportJobResponse"],"payload":"ImportJobResponse"}},"CreateSegment":{"http":{"requestUri":"/v1/apps/{application-id}/segments","responseCode":201},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteSegmentRequest":{"shape":"S11"}},"required":["ApplicationId","WriteSegmentRequest"],"payload":"WriteSegmentRequest"},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S1f"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"DeleteAdmChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/adm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ADMChannelResponse":{"shape":"S1l"}},"required":["ADMChannelResponse"],"payload":"ADMChannelResponse"}},"DeleteApnsChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSChannelResponse":{"shape":"S1o"}},"required":["APNSChannelResponse"],"payload":"APNSChannelResponse"}},"DeleteApnsSandboxChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSSandboxChannelResponse":{"shape":"S1r"}},"required":["APNSSandboxChannelResponse"],"payload":"APNSSandboxChannelResponse"}},"DeleteApnsVoipChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns_voip","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipChannelResponse":{"shape":"S1u"}},"required":["APNSVoipChannelResponse"],"payload":"APNSVoipChannelResponse"}},"DeleteApnsVoipSandboxChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/apns_voip_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipSandboxChannelResponse":{"shape":"S1x"}},"required":["APNSVoipSandboxChannelResponse"],"payload":"APNSVoipSandboxChannelResponse"}},"DeleteApp":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ApplicationResponse":{"shape":"S5"}},"required":["ApplicationResponse"],"payload":"ApplicationResponse"}},"DeleteBaiduChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/baidu","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"BaiduChannelResponse":{"shape":"S22"}},"required":["BaiduChannelResponse"],"payload":"BaiduChannelResponse"}},"DeleteCampaign":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"}},"required":["CampaignId","ApplicationId"]},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"Sn"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"DeleteEmailChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/email","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EmailChannelResponse":{"shape":"S27"}},"required":["EmailChannelResponse"],"payload":"EmailChannelResponse"}},"DeleteEventStream":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/eventstream","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EventStream":{"shape":"S2a"}},"required":["EventStream"],"payload":"EventStream"}},"DeleteGcmChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/gcm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"GCMChannelResponse":{"shape":"S2d"}},"required":["GCMChannelResponse"],"payload":"GCMChannelResponse"}},"DeleteSegment":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/segments/{segment-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S1f"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"DeleteSmsChannel":{"http":{"method":"DELETE","requestUri":"/v1/apps/{application-id}/channels/sms","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"SMSChannelResponse":{"shape":"S2i"}},"required":["SMSChannelResponse"],"payload":"SMSChannelResponse"}},"GetAdmChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/adm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ADMChannelResponse":{"shape":"S1l"}},"required":["ADMChannelResponse"],"payload":"ADMChannelResponse"}},"GetApnsChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSChannelResponse":{"shape":"S1o"}},"required":["APNSChannelResponse"],"payload":"APNSChannelResponse"}},"GetApnsSandboxChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSSandboxChannelResponse":{"shape":"S1r"}},"required":["APNSSandboxChannelResponse"],"payload":"APNSSandboxChannelResponse"}},"GetApnsVoipChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns_voip","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipChannelResponse":{"shape":"S1u"}},"required":["APNSVoipChannelResponse"],"payload":"APNSVoipChannelResponse"}},"GetApnsVoipSandboxChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/apns_voip_sandbox","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"APNSVoipSandboxChannelResponse":{"shape":"S1x"}},"required":["APNSVoipSandboxChannelResponse"],"payload":"APNSVoipSandboxChannelResponse"}},"GetApp":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ApplicationResponse":{"shape":"S5"}},"required":["ApplicationResponse"],"payload":"ApplicationResponse"}},"GetApplicationSettings":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/settings","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ApplicationSettingsResource":{"shape":"S2x"}},"required":["ApplicationSettingsResource"],"payload":"ApplicationSettingsResource"}},"GetApps":{"http":{"method":"GET","requestUri":"/v1/apps","responseCode":200},"input":{"type":"structure","members":{"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}}},"output":{"type":"structure","members":{"ApplicationsResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S5"}},"NextToken":{}}}},"required":["ApplicationsResponse"],"payload":"ApplicationsResponse"}},"GetBaiduChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/baidu","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"BaiduChannelResponse":{"shape":"S22"}},"required":["BaiduChannelResponse"],"payload":"BaiduChannelResponse"}},"GetCampaign":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"}},"required":["CampaignId","ApplicationId"]},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"Sn"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"GetCampaignActivities":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}/activities","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId","CampaignId"]},"output":{"type":"structure","members":{"ActivitiesResponse":{"type":"structure","members":{"Item":{"type":"list","member":{"type":"structure","members":{"ApplicationId":{},"CampaignId":{},"End":{},"Id":{},"Result":{},"ScheduledStart":{},"Start":{},"State":{},"SuccessfulEndpointCount":{"type":"integer"},"TimezonesCompletedCount":{"type":"integer"},"TimezonesTotalCount":{"type":"integer"},"TotalEndpointCount":{"type":"integer"},"TreatmentId":{}}}}}}},"required":["ActivitiesResponse"],"payload":"ActivitiesResponse"}},"GetCampaignVersion":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"Version":{"location":"uri","locationName":"version"}},"required":["Version","ApplicationId","CampaignId"]},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"Sn"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"GetCampaignVersions":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}/versions","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId","CampaignId"]},"output":{"type":"structure","members":{"CampaignsResponse":{"shape":"S3f"}},"required":["CampaignsResponse"],"payload":"CampaignsResponse"}},"GetCampaigns":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/campaigns","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"CampaignsResponse":{"shape":"S3f"}},"required":["CampaignsResponse"],"payload":"CampaignsResponse"}},"GetEmailChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/email","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EmailChannelResponse":{"shape":"S27"}},"required":["EmailChannelResponse"],"payload":"EmailChannelResponse"}},"GetEndpoint":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/endpoints/{endpoint-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndpointId":{"location":"uri","locationName":"endpoint-id"}},"required":["ApplicationId","EndpointId"]},"output":{"type":"structure","members":{"EndpointResponse":{"type":"structure","members":{"Address":{},"ApplicationId":{},"Attributes":{"shape":"S3o"},"ChannelType":{},"CohortId":{},"CreationDate":{},"Demographic":{"shape":"S3q"},"EffectiveDate":{},"EndpointStatus":{},"Id":{},"Location":{"shape":"S3r"},"Metrics":{"shape":"S3t"},"OptOut":{},"RequestId":{},"User":{"shape":"S3u"}}}},"required":["EndpointResponse"],"payload":"EndpointResponse"}},"GetEventStream":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/eventstream","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"EventStream":{"shape":"S2a"}},"required":["EventStream"],"payload":"EventStream"}},"GetGcmChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/gcm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"GCMChannelResponse":{"shape":"S2d"}},"required":["GCMChannelResponse"],"payload":"GCMChannelResponse"}},"GetImportJob":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/jobs/import/{job-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"JobId":{"location":"uri","locationName":"job-id"}},"required":["ApplicationId","JobId"]},"output":{"type":"structure","members":{"ImportJobResponse":{"shape":"Sw"}},"required":["ImportJobResponse"],"payload":"ImportJobResponse"}},"GetImportJobs":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/jobs/import","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"ImportJobsResponse":{"shape":"S43"}},"required":["ImportJobsResponse"],"payload":"ImportJobsResponse"}},"GetSegment":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S1f"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"GetSegmentImportJobs":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}/jobs/import","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"SegmentId":{"location":"uri","locationName":"segment-id"},"Token":{"location":"querystring","locationName":"token"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"ImportJobsResponse":{"shape":"S43"}},"required":["ImportJobsResponse"],"payload":"ImportJobsResponse"}},"GetSegmentVersion":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}/versions/{version}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"},"Version":{"location":"uri","locationName":"version"}},"required":["SegmentId","Version","ApplicationId"]},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S1f"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"GetSegmentVersions":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments/{segment-id}/versions","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"SegmentId":{"location":"uri","locationName":"segment-id"},"Token":{"location":"querystring","locationName":"token"}},"required":["SegmentId","ApplicationId"]},"output":{"type":"structure","members":{"SegmentsResponse":{"shape":"S4d"}},"required":["SegmentsResponse"],"payload":"SegmentsResponse"}},"GetSegments":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/segments","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"PageSize":{"location":"querystring","locationName":"page-size"},"Token":{"location":"querystring","locationName":"token"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"SegmentsResponse":{"shape":"S4d"}},"required":["SegmentsResponse"],"payload":"SegmentsResponse"}},"GetSmsChannel":{"http":{"method":"GET","requestUri":"/v1/apps/{application-id}/channels/sms","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId"]},"output":{"type":"structure","members":{"SMSChannelResponse":{"shape":"S2i"}},"required":["SMSChannelResponse"],"payload":"SMSChannelResponse"}},"PutEventStream":{"http":{"requestUri":"/v1/apps/{application-id}/eventstream","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteEventStream":{"type":"structure","members":{"DestinationStreamArn":{},"RoleArn":{}}}},"required":["ApplicationId","WriteEventStream"],"payload":"WriteEventStream"},"output":{"type":"structure","members":{"EventStream":{"shape":"S2a"}},"required":["EventStream"],"payload":"EventStream"}},"SendMessages":{"http":{"requestUri":"/v1/apps/{application-id}/messages","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"MessageRequest":{"type":"structure","members":{"Addresses":{"type":"map","key":{},"value":{"type":"structure","members":{"BodyOverride":{},"ChannelType":{},"Context":{"shape":"S4q"},"RawContent":{},"Substitutions":{"shape":"S3o"},"TitleOverride":{}}}},"Context":{"shape":"S4q"},"Endpoints":{"shape":"S4r"},"MessageConfiguration":{"shape":"S4t"}}}},"required":["ApplicationId","MessageRequest"],"payload":"MessageRequest"},"output":{"type":"structure","members":{"MessageResponse":{"type":"structure","members":{"ApplicationId":{},"EndpointResult":{"shape":"S53"},"RequestId":{},"Result":{"type":"map","key":{},"value":{"type":"structure","members":{"DeliveryStatus":{},"StatusCode":{"type":"integer"},"StatusMessage":{},"UpdatedToken":{}}}}}}},"required":["MessageResponse"],"payload":"MessageResponse"}},"SendUsersMessages":{"http":{"requestUri":"/v1/apps/{application-id}/users-messages","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SendUsersMessageRequest":{"type":"structure","members":{"Context":{"shape":"S4q"},"MessageConfiguration":{"shape":"S4t"},"Users":{"shape":"S4r"}}}},"required":["ApplicationId","SendUsersMessageRequest"],"payload":"SendUsersMessageRequest"},"output":{"type":"structure","members":{"SendUsersMessageResponse":{"type":"structure","members":{"ApplicationId":{},"RequestId":{},"Result":{"type":"map","key":{},"value":{"shape":"S53"}}}}},"required":["SendUsersMessageResponse"],"payload":"SendUsersMessageResponse"}},"UpdateAdmChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/adm","responseCode":200},"input":{"type":"structure","members":{"ADMChannelRequest":{"type":"structure","members":{"ClientId":{},"ClientSecret":{},"Enabled":{"type":"boolean"}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","ADMChannelRequest"],"payload":"ADMChannelRequest"},"output":{"type":"structure","members":{"ADMChannelResponse":{"shape":"S1l"}},"required":["ADMChannelResponse"],"payload":"ADMChannelResponse"}},"UpdateApnsChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns","responseCode":200},"input":{"type":"structure","members":{"APNSChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSChannelRequest"],"payload":"APNSChannelRequest"},"output":{"type":"structure","members":{"APNSChannelResponse":{"shape":"S1o"}},"required":["APNSChannelResponse"],"payload":"APNSChannelResponse"}},"UpdateApnsSandboxChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns_sandbox","responseCode":200},"input":{"type":"structure","members":{"APNSSandboxChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSSandboxChannelRequest"],"payload":"APNSSandboxChannelRequest"},"output":{"type":"structure","members":{"APNSSandboxChannelResponse":{"shape":"S1r"}},"required":["APNSSandboxChannelResponse"],"payload":"APNSSandboxChannelResponse"}},"UpdateApnsVoipChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns_voip","responseCode":200},"input":{"type":"structure","members":{"APNSVoipChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSVoipChannelRequest"],"payload":"APNSVoipChannelRequest"},"output":{"type":"structure","members":{"APNSVoipChannelResponse":{"shape":"S1u"}},"required":["APNSVoipChannelResponse"],"payload":"APNSVoipChannelResponse"}},"UpdateApnsVoipSandboxChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/apns_voip_sandbox","responseCode":200},"input":{"type":"structure","members":{"APNSVoipSandboxChannelRequest":{"type":"structure","members":{"BundleId":{},"Certificate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"PrivateKey":{},"TeamId":{},"TokenKey":{},"TokenKeyId":{}}},"ApplicationId":{"location":"uri","locationName":"application-id"}},"required":["ApplicationId","APNSVoipSandboxChannelRequest"],"payload":"APNSVoipSandboxChannelRequest"},"output":{"type":"structure","members":{"APNSVoipSandboxChannelResponse":{"shape":"S1x"}},"required":["APNSVoipSandboxChannelResponse"],"payload":"APNSVoipSandboxChannelResponse"}},"UpdateApplicationSettings":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/settings","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"WriteApplicationSettingsRequest":{"type":"structure","members":{"Limits":{"shape":"Sl"},"QuietTime":{"shape":"Sj"}}}},"required":["ApplicationId","WriteApplicationSettingsRequest"],"payload":"WriteApplicationSettingsRequest"},"output":{"type":"structure","members":{"ApplicationSettingsResource":{"shape":"S2x"}},"required":["ApplicationSettingsResource"],"payload":"ApplicationSettingsResource"}},"UpdateBaiduChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/baidu","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"BaiduChannelRequest":{"type":"structure","members":{"ApiKey":{},"Enabled":{"type":"boolean"},"SecretKey":{}}}},"required":["ApplicationId","BaiduChannelRequest"],"payload":"BaiduChannelRequest"},"output":{"type":"structure","members":{"BaiduChannelResponse":{"shape":"S22"}},"required":["BaiduChannelResponse"],"payload":"BaiduChannelResponse"}},"UpdateCampaign":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/campaigns/{campaign-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"CampaignId":{"location":"uri","locationName":"campaign-id"},"WriteCampaignRequest":{"shape":"S7"}},"required":["CampaignId","ApplicationId","WriteCampaignRequest"],"payload":"WriteCampaignRequest"},"output":{"type":"structure","members":{"CampaignResponse":{"shape":"Sn"}},"required":["CampaignResponse"],"payload":"CampaignResponse"}},"UpdateEmailChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/email","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EmailChannelRequest":{"type":"structure","members":{"Enabled":{"type":"boolean"},"FromAddress":{},"Identity":{},"RoleArn":{}}}},"required":["ApplicationId","EmailChannelRequest"],"payload":"EmailChannelRequest"},"output":{"type":"structure","members":{"EmailChannelResponse":{"shape":"S27"}},"required":["EmailChannelResponse"],"payload":"EmailChannelResponse"}},"UpdateEndpoint":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/endpoints/{endpoint-id}","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndpointId":{"location":"uri","locationName":"endpoint-id"},"EndpointRequest":{"type":"structure","members":{"Address":{},"Attributes":{"shape":"S3o"},"ChannelType":{},"Demographic":{"shape":"S3q"},"EffectiveDate":{},"EndpointStatus":{},"Location":{"shape":"S3r"},"Metrics":{"shape":"S3t"},"OptOut":{},"RequestId":{},"User":{"shape":"S3u"}}}},"required":["ApplicationId","EndpointId","EndpointRequest"],"payload":"EndpointRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S66"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateEndpointsBatch":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/endpoints","responseCode":202},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"EndpointBatchRequest":{"type":"structure","members":{"Item":{"type":"list","member":{"type":"structure","members":{"Address":{},"Attributes":{"shape":"S3o"},"ChannelType":{},"Demographic":{"shape":"S3q"},"EffectiveDate":{},"EndpointStatus":{},"Id":{},"Location":{"shape":"S3r"},"Metrics":{"shape":"S3t"},"OptOut":{},"RequestId":{},"User":{"shape":"S3u"}}}}}}},"required":["ApplicationId","EndpointBatchRequest"],"payload":"EndpointBatchRequest"},"output":{"type":"structure","members":{"MessageBody":{"shape":"S66"}},"required":["MessageBody"],"payload":"MessageBody"}},"UpdateGcmChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/gcm","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"GCMChannelRequest":{"type":"structure","members":{"ApiKey":{},"Enabled":{"type":"boolean"}}}},"required":["ApplicationId","GCMChannelRequest"],"payload":"GCMChannelRequest"},"output":{"type":"structure","members":{"GCMChannelResponse":{"shape":"S2d"}},"required":["GCMChannelResponse"],"payload":"GCMChannelResponse"}},"UpdateSegment":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/segments/{segment-id}","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SegmentId":{"location":"uri","locationName":"segment-id"},"WriteSegmentRequest":{"shape":"S11"}},"required":["SegmentId","ApplicationId","WriteSegmentRequest"],"payload":"WriteSegmentRequest"},"output":{"type":"structure","members":{"SegmentResponse":{"shape":"S1f"}},"required":["SegmentResponse"],"payload":"SegmentResponse"}},"UpdateSmsChannel":{"http":{"method":"PUT","requestUri":"/v1/apps/{application-id}/channels/sms","responseCode":200},"input":{"type":"structure","members":{"ApplicationId":{"location":"uri","locationName":"application-id"},"SMSChannelRequest":{"type":"structure","members":{"Enabled":{"type":"boolean"},"SenderId":{},"ShortCode":{}}}},"required":["ApplicationId","SMSChannelRequest"],"payload":"SMSChannelRequest"},"output":{"type":"structure","members":{"SMSChannelResponse":{"shape":"S2i"}},"required":["SMSChannelResponse"],"payload":"SMSChannelResponse"}}},"shapes":{"S5":{"type":"structure","members":{"Id":{},"Name":{}}},"S7":{"type":"structure","members":{"AdditionalTreatments":{"type":"list","member":{"type":"structure","members":{"MessageConfiguration":{"shape":"Sa"},"Schedule":{"shape":"Sh"},"SizePercent":{"type":"integer"},"TreatmentDescription":{},"TreatmentName":{}}}},"Description":{},"HoldoutPercent":{"type":"integer"},"IsPaused":{"type":"boolean"},"Limits":{"shape":"Sl"},"MessageConfiguration":{"shape":"Sa"},"Name":{},"Schedule":{"shape":"Sh"},"SegmentId":{},"SegmentVersion":{"type":"integer"},"TreatmentDescription":{},"TreatmentName":{}}},"Sa":{"type":"structure","members":{"ADMMessage":{"shape":"Sb"},"APNSMessage":{"shape":"Sb"},"BaiduMessage":{"shape":"Sb"},"DefaultMessage":{"shape":"Sb"},"EmailMessage":{"type":"structure","members":{"Body":{},"FromAddress":{},"HtmlBody":{},"Title":{}}},"GCMMessage":{"shape":"Sb"},"SMSMessage":{"type":"structure","members":{"Body":{},"MessageType":{},"SenderId":{}}}}},"Sb":{"type":"structure","members":{"Action":{},"Body":{},"ImageIconUrl":{},"ImageSmallIconUrl":{},"ImageUrl":{},"JsonBody":{},"MediaUrl":{},"RawContent":{},"SilentPush":{"type":"boolean"},"Title":{},"Url":{}}},"Sh":{"type":"structure","members":{"EndTime":{},"Frequency":{},"IsLocalTime":{"type":"boolean"},"QuietTime":{"shape":"Sj"},"StartTime":{},"Timezone":{}}},"Sj":{"type":"structure","members":{"End":{},"Start":{}}},"Sl":{"type":"structure","members":{"Daily":{"type":"integer"},"MaximumDuration":{"type":"integer"},"MessagesPerSecond":{"type":"integer"},"Total":{"type":"integer"}}},"Sn":{"type":"structure","members":{"AdditionalTreatments":{"type":"list","member":{"type":"structure","members":{"Id":{},"MessageConfiguration":{"shape":"Sa"},"Schedule":{"shape":"Sh"},"SizePercent":{"type":"integer"},"State":{"shape":"Sq"},"TreatmentDescription":{},"TreatmentName":{}}}},"ApplicationId":{},"CreationDate":{},"DefaultState":{"shape":"Sq"},"Description":{},"HoldoutPercent":{"type":"integer"},"Id":{},"IsPaused":{"type":"boolean"},"LastModifiedDate":{},"Limits":{"shape":"Sl"},"MessageConfiguration":{"shape":"Sa"},"Name":{},"Schedule":{"shape":"Sh"},"SegmentId":{},"SegmentVersion":{"type":"integer"},"State":{"shape":"Sq"},"TreatmentDescription":{},"TreatmentName":{},"Version":{"type":"integer"}}},"Sq":{"type":"structure","members":{"CampaignStatus":{}}},"Sw":{"type":"structure","members":{"ApplicationId":{},"CompletedPieces":{"type":"integer"},"CompletionDate":{},"CreationDate":{},"Definition":{"type":"structure","members":{"DefineSegment":{"type":"boolean"},"ExternalId":{},"Format":{},"RegisterEndpoints":{"type":"boolean"},"RoleArn":{},"S3Url":{},"SegmentId":{},"SegmentName":{}}},"FailedPieces":{"type":"integer"},"Failures":{"shape":"Sy"},"Id":{},"JobStatus":{},"TotalFailures":{"type":"integer"},"TotalPieces":{"type":"integer"},"TotalProcessed":{"type":"integer"},"Type":{}}},"Sy":{"type":"list","member":{}},"S11":{"type":"structure","members":{"Dimensions":{"shape":"S12"},"Name":{}}},"S12":{"type":"structure","members":{"Attributes":{"shape":"S13"},"Behavior":{"type":"structure","members":{"Recency":{"type":"structure","members":{"Duration":{},"RecencyType":{}}}}},"Demographic":{"type":"structure","members":{"AppVersion":{"shape":"S1b"},"Channel":{"shape":"S1b"},"DeviceType":{"shape":"S1b"},"Make":{"shape":"S1b"},"Model":{"shape":"S1b"},"Platform":{"shape":"S1b"}}},"Location":{"type":"structure","members":{"Country":{"shape":"S1b"}}},"UserAttributes":{"shape":"S13"}}},"S13":{"type":"map","key":{},"value":{"type":"structure","members":{"AttributeType":{},"Values":{"shape":"Sy"}}}},"S1b":{"type":"structure","members":{"DimensionType":{},"Values":{"shape":"Sy"}}},"S1f":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Dimensions":{"shape":"S12"},"Id":{},"ImportDefinition":{"type":"structure","members":{"ChannelCounts":{"type":"map","key":{},"value":{"type":"integer"}},"ExternalId":{},"Format":{},"RoleArn":{},"S3Url":{},"Size":{"type":"integer"}}},"LastModifiedDate":{},"Name":{},"SegmentType":{},"Version":{"type":"integer"}}},"S1l":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}}},"S1o":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}}},"S1r":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}}},"S1u":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}}},"S1x":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"DefaultAuthenticationMethod":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"HasTokenKey":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}}},"S22":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Credential":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}}},"S27":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Enabled":{"type":"boolean"},"FromAddress":{},"HasCredential":{"type":"boolean"},"Id":{},"Identity":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"RoleArn":{},"Version":{"type":"integer"}}},"S2a":{"type":"structure","members":{"ApplicationId":{},"DestinationStreamArn":{},"ExternalId":{},"LastModifiedDate":{},"LastUpdatedBy":{},"RoleArn":{}}},"S2d":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Credential":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"Version":{"type":"integer"}}},"S2i":{"type":"structure","members":{"ApplicationId":{},"CreationDate":{},"Enabled":{"type":"boolean"},"HasCredential":{"type":"boolean"},"Id":{},"IsArchived":{"type":"boolean"},"LastModifiedBy":{},"LastModifiedDate":{},"Platform":{},"SenderId":{},"ShortCode":{},"Version":{"type":"integer"}}},"S2x":{"type":"structure","members":{"ApplicationId":{},"LastModifiedDate":{},"Limits":{"shape":"Sl"},"QuietTime":{"shape":"Sj"}}},"S3f":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"Sn"}},"NextToken":{}}},"S3o":{"type":"map","key":{},"value":{"shape":"Sy"}},"S3q":{"type":"structure","members":{"AppVersion":{},"Locale":{},"Make":{},"Model":{},"ModelVersion":{},"Platform":{},"PlatformVersion":{},"Timezone":{}}},"S3r":{"type":"structure","members":{"City":{},"Country":{},"Latitude":{"type":"double"},"Longitude":{"type":"double"},"PostalCode":{},"Region":{}}},"S3t":{"type":"map","key":{},"value":{"type":"double"}},"S3u":{"type":"structure","members":{"UserAttributes":{"shape":"S3o"},"UserId":{}}},"S43":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"Sw"}},"NextToken":{}}},"S4d":{"type":"structure","members":{"Item":{"type":"list","member":{"shape":"S1f"}},"NextToken":{}}},"S4q":{"type":"map","key":{},"value":{}},"S4r":{"type":"map","key":{},"value":{"type":"structure","members":{"BodyOverride":{},"Context":{"shape":"S4q"},"RawContent":{},"Substitutions":{"shape":"S3o"},"TitleOverride":{}}}},"S4t":{"type":"structure","members":{"ADMMessage":{"type":"structure","members":{"Action":{},"Body":{},"ConsolidationKey":{},"Data":{"shape":"S4q"},"ExpiresAfter":{},"IconReference":{},"ImageIconUrl":{},"ImageUrl":{},"MD5":{},"RawContent":{},"SilentPush":{"type":"boolean"},"SmallImageIconUrl":{},"Sound":{},"Substitutions":{"shape":"S3o"},"Title":{},"Url":{}}},"APNSMessage":{"type":"structure","members":{"Action":{},"Badge":{"type":"integer"},"Body":{},"Category":{},"CollapseId":{},"Data":{"shape":"S4q"},"MediaUrl":{},"PreferredAuthenticationMethod":{},"Priority":{},"RawContent":{},"SilentPush":{"type":"boolean"},"Sound":{},"Substitutions":{"shape":"S3o"},"ThreadId":{},"TimeToLive":{"type":"integer"},"Title":{},"Url":{}}},"BaiduMessage":{"type":"structure","members":{"Action":{},"Body":{},"Data":{"shape":"S4q"},"IconReference":{},"ImageIconUrl":{},"ImageUrl":{},"RawContent":{},"SilentPush":{"type":"boolean"},"SmallImageIconUrl":{},"Sound":{},"Substitutions":{"shape":"S3o"},"Title":{},"Url":{}}},"DefaultMessage":{"type":"structure","members":{"Body":{},"Substitutions":{"shape":"S3o"}}},"DefaultPushNotificationMessage":{"type":"structure","members":{"Action":{},"Body":{},"Data":{"shape":"S4q"},"SilentPush":{"type":"boolean"},"Substitutions":{"shape":"S3o"},"Title":{},"Url":{}}},"GCMMessage":{"type":"structure","members":{"Action":{},"Body":{},"CollapseKey":{},"Data":{"shape":"S4q"},"IconReference":{},"ImageIconUrl":{},"ImageUrl":{},"Priority":{},"RawContent":{},"RestrictedPackageName":{},"SilentPush":{"type":"boolean"},"SmallImageIconUrl":{},"Sound":{},"Substitutions":{"shape":"S3o"},"TimeToLive":{"type":"integer"},"Title":{},"Url":{}}},"SMSMessage":{"type":"structure","members":{"Body":{},"MessageType":{},"SenderId":{},"Substitutions":{"shape":"S3o"}}}}},"S53":{"type":"map","key":{},"value":{"type":"structure","members":{"Address":{},"DeliveryStatus":{},"StatusCode":{"type":"integer"},"StatusMessage":{},"UpdatedToken":{}}}},"S66":{"type":"structure","members":{"Message":{},"RequestID":{}}}}}

/***/ }),
/* 301 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-06-10","endpointPrefix":"polly","protocol":"rest-json","serviceFullName":"Amazon Polly","signatureVersion":"v4","uid":"polly-2016-06-10"},"operations":{"DeleteLexicon":{"http":{"method":"DELETE","requestUri":"/v1/lexicons/{LexiconName}","responseCode":200},"input":{"type":"structure","required":["Name"],"members":{"Name":{"shape":"S2","location":"uri","locationName":"LexiconName"}}},"output":{"type":"structure","members":{}}},"DescribeVoices":{"http":{"method":"GET","requestUri":"/v1/voices","responseCode":200},"input":{"type":"structure","members":{"LanguageCode":{"location":"querystring","locationName":"LanguageCode"},"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Voices":{"type":"list","member":{"type":"structure","members":{"Gender":{},"Id":{},"LanguageCode":{},"LanguageName":{},"Name":{}}}},"NextToken":{}}}},"GetLexicon":{"http":{"method":"GET","requestUri":"/v1/lexicons/{LexiconName}","responseCode":200},"input":{"type":"structure","required":["Name"],"members":{"Name":{"shape":"S2","location":"uri","locationName":"LexiconName"}}},"output":{"type":"structure","members":{"Lexicon":{"type":"structure","members":{"Content":{},"Name":{"shape":"S2"}}},"LexiconAttributes":{"shape":"Si"}}}},"ListLexicons":{"http":{"method":"GET","requestUri":"/v1/lexicons","responseCode":200},"input":{"type":"structure","members":{"NextToken":{"location":"querystring","locationName":"NextToken"}}},"output":{"type":"structure","members":{"Lexicons":{"type":"list","member":{"type":"structure","members":{"Name":{"shape":"S2"},"Attributes":{"shape":"Si"}}}},"NextToken":{}}}},"PutLexicon":{"http":{"method":"PUT","requestUri":"/v1/lexicons/{LexiconName}","responseCode":200},"input":{"type":"structure","required":["Name","Content"],"members":{"Name":{"shape":"S2","location":"uri","locationName":"LexiconName"},"Content":{}}},"output":{"type":"structure","members":{}}},"SynthesizeSpeech":{"http":{"requestUri":"/v1/speech","responseCode":200},"input":{"type":"structure","required":["OutputFormat","Text","VoiceId"],"members":{"LexiconNames":{"type":"list","member":{"shape":"S2"}},"OutputFormat":{},"SampleRate":{},"SpeechMarkTypes":{"type":"list","member":{}},"Text":{},"TextType":{},"VoiceId":{}}},"output":{"type":"structure","members":{"AudioStream":{"type":"blob","streaming":true},"ContentType":{"location":"header","locationName":"Content-Type"},"RequestCharacters":{"location":"header","locationName":"x-amzn-RequestCharacters","type":"integer"}},"payload":"AudioStream"}}},"shapes":{"S2":{"type":"string","sensitive":true},"Si":{"type":"structure","members":{"Alphabet":{},"LanguageCode":{},"LastModified":{"type":"timestamp"},"LexiconArn":{},"LexemesCount":{"type":"integer"},"Size":{"type":"integer"}}}}}

/***/ }),
/* 302 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 303 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-10-15","endpointPrefix":"api.pricing","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"AWS Pricing","serviceFullName":"AWS Price List Service","signatureVersion":"v4","signingName":"pricing","targetPrefix":"AWSPriceListService","uid":"pricing-2017-10-15"},"operations":{"DescribeServices":{"input":{"type":"structure","members":{"ServiceCode":{},"FormatVersion":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Services":{"type":"list","member":{"type":"structure","members":{"ServiceCode":{},"AttributeNames":{"type":"list","member":{}}}}},"FormatVersion":{},"NextToken":{}}}},"GetAttributeValues":{"input":{"type":"structure","required":["ServiceCode","AttributeName"],"members":{"ServiceCode":{},"AttributeName":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"AttributeValues":{"type":"list","member":{"type":"structure","members":{"Value":{}}}},"NextToken":{}}}},"GetProducts":{"input":{"type":"structure","members":{"ServiceCode":{},"Filters":{"type":"list","member":{"type":"structure","required":["Type","Field","Value"],"members":{"Type":{},"Field":{},"Value":{}}}},"FormatVersion":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"FormatVersion":{},"PriceList":{"type":"list","member":{"jsonvalue":true}},"NextToken":{}}}}},"shapes":{}}

/***/ }),
/* 304 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeServices":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetAttributeValues":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"},"GetProducts":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxResults"}}}

/***/ }),
/* 305 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-01-10","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2013-01-10","xmlNamespace":"http://rds.amazonaws.com/doc/2013-01-10/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S1c"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1i"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1o"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S25"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S25","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"St","locationName":"DBInstance"}}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S1c","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2f"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sk","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S11","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2f"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S1o","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S14","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S3m","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S3o"}},"wrapper":true}}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2f"}}},"output":{"shape":"S3z","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1i"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sp"},"VpcSecurityGroupMemberships":{"shape":"Sq"}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1o"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S3m"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2f"}}},"output":{"shape":"S3z","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"Id":{},"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"}},"wrapper":true},"Sp":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"St":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sv"},"VpcSecurityGroups":{"shape":"Sx"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S11"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMembership":{"type":"structure","members":{"OptionGroupName":{},"Status":{}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"}},"wrapper":true},"Sv":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"Sx":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S11":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S14"},"SubnetStatus":{}}}}},"wrapper":true},"S14":{"type":"structure","members":{"Name":{},"ProvisionedIopsCapable":{"type":"boolean"}},"wrapper":true},"S1c":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"S1i":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1o":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sv"},"VpcSecurityGroupMemberships":{"shape":"Sx"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"S25":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2f":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S3m":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S3o"}},"wrapper":true},"S3o":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S3z":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 306 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 307 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-02-12","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2013-02-12","xmlNamespace":"http://rds.amazonaws.com/doc/2013-02-12/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S1d"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1j"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1p"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S28"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S28","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"St","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S1d","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2n"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sk","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S11","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2n"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"Persistent":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S1p","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S14","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S3w","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S3y"}},"wrapper":true}}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2n"}}},"output":{"shape":"S4b","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1j"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sp"},"VpcSecurityGroupMemberships":{"shape":"Sq"},"OptionSettings":{"type":"list","member":{"shape":"S1t","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1p"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S3w"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2n"}}},"output":{"shape":"S4b","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{}},"wrapper":true},"Sp":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"St":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sv"},"VpcSecurityGroups":{"shape":"Sx"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S11"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"}},"wrapper":true},"Sv":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"Sx":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S11":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S14"},"SubnetStatus":{}}}}},"wrapper":true},"S14":{"type":"structure","members":{"Name":{},"ProvisionedIopsCapable":{"type":"boolean"}},"wrapper":true},"S1d":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"S1j":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1p":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Port":{"type":"integer"},"OptionSettings":{"type":"list","member":{"shape":"S1t","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"Sv"},"VpcSecurityGroupMemberships":{"shape":"Sx"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"S1t":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"S28":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2n":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S3w":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S3y"}},"wrapper":true},"S3y":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S4b":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 308 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBLogFiles":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DescribeDBLogFiles"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"DownloadDBLogFilePortion":{"input_token":"Marker","limit_key":"NumberOfLines","more_results":"AdditionalDataPending","output_token":"Marker","result_key":"LogFileData"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 309 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-09-09","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2013-09-09","xmlNamespace":"http://rds.amazonaws.com/doc/2013-09-09/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"},"DBSubnetGroupName":{}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S1f"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1l"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1r"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sk"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S2d"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S2d","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"St","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S1f","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2s"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sk","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S11","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2s"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S27"}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Filters":{"shape":"S27"},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S1r","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S14","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S41","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S27"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S43"}},"wrapper":true}}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{},"Filters":{"shape":"S27"}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2s"}}},"output":{"shape":"S4g","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1l"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S11"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"Sp"},"VpcSecurityGroupMemberships":{"shape":"Sq"},"OptionSettings":{"type":"list","member":{"shape":"S1v","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S1r"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S41"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2s"}}},"output":{"shape":"S4g","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"St"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{},"PercentProgress":{"type":"integer"},"SourceRegion":{}},"wrapper":true},"Sp":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"St":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sv"},"VpcSecurityGroups":{"shape":"Sx"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S11"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"},"StatusInfos":{"type":"list","member":{"locationName":"DBInstanceStatusInfo","type":"structure","members":{"StatusType":{},"Normal":{"type":"boolean"},"Status":{},"Message":{}}}}},"wrapper":true},"Sv":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"Sx":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S11":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S14"},"SubnetStatus":{}}}}},"wrapper":true},"S14":{"type":"structure","members":{"Name":{},"ProvisionedIopsCapable":{"type":"boolean"}},"wrapper":true},"S1f":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"S1l":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1r":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"Port":{"type":"integer"},"OptionSettings":{"type":"list","member":{"shape":"S1v","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"Sv"},"VpcSecurityGroupMemberships":{"shape":"Sx"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"S1v":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"S27":{"type":"list","member":{"locationName":"Filter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{"locationName":"Value"}}}}},"S2d":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2s":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S41":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S43"}},"wrapper":true},"S43":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S4g":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 310 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBLogFiles":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DescribeDBLogFiles"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"DownloadDBLogFilePortion":{"input_token":"Marker","limit_key":"NumberOfLines","more_results":"AdditionalDataPending","output_token":"Marker","result_key":"LogFileData"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 311 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"DBInstanceAvailable":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]},"DBInstanceDeleted":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"DBInstances[].DBInstanceStatus"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"resetting-master-credentials","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]}}}

/***/ }),
/* 312 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-09-01","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2014-09-01","xmlNamespace":"http://rds.amazonaws.com/doc/2014-09-01/"},"operations":{"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S9"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CopyDBParameterGroup":{"input":{"type":"structure","required":["SourceDBParameterGroupIdentifier","TargetDBParameterGroupIdentifier","TargetDBParameterGroupDescription"],"members":{"SourceDBParameterGroupIdentifier":{},"TargetDBParameterGroupIdentifier":{},"TargetDBParameterGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"Sk"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sn"}}}},"CopyOptionGroup":{"input":{"type":"structure","required":["SourceOptionGroupIdentifier","TargetOptionGroupIdentifier","TargetOptionGroupDescription"],"members":{"SourceOptionGroupIdentifier":{},"TargetOptionGroupIdentifier":{},"TargetOptionGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CopyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"St"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","AllocatedStorage","DBInstanceClass","Engine","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"S13"},"VpcSecurityGroupIds":{"shape":"S14"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"S9"},"DBSubnetGroupName":{},"StorageType":{}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"Sk"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sn"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1u"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S1b"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"SourceIds":{"shape":"S5"},"Enabled":{"type":"boolean"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"St"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"Sn"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S2h"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S2h","locationName":"CharacterSet"}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"S17","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"Sk","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S2w"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sd","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"Sn","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S1b","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2w"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S2b"}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S6"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S4","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S6"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S6"},"Date":{"type":"timestamp"}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Filters":{"shape":"S2b"},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"St","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S1e","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"},"StorageType":{},"SupportsIops":{"type":"boolean"}},"wrapper":true}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S45","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S2b"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S47"}},"wrapper":true}}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{},"Filters":{"shape":"S2b"}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"S9"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSecurityGroups":{"shape":"S13"},"VpcSecurityGroupIds":{"shape":"S14"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S2w"}}},"output":{"shape":"S4k","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S1u"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S1b"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S6"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"DBSecurityGroupMemberships":{"shape":"S13"},"VpcSecurityGroupMemberships":{"shape":"S14"},"OptionSettings":{"type":"list","member":{"shape":"Sx","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"St"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"},"Tags":{"shape":"S9"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S45"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S4"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2w"}}},"output":{"shape":"S4k","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"S9"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"S17"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sd"}}}}},"shapes":{"S4":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S5"},"EventCategoriesList":{"shape":"S6"},"Enabled":{"type":"boolean"}},"wrapper":true},"S5":{"type":"list","member":{"locationName":"SourceId"}},"S6":{"type":"list","member":{"locationName":"EventCategory"}},"S9":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Sd":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{}},"wrapper":true},"Sn":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{},"PercentProgress":{"type":"integer"},"SourceRegion":{},"StorageType":{},"TdeCredentialArn":{}},"wrapper":true},"St":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"Port":{"type":"integer"},"OptionSettings":{"type":"list","member":{"shape":"Sx","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"Sy"},"VpcSecurityGroupMemberships":{"shape":"S10"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{}},"wrapper":true},"Sx":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"Sy":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"S10":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S13":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"S14":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"S17":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"Sy"},"VpcSecurityGroups":{"shape":"S10"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S1b"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{},"StorageType":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"},"StatusInfos":{"type":"list","member":{"locationName":"DBInstanceStatusInfo","type":"structure","members":{"StatusType":{},"Normal":{"type":"boolean"},"Status":{},"Message":{}}}},"StorageType":{},"TdeCredentialArn":{}},"wrapper":true},"S1b":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S1e"},"SubnetStatus":{}}}}},"wrapper":true},"S1e":{"type":"structure","members":{"Name":{}},"wrapper":true},"S1u":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S2b":{"type":"list","member":{"locationName":"Filter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{"locationName":"Value"}}}}},"S2h":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S2w":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S45":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S47"}},"wrapper":true},"S47":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S4k":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 313 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 314 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-10-31","endpointPrefix":"rds","protocol":"query","serviceAbbreviation":"Amazon RDS","serviceFullName":"Amazon Relational Database Service","serviceId":"RDS","signatureVersion":"v4","uid":"rds-2014-10-31","xmlNamespace":"http://rds.amazonaws.com/doc/2014-10-31/"},"operations":{"AddRoleToDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier","RoleArn"],"members":{"DBClusterIdentifier":{},"RoleArn":{}}}},"AddSourceIdentifierToSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"AddSourceIdentifierToSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S5"}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"Sa"}}}},"ApplyPendingMaintenanceAction":{"input":{"type":"structure","required":["ResourceIdentifier","ApplyAction","OptInType"],"members":{"ResourceIdentifier":{},"ApplyAction":{},"OptInType":{}}},"output":{"resultWrapper":"ApplyPendingMaintenanceActionResult","type":"structure","members":{"ResourcePendingMaintenanceActions":{"shape":"Se"}}}},"AuthorizeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sk"}}}},"CopyDBClusterParameterGroup":{"input":{"type":"structure","required":["SourceDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupDescription"],"members":{"SourceDBClusterParameterGroupIdentifier":{},"TargetDBClusterParameterGroupIdentifier":{},"TargetDBClusterParameterGroupDescription":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CopyDBClusterParameterGroupResult","type":"structure","members":{"DBClusterParameterGroup":{"shape":"Sr"}}}},"CopyDBClusterSnapshot":{"input":{"type":"structure","required":["SourceDBClusterSnapshotIdentifier","TargetDBClusterSnapshotIdentifier"],"members":{"SourceDBClusterSnapshotIdentifier":{},"TargetDBClusterSnapshotIdentifier":{},"KmsKeyId":{},"PreSignedUrl":{},"CopyTags":{"type":"boolean"},"Tags":{"shape":"Sa"},"SourceRegion":{}}},"output":{"resultWrapper":"CopyDBClusterSnapshotResult","type":"structure","members":{"DBClusterSnapshot":{"shape":"Sv"}}}},"CopyDBParameterGroup":{"input":{"type":"structure","required":["SourceDBParameterGroupIdentifier","TargetDBParameterGroupIdentifier","TargetDBParameterGroupDescription"],"members":{"SourceDBParameterGroupIdentifier":{},"TargetDBParameterGroupIdentifier":{},"TargetDBParameterGroupDescription":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CopyDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S10"}}}},"CopyDBSnapshot":{"input":{"type":"structure","required":["SourceDBSnapshotIdentifier","TargetDBSnapshotIdentifier"],"members":{"SourceDBSnapshotIdentifier":{},"TargetDBSnapshotIdentifier":{},"KmsKeyId":{},"Tags":{"shape":"Sa"},"CopyTags":{"type":"boolean"},"PreSignedUrl":{},"OptionGroupName":{},"SourceRegion":{}}},"output":{"resultWrapper":"CopyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S13"}}}},"CopyOptionGroup":{"input":{"type":"structure","required":["SourceOptionGroupIdentifier","TargetOptionGroupIdentifier","TargetOptionGroupDescription"],"members":{"SourceOptionGroupIdentifier":{},"TargetOptionGroupIdentifier":{},"TargetOptionGroupDescription":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CopyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S17"}}}},"CreateDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier","Engine"],"members":{"AvailabilityZones":{"shape":"Sw"},"BackupRetentionPeriod":{"type":"integer"},"CharacterSetName":{},"DatabaseName":{},"DBClusterIdentifier":{},"DBClusterParameterGroupName":{},"VpcSecurityGroupIds":{"shape":"S1h"},"DBSubnetGroupName":{},"Engine":{},"EngineVersion":{},"Port":{"type":"integer"},"MasterUsername":{},"MasterUserPassword":{},"OptionGroupName":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"ReplicationSourceIdentifier":{},"Tags":{"shape":"Sa"},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"PreSignedUrl":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"SourceRegion":{}}},"output":{"resultWrapper":"CreateDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"CreateDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBClusterParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateDBClusterParameterGroupResult","type":"structure","members":{"DBClusterParameterGroup":{"shape":"Sr"}}}},"CreateDBClusterSnapshot":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier","DBClusterIdentifier"],"members":{"DBClusterSnapshotIdentifier":{},"DBClusterIdentifier":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateDBClusterSnapshotResult","type":"structure","members":{"DBClusterSnapshot":{"shape":"Sv"}}}},"CreateDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBInstanceClass","Engine"],"members":{"DBName":{},"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"Engine":{},"MasterUsername":{},"MasterUserPassword":{},"DBSecurityGroups":{"shape":"S1w"},"VpcSecurityGroupIds":{"shape":"S1h"},"AvailabilityZone":{},"DBSubnetGroupName":{},"PreferredMaintenanceWindow":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"Port":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CharacterSetName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"Sa"},"DBClusterIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"Domain":{},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"MonitoringRoleArn":{},"DomainIAMRoleName":{},"PromotionTier":{"type":"integer"},"Timezone":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnablePerformanceInsights":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{}}},"output":{"resultWrapper":"CreateDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"CreateDBInstanceReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier","SourceDBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SourceDBInstanceIdentifier":{},"DBInstanceClass":{},"AvailabilityZone":{},"Port":{"type":"integer"},"AutoMinorVersionUpgrade":{"type":"boolean"},"Iops":{"type":"integer"},"OptionGroupName":{},"PubliclyAccessible":{"type":"boolean"},"Tags":{"shape":"Sa"},"DBSubnetGroupName":{},"StorageType":{},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"MonitoringRoleArn":{},"KmsKeyId":{},"PreSignedUrl":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnablePerformanceInsights":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{},"SourceRegion":{}}},"output":{"resultWrapper":"CreateDBInstanceReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"CreateDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","DBParameterGroupFamily","Description"],"members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateDBParameterGroupResult","type":"structure","members":{"DBParameterGroup":{"shape":"S10"}}}},"CreateDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName","DBSecurityGroupDescription"],"members":{"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateDBSecurityGroupResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sk"}}}},"CreateDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier","DBInstanceIdentifier"],"members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S13"}}}},"CreateDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S2o"},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S22"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S7"},"SourceIds":{"shape":"S6"},"Enabled":{"type":"boolean"},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S5"}}}},"CreateOptionGroup":{"input":{"type":"structure","required":["OptionGroupName","EngineName","MajorEngineVersion","OptionGroupDescription"],"members":{"OptionGroupName":{},"EngineName":{},"MajorEngineVersion":{},"OptionGroupDescription":{},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"CreateOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S17"}}}},"DeleteDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"DeleteDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName"],"members":{"DBClusterParameterGroupName":{}}}},"DeleteDBClusterSnapshot":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier"],"members":{"DBClusterSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBClusterSnapshotResult","type":"structure","members":{"DBClusterSnapshot":{"shape":"Sv"}}}},"DeleteDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"SkipFinalSnapshot":{"type":"boolean"},"FinalDBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"DeleteDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{}}}},"DeleteDBSecurityGroup":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{}}}},"DeleteDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S13"}}}},"DeleteDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName"],"members":{"DBSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}},"output":{"resultWrapper":"DeleteEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S5"}}}},"DeleteOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{}}}},"DescribeAccountAttributes":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"DescribeAccountAttributesResult","type":"structure","members":{"AccountQuotas":{"type":"list","member":{"locationName":"AccountQuota","type":"structure","members":{"AccountQuotaName":{},"Used":{"type":"long"},"Max":{"type":"long"}},"wrapper":true}}}}},"DescribeCertificates":{"input":{"type":"structure","members":{"CertificateIdentifier":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeCertificatesResult","type":"structure","members":{"Certificates":{"type":"list","member":{"locationName":"Certificate","type":"structure","members":{"CertificateIdentifier":{},"CertificateType":{},"Thumbprint":{},"ValidFrom":{"type":"timestamp"},"ValidTill":{"type":"timestamp"},"CertificateArn":{}},"wrapper":true}},"Marker":{}}}},"DescribeDBClusterParameterGroups":{"input":{"type":"structure","members":{"DBClusterParameterGroupName":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBClusterParameterGroupsResult","type":"structure","members":{"Marker":{},"DBClusterParameterGroups":{"type":"list","member":{"shape":"Sr","locationName":"DBClusterParameterGroup"}}}}},"DescribeDBClusterParameters":{"input":{"type":"structure","required":["DBClusterParameterGroupName"],"members":{"DBClusterParameterGroupName":{},"Source":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBClusterParametersResult","type":"structure","members":{"Parameters":{"shape":"S3q"},"Marker":{}}}},"DescribeDBClusterSnapshotAttributes":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier"],"members":{"DBClusterSnapshotIdentifier":{}}},"output":{"resultWrapper":"DescribeDBClusterSnapshotAttributesResult","type":"structure","members":{"DBClusterSnapshotAttributesResult":{"shape":"S3v"}}}},"DescribeDBClusterSnapshots":{"input":{"type":"structure","members":{"DBClusterIdentifier":{},"DBClusterSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{},"IncludeShared":{"type":"boolean"},"IncludePublic":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBClusterSnapshotsResult","type":"structure","members":{"Marker":{},"DBClusterSnapshots":{"type":"list","member":{"shape":"Sv","locationName":"DBClusterSnapshot"}}}}},"DescribeDBClusters":{"input":{"type":"structure","members":{"DBClusterIdentifier":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBClustersResult","type":"structure","members":{"Marker":{},"DBClusters":{"type":"list","member":{"shape":"S1j","locationName":"DBCluster"}}}}},"DescribeDBEngineVersions":{"input":{"type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{},"DefaultOnly":{"type":"boolean"},"ListSupportedCharacterSets":{"type":"boolean"},"ListSupportedTimezones":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBEngineVersionsResult","type":"structure","members":{"Marker":{},"DBEngineVersions":{"type":"list","member":{"locationName":"DBEngineVersion","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBParameterGroupFamily":{},"DBEngineDescription":{},"DBEngineVersionDescription":{},"DefaultCharacterSet":{"shape":"S49"},"SupportedCharacterSets":{"type":"list","member":{"shape":"S49","locationName":"CharacterSet"}},"ValidUpgradeTarget":{"type":"list","member":{"locationName":"UpgradeTarget","type":"structure","members":{"Engine":{},"EngineVersion":{},"Description":{},"AutoUpgrade":{"type":"boolean"},"IsMajorVersionUpgrade":{"type":"boolean"}}}},"SupportedTimezones":{"type":"list","member":{"locationName":"Timezone","type":"structure","members":{"TimezoneName":{}}}}}}}}}},"DescribeDBInstances":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBInstancesResult","type":"structure","members":{"Marker":{},"DBInstances":{"type":"list","member":{"shape":"S1y","locationName":"DBInstance"}}}}},"DescribeDBLogFiles":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"FilenameContains":{},"FileLastWritten":{"type":"long"},"FileSize":{"type":"long"},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBLogFilesResult","type":"structure","members":{"DescribeDBLogFiles":{"type":"list","member":{"locationName":"DescribeDBLogFilesDetails","type":"structure","members":{"LogFileName":{},"LastWritten":{"type":"long"},"Size":{"type":"long"}}}},"Marker":{}}}},"DescribeDBParameterGroups":{"input":{"type":"structure","members":{"DBParameterGroupName":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParameterGroupsResult","type":"structure","members":{"Marker":{},"DBParameterGroups":{"type":"list","member":{"shape":"S10","locationName":"DBParameterGroup"}}}}},"DescribeDBParameters":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"Source":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBParametersResult","type":"structure","members":{"Parameters":{"shape":"S3q"},"Marker":{}}}},"DescribeDBSecurityGroups":{"input":{"type":"structure","members":{"DBSecurityGroupName":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSecurityGroupsResult","type":"structure","members":{"Marker":{},"DBSecurityGroups":{"type":"list","member":{"shape":"Sk","locationName":"DBSecurityGroup"}}}}},"DescribeDBSnapshotAttributes":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"DescribeDBSnapshotAttributesResult","type":"structure","members":{"DBSnapshotAttributesResult":{"shape":"S4w"}}}},"DescribeDBSnapshots":{"input":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"SnapshotType":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{},"IncludeShared":{"type":"boolean"},"IncludePublic":{"type":"boolean"}}},"output":{"resultWrapper":"DescribeDBSnapshotsResult","type":"structure","members":{"Marker":{},"DBSnapshots":{"type":"list","member":{"shape":"S13","locationName":"DBSnapshot"}}}}},"DescribeDBSubnetGroups":{"input":{"type":"structure","members":{"DBSubnetGroupName":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDBSubnetGroupsResult","type":"structure","members":{"Marker":{},"DBSubnetGroups":{"type":"list","member":{"shape":"S22","locationName":"DBSubnetGroup"}}}}},"DescribeEngineDefaultClusterParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultClusterParametersResult","type":"structure","members":{"EngineDefaults":{"shape":"S57"}}}},"DescribeEngineDefaultParameters":{"input":{"type":"structure","required":["DBParameterGroupFamily"],"members":{"DBParameterGroupFamily":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEngineDefaultParametersResult","type":"structure","members":{"EngineDefaults":{"shape":"S57"}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{},"Filters":{"shape":"S3f"}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"EventCategories":{"shape":"S7"}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S5","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"EventCategories":{"shape":"S7"},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S7"},"Date":{"type":"timestamp"},"SourceArn":{}}}}}}},"DescribeOptionGroupOptions":{"input":{"type":"structure","required":["EngineName"],"members":{"EngineName":{},"MajorEngineVersion":{},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOptionGroupOptionsResult","type":"structure","members":{"OptionGroupOptions":{"type":"list","member":{"locationName":"OptionGroupOption","type":"structure","members":{"Name":{},"Description":{},"EngineName":{},"MajorEngineVersion":{},"MinimumRequiredMinorEngineVersion":{},"PortRequired":{"type":"boolean"},"DefaultPort":{"type":"integer"},"OptionsDependedOn":{"type":"list","member":{"locationName":"OptionName"}},"OptionsConflictsWith":{"type":"list","member":{"locationName":"OptionConflictName"}},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"RequiresAutoMinorEngineVersionUpgrade":{"type":"boolean"},"VpcOnly":{"type":"boolean"},"SupportsOptionVersionDowngrade":{"type":"boolean"},"OptionGroupOptionSettings":{"type":"list","member":{"locationName":"OptionGroupOptionSetting","type":"structure","members":{"SettingName":{},"SettingDescription":{},"DefaultValue":{},"ApplyType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"}}}},"OptionGroupOptionVersions":{"type":"list","member":{"locationName":"OptionVersion","type":"structure","members":{"Version":{},"IsDefault":{"type":"boolean"}}}}}}},"Marker":{}}}},"DescribeOptionGroups":{"input":{"type":"structure","members":{"OptionGroupName":{},"Filters":{"shape":"S3f"},"Marker":{},"MaxRecords":{"type":"integer"},"EngineName":{},"MajorEngineVersion":{}}},"output":{"resultWrapper":"DescribeOptionGroupsResult","type":"structure","members":{"OptionGroupsList":{"type":"list","member":{"shape":"S17","locationName":"OptionGroup"}},"Marker":{}}}},"DescribeOrderableDBInstanceOptions":{"input":{"type":"structure","required":["Engine"],"members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"Vpc":{"type":"boolean"},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableDBInstanceOptionsResult","type":"structure","members":{"OrderableDBInstanceOptions":{"type":"list","member":{"locationName":"OrderableDBInstanceOption","type":"structure","members":{"Engine":{},"EngineVersion":{},"DBInstanceClass":{},"LicenseModel":{},"AvailabilityZones":{"type":"list","member":{"shape":"S25","locationName":"AvailabilityZone"}},"MultiAZCapable":{"type":"boolean"},"ReadReplicaCapable":{"type":"boolean"},"Vpc":{"type":"boolean"},"SupportsStorageEncryption":{"type":"boolean"},"StorageType":{},"SupportsIops":{"type":"boolean"},"SupportsEnhancedMonitoring":{"type":"boolean"},"SupportsIAMDatabaseAuthentication":{"type":"boolean"},"SupportsPerformanceInsights":{"type":"boolean"},"MinStorageSize":{"type":"integer"},"MaxStorageSize":{"type":"integer"},"MinIopsPerDbInstance":{"type":"integer"},"MaxIopsPerDbInstance":{"type":"integer"},"MinIopsPerGib":{"type":"double"},"MaxIopsPerGib":{"type":"double"}},"wrapper":true}},"Marker":{}}}},"DescribePendingMaintenanceActions":{"input":{"type":"structure","members":{"ResourceIdentifier":{},"Filters":{"shape":"S3f"},"Marker":{},"MaxRecords":{"type":"integer"}}},"output":{"resultWrapper":"DescribePendingMaintenanceActionsResult","type":"structure","members":{"PendingMaintenanceActions":{"type":"list","member":{"shape":"Se","locationName":"ResourcePendingMaintenanceActions"}},"Marker":{}}}},"DescribeReservedDBInstances":{"input":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesResult","type":"structure","members":{"Marker":{},"ReservedDBInstances":{"type":"list","member":{"shape":"S6b","locationName":"ReservedDBInstance"}}}}},"DescribeReservedDBInstancesOfferings":{"input":{"type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"Filters":{"shape":"S3f"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedDBInstancesOfferingsResult","type":"structure","members":{"Marker":{},"ReservedDBInstancesOfferings":{"type":"list","member":{"locationName":"ReservedDBInstancesOffering","type":"structure","members":{"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"RecurringCharges":{"shape":"S6d"}},"wrapper":true}}}}},"DescribeSourceRegions":{"input":{"type":"structure","members":{"RegionName":{},"MaxRecords":{"type":"integer"},"Marker":{},"Filters":{"shape":"S3f"}}},"output":{"resultWrapper":"DescribeSourceRegionsResult","type":"structure","members":{"Marker":{},"SourceRegions":{"type":"list","member":{"locationName":"SourceRegion","type":"structure","members":{"RegionName":{},"Endpoint":{},"Status":{}}}}}}},"DescribeValidDBInstanceModifications":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"DescribeValidDBInstanceModificationsResult","type":"structure","members":{"ValidDBInstanceModificationsMessage":{"type":"structure","members":{"Storage":{"type":"list","member":{"locationName":"ValidStorageOptions","type":"structure","members":{"StorageType":{},"StorageSize":{"shape":"S6s"},"ProvisionedIops":{"shape":"S6s"},"IopsToStorageRatio":{"type":"list","member":{"locationName":"DoubleRange","type":"structure","members":{"From":{"type":"double"},"To":{"type":"double"}}}}}}}},"wrapper":true}}}},"DownloadDBLogFilePortion":{"input":{"type":"structure","required":["DBInstanceIdentifier","LogFileName"],"members":{"DBInstanceIdentifier":{},"LogFileName":{},"Marker":{},"NumberOfLines":{"type":"integer"}}},"output":{"resultWrapper":"DownloadDBLogFilePortionResult","type":"structure","members":{"LogFileData":{},"Marker":{},"AdditionalDataPending":{"type":"boolean"}}}},"FailoverDBCluster":{"input":{"type":"structure","members":{"DBClusterIdentifier":{},"TargetDBInstanceIdentifier":{}}},"output":{"resultWrapper":"FailoverDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceName"],"members":{"ResourceName":{},"Filters":{"shape":"S3f"}}},"output":{"resultWrapper":"ListTagsForResourceResult","type":"structure","members":{"TagList":{"shape":"Sa"}}}},"ModifyDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"NewDBClusterIdentifier":{},"ApplyImmediately":{"type":"boolean"},"BackupRetentionPeriod":{"type":"integer"},"DBClusterParameterGroupName":{},"VpcSecurityGroupIds":{"shape":"S1h"},"Port":{"type":"integer"},"MasterUserPassword":{},"OptionGroupName":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"ModifyDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName","Parameters"],"members":{"DBClusterParameterGroupName":{},"Parameters":{"shape":"S3q"}}},"output":{"shape":"S75","resultWrapper":"ModifyDBClusterParameterGroupResult"}},"ModifyDBClusterSnapshotAttribute":{"input":{"type":"structure","required":["DBClusterSnapshotIdentifier","AttributeName"],"members":{"DBClusterSnapshotIdentifier":{},"AttributeName":{},"ValuesToAdd":{"shape":"S3y"},"ValuesToRemove":{"shape":"S3y"}}},"output":{"resultWrapper":"ModifyDBClusterSnapshotAttributeResult","type":"structure","members":{"DBClusterSnapshotAttributesResult":{"shape":"S3v"}}}},"ModifyDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"AllocatedStorage":{"type":"integer"},"DBInstanceClass":{},"DBSubnetGroupName":{},"DBSecurityGroups":{"shape":"S1w"},"VpcSecurityGroupIds":{"shape":"S1h"},"ApplyImmediately":{"type":"boolean"},"MasterUserPassword":{},"DBParameterGroupName":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AllowMajorVersionUpgrade":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupName":{},"NewDBInstanceIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"CACertificateIdentifier":{},"Domain":{},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"DBPortNumber":{"type":"integer"},"PubliclyAccessible":{"type":"boolean"},"MonitoringRoleArn":{},"DomainIAMRoleName":{},"PromotionTier":{"type":"integer"},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"EnablePerformanceInsights":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{}}},"output":{"resultWrapper":"ModifyDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"ModifyDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName","Parameters"],"members":{"DBParameterGroupName":{},"Parameters":{"shape":"S3q"}}},"output":{"shape":"S7b","resultWrapper":"ModifyDBParameterGroupResult"}},"ModifyDBSnapshot":{"input":{"type":"structure","required":["DBSnapshotIdentifier"],"members":{"DBSnapshotIdentifier":{},"EngineVersion":{},"OptionGroupName":{}}},"output":{"resultWrapper":"ModifyDBSnapshotResult","type":"structure","members":{"DBSnapshot":{"shape":"S13"}}}},"ModifyDBSnapshotAttribute":{"input":{"type":"structure","required":["DBSnapshotIdentifier","AttributeName"],"members":{"DBSnapshotIdentifier":{},"AttributeName":{},"ValuesToAdd":{"shape":"S3y"},"ValuesToRemove":{"shape":"S3y"}}},"output":{"resultWrapper":"ModifyDBSnapshotAttributeResult","type":"structure","members":{"DBSnapshotAttributesResult":{"shape":"S4w"}}}},"ModifyDBSubnetGroup":{"input":{"type":"structure","required":["DBSubnetGroupName","SubnetIds"],"members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"SubnetIds":{"shape":"S2o"}}},"output":{"resultWrapper":"ModifyDBSubnetGroupResult","type":"structure","members":{"DBSubnetGroup":{"shape":"S22"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"EventCategories":{"shape":"S7"},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S5"}}}},"ModifyOptionGroup":{"input":{"type":"structure","required":["OptionGroupName"],"members":{"OptionGroupName":{},"OptionsToInclude":{"type":"list","member":{"locationName":"OptionConfiguration","type":"structure","required":["OptionName"],"members":{"OptionName":{},"Port":{"type":"integer"},"OptionVersion":{},"DBSecurityGroupMemberships":{"shape":"S1w"},"VpcSecurityGroupMemberships":{"shape":"S1h"},"OptionSettings":{"type":"list","member":{"shape":"S1b","locationName":"OptionSetting"}}}}},"OptionsToRemove":{"type":"list","member":{}},"ApplyImmediately":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyOptionGroupResult","type":"structure","members":{"OptionGroup":{"shape":"S17"}}}},"PromoteReadReplica":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"BackupRetentionPeriod":{"type":"integer"},"PreferredBackupWindow":{}}},"output":{"resultWrapper":"PromoteReadReplicaResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"PromoteReadReplicaDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier"],"members":{"DBClusterIdentifier":{}}},"output":{"resultWrapper":"PromoteReadReplicaDBClusterResult","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"PurchaseReservedDBInstancesOffering":{"input":{"type":"structure","required":["ReservedDBInstancesOfferingId"],"members":{"ReservedDBInstancesOfferingId":{},"ReservedDBInstanceId":{},"DBInstanceCount":{"type":"integer"},"Tags":{"shape":"Sa"}}},"output":{"resultWrapper":"PurchaseReservedDBInstancesOfferingResult","type":"structure","members":{"ReservedDBInstance":{"shape":"S6b"}}}},"RebootDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"ForceFailover":{"type":"boolean"}}},"output":{"resultWrapper":"RebootDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"RemoveRoleFromDBCluster":{"input":{"type":"structure","required":["DBClusterIdentifier","RoleArn"],"members":{"DBClusterIdentifier":{},"RoleArn":{}}}},"RemoveSourceIdentifierFromSubscription":{"input":{"type":"structure","required":["SubscriptionName","SourceIdentifier"],"members":{"SubscriptionName":{},"SourceIdentifier":{}}},"output":{"resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S5"}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"type":"list","member":{}}}}},"ResetDBClusterParameterGroup":{"input":{"type":"structure","required":["DBClusterParameterGroupName"],"members":{"DBClusterParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S3q"}}},"output":{"shape":"S75","resultWrapper":"ResetDBClusterParameterGroupResult"}},"ResetDBParameterGroup":{"input":{"type":"structure","required":["DBParameterGroupName"],"members":{"DBParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S3q"}}},"output":{"shape":"S7b","resultWrapper":"ResetDBParameterGroupResult"}},"RestoreDBClusterFromS3":{"input":{"type":"structure","required":["DBClusterIdentifier","Engine","MasterUsername","MasterUserPassword","SourceEngine","SourceEngineVersion","S3BucketName","S3IngestionRoleArn"],"members":{"AvailabilityZones":{"shape":"Sw"},"BackupRetentionPeriod":{"type":"integer"},"CharacterSetName":{},"DatabaseName":{},"DBClusterIdentifier":{},"DBClusterParameterGroupName":{},"VpcSecurityGroupIds":{"shape":"S1h"},"DBSubnetGroupName":{},"Engine":{},"EngineVersion":{},"Port":{"type":"integer"},"MasterUsername":{},"MasterUserPassword":{},"OptionGroupName":{},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"Tags":{"shape":"Sa"},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"},"SourceEngine":{},"SourceEngineVersion":{},"S3BucketName":{},"S3Prefix":{},"S3IngestionRoleArn":{}}},"output":{"resultWrapper":"RestoreDBClusterFromS3Result","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"RestoreDBClusterFromSnapshot":{"input":{"type":"structure","required":["DBClusterIdentifier","SnapshotIdentifier","Engine"],"members":{"AvailabilityZones":{"shape":"Sw"},"DBClusterIdentifier":{},"SnapshotIdentifier":{},"Engine":{},"EngineVersion":{},"Port":{"type":"integer"},"DBSubnetGroupName":{},"DatabaseName":{},"OptionGroupName":{},"VpcSecurityGroupIds":{"shape":"S1h"},"Tags":{"shape":"Sa"},"KmsKeyId":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"}}},"output":{"resultWrapper":"RestoreDBClusterFromSnapshotResult","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"RestoreDBClusterToPointInTime":{"input":{"type":"structure","required":["DBClusterIdentifier","SourceDBClusterIdentifier"],"members":{"DBClusterIdentifier":{},"RestoreType":{},"SourceDBClusterIdentifier":{},"RestoreToTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"Port":{"type":"integer"},"DBSubnetGroupName":{},"OptionGroupName":{},"VpcSecurityGroupIds":{"shape":"S1h"},"Tags":{"shape":"Sa"},"KmsKeyId":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"}}},"output":{"resultWrapper":"RestoreDBClusterToPointInTimeResult","type":"structure","members":{"DBCluster":{"shape":"S1j"}}}},"RestoreDBInstanceFromDBSnapshot":{"input":{"type":"structure","required":["DBInstanceIdentifier","DBSnapshotIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"Tags":{"shape":"Sa"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"Domain":{},"CopyTagsToSnapshot":{"type":"boolean"},"DomainIAMRoleName":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"}}},"output":{"resultWrapper":"RestoreDBInstanceFromDBSnapshotResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"RestoreDBInstanceToPointInTime":{"input":{"type":"structure","required":["SourceDBInstanceIdentifier","TargetDBInstanceIdentifier"],"members":{"SourceDBInstanceIdentifier":{},"TargetDBInstanceIdentifier":{},"RestoreTime":{"type":"timestamp"},"UseLatestRestorableTime":{"type":"boolean"},"DBInstanceClass":{},"Port":{"type":"integer"},"AvailabilityZone":{},"DBSubnetGroupName":{},"MultiAZ":{"type":"boolean"},"PubliclyAccessible":{"type":"boolean"},"AutoMinorVersionUpgrade":{"type":"boolean"},"LicenseModel":{},"DBName":{},"Engine":{},"Iops":{"type":"integer"},"OptionGroupName":{},"CopyTagsToSnapshot":{"type":"boolean"},"Tags":{"shape":"Sa"},"StorageType":{},"TdeCredentialArn":{},"TdeCredentialPassword":{},"Domain":{},"DomainIAMRoleName":{},"EnableIAMDatabaseAuthentication":{"type":"boolean"}}},"output":{"resultWrapper":"RestoreDBInstanceToPointInTimeResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"RevokeDBSecurityGroupIngress":{"input":{"type":"structure","required":["DBSecurityGroupName"],"members":{"DBSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeDBSecurityGroupIngressResult","type":"structure","members":{"DBSecurityGroup":{"shape":"Sk"}}}},"StartDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{}}},"output":{"resultWrapper":"StartDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}},"StopDBInstance":{"input":{"type":"structure","required":["DBInstanceIdentifier"],"members":{"DBInstanceIdentifier":{},"DBSnapshotIdentifier":{}}},"output":{"resultWrapper":"StopDBInstanceResult","type":"structure","members":{"DBInstance":{"shape":"S1y"}}}}},"shapes":{"S5":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{},"SourceType":{},"SourceIdsList":{"shape":"S6"},"EventCategoriesList":{"shape":"S7"},"Enabled":{"type":"boolean"},"EventSubscriptionArn":{}},"wrapper":true},"S6":{"type":"list","member":{"locationName":"SourceId"}},"S7":{"type":"list","member":{"locationName":"EventCategory"}},"Sa":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"Se":{"type":"structure","members":{"ResourceIdentifier":{},"PendingMaintenanceActionDetails":{"type":"list","member":{"locationName":"PendingMaintenanceAction","type":"structure","members":{"Action":{},"AutoAppliedAfterDate":{"type":"timestamp"},"ForcedApplyDate":{"type":"timestamp"},"OptInStatus":{},"CurrentApplyDate":{"type":"timestamp"},"Description":{}}}}},"wrapper":true},"Sk":{"type":"structure","members":{"OwnerId":{},"DBSecurityGroupName":{},"DBSecurityGroupDescription":{},"VpcId":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupId":{},"EC2SecurityGroupOwnerId":{}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{}}}},"DBSecurityGroupArn":{}},"wrapper":true},"Sr":{"type":"structure","members":{"DBClusterParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"DBClusterParameterGroupArn":{}},"wrapper":true},"Sv":{"type":"structure","members":{"AvailabilityZones":{"shape":"Sw"},"DBClusterSnapshotIdentifier":{},"DBClusterIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"VpcId":{},"ClusterCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"PercentProgress":{"type":"integer"},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"DBClusterSnapshotArn":{},"SourceDBClusterSnapshotArn":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"}},"wrapper":true},"Sw":{"type":"list","member":{"locationName":"AvailabilityZone"}},"S10":{"type":"structure","members":{"DBParameterGroupName":{},"DBParameterGroupFamily":{},"Description":{},"DBParameterGroupArn":{}},"wrapper":true},"S13":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBInstanceIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Engine":{},"AllocatedStorage":{"type":"integer"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"VpcId":{},"InstanceCreateTime":{"type":"timestamp"},"MasterUsername":{},"EngineVersion":{},"LicenseModel":{},"SnapshotType":{},"Iops":{"type":"integer"},"OptionGroupName":{},"PercentProgress":{"type":"integer"},"SourceRegion":{},"SourceDBSnapshotIdentifier":{},"StorageType":{},"TdeCredentialArn":{},"Encrypted":{"type":"boolean"},"KmsKeyId":{},"DBSnapshotArn":{},"Timezone":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"}},"wrapper":true},"S17":{"type":"structure","members":{"OptionGroupName":{},"OptionGroupDescription":{},"EngineName":{},"MajorEngineVersion":{},"Options":{"type":"list","member":{"locationName":"Option","type":"structure","members":{"OptionName":{},"OptionDescription":{},"Persistent":{"type":"boolean"},"Permanent":{"type":"boolean"},"Port":{"type":"integer"},"OptionVersion":{},"OptionSettings":{"type":"list","member":{"shape":"S1b","locationName":"OptionSetting"}},"DBSecurityGroupMemberships":{"shape":"S1c"},"VpcSecurityGroupMemberships":{"shape":"S1e"}}}},"AllowsVpcAndNonVpcInstanceMemberships":{"type":"boolean"},"VpcId":{},"OptionGroupArn":{}},"wrapper":true},"S1b":{"type":"structure","members":{"Name":{},"Value":{},"DefaultValue":{},"Description":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"IsCollection":{"type":"boolean"}}},"S1c":{"type":"list","member":{"locationName":"DBSecurityGroup","type":"structure","members":{"DBSecurityGroupName":{},"Status":{}}}},"S1e":{"type":"list","member":{"locationName":"VpcSecurityGroupMembership","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"S1h":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"S1j":{"type":"structure","members":{"AllocatedStorage":{"type":"integer"},"AvailabilityZones":{"shape":"Sw"},"BackupRetentionPeriod":{"type":"integer"},"CharacterSetName":{},"DatabaseName":{},"DBClusterIdentifier":{},"DBClusterParameterGroup":{},"DBSubnetGroup":{},"Status":{},"PercentProgress":{},"EarliestRestorableTime":{"type":"timestamp"},"Endpoint":{},"ReaderEndpoint":{},"MultiAZ":{"type":"boolean"},"Engine":{},"EngineVersion":{},"LatestRestorableTime":{"type":"timestamp"},"Port":{"type":"integer"},"MasterUsername":{},"DBClusterOptionGroupMemberships":{"type":"list","member":{"locationName":"DBClusterOptionGroup","type":"structure","members":{"DBClusterOptionGroupName":{},"Status":{}}}},"PreferredBackupWindow":{},"PreferredMaintenanceWindow":{},"ReplicationSourceIdentifier":{},"ReadReplicaIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaIdentifier"}},"DBClusterMembers":{"type":"list","member":{"locationName":"DBClusterMember","type":"structure","members":{"DBInstanceIdentifier":{},"IsClusterWriter":{"type":"boolean"},"DBClusterParameterGroupStatus":{},"PromotionTier":{"type":"integer"}},"wrapper":true}},"VpcSecurityGroups":{"shape":"S1e"},"HostedZoneId":{},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"DbClusterResourceId":{},"DBClusterArn":{},"AssociatedRoles":{"type":"list","member":{"locationName":"DBClusterRole","type":"structure","members":{"RoleArn":{},"Status":{}}}},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"CloneGroupId":{},"ClusterCreateTime":{"type":"timestamp"}},"wrapper":true},"S1w":{"type":"list","member":{"locationName":"DBSecurityGroupName"}},"S1y":{"type":"structure","members":{"DBInstanceIdentifier":{},"DBInstanceClass":{},"Engine":{},"DBInstanceStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"},"HostedZoneId":{}}},"AllocatedStorage":{"type":"integer"},"InstanceCreateTime":{"type":"timestamp"},"PreferredBackupWindow":{},"BackupRetentionPeriod":{"type":"integer"},"DBSecurityGroups":{"shape":"S1c"},"VpcSecurityGroups":{"shape":"S1e"},"DBParameterGroups":{"type":"list","member":{"locationName":"DBParameterGroup","type":"structure","members":{"DBParameterGroupName":{},"ParameterApplyStatus":{}}}},"AvailabilityZone":{},"DBSubnetGroup":{"shape":"S22"},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"DBInstanceClass":{},"AllocatedStorage":{"type":"integer"},"MasterUserPassword":{},"Port":{"type":"integer"},"BackupRetentionPeriod":{"type":"integer"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"LicenseModel":{},"Iops":{"type":"integer"},"DBInstanceIdentifier":{},"StorageType":{},"CACertificateIdentifier":{},"DBSubnetGroupName":{}}},"LatestRestorableTime":{"type":"timestamp"},"MultiAZ":{"type":"boolean"},"EngineVersion":{},"AutoMinorVersionUpgrade":{"type":"boolean"},"ReadReplicaSourceDBInstanceIdentifier":{},"ReadReplicaDBInstanceIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBInstanceIdentifier"}},"ReadReplicaDBClusterIdentifiers":{"type":"list","member":{"locationName":"ReadReplicaDBClusterIdentifier"}},"LicenseModel":{},"Iops":{"type":"integer"},"OptionGroupMemberships":{"type":"list","member":{"locationName":"OptionGroupMembership","type":"structure","members":{"OptionGroupName":{},"Status":{}}}},"CharacterSetName":{},"SecondaryAvailabilityZone":{},"PubliclyAccessible":{"type":"boolean"},"StatusInfos":{"type":"list","member":{"locationName":"DBInstanceStatusInfo","type":"structure","members":{"StatusType":{},"Normal":{"type":"boolean"},"Status":{},"Message":{}}}},"StorageType":{},"TdeCredentialArn":{},"DbInstancePort":{"type":"integer"},"DBClusterIdentifier":{},"StorageEncrypted":{"type":"boolean"},"KmsKeyId":{},"DbiResourceId":{},"CACertificateIdentifier":{},"DomainMemberships":{"type":"list","member":{"locationName":"DomainMembership","type":"structure","members":{"Domain":{},"Status":{},"FQDN":{},"IAMRoleName":{}}}},"CopyTagsToSnapshot":{"type":"boolean"},"MonitoringInterval":{"type":"integer"},"EnhancedMonitoringResourceArn":{},"MonitoringRoleArn":{},"PromotionTier":{"type":"integer"},"DBInstanceArn":{},"Timezone":{},"IAMDatabaseAuthenticationEnabled":{"type":"boolean"},"PerformanceInsightsEnabled":{"type":"boolean"},"PerformanceInsightsKMSKeyId":{}},"wrapper":true},"S22":{"type":"structure","members":{"DBSubnetGroupName":{},"DBSubnetGroupDescription":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S25"},"SubnetStatus":{}}}},"DBSubnetGroupArn":{}},"wrapper":true},"S25":{"type":"structure","members":{"Name":{}},"wrapper":true},"S2o":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S3f":{"type":"list","member":{"locationName":"Filter","type":"structure","required":["Name","Values"],"members":{"Name":{},"Values":{"type":"list","member":{"locationName":"Value"}}}}},"S3q":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"ApplyType":{},"DataType":{},"AllowedValues":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{},"ApplyMethod":{}}}},"S3v":{"type":"structure","members":{"DBClusterSnapshotIdentifier":{},"DBClusterSnapshotAttributes":{"type":"list","member":{"locationName":"DBClusterSnapshotAttribute","type":"structure","members":{"AttributeName":{},"AttributeValues":{"shape":"S3y"}}}}},"wrapper":true},"S3y":{"type":"list","member":{"locationName":"AttributeValue"}},"S49":{"type":"structure","members":{"CharacterSetName":{},"CharacterSetDescription":{}}},"S4w":{"type":"structure","members":{"DBSnapshotIdentifier":{},"DBSnapshotAttributes":{"type":"list","member":{"locationName":"DBSnapshotAttribute","type":"structure","members":{"AttributeName":{},"AttributeValues":{"shape":"S3y"}},"wrapper":true}}},"wrapper":true},"S57":{"type":"structure","members":{"DBParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S3q"}},"wrapper":true},"S6b":{"type":"structure","members":{"ReservedDBInstanceId":{},"ReservedDBInstancesOfferingId":{},"DBInstanceClass":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"DBInstanceCount":{"type":"integer"},"ProductDescription":{},"OfferingType":{},"MultiAZ":{"type":"boolean"},"State":{},"RecurringCharges":{"shape":"S6d"},"ReservedDBInstanceArn":{}},"wrapper":true},"S6d":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S6s":{"type":"list","member":{"locationName":"Range","type":"structure","members":{"From":{"type":"integer"},"To":{"type":"integer"},"Step":{"type":"integer"}}}},"S75":{"type":"structure","members":{"DBClusterParameterGroupName":{}}},"S7b":{"type":"structure","members":{"DBParameterGroupName":{}}}}}

/***/ }),
/* 315 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDBEngineVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBEngineVersions"},"DescribeDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBInstances"},"DescribeDBLogFiles":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DescribeDBLogFiles"},"DescribeDBParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBParameterGroups"},"DescribeDBParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeDBSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSecurityGroups"},"DescribeDBSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSnapshots"},"DescribeDBSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"DBSubnetGroups"},"DescribeEngineDefaultParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"EngineDefaults.Marker","result_key":"EngineDefaults.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeOptionGroupOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupOptions"},"DescribeOptionGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OptionGroupsList"},"DescribeOrderableDBInstanceOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableDBInstanceOptions"},"DescribeReservedDBInstances":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstances"},"DescribeReservedDBInstancesOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedDBInstancesOfferings"},"DownloadDBLogFilePortion":{"input_token":"Marker","limit_key":"NumberOfLines","more_results":"AdditionalDataPending","output_token":"Marker","result_key":"LogFileData"},"ListTagsForResource":{"result_key":"TagList"}}}

/***/ }),
/* 316 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"DBInstanceAvailable":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]},"DBInstanceDeleted":{"delay":30,"operation":"DescribeDBInstances","maxAttempts":60,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"DBInstances[].DBInstanceStatus"},{"expected":"DBInstanceNotFound","matcher":"error","state":"success"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"},{"expected":"resetting-master-credentials","matcher":"pathAny","state":"failure","argument":"DBInstances[].DBInstanceStatus"}]},"DBSnapshotAvailable":{"delay":30,"operation":"DescribeDBSnapshots","maxAttempts":60,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"DBSnapshots[].Status"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"incompatible-restore","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"incompatible-parameters","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"}]},"DBSnapshotDeleted":{"delay":30,"operation":"DescribeDBSnapshots","maxAttempts":60,"acceptors":[{"expected":"deleted","matcher":"pathAll","state":"success","argument":"DBSnapshots[].Status"},{"expected":"DBSnapshotNotFound","matcher":"error","state":"success"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"rebooting","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"},{"expected":"resetting-master-credentials","matcher":"pathAny","state":"failure","argument":"DBSnapshots[].Status"}]}}}

/***/ }),
/* 317 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-12-01","endpointPrefix":"redshift","protocol":"query","serviceFullName":"Amazon Redshift","signatureVersion":"v4","uid":"redshift-2012-12-01","xmlNamespace":"http://redshift.amazonaws.com/doc/2012-12-01/"},"operations":{"AuthorizeClusterSecurityGroupIngress":{"input":{"type":"structure","required":["ClusterSecurityGroupName"],"members":{"ClusterSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"AuthorizeClusterSecurityGroupIngressResult","type":"structure","members":{"ClusterSecurityGroup":{"shape":"S4"}}}},"AuthorizeSnapshotAccess":{"input":{"type":"structure","required":["SnapshotIdentifier","AccountWithRestoreAccess"],"members":{"SnapshotIdentifier":{},"SnapshotClusterIdentifier":{},"AccountWithRestoreAccess":{}}},"output":{"resultWrapper":"AuthorizeSnapshotAccessResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"CopyClusterSnapshot":{"input":{"type":"structure","required":["SourceSnapshotIdentifier","TargetSnapshotIdentifier"],"members":{"SourceSnapshotIdentifier":{},"SourceSnapshotClusterIdentifier":{},"TargetSnapshotIdentifier":{}}},"output":{"resultWrapper":"CopyClusterSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"CreateCluster":{"input":{"type":"structure","required":["ClusterIdentifier","NodeType","MasterUsername","MasterUserPassword"],"members":{"DBName":{},"ClusterIdentifier":{},"ClusterType":{},"NodeType":{},"MasterUsername":{},"MasterUserPassword":{},"ClusterSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"ClusterSubnetGroupName":{},"AvailabilityZone":{},"PreferredMaintenanceWindow":{},"ClusterParameterGroupName":{},"AutomatedSnapshotRetentionPeriod":{"type":"integer"},"Port":{"type":"integer"},"ClusterVersion":{},"AllowVersionUpgrade":{"type":"boolean"},"NumberOfNodes":{"type":"integer"},"PubliclyAccessible":{"type":"boolean"},"Encrypted":{"type":"boolean"},"HsmClientCertificateIdentifier":{},"HsmConfigurationIdentifier":{},"ElasticIp":{},"Tags":{"shape":"S7"},"KmsKeyId":{},"EnhancedVpcRouting":{"type":"boolean"},"AdditionalInfo":{},"IamRoles":{"shape":"St"}}},"output":{"resultWrapper":"CreateClusterResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"CreateClusterParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName","ParameterGroupFamily","Description"],"members":{"ParameterGroupName":{},"ParameterGroupFamily":{},"Description":{},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateClusterParameterGroupResult","type":"structure","members":{"ClusterParameterGroup":{"shape":"S1g"}}}},"CreateClusterSecurityGroup":{"input":{"type":"structure","required":["ClusterSecurityGroupName","Description"],"members":{"ClusterSecurityGroupName":{},"Description":{},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateClusterSecurityGroupResult","type":"structure","members":{"ClusterSecurityGroup":{"shape":"S4"}}}},"CreateClusterSnapshot":{"input":{"type":"structure","required":["SnapshotIdentifier","ClusterIdentifier"],"members":{"SnapshotIdentifier":{},"ClusterIdentifier":{},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateClusterSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"CreateClusterSubnetGroup":{"input":{"type":"structure","required":["ClusterSubnetGroupName","Description","SubnetIds"],"members":{"ClusterSubnetGroupName":{},"Description":{},"SubnetIds":{"shape":"S1m"},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateClusterSubnetGroupResult","type":"structure","members":{"ClusterSubnetGroup":{"shape":"S1o"}}}},"CreateEventSubscription":{"input":{"type":"structure","required":["SubscriptionName","SnsTopicArn"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"SourceIds":{"shape":"S1t"},"EventCategories":{"shape":"S1u"},"Severity":{},"Enabled":{"type":"boolean"},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S1w"}}}},"CreateHsmClientCertificate":{"input":{"type":"structure","required":["HsmClientCertificateIdentifier"],"members":{"HsmClientCertificateIdentifier":{},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateHsmClientCertificateResult","type":"structure","members":{"HsmClientCertificate":{"shape":"S1z"}}}},"CreateHsmConfiguration":{"input":{"type":"structure","required":["HsmConfigurationIdentifier","Description","HsmIpAddress","HsmPartitionName","HsmPartitionPassword","HsmServerPublicCertificate"],"members":{"HsmConfigurationIdentifier":{},"Description":{},"HsmIpAddress":{},"HsmPartitionName":{},"HsmPartitionPassword":{},"HsmServerPublicCertificate":{},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateHsmConfigurationResult","type":"structure","members":{"HsmConfiguration":{"shape":"S22"}}}},"CreateSnapshotCopyGrant":{"input":{"type":"structure","required":["SnapshotCopyGrantName"],"members":{"SnapshotCopyGrantName":{},"KmsKeyId":{},"Tags":{"shape":"S7"}}},"output":{"resultWrapper":"CreateSnapshotCopyGrantResult","type":"structure","members":{"SnapshotCopyGrant":{"shape":"S25"}}}},"CreateTags":{"input":{"type":"structure","required":["ResourceName","Tags"],"members":{"ResourceName":{},"Tags":{"shape":"S7"}}}},"DeleteCluster":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{},"SkipFinalClusterSnapshot":{"type":"boolean"},"FinalClusterSnapshotIdentifier":{}}},"output":{"resultWrapper":"DeleteClusterResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"DeleteClusterParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{}}}},"DeleteClusterSecurityGroup":{"input":{"type":"structure","required":["ClusterSecurityGroupName"],"members":{"ClusterSecurityGroupName":{}}}},"DeleteClusterSnapshot":{"input":{"type":"structure","required":["SnapshotIdentifier"],"members":{"SnapshotIdentifier":{},"SnapshotClusterIdentifier":{}}},"output":{"resultWrapper":"DeleteClusterSnapshotResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"DeleteClusterSubnetGroup":{"input":{"type":"structure","required":["ClusterSubnetGroupName"],"members":{"ClusterSubnetGroupName":{}}}},"DeleteEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{}}}},"DeleteHsmClientCertificate":{"input":{"type":"structure","required":["HsmClientCertificateIdentifier"],"members":{"HsmClientCertificateIdentifier":{}}}},"DeleteHsmConfiguration":{"input":{"type":"structure","required":["HsmConfigurationIdentifier"],"members":{"HsmConfigurationIdentifier":{}}}},"DeleteSnapshotCopyGrant":{"input":{"type":"structure","required":["SnapshotCopyGrantName"],"members":{"SnapshotCopyGrantName":{}}}},"DeleteTags":{"input":{"type":"structure","required":["ResourceName","TagKeys"],"members":{"ResourceName":{},"TagKeys":{"shape":"S2j"}}}},"DescribeClusterParameterGroups":{"input":{"type":"structure","members":{"ParameterGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeClusterParameterGroupsResult","type":"structure","members":{"Marker":{},"ParameterGroups":{"type":"list","member":{"shape":"S1g","locationName":"ClusterParameterGroup"}}}}},"DescribeClusterParameters":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{},"Source":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeClusterParametersResult","type":"structure","members":{"Parameters":{"shape":"S2q"},"Marker":{}}}},"DescribeClusterSecurityGroups":{"input":{"type":"structure","members":{"ClusterSecurityGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeClusterSecurityGroupsResult","type":"structure","members":{"Marker":{},"ClusterSecurityGroups":{"type":"list","member":{"shape":"S4","locationName":"ClusterSecurityGroup"}}}}},"DescribeClusterSnapshots":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"SnapshotIdentifier":{},"SnapshotType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"MaxRecords":{"type":"integer"},"Marker":{},"OwnerAccount":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeClusterSnapshotsResult","type":"structure","members":{"Marker":{},"Snapshots":{"type":"list","member":{"shape":"Sd","locationName":"Snapshot"}}}}},"DescribeClusterSubnetGroups":{"input":{"type":"structure","members":{"ClusterSubnetGroupName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeClusterSubnetGroupsResult","type":"structure","members":{"Marker":{},"ClusterSubnetGroups":{"type":"list","member":{"shape":"S1o","locationName":"ClusterSubnetGroup"}}}}},"DescribeClusterVersions":{"input":{"type":"structure","members":{"ClusterVersion":{},"ClusterParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeClusterVersionsResult","type":"structure","members":{"Marker":{},"ClusterVersions":{"type":"list","member":{"locationName":"ClusterVersion","type":"structure","members":{"ClusterVersion":{},"ClusterParameterGroupFamily":{},"Description":{}}}}}}},"DescribeClusters":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeClustersResult","type":"structure","members":{"Marker":{},"Clusters":{"type":"list","member":{"shape":"Sv","locationName":"Cluster"}}}}},"DescribeDefaultClusterParameters":{"input":{"type":"structure","required":["ParameterGroupFamily"],"members":{"ParameterGroupFamily":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeDefaultClusterParametersResult","type":"structure","members":{"DefaultClusterParameters":{"type":"structure","members":{"ParameterGroupFamily":{},"Marker":{},"Parameters":{"shape":"S2q"}},"wrapper":true}}}},"DescribeEventCategories":{"input":{"type":"structure","members":{"SourceType":{}}},"output":{"resultWrapper":"DescribeEventCategoriesResult","type":"structure","members":{"EventCategoriesMapList":{"type":"list","member":{"locationName":"EventCategoriesMap","type":"structure","members":{"SourceType":{},"Events":{"type":"list","member":{"locationName":"EventInfoMap","type":"structure","members":{"EventId":{},"EventCategories":{"shape":"S1u"},"EventDescription":{},"Severity":{}},"wrapper":true}}},"wrapper":true}}}}},"DescribeEventSubscriptions":{"input":{"type":"structure","members":{"SubscriptionName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeEventSubscriptionsResult","type":"structure","members":{"Marker":{},"EventSubscriptionsList":{"type":"list","member":{"shape":"S1w","locationName":"EventSubscription"}}}}},"DescribeEvents":{"input":{"type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Duration":{"type":"integer"},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeEventsResult","type":"structure","members":{"Marker":{},"Events":{"type":"list","member":{"locationName":"Event","type":"structure","members":{"SourceIdentifier":{},"SourceType":{},"Message":{},"EventCategories":{"shape":"S1u"},"Severity":{},"Date":{"type":"timestamp"},"EventId":{}}}}}}},"DescribeHsmClientCertificates":{"input":{"type":"structure","members":{"HsmClientCertificateIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeHsmClientCertificatesResult","type":"structure","members":{"Marker":{},"HsmClientCertificates":{"type":"list","member":{"shape":"S1z","locationName":"HsmClientCertificate"}}}}},"DescribeHsmConfigurations":{"input":{"type":"structure","members":{"HsmConfigurationIdentifier":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeHsmConfigurationsResult","type":"structure","members":{"Marker":{},"HsmConfigurations":{"type":"list","member":{"shape":"S22","locationName":"HsmConfiguration"}}}}},"DescribeLoggingStatus":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"shape":"S3x","resultWrapper":"DescribeLoggingStatusResult"}},"DescribeOrderableClusterOptions":{"input":{"type":"structure","members":{"ClusterVersion":{},"NodeType":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeOrderableClusterOptionsResult","type":"structure","members":{"OrderableClusterOptions":{"type":"list","member":{"locationName":"OrderableClusterOption","type":"structure","members":{"ClusterVersion":{},"ClusterType":{},"NodeType":{},"AvailabilityZones":{"type":"list","member":{"shape":"S1r","locationName":"AvailabilityZone"}}},"wrapper":true}},"Marker":{}}}},"DescribeReservedNodeOfferings":{"input":{"type":"structure","members":{"ReservedNodeOfferingId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedNodeOfferingsResult","type":"structure","members":{"Marker":{},"ReservedNodeOfferings":{"type":"list","member":{"locationName":"ReservedNodeOffering","type":"structure","members":{"ReservedNodeOfferingId":{},"NodeType":{},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"OfferingType":{},"RecurringCharges":{"shape":"S47"}},"wrapper":true}}}}},"DescribeReservedNodes":{"input":{"type":"structure","members":{"ReservedNodeId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeReservedNodesResult","type":"structure","members":{"Marker":{},"ReservedNodes":{"type":"list","member":{"shape":"S4c","locationName":"ReservedNode"}}}}},"DescribeResize":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"resultWrapper":"DescribeResizeResult","type":"structure","members":{"TargetNodeType":{},"TargetNumberOfNodes":{"type":"integer"},"TargetClusterType":{},"Status":{},"ImportTablesCompleted":{"type":"list","member":{}},"ImportTablesInProgress":{"type":"list","member":{}},"ImportTablesNotStarted":{"type":"list","member":{}},"AvgResizeRateInMegaBytesPerSecond":{"type":"double"},"TotalResizeDataInMegaBytes":{"type":"long"},"ProgressInMegaBytes":{"type":"long"},"ElapsedTimeInSeconds":{"type":"long"},"EstimatedTimeToCompletionInSeconds":{"type":"long"}}}},"DescribeSnapshotCopyGrants":{"input":{"type":"structure","members":{"SnapshotCopyGrantName":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeSnapshotCopyGrantsResult","type":"structure","members":{"Marker":{},"SnapshotCopyGrants":{"type":"list","member":{"shape":"S25","locationName":"SnapshotCopyGrant"}}}}},"DescribeTableRestoreStatus":{"input":{"type":"structure","members":{"ClusterIdentifier":{},"TableRestoreRequestId":{},"MaxRecords":{"type":"integer"},"Marker":{}}},"output":{"resultWrapper":"DescribeTableRestoreStatusResult","type":"structure","members":{"TableRestoreStatusDetails":{"type":"list","member":{"shape":"S4q","locationName":"TableRestoreStatus"}},"Marker":{}}}},"DescribeTags":{"input":{"type":"structure","members":{"ResourceName":{},"ResourceType":{},"MaxRecords":{"type":"integer"},"Marker":{},"TagKeys":{"shape":"S2j"},"TagValues":{"shape":"S2l"}}},"output":{"resultWrapper":"DescribeTagsResult","type":"structure","members":{"TaggedResources":{"type":"list","member":{"locationName":"TaggedResource","type":"structure","members":{"Tag":{"shape":"S8"},"ResourceName":{},"ResourceType":{}}}},"Marker":{}}}},"DisableLogging":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"shape":"S3x","resultWrapper":"DisableLoggingResult"}},"DisableSnapshotCopy":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"resultWrapper":"DisableSnapshotCopyResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"EnableLogging":{"input":{"type":"structure","required":["ClusterIdentifier","BucketName"],"members":{"ClusterIdentifier":{},"BucketName":{},"S3KeyPrefix":{}}},"output":{"shape":"S3x","resultWrapper":"EnableLoggingResult"}},"EnableSnapshotCopy":{"input":{"type":"structure","required":["ClusterIdentifier","DestinationRegion"],"members":{"ClusterIdentifier":{},"DestinationRegion":{},"RetentionPeriod":{"type":"integer"},"SnapshotCopyGrantName":{}}},"output":{"resultWrapper":"EnableSnapshotCopyResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"GetClusterCredentials":{"input":{"type":"structure","required":["DbUser","ClusterIdentifier"],"members":{"DbUser":{},"DbName":{},"ClusterIdentifier":{},"DurationSeconds":{"type":"integer"},"AutoCreate":{"type":"boolean"},"DbGroups":{"type":"list","member":{"locationName":"DbGroup"}}}},"output":{"resultWrapper":"GetClusterCredentialsResult","type":"structure","members":{"DbUser":{},"DbPassword":{"type":"string","sensitive":true},"Expiration":{"type":"timestamp"}}}},"ModifyCluster":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{},"ClusterType":{},"NodeType":{},"NumberOfNodes":{"type":"integer"},"ClusterSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"MasterUserPassword":{},"ClusterParameterGroupName":{},"AutomatedSnapshotRetentionPeriod":{"type":"integer"},"PreferredMaintenanceWindow":{},"ClusterVersion":{},"AllowVersionUpgrade":{"type":"boolean"},"HsmClientCertificateIdentifier":{},"HsmConfigurationIdentifier":{},"NewClusterIdentifier":{},"PubliclyAccessible":{"type":"boolean"},"ElasticIp":{},"EnhancedVpcRouting":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyClusterResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"ModifyClusterIamRoles":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{},"AddIamRoles":{"shape":"St"},"RemoveIamRoles":{"shape":"St"}}},"output":{"resultWrapper":"ModifyClusterIamRolesResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"ModifyClusterParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName","Parameters"],"members":{"ParameterGroupName":{},"Parameters":{"shape":"S2q"}}},"output":{"shape":"S5b","resultWrapper":"ModifyClusterParameterGroupResult"}},"ModifyClusterSubnetGroup":{"input":{"type":"structure","required":["ClusterSubnetGroupName","SubnetIds"],"members":{"ClusterSubnetGroupName":{},"Description":{},"SubnetIds":{"shape":"S1m"}}},"output":{"resultWrapper":"ModifyClusterSubnetGroupResult","type":"structure","members":{"ClusterSubnetGroup":{"shape":"S1o"}}}},"ModifyEventSubscription":{"input":{"type":"structure","required":["SubscriptionName"],"members":{"SubscriptionName":{},"SnsTopicArn":{},"SourceType":{},"SourceIds":{"shape":"S1t"},"EventCategories":{"shape":"S1u"},"Severity":{},"Enabled":{"type":"boolean"}}},"output":{"resultWrapper":"ModifyEventSubscriptionResult","type":"structure","members":{"EventSubscription":{"shape":"S1w"}}}},"ModifySnapshotCopyRetentionPeriod":{"input":{"type":"structure","required":["ClusterIdentifier","RetentionPeriod"],"members":{"ClusterIdentifier":{},"RetentionPeriod":{"type":"integer"}}},"output":{"resultWrapper":"ModifySnapshotCopyRetentionPeriodResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"PurchaseReservedNodeOffering":{"input":{"type":"structure","required":["ReservedNodeOfferingId"],"members":{"ReservedNodeOfferingId":{},"NodeCount":{"type":"integer"}}},"output":{"resultWrapper":"PurchaseReservedNodeOfferingResult","type":"structure","members":{"ReservedNode":{"shape":"S4c"}}}},"RebootCluster":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"resultWrapper":"RebootClusterResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"ResetClusterParameterGroup":{"input":{"type":"structure","required":["ParameterGroupName"],"members":{"ParameterGroupName":{},"ResetAllParameters":{"type":"boolean"},"Parameters":{"shape":"S2q"}}},"output":{"shape":"S5b","resultWrapper":"ResetClusterParameterGroupResult"}},"RestoreFromClusterSnapshot":{"input":{"type":"structure","required":["ClusterIdentifier","SnapshotIdentifier"],"members":{"ClusterIdentifier":{},"SnapshotIdentifier":{},"SnapshotClusterIdentifier":{},"Port":{"type":"integer"},"AvailabilityZone":{},"AllowVersionUpgrade":{"type":"boolean"},"ClusterSubnetGroupName":{},"PubliclyAccessible":{"type":"boolean"},"OwnerAccount":{},"HsmClientCertificateIdentifier":{},"HsmConfigurationIdentifier":{},"ElasticIp":{},"ClusterParameterGroupName":{},"ClusterSecurityGroups":{"shape":"Sp"},"VpcSecurityGroupIds":{"shape":"Sq"},"PreferredMaintenanceWindow":{},"AutomatedSnapshotRetentionPeriod":{"type":"integer"},"KmsKeyId":{},"NodeType":{},"EnhancedVpcRouting":{"type":"boolean"},"AdditionalInfo":{},"IamRoles":{"shape":"St"}}},"output":{"resultWrapper":"RestoreFromClusterSnapshotResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}},"RestoreTableFromClusterSnapshot":{"input":{"type":"structure","required":["ClusterIdentifier","SnapshotIdentifier","SourceDatabaseName","SourceTableName","NewTableName"],"members":{"ClusterIdentifier":{},"SnapshotIdentifier":{},"SourceDatabaseName":{},"SourceSchemaName":{},"SourceTableName":{},"TargetDatabaseName":{},"TargetSchemaName":{},"NewTableName":{}}},"output":{"resultWrapper":"RestoreTableFromClusterSnapshotResult","type":"structure","members":{"TableRestoreStatus":{"shape":"S4q"}}}},"RevokeClusterSecurityGroupIngress":{"input":{"type":"structure","required":["ClusterSecurityGroupName"],"members":{"ClusterSecurityGroupName":{},"CIDRIP":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{}}},"output":{"resultWrapper":"RevokeClusterSecurityGroupIngressResult","type":"structure","members":{"ClusterSecurityGroup":{"shape":"S4"}}}},"RevokeSnapshotAccess":{"input":{"type":"structure","required":["SnapshotIdentifier","AccountWithRestoreAccess"],"members":{"SnapshotIdentifier":{},"SnapshotClusterIdentifier":{},"AccountWithRestoreAccess":{}}},"output":{"resultWrapper":"RevokeSnapshotAccessResult","type":"structure","members":{"Snapshot":{"shape":"Sd"}}}},"RotateEncryptionKey":{"input":{"type":"structure","required":["ClusterIdentifier"],"members":{"ClusterIdentifier":{}}},"output":{"resultWrapper":"RotateEncryptionKeyResult","type":"structure","members":{"Cluster":{"shape":"Sv"}}}}},"shapes":{"S4":{"type":"structure","members":{"ClusterSecurityGroupName":{},"Description":{},"EC2SecurityGroups":{"type":"list","member":{"locationName":"EC2SecurityGroup","type":"structure","members":{"Status":{},"EC2SecurityGroupName":{},"EC2SecurityGroupOwnerId":{},"Tags":{"shape":"S7"}}}},"IPRanges":{"type":"list","member":{"locationName":"IPRange","type":"structure","members":{"Status":{},"CIDRIP":{},"Tags":{"shape":"S7"}}}},"Tags":{"shape":"S7"}},"wrapper":true},"S7":{"type":"list","member":{"shape":"S8","locationName":"Tag"}},"S8":{"type":"structure","members":{"Key":{},"Value":{}}},"Sd":{"type":"structure","members":{"SnapshotIdentifier":{},"ClusterIdentifier":{},"SnapshotCreateTime":{"type":"timestamp"},"Status":{},"Port":{"type":"integer"},"AvailabilityZone":{},"ClusterCreateTime":{"type":"timestamp"},"MasterUsername":{},"ClusterVersion":{},"SnapshotType":{},"NodeType":{},"NumberOfNodes":{"type":"integer"},"DBName":{},"VpcId":{},"Encrypted":{"type":"boolean"},"KmsKeyId":{},"EncryptedWithHSM":{"type":"boolean"},"AccountsWithRestoreAccess":{"type":"list","member":{"locationName":"AccountWithRestoreAccess","type":"structure","members":{"AccountId":{},"AccountAlias":{}}}},"OwnerAccount":{},"TotalBackupSizeInMegaBytes":{"type":"double"},"ActualIncrementalBackupSizeInMegaBytes":{"type":"double"},"BackupProgressInMegaBytes":{"type":"double"},"CurrentBackupRateInMegaBytesPerSecond":{"type":"double"},"EstimatedSecondsToCompletion":{"type":"long"},"ElapsedTimeInSeconds":{"type":"long"},"SourceRegion":{},"Tags":{"shape":"S7"},"RestorableNodeTypes":{"type":"list","member":{"locationName":"NodeType"}},"EnhancedVpcRouting":{"type":"boolean"}},"wrapper":true},"Sp":{"type":"list","member":{"locationName":"ClusterSecurityGroupName"}},"Sq":{"type":"list","member":{"locationName":"VpcSecurityGroupId"}},"St":{"type":"list","member":{"locationName":"IamRoleArn"}},"Sv":{"type":"structure","members":{"ClusterIdentifier":{},"NodeType":{},"ClusterStatus":{},"ModifyStatus":{},"MasterUsername":{},"DBName":{},"Endpoint":{"type":"structure","members":{"Address":{},"Port":{"type":"integer"}}},"ClusterCreateTime":{"type":"timestamp"},"AutomatedSnapshotRetentionPeriod":{"type":"integer"},"ClusterSecurityGroups":{"type":"list","member":{"locationName":"ClusterSecurityGroup","type":"structure","members":{"ClusterSecurityGroupName":{},"Status":{}}}},"VpcSecurityGroups":{"type":"list","member":{"locationName":"VpcSecurityGroup","type":"structure","members":{"VpcSecurityGroupId":{},"Status":{}}}},"ClusterParameterGroups":{"type":"list","member":{"locationName":"ClusterParameterGroup","type":"structure","members":{"ParameterGroupName":{},"ParameterApplyStatus":{},"ClusterParameterStatusList":{"type":"list","member":{"type":"structure","members":{"ParameterName":{},"ParameterApplyStatus":{},"ParameterApplyErrorDescription":{}}}}}}},"ClusterSubnetGroupName":{},"VpcId":{},"AvailabilityZone":{},"PreferredMaintenanceWindow":{},"PendingModifiedValues":{"type":"structure","members":{"MasterUserPassword":{},"NodeType":{},"NumberOfNodes":{"type":"integer"},"ClusterType":{},"ClusterVersion":{},"AutomatedSnapshotRetentionPeriod":{"type":"integer"},"ClusterIdentifier":{},"PubliclyAccessible":{"type":"boolean"},"EnhancedVpcRouting":{"type":"boolean"}}},"ClusterVersion":{},"AllowVersionUpgrade":{"type":"boolean"},"NumberOfNodes":{"type":"integer"},"PubliclyAccessible":{"type":"boolean"},"Encrypted":{"type":"boolean"},"RestoreStatus":{"type":"structure","members":{"Status":{},"CurrentRestoreRateInMegaBytesPerSecond":{"type":"double"},"SnapshotSizeInMegaBytes":{"type":"long"},"ProgressInMegaBytes":{"type":"long"},"ElapsedTimeInSeconds":{"type":"long"},"EstimatedTimeToCompletionInSeconds":{"type":"long"}}},"HsmStatus":{"type":"structure","members":{"HsmClientCertificateIdentifier":{},"HsmConfigurationIdentifier":{},"Status":{}}},"ClusterSnapshotCopyStatus":{"type":"structure","members":{"DestinationRegion":{},"RetentionPeriod":{"type":"long"},"SnapshotCopyGrantName":{}}},"ClusterPublicKey":{},"ClusterNodes":{"type":"list","member":{"type":"structure","members":{"NodeRole":{},"PrivateIPAddress":{},"PublicIPAddress":{}}}},"ElasticIpStatus":{"type":"structure","members":{"ElasticIp":{},"Status":{}}},"ClusterRevisionNumber":{},"Tags":{"shape":"S7"},"KmsKeyId":{},"EnhancedVpcRouting":{"type":"boolean"},"IamRoles":{"type":"list","member":{"locationName":"ClusterIamRole","type":"structure","members":{"IamRoleArn":{},"ApplyStatus":{}}}}},"wrapper":true},"S1g":{"type":"structure","members":{"ParameterGroupName":{},"ParameterGroupFamily":{},"Description":{},"Tags":{"shape":"S7"}},"wrapper":true},"S1m":{"type":"list","member":{"locationName":"SubnetIdentifier"}},"S1o":{"type":"structure","members":{"ClusterSubnetGroupName":{},"Description":{},"VpcId":{},"SubnetGroupStatus":{},"Subnets":{"type":"list","member":{"locationName":"Subnet","type":"structure","members":{"SubnetIdentifier":{},"SubnetAvailabilityZone":{"shape":"S1r"},"SubnetStatus":{}}}},"Tags":{"shape":"S7"}},"wrapper":true},"S1r":{"type":"structure","members":{"Name":{}},"wrapper":true},"S1t":{"type":"list","member":{"locationName":"SourceId"}},"S1u":{"type":"list","member":{"locationName":"EventCategory"}},"S1w":{"type":"structure","members":{"CustomerAwsId":{},"CustSubscriptionId":{},"SnsTopicArn":{},"Status":{},"SubscriptionCreationTime":{"type":"timestamp"},"SourceType":{},"SourceIdsList":{"shape":"S1t"},"EventCategoriesList":{"shape":"S1u"},"Severity":{},"Enabled":{"type":"boolean"},"Tags":{"shape":"S7"}},"wrapper":true},"S1z":{"type":"structure","members":{"HsmClientCertificateIdentifier":{},"HsmClientCertificatePublicKey":{},"Tags":{"shape":"S7"}},"wrapper":true},"S22":{"type":"structure","members":{"HsmConfigurationIdentifier":{},"Description":{},"HsmIpAddress":{},"HsmPartitionName":{},"Tags":{"shape":"S7"}},"wrapper":true},"S25":{"type":"structure","members":{"SnapshotCopyGrantName":{},"KmsKeyId":{},"Tags":{"shape":"S7"}},"wrapper":true},"S2j":{"type":"list","member":{"locationName":"TagKey"}},"S2l":{"type":"list","member":{"locationName":"TagValue"}},"S2q":{"type":"list","member":{"locationName":"Parameter","type":"structure","members":{"ParameterName":{},"ParameterValue":{},"Description":{},"Source":{},"DataType":{},"AllowedValues":{},"ApplyType":{},"IsModifiable":{"type":"boolean"},"MinimumEngineVersion":{}}}},"S3x":{"type":"structure","members":{"LoggingEnabled":{"type":"boolean"},"BucketName":{},"S3KeyPrefix":{},"LastSuccessfulDeliveryTime":{"type":"timestamp"},"LastFailureTime":{"type":"timestamp"},"LastFailureMessage":{}}},"S47":{"type":"list","member":{"locationName":"RecurringCharge","type":"structure","members":{"RecurringChargeAmount":{"type":"double"},"RecurringChargeFrequency":{}},"wrapper":true}},"S4c":{"type":"structure","members":{"ReservedNodeId":{},"ReservedNodeOfferingId":{},"NodeType":{},"StartTime":{"type":"timestamp"},"Duration":{"type":"integer"},"FixedPrice":{"type":"double"},"UsagePrice":{"type":"double"},"CurrencyCode":{},"NodeCount":{"type":"integer"},"State":{},"OfferingType":{},"RecurringCharges":{"shape":"S47"}},"wrapper":true},"S4q":{"type":"structure","members":{"TableRestoreRequestId":{},"Status":{},"Message":{},"RequestTime":{"type":"timestamp"},"ProgressInMegaBytes":{"type":"long"},"TotalDataInMegaBytes":{"type":"long"},"ClusterIdentifier":{},"SnapshotIdentifier":{},"SourceDatabaseName":{},"SourceSchemaName":{},"SourceTableName":{},"TargetDatabaseName":{},"TargetSchemaName":{},"NewTableName":{}},"wrapper":true},"S5b":{"type":"structure","members":{"ParameterGroupName":{},"ParameterGroupStatus":{}}}}}

/***/ }),
/* 318 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeClusterParameterGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ParameterGroups"},"DescribeClusterParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Parameters"},"DescribeClusterSecurityGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ClusterSecurityGroups"},"DescribeClusterSnapshots":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Snapshots"},"DescribeClusterSubnetGroups":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ClusterSubnetGroups"},"DescribeClusterVersions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ClusterVersions"},"DescribeClusters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Clusters"},"DescribeDefaultClusterParameters":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"DefaultClusterParameters.Marker","result_key":"DefaultClusterParameters.Parameters"},"DescribeEventSubscriptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"EventSubscriptionsList"},"DescribeEvents":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"Events"},"DescribeHsmClientCertificates":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"HsmClientCertificates"},"DescribeHsmConfigurations":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"HsmConfigurations"},"DescribeOrderableClusterOptions":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"OrderableClusterOptions"},"DescribeReservedNodeOfferings":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedNodeOfferings"},"DescribeReservedNodes":{"input_token":"Marker","limit_key":"MaxRecords","output_token":"Marker","result_key":"ReservedNodes"}}}

/***/ }),
/* 319 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"ClusterAvailable":{"delay":60,"operation":"DescribeClusters","maxAttempts":30,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Clusters[].ClusterStatus"},{"expected":"deleting","matcher":"pathAny","state":"failure","argument":"Clusters[].ClusterStatus"},{"expected":"ClusterNotFound","matcher":"error","state":"retry"}]},"ClusterDeleted":{"delay":60,"operation":"DescribeClusters","maxAttempts":30,"acceptors":[{"expected":"ClusterNotFound","matcher":"error","state":"success"},{"expected":"creating","matcher":"pathAny","state":"failure","argument":"Clusters[].ClusterStatus"},{"expected":"modifying","matcher":"pathAny","state":"failure","argument":"Clusters[].ClusterStatus"}]},"ClusterRestored":{"operation":"DescribeClusters","maxAttempts":30,"delay":60,"acceptors":[{"state":"success","matcher":"pathAll","argument":"Clusters[].RestoreStatus.Status","expected":"completed"},{"state":"failure","matcher":"pathAny","argument":"Clusters[].ClusterStatus","expected":"deleting"}]},"SnapshotAvailable":{"delay":15,"operation":"DescribeClusterSnapshots","maxAttempts":20,"acceptors":[{"expected":"available","matcher":"pathAll","state":"success","argument":"Snapshots[].Status"},{"expected":"failed","matcher":"pathAny","state":"failure","argument":"Snapshots[].Status"},{"expected":"deleted","matcher":"pathAny","state":"failure","argument":"Snapshots[].Status"}]}}}

/***/ }),
/* 320 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-06-27","endpointPrefix":"rekognition","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Rekognition","signatureVersion":"v4","targetPrefix":"RekognitionService","uid":"rekognition-2016-06-27"},"operations":{"CompareFaces":{"input":{"type":"structure","required":["SourceImage","TargetImage"],"members":{"SourceImage":{"shape":"S2"},"TargetImage":{"shape":"S2"},"SimilarityThreshold":{"type":"float"}}},"output":{"type":"structure","members":{"SourceImageFace":{"type":"structure","members":{"BoundingBox":{"shape":"Sb"},"Confidence":{"type":"float"}}},"FaceMatches":{"type":"list","member":{"type":"structure","members":{"Similarity":{"type":"float"},"Face":{"shape":"Sf"}}}},"UnmatchedFaces":{"type":"list","member":{"shape":"Sf"}},"SourceImageOrientationCorrection":{},"TargetImageOrientationCorrection":{}}}},"CreateCollection":{"input":{"type":"structure","required":["CollectionId"],"members":{"CollectionId":{}}},"output":{"type":"structure","members":{"StatusCode":{"type":"integer"},"CollectionArn":{}}}},"DeleteCollection":{"input":{"type":"structure","required":["CollectionId"],"members":{"CollectionId":{}}},"output":{"type":"structure","members":{"StatusCode":{"type":"integer"}}}},"DeleteFaces":{"input":{"type":"structure","required":["CollectionId","FaceIds"],"members":{"CollectionId":{},"FaceIds":{"shape":"Sw"}}},"output":{"type":"structure","members":{"DeletedFaces":{"shape":"Sw"}}}},"DetectFaces":{"input":{"type":"structure","required":["Image"],"members":{"Image":{"shape":"S2"},"Attributes":{"shape":"S10"}}},"output":{"type":"structure","members":{"FaceDetails":{"type":"list","member":{"shape":"S14"}},"OrientationCorrection":{}}}},"DetectLabels":{"input":{"type":"structure","required":["Image"],"members":{"Image":{"shape":"S2"},"MaxLabels":{"type":"integer"},"MinConfidence":{"type":"float"}}},"output":{"type":"structure","members":{"Labels":{"type":"list","member":{"type":"structure","members":{"Name":{},"Confidence":{"type":"float"}}}},"OrientationCorrection":{}}}},"DetectModerationLabels":{"input":{"type":"structure","required":["Image"],"members":{"Image":{"shape":"S2"},"MinConfidence":{"type":"float"}}},"output":{"type":"structure","members":{"ModerationLabels":{"type":"list","member":{"type":"structure","members":{"Confidence":{"type":"float"},"Name":{},"ParentName":{}}}}}}},"GetCelebrityInfo":{"input":{"type":"structure","required":["Id"],"members":{"Id":{}}},"output":{"type":"structure","members":{"Urls":{"shape":"S1u"},"Name":{}}}},"IndexFaces":{"input":{"type":"structure","required":["CollectionId","Image"],"members":{"CollectionId":{},"Image":{"shape":"S2"},"ExternalImageId":{},"DetectionAttributes":{"shape":"S10"}}},"output":{"type":"structure","members":{"FaceRecords":{"type":"list","member":{"type":"structure","members":{"Face":{"shape":"S21"},"FaceDetail":{"shape":"S14"}}}},"OrientationCorrection":{}}}},"ListCollections":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"CollectionIds":{"type":"list","member":{}},"NextToken":{}}}},"ListFaces":{"input":{"type":"structure","required":["CollectionId"],"members":{"CollectionId":{},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Faces":{"type":"list","member":{"shape":"S21"}},"NextToken":{}}}},"RecognizeCelebrities":{"input":{"type":"structure","required":["Image"],"members":{"Image":{"shape":"S2"}}},"output":{"type":"structure","members":{"CelebrityFaces":{"type":"list","member":{"type":"structure","members":{"Urls":{"shape":"S1u"},"Name":{},"Id":{},"Face":{"shape":"Sf"},"MatchConfidence":{"type":"float"}}}},"UnrecognizedFaces":{"type":"list","member":{"shape":"Sf"}},"OrientationCorrection":{}}}},"SearchFaces":{"input":{"type":"structure","required":["CollectionId","FaceId"],"members":{"CollectionId":{},"FaceId":{},"MaxFaces":{"type":"integer"},"FaceMatchThreshold":{"type":"float"}}},"output":{"type":"structure","members":{"SearchedFaceId":{},"FaceMatches":{"shape":"S2j"}}}},"SearchFacesByImage":{"input":{"type":"structure","required":["CollectionId","Image"],"members":{"CollectionId":{},"Image":{"shape":"S2"},"MaxFaces":{"type":"integer"},"FaceMatchThreshold":{"type":"float"}}},"output":{"type":"structure","members":{"SearchedFaceBoundingBox":{"shape":"Sb"},"SearchedFaceConfidence":{"type":"float"},"FaceMatches":{"shape":"S2j"}}}}},"shapes":{"S2":{"type":"structure","members":{"Bytes":{"type":"blob"},"S3Object":{"type":"structure","members":{"Bucket":{},"Name":{},"Version":{}}}}},"Sb":{"type":"structure","members":{"Width":{"type":"float"},"Height":{"type":"float"},"Left":{"type":"float"},"Top":{"type":"float"}}},"Sf":{"type":"structure","members":{"BoundingBox":{"shape":"Sb"},"Confidence":{"type":"float"},"Landmarks":{"shape":"Sg"},"Pose":{"shape":"Sj"},"Quality":{"shape":"Sl"}}},"Sg":{"type":"list","member":{"type":"structure","members":{"Type":{},"X":{"type":"float"},"Y":{"type":"float"}}}},"Sj":{"type":"structure","members":{"Roll":{"type":"float"},"Yaw":{"type":"float"},"Pitch":{"type":"float"}}},"Sl":{"type":"structure","members":{"Brightness":{"type":"float"},"Sharpness":{"type":"float"}}},"Sw":{"type":"list","member":{}},"S10":{"type":"list","member":{}},"S14":{"type":"structure","members":{"BoundingBox":{"shape":"Sb"},"AgeRange":{"type":"structure","members":{"Low":{"type":"integer"},"High":{"type":"integer"}}},"Smile":{"type":"structure","members":{"Value":{"type":"boolean"},"Confidence":{"type":"float"}}},"Eyeglasses":{"type":"structure","members":{"Value":{"type":"boolean"},"Confidence":{"type":"float"}}},"Sunglasses":{"type":"structure","members":{"Value":{"type":"boolean"},"Confidence":{"type":"float"}}},"Gender":{"type":"structure","members":{"Value":{},"Confidence":{"type":"float"}}},"Beard":{"type":"structure","members":{"Value":{"type":"boolean"},"Confidence":{"type":"float"}}},"Mustache":{"type":"structure","members":{"Value":{"type":"boolean"},"Confidence":{"type":"float"}}},"EyesOpen":{"type":"structure","members":{"Value":{"type":"boolean"},"Confidence":{"type":"float"}}},"MouthOpen":{"type":"structure","members":{"Value":{"type":"boolean"},"Confidence":{"type":"float"}}},"Emotions":{"type":"list","member":{"type":"structure","members":{"Type":{},"Confidence":{"type":"float"}}}},"Landmarks":{"shape":"Sg"},"Pose":{"shape":"Sj"},"Quality":{"shape":"Sl"},"Confidence":{"type":"float"}}},"S1u":{"type":"list","member":{}},"S21":{"type":"structure","members":{"FaceId":{},"BoundingBox":{"shape":"Sb"},"ImageId":{},"ExternalImageId":{},"Confidence":{"type":"float"}}},"S2j":{"type":"list","member":{"type":"structure","members":{"Similarity":{"type":"float"},"Face":{"shape":"S21"}}}}}}

/***/ }),
/* 321 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListCollections":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"CollectionIds"},"ListFaces":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Faces"}}}

/***/ }),
/* 322 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2017-01-26","endpointPrefix":"tagging","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Resource Groups Tagging API","signatureVersion":"v4","targetPrefix":"ResourceGroupsTaggingAPI_20170126","uid":"resourcegroupstaggingapi-2017-01-26"},"operations":{"GetResources":{"input":{"type":"structure","members":{"PaginationToken":{},"TagFilters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"type":"list","member":{}}}}},"ResourcesPerPage":{"type":"integer"},"TagsPerPage":{"type":"integer"},"ResourceTypeFilters":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"PaginationToken":{},"ResourceTagMappingList":{"type":"list","member":{"type":"structure","members":{"ResourceARN":{},"Tags":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}}}}}}}},"GetTagKeys":{"input":{"type":"structure","members":{"PaginationToken":{}}},"output":{"type":"structure","members":{"PaginationToken":{},"TagKeys":{"type":"list","member":{}}}}},"GetTagValues":{"input":{"type":"structure","required":["Key"],"members":{"PaginationToken":{},"Key":{}}},"output":{"type":"structure","members":{"PaginationToken":{},"TagValues":{"type":"list","member":{}}}}},"TagResources":{"input":{"type":"structure","required":["ResourceARNList","Tags"],"members":{"ResourceARNList":{"shape":"Sp"},"Tags":{"type":"map","key":{},"value":{}}}},"output":{"type":"structure","members":{"FailedResourcesMap":{"shape":"Ss"}}}},"UntagResources":{"input":{"type":"structure","required":["ResourceARNList","TagKeys"],"members":{"ResourceARNList":{"shape":"Sp"},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"FailedResourcesMap":{"shape":"Ss"}}}}},"shapes":{"Sp":{"type":"list","member":{}},"Ss":{"type":"map","key":{},"value":{"type":"structure","members":{"StatusCode":{"type":"integer"},"ErrorCode":{},"ErrorMessage":{}}}}}}

/***/ }),
/* 323 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetResources":{"input_token":"PaginationToken","limit_key":"ResourcesPerPage","output_token":"PaginationToken","result_key":"ResourceTagMappingList"},"GetTagKeys":{"input_token":"PaginationToken","output_token":"PaginationToken","result_key":"TagKeys"},"GetTagValues":{"input_token":"PaginationToken","output_token":"PaginationToken","result_key":"TagValues"}}}

/***/ }),
/* 324 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-04-01","endpointPrefix":"route53","globalEndpoint":"route53.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"Route 53","serviceFullName":"Amazon Route 53","signatureVersion":"v4","uid":"route53-2013-04-01"},"operations":{"AssociateVPCWithHostedZone":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/associatevpc"},"input":{"locationName":"AssociateVPCWithHostedZoneRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","VPC"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"VPC":{"shape":"S3"},"Comment":{}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"ChangeResourceRecordSets":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/rrset/"},"input":{"locationName":"ChangeResourceRecordSetsRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","ChangeBatch"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"ChangeBatch":{"type":"structure","required":["Changes"],"members":{"Comment":{},"Changes":{"type":"list","member":{"locationName":"Change","type":"structure","required":["Action","ResourceRecordSet"],"members":{"Action":{},"ResourceRecordSet":{"shape":"Sh"}}}}}}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"ChangeTagsForResource":{"http":{"requestUri":"/2013-04-01/tags/{ResourceType}/{ResourceId}"},"input":{"locationName":"ChangeTagsForResourceRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{"location":"uri","locationName":"ResourceType"},"ResourceId":{"location":"uri","locationName":"ResourceId"},"AddTags":{"shape":"S15"},"RemoveTagKeys":{"type":"list","member":{"locationName":"Key"}}}},"output":{"type":"structure","members":{}}},"CreateHealthCheck":{"http":{"requestUri":"/2013-04-01/healthcheck","responseCode":201},"input":{"locationName":"CreateHealthCheckRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["CallerReference","HealthCheckConfig"],"members":{"CallerReference":{},"HealthCheckConfig":{"shape":"S1d"}}},"output":{"type":"structure","required":["HealthCheck","Location"],"members":{"HealthCheck":{"shape":"S1y"},"Location":{"location":"header","locationName":"Location"}}}},"CreateHostedZone":{"http":{"requestUri":"/2013-04-01/hostedzone","responseCode":201},"input":{"locationName":"CreateHostedZoneRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Name","CallerReference"],"members":{"Name":{},"VPC":{"shape":"S3"},"CallerReference":{},"HostedZoneConfig":{"shape":"S2e"},"DelegationSetId":{}}},"output":{"type":"structure","required":["HostedZone","ChangeInfo","DelegationSet","Location"],"members":{"HostedZone":{"shape":"S2h"},"ChangeInfo":{"shape":"S8"},"DelegationSet":{"shape":"S2j"},"VPC":{"shape":"S3"},"Location":{"location":"header","locationName":"Location"}}}},"CreateQueryLoggingConfig":{"http":{"requestUri":"/2013-04-01/queryloggingconfig","responseCode":201},"input":{"locationName":"CreateQueryLoggingConfigRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","CloudWatchLogsLogGroupArn"],"members":{"HostedZoneId":{},"CloudWatchLogsLogGroupArn":{}}},"output":{"type":"structure","required":["QueryLoggingConfig","Location"],"members":{"QueryLoggingConfig":{"shape":"S2o"},"Location":{"location":"header","locationName":"Location"}}}},"CreateReusableDelegationSet":{"http":{"requestUri":"/2013-04-01/delegationset","responseCode":201},"input":{"locationName":"CreateReusableDelegationSetRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["CallerReference"],"members":{"CallerReference":{},"HostedZoneId":{}}},"output":{"type":"structure","required":["DelegationSet","Location"],"members":{"DelegationSet":{"shape":"S2j"},"Location":{"location":"header","locationName":"Location"}}}},"CreateTrafficPolicy":{"http":{"requestUri":"/2013-04-01/trafficpolicy","responseCode":201},"input":{"locationName":"CreateTrafficPolicyRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Name","Document"],"members":{"Name":{},"Document":{},"Comment":{}}},"output":{"type":"structure","required":["TrafficPolicy","Location"],"members":{"TrafficPolicy":{"shape":"S2x"},"Location":{"location":"header","locationName":"Location"}}}},"CreateTrafficPolicyInstance":{"http":{"requestUri":"/2013-04-01/trafficpolicyinstance","responseCode":201},"input":{"locationName":"CreateTrafficPolicyInstanceRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","Name","TTL","TrafficPolicyId","TrafficPolicyVersion"],"members":{"HostedZoneId":{},"Name":{},"TTL":{"type":"long"},"TrafficPolicyId":{},"TrafficPolicyVersion":{"type":"integer"}}},"output":{"type":"structure","required":["TrafficPolicyInstance","Location"],"members":{"TrafficPolicyInstance":{"shape":"S32"},"Location":{"location":"header","locationName":"Location"}}}},"CreateTrafficPolicyVersion":{"http":{"requestUri":"/2013-04-01/trafficpolicy/{Id}","responseCode":201},"input":{"locationName":"CreateTrafficPolicyVersionRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id","Document"],"members":{"Id":{"location":"uri","locationName":"Id"},"Document":{},"Comment":{}}},"output":{"type":"structure","required":["TrafficPolicy","Location"],"members":{"TrafficPolicy":{"shape":"S2x"},"Location":{"location":"header","locationName":"Location"}}}},"CreateVPCAssociationAuthorization":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/authorizevpcassociation"},"input":{"locationName":"CreateVPCAssociationAuthorizationRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","VPC"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"VPC":{"shape":"S3"}}},"output":{"type":"structure","required":["HostedZoneId","VPC"],"members":{"HostedZoneId":{},"VPC":{"shape":"S3"}}}},"DeleteHealthCheck":{"http":{"method":"DELETE","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","members":{}}},"DeleteHostedZone":{"http":{"method":"DELETE","requestUri":"/2013-04-01/hostedzone/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"DeleteQueryLoggingConfig":{"http":{"method":"DELETE","requestUri":"/2013-04-01/queryloggingconfig/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DeleteReusableDelegationSet":{"http":{"method":"DELETE","requestUri":"/2013-04-01/delegationset/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DeleteTrafficPolicy":{"http":{"method":"DELETE","requestUri":"/2013-04-01/trafficpolicy/{Id}/{Version}"},"input":{"type":"structure","required":["Id","Version"],"members":{"Id":{"location":"uri","locationName":"Id"},"Version":{"location":"uri","locationName":"Version","type":"integer"}}},"output":{"type":"structure","members":{}}},"DeleteTrafficPolicyInstance":{"http":{"method":"DELETE","requestUri":"/2013-04-01/trafficpolicyinstance/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","members":{}}},"DeleteVPCAssociationAuthorization":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/deauthorizevpcassociation"},"input":{"locationName":"DeleteVPCAssociationAuthorizationRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","VPC"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"VPC":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"DisassociateVPCFromHostedZone":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}/disassociatevpc"},"input":{"locationName":"DisassociateVPCFromHostedZoneRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HostedZoneId","VPC"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"VPC":{"shape":"S3"},"Comment":{}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"GetChange":{"http":{"method":"GET","requestUri":"/2013-04-01/change/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["ChangeInfo"],"members":{"ChangeInfo":{"shape":"S8"}}}},"GetCheckerIpRanges":{"http":{"method":"GET","requestUri":"/2013-04-01/checkeripranges"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["CheckerIpRanges"],"members":{"CheckerIpRanges":{"type":"list","member":{}}}}},"GetGeoLocation":{"http":{"method":"GET","requestUri":"/2013-04-01/geolocation"},"input":{"type":"structure","members":{"ContinentCode":{"location":"querystring","locationName":"continentcode"},"CountryCode":{"location":"querystring","locationName":"countrycode"},"SubdivisionCode":{"location":"querystring","locationName":"subdivisioncode"}}},"output":{"type":"structure","required":["GeoLocationDetails"],"members":{"GeoLocationDetails":{"shape":"S3y"}}}},"GetHealthCheck":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","required":["HealthCheck"],"members":{"HealthCheck":{"shape":"S1y"}}}},"GetHealthCheckCount":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheckcount"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["HealthCheckCount"],"members":{"HealthCheckCount":{"type":"long"}}}},"GetHealthCheckLastFailureReason":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","required":["HealthCheckObservations"],"members":{"HealthCheckObservations":{"shape":"S49"}}}},"GetHealthCheckStatus":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck/{HealthCheckId}/status"},"input":{"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"}}},"output":{"type":"structure","required":["HealthCheckObservations"],"members":{"HealthCheckObservations":{"shape":"S49"}}}},"GetHostedZone":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["HostedZone"],"members":{"HostedZone":{"shape":"S2h"},"DelegationSet":{"shape":"S2j"},"VPCs":{"shape":"S4h"}}}},"GetHostedZoneCount":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzonecount"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["HostedZoneCount"],"members":{"HostedZoneCount":{"type":"long"}}}},"GetQueryLoggingConfig":{"http":{"method":"GET","requestUri":"/2013-04-01/queryloggingconfig/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["QueryLoggingConfig"],"members":{"QueryLoggingConfig":{"shape":"S2o"}}}},"GetReusableDelegationSet":{"http":{"method":"GET","requestUri":"/2013-04-01/delegationset/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["DelegationSet"],"members":{"DelegationSet":{"shape":"S2j"}}}},"GetTrafficPolicy":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicy/{Id}/{Version}"},"input":{"type":"structure","required":["Id","Version"],"members":{"Id":{"location":"uri","locationName":"Id"},"Version":{"location":"uri","locationName":"Version","type":"integer"}}},"output":{"type":"structure","required":["TrafficPolicy"],"members":{"TrafficPolicy":{"shape":"S2x"}}}},"GetTrafficPolicyInstance":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstance/{Id}"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"}}},"output":{"type":"structure","required":["TrafficPolicyInstance"],"members":{"TrafficPolicyInstance":{"shape":"S32"}}}},"GetTrafficPolicyInstanceCount":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstancecount"},"input":{"type":"structure","members":{}},"output":{"type":"structure","required":["TrafficPolicyInstanceCount"],"members":{"TrafficPolicyInstanceCount":{"type":"integer"}}}},"ListGeoLocations":{"http":{"method":"GET","requestUri":"/2013-04-01/geolocations"},"input":{"type":"structure","members":{"StartContinentCode":{"location":"querystring","locationName":"startcontinentcode"},"StartCountryCode":{"location":"querystring","locationName":"startcountrycode"},"StartSubdivisionCode":{"location":"querystring","locationName":"startsubdivisioncode"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["GeoLocationDetailsList","IsTruncated","MaxItems"],"members":{"GeoLocationDetailsList":{"type":"list","member":{"shape":"S3y","locationName":"GeoLocationDetails"}},"IsTruncated":{"type":"boolean"},"NextContinentCode":{},"NextCountryCode":{},"NextSubdivisionCode":{},"MaxItems":{}}}},"ListHealthChecks":{"http":{"method":"GET","requestUri":"/2013-04-01/healthcheck"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"marker"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["HealthChecks","Marker","IsTruncated","MaxItems"],"members":{"HealthChecks":{"type":"list","member":{"shape":"S1y","locationName":"HealthCheck"}},"Marker":{},"IsTruncated":{"type":"boolean"},"NextMarker":{},"MaxItems":{}}}},"ListHostedZones":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"marker"},"MaxItems":{"location":"querystring","locationName":"maxitems"},"DelegationSetId":{"location":"querystring","locationName":"delegationsetid"}}},"output":{"type":"structure","required":["HostedZones","Marker","IsTruncated","MaxItems"],"members":{"HostedZones":{"shape":"S57"},"Marker":{},"IsTruncated":{"type":"boolean"},"NextMarker":{},"MaxItems":{}}}},"ListHostedZonesByName":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzonesbyname"},"input":{"type":"structure","members":{"DNSName":{"location":"querystring","locationName":"dnsname"},"HostedZoneId":{"location":"querystring","locationName":"hostedzoneid"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["HostedZones","IsTruncated","MaxItems"],"members":{"HostedZones":{"shape":"S57"},"DNSName":{},"HostedZoneId":{},"IsTruncated":{"type":"boolean"},"NextDNSName":{},"NextHostedZoneId":{},"MaxItems":{}}}},"ListQueryLoggingConfigs":{"http":{"method":"GET","requestUri":"/2013-04-01/queryloggingconfig"},"input":{"type":"structure","members":{"HostedZoneId":{"location":"querystring","locationName":"hostedzoneid"},"NextToken":{"location":"querystring","locationName":"nexttoken"},"MaxResults":{"location":"querystring","locationName":"maxresults"}}},"output":{"type":"structure","required":["QueryLoggingConfigs"],"members":{"QueryLoggingConfigs":{"type":"list","member":{"shape":"S2o","locationName":"QueryLoggingConfig"}},"NextToken":{}}}},"ListResourceRecordSets":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone/{Id}/rrset"},"input":{"type":"structure","required":["HostedZoneId"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"StartRecordName":{"location":"querystring","locationName":"name"},"StartRecordType":{"location":"querystring","locationName":"type"},"StartRecordIdentifier":{"location":"querystring","locationName":"identifier"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["ResourceRecordSets","IsTruncated","MaxItems"],"members":{"ResourceRecordSets":{"type":"list","member":{"shape":"Sh","locationName":"ResourceRecordSet"}},"IsTruncated":{"type":"boolean"},"NextRecordName":{},"NextRecordType":{},"NextRecordIdentifier":{},"MaxItems":{}}}},"ListReusableDelegationSets":{"http":{"method":"GET","requestUri":"/2013-04-01/delegationset"},"input":{"type":"structure","members":{"Marker":{"location":"querystring","locationName":"marker"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["DelegationSets","Marker","IsTruncated","MaxItems"],"members":{"DelegationSets":{"type":"list","member":{"shape":"S2j","locationName":"DelegationSet"}},"Marker":{},"IsTruncated":{"type":"boolean"},"NextMarker":{},"MaxItems":{}}}},"ListTagsForResource":{"http":{"method":"GET","requestUri":"/2013-04-01/tags/{ResourceType}/{ResourceId}"},"input":{"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{"location":"uri","locationName":"ResourceType"},"ResourceId":{"location":"uri","locationName":"ResourceId"}}},"output":{"type":"structure","required":["ResourceTagSet"],"members":{"ResourceTagSet":{"shape":"S5n"}}}},"ListTagsForResources":{"http":{"requestUri":"/2013-04-01/tags/{ResourceType}"},"input":{"locationName":"ListTagsForResourcesRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["ResourceType","ResourceIds"],"members":{"ResourceType":{"location":"uri","locationName":"ResourceType"},"ResourceIds":{"type":"list","member":{"locationName":"ResourceId"}}}},"output":{"type":"structure","required":["ResourceTagSets"],"members":{"ResourceTagSets":{"type":"list","member":{"shape":"S5n","locationName":"ResourceTagSet"}}}}},"ListTrafficPolicies":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicies"},"input":{"type":"structure","members":{"TrafficPolicyIdMarker":{"location":"querystring","locationName":"trafficpolicyid"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicySummaries","IsTruncated","TrafficPolicyIdMarker","MaxItems"],"members":{"TrafficPolicySummaries":{"type":"list","member":{"locationName":"TrafficPolicySummary","type":"structure","required":["Id","Name","Type","LatestVersion","TrafficPolicyCount"],"members":{"Id":{},"Name":{},"Type":{},"LatestVersion":{"type":"integer"},"TrafficPolicyCount":{"type":"integer"}}}},"IsTruncated":{"type":"boolean"},"TrafficPolicyIdMarker":{},"MaxItems":{}}}},"ListTrafficPolicyInstances":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstances"},"input":{"type":"structure","members":{"HostedZoneIdMarker":{"location":"querystring","locationName":"hostedzoneid"},"TrafficPolicyInstanceNameMarker":{"location":"querystring","locationName":"trafficpolicyinstancename"},"TrafficPolicyInstanceTypeMarker":{"location":"querystring","locationName":"trafficpolicyinstancetype"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicyInstances","IsTruncated","MaxItems"],"members":{"TrafficPolicyInstances":{"shape":"S5y"},"HostedZoneIdMarker":{},"TrafficPolicyInstanceNameMarker":{},"TrafficPolicyInstanceTypeMarker":{},"IsTruncated":{"type":"boolean"},"MaxItems":{}}}},"ListTrafficPolicyInstancesByHostedZone":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstances/hostedzone"},"input":{"type":"structure","required":["HostedZoneId"],"members":{"HostedZoneId":{"location":"querystring","locationName":"id"},"TrafficPolicyInstanceNameMarker":{"location":"querystring","locationName":"trafficpolicyinstancename"},"TrafficPolicyInstanceTypeMarker":{"location":"querystring","locationName":"trafficpolicyinstancetype"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicyInstances","IsTruncated","MaxItems"],"members":{"TrafficPolicyInstances":{"shape":"S5y"},"TrafficPolicyInstanceNameMarker":{},"TrafficPolicyInstanceTypeMarker":{},"IsTruncated":{"type":"boolean"},"MaxItems":{}}}},"ListTrafficPolicyInstancesByPolicy":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicyinstances/trafficpolicy"},"input":{"type":"structure","required":["TrafficPolicyId","TrafficPolicyVersion"],"members":{"TrafficPolicyId":{"location":"querystring","locationName":"id"},"TrafficPolicyVersion":{"location":"querystring","locationName":"version","type":"integer"},"HostedZoneIdMarker":{"location":"querystring","locationName":"hostedzoneid"},"TrafficPolicyInstanceNameMarker":{"location":"querystring","locationName":"trafficpolicyinstancename"},"TrafficPolicyInstanceTypeMarker":{"location":"querystring","locationName":"trafficpolicyinstancetype"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicyInstances","IsTruncated","MaxItems"],"members":{"TrafficPolicyInstances":{"shape":"S5y"},"HostedZoneIdMarker":{},"TrafficPolicyInstanceNameMarker":{},"TrafficPolicyInstanceTypeMarker":{},"IsTruncated":{"type":"boolean"},"MaxItems":{}}}},"ListTrafficPolicyVersions":{"http":{"method":"GET","requestUri":"/2013-04-01/trafficpolicies/{Id}/versions"},"input":{"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"TrafficPolicyVersionMarker":{"location":"querystring","locationName":"trafficpolicyversion"},"MaxItems":{"location":"querystring","locationName":"maxitems"}}},"output":{"type":"structure","required":["TrafficPolicies","IsTruncated","TrafficPolicyVersionMarker","MaxItems"],"members":{"TrafficPolicies":{"type":"list","member":{"shape":"S2x","locationName":"TrafficPolicy"}},"IsTruncated":{"type":"boolean"},"TrafficPolicyVersionMarker":{},"MaxItems":{}}}},"ListVPCAssociationAuthorizations":{"http":{"method":"GET","requestUri":"/2013-04-01/hostedzone/{Id}/authorizevpcassociation"},"input":{"type":"structure","required":["HostedZoneId"],"members":{"HostedZoneId":{"location":"uri","locationName":"Id"},"NextToken":{"location":"querystring","locationName":"nexttoken"},"MaxResults":{"location":"querystring","locationName":"maxresults"}}},"output":{"type":"structure","required":["HostedZoneId","VPCs"],"members":{"HostedZoneId":{},"NextToken":{},"VPCs":{"shape":"S4h"}}}},"TestDNSAnswer":{"http":{"method":"GET","requestUri":"/2013-04-01/testdnsanswer"},"input":{"type":"structure","required":["HostedZoneId","RecordName","RecordType"],"members":{"HostedZoneId":{"location":"querystring","locationName":"hostedzoneid"},"RecordName":{"location":"querystring","locationName":"recordname"},"RecordType":{"location":"querystring","locationName":"recordtype"},"ResolverIP":{"location":"querystring","locationName":"resolverip"},"EDNS0ClientSubnetIP":{"location":"querystring","locationName":"edns0clientsubnetip"},"EDNS0ClientSubnetMask":{"location":"querystring","locationName":"edns0clientsubnetmask"}}},"output":{"type":"structure","required":["Nameserver","RecordName","RecordType","RecordData","ResponseCode","Protocol"],"members":{"Nameserver":{},"RecordName":{},"RecordType":{},"RecordData":{"type":"list","member":{"locationName":"RecordDataEntry"}},"ResponseCode":{},"Protocol":{}}}},"UpdateHealthCheck":{"http":{"requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"},"input":{"locationName":"UpdateHealthCheckRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["HealthCheckId"],"members":{"HealthCheckId":{"location":"uri","locationName":"HealthCheckId"},"HealthCheckVersion":{"type":"long"},"IPAddress":{},"Port":{"type":"integer"},"ResourcePath":{},"FullyQualifiedDomainName":{},"SearchString":{},"FailureThreshold":{"type":"integer"},"Inverted":{"type":"boolean"},"HealthThreshold":{"type":"integer"},"ChildHealthChecks":{"shape":"S1p"},"EnableSNI":{"type":"boolean"},"Regions":{"shape":"S1r"},"AlarmIdentifier":{"shape":"S1t"},"InsufficientDataHealthStatus":{},"ResetElements":{"type":"list","member":{"locationName":"ResettableElementName"}}}},"output":{"type":"structure","required":["HealthCheck"],"members":{"HealthCheck":{"shape":"S1y"}}}},"UpdateHostedZoneComment":{"http":{"requestUri":"/2013-04-01/hostedzone/{Id}"},"input":{"locationName":"UpdateHostedZoneCommentRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id"],"members":{"Id":{"location":"uri","locationName":"Id"},"Comment":{}}},"output":{"type":"structure","required":["HostedZone"],"members":{"HostedZone":{"shape":"S2h"}}}},"UpdateTrafficPolicyComment":{"http":{"requestUri":"/2013-04-01/trafficpolicy/{Id}/{Version}"},"input":{"locationName":"UpdateTrafficPolicyCommentRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id","Version","Comment"],"members":{"Id":{"location":"uri","locationName":"Id"},"Version":{"location":"uri","locationName":"Version","type":"integer"},"Comment":{}}},"output":{"type":"structure","required":["TrafficPolicy"],"members":{"TrafficPolicy":{"shape":"S2x"}}}},"UpdateTrafficPolicyInstance":{"http":{"requestUri":"/2013-04-01/trafficpolicyinstance/{Id}"},"input":{"locationName":"UpdateTrafficPolicyInstanceRequest","xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},"type":"structure","required":["Id","TTL","TrafficPolicyId","TrafficPolicyVersion"],"members":{"Id":{"location":"uri","locationName":"Id"},"TTL":{"type":"long"},"TrafficPolicyId":{},"TrafficPolicyVersion":{"type":"integer"}}},"output":{"type":"structure","required":["TrafficPolicyInstance"],"members":{"TrafficPolicyInstance":{"shape":"S32"}}}}},"shapes":{"S3":{"type":"structure","members":{"VPCRegion":{},"VPCId":{}}},"S8":{"type":"structure","required":["Id","Status","SubmittedAt"],"members":{"Id":{},"Status":{},"SubmittedAt":{"type":"timestamp"},"Comment":{}}},"Sh":{"type":"structure","required":["Name","Type"],"members":{"Name":{},"Type":{},"SetIdentifier":{},"Weight":{"type":"long"},"Region":{},"GeoLocation":{"type":"structure","members":{"ContinentCode":{},"CountryCode":{},"SubdivisionCode":{}}},"Failover":{},"MultiValueAnswer":{"type":"boolean"},"TTL":{"type":"long"},"ResourceRecords":{"type":"list","member":{"locationName":"ResourceRecord","type":"structure","required":["Value"],"members":{"Value":{}}}},"AliasTarget":{"type":"structure","required":["HostedZoneId","DNSName","EvaluateTargetHealth"],"members":{"HostedZoneId":{},"DNSName":{},"EvaluateTargetHealth":{"type":"boolean"}}},"HealthCheckId":{},"TrafficPolicyInstanceId":{}}},"S15":{"type":"list","member":{"locationName":"Tag","type":"structure","members":{"Key":{},"Value":{}}}},"S1d":{"type":"structure","required":["Type"],"members":{"IPAddress":{},"Port":{"type":"integer"},"Type":{},"ResourcePath":{},"FullyQualifiedDomainName":{},"SearchString":{},"RequestInterval":{"type":"integer"},"FailureThreshold":{"type":"integer"},"MeasureLatency":{"type":"boolean"},"Inverted":{"type":"boolean"},"HealthThreshold":{"type":"integer"},"ChildHealthChecks":{"shape":"S1p"},"EnableSNI":{"type":"boolean"},"Regions":{"shape":"S1r"},"AlarmIdentifier":{"shape":"S1t"},"InsufficientDataHealthStatus":{}}},"S1p":{"type":"list","member":{"locationName":"ChildHealthCheck"}},"S1r":{"type":"list","member":{"locationName":"Region"}},"S1t":{"type":"structure","required":["Region","Name"],"members":{"Region":{},"Name":{}}},"S1y":{"type":"structure","required":["Id","CallerReference","HealthCheckConfig","HealthCheckVersion"],"members":{"Id":{},"CallerReference":{},"HealthCheckConfig":{"shape":"S1d"},"HealthCheckVersion":{"type":"long"},"CloudWatchAlarmConfiguration":{"type":"structure","required":["EvaluationPeriods","Threshold","ComparisonOperator","Period","MetricName","Namespace","Statistic"],"members":{"EvaluationPeriods":{"type":"integer"},"Threshold":{"type":"double"},"ComparisonOperator":{},"Period":{"type":"integer"},"MetricName":{},"Namespace":{},"Statistic":{},"Dimensions":{"type":"list","member":{"locationName":"Dimension","type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}}}}}},"S2e":{"type":"structure","members":{"Comment":{},"PrivateZone":{"type":"boolean"}}},"S2h":{"type":"structure","required":["Id","Name","CallerReference"],"members":{"Id":{},"Name":{},"CallerReference":{},"Config":{"shape":"S2e"},"ResourceRecordSetCount":{"type":"long"}}},"S2j":{"type":"structure","required":["NameServers"],"members":{"Id":{},"CallerReference":{},"NameServers":{"type":"list","member":{"locationName":"NameServer"}}}},"S2o":{"type":"structure","required":["Id","HostedZoneId","CloudWatchLogsLogGroupArn"],"members":{"Id":{},"HostedZoneId":{},"CloudWatchLogsLogGroupArn":{}}},"S2x":{"type":"structure","required":["Id","Version","Name","Type","Document"],"members":{"Id":{},"Version":{"type":"integer"},"Name":{},"Type":{},"Document":{},"Comment":{}}},"S32":{"type":"structure","required":["Id","HostedZoneId","Name","TTL","State","Message","TrafficPolicyId","TrafficPolicyVersion","TrafficPolicyType"],"members":{"Id":{},"HostedZoneId":{},"Name":{},"TTL":{"type":"long"},"State":{},"Message":{},"TrafficPolicyId":{},"TrafficPolicyVersion":{"type":"integer"},"TrafficPolicyType":{}}},"S3y":{"type":"structure","members":{"ContinentCode":{},"ContinentName":{},"CountryCode":{},"CountryName":{},"SubdivisionCode":{},"SubdivisionName":{}}},"S49":{"type":"list","member":{"locationName":"HealthCheckObservation","type":"structure","members":{"Region":{},"IPAddress":{},"StatusReport":{"type":"structure","members":{"Status":{},"CheckedTime":{"type":"timestamp"}}}}}},"S4h":{"type":"list","member":{"shape":"S3","locationName":"VPC"}},"S57":{"type":"list","member":{"shape":"S2h","locationName":"HostedZone"}},"S5n":{"type":"structure","members":{"ResourceType":{},"ResourceId":{},"Tags":{"shape":"S15"}}},"S5y":{"type":"list","member":{"shape":"S32","locationName":"TrafficPolicyInstance"}}}}

/***/ }),
/* 325 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListHealthChecks":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"NextMarker","result_key":"HealthChecks"},"ListHostedZones":{"input_token":"Marker","limit_key":"MaxItems","more_results":"IsTruncated","output_token":"NextMarker","result_key":"HostedZones"},"ListResourceRecordSets":{"input_token":["StartRecordName","StartRecordType","StartRecordIdentifier"],"limit_key":"MaxItems","more_results":"IsTruncated","output_token":["NextRecordName","NextRecordType","NextRecordIdentifier"],"result_key":"ResourceRecordSets"}}}

/***/ }),
/* 326 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"ResourceRecordSetsChanged":{"delay":30,"maxAttempts":60,"operation":"GetChange","acceptors":[{"matcher":"path","expected":"INSYNC","argument":"ChangeInfo.Status","state":"success"}]}}}

/***/ }),
/* 327 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-05-15","endpointPrefix":"route53domains","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon Route 53 Domains","signatureVersion":"v4","targetPrefix":"Route53Domains_v20140515","uid":"route53domains-2014-05-15"},"operations":{"CheckDomainAvailability":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"IdnLangCode":{}}},"output":{"type":"structure","required":["Availability"],"members":{"Availability":{}}}},"CheckDomainTransferability":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"AuthCode":{"shape":"S7"}}},"output":{"type":"structure","required":["Transferability"],"members":{"Transferability":{"type":"structure","members":{"Transferable":{}}}}}},"DeleteTagsForDomain":{"input":{"type":"structure","required":["DomainName","TagsToDelete"],"members":{"DomainName":{},"TagsToDelete":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"DisableDomainAutoRenew":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","members":{}}},"DisableDomainTransferLock":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"EnableDomainAutoRenew":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","members":{}}},"EnableDomainTransferLock":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"GetContactReachabilityStatus":{"input":{"type":"structure","members":{"domainName":{}}},"output":{"type":"structure","members":{"domainName":{},"status":{}}}},"GetDomainDetail":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","required":["DomainName","Nameservers","AdminContact","RegistrantContact","TechContact"],"members":{"DomainName":{},"Nameservers":{"shape":"St"},"AutoRenew":{"type":"boolean"},"AdminContact":{"shape":"Sz"},"RegistrantContact":{"shape":"Sz"},"TechContact":{"shape":"Sz"},"AdminPrivacy":{"type":"boolean"},"RegistrantPrivacy":{"type":"boolean"},"TechPrivacy":{"type":"boolean"},"RegistrarName":{},"WhoIsServer":{},"RegistrarUrl":{},"AbuseContactEmail":{},"AbuseContactPhone":{},"RegistryDomainId":{},"CreationDate":{"type":"timestamp"},"UpdatedDate":{"type":"timestamp"},"ExpirationDate":{"type":"timestamp"},"Reseller":{},"DnsSec":{},"StatusList":{"type":"list","member":{}}}}},"GetDomainSuggestions":{"input":{"type":"structure","required":["DomainName","SuggestionCount","OnlyAvailable"],"members":{"DomainName":{},"SuggestionCount":{"type":"integer"},"OnlyAvailable":{"type":"boolean"}}},"output":{"type":"structure","members":{"SuggestionsList":{"type":"list","member":{"type":"structure","members":{"DomainName":{},"Availability":{}}}}}}},"GetOperationDetail":{"input":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}},"output":{"type":"structure","members":{"OperationId":{},"Status":{},"Message":{},"DomainName":{},"Type":{},"SubmittedDate":{"type":"timestamp"}}}},"ListDomains":{"input":{"type":"structure","members":{"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"type":"structure","required":["Domains"],"members":{"Domains":{"type":"list","member":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"AutoRenew":{"type":"boolean"},"TransferLock":{"type":"boolean"},"Expiry":{"type":"timestamp"}}}},"NextPageMarker":{}}}},"ListOperations":{"input":{"type":"structure","members":{"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"type":"structure","required":["Operations"],"members":{"Operations":{"type":"list","member":{"type":"structure","required":["OperationId","Status","Type","SubmittedDate"],"members":{"OperationId":{},"Status":{},"Type":{},"SubmittedDate":{"type":"timestamp"}}}},"NextPageMarker":{}}}},"ListTagsForDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","required":["TagList"],"members":{"TagList":{"shape":"S29"}}}},"RegisterDomain":{"input":{"type":"structure","required":["DomainName","DurationInYears","AdminContact","RegistrantContact","TechContact"],"members":{"DomainName":{},"IdnLangCode":{},"DurationInYears":{"type":"integer"},"AutoRenew":{"type":"boolean"},"AdminContact":{"shape":"Sz"},"RegistrantContact":{"shape":"Sz"},"TechContact":{"shape":"Sz"},"PrivacyProtectAdminContact":{"type":"boolean"},"PrivacyProtectRegistrantContact":{"type":"boolean"},"PrivacyProtectTechContact":{"type":"boolean"}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"RenewDomain":{"input":{"type":"structure","required":["DomainName","CurrentExpiryYear"],"members":{"DomainName":{},"DurationInYears":{"type":"integer"},"CurrentExpiryYear":{"type":"integer"}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"ResendContactReachabilityEmail":{"input":{"type":"structure","members":{"domainName":{}}},"output":{"type":"structure","members":{"domainName":{},"emailAddress":{},"isAlreadyVerified":{"type":"boolean"}}}},"RetrieveDomainAuthCode":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"type":"structure","required":["AuthCode"],"members":{"AuthCode":{"shape":"S7"}}}},"TransferDomain":{"input":{"type":"structure","required":["DomainName","DurationInYears","AdminContact","RegistrantContact","TechContact"],"members":{"DomainName":{},"IdnLangCode":{},"DurationInYears":{"type":"integer"},"Nameservers":{"shape":"St"},"AuthCode":{"shape":"S7"},"AutoRenew":{"type":"boolean"},"AdminContact":{"shape":"Sz"},"RegistrantContact":{"shape":"Sz"},"TechContact":{"shape":"Sz"},"PrivacyProtectAdminContact":{"type":"boolean"},"PrivacyProtectRegistrantContact":{"type":"boolean"},"PrivacyProtectTechContact":{"type":"boolean"}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"UpdateDomainContact":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"AdminContact":{"shape":"Sz"},"RegistrantContact":{"shape":"Sz"},"TechContact":{"shape":"Sz"}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"UpdateDomainContactPrivacy":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"AdminPrivacy":{"type":"boolean"},"RegistrantPrivacy":{"type":"boolean"},"TechPrivacy":{"type":"boolean"}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"UpdateDomainNameservers":{"input":{"type":"structure","required":["DomainName","Nameservers"],"members":{"DomainName":{},"FIAuthKey":{"deprecated":true},"Nameservers":{"shape":"St"}}},"output":{"type":"structure","required":["OperationId"],"members":{"OperationId":{}}}},"UpdateTagsForDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{},"TagsToUpdate":{"shape":"S29"}}},"output":{"type":"structure","members":{}}},"ViewBilling":{"input":{"type":"structure","members":{"Start":{"type":"timestamp"},"End":{"type":"timestamp"},"Marker":{},"MaxItems":{"type":"integer"}}},"output":{"type":"structure","members":{"NextPageMarker":{},"BillingRecords":{"type":"list","member":{"type":"structure","members":{"DomainName":{},"Operation":{},"InvoiceId":{},"BillDate":{"type":"timestamp"},"Price":{"type":"double"}}}}}}}},"shapes":{"S7":{"type":"string","sensitive":true},"St":{"type":"list","member":{"type":"structure","required":["Name"],"members":{"Name":{},"GlueIps":{"type":"list","member":{}}}}},"Sz":{"type":"structure","members":{"FirstName":{},"LastName":{},"ContactType":{},"OrganizationName":{},"AddressLine1":{},"AddressLine2":{},"City":{},"State":{},"CountryCode":{},"ZipCode":{},"PhoneNumber":{},"Email":{},"Fax":{},"ExtraParams":{"type":"list","member":{"type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{}}}}},"sensitive":true},"S29":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}}

/***/ }),
/* 328 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListDomains":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextPageMarker","result_key":"Domains"},"ListOperations":{"input_token":"Marker","limit_key":"MaxItems","output_token":"NextPageMarker","result_key":"Operations"}}}

/***/ }),
/* 329 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-28","endpointPrefix":"runtime.lex","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"Amazon Lex Runtime Service","signatureVersion":"v4","signingName":"lex","uid":"runtime.lex-2016-11-28"},"operations":{"PostContent":{"http":{"requestUri":"/bot/{botName}/alias/{botAlias}/user/{userId}/content"},"input":{"type":"structure","required":["botName","botAlias","userId","contentType","inputStream"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"botAlias"},"userId":{"location":"uri","locationName":"userId"},"sessionAttributes":{"shape":"S5","jsonvalue":true,"location":"header","locationName":"x-amz-lex-session-attributes"},"requestAttributes":{"shape":"S5","jsonvalue":true,"location":"header","locationName":"x-amz-lex-request-attributes"},"contentType":{"location":"header","locationName":"Content-Type"},"accept":{"location":"header","locationName":"Accept"},"inputStream":{"shape":"S8"}},"payload":"inputStream"},"output":{"type":"structure","members":{"contentType":{"location":"header","locationName":"Content-Type"},"intentName":{"location":"header","locationName":"x-amz-lex-intent-name"},"slots":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-slots"},"sessionAttributes":{"jsonvalue":true,"location":"header","locationName":"x-amz-lex-session-attributes"},"message":{"shape":"Sc","location":"header","locationName":"x-amz-lex-message"},"dialogState":{"location":"header","locationName":"x-amz-lex-dialog-state"},"slotToElicit":{"location":"header","locationName":"x-amz-lex-slot-to-elicit"},"inputTranscript":{"location":"header","locationName":"x-amz-lex-input-transcript"},"audioStream":{"shape":"S8"}},"payload":"audioStream"},"authtype":"v4-unsigned-body"},"PostText":{"http":{"requestUri":"/bot/{botName}/alias/{botAlias}/user/{userId}/text"},"input":{"type":"structure","required":["botName","botAlias","userId","inputText"],"members":{"botName":{"location":"uri","locationName":"botName"},"botAlias":{"location":"uri","locationName":"botAlias"},"userId":{"location":"uri","locationName":"userId"},"sessionAttributes":{"shape":"Sf"},"requestAttributes":{"shape":"Sf"},"inputText":{"shape":"Sc"}}},"output":{"type":"structure","members":{"intentName":{},"slots":{"shape":"Sf"},"sessionAttributes":{"shape":"Sf"},"message":{"shape":"Sc"},"dialogState":{},"slotToElicit":{},"responseCard":{"type":"structure","members":{"version":{},"contentType":{},"genericAttachments":{"type":"list","member":{"type":"structure","members":{"title":{},"subTitle":{},"attachmentLinkUrl":{},"imageUrl":{},"buttons":{"type":"list","member":{"type":"structure","required":["text","value"],"members":{"text":{},"value":{}}}}}}}}}}}}},"shapes":{"S5":{"type":"string","sensitive":true},"S8":{"type":"blob","streaming":true},"Sc":{"type":"string","sensitive":true},"Sf":{"type":"map","key":{},"value":{},"sensitive":true}}}

/***/ }),
/* 330 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 331 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2006-03-01","checksumFormat":"md5","endpointPrefix":"s3","globalEndpoint":"s3.amazonaws.com","protocol":"rest-xml","serviceAbbreviation":"Amazon S3","serviceFullName":"Amazon Simple Storage Service","serviceId":"S3","signatureVersion":"s3","timestampFormat":"rfc822","uid":"s3-2006-03-01"},"operations":{"AbortMultipartUpload":{"http":{"method":"DELETE","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"UploadId":{"location":"querystring","locationName":"uploadId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"CompleteMultipartUpload":{"http":{"requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"MultipartUpload":{"locationName":"CompleteMultipartUpload","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"Parts":{"locationName":"Part","type":"list","member":{"type":"structure","members":{"ETag":{},"PartNumber":{"type":"integer"}}},"flattened":true}}},"UploadId":{"location":"querystring","locationName":"uploadId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"MultipartUpload"},"output":{"type":"structure","members":{"Location":{},"Bucket":{},"Key":{},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"ETag":{},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"CopyObject":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","CopySource","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Bucket":{"location":"uri","locationName":"Bucket"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentType":{"location":"header","locationName":"Content-Type"},"CopySource":{"location":"header","locationName":"x-amz-copy-source"},"CopySourceIfMatch":{"location":"header","locationName":"x-amz-copy-source-if-match"},"CopySourceIfModifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-modified-since","type":"timestamp"},"CopySourceIfNoneMatch":{"location":"header","locationName":"x-amz-copy-source-if-none-match"},"CopySourceIfUnmodifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-unmodified-since","type":"timestamp"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"MetadataDirective":{"location":"header","locationName":"x-amz-metadata-directive"},"TaggingDirective":{"location":"header","locationName":"x-amz-tagging-directive"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S19","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"CopySourceSSECustomerAlgorithm":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-algorithm"},"CopySourceSSECustomerKey":{"shape":"S1c","location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key"},"CopySourceSSECustomerKeyMD5":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"},"Tagging":{"location":"header","locationName":"x-amz-tagging"}}},"output":{"type":"structure","members":{"CopyObjectResult":{"type":"structure","members":{"ETag":{},"LastModified":{"type":"timestamp"}}},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"CopySourceVersionId":{"location":"header","locationName":"x-amz-copy-source-version-id"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}},"payload":"CopyObjectResult"},"alias":"PutObjectCopy"},"CreateBucket":{"http":{"method":"PUT","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Bucket":{"location":"uri","locationName":"Bucket"},"CreateBucketConfiguration":{"locationName":"CreateBucketConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"LocationConstraint":{}}},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWrite":{"location":"header","locationName":"x-amz-grant-write"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"}},"payload":"CreateBucketConfiguration"},"output":{"type":"structure","members":{"Location":{"location":"header","locationName":"Location"}}},"alias":"PutBucket"},"CreateMultipartUpload":{"http":{"requestUri":"/{Bucket}/{Key+}?uploads"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Bucket":{"location":"uri","locationName":"Bucket"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S19","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"},"Tagging":{"location":"header","locationName":"x-amz-tagging"}}},"output":{"type":"structure","members":{"AbortDate":{"location":"header","locationName":"x-amz-abort-date","type":"timestamp"},"AbortRuleId":{"location":"header","locationName":"x-amz-abort-rule-id"},"Bucket":{"locationName":"Bucket"},"Key":{},"UploadId":{},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}},"alias":"InitiateMultipartUpload"},"DeleteBucket":{"http":{"method":"DELETE","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketAnalyticsConfiguration":{"http":{"method":"DELETE","requestUri":"/{Bucket}?analytics"},"input":{"type":"structure","required":["Bucket","Id"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"}}}},"DeleteBucketCors":{"http":{"method":"DELETE","requestUri":"/{Bucket}?cors"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketEncryption":{"http":{"method":"DELETE","requestUri":"/{Bucket}?encryption"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketInventoryConfiguration":{"http":{"method":"DELETE","requestUri":"/{Bucket}?inventory"},"input":{"type":"structure","required":["Bucket","Id"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"}}}},"DeleteBucketLifecycle":{"http":{"method":"DELETE","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketMetricsConfiguration":{"http":{"method":"DELETE","requestUri":"/{Bucket}?metrics"},"input":{"type":"structure","required":["Bucket","Id"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"}}}},"DeleteBucketPolicy":{"http":{"method":"DELETE","requestUri":"/{Bucket}?policy"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketReplication":{"http":{"method":"DELETE","requestUri":"/{Bucket}?replication"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketTagging":{"http":{"method":"DELETE","requestUri":"/{Bucket}?tagging"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteBucketWebsite":{"http":{"method":"DELETE","requestUri":"/{Bucket}?website"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"DeleteObject":{"http":{"method":"DELETE","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"MFA":{"location":"header","locationName":"x-amz-mfa"},"VersionId":{"location":"querystring","locationName":"versionId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"DeleteMarker":{"location":"header","locationName":"x-amz-delete-marker","type":"boolean"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"DeleteObjectTagging":{"http":{"method":"DELETE","requestUri":"/{Bucket}/{Key+}?tagging"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"VersionId":{"location":"querystring","locationName":"versionId"}}},"output":{"type":"structure","members":{"VersionId":{"location":"header","locationName":"x-amz-version-id"}}}},"DeleteObjects":{"http":{"requestUri":"/{Bucket}?delete"},"input":{"type":"structure","required":["Bucket","Delete"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delete":{"locationName":"Delete","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Objects"],"members":{"Objects":{"locationName":"Object","type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"VersionId":{}}},"flattened":true},"Quiet":{"type":"boolean"}}},"MFA":{"location":"header","locationName":"x-amz-mfa"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"Delete"},"output":{"type":"structure","members":{"Deleted":{"type":"list","member":{"type":"structure","members":{"Key":{},"VersionId":{},"DeleteMarker":{"type":"boolean"},"DeleteMarkerVersionId":{}}},"flattened":true},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"},"Errors":{"locationName":"Error","type":"list","member":{"type":"structure","members":{"Key":{},"VersionId":{},"Code":{},"Message":{}}},"flattened":true}}},"alias":"DeleteMultipleObjects"},"GetBucketAccelerateConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?accelerate"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Status":{}}}},"GetBucketAcl":{"http":{"method":"GET","requestUri":"/{Bucket}?acl"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Owner":{"shape":"S2v"},"Grants":{"shape":"S2y","locationName":"AccessControlList"}}}},"GetBucketAnalyticsConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?analytics"},"input":{"type":"structure","required":["Bucket","Id"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"}}},"output":{"type":"structure","members":{"AnalyticsConfiguration":{"shape":"S37"}},"payload":"AnalyticsConfiguration"}},"GetBucketCors":{"http":{"method":"GET","requestUri":"/{Bucket}?cors"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"CORSRules":{"shape":"S3n","locationName":"CORSRule"}}}},"GetBucketEncryption":{"http":{"method":"GET","requestUri":"/{Bucket}?encryption"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"ServerSideEncryptionConfiguration":{"shape":"S40"}},"payload":"ServerSideEncryptionConfiguration"}},"GetBucketInventoryConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?inventory"},"input":{"type":"structure","required":["Bucket","Id"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"}}},"output":{"type":"structure","members":{"InventoryConfiguration":{"shape":"S46"}},"payload":"InventoryConfiguration"}},"GetBucketLifecycle":{"http":{"method":"GET","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Rules":{"shape":"S4m","locationName":"Rule"}}},"deprecated":true},"GetBucketLifecycleConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Rules":{"shape":"S51","locationName":"Rule"}}}},"GetBucketLocation":{"http":{"method":"GET","requestUri":"/{Bucket}?location"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"LocationConstraint":{}}}},"GetBucketLogging":{"http":{"method":"GET","requestUri":"/{Bucket}?logging"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"LoggingEnabled":{"shape":"S5b"}}}},"GetBucketMetricsConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?metrics"},"input":{"type":"structure","required":["Bucket","Id"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"}}},"output":{"type":"structure","members":{"MetricsConfiguration":{"shape":"S5j"}},"payload":"MetricsConfiguration"}},"GetBucketNotification":{"http":{"method":"GET","requestUri":"/{Bucket}?notification"},"input":{"shape":"S5m"},"output":{"shape":"S5n"},"deprecated":true},"GetBucketNotificationConfiguration":{"http":{"method":"GET","requestUri":"/{Bucket}?notification"},"input":{"shape":"S5m"},"output":{"shape":"S5y"}},"GetBucketPolicy":{"http":{"method":"GET","requestUri":"/{Bucket}?policy"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Policy":{}},"payload":"Policy"}},"GetBucketReplication":{"http":{"method":"GET","requestUri":"/{Bucket}?replication"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"ReplicationConfiguration":{"shape":"S6h"}},"payload":"ReplicationConfiguration"}},"GetBucketRequestPayment":{"http":{"method":"GET","requestUri":"/{Bucket}?requestPayment"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Payer":{}}}},"GetBucketTagging":{"http":{"method":"GET","requestUri":"/{Bucket}?tagging"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","required":["TagSet"],"members":{"TagSet":{"shape":"S3d"}}}},"GetBucketVersioning":{"http":{"method":"GET","requestUri":"/{Bucket}?versioning"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"Status":{},"MFADelete":{"locationName":"MfaDelete"}}}},"GetBucketWebsite":{"http":{"method":"GET","requestUri":"/{Bucket}?website"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"output":{"type":"structure","members":{"RedirectAllRequestsTo":{"shape":"S75"},"IndexDocument":{"shape":"S78"},"ErrorDocument":{"shape":"S7a"},"RoutingRules":{"shape":"S7b"}}}},"GetObject":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"IfMatch":{"location":"header","locationName":"If-Match"},"IfModifiedSince":{"location":"header","locationName":"If-Modified-Since","type":"timestamp"},"IfNoneMatch":{"location":"header","locationName":"If-None-Match"},"IfUnmodifiedSince":{"location":"header","locationName":"If-Unmodified-Since","type":"timestamp"},"Key":{"location":"uri","locationName":"Key"},"Range":{"location":"header","locationName":"Range"},"ResponseCacheControl":{"location":"querystring","locationName":"response-cache-control"},"ResponseContentDisposition":{"location":"querystring","locationName":"response-content-disposition"},"ResponseContentEncoding":{"location":"querystring","locationName":"response-content-encoding"},"ResponseContentLanguage":{"location":"querystring","locationName":"response-content-language"},"ResponseContentType":{"location":"querystring","locationName":"response-content-type"},"ResponseExpires":{"location":"querystring","locationName":"response-expires","type":"timestamp"},"VersionId":{"location":"querystring","locationName":"versionId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S19","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"},"PartNumber":{"location":"querystring","locationName":"partNumber","type":"integer"}}},"output":{"type":"structure","members":{"Body":{"streaming":true,"type":"blob"},"DeleteMarker":{"location":"header","locationName":"x-amz-delete-marker","type":"boolean"},"AcceptRanges":{"location":"header","locationName":"accept-ranges"},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"Restore":{"location":"header","locationName":"x-amz-restore"},"LastModified":{"location":"header","locationName":"Last-Modified","type":"timestamp"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"long"},"ETag":{"location":"header","locationName":"ETag"},"MissingMeta":{"location":"header","locationName":"x-amz-missing-meta","type":"integer"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentRange":{"location":"header","locationName":"Content-Range"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"},"ReplicationStatus":{"location":"header","locationName":"x-amz-replication-status"},"PartsCount":{"location":"header","locationName":"x-amz-mp-parts-count","type":"integer"},"TagCount":{"location":"header","locationName":"x-amz-tagging-count","type":"integer"}},"payload":"Body"}},"GetObjectAcl":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}?acl"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"VersionId":{"location":"querystring","locationName":"versionId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"Owner":{"shape":"S2v"},"Grants":{"shape":"S2y","locationName":"AccessControlList"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"GetObjectTagging":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}?tagging"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"VersionId":{"location":"querystring","locationName":"versionId"}}},"output":{"type":"structure","required":["TagSet"],"members":{"VersionId":{"location":"header","locationName":"x-amz-version-id"},"TagSet":{"shape":"S3d"}}}},"GetObjectTorrent":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}?torrent"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"Body":{"streaming":true,"type":"blob"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}},"payload":"Body"}},"HeadBucket":{"http":{"method":"HEAD","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}}},"HeadObject":{"http":{"method":"HEAD","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"IfMatch":{"location":"header","locationName":"If-Match"},"IfModifiedSince":{"location":"header","locationName":"If-Modified-Since","type":"timestamp"},"IfNoneMatch":{"location":"header","locationName":"If-None-Match"},"IfUnmodifiedSince":{"location":"header","locationName":"If-Unmodified-Since","type":"timestamp"},"Key":{"location":"uri","locationName":"Key"},"Range":{"location":"header","locationName":"Range"},"VersionId":{"location":"querystring","locationName":"versionId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S19","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"},"PartNumber":{"location":"querystring","locationName":"partNumber","type":"integer"}}},"output":{"type":"structure","members":{"DeleteMarker":{"location":"header","locationName":"x-amz-delete-marker","type":"boolean"},"AcceptRanges":{"location":"header","locationName":"accept-ranges"},"Expiration":{"location":"header","locationName":"x-amz-expiration"},"Restore":{"location":"header","locationName":"x-amz-restore"},"LastModified":{"location":"header","locationName":"Last-Modified","type":"timestamp"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"long"},"ETag":{"location":"header","locationName":"ETag"},"MissingMeta":{"location":"header","locationName":"x-amz-missing-meta","type":"integer"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"},"ReplicationStatus":{"location":"header","locationName":"x-amz-replication-status"},"PartsCount":{"location":"header","locationName":"x-amz-mp-parts-count","type":"integer"}}}},"ListBucketAnalyticsConfigurations":{"http":{"method":"GET","requestUri":"/{Bucket}?analytics"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContinuationToken":{"location":"querystring","locationName":"continuation-token"}}},"output":{"type":"structure","members":{"IsTruncated":{"type":"boolean"},"ContinuationToken":{},"NextContinuationToken":{},"AnalyticsConfigurationList":{"locationName":"AnalyticsConfiguration","type":"list","member":{"shape":"S37"},"flattened":true}}}},"ListBucketInventoryConfigurations":{"http":{"method":"GET","requestUri":"/{Bucket}?inventory"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContinuationToken":{"location":"querystring","locationName":"continuation-token"}}},"output":{"type":"structure","members":{"ContinuationToken":{},"InventoryConfigurationList":{"locationName":"InventoryConfiguration","type":"list","member":{"shape":"S46"},"flattened":true},"IsTruncated":{"type":"boolean"},"NextContinuationToken":{}}}},"ListBucketMetricsConfigurations":{"http":{"method":"GET","requestUri":"/{Bucket}?metrics"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContinuationToken":{"location":"querystring","locationName":"continuation-token"}}},"output":{"type":"structure","members":{"IsTruncated":{"type":"boolean"},"ContinuationToken":{},"NextContinuationToken":{},"MetricsConfigurationList":{"locationName":"MetricsConfiguration","type":"list","member":{"shape":"S5j"},"flattened":true}}}},"ListBuckets":{"http":{"method":"GET"},"output":{"type":"structure","members":{"Buckets":{"type":"list","member":{"locationName":"Bucket","type":"structure","members":{"Name":{},"CreationDate":{"type":"timestamp"}}}},"Owner":{"shape":"S2v"}}},"alias":"GetService"},"ListMultipartUploads":{"http":{"method":"GET","requestUri":"/{Bucket}?uploads"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delimiter":{"location":"querystring","locationName":"delimiter"},"EncodingType":{"location":"querystring","locationName":"encoding-type"},"KeyMarker":{"location":"querystring","locationName":"key-marker"},"MaxUploads":{"location":"querystring","locationName":"max-uploads","type":"integer"},"Prefix":{"location":"querystring","locationName":"prefix"},"UploadIdMarker":{"location":"querystring","locationName":"upload-id-marker"}}},"output":{"type":"structure","members":{"Bucket":{},"KeyMarker":{},"UploadIdMarker":{},"NextKeyMarker":{},"Prefix":{},"Delimiter":{},"NextUploadIdMarker":{},"MaxUploads":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Uploads":{"locationName":"Upload","type":"list","member":{"type":"structure","members":{"UploadId":{},"Key":{},"Initiated":{"type":"timestamp"},"StorageClass":{},"Owner":{"shape":"S2v"},"Initiator":{"shape":"S97"}}},"flattened":true},"CommonPrefixes":{"shape":"S98"},"EncodingType":{}}}},"ListObjectVersions":{"http":{"method":"GET","requestUri":"/{Bucket}?versions"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delimiter":{"location":"querystring","locationName":"delimiter"},"EncodingType":{"location":"querystring","locationName":"encoding-type"},"KeyMarker":{"location":"querystring","locationName":"key-marker"},"MaxKeys":{"location":"querystring","locationName":"max-keys","type":"integer"},"Prefix":{"location":"querystring","locationName":"prefix"},"VersionIdMarker":{"location":"querystring","locationName":"version-id-marker"}}},"output":{"type":"structure","members":{"IsTruncated":{"type":"boolean"},"KeyMarker":{},"VersionIdMarker":{},"NextKeyMarker":{},"NextVersionIdMarker":{},"Versions":{"locationName":"Version","type":"list","member":{"type":"structure","members":{"ETag":{},"Size":{"type":"integer"},"StorageClass":{},"Key":{},"VersionId":{},"IsLatest":{"type":"boolean"},"LastModified":{"type":"timestamp"},"Owner":{"shape":"S2v"}}},"flattened":true},"DeleteMarkers":{"locationName":"DeleteMarker","type":"list","member":{"type":"structure","members":{"Owner":{"shape":"S2v"},"Key":{},"VersionId":{},"IsLatest":{"type":"boolean"},"LastModified":{"type":"timestamp"}}},"flattened":true},"Name":{},"Prefix":{},"Delimiter":{},"MaxKeys":{"type":"integer"},"CommonPrefixes":{"shape":"S98"},"EncodingType":{}}},"alias":"GetBucketObjectVersions"},"ListObjects":{"http":{"method":"GET","requestUri":"/{Bucket}"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delimiter":{"location":"querystring","locationName":"delimiter"},"EncodingType":{"location":"querystring","locationName":"encoding-type"},"Marker":{"location":"querystring","locationName":"marker"},"MaxKeys":{"location":"querystring","locationName":"max-keys","type":"integer"},"Prefix":{"location":"querystring","locationName":"prefix"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"IsTruncated":{"type":"boolean"},"Marker":{},"NextMarker":{},"Contents":{"shape":"S9q"},"Name":{},"Prefix":{},"Delimiter":{},"MaxKeys":{"type":"integer"},"CommonPrefixes":{"shape":"S98"},"EncodingType":{}}},"alias":"GetBucket"},"ListObjectsV2":{"http":{"method":"GET","requestUri":"/{Bucket}?list-type=2"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Delimiter":{"location":"querystring","locationName":"delimiter"},"EncodingType":{"location":"querystring","locationName":"encoding-type"},"MaxKeys":{"location":"querystring","locationName":"max-keys","type":"integer"},"Prefix":{"location":"querystring","locationName":"prefix"},"ContinuationToken":{"location":"querystring","locationName":"continuation-token"},"FetchOwner":{"location":"querystring","locationName":"fetch-owner","type":"boolean"},"StartAfter":{"location":"querystring","locationName":"start-after"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"IsTruncated":{"type":"boolean"},"Contents":{"shape":"S9q"},"Name":{},"Prefix":{},"Delimiter":{},"MaxKeys":{"type":"integer"},"CommonPrefixes":{"shape":"S98"},"EncodingType":{},"KeyCount":{"type":"integer"},"ContinuationToken":{},"NextContinuationToken":{},"StartAfter":{}}}},"ListParts":{"http":{"method":"GET","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"MaxParts":{"location":"querystring","locationName":"max-parts","type":"integer"},"PartNumberMarker":{"location":"querystring","locationName":"part-number-marker","type":"integer"},"UploadId":{"location":"querystring","locationName":"uploadId"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"AbortDate":{"location":"header","locationName":"x-amz-abort-date","type":"timestamp"},"AbortRuleId":{"location":"header","locationName":"x-amz-abort-rule-id"},"Bucket":{},"Key":{},"UploadId":{},"PartNumberMarker":{"type":"integer"},"NextPartNumberMarker":{"type":"integer"},"MaxParts":{"type":"integer"},"IsTruncated":{"type":"boolean"},"Parts":{"locationName":"Part","type":"list","member":{"type":"structure","members":{"PartNumber":{"type":"integer"},"LastModified":{"type":"timestamp"},"ETag":{},"Size":{"type":"integer"}}},"flattened":true},"Initiator":{"shape":"S97"},"Owner":{"shape":"S2v"},"StorageClass":{},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"PutBucketAccelerateConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?accelerate"},"input":{"type":"structure","required":["Bucket","AccelerateConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"AccelerateConfiguration":{"locationName":"AccelerateConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"Status":{}}}},"payload":"AccelerateConfiguration"}},"PutBucketAcl":{"http":{"method":"PUT","requestUri":"/{Bucket}?acl"},"input":{"type":"structure","required":["Bucket"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"AccessControlPolicy":{"shape":"Sa8","locationName":"AccessControlPolicy","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}},"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWrite":{"location":"header","locationName":"x-amz-grant-write"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"}},"payload":"AccessControlPolicy"}},"PutBucketAnalyticsConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?analytics"},"input":{"type":"structure","required":["Bucket","Id","AnalyticsConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"},"AnalyticsConfiguration":{"shape":"S37","locationName":"AnalyticsConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"AnalyticsConfiguration"}},"PutBucketCors":{"http":{"method":"PUT","requestUri":"/{Bucket}?cors"},"input":{"type":"structure","required":["Bucket","CORSConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"CORSConfiguration":{"locationName":"CORSConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["CORSRules"],"members":{"CORSRules":{"shape":"S3n","locationName":"CORSRule"}}},"ContentMD5":{"location":"header","locationName":"Content-MD5"}},"payload":"CORSConfiguration"}},"PutBucketEncryption":{"http":{"method":"PUT","requestUri":"/{Bucket}?encryption"},"input":{"type":"structure","required":["Bucket","ServerSideEncryptionConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"ServerSideEncryptionConfiguration":{"shape":"S40","locationName":"ServerSideEncryptionConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"ServerSideEncryptionConfiguration"}},"PutBucketInventoryConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?inventory"},"input":{"type":"structure","required":["Bucket","Id","InventoryConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"},"InventoryConfiguration":{"shape":"S46","locationName":"InventoryConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"InventoryConfiguration"}},"PutBucketLifecycle":{"http":{"method":"PUT","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"LifecycleConfiguration":{"locationName":"LifecycleConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Rules"],"members":{"Rules":{"shape":"S4m","locationName":"Rule"}}}},"payload":"LifecycleConfiguration"},"deprecated":true},"PutBucketLifecycleConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?lifecycle"},"input":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"LifecycleConfiguration":{"locationName":"LifecycleConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Rules"],"members":{"Rules":{"shape":"S51","locationName":"Rule"}}}},"payload":"LifecycleConfiguration"}},"PutBucketLogging":{"http":{"method":"PUT","requestUri":"/{Bucket}?logging"},"input":{"type":"structure","required":["Bucket","BucketLoggingStatus"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"BucketLoggingStatus":{"locationName":"BucketLoggingStatus","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"LoggingEnabled":{"shape":"S5b"}}},"ContentMD5":{"location":"header","locationName":"Content-MD5"}},"payload":"BucketLoggingStatus"}},"PutBucketMetricsConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?metrics"},"input":{"type":"structure","required":["Bucket","Id","MetricsConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Id":{"location":"querystring","locationName":"id"},"MetricsConfiguration":{"shape":"S5j","locationName":"MetricsConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"MetricsConfiguration"}},"PutBucketNotification":{"http":{"method":"PUT","requestUri":"/{Bucket}?notification"},"input":{"type":"structure","required":["Bucket","NotificationConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"NotificationConfiguration":{"shape":"S5n","locationName":"NotificationConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"NotificationConfiguration"},"deprecated":true},"PutBucketNotificationConfiguration":{"http":{"method":"PUT","requestUri":"/{Bucket}?notification"},"input":{"type":"structure","required":["Bucket","NotificationConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"NotificationConfiguration":{"shape":"S5y","locationName":"NotificationConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"NotificationConfiguration"}},"PutBucketPolicy":{"http":{"method":"PUT","requestUri":"/{Bucket}?policy"},"input":{"type":"structure","required":["Bucket","Policy"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"ConfirmRemoveSelfBucketAccess":{"location":"header","locationName":"x-amz-confirm-remove-self-bucket-access","type":"boolean"},"Policy":{}},"payload":"Policy"}},"PutBucketReplication":{"http":{"method":"PUT","requestUri":"/{Bucket}?replication"},"input":{"type":"structure","required":["Bucket","ReplicationConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"ReplicationConfiguration":{"shape":"S6h","locationName":"ReplicationConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"ReplicationConfiguration"}},"PutBucketRequestPayment":{"http":{"method":"PUT","requestUri":"/{Bucket}?requestPayment"},"input":{"type":"structure","required":["Bucket","RequestPaymentConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"RequestPaymentConfiguration":{"locationName":"RequestPaymentConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Payer"],"members":{"Payer":{}}}},"payload":"RequestPaymentConfiguration"}},"PutBucketTagging":{"http":{"method":"PUT","requestUri":"/{Bucket}?tagging"},"input":{"type":"structure","required":["Bucket","Tagging"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"Tagging":{"shape":"Sau","locationName":"Tagging","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"Tagging"}},"PutBucketVersioning":{"http":{"method":"PUT","requestUri":"/{Bucket}?versioning"},"input":{"type":"structure","required":["Bucket","VersioningConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"MFA":{"location":"header","locationName":"x-amz-mfa"},"VersioningConfiguration":{"locationName":"VersioningConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"MFADelete":{"locationName":"MfaDelete"},"Status":{}}}},"payload":"VersioningConfiguration"}},"PutBucketWebsite":{"http":{"method":"PUT","requestUri":"/{Bucket}?website"},"input":{"type":"structure","required":["Bucket","WebsiteConfiguration"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"WebsiteConfiguration":{"locationName":"WebsiteConfiguration","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","members":{"ErrorDocument":{"shape":"S7a"},"IndexDocument":{"shape":"S78"},"RedirectAllRequestsTo":{"shape":"S75"},"RoutingRules":{"shape":"S7b"}}}},"payload":"WebsiteConfiguration"}},"PutObject":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"Body":{"streaming":true,"type":"blob"},"Bucket":{"location":"uri","locationName":"Bucket"},"CacheControl":{"location":"header","locationName":"Cache-Control"},"ContentDisposition":{"location":"header","locationName":"Content-Disposition"},"ContentEncoding":{"location":"header","locationName":"Content-Encoding"},"ContentLanguage":{"location":"header","locationName":"Content-Language"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"long"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"ContentType":{"location":"header","locationName":"Content-Type"},"Expires":{"location":"header","locationName":"Expires","type":"timestamp"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"Metadata":{"shape":"S11","location":"headers","locationName":"x-amz-meta-"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"StorageClass":{"location":"header","locationName":"x-amz-storage-class"},"WebsiteRedirectLocation":{"location":"header","locationName":"x-amz-website-redirect-location"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S19","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"},"Tagging":{"location":"header","locationName":"x-amz-tagging"}},"payload":"Body"},"output":{"type":"structure","members":{"Expiration":{"location":"header","locationName":"x-amz-expiration"},"ETag":{"location":"header","locationName":"ETag"},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"VersionId":{"location":"header","locationName":"x-amz-version-id"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"PutObjectAcl":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}?acl"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"ACL":{"location":"header","locationName":"x-amz-acl"},"AccessControlPolicy":{"shape":"Sa8","locationName":"AccessControlPolicy","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}},"Bucket":{"location":"uri","locationName":"Bucket"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"GrantFullControl":{"location":"header","locationName":"x-amz-grant-full-control"},"GrantRead":{"location":"header","locationName":"x-amz-grant-read"},"GrantReadACP":{"location":"header","locationName":"x-amz-grant-read-acp"},"GrantWrite":{"location":"header","locationName":"x-amz-grant-write"},"GrantWriteACP":{"location":"header","locationName":"x-amz-grant-write-acp"},"Key":{"location":"uri","locationName":"Key"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"},"VersionId":{"location":"querystring","locationName":"versionId"}},"payload":"AccessControlPolicy"},"output":{"type":"structure","members":{"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"PutObjectTagging":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}?tagging"},"input":{"type":"structure","required":["Bucket","Key","Tagging"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"VersionId":{"location":"querystring","locationName":"versionId"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"Tagging":{"shape":"Sau","locationName":"Tagging","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}}},"payload":"Tagging"},"output":{"type":"structure","members":{"VersionId":{"location":"header","locationName":"x-amz-version-id"}}}},"RestoreObject":{"http":{"requestUri":"/{Bucket}/{Key+}?restore"},"input":{"type":"structure","required":["Bucket","Key"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"Key":{"location":"uri","locationName":"Key"},"VersionId":{"location":"querystring","locationName":"versionId"},"RestoreRequest":{"locationName":"RestoreRequest","xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},"type":"structure","required":["Days"],"members":{"Days":{"type":"integer"},"GlacierJobParameters":{"type":"structure","required":["Tier"],"members":{"Tier":{}}}}},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"RestoreRequest"},"output":{"type":"structure","members":{"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}},"alias":"PostObjectRestore"},"UploadPart":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","Key","PartNumber","UploadId"],"members":{"Body":{"streaming":true,"type":"blob"},"Bucket":{"location":"uri","locationName":"Bucket"},"ContentLength":{"location":"header","locationName":"Content-Length","type":"long"},"ContentMD5":{"location":"header","locationName":"Content-MD5"},"Key":{"location":"uri","locationName":"Key"},"PartNumber":{"location":"querystring","locationName":"partNumber","type":"integer"},"UploadId":{"location":"querystring","locationName":"uploadId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S19","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}},"payload":"Body"},"output":{"type":"structure","members":{"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"ETag":{"location":"header","locationName":"ETag"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}}}},"UploadPartCopy":{"http":{"method":"PUT","requestUri":"/{Bucket}/{Key+}"},"input":{"type":"structure","required":["Bucket","CopySource","Key","PartNumber","UploadId"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"},"CopySource":{"location":"header","locationName":"x-amz-copy-source"},"CopySourceIfMatch":{"location":"header","locationName":"x-amz-copy-source-if-match"},"CopySourceIfModifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-modified-since","type":"timestamp"},"CopySourceIfNoneMatch":{"location":"header","locationName":"x-amz-copy-source-if-none-match"},"CopySourceIfUnmodifiedSince":{"location":"header","locationName":"x-amz-copy-source-if-unmodified-since","type":"timestamp"},"CopySourceRange":{"location":"header","locationName":"x-amz-copy-source-range"},"Key":{"location":"uri","locationName":"Key"},"PartNumber":{"location":"querystring","locationName":"partNumber","type":"integer"},"UploadId":{"location":"querystring","locationName":"uploadId"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKey":{"shape":"S19","location":"header","locationName":"x-amz-server-side-encryption-customer-key"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"CopySourceSSECustomerAlgorithm":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-algorithm"},"CopySourceSSECustomerKey":{"shape":"S1c","location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key"},"CopySourceSSECustomerKeyMD5":{"location":"header","locationName":"x-amz-copy-source-server-side-encryption-customer-key-MD5"},"RequestPayer":{"location":"header","locationName":"x-amz-request-payer"}}},"output":{"type":"structure","members":{"CopySourceVersionId":{"location":"header","locationName":"x-amz-copy-source-version-id"},"CopyPartResult":{"type":"structure","members":{"ETag":{},"LastModified":{"type":"timestamp"}}},"ServerSideEncryption":{"location":"header","locationName":"x-amz-server-side-encryption"},"SSECustomerAlgorithm":{"location":"header","locationName":"x-amz-server-side-encryption-customer-algorithm"},"SSECustomerKeyMD5":{"location":"header","locationName":"x-amz-server-side-encryption-customer-key-MD5"},"SSEKMSKeyId":{"shape":"Sj","location":"header","locationName":"x-amz-server-side-encryption-aws-kms-key-id"},"RequestCharged":{"location":"header","locationName":"x-amz-request-charged"}},"payload":"CopyPartResult"}}},"shapes":{"Sj":{"type":"string","sensitive":true},"S11":{"type":"map","key":{},"value":{}},"S19":{"type":"blob","sensitive":true},"S1c":{"type":"blob","sensitive":true},"S2v":{"type":"structure","members":{"DisplayName":{},"ID":{}}},"S2y":{"type":"list","member":{"locationName":"Grant","type":"structure","members":{"Grantee":{"shape":"S30"},"Permission":{}}}},"S30":{"type":"structure","required":["Type"],"members":{"DisplayName":{},"EmailAddress":{},"ID":{},"Type":{"locationName":"xsi:type","xmlAttribute":true},"URI":{}},"xmlNamespace":{"prefix":"xsi","uri":"http://www.w3.org/2001/XMLSchema-instance"}},"S37":{"type":"structure","required":["Id","StorageClassAnalysis"],"members":{"Id":{},"Filter":{"type":"structure","members":{"Prefix":{},"Tag":{"shape":"S3a"},"And":{"type":"structure","members":{"Prefix":{},"Tags":{"shape":"S3d","flattened":true,"locationName":"Tag"}}}}},"StorageClassAnalysis":{"type":"structure","members":{"DataExport":{"type":"structure","required":["OutputSchemaVersion","Destination"],"members":{"OutputSchemaVersion":{},"Destination":{"type":"structure","required":["S3BucketDestination"],"members":{"S3BucketDestination":{"type":"structure","required":["Format","Bucket"],"members":{"Format":{},"BucketAccountId":{},"Bucket":{},"Prefix":{}}}}}}}}}}},"S3a":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}},"S3d":{"type":"list","member":{"shape":"S3a","locationName":"Tag"}},"S3n":{"type":"list","member":{"type":"structure","required":["AllowedMethods","AllowedOrigins"],"members":{"AllowedHeaders":{"locationName":"AllowedHeader","type":"list","member":{},"flattened":true},"AllowedMethods":{"locationName":"AllowedMethod","type":"list","member":{},"flattened":true},"AllowedOrigins":{"locationName":"AllowedOrigin","type":"list","member":{},"flattened":true},"ExposeHeaders":{"locationName":"ExposeHeader","type":"list","member":{},"flattened":true},"MaxAgeSeconds":{"type":"integer"}}},"flattened":true},"S40":{"type":"structure","required":["Rules"],"members":{"Rules":{"locationName":"Rule","type":"list","member":{"type":"structure","members":{"ApplyServerSideEncryptionByDefault":{"type":"structure","required":["SSEAlgorithm"],"members":{"SSEAlgorithm":{},"KMSMasterKeyID":{"shape":"Sj"}}}}},"flattened":true}}},"S46":{"type":"structure","required":["Destination","IsEnabled","Id","IncludedObjectVersions","Schedule"],"members":{"Destination":{"type":"structure","required":["S3BucketDestination"],"members":{"S3BucketDestination":{"type":"structure","required":["Bucket","Format"],"members":{"AccountId":{},"Bucket":{},"Format":{},"Prefix":{},"Encryption":{"type":"structure","members":{"SSES3":{"locationName":"SSE-S3","type":"structure","members":{}},"SSEKMS":{"locationName":"SSE-KMS","type":"structure","required":["KeyId"],"members":{"KeyId":{"shape":"Sj"}}}}}}}}},"IsEnabled":{"type":"boolean"},"Filter":{"type":"structure","required":["Prefix"],"members":{"Prefix":{}}},"Id":{},"IncludedObjectVersions":{},"OptionalFields":{"type":"list","member":{"locationName":"Field"}},"Schedule":{"type":"structure","required":["Frequency"],"members":{"Frequency":{}}}}},"S4m":{"type":"list","member":{"type":"structure","required":["Prefix","Status"],"members":{"Expiration":{"shape":"S4o"},"ID":{},"Prefix":{},"Status":{},"Transition":{"shape":"S4t"},"NoncurrentVersionTransition":{"shape":"S4v"},"NoncurrentVersionExpiration":{"shape":"S4w"},"AbortIncompleteMultipartUpload":{"shape":"S4x"}}},"flattened":true},"S4o":{"type":"structure","members":{"Date":{"shape":"S4p"},"Days":{"type":"integer"},"ExpiredObjectDeleteMarker":{"type":"boolean"}}},"S4p":{"type":"timestamp","timestampFormat":"iso8601"},"S4t":{"type":"structure","members":{"Date":{"shape":"S4p"},"Days":{"type":"integer"},"StorageClass":{}}},"S4v":{"type":"structure","members":{"NoncurrentDays":{"type":"integer"},"StorageClass":{}}},"S4w":{"type":"structure","members":{"NoncurrentDays":{"type":"integer"}}},"S4x":{"type":"structure","members":{"DaysAfterInitiation":{"type":"integer"}}},"S51":{"type":"list","member":{"type":"structure","required":["Status"],"members":{"Expiration":{"shape":"S4o"},"ID":{},"Prefix":{"deprecated":true},"Filter":{"type":"structure","members":{"Prefix":{},"Tag":{"shape":"S3a"},"And":{"type":"structure","members":{"Prefix":{},"Tags":{"shape":"S3d","flattened":true,"locationName":"Tag"}}}}},"Status":{},"Transitions":{"locationName":"Transition","type":"list","member":{"shape":"S4t"},"flattened":true},"NoncurrentVersionTransitions":{"locationName":"NoncurrentVersionTransition","type":"list","member":{"shape":"S4v"},"flattened":true},"NoncurrentVersionExpiration":{"shape":"S4w"},"AbortIncompleteMultipartUpload":{"shape":"S4x"}}},"flattened":true},"S5b":{"type":"structure","members":{"TargetBucket":{},"TargetGrants":{"type":"list","member":{"locationName":"Grant","type":"structure","members":{"Grantee":{"shape":"S30"},"Permission":{}}}},"TargetPrefix":{}}},"S5j":{"type":"structure","required":["Id"],"members":{"Id":{},"Filter":{"type":"structure","members":{"Prefix":{},"Tag":{"shape":"S3a"},"And":{"type":"structure","members":{"Prefix":{},"Tags":{"shape":"S3d","flattened":true,"locationName":"Tag"}}}}}}},"S5m":{"type":"structure","required":["Bucket"],"members":{"Bucket":{"location":"uri","locationName":"Bucket"}}},"S5n":{"type":"structure","members":{"TopicConfiguration":{"type":"structure","members":{"Id":{},"Events":{"shape":"S5q","locationName":"Event"},"Event":{"deprecated":true},"Topic":{}}},"QueueConfiguration":{"type":"structure","members":{"Id":{},"Event":{"deprecated":true},"Events":{"shape":"S5q","locationName":"Event"},"Queue":{}}},"CloudFunctionConfiguration":{"type":"structure","members":{"Id":{},"Event":{"deprecated":true},"Events":{"shape":"S5q","locationName":"Event"},"CloudFunction":{},"InvocationRole":{}}}}},"S5q":{"type":"list","member":{},"flattened":true},"S5y":{"type":"structure","members":{"TopicConfigurations":{"locationName":"TopicConfiguration","type":"list","member":{"type":"structure","required":["TopicArn","Events"],"members":{"Id":{},"TopicArn":{"locationName":"Topic"},"Events":{"shape":"S5q","locationName":"Event"},"Filter":{"shape":"S61"}}},"flattened":true},"QueueConfigurations":{"locationName":"QueueConfiguration","type":"list","member":{"type":"structure","required":["QueueArn","Events"],"members":{"Id":{},"QueueArn":{"locationName":"Queue"},"Events":{"shape":"S5q","locationName":"Event"},"Filter":{"shape":"S61"}}},"flattened":true},"LambdaFunctionConfigurations":{"locationName":"CloudFunctionConfiguration","type":"list","member":{"type":"structure","required":["LambdaFunctionArn","Events"],"members":{"Id":{},"LambdaFunctionArn":{"locationName":"CloudFunction"},"Events":{"shape":"S5q","locationName":"Event"},"Filter":{"shape":"S61"}}},"flattened":true}}},"S61":{"type":"structure","members":{"Key":{"locationName":"S3Key","type":"structure","members":{"FilterRules":{"locationName":"FilterRule","type":"list","member":{"type":"structure","members":{"Name":{},"Value":{}}},"flattened":true}}}}},"S6h":{"type":"structure","required":["Role","Rules"],"members":{"Role":{},"Rules":{"locationName":"Rule","type":"list","member":{"type":"structure","required":["Prefix","Status","Destination"],"members":{"ID":{},"Prefix":{},"Status":{},"SourceSelectionCriteria":{"type":"structure","members":{"SseKmsEncryptedObjects":{"type":"structure","required":["Status"],"members":{"Status":{}}}}},"Destination":{"type":"structure","required":["Bucket"],"members":{"Bucket":{},"Account":{},"StorageClass":{},"AccessControlTranslation":{"type":"structure","required":["Owner"],"members":{"Owner":{}}},"EncryptionConfiguration":{"type":"structure","members":{"ReplicaKmsKeyID":{}}}}}}},"flattened":true}}},"S75":{"type":"structure","required":["HostName"],"members":{"HostName":{},"Protocol":{}}},"S78":{"type":"structure","required":["Suffix"],"members":{"Suffix":{}}},"S7a":{"type":"structure","required":["Key"],"members":{"Key":{}}},"S7b":{"type":"list","member":{"locationName":"RoutingRule","type":"structure","required":["Redirect"],"members":{"Condition":{"type":"structure","members":{"HttpErrorCodeReturnedEquals":{},"KeyPrefixEquals":{}}},"Redirect":{"type":"structure","members":{"HostName":{},"HttpRedirectCode":{},"Protocol":{},"ReplaceKeyPrefixWith":{},"ReplaceKeyWith":{}}}}}},"S97":{"type":"structure","members":{"ID":{},"DisplayName":{}}},"S98":{"type":"list","member":{"type":"structure","members":{"Prefix":{}}},"flattened":true},"S9q":{"type":"list","member":{"type":"structure","members":{"Key":{},"LastModified":{"type":"timestamp"},"ETag":{},"Size":{"type":"integer"},"StorageClass":{},"Owner":{"shape":"S2v"}}},"flattened":true},"Sa8":{"type":"structure","members":{"Grants":{"shape":"S2y","locationName":"AccessControlList"},"Owner":{"shape":"S2v"}}},"Sau":{"type":"structure","required":["TagSet"],"members":{"TagSet":{"shape":"S3d"}}}}}

/***/ }),
/* 332 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListBuckets":{"result_key":"Buckets"},"ListMultipartUploads":{"input_token":["KeyMarker","UploadIdMarker"],"limit_key":"MaxUploads","more_results":"IsTruncated","output_token":["NextKeyMarker","NextUploadIdMarker"],"result_key":["Uploads","CommonPrefixes"]},"ListObjectVersions":{"input_token":["KeyMarker","VersionIdMarker"],"limit_key":"MaxKeys","more_results":"IsTruncated","output_token":["NextKeyMarker","NextVersionIdMarker"],"result_key":["Versions","DeleteMarkers","CommonPrefixes"]},"ListObjects":{"input_token":"Marker","limit_key":"MaxKeys","more_results":"IsTruncated","output_token":"NextMarker || Contents[-1].Key","result_key":["Contents","CommonPrefixes"]},"ListObjectsV2":{"input_token":"ContinuationToken","limit_key":"MaxKeys","output_token":"NextContinuationToken","result_key":["Contents","CommonPrefixes"]},"ListParts":{"input_token":"PartNumberMarker","limit_key":"MaxParts","more_results":"IsTruncated","output_token":"NextPartNumberMarker","result_key":"Parts"}}}

/***/ }),
/* 333 */
/***/ (function(module, exports) {

module.exports = {"version":2,"waiters":{"BucketExists":{"delay":5,"operation":"HeadBucket","maxAttempts":20,"acceptors":[{"expected":200,"matcher":"status","state":"success"},{"expected":301,"matcher":"status","state":"success"},{"expected":403,"matcher":"status","state":"success"},{"expected":404,"matcher":"status","state":"retry"}]},"BucketNotExists":{"delay":5,"operation":"HeadBucket","maxAttempts":20,"acceptors":[{"expected":404,"matcher":"status","state":"success"}]},"ObjectExists":{"delay":5,"operation":"HeadObject","maxAttempts":20,"acceptors":[{"expected":200,"matcher":"status","state":"success"},{"expected":404,"matcher":"status","state":"retry"}]},"ObjectNotExists":{"delay":5,"operation":"HeadObject","maxAttempts":20,"acceptors":[{"expected":404,"matcher":"status","state":"success"}]}}}

/***/ }),
/* 334 */
/***/ (function(module, exports) {

module.exports = {"metadata":{"apiVersion":"2009-04-15","endpointPrefix":"sdb","serviceFullName":"Amazon SimpleDB","signatureVersion":"v2","xmlNamespace":"http://sdb.amazonaws.com/doc/2009-04-15/","protocol":"query"},"operations":{"BatchDeleteAttributes":{"input":{"type":"structure","required":["DomainName","Items"],"members":{"DomainName":{},"Items":{"type":"list","member":{"locationName":"Item","type":"structure","required":["Name"],"members":{"Name":{"locationName":"ItemName"},"Attributes":{"shape":"S5"}}},"flattened":true}}}},"BatchPutAttributes":{"input":{"type":"structure","required":["DomainName","Items"],"members":{"DomainName":{},"Items":{"type":"list","member":{"locationName":"Item","type":"structure","required":["Name","Attributes"],"members":{"Name":{"locationName":"ItemName"},"Attributes":{"shape":"Sa"}}},"flattened":true}}}},"CreateDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}}},"DeleteAttributes":{"input":{"type":"structure","required":["DomainName","ItemName"],"members":{"DomainName":{},"ItemName":{},"Attributes":{"shape":"S5"},"Expected":{"shape":"Sf"}}}},"DeleteDomain":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}}},"DomainMetadata":{"input":{"type":"structure","required":["DomainName"],"members":{"DomainName":{}}},"output":{"resultWrapper":"DomainMetadataResult","type":"structure","members":{"ItemCount":{"type":"integer"},"ItemNamesSizeBytes":{"type":"long"},"AttributeNameCount":{"type":"integer"},"AttributeNamesSizeBytes":{"type":"long"},"AttributeValueCount":{"type":"integer"},"AttributeValuesSizeBytes":{"type":"long"},"Timestamp":{"type":"integer"}}}},"GetAttributes":{"input":{"type":"structure","required":["DomainName","ItemName"],"members":{"DomainName":{},"ItemName":{},"AttributeNames":{"type":"list","member":{"locationName":"AttributeName"},"flattened":true},"ConsistentRead":{"type":"boolean"}}},"output":{"resultWrapper":"GetAttributesResult","type":"structure","members":{"Attributes":{"shape":"So"}}}},"ListDomains":{"input":{"type":"structure","members":{"MaxNumberOfDomains":{"type":"integer"},"NextToken":{}}},"output":{"resultWrapper":"ListDomainsResult","type":"structure","members":{"DomainNames":{"type":"list","member":{"locationName":"DomainName"},"flattened":true},"NextToken":{}}}},"PutAttributes":{"input":{"type":"structure","required":["DomainName","ItemName","Attributes"],"members":{"DomainName":{},"ItemName":{},"Attributes":{"shape":"Sa"},"Expected":{"shape":"Sf"}}}},"Select":{"input":{"type":"structure","required":["SelectExpression"],"members":{"SelectExpression":{},"NextToken":{},"ConsistentRead":{"type":"boolean"}}},"output":{"resultWrapper":"SelectResult","type":"structure","members":{"Items":{"type":"list","member":{"locationName":"Item","type":"structure","required":["Name","Attributes"],"members":{"Name":{},"AlternateNameEncoding":{},"Attributes":{"shape":"So"}}},"flattened":true},"NextToken":{}}}}},"shapes":{"S5":{"type":"list","member":{"locationName":"Attribute","type":"structure","required":["Name"],"members":{"Name":{},"Value":{}}},"flattened":true},"Sa":{"type":"list","member":{"locationName":"Attribute","type":"structure","required":["Name","Value"],"members":{"Name":{},"Value":{},"Replace":{"type":"boolean"}}},"flattened":true},"Sf":{"type":"structure","members":{"Name":{},"Value":{},"Exists":{"type":"boolean"}}},"So":{"type":"list","member":{"locationName":"Attribute","type":"structure","required":["Name","Value"],"members":{"Name":{},"AlternateNameEncoding":{},"Value":{},"AlternateValueEncoding":{}}},"flattened":true}}}

/***/ }),
/* 335 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListDomains":{"input_token":"NextToken","output_token":"NextToken","limit_key":"MaxNumberOfDomains","result_key":"DomainNames"},"Select":{"input_token":"NextToken","output_token":"NextToken","result_key":"Items"}}}

/***/ }),
/* 336 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-12-10","endpointPrefix":"servicecatalog","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Service Catalog","signatureVersion":"v4","targetPrefix":"AWS242ServiceCatalogService","uid":"servicecatalog-2015-12-10"},"operations":{"AcceptPortfolioShare":{"input":{"type":"structure","required":["PortfolioId"],"members":{"AcceptLanguage":{},"PortfolioId":{}}},"output":{"type":"structure","members":{}}},"AssociatePrincipalWithPortfolio":{"input":{"type":"structure","required":["PortfolioId","PrincipalARN","PrincipalType"],"members":{"AcceptLanguage":{},"PortfolioId":{},"PrincipalARN":{},"PrincipalType":{}}},"output":{"type":"structure","members":{}}},"AssociateProductWithPortfolio":{"input":{"type":"structure","required":["ProductId","PortfolioId"],"members":{"AcceptLanguage":{},"ProductId":{},"PortfolioId":{},"SourcePortfolioId":{}}},"output":{"type":"structure","members":{}}},"AssociateTagOptionWithResource":{"input":{"type":"structure","required":["ResourceId","TagOptionId"],"members":{"ResourceId":{},"TagOptionId":{}}},"output":{"type":"structure","members":{}}},"CopyProduct":{"input":{"type":"structure","required":["SourceProductArn","IdempotencyToken"],"members":{"AcceptLanguage":{},"SourceProductArn":{},"TargetProductId":{},"TargetProductName":{},"SourceProvisioningArtifactIdentifiers":{"type":"list","member":{"type":"map","key":{},"value":{}}},"CopyOptions":{"type":"list","member":{}},"IdempotencyToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"CopyProductToken":{}}}},"CreateConstraint":{"input":{"type":"structure","required":["PortfolioId","ProductId","Parameters","Type","IdempotencyToken"],"members":{"AcceptLanguage":{},"PortfolioId":{},"ProductId":{},"Parameters":{},"Type":{},"Description":{},"IdempotencyToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"ConstraintDetail":{"shape":"Sv"},"ConstraintParameters":{},"Status":{}}}},"CreatePortfolio":{"input":{"type":"structure","required":["DisplayName","ProviderName","IdempotencyToken"],"members":{"AcceptLanguage":{},"DisplayName":{},"Description":{},"ProviderName":{},"Tags":{"shape":"S12"},"IdempotencyToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"PortfolioDetail":{"shape":"S17"},"Tags":{"shape":"S1a"}}}},"CreatePortfolioShare":{"input":{"type":"structure","required":["PortfolioId","AccountId"],"members":{"AcceptLanguage":{},"PortfolioId":{},"AccountId":{}}},"output":{"type":"structure","members":{}}},"CreateProduct":{"input":{"type":"structure","required":["Name","Owner","ProductType","ProvisioningArtifactParameters","IdempotencyToken"],"members":{"AcceptLanguage":{},"Name":{},"Owner":{},"Description":{},"Distributor":{},"SupportDescription":{},"SupportEmail":{},"SupportUrl":{},"ProductType":{},"Tags":{"shape":"S12"},"ProvisioningArtifactParameters":{"shape":"S1k"},"IdempotencyToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"ProductViewDetail":{"shape":"S1s"},"ProvisioningArtifactDetail":{"shape":"S1x"},"Tags":{"shape":"S1a"}}}},"CreateProvisioningArtifact":{"input":{"type":"structure","required":["ProductId","Parameters","IdempotencyToken"],"members":{"AcceptLanguage":{},"ProductId":{},"Parameters":{"shape":"S1k"},"IdempotencyToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"ProvisioningArtifactDetail":{"shape":"S1x"},"Info":{"shape":"S1n"},"Status":{}}}},"CreateTagOption":{"input":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}},"output":{"type":"structure","members":{"TagOptionDetail":{"shape":"S24"}}}},"DeleteConstraint":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{}}},"DeletePortfolio":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{}}},"DeletePortfolioShare":{"input":{"type":"structure","required":["PortfolioId","AccountId"],"members":{"AcceptLanguage":{},"PortfolioId":{},"AccountId":{}}},"output":{"type":"structure","members":{}}},"DeleteProduct":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{}}},"DeleteProvisioningArtifact":{"input":{"type":"structure","required":["ProductId","ProvisioningArtifactId"],"members":{"AcceptLanguage":{},"ProductId":{},"ProvisioningArtifactId":{}}},"output":{"type":"structure","members":{}}},"DescribeConstraint":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{"ConstraintDetail":{"shape":"Sv"},"ConstraintParameters":{},"Status":{}}}},"DescribeCopyProductStatus":{"input":{"type":"structure","required":["CopyProductToken"],"members":{"AcceptLanguage":{},"CopyProductToken":{}}},"output":{"type":"structure","members":{"CopyProductStatus":{},"TargetProductId":{},"StatusDetail":{}}}},"DescribePortfolio":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{"PortfolioDetail":{"shape":"S17"},"Tags":{"shape":"S1a"},"TagOptions":{"shape":"S2o"}}}},"DescribeProduct":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{"ProductViewSummary":{"shape":"S1t"},"ProvisioningArtifacts":{"shape":"S2r"}}}},"DescribeProductAsAdmin":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{"ProductViewDetail":{"shape":"S1s"},"ProvisioningArtifactSummaries":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Description":{},"CreatedTime":{"type":"timestamp"},"ProvisioningArtifactMetadata":{"shape":"S1n"}}}},"Tags":{"shape":"S1a"},"TagOptions":{"shape":"S2o"}}}},"DescribeProductView":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{"ProductViewSummary":{"shape":"S1t"},"ProvisioningArtifacts":{"shape":"S2r"}}}},"DescribeProvisionedProduct":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{}}},"output":{"type":"structure","members":{"ProvisionedProductDetail":{"shape":"S32"}}}},"DescribeProvisioningArtifact":{"input":{"type":"structure","required":["ProvisioningArtifactId","ProductId"],"members":{"AcceptLanguage":{},"ProvisioningArtifactId":{},"ProductId":{},"Verbose":{"type":"boolean"}}},"output":{"type":"structure","members":{"ProvisioningArtifactDetail":{"shape":"S1x"},"Info":{"shape":"S1n"},"Status":{}}}},"DescribeProvisioningParameters":{"input":{"type":"structure","required":["ProductId","ProvisioningArtifactId"],"members":{"AcceptLanguage":{},"ProductId":{},"ProvisioningArtifactId":{},"PathId":{}}},"output":{"type":"structure","members":{"ProvisioningArtifactParameters":{"type":"list","member":{"type":"structure","members":{"ParameterKey":{},"DefaultValue":{},"ParameterType":{},"IsNoEcho":{"type":"boolean"},"Description":{},"ParameterConstraints":{"type":"structure","members":{"AllowedValues":{"type":"list","member":{}}}}}}},"ConstraintSummaries":{"shape":"S3o"},"UsageInstructions":{"type":"list","member":{"type":"structure","members":{"Type":{},"Value":{}}}},"TagOptions":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"type":"list","member":{}}}}}}}},"DescribeRecord":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{},"PageToken":{},"PageSize":{"type":"integer"}}},"output":{"type":"structure","members":{"RecordDetail":{"shape":"S41"},"RecordOutputs":{"type":"list","member":{"type":"structure","members":{"OutputKey":{},"OutputValue":{},"Description":{}}}},"NextPageToken":{}}}},"DescribeTagOption":{"input":{"type":"structure","required":["Id"],"members":{"Id":{}}},"output":{"type":"structure","members":{"TagOptionDetail":{"shape":"S24"}}}},"DisassociatePrincipalFromPortfolio":{"input":{"type":"structure","required":["PortfolioId","PrincipalARN"],"members":{"AcceptLanguage":{},"PortfolioId":{},"PrincipalARN":{}}},"output":{"type":"structure","members":{}}},"DisassociateProductFromPortfolio":{"input":{"type":"structure","required":["ProductId","PortfolioId"],"members":{"AcceptLanguage":{},"ProductId":{},"PortfolioId":{}}},"output":{"type":"structure","members":{}}},"DisassociateTagOptionFromResource":{"input":{"type":"structure","required":["ResourceId","TagOptionId"],"members":{"ResourceId":{},"TagOptionId":{}}},"output":{"type":"structure","members":{}}},"ListAcceptedPortfolioShares":{"input":{"type":"structure","members":{"AcceptLanguage":{},"PageToken":{},"PageSize":{"type":"integer"}}},"output":{"type":"structure","members":{"PortfolioDetails":{"shape":"S4s"},"NextPageToken":{}}}},"ListConstraintsForPortfolio":{"input":{"type":"structure","required":["PortfolioId"],"members":{"AcceptLanguage":{},"PortfolioId":{},"ProductId":{},"PageSize":{"type":"integer"},"PageToken":{}}},"output":{"type":"structure","members":{"ConstraintDetails":{"type":"list","member":{"shape":"Sv"}},"NextPageToken":{}}}},"ListLaunchPaths":{"input":{"type":"structure","required":["ProductId"],"members":{"AcceptLanguage":{},"ProductId":{},"PageSize":{"type":"integer"},"PageToken":{}}},"output":{"type":"structure","members":{"LaunchPathSummaries":{"type":"list","member":{"type":"structure","members":{"Id":{},"ConstraintSummaries":{"shape":"S3o"},"Tags":{"shape":"S1a"},"Name":{}}}},"NextPageToken":{}}}},"ListPortfolioAccess":{"input":{"type":"structure","required":["PortfolioId"],"members":{"AcceptLanguage":{},"PortfolioId":{}}},"output":{"type":"structure","members":{"AccountIds":{"type":"list","member":{}},"NextPageToken":{}}}},"ListPortfolios":{"input":{"type":"structure","members":{"AcceptLanguage":{},"PageToken":{},"PageSize":{"type":"integer"}}},"output":{"type":"structure","members":{"PortfolioDetails":{"shape":"S4s"},"NextPageToken":{}}}},"ListPortfoliosForProduct":{"input":{"type":"structure","required":["ProductId"],"members":{"AcceptLanguage":{},"ProductId":{},"PageToken":{},"PageSize":{"type":"integer"}}},"output":{"type":"structure","members":{"PortfolioDetails":{"shape":"S4s"},"NextPageToken":{}}}},"ListPrincipalsForPortfolio":{"input":{"type":"structure","required":["PortfolioId"],"members":{"AcceptLanguage":{},"PortfolioId":{},"PageSize":{"type":"integer"},"PageToken":{}}},"output":{"type":"structure","members":{"Principals":{"type":"list","member":{"type":"structure","members":{"PrincipalARN":{},"PrincipalType":{}}}},"NextPageToken":{}}}},"ListProvisioningArtifacts":{"input":{"type":"structure","required":["ProductId"],"members":{"AcceptLanguage":{},"ProductId":{}}},"output":{"type":"structure","members":{"ProvisioningArtifactDetails":{"type":"list","member":{"shape":"S1x"}},"NextPageToken":{}}}},"ListRecordHistory":{"input":{"type":"structure","members":{"AcceptLanguage":{},"AccessLevelFilter":{"shape":"S5g"},"SearchFilter":{"type":"structure","members":{"Key":{},"Value":{}}},"PageSize":{"type":"integer"},"PageToken":{}}},"output":{"type":"structure","members":{"RecordDetails":{"type":"list","member":{"shape":"S41"}},"NextPageToken":{}}}},"ListResourcesForTagOption":{"input":{"type":"structure","required":["TagOptionId"],"members":{"TagOptionId":{},"ResourceType":{},"PageSize":{"type":"integer"},"PageToken":{}}},"output":{"type":"structure","members":{"ResourceDetails":{"type":"list","member":{"type":"structure","members":{"Id":{},"ARN":{},"Name":{},"Description":{},"CreatedTime":{"type":"timestamp"}}}},"PageToken":{}}}},"ListTagOptions":{"input":{"type":"structure","members":{"Filters":{"type":"structure","members":{"Key":{},"Value":{},"Active":{"type":"boolean"}}},"PageSize":{"type":"integer"},"PageToken":{}}},"output":{"type":"structure","members":{"TagOptionDetails":{"shape":"S2o"},"PageToken":{}}}},"ProvisionProduct":{"input":{"type":"structure","required":["ProductId","ProvisioningArtifactId","ProvisionedProductName","ProvisionToken"],"members":{"AcceptLanguage":{},"ProductId":{},"ProvisioningArtifactId":{},"PathId":{},"ProvisionedProductName":{},"ProvisioningParameters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}},"Tags":{"shape":"S1a"},"NotificationArns":{"type":"list","member":{}},"ProvisionToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"RecordDetail":{"shape":"S41"}}}},"RejectPortfolioShare":{"input":{"type":"structure","required":["PortfolioId"],"members":{"AcceptLanguage":{},"PortfolioId":{}}},"output":{"type":"structure","members":{}}},"ScanProvisionedProducts":{"input":{"type":"structure","members":{"AcceptLanguage":{},"AccessLevelFilter":{"shape":"S5g"},"PageSize":{"type":"integer"},"PageToken":{}}},"output":{"type":"structure","members":{"ProvisionedProducts":{"type":"list","member":{"shape":"S32"}},"NextPageToken":{}}}},"SearchProducts":{"input":{"type":"structure","members":{"AcceptLanguage":{},"Filters":{"shape":"S6e"},"PageSize":{"type":"integer"},"SortBy":{},"SortOrder":{},"PageToken":{}}},"output":{"type":"structure","members":{"ProductViewSummaries":{"type":"list","member":{"shape":"S1t"}},"ProductViewAggregations":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"Value":{},"ApproximateCount":{"type":"integer"}}}}},"NextPageToken":{}}}},"SearchProductsAsAdmin":{"input":{"type":"structure","members":{"AcceptLanguage":{},"PortfolioId":{},"Filters":{"shape":"S6e"},"SortBy":{},"SortOrder":{},"PageToken":{},"PageSize":{"type":"integer"},"ProductSource":{}}},"output":{"type":"structure","members":{"ProductViewDetails":{"type":"list","member":{"shape":"S1s"}},"NextPageToken":{}}}},"TerminateProvisionedProduct":{"input":{"type":"structure","required":["TerminateToken"],"members":{"ProvisionedProductName":{},"ProvisionedProductId":{},"TerminateToken":{"idempotencyToken":true},"IgnoreErrors":{"type":"boolean"},"AcceptLanguage":{}}},"output":{"type":"structure","members":{"RecordDetail":{"shape":"S41"}}}},"UpdateConstraint":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{},"Description":{}}},"output":{"type":"structure","members":{"ConstraintDetail":{"shape":"Sv"},"ConstraintParameters":{},"Status":{}}}},"UpdatePortfolio":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{},"DisplayName":{},"Description":{},"ProviderName":{},"AddTags":{"shape":"S12"},"RemoveTags":{"shape":"S72"}}},"output":{"type":"structure","members":{"PortfolioDetail":{"shape":"S17"},"Tags":{"shape":"S1a"}}}},"UpdateProduct":{"input":{"type":"structure","required":["Id"],"members":{"AcceptLanguage":{},"Id":{},"Name":{},"Owner":{},"Description":{},"Distributor":{},"SupportDescription":{},"SupportEmail":{},"SupportUrl":{},"AddTags":{"shape":"S12"},"RemoveTags":{"shape":"S72"}}},"output":{"type":"structure","members":{"ProductViewDetail":{"shape":"S1s"},"Tags":{"shape":"S1a"}}}},"UpdateProvisionedProduct":{"input":{"type":"structure","required":["UpdateToken"],"members":{"AcceptLanguage":{},"ProvisionedProductName":{},"ProvisionedProductId":{},"ProductId":{},"ProvisioningArtifactId":{},"PathId":{},"ProvisioningParameters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{},"UsePreviousValue":{"type":"boolean"}}}},"UpdateToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"RecordDetail":{"shape":"S41"}}}},"UpdateProvisioningArtifact":{"input":{"type":"structure","required":["ProductId","ProvisioningArtifactId"],"members":{"AcceptLanguage":{},"ProductId":{},"ProvisioningArtifactId":{},"Name":{},"Description":{}}},"output":{"type":"structure","members":{"ProvisioningArtifactDetail":{"shape":"S1x"},"Info":{"shape":"S1n"},"Status":{}}}},"UpdateTagOption":{"input":{"type":"structure","required":["Id"],"members":{"Id":{},"Value":{},"Active":{"type":"boolean"}}},"output":{"type":"structure","members":{"TagOptionDetail":{"shape":"S24"}}}}},"shapes":{"Sv":{"type":"structure","members":{"ConstraintId":{},"Type":{},"Description":{},"Owner":{}}},"S12":{"type":"list","member":{"shape":"S13"}},"S13":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}},"S17":{"type":"structure","members":{"Id":{},"ARN":{},"DisplayName":{},"Description":{},"CreatedTime":{"type":"timestamp"},"ProviderName":{}}},"S1a":{"type":"list","member":{"shape":"S13"}},"S1k":{"type":"structure","required":["Info"],"members":{"Name":{},"Description":{},"Info":{"shape":"S1n"},"Type":{}}},"S1n":{"type":"map","key":{},"value":{}},"S1s":{"type":"structure","members":{"ProductViewSummary":{"shape":"S1t"},"Status":{},"ProductARN":{},"CreatedTime":{"type":"timestamp"}}},"S1t":{"type":"structure","members":{"Id":{},"ProductId":{},"Name":{},"Owner":{},"ShortDescription":{},"Type":{},"Distributor":{},"HasDefaultPath":{"type":"boolean"},"SupportEmail":{},"SupportDescription":{},"SupportUrl":{}}},"S1x":{"type":"structure","members":{"Id":{},"Name":{},"Description":{},"Type":{},"CreatedTime":{"type":"timestamp"}}},"S24":{"type":"structure","members":{"Key":{},"Value":{},"Active":{"type":"boolean"},"Id":{}}},"S2o":{"type":"list","member":{"shape":"S24"}},"S2r":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{},"Description":{},"CreatedTime":{"type":"timestamp"}}}},"S32":{"type":"structure","members":{"Name":{},"Arn":{},"Type":{},"Id":{},"Status":{},"StatusMessage":{},"CreatedTime":{"type":"timestamp"},"IdempotencyToken":{},"LastRecordId":{}}},"S3o":{"type":"list","member":{"type":"structure","members":{"Type":{},"Description":{}}}},"S41":{"type":"structure","members":{"RecordId":{},"ProvisionedProductName":{},"Status":{},"CreatedTime":{"type":"timestamp"},"UpdatedTime":{"type":"timestamp"},"ProvisionedProductType":{},"RecordType":{},"ProvisionedProductId":{},"ProductId":{},"ProvisioningArtifactId":{},"PathId":{},"RecordErrors":{"type":"list","member":{"type":"structure","members":{"Code":{},"Description":{}}}},"RecordTags":{"type":"list","member":{"type":"structure","members":{"Key":{},"Value":{}}}}}},"S4s":{"type":"list","member":{"shape":"S17"}},"S5g":{"type":"structure","members":{"Key":{},"Value":{}}},"S6e":{"type":"map","key":{},"value":{"type":"list","member":{}}},"S72":{"type":"list","member":{}}}}

/***/ }),
/* 337 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListAcceptedPortfolioShares":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"},"ListConstraintsForPortfolio":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"},"ListLaunchPaths":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"},"ListPortfolios":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"},"ListPortfoliosForProduct":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"},"ListPrincipalsForPortfolio":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"},"ListResourcesForTagOption":{"input_token":"PageToken","output_token":"PageToken","limit_key":"PageSize"},"ListTagOptions":{"input_token":"PageToken","output_token":"PageToken","limit_key":"PageSize"},"SearchProducts":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"},"SearchProductsAsAdmin":{"input_token":"PageToken","output_token":"NextPageToken","limit_key":"PageSize"}}}

/***/ }),
/* 338 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-06-02","endpointPrefix":"shield","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"AWS Shield","serviceFullName":"AWS Shield","signatureVersion":"v4","targetPrefix":"AWSShield_20160616","uid":"shield-2016-06-02"},"operations":{"CreateProtection":{"input":{"type":"structure","required":["Name","ResourceArn"],"members":{"Name":{},"ResourceArn":{}}},"output":{"type":"structure","members":{"ProtectionId":{}}}},"CreateSubscription":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"DeleteProtection":{"input":{"type":"structure","required":["ProtectionId"],"members":{"ProtectionId":{}}},"output":{"type":"structure","members":{}}},"DeleteSubscription":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"DescribeAttack":{"input":{"type":"structure","required":["AttackId"],"members":{"AttackId":{}}},"output":{"type":"structure","members":{"Attack":{"type":"structure","members":{"AttackId":{},"ResourceArn":{},"SubResources":{"type":"list","member":{"type":"structure","members":{"Type":{},"Id":{},"AttackVectors":{"type":"list","member":{"type":"structure","required":["VectorType"],"members":{"VectorType":{},"VectorCounters":{"shape":"Sm"}}}},"Counters":{"shape":"Sm"}}}},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"AttackCounters":{"shape":"Sm"},"Mitigations":{"type":"list","member":{"type":"structure","members":{"MitigationName":{}}}}}}}}},"DescribeProtection":{"input":{"type":"structure","required":["ProtectionId"],"members":{"ProtectionId":{}}},"output":{"type":"structure","members":{"Protection":{"shape":"Sv"}}}},"DescribeSubscription":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"Subscription":{"type":"structure","members":{"StartTime":{"type":"timestamp"},"TimeCommitmentInSeconds":{"type":"long"}}}}}},"ListAttacks":{"input":{"type":"structure","members":{"ResourceArns":{"type":"list","member":{}},"StartTime":{"shape":"S13"},"EndTime":{"shape":"S13"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"AttackSummaries":{"type":"list","member":{"type":"structure","members":{"AttackId":{},"ResourceArn":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"AttackVectors":{"type":"list","member":{"type":"structure","required":["VectorType"],"members":{"VectorType":{}}}}}}},"NextToken":{}}}},"ListProtections":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Protections":{"type":"list","member":{"shape":"Sv"}},"NextToken":{}}}}},"shapes":{"Sm":{"type":"list","member":{"type":"structure","members":{"Name":{},"Max":{"type":"double"},"Average":{"type":"double"},"Sum":{"type":"double"},"N":{"type":"integer"},"Unit":{}}}},"Sv":{"type":"structure","members":{"Id":{},"Name":{},"ResourceArn":{}}},"S13":{"type":"structure","members":{"FromInclusive":{"type":"timestamp"},"ToExclusive":{"type":"timestamp"}}}}}

/***/ }),
/* 339 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"sms-2016-10-24","apiVersion":"2016-10-24","endpointPrefix":"sms","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"SMS","serviceFullName":"AWS Server Migration Service","signatureVersion":"v4","targetPrefix":"AWSServerMigrationService_V2016_10_24"},"operations":{"CreateReplicationJob":{"input":{"type":"structure","required":["serverId","seedReplicationTime","frequency"],"members":{"serverId":{},"seedReplicationTime":{"type":"timestamp"},"frequency":{"type":"integer"},"licenseType":{},"roleName":{},"description":{}}},"output":{"type":"structure","members":{"replicationJobId":{}}}},"DeleteReplicationJob":{"input":{"type":"structure","required":["replicationJobId"],"members":{"replicationJobId":{}}},"output":{"type":"structure","members":{}}},"DeleteServerCatalog":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"DisassociateConnector":{"input":{"type":"structure","required":["connectorId"],"members":{"connectorId":{}}},"output":{"type":"structure","members":{}}},"GetConnectors":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"connectorList":{"type":"list","member":{"locationName":"item","type":"structure","members":{"connectorId":{},"version":{},"status":{},"capabilityList":{"type":"list","member":{"locationName":"item"}},"vmManagerName":{},"vmManagerType":{},"vmManagerId":{},"ipAddress":{},"macAddress":{},"associatedOn":{"type":"timestamp"}}}},"nextToken":{}}}},"GetReplicationJobs":{"input":{"type":"structure","members":{"replicationJobId":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"replicationJobList":{"type":"list","member":{"shape":"Sz","locationName":"item"}},"nextToken":{}}}},"GetReplicationRuns":{"input":{"type":"structure","required":["replicationJobId"],"members":{"replicationJobId":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"replicationJob":{"shape":"Sz"},"replicationRunList":{"shape":"S19"},"nextToken":{}}}},"GetServers":{"input":{"type":"structure","members":{"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"lastModifiedOn":{"type":"timestamp"},"serverCatalogStatus":{},"serverList":{"type":"list","member":{"locationName":"item","type":"structure","members":{"serverId":{},"serverType":{},"vmServer":{"shape":"S11"},"replicationJobId":{},"replicationJobTerminated":{"type":"boolean"}}}},"nextToken":{}}}},"ImportServerCatalog":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{}}},"StartOnDemandReplicationRun":{"input":{"type":"structure","required":["replicationJobId"],"members":{"replicationJobId":{},"description":{}}},"output":{"type":"structure","members":{"replicationRunId":{}}}},"UpdateReplicationJob":{"input":{"type":"structure","required":["replicationJobId"],"members":{"replicationJobId":{},"frequency":{"type":"integer"},"nextReplicationRunStartTime":{"type":"timestamp"},"licenseType":{},"roleName":{},"description":{}}},"output":{"type":"structure","members":{}}}},"shapes":{"Sz":{"type":"structure","members":{"replicationJobId":{},"serverId":{},"serverType":{},"vmServer":{"shape":"S11"},"seedReplicationTime":{"type":"timestamp"},"frequency":{"type":"integer"},"nextReplicationRunStartTime":{"type":"timestamp"},"licenseType":{},"roleName":{},"latestAmiId":{},"state":{},"statusMessage":{},"description":{},"replicationRunList":{"shape":"S19"}}},"S11":{"type":"structure","members":{"vmServerAddress":{"type":"structure","members":{"vmManagerId":{},"vmId":{}}},"vmName":{},"vmManagerName":{},"vmManagerType":{},"vmPath":{}}},"S19":{"type":"list","member":{"locationName":"item","type":"structure","members":{"replicationRunId":{},"state":{},"type":{},"statusMessage":{},"amiId":{},"scheduledStartTime":{"type":"timestamp"},"completedTime":{"type":"timestamp"},"description":{}}}}}}

/***/ }),
/* 340 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetReplicationJobs":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"replicationJobList"},"GetReplicationRuns":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"replicationRunList"},"GetConnectors":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"connectorList"},"GetServers":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"serverList"}}}

/***/ }),
/* 341 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-06-30","endpointPrefix":"snowball","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon Snowball","serviceFullName":"Amazon Import/Export Snowball","signatureVersion":"v4","targetPrefix":"AWSIESnowballJobManagementService","uid":"snowball-2016-06-30"},"operations":{"CancelCluster":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{}}},"output":{"type":"structure","members":{}}},"CancelJob":{"input":{"type":"structure","required":["JobId"],"members":{"JobId":{}}},"output":{"type":"structure","members":{}}},"CreateAddress":{"input":{"type":"structure","required":["Address"],"members":{"Address":{"shape":"S8"}}},"output":{"type":"structure","members":{"AddressId":{}}}},"CreateCluster":{"input":{"type":"structure","required":["JobType","Resources","AddressId","RoleARN","ShippingOption"],"members":{"JobType":{},"Resources":{"shape":"Sf"},"Description":{},"AddressId":{},"KmsKeyARN":{},"RoleARN":{},"SnowballType":{},"ShippingOption":{},"Notification":{"shape":"Ss"},"ForwardingAddressId":{}}},"output":{"type":"structure","members":{"ClusterId":{}}}},"CreateJob":{"input":{"type":"structure","members":{"JobType":{},"Resources":{"shape":"Sf"},"Description":{},"AddressId":{},"KmsKeyARN":{},"RoleARN":{},"SnowballCapacityPreference":{},"ShippingOption":{},"Notification":{"shape":"Ss"},"ClusterId":{},"SnowballType":{},"ForwardingAddressId":{}}},"output":{"type":"structure","members":{"JobId":{}}}},"DescribeAddress":{"input":{"type":"structure","required":["AddressId"],"members":{"AddressId":{}}},"output":{"type":"structure","members":{"Address":{"shape":"S8"}}}},"DescribeAddresses":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Addresses":{"type":"list","member":{"shape":"S8"}},"NextToken":{}}}},"DescribeCluster":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{}}},"output":{"type":"structure","members":{"ClusterMetadata":{"type":"structure","members":{"ClusterId":{},"Description":{},"KmsKeyARN":{},"RoleARN":{},"ClusterState":{},"JobType":{},"SnowballType":{},"CreationDate":{"type":"timestamp"},"Resources":{"shape":"Sf"},"AddressId":{},"ShippingOption":{},"Notification":{"shape":"Ss"},"ForwardingAddressId":{}}}}}},"DescribeJob":{"input":{"type":"structure","required":["JobId"],"members":{"JobId":{}}},"output":{"type":"structure","members":{"JobMetadata":{"shape":"S1d"},"SubJobMetadata":{"type":"list","member":{"shape":"S1d"}}}}},"GetJobManifest":{"input":{"type":"structure","required":["JobId"],"members":{"JobId":{}}},"output":{"type":"structure","members":{"ManifestURI":{}}}},"GetJobUnlockCode":{"input":{"type":"structure","required":["JobId"],"members":{"JobId":{}}},"output":{"type":"structure","members":{"UnlockCode":{}}}},"GetSnowballUsage":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"SnowballLimit":{"type":"integer"},"SnowballsInUse":{"type":"integer"}}}},"ListClusterJobs":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"JobListEntries":{"shape":"S1t"},"NextToken":{}}}},"ListClusters":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ClusterListEntries":{"type":"list","member":{"type":"structure","members":{"ClusterId":{},"ClusterState":{},"CreationDate":{"type":"timestamp"},"Description":{}}}},"NextToken":{}}}},"ListJobs":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"JobListEntries":{"shape":"S1t"},"NextToken":{}}}},"UpdateCluster":{"input":{"type":"structure","required":["ClusterId"],"members":{"ClusterId":{},"RoleARN":{},"Description":{},"Resources":{"shape":"Sf"},"AddressId":{},"ShippingOption":{},"Notification":{"shape":"Ss"},"ForwardingAddressId":{}}},"output":{"type":"structure","members":{}}},"UpdateJob":{"input":{"type":"structure","required":["JobId"],"members":{"JobId":{},"RoleARN":{},"Notification":{"shape":"Ss"},"Resources":{"shape":"Sf"},"AddressId":{},"ShippingOption":{},"Description":{},"SnowballCapacityPreference":{},"ForwardingAddressId":{}}},"output":{"type":"structure","members":{}}}},"shapes":{"S8":{"type":"structure","members":{"AddressId":{},"Name":{},"Company":{},"Street1":{},"Street2":{},"Street3":{},"City":{},"StateOrProvince":{},"PrefectureOrDistrict":{},"Landmark":{},"Country":{},"PostalCode":{},"PhoneNumber":{},"IsRestricted":{"type":"boolean"}}},"Sf":{"type":"structure","members":{"S3Resources":{"type":"list","member":{"type":"structure","members":{"BucketArn":{},"KeyRange":{"type":"structure","members":{"BeginMarker":{},"EndMarker":{}}}}}},"LambdaResources":{"type":"list","member":{"type":"structure","members":{"LambdaArn":{},"EventTriggers":{"type":"list","member":{"type":"structure","members":{"EventResourceARN":{}}}}}}}}},"Ss":{"type":"structure","members":{"SnsTopicARN":{},"JobStatesToNotify":{"type":"list","member":{}},"NotifyAll":{"type":"boolean"}}},"S1d":{"type":"structure","members":{"JobId":{},"JobState":{},"JobType":{},"SnowballType":{},"CreationDate":{"type":"timestamp"},"Resources":{"shape":"Sf"},"Description":{},"KmsKeyARN":{},"RoleARN":{},"AddressId":{},"ShippingDetails":{"type":"structure","members":{"ShippingOption":{},"InboundShipment":{"shape":"S1f"},"OutboundShipment":{"shape":"S1f"}}},"SnowballCapacityPreference":{},"Notification":{"shape":"Ss"},"DataTransferProgress":{"type":"structure","members":{"BytesTransferred":{"type":"long"},"ObjectsTransferred":{"type":"long"},"TotalBytes":{"type":"long"},"TotalObjects":{"type":"long"}}},"JobLogInfo":{"type":"structure","members":{"JobCompletionReportURI":{},"JobSuccessLogURI":{},"JobFailureLogURI":{}}},"ClusterId":{},"ForwardingAddressId":{}}},"S1f":{"type":"structure","members":{"Status":{},"TrackingNumber":{}}},"S1t":{"type":"list","member":{"type":"structure","members":{"JobId":{},"JobState":{},"IsMaster":{"type":"boolean"},"JobType":{},"SnowballType":{},"CreationDate":{"type":"timestamp"},"Description":{}}}}}}

/***/ }),
/* 342 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeAddresses":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Addresses"},"ListJobs":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"JobListEntries"}}}

/***/ }),
/* 343 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"sns-2010-03-31","apiVersion":"2010-03-31","endpointPrefix":"sns","protocol":"query","serviceAbbreviation":"Amazon SNS","serviceFullName":"Amazon Simple Notification Service","signatureVersion":"v4","xmlNamespace":"http://sns.amazonaws.com/doc/2010-03-31/"},"operations":{"AddPermission":{"input":{"type":"structure","required":["TopicArn","Label","AWSAccountId","ActionName"],"members":{"TopicArn":{},"Label":{},"AWSAccountId":{"type":"list","member":{}},"ActionName":{"type":"list","member":{}}}}},"CheckIfPhoneNumberIsOptedOut":{"input":{"type":"structure","required":["phoneNumber"],"members":{"phoneNumber":{}}},"output":{"resultWrapper":"CheckIfPhoneNumberIsOptedOutResult","type":"structure","members":{"isOptedOut":{"type":"boolean"}}}},"ConfirmSubscription":{"input":{"type":"structure","required":["TopicArn","Token"],"members":{"TopicArn":{},"Token":{},"AuthenticateOnUnsubscribe":{}}},"output":{"resultWrapper":"ConfirmSubscriptionResult","type":"structure","members":{"SubscriptionArn":{}}}},"CreatePlatformApplication":{"input":{"type":"structure","required":["Name","Platform","Attributes"],"members":{"Name":{},"Platform":{},"Attributes":{"shape":"Sj"}}},"output":{"resultWrapper":"CreatePlatformApplicationResult","type":"structure","members":{"PlatformApplicationArn":{}}}},"CreatePlatformEndpoint":{"input":{"type":"structure","required":["PlatformApplicationArn","Token"],"members":{"PlatformApplicationArn":{},"Token":{},"CustomUserData":{},"Attributes":{"shape":"Sj"}}},"output":{"resultWrapper":"CreatePlatformEndpointResult","type":"structure","members":{"EndpointArn":{}}}},"CreateTopic":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"resultWrapper":"CreateTopicResult","type":"structure","members":{"TopicArn":{}}}},"DeleteEndpoint":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}}},"DeletePlatformApplication":{"input":{"type":"structure","required":["PlatformApplicationArn"],"members":{"PlatformApplicationArn":{}}}},"DeleteTopic":{"input":{"type":"structure","required":["TopicArn"],"members":{"TopicArn":{}}}},"GetEndpointAttributes":{"input":{"type":"structure","required":["EndpointArn"],"members":{"EndpointArn":{}}},"output":{"resultWrapper":"GetEndpointAttributesResult","type":"structure","members":{"Attributes":{"shape":"Sj"}}}},"GetPlatformApplicationAttributes":{"input":{"type":"structure","required":["PlatformApplicationArn"],"members":{"PlatformApplicationArn":{}}},"output":{"resultWrapper":"GetPlatformApplicationAttributesResult","type":"structure","members":{"Attributes":{"shape":"Sj"}}}},"GetSMSAttributes":{"input":{"type":"structure","members":{"attributes":{"type":"list","member":{}}}},"output":{"resultWrapper":"GetSMSAttributesResult","type":"structure","members":{"attributes":{"shape":"Sj"}}}},"GetSubscriptionAttributes":{"input":{"type":"structure","required":["SubscriptionArn"],"members":{"SubscriptionArn":{}}},"output":{"resultWrapper":"GetSubscriptionAttributesResult","type":"structure","members":{"Attributes":{"type":"map","key":{},"value":{}}}}},"GetTopicAttributes":{"input":{"type":"structure","required":["TopicArn"],"members":{"TopicArn":{}}},"output":{"resultWrapper":"GetTopicAttributesResult","type":"structure","members":{"Attributes":{"type":"map","key":{},"value":{}}}}},"ListEndpointsByPlatformApplication":{"input":{"type":"structure","required":["PlatformApplicationArn"],"members":{"PlatformApplicationArn":{},"NextToken":{}}},"output":{"resultWrapper":"ListEndpointsByPlatformApplicationResult","type":"structure","members":{"Endpoints":{"type":"list","member":{"type":"structure","members":{"EndpointArn":{},"Attributes":{"shape":"Sj"}}}},"NextToken":{}}}},"ListPhoneNumbersOptedOut":{"input":{"type":"structure","members":{"nextToken":{}}},"output":{"resultWrapper":"ListPhoneNumbersOptedOutResult","type":"structure","members":{"phoneNumbers":{"type":"list","member":{}},"nextToken":{}}}},"ListPlatformApplications":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListPlatformApplicationsResult","type":"structure","members":{"PlatformApplications":{"type":"list","member":{"type":"structure","members":{"PlatformApplicationArn":{},"Attributes":{"shape":"Sj"}}}},"NextToken":{}}}},"ListSubscriptions":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListSubscriptionsResult","type":"structure","members":{"Subscriptions":{"shape":"S1n"},"NextToken":{}}}},"ListSubscriptionsByTopic":{"input":{"type":"structure","required":["TopicArn"],"members":{"TopicArn":{},"NextToken":{}}},"output":{"resultWrapper":"ListSubscriptionsByTopicResult","type":"structure","members":{"Subscriptions":{"shape":"S1n"},"NextToken":{}}}},"ListTopics":{"input":{"type":"structure","members":{"NextToken":{}}},"output":{"resultWrapper":"ListTopicsResult","type":"structure","members":{"Topics":{"type":"list","member":{"type":"structure","members":{"TopicArn":{}}}},"NextToken":{}}}},"OptInPhoneNumber":{"input":{"type":"structure","required":["phoneNumber"],"members":{"phoneNumber":{}}},"output":{"resultWrapper":"OptInPhoneNumberResult","type":"structure","members":{}}},"Publish":{"input":{"type":"structure","required":["Message"],"members":{"TopicArn":{},"TargetArn":{},"PhoneNumber":{},"Message":{},"Subject":{},"MessageStructure":{},"MessageAttributes":{"type":"map","key":{"locationName":"Name"},"value":{"locationName":"Value","type":"structure","required":["DataType"],"members":{"DataType":{},"StringValue":{},"BinaryValue":{"type":"blob"}}}}}},"output":{"resultWrapper":"PublishResult","type":"structure","members":{"MessageId":{}}}},"RemovePermission":{"input":{"type":"structure","required":["TopicArn","Label"],"members":{"TopicArn":{},"Label":{}}}},"SetEndpointAttributes":{"input":{"type":"structure","required":["EndpointArn","Attributes"],"members":{"EndpointArn":{},"Attributes":{"shape":"Sj"}}}},"SetPlatformApplicationAttributes":{"input":{"type":"structure","required":["PlatformApplicationArn","Attributes"],"members":{"PlatformApplicationArn":{},"Attributes":{"shape":"Sj"}}}},"SetSMSAttributes":{"input":{"type":"structure","required":["attributes"],"members":{"attributes":{"shape":"Sj"}}},"output":{"resultWrapper":"SetSMSAttributesResult","type":"structure","members":{}}},"SetSubscriptionAttributes":{"input":{"type":"structure","required":["SubscriptionArn","AttributeName"],"members":{"SubscriptionArn":{},"AttributeName":{},"AttributeValue":{}}}},"SetTopicAttributes":{"input":{"type":"structure","required":["TopicArn","AttributeName"],"members":{"TopicArn":{},"AttributeName":{},"AttributeValue":{}}}},"Subscribe":{"input":{"type":"structure","required":["TopicArn","Protocol"],"members":{"TopicArn":{},"Protocol":{},"Endpoint":{}}},"output":{"resultWrapper":"SubscribeResult","type":"structure","members":{"SubscriptionArn":{}}}},"Unsubscribe":{"input":{"type":"structure","required":["SubscriptionArn"],"members":{"SubscriptionArn":{}}}}},"shapes":{"Sj":{"type":"map","key":{},"value":{}},"S1n":{"type":"list","member":{"type":"structure","members":{"SubscriptionArn":{},"Owner":{},"Protocol":{},"Endpoint":{},"TopicArn":{}}}}}}

/***/ }),
/* 344 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListEndpointsByPlatformApplication":{"input_token":"NextToken","output_token":"NextToken","result_key":"Endpoints"},"ListPlatformApplications":{"input_token":"NextToken","output_token":"NextToken","result_key":"PlatformApplications"},"ListSubscriptions":{"input_token":"NextToken","output_token":"NextToken","result_key":"Subscriptions"},"ListSubscriptionsByTopic":{"input_token":"NextToken","output_token":"NextToken","result_key":"Subscriptions"},"ListTopics":{"input_token":"NextToken","output_token":"NextToken","result_key":"Topics"}}}

/***/ }),
/* 345 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-11-05","endpointPrefix":"sqs","protocol":"query","serviceAbbreviation":"Amazon SQS","serviceFullName":"Amazon Simple Queue Service","signatureVersion":"v4","uid":"sqs-2012-11-05","xmlNamespace":"http://queue.amazonaws.com/doc/2012-11-05/"},"operations":{"AddPermission":{"input":{"type":"structure","required":["QueueUrl","Label","AWSAccountIds","Actions"],"members":{"QueueUrl":{},"Label":{},"AWSAccountIds":{"type":"list","member":{"locationName":"AWSAccountId"},"flattened":true},"Actions":{"type":"list","member":{"locationName":"ActionName"},"flattened":true}}}},"ChangeMessageVisibility":{"input":{"type":"structure","required":["QueueUrl","ReceiptHandle","VisibilityTimeout"],"members":{"QueueUrl":{},"ReceiptHandle":{},"VisibilityTimeout":{"type":"integer"}}}},"ChangeMessageVisibilityBatch":{"input":{"type":"structure","required":["QueueUrl","Entries"],"members":{"QueueUrl":{},"Entries":{"type":"list","member":{"locationName":"ChangeMessageVisibilityBatchRequestEntry","type":"structure","required":["Id","ReceiptHandle"],"members":{"Id":{},"ReceiptHandle":{},"VisibilityTimeout":{"type":"integer"}}},"flattened":true}}},"output":{"resultWrapper":"ChangeMessageVisibilityBatchResult","type":"structure","required":["Successful","Failed"],"members":{"Successful":{"type":"list","member":{"locationName":"ChangeMessageVisibilityBatchResultEntry","type":"structure","required":["Id"],"members":{"Id":{}}},"flattened":true},"Failed":{"shape":"Sd"}}}},"CreateQueue":{"input":{"type":"structure","required":["QueueName"],"members":{"QueueName":{},"Attributes":{"shape":"Sh","locationName":"Attribute"}}},"output":{"resultWrapper":"CreateQueueResult","type":"structure","members":{"QueueUrl":{}}}},"DeleteMessage":{"input":{"type":"structure","required":["QueueUrl","ReceiptHandle"],"members":{"QueueUrl":{},"ReceiptHandle":{}}}},"DeleteMessageBatch":{"input":{"type":"structure","required":["QueueUrl","Entries"],"members":{"QueueUrl":{},"Entries":{"type":"list","member":{"locationName":"DeleteMessageBatchRequestEntry","type":"structure","required":["Id","ReceiptHandle"],"members":{"Id":{},"ReceiptHandle":{}}},"flattened":true}}},"output":{"resultWrapper":"DeleteMessageBatchResult","type":"structure","required":["Successful","Failed"],"members":{"Successful":{"type":"list","member":{"locationName":"DeleteMessageBatchResultEntry","type":"structure","required":["Id"],"members":{"Id":{}}},"flattened":true},"Failed":{"shape":"Sd"}}}},"DeleteQueue":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{}}}},"GetQueueAttributes":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{},"AttributeNames":{"shape":"St"}}},"output":{"resultWrapper":"GetQueueAttributesResult","type":"structure","members":{"Attributes":{"shape":"Sh","locationName":"Attribute"}}}},"GetQueueUrl":{"input":{"type":"structure","required":["QueueName"],"members":{"QueueName":{},"QueueOwnerAWSAccountId":{}}},"output":{"resultWrapper":"GetQueueUrlResult","type":"structure","members":{"QueueUrl":{}}}},"ListDeadLetterSourceQueues":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{}}},"output":{"resultWrapper":"ListDeadLetterSourceQueuesResult","type":"structure","required":["queueUrls"],"members":{"queueUrls":{"shape":"Sz"}}}},"ListQueueTags":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{}}},"output":{"resultWrapper":"ListQueueTagsResult","type":"structure","members":{"Tags":{"shape":"S12","locationName":"Tag"}}}},"ListQueues":{"input":{"type":"structure","members":{"QueueNamePrefix":{}}},"output":{"resultWrapper":"ListQueuesResult","type":"structure","members":{"QueueUrls":{"shape":"Sz"}}}},"PurgeQueue":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{}}}},"ReceiveMessage":{"input":{"type":"structure","required":["QueueUrl"],"members":{"QueueUrl":{},"AttributeNames":{"shape":"St"},"MessageAttributeNames":{"type":"list","member":{"locationName":"MessageAttributeName"},"flattened":true},"MaxNumberOfMessages":{"type":"integer"},"VisibilityTimeout":{"type":"integer"},"WaitTimeSeconds":{"type":"integer"},"ReceiveRequestAttemptId":{}}},"output":{"resultWrapper":"ReceiveMessageResult","type":"structure","members":{"Messages":{"type":"list","member":{"locationName":"Message","type":"structure","members":{"MessageId":{},"ReceiptHandle":{},"MD5OfBody":{},"Body":{},"Attributes":{"locationName":"Attribute","type":"map","key":{"locationName":"Name"},"value":{"locationName":"Value"},"flattened":true},"MD5OfMessageAttributes":{},"MessageAttributes":{"shape":"S1g","locationName":"MessageAttribute"}}},"flattened":true}}}},"RemovePermission":{"input":{"type":"structure","required":["QueueUrl","Label"],"members":{"QueueUrl":{},"Label":{}}}},"SendMessage":{"input":{"type":"structure","required":["QueueUrl","MessageBody"],"members":{"QueueUrl":{},"MessageBody":{},"DelaySeconds":{"type":"integer"},"MessageAttributes":{"shape":"S1g","locationName":"MessageAttribute"},"MessageDeduplicationId":{},"MessageGroupId":{}}},"output":{"resultWrapper":"SendMessageResult","type":"structure","members":{"MD5OfMessageBody":{},"MD5OfMessageAttributes":{},"MessageId":{},"SequenceNumber":{}}}},"SendMessageBatch":{"input":{"type":"structure","required":["QueueUrl","Entries"],"members":{"QueueUrl":{},"Entries":{"type":"list","member":{"locationName":"SendMessageBatchRequestEntry","type":"structure","required":["Id","MessageBody"],"members":{"Id":{},"MessageBody":{},"DelaySeconds":{"type":"integer"},"MessageAttributes":{"shape":"S1g","locationName":"MessageAttribute"},"MessageDeduplicationId":{},"MessageGroupId":{}}},"flattened":true}}},"output":{"resultWrapper":"SendMessageBatchResult","type":"structure","required":["Successful","Failed"],"members":{"Successful":{"type":"list","member":{"locationName":"SendMessageBatchResultEntry","type":"structure","required":["Id","MessageId","MD5OfMessageBody"],"members":{"Id":{},"MessageId":{},"MD5OfMessageBody":{},"MD5OfMessageAttributes":{},"SequenceNumber":{}}},"flattened":true},"Failed":{"shape":"Sd"}}}},"SetQueueAttributes":{"input":{"type":"structure","required":["QueueUrl","Attributes"],"members":{"QueueUrl":{},"Attributes":{"shape":"Sh","locationName":"Attribute"}}}},"TagQueue":{"input":{"type":"structure","required":["QueueUrl","Tags"],"members":{"QueueUrl":{},"Tags":{"shape":"S12"}}}},"UntagQueue":{"input":{"type":"structure","required":["QueueUrl","TagKeys"],"members":{"QueueUrl":{},"TagKeys":{"type":"list","member":{"locationName":"TagKey"},"flattened":true}}}}},"shapes":{"Sd":{"type":"list","member":{"locationName":"BatchResultErrorEntry","type":"structure","required":["Id","SenderFault","Code"],"members":{"Id":{},"SenderFault":{"type":"boolean"},"Code":{},"Message":{}}},"flattened":true},"Sh":{"type":"map","key":{"locationName":"Name"},"value":{"locationName":"Value"},"flattened":true,"locationName":"Attribute"},"St":{"type":"list","member":{"locationName":"AttributeName"},"flattened":true},"Sz":{"type":"list","member":{"locationName":"QueueUrl"},"flattened":true},"S12":{"type":"map","key":{"locationName":"Key"},"value":{"locationName":"Value"},"flattened":true,"locationName":"Tag"},"S1g":{"type":"map","key":{"locationName":"Name"},"value":{"locationName":"Value","type":"structure","required":["DataType"],"members":{"StringValue":{},"BinaryValue":{"type":"blob"},"StringListValues":{"flattened":true,"locationName":"StringListValue","type":"list","member":{"locationName":"StringListValue"}},"BinaryListValues":{"flattened":true,"locationName":"BinaryListValue","type":"list","member":{"locationName":"BinaryListValue","type":"blob"}},"DataType":{}}},"flattened":true}}}

/***/ }),
/* 346 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"ListQueues":{"result_key":"QueueUrls"}}}

/***/ }),
/* 347 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2014-11-06","endpointPrefix":"ssm","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"Amazon SSM","serviceFullName":"Amazon Simple Systems Manager (SSM)","signatureVersion":"v4","targetPrefix":"AmazonSSM","uid":"ssm-2014-11-06"},"operations":{"AddTagsToResource":{"input":{"type":"structure","required":["ResourceType","ResourceId","Tags"],"members":{"ResourceType":{},"ResourceId":{},"Tags":{"shape":"S4"}}},"output":{"type":"structure","members":{}}},"CancelCommand":{"input":{"type":"structure","required":["CommandId"],"members":{"CommandId":{},"InstanceIds":{"shape":"Sb"}}},"output":{"type":"structure","members":{}}},"CreateActivation":{"input":{"type":"structure","required":["IamRole"],"members":{"Description":{},"DefaultInstanceName":{},"IamRole":{},"RegistrationLimit":{"type":"integer"},"ExpirationDate":{"type":"timestamp"}}},"output":{"type":"structure","members":{"ActivationId":{},"ActivationCode":{}}}},"CreateAssociation":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"DocumentVersion":{},"InstanceId":{},"Parameters":{"shape":"Sq"},"Targets":{"shape":"Su"},"ScheduleExpression":{},"OutputLocation":{"shape":"S10"},"AssociationName":{}}},"output":{"type":"structure","members":{"AssociationDescription":{"shape":"S17"}}}},"CreateAssociationBatch":{"input":{"type":"structure","required":["Entries"],"members":{"Entries":{"type":"list","member":{"shape":"S1l","locationName":"entries"}}}},"output":{"type":"structure","members":{"Successful":{"type":"list","member":{"shape":"S17","locationName":"AssociationDescription"}},"Failed":{"type":"list","member":{"locationName":"FailedCreateAssociationEntry","type":"structure","members":{"Entry":{"shape":"S1l"},"Message":{},"Fault":{}}}}}}},"CreateDocument":{"input":{"type":"structure","required":["Content","Name"],"members":{"Content":{},"Name":{},"DocumentType":{}}},"output":{"type":"structure","members":{"DocumentDescription":{"shape":"S1w"}}}},"CreateMaintenanceWindow":{"input":{"type":"structure","required":["Name","Schedule","Duration","Cutoff","AllowUnassociatedTargets"],"members":{"Name":{},"Description":{"shape":"S2f"},"Schedule":{},"Duration":{"type":"integer"},"Cutoff":{"type":"integer"},"AllowUnassociatedTargets":{"type":"boolean"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"WindowId":{}}}},"CreatePatchBaseline":{"input":{"type":"structure","required":["Name"],"members":{"OperatingSystem":{},"Name":{},"GlobalFilters":{"shape":"S2q"},"ApprovalRules":{"shape":"S2w"},"ApprovedPatches":{"shape":"S31"},"ApprovedPatchesComplianceLevel":{},"RejectedPatches":{"shape":"S31"},"Description":{},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"BaselineId":{}}}},"CreateResourceDataSync":{"input":{"type":"structure","required":["SyncName","S3Destination"],"members":{"SyncName":{},"S3Destination":{"shape":"S38"}}},"output":{"type":"structure","members":{}}},"DeleteActivation":{"input":{"type":"structure","required":["ActivationId"],"members":{"ActivationId":{}}},"output":{"type":"structure","members":{}}},"DeleteAssociation":{"input":{"type":"structure","members":{"Name":{},"InstanceId":{},"AssociationId":{}}},"output":{"type":"structure","members":{}}},"DeleteDocument":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteMaintenanceWindow":{"input":{"type":"structure","required":["WindowId"],"members":{"WindowId":{}}},"output":{"type":"structure","members":{"WindowId":{}}}},"DeleteParameter":{"input":{"type":"structure","required":["Name"],"members":{"Name":{}}},"output":{"type":"structure","members":{}}},"DeleteParameters":{"input":{"type":"structure","required":["Names"],"members":{"Names":{"shape":"S3r"}}},"output":{"type":"structure","members":{"DeletedParameters":{"shape":"S3r"},"InvalidParameters":{"shape":"S3r"}}}},"DeletePatchBaseline":{"input":{"type":"structure","required":["BaselineId"],"members":{"BaselineId":{}}},"output":{"type":"structure","members":{"BaselineId":{}}}},"DeleteResourceDataSync":{"input":{"type":"structure","required":["SyncName"],"members":{"SyncName":{}}},"output":{"type":"structure","members":{}}},"DeregisterManagedInstance":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{}}},"output":{"type":"structure","members":{}}},"DeregisterPatchBaselineForPatchGroup":{"input":{"type":"structure","required":["BaselineId","PatchGroup"],"members":{"BaselineId":{},"PatchGroup":{}}},"output":{"type":"structure","members":{"BaselineId":{},"PatchGroup":{}}}},"DeregisterTargetFromMaintenanceWindow":{"input":{"type":"structure","required":["WindowId","WindowTargetId"],"members":{"WindowId":{},"WindowTargetId":{},"Safe":{"type":"boolean"}}},"output":{"type":"structure","members":{"WindowId":{},"WindowTargetId":{}}}},"DeregisterTaskFromMaintenanceWindow":{"input":{"type":"structure","required":["WindowId","WindowTaskId"],"members":{"WindowId":{},"WindowTaskId":{}}},"output":{"type":"structure","members":{"WindowId":{},"WindowTaskId":{}}}},"DescribeActivations":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","members":{"FilterKey":{},"FilterValues":{"type":"list","member":{}}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"ActivationList":{"type":"list","member":{"type":"structure","members":{"ActivationId":{},"Description":{},"DefaultInstanceName":{},"IamRole":{},"RegistrationLimit":{"type":"integer"},"RegistrationsCount":{"type":"integer"},"ExpirationDate":{"type":"timestamp"},"Expired":{"type":"boolean"},"CreatedDate":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeAssociation":{"input":{"type":"structure","members":{"Name":{},"InstanceId":{},"AssociationId":{},"AssociationVersion":{}}},"output":{"type":"structure","members":{"AssociationDescription":{"shape":"S17"}}}},"DescribeAutomationExecutions":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","required":["Key","Values"],"members":{"Key":{},"Values":{"type":"list","member":{}}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AutomationExecutionMetadataList":{"type":"list","member":{"type":"structure","members":{"AutomationExecutionId":{},"DocumentName":{},"DocumentVersion":{},"AutomationExecutionStatus":{},"ExecutionStartTime":{"type":"timestamp"},"ExecutionEndTime":{"type":"timestamp"},"ExecutedBy":{},"LogFile":{},"Outputs":{"shape":"S50"}}}},"NextToken":{}}}},"DescribeAvailablePatches":{"input":{"type":"structure","members":{"Filters":{"shape":"S55"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Patches":{"type":"list","member":{"shape":"S5d"}},"NextToken":{}}}},"DescribeDocument":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"DocumentVersion":{}}},"output":{"type":"structure","members":{"Document":{"shape":"S1w"}}}},"DescribeDocumentPermission":{"input":{"type":"structure","required":["Name","PermissionType"],"members":{"Name":{},"PermissionType":{}}},"output":{"type":"structure","members":{"AccountIds":{"shape":"S5u"}}}},"DescribeEffectiveInstanceAssociations":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Associations":{"type":"list","member":{"type":"structure","members":{"AssociationId":{},"InstanceId":{},"Content":{},"AssociationVersion":{}}}},"NextToken":{}}}},"DescribeEffectivePatchesForPatchBaseline":{"input":{"type":"structure","required":["BaselineId"],"members":{"BaselineId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"EffectivePatches":{"type":"list","member":{"type":"structure","members":{"Patch":{"shape":"S5d"},"PatchStatus":{"type":"structure","members":{"DeploymentStatus":{},"ComplianceLevel":{},"ApprovalDate":{"type":"timestamp"}}}}}},"NextToken":{}}}},"DescribeInstanceAssociationsStatus":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"InstanceAssociationStatusInfos":{"type":"list","member":{"type":"structure","members":{"AssociationId":{},"Name":{},"DocumentVersion":{},"AssociationVersion":{},"InstanceId":{},"ExecutionDate":{"type":"timestamp"},"Status":{},"DetailedStatus":{},"ExecutionSummary":{},"ErrorCode":{},"OutputUrl":{"type":"structure","members":{"S3OutputUrl":{"type":"structure","members":{"OutputUrl":{}}}}},"AssociationName":{}}}},"NextToken":{}}}},"DescribeInstanceInformation":{"input":{"type":"structure","members":{"InstanceInformationFilterList":{"type":"list","member":{"locationName":"InstanceInformationFilter","type":"structure","required":["key","valueSet"],"members":{"key":{},"valueSet":{"shape":"S6k"}}}},"Filters":{"type":"list","member":{"locationName":"InstanceInformationStringFilter","type":"structure","required":["Key","Values"],"members":{"Key":{},"Values":{"shape":"S6k"}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"InstanceInformationList":{"type":"list","member":{"locationName":"InstanceInformation","type":"structure","members":{"InstanceId":{},"PingStatus":{},"LastPingDateTime":{"type":"timestamp"},"AgentVersion":{},"IsLatestVersion":{"type":"boolean"},"PlatformType":{},"PlatformName":{},"PlatformVersion":{},"ActivationId":{},"IamRole":{},"RegistrationDate":{"type":"timestamp"},"ResourceType":{},"Name":{},"IPAddress":{},"ComputerName":{},"AssociationStatus":{},"LastAssociationExecutionDate":{"type":"timestamp"},"LastSuccessfulAssociationExecutionDate":{"type":"timestamp"},"AssociationOverview":{"type":"structure","members":{"DetailedStatus":{},"InstanceAssociationStatusAggregatedCount":{"type":"map","key":{},"value":{"type":"integer"}}}}}}},"NextToken":{}}}},"DescribeInstancePatchStates":{"input":{"type":"structure","required":["InstanceIds"],"members":{"InstanceIds":{"shape":"Sb"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"InstancePatchStates":{"type":"list","member":{"shape":"S74"}},"NextToken":{}}}},"DescribeInstancePatchStatesForPatchGroup":{"input":{"type":"structure","required":["PatchGroup"],"members":{"PatchGroup":{},"Filters":{"type":"list","member":{"type":"structure","required":["Key","Values","Type"],"members":{"Key":{},"Values":{"type":"list","member":{}},"Type":{}}}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"InstancePatchStates":{"type":"list","member":{"shape":"S74"}},"NextToken":{}}}},"DescribeInstancePatches":{"input":{"type":"structure","required":["InstanceId"],"members":{"InstanceId":{},"Filters":{"shape":"S55"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Patches":{"type":"list","member":{"type":"structure","required":["Title","KBId","Classification","Severity","State","InstalledTime"],"members":{"Title":{},"KBId":{},"Classification":{},"Severity":{},"State":{},"InstalledTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeMaintenanceWindowExecutionTaskInvocations":{"input":{"type":"structure","required":["WindowExecutionId","TaskId"],"members":{"WindowExecutionId":{},"TaskId":{},"Filters":{"shape":"S7v"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"WindowExecutionTaskInvocationIdentities":{"type":"list","member":{"type":"structure","members":{"WindowExecutionId":{},"TaskExecutionId":{},"InvocationId":{},"ExecutionId":{},"TaskType":{},"Parameters":{"shape":"S87"},"Status":{},"StatusDetails":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"OwnerInformation":{"shape":"S76"},"WindowTargetId":{}}}},"NextToken":{}}}},"DescribeMaintenanceWindowExecutionTasks":{"input":{"type":"structure","required":["WindowExecutionId"],"members":{"WindowExecutionId":{},"Filters":{"shape":"S7v"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"WindowExecutionTaskIdentities":{"type":"list","member":{"type":"structure","members":{"WindowExecutionId":{},"TaskExecutionId":{},"Status":{},"StatusDetails":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"TaskArn":{},"TaskType":{}}}},"NextToken":{}}}},"DescribeMaintenanceWindowExecutions":{"input":{"type":"structure","required":["WindowId"],"members":{"WindowId":{},"Filters":{"shape":"S7v"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"WindowExecutions":{"type":"list","member":{"type":"structure","members":{"WindowId":{},"WindowExecutionId":{},"Status":{},"StatusDetails":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}}},"NextToken":{}}}},"DescribeMaintenanceWindowTargets":{"input":{"type":"structure","required":["WindowId"],"members":{"WindowId":{},"Filters":{"shape":"S7v"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Targets":{"type":"list","member":{"type":"structure","members":{"WindowId":{},"WindowTargetId":{},"ResourceType":{},"Targets":{"shape":"Su"},"OwnerInformation":{"shape":"S76"},"Name":{},"Description":{"shape":"S2f"}}}},"NextToken":{}}}},"DescribeMaintenanceWindowTasks":{"input":{"type":"structure","required":["WindowId"],"members":{"WindowId":{},"Filters":{"shape":"S7v"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Tasks":{"type":"list","member":{"type":"structure","members":{"WindowId":{},"WindowTaskId":{},"TaskArn":{},"Type":{},"Targets":{"shape":"Su"},"TaskParameters":{"shape":"S8t"},"Priority":{"type":"integer"},"LoggingInfo":{"shape":"S8z"},"ServiceRoleArn":{},"MaxConcurrency":{},"MaxErrors":{},"Name":{},"Description":{"shape":"S2f"}}}},"NextToken":{}}}},"DescribeMaintenanceWindows":{"input":{"type":"structure","members":{"Filters":{"shape":"S7v"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"WindowIdentities":{"type":"list","member":{"type":"structure","members":{"WindowId":{},"Name":{},"Description":{"shape":"S2f"},"Enabled":{"type":"boolean"},"Duration":{"type":"integer"},"Cutoff":{"type":"integer"}}}},"NextToken":{}}}},"DescribeParameters":{"input":{"type":"structure","members":{"Filters":{"type":"list","member":{"type":"structure","required":["Key","Values"],"members":{"Key":{},"Values":{"type":"list","member":{}}}}},"ParameterFilters":{"shape":"S9e"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Parameters":{"type":"list","member":{"type":"structure","members":{"Name":{},"Type":{},"KeyId":{},"LastModifiedDate":{"type":"timestamp"},"LastModifiedUser":{},"Description":{},"AllowedPattern":{},"Version":{"type":"long"}}}},"NextToken":{}}}},"DescribePatchBaselines":{"input":{"type":"structure","members":{"Filters":{"shape":"S55"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"BaselineIdentities":{"type":"list","member":{"shape":"S9v"}},"NextToken":{}}}},"DescribePatchGroupState":{"input":{"type":"structure","required":["PatchGroup"],"members":{"PatchGroup":{}}},"output":{"type":"structure","members":{"Instances":{"type":"integer"},"InstancesWithInstalledPatches":{"type":"integer"},"InstancesWithInstalledOtherPatches":{"type":"integer"},"InstancesWithMissingPatches":{"type":"integer"},"InstancesWithFailedPatches":{"type":"integer"},"InstancesWithNotApplicablePatches":{"type":"integer"}}}},"DescribePatchGroups":{"input":{"type":"structure","members":{"MaxResults":{"type":"integer"},"Filters":{"shape":"S55"},"NextToken":{}}},"output":{"type":"structure","members":{"Mappings":{"type":"list","member":{"type":"structure","members":{"PatchGroup":{},"BaselineIdentity":{"shape":"S9v"}}}},"NextToken":{}}}},"GetAutomationExecution":{"input":{"type":"structure","required":["AutomationExecutionId"],"members":{"AutomationExecutionId":{}}},"output":{"type":"structure","members":{"AutomationExecution":{"type":"structure","members":{"AutomationExecutionId":{},"DocumentName":{},"DocumentVersion":{},"ExecutionStartTime":{"type":"timestamp"},"ExecutionEndTime":{"type":"timestamp"},"AutomationExecutionStatus":{},"StepExecutions":{"type":"list","member":{"type":"structure","members":{"StepName":{},"Action":{},"ExecutionStartTime":{"type":"timestamp"},"ExecutionEndTime":{"type":"timestamp"},"StepStatus":{},"ResponseCode":{},"Inputs":{"type":"map","key":{},"value":{}},"Outputs":{"shape":"S50"},"Response":{},"FailureMessage":{},"FailureDetails":{"type":"structure","members":{"FailureStage":{},"FailureType":{},"Details":{"shape":"S50"}}}}}},"Parameters":{"shape":"S50"},"Outputs":{"shape":"S50"},"FailureMessage":{}}}}}},"GetCommandInvocation":{"input":{"type":"structure","required":["CommandId","InstanceId"],"members":{"CommandId":{},"InstanceId":{},"PluginName":{}}},"output":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"Comment":{},"DocumentName":{},"PluginName":{},"ResponseCode":{"type":"integer"},"ExecutionStartDateTime":{},"ExecutionElapsedTime":{},"ExecutionEndDateTime":{},"Status":{},"StatusDetails":{},"StandardOutputContent":{},"StandardOutputUrl":{},"StandardErrorContent":{},"StandardErrorUrl":{}}}},"GetDefaultPatchBaseline":{"input":{"type":"structure","members":{"OperatingSystem":{}}},"output":{"type":"structure","members":{"BaselineId":{},"OperatingSystem":{}}}},"GetDeployablePatchSnapshotForInstance":{"input":{"type":"structure","required":["InstanceId","SnapshotId"],"members":{"InstanceId":{},"SnapshotId":{}}},"output":{"type":"structure","members":{"InstanceId":{},"SnapshotId":{},"SnapshotDownloadUrl":{},"Product":{}}}},"GetDocument":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"DocumentVersion":{}}},"output":{"type":"structure","members":{"Name":{},"DocumentVersion":{},"Content":{},"DocumentType":{}}}},"GetInventory":{"input":{"type":"structure","members":{"Filters":{"shape":"Sav"},"ResultAttributes":{"type":"list","member":{"locationName":"ResultAttribute","type":"structure","required":["TypeName"],"members":{"TypeName":{}}}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"Entities":{"type":"list","member":{"locationName":"Entity","type":"structure","members":{"Id":{},"Data":{"type":"map","key":{},"value":{"type":"structure","required":["TypeName","SchemaVersion","Content"],"members":{"TypeName":{},"SchemaVersion":{},"CaptureTime":{},"ContentHash":{},"Content":{"shape":"Sbe"}}}}}}},"NextToken":{}}}},"GetInventorySchema":{"input":{"type":"structure","members":{"TypeName":{},"NextToken":{},"MaxResults":{"type":"integer"},"SubType":{"type":"boolean"}}},"output":{"type":"structure","members":{"Schemas":{"type":"list","member":{"type":"structure","required":["TypeName","Attributes"],"members":{"TypeName":{},"Version":{},"Attributes":{"type":"list","member":{"locationName":"Attribute","type":"structure","required":["Name","DataType"],"members":{"Name":{},"DataType":{}}}}}}},"NextToken":{}}}},"GetMaintenanceWindow":{"input":{"type":"structure","required":["WindowId"],"members":{"WindowId":{}}},"output":{"type":"structure","members":{"WindowId":{},"Name":{},"Description":{"shape":"S2f"},"Schedule":{},"Duration":{"type":"integer"},"Cutoff":{"type":"integer"},"AllowUnassociatedTargets":{"type":"boolean"},"Enabled":{"type":"boolean"},"CreatedDate":{"type":"timestamp"},"ModifiedDate":{"type":"timestamp"}}}},"GetMaintenanceWindowExecution":{"input":{"type":"structure","required":["WindowExecutionId"],"members":{"WindowExecutionId":{}}},"output":{"type":"structure","members":{"WindowExecutionId":{},"TaskIds":{"type":"list","member":{}},"Status":{},"StatusDetails":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}}},"GetMaintenanceWindowExecutionTask":{"input":{"type":"structure","required":["WindowExecutionId","TaskId"],"members":{"WindowExecutionId":{},"TaskId":{}}},"output":{"type":"structure","members":{"WindowExecutionId":{},"TaskExecutionId":{},"TaskArn":{},"ServiceRole":{},"Type":{},"TaskParameters":{"type":"list","member":{"shape":"S8t"},"sensitive":true},"Priority":{"type":"integer"},"MaxConcurrency":{},"MaxErrors":{},"Status":{},"StatusDetails":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}}},"GetMaintenanceWindowExecutionTaskInvocation":{"input":{"type":"structure","required":["WindowExecutionId","TaskId","InvocationId"],"members":{"WindowExecutionId":{},"TaskId":{},"InvocationId":{}}},"output":{"type":"structure","members":{"WindowExecutionId":{},"TaskExecutionId":{},"InvocationId":{},"ExecutionId":{},"TaskType":{},"Parameters":{"shape":"S87"},"Status":{},"StatusDetails":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"OwnerInformation":{"shape":"S76"},"WindowTargetId":{}}}},"GetMaintenanceWindowTask":{"input":{"type":"structure","required":["WindowId","WindowTaskId"],"members":{"WindowId":{},"WindowTaskId":{}}},"output":{"type":"structure","members":{"WindowId":{},"WindowTaskId":{},"Targets":{"shape":"Su"},"TaskArn":{},"ServiceRoleArn":{},"TaskType":{},"TaskParameters":{"shape":"S8t"},"TaskInvocationParameters":{"shape":"Sc5"},"Priority":{"type":"integer"},"MaxConcurrency":{},"MaxErrors":{},"LoggingInfo":{"shape":"S8z"},"Name":{},"Description":{"shape":"S2f"}}}},"GetParameter":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"WithDecryption":{"type":"boolean"}}},"output":{"type":"structure","members":{"Parameter":{"shape":"Scn"}}}},"GetParameterHistory":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"WithDecryption":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Parameters":{"type":"list","member":{"type":"structure","members":{"Name":{},"Type":{},"KeyId":{},"LastModifiedDate":{"type":"timestamp"},"LastModifiedUser":{},"Description":{},"Value":{},"AllowedPattern":{},"Version":{"type":"long"}}}},"NextToken":{}}}},"GetParameters":{"input":{"type":"structure","required":["Names"],"members":{"Names":{"shape":"S3r"},"WithDecryption":{"type":"boolean"}}},"output":{"type":"structure","members":{"Parameters":{"shape":"Scv"},"InvalidParameters":{"shape":"S3r"}}}},"GetParametersByPath":{"input":{"type":"structure","required":["Path"],"members":{"Path":{},"Recursive":{"type":"boolean"},"ParameterFilters":{"shape":"S9e"},"WithDecryption":{"type":"boolean"},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Parameters":{"shape":"Scv"},"NextToken":{}}}},"GetPatchBaseline":{"input":{"type":"structure","required":["BaselineId"],"members":{"BaselineId":{}}},"output":{"type":"structure","members":{"BaselineId":{},"Name":{},"OperatingSystem":{},"GlobalFilters":{"shape":"S2q"},"ApprovalRules":{"shape":"S2w"},"ApprovedPatches":{"shape":"S31"},"ApprovedPatchesComplianceLevel":{},"RejectedPatches":{"shape":"S31"},"PatchGroups":{"type":"list","member":{}},"CreatedDate":{"type":"timestamp"},"ModifiedDate":{"type":"timestamp"},"Description":{}}}},"GetPatchBaselineForPatchGroup":{"input":{"type":"structure","required":["PatchGroup"],"members":{"PatchGroup":{},"OperatingSystem":{}}},"output":{"type":"structure","members":{"BaselineId":{},"PatchGroup":{},"OperatingSystem":{}}}},"ListAssociationVersions":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"AssociationVersions":{"type":"list","member":{"type":"structure","members":{"AssociationId":{},"AssociationVersion":{},"CreatedDate":{"type":"timestamp"},"Name":{},"DocumentVersion":{},"Parameters":{"shape":"Sq"},"Targets":{"shape":"Su"},"ScheduleExpression":{},"OutputLocation":{"shape":"S10"},"AssociationName":{}}}},"NextToken":{}}}},"ListAssociations":{"input":{"type":"structure","members":{"AssociationFilterList":{"type":"list","member":{"locationName":"AssociationFilter","type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Associations":{"type":"list","member":{"locationName":"Association","type":"structure","members":{"Name":{},"InstanceId":{},"AssociationId":{},"AssociationVersion":{},"DocumentVersion":{},"Targets":{"shape":"Su"},"LastExecutionDate":{"type":"timestamp"},"Overview":{"shape":"S1e"},"ScheduleExpression":{},"AssociationName":{}}}},"NextToken":{}}}},"ListCommandInvocations":{"input":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"MaxResults":{"type":"integer"},"NextToken":{},"Filters":{"shape":"Sdi"},"Details":{"type":"boolean"}}},"output":{"type":"structure","members":{"CommandInvocations":{"type":"list","member":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"InstanceName":{},"Comment":{},"DocumentName":{},"RequestedDateTime":{"type":"timestamp"},"Status":{},"StatusDetails":{},"TraceOutput":{},"StandardOutputUrl":{},"StandardErrorUrl":{},"CommandPlugins":{"type":"list","member":{"type":"structure","members":{"Name":{},"Status":{},"StatusDetails":{},"ResponseCode":{"type":"integer"},"ResponseStartDateTime":{"type":"timestamp"},"ResponseFinishDateTime":{"type":"timestamp"},"Output":{},"StandardOutputUrl":{},"StandardErrorUrl":{},"OutputS3Region":{},"OutputS3BucketName":{},"OutputS3KeyPrefix":{}}}},"ServiceRole":{},"NotificationConfig":{"shape":"Sc7"}}}},"NextToken":{}}}},"ListCommands":{"input":{"type":"structure","members":{"CommandId":{},"InstanceId":{},"MaxResults":{"type":"integer"},"NextToken":{},"Filters":{"shape":"Sdi"}}},"output":{"type":"structure","members":{"Commands":{"type":"list","member":{"shape":"Sdy"}},"NextToken":{}}}},"ListComplianceItems":{"input":{"type":"structure","members":{"Filters":{"shape":"Se4"},"ResourceIds":{"type":"list","member":{}},"ResourceTypes":{"type":"list","member":{}},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ComplianceItems":{"type":"list","member":{"locationName":"Item","type":"structure","members":{"ComplianceType":{},"ResourceType":{},"ResourceId":{},"Id":{},"Title":{},"Status":{},"Severity":{},"ExecutionSummary":{"shape":"Sem"},"Details":{"shape":"Sep"}}}},"NextToken":{}}}},"ListComplianceSummaries":{"input":{"type":"structure","members":{"Filters":{"shape":"Se4"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ComplianceSummaryItems":{"type":"list","member":{"locationName":"Item","type":"structure","members":{"ComplianceType":{},"CompliantSummary":{"shape":"Seu"},"NonCompliantSummary":{"shape":"Sex"}}}},"NextToken":{}}}},"ListDocumentVersions":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"DocumentVersions":{"type":"list","member":{"type":"structure","members":{"Name":{},"DocumentVersion":{},"CreatedDate":{"type":"timestamp"},"IsDefaultVersion":{"type":"boolean"}}}},"NextToken":{}}}},"ListDocuments":{"input":{"type":"structure","members":{"DocumentFilterList":{"type":"list","member":{"locationName":"DocumentFilter","type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"Filters":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"type":"list","member":{}}}}},"MaxResults":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"DocumentIdentifiers":{"type":"list","member":{"locationName":"DocumentIdentifier","type":"structure","members":{"Name":{},"Owner":{},"PlatformTypes":{"shape":"S2a"},"DocumentVersion":{},"DocumentType":{},"SchemaVersion":{},"Tags":{"shape":"S4"}}}},"NextToken":{}}}},"ListInventoryEntries":{"input":{"type":"structure","required":["InstanceId","TypeName"],"members":{"InstanceId":{},"TypeName":{},"Filters":{"shape":"Sav"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"TypeName":{},"InstanceId":{},"SchemaVersion":{},"CaptureTime":{},"Entries":{"shape":"Sbe"},"NextToken":{}}}},"ListResourceComplianceSummaries":{"input":{"type":"structure","members":{"Filters":{"shape":"Se4"},"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ResourceComplianceSummaryItems":{"type":"list","member":{"locationName":"Item","type":"structure","members":{"ComplianceType":{},"ResourceType":{},"ResourceId":{},"Status":{},"OverallSeverity":{},"ExecutionSummary":{"shape":"Sem"},"CompliantSummary":{"shape":"Seu"},"NonCompliantSummary":{"shape":"Sex"}}}},"NextToken":{}}}},"ListResourceDataSync":{"input":{"type":"structure","members":{"NextToken":{},"MaxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"ResourceDataSyncItems":{"type":"list","member":{"type":"structure","members":{"SyncName":{},"S3Destination":{"shape":"S38"},"LastSyncTime":{"type":"timestamp"},"LastSuccessfulSyncTime":{"type":"timestamp"},"LastStatus":{},"SyncCreatedTime":{"type":"timestamp"}}}},"NextToken":{}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceType","ResourceId"],"members":{"ResourceType":{},"ResourceId":{}}},"output":{"type":"structure","members":{"TagList":{"shape":"S4"}}}},"ModifyDocumentPermission":{"input":{"type":"structure","required":["Name","PermissionType"],"members":{"Name":{},"PermissionType":{},"AccountIdsToAdd":{"shape":"S5u"},"AccountIdsToRemove":{"shape":"S5u"}}},"output":{"type":"structure","members":{}}},"PutComplianceItems":{"input":{"type":"structure","required":["ResourceId","ResourceType","ComplianceType","ExecutionSummary","Items"],"members":{"ResourceId":{},"ResourceType":{},"ComplianceType":{},"ExecutionSummary":{"shape":"Sem"},"Items":{"type":"list","member":{"type":"structure","required":["Severity","Status"],"members":{"Id":{},"Title":{},"Severity":{},"Status":{},"Details":{"shape":"Sep"}}}},"ItemContentHash":{}}},"output":{"type":"structure","members":{}}},"PutInventory":{"input":{"type":"structure","required":["InstanceId","Items"],"members":{"InstanceId":{},"Items":{"type":"list","member":{"locationName":"Item","type":"structure","required":["TypeName","SchemaVersion","CaptureTime"],"members":{"TypeName":{},"SchemaVersion":{},"CaptureTime":{},"ContentHash":{},"Content":{"shape":"Sbe"},"Context":{"type":"map","key":{},"value":{}}}}}}},"output":{"type":"structure","members":{}}},"PutParameter":{"input":{"type":"structure","required":["Name","Value","Type"],"members":{"Name":{},"Description":{},"Value":{},"Type":{},"KeyId":{},"Overwrite":{"type":"boolean"},"AllowedPattern":{}}},"output":{"type":"structure","members":{"Version":{"type":"long"}}}},"RegisterDefaultPatchBaseline":{"input":{"type":"structure","required":["BaselineId"],"members":{"BaselineId":{}}},"output":{"type":"structure","members":{"BaselineId":{}}}},"RegisterPatchBaselineForPatchGroup":{"input":{"type":"structure","required":["BaselineId","PatchGroup"],"members":{"BaselineId":{},"PatchGroup":{}}},"output":{"type":"structure","members":{"BaselineId":{},"PatchGroup":{}}}},"RegisterTargetWithMaintenanceWindow":{"input":{"type":"structure","required":["WindowId","ResourceType","Targets"],"members":{"WindowId":{},"ResourceType":{},"Targets":{"shape":"Su"},"OwnerInformation":{"shape":"S76"},"Name":{},"Description":{"shape":"S2f"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"WindowTargetId":{}}}},"RegisterTaskWithMaintenanceWindow":{"input":{"type":"structure","required":["WindowId","Targets","TaskArn","ServiceRoleArn","TaskType","MaxConcurrency","MaxErrors"],"members":{"WindowId":{},"Targets":{"shape":"Su"},"TaskArn":{},"ServiceRoleArn":{},"TaskType":{},"TaskParameters":{"shape":"S8t"},"TaskInvocationParameters":{"shape":"Sc5"},"Priority":{"type":"integer"},"MaxConcurrency":{},"MaxErrors":{},"LoggingInfo":{"shape":"S8z"},"Name":{},"Description":{"shape":"S2f"},"ClientToken":{"idempotencyToken":true}}},"output":{"type":"structure","members":{"WindowTaskId":{}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceType","ResourceId","TagKeys"],"members":{"ResourceType":{},"ResourceId":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"SendAutomationSignal":{"input":{"type":"structure","required":["AutomationExecutionId","SignalType"],"members":{"AutomationExecutionId":{},"SignalType":{},"Payload":{"shape":"S50"}}},"output":{"type":"structure","members":{}}},"SendCommand":{"input":{"type":"structure","required":["DocumentName"],"members":{"InstanceIds":{"shape":"Sb"},"Targets":{"shape":"Su"},"DocumentName":{},"DocumentHash":{},"DocumentHashType":{},"TimeoutSeconds":{"type":"integer"},"Comment":{},"Parameters":{"shape":"Sq"},"OutputS3Region":{},"OutputS3BucketName":{},"OutputS3KeyPrefix":{},"MaxConcurrency":{},"MaxErrors":{},"ServiceRoleArn":{},"NotificationConfig":{"shape":"Sc7"}}},"output":{"type":"structure","members":{"Command":{"shape":"Sdy"}}}},"StartAutomationExecution":{"input":{"type":"structure","required":["DocumentName"],"members":{"DocumentName":{},"DocumentVersion":{},"Parameters":{"shape":"S50"},"ClientToken":{}}},"output":{"type":"structure","members":{"AutomationExecutionId":{}}}},"StopAutomationExecution":{"input":{"type":"structure","required":["AutomationExecutionId"],"members":{"AutomationExecutionId":{}}},"output":{"type":"structure","members":{}}},"UpdateAssociation":{"input":{"type":"structure","required":["AssociationId"],"members":{"AssociationId":{},"Parameters":{"shape":"Sq"},"DocumentVersion":{},"ScheduleExpression":{},"OutputLocation":{"shape":"S10"},"Name":{},"Targets":{"shape":"Su"},"AssociationName":{},"AssociationVersion":{}}},"output":{"type":"structure","members":{"AssociationDescription":{"shape":"S17"}}}},"UpdateAssociationStatus":{"input":{"type":"structure","required":["Name","InstanceId","AssociationStatus"],"members":{"Name":{},"InstanceId":{},"AssociationStatus":{"shape":"S1a"}}},"output":{"type":"structure","members":{"AssociationDescription":{"shape":"S17"}}}},"UpdateDocument":{"input":{"type":"structure","required":["Content","Name"],"members":{"Content":{},"Name":{},"DocumentVersion":{}}},"output":{"type":"structure","members":{"DocumentDescription":{"shape":"S1w"}}}},"UpdateDocumentDefaultVersion":{"input":{"type":"structure","required":["Name","DocumentVersion"],"members":{"Name":{},"DocumentVersion":{}}},"output":{"type":"structure","members":{"Description":{"type":"structure","members":{"Name":{},"DefaultVersion":{}}}}}},"UpdateMaintenanceWindow":{"input":{"type":"structure","required":["WindowId"],"members":{"WindowId":{},"Name":{},"Description":{"shape":"S2f"},"Schedule":{},"Duration":{"type":"integer"},"Cutoff":{"type":"integer"},"AllowUnassociatedTargets":{"type":"boolean"},"Enabled":{"type":"boolean"},"Replace":{"type":"boolean"}}},"output":{"type":"structure","members":{"WindowId":{},"Name":{},"Description":{"shape":"S2f"},"Schedule":{},"Duration":{"type":"integer"},"Cutoff":{"type":"integer"},"AllowUnassociatedTargets":{"type":"boolean"},"Enabled":{"type":"boolean"}}}},"UpdateMaintenanceWindowTarget":{"input":{"type":"structure","required":["WindowId","WindowTargetId"],"members":{"WindowId":{},"WindowTargetId":{},"Targets":{"shape":"Su"},"OwnerInformation":{"shape":"S76"},"Name":{},"Description":{"shape":"S2f"},"Replace":{"type":"boolean"}}},"output":{"type":"structure","members":{"WindowId":{},"WindowTargetId":{},"Targets":{"shape":"Su"},"OwnerInformation":{"shape":"S76"},"Name":{},"Description":{"shape":"S2f"}}}},"UpdateMaintenanceWindowTask":{"input":{"type":"structure","required":["WindowId","WindowTaskId"],"members":{"WindowId":{},"WindowTaskId":{},"Targets":{"shape":"Su"},"TaskArn":{},"ServiceRoleArn":{},"TaskParameters":{"shape":"S8t"},"TaskInvocationParameters":{"shape":"Sc5"},"Priority":{"type":"integer"},"MaxConcurrency":{},"MaxErrors":{},"LoggingInfo":{"shape":"S8z"},"Name":{},"Description":{"shape":"S2f"},"Replace":{"type":"boolean"}}},"output":{"type":"structure","members":{"WindowId":{},"WindowTaskId":{},"Targets":{"shape":"Su"},"TaskArn":{},"ServiceRoleArn":{},"TaskParameters":{"shape":"S8t"},"TaskInvocationParameters":{"shape":"Sc5"},"Priority":{"type":"integer"},"MaxConcurrency":{},"MaxErrors":{},"LoggingInfo":{"shape":"S8z"},"Name":{},"Description":{"shape":"S2f"}}}},"UpdateManagedInstanceRole":{"input":{"type":"structure","required":["InstanceId","IamRole"],"members":{"InstanceId":{},"IamRole":{}}},"output":{"type":"structure","members":{}}},"UpdatePatchBaseline":{"input":{"type":"structure","required":["BaselineId"],"members":{"BaselineId":{},"Name":{},"GlobalFilters":{"shape":"S2q"},"ApprovalRules":{"shape":"S2w"},"ApprovedPatches":{"shape":"S31"},"ApprovedPatchesComplianceLevel":{},"RejectedPatches":{"shape":"S31"},"Description":{}}},"output":{"type":"structure","members":{"BaselineId":{},"Name":{},"OperatingSystem":{},"GlobalFilters":{"shape":"S2q"},"ApprovalRules":{"shape":"S2w"},"ApprovedPatches":{"shape":"S31"},"ApprovedPatchesComplianceLevel":{},"RejectedPatches":{"shape":"S31"},"CreatedDate":{"type":"timestamp"},"ModifiedDate":{"type":"timestamp"},"Description":{}}}}},"shapes":{"S4":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"Sb":{"type":"list","member":{}},"Sq":{"type":"map","key":{},"value":{"type":"list","member":{}}},"Su":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"type":"list","member":{}}}}},"S10":{"type":"structure","members":{"S3Location":{"type":"structure","members":{"OutputS3Region":{},"OutputS3BucketName":{},"OutputS3KeyPrefix":{}}}}},"S17":{"type":"structure","members":{"Name":{},"InstanceId":{},"AssociationVersion":{},"Date":{"type":"timestamp"},"LastUpdateAssociationDate":{"type":"timestamp"},"Status":{"shape":"S1a"},"Overview":{"shape":"S1e"},"DocumentVersion":{},"Parameters":{"shape":"Sq"},"AssociationId":{},"Targets":{"shape":"Su"},"ScheduleExpression":{},"OutputLocation":{"shape":"S10"},"LastExecutionDate":{"type":"timestamp"},"LastSuccessfulExecutionDate":{"type":"timestamp"},"AssociationName":{}}},"S1a":{"type":"structure","required":["Date","Name","Message"],"members":{"Date":{"type":"timestamp"},"Name":{},"Message":{},"AdditionalInfo":{}}},"S1e":{"type":"structure","members":{"Status":{},"DetailedStatus":{},"AssociationStatusAggregatedCount":{"type":"map","key":{},"value":{"type":"integer"}}}},"S1l":{"type":"structure","required":["Name"],"members":{"Name":{},"InstanceId":{},"Parameters":{"shape":"Sq"},"DocumentVersion":{},"Targets":{"shape":"Su"},"ScheduleExpression":{},"OutputLocation":{"shape":"S10"},"AssociationName":{}}},"S1w":{"type":"structure","members":{"Sha1":{},"Hash":{},"HashType":{},"Name":{},"Owner":{},"CreatedDate":{"type":"timestamp"},"Status":{},"DocumentVersion":{},"Description":{},"Parameters":{"type":"list","member":{"locationName":"DocumentParameter","type":"structure","members":{"Name":{},"Type":{},"Description":{},"DefaultValue":{}}}},"PlatformTypes":{"shape":"S2a"},"DocumentType":{},"SchemaVersion":{},"LatestVersion":{},"DefaultVersion":{},"Tags":{"shape":"S4"}}},"S2a":{"type":"list","member":{"locationName":"PlatformType"}},"S2f":{"type":"string","sensitive":true},"S2q":{"type":"structure","required":["PatchFilters"],"members":{"PatchFilters":{"type":"list","member":{"type":"structure","required":["Key","Values"],"members":{"Key":{},"Values":{"type":"list","member":{}}}}}}},"S2w":{"type":"structure","required":["PatchRules"],"members":{"PatchRules":{"type":"list","member":{"type":"structure","required":["PatchFilterGroup","ApproveAfterDays"],"members":{"PatchFilterGroup":{"shape":"S2q"},"ComplianceLevel":{},"ApproveAfterDays":{"type":"integer"}}}}}},"S31":{"type":"list","member":{}},"S38":{"type":"structure","required":["BucketName","SyncFormat","Region"],"members":{"BucketName":{},"Prefix":{},"SyncFormat":{},"Region":{},"AWSKMSKeyARN":{}}},"S3r":{"type":"list","member":{}},"S50":{"type":"map","key":{},"value":{"type":"list","member":{}}},"S55":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"type":"list","member":{}}}}},"S5d":{"type":"structure","members":{"Id":{},"ReleaseDate":{"type":"timestamp"},"Title":{},"Description":{},"ContentUrl":{},"Vendor":{},"ProductFamily":{},"Product":{},"Classification":{},"MsrcSeverity":{},"KbNumber":{},"MsrcNumber":{},"Language":{}}},"S5u":{"type":"list","member":{"locationName":"AccountId"}},"S6k":{"type":"list","member":{"locationName":"InstanceInformationFilterValue"}},"S74":{"type":"structure","required":["InstanceId","PatchGroup","BaselineId","OperationStartTime","OperationEndTime","Operation"],"members":{"InstanceId":{},"PatchGroup":{},"BaselineId":{},"SnapshotId":{},"OwnerInformation":{"shape":"S76"},"InstalledCount":{"type":"integer"},"InstalledOtherCount":{"type":"integer"},"MissingCount":{"type":"integer"},"FailedCount":{"type":"integer"},"NotApplicableCount":{"type":"integer"},"OperationStartTime":{"type":"timestamp"},"OperationEndTime":{"type":"timestamp"},"Operation":{}}},"S76":{"type":"string","sensitive":true},"S7v":{"type":"list","member":{"type":"structure","members":{"Key":{},"Values":{"type":"list","member":{}}}}},"S87":{"type":"string","sensitive":true},"S8t":{"type":"map","key":{},"value":{"type":"structure","members":{"Values":{"type":"list","member":{"type":"string","sensitive":true},"sensitive":true}},"sensitive":true},"sensitive":true},"S8z":{"type":"structure","required":["S3BucketName","S3Region"],"members":{"S3BucketName":{},"S3KeyPrefix":{},"S3Region":{}}},"S9e":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Option":{},"Values":{"type":"list","member":{}}}}},"S9v":{"type":"structure","members":{"BaselineId":{},"BaselineName":{},"OperatingSystem":{},"BaselineDescription":{},"DefaultBaseline":{"type":"boolean"}}},"Sav":{"type":"list","member":{"locationName":"InventoryFilter","type":"structure","required":["Key","Values"],"members":{"Key":{},"Values":{"type":"list","member":{"locationName":"FilterValue"}},"Type":{}}}},"Sbe":{"type":"list","member":{"type":"map","key":{},"value":{}}},"Sc5":{"type":"structure","members":{"RunCommand":{"type":"structure","members":{"Comment":{},"DocumentHash":{},"DocumentHashType":{},"NotificationConfig":{"shape":"Sc7"},"OutputS3BucketName":{},"OutputS3KeyPrefix":{},"Parameters":{"shape":"Sq"},"ServiceRoleArn":{},"TimeoutSeconds":{"type":"integer"}}},"Automation":{"type":"structure","members":{"DocumentVersion":{},"Parameters":{"shape":"S50"}}},"StepFunctions":{"type":"structure","members":{"Input":{"type":"string","sensitive":true},"Name":{}}},"Lambda":{"type":"structure","members":{"ClientContext":{},"Qualifier":{},"Payload":{"type":"blob","sensitive":true}}}}},"Sc7":{"type":"structure","members":{"NotificationArn":{},"NotificationEvents":{"type":"list","member":{}},"NotificationType":{}}},"Scn":{"type":"structure","members":{"Name":{},"Type":{},"Value":{},"Version":{"type":"long"}}},"Scv":{"type":"list","member":{"shape":"Scn"}},"Sdi":{"type":"list","member":{"type":"structure","required":["key","value"],"members":{"key":{},"value":{}}}},"Sdy":{"type":"structure","members":{"CommandId":{},"DocumentName":{},"Comment":{},"ExpiresAfter":{"type":"timestamp"},"Parameters":{"shape":"Sq"},"InstanceIds":{"shape":"Sb"},"Targets":{"shape":"Su"},"RequestedDateTime":{"type":"timestamp"},"Status":{},"StatusDetails":{},"OutputS3Region":{},"OutputS3BucketName":{},"OutputS3KeyPrefix":{},"MaxConcurrency":{},"MaxErrors":{},"TargetCount":{"type":"integer"},"CompletedCount":{"type":"integer"},"ErrorCount":{"type":"integer"},"ServiceRole":{},"NotificationConfig":{"shape":"Sc7"}}},"Se4":{"type":"list","member":{"locationName":"ComplianceFilter","type":"structure","members":{"Key":{},"Values":{"type":"list","member":{"locationName":"FilterValue"}},"Type":{}}}},"Sem":{"type":"structure","required":["ExecutionTime"],"members":{"ExecutionTime":{"type":"timestamp"},"ExecutionId":{},"ExecutionType":{}}},"Sep":{"type":"map","key":{},"value":{}},"Seu":{"type":"structure","members":{"CompliantCount":{"type":"integer"},"SeveritySummary":{"shape":"Sew"}}},"Sew":{"type":"structure","members":{"CriticalCount":{"type":"integer"},"HighCount":{"type":"integer"},"MediumCount":{"type":"integer"},"LowCount":{"type":"integer"},"InformationalCount":{"type":"integer"},"UnspecifiedCount":{"type":"integer"}}},"Sex":{"type":"structure","members":{"NonCompliantCount":{"type":"integer"},"SeveritySummary":{"shape":"Sew"}}}}}

/***/ }),
/* 348 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeActivations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"ActivationList"},"DescribeInstanceInformation":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"InstanceInformationList"},"DescribeParameters":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"GetParameterHistory":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"GetParametersByPath":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken"},"ListAssociations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Associations"},"ListCommandInvocations":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"CommandInvocations"},"ListCommands":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"Commands"},"ListDocuments":{"input_token":"NextToken","limit_key":"MaxResults","output_token":"NextToken","result_key":"DocumentIdentifiers"}}}

/***/ }),
/* 349 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-23","endpointPrefix":"states","jsonVersion":"1.0","protocol":"json","serviceAbbreviation":"AWS SFN","serviceFullName":"AWS Step Functions","signatureVersion":"v4","targetPrefix":"AWSStepFunctions","uid":"states-2016-11-23"},"operations":{"CreateActivity":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","required":["activityArn","creationDate"],"members":{"activityArn":{},"creationDate":{"type":"timestamp"}}},"idempotent":true},"CreateStateMachine":{"input":{"type":"structure","required":["name","definition","roleArn"],"members":{"name":{},"definition":{},"roleArn":{}}},"output":{"type":"structure","required":["stateMachineArn","creationDate"],"members":{"stateMachineArn":{},"creationDate":{"type":"timestamp"}}},"idempotent":true},"DeleteActivity":{"input":{"type":"structure","required":["activityArn"],"members":{"activityArn":{}}},"output":{"type":"structure","members":{}}},"DeleteStateMachine":{"input":{"type":"structure","required":["stateMachineArn"],"members":{"stateMachineArn":{}}},"output":{"type":"structure","members":{}}},"DescribeActivity":{"input":{"type":"structure","required":["activityArn"],"members":{"activityArn":{}}},"output":{"type":"structure","required":["activityArn","name","creationDate"],"members":{"activityArn":{},"name":{},"creationDate":{"type":"timestamp"}}}},"DescribeExecution":{"input":{"type":"structure","required":["executionArn"],"members":{"executionArn":{}}},"output":{"type":"structure","required":["executionArn","stateMachineArn","status","startDate","input"],"members":{"executionArn":{},"stateMachineArn":{},"name":{},"status":{},"startDate":{"type":"timestamp"},"stopDate":{"type":"timestamp"},"input":{},"output":{}}}},"DescribeStateMachine":{"input":{"type":"structure","required":["stateMachineArn"],"members":{"stateMachineArn":{}}},"output":{"type":"structure","required":["stateMachineArn","name","definition","roleArn","creationDate"],"members":{"stateMachineArn":{},"name":{},"status":{},"definition":{},"roleArn":{},"creationDate":{"type":"timestamp"}}}},"GetActivityTask":{"input":{"type":"structure","required":["activityArn"],"members":{"activityArn":{},"workerName":{}}},"output":{"type":"structure","members":{"taskToken":{},"input":{}}}},"GetExecutionHistory":{"input":{"type":"structure","required":["executionArn"],"members":{"executionArn":{},"maxResults":{"type":"integer"},"reverseOrder":{"type":"boolean"},"nextToken":{}}},"output":{"type":"structure","required":["events"],"members":{"events":{"type":"list","member":{"type":"structure","required":["timestamp","type","id"],"members":{"timestamp":{"type":"timestamp"},"type":{},"id":{"type":"long"},"previousEventId":{"type":"long"},"activityFailedEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"activityScheduleFailedEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"activityScheduledEventDetails":{"type":"structure","required":["resource"],"members":{"resource":{},"input":{},"timeoutInSeconds":{"type":"long"},"heartbeatInSeconds":{"type":"long"}}},"activityStartedEventDetails":{"type":"structure","members":{"workerName":{}}},"activitySucceededEventDetails":{"type":"structure","members":{"output":{}}},"activityTimedOutEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"executionFailedEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"executionStartedEventDetails":{"type":"structure","members":{"input":{},"roleArn":{}}},"executionSucceededEventDetails":{"type":"structure","members":{"output":{}}},"executionAbortedEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"executionTimedOutEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"lambdaFunctionFailedEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"lambdaFunctionScheduleFailedEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"lambdaFunctionScheduledEventDetails":{"type":"structure","required":["resource"],"members":{"resource":{},"input":{},"timeoutInSeconds":{"type":"long"}}},"lambdaFunctionStartFailedEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"lambdaFunctionSucceededEventDetails":{"type":"structure","members":{"output":{}}},"lambdaFunctionTimedOutEventDetails":{"type":"structure","members":{"error":{},"cause":{}}},"stateEnteredEventDetails":{"type":"structure","required":["name"],"members":{"name":{},"input":{}}},"stateExitedEventDetails":{"type":"structure","required":["name"],"members":{"name":{},"output":{}}}}}},"nextToken":{}}}},"ListActivities":{"input":{"type":"structure","members":{"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","required":["activities"],"members":{"activities":{"type":"list","member":{"type":"structure","required":["activityArn","name","creationDate"],"members":{"activityArn":{},"name":{},"creationDate":{"type":"timestamp"}}}},"nextToken":{}}}},"ListExecutions":{"input":{"type":"structure","required":["stateMachineArn"],"members":{"stateMachineArn":{},"statusFilter":{},"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","required":["executions"],"members":{"executions":{"type":"list","member":{"type":"structure","required":["executionArn","stateMachineArn","name","status","startDate"],"members":{"executionArn":{},"stateMachineArn":{},"name":{},"status":{},"startDate":{"type":"timestamp"},"stopDate":{"type":"timestamp"}}}},"nextToken":{}}}},"ListStateMachines":{"input":{"type":"structure","members":{"maxResults":{"type":"integer"},"nextToken":{}}},"output":{"type":"structure","required":["stateMachines"],"members":{"stateMachines":{"type":"list","member":{"type":"structure","required":["stateMachineArn","name","creationDate"],"members":{"stateMachineArn":{},"name":{},"creationDate":{"type":"timestamp"}}}},"nextToken":{}}}},"SendTaskFailure":{"input":{"type":"structure","required":["taskToken"],"members":{"taskToken":{},"error":{},"cause":{}}},"output":{"type":"structure","members":{}}},"SendTaskHeartbeat":{"input":{"type":"structure","required":["taskToken"],"members":{"taskToken":{}}},"output":{"type":"structure","members":{}}},"SendTaskSuccess":{"input":{"type":"structure","required":["taskToken","output"],"members":{"taskToken":{},"output":{}}},"output":{"type":"structure","members":{}}},"StartExecution":{"input":{"type":"structure","required":["stateMachineArn"],"members":{"stateMachineArn":{},"name":{},"input":{}}},"output":{"type":"structure","required":["executionArn","startDate"],"members":{"executionArn":{},"startDate":{"type":"timestamp"}}},"idempotent":true},"StopExecution":{"input":{"type":"structure","required":["executionArn"],"members":{"executionArn":{},"error":{},"cause":{}}},"output":{"type":"structure","required":["stopDate"],"members":{"stopDate":{"type":"timestamp"}}}}},"shapes":{}}

/***/ }),
/* 350 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetExecutionHistory":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"events"},"ListActivities":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"activities"},"ListExecutions":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"executions"},"ListStateMachines":{"input_token":"nextToken","limit_key":"maxResults","output_token":"nextToken","result_key":"stateMachines"}}}

/***/ }),
/* 351 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2013-06-30","endpointPrefix":"storagegateway","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Storage Gateway","signatureVersion":"v4","targetPrefix":"StorageGateway_20130630","uid":"storagegateway-2013-06-30"},"operations":{"ActivateGateway":{"input":{"type":"structure","required":["ActivationKey","GatewayName","GatewayTimezone","GatewayRegion"],"members":{"ActivationKey":{},"GatewayName":{},"GatewayTimezone":{},"GatewayRegion":{},"GatewayType":{},"TapeDriveType":{},"MediumChangerType":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"AddCache":{"input":{"type":"structure","required":["GatewayARN","DiskIds"],"members":{"GatewayARN":{},"DiskIds":{"shape":"Sc"}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"AddTagsToResource":{"input":{"type":"structure","required":["ResourceARN","Tags"],"members":{"ResourceARN":{},"Tags":{"shape":"Sh"}}},"output":{"type":"structure","members":{"ResourceARN":{}}}},"AddUploadBuffer":{"input":{"type":"structure","required":["GatewayARN","DiskIds"],"members":{"GatewayARN":{},"DiskIds":{"shape":"Sc"}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"AddWorkingStorage":{"input":{"type":"structure","required":["GatewayARN","DiskIds"],"members":{"GatewayARN":{},"DiskIds":{"shape":"Sc"}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"CancelArchival":{"input":{"type":"structure","required":["GatewayARN","TapeARN"],"members":{"GatewayARN":{},"TapeARN":{}}},"output":{"type":"structure","members":{"TapeARN":{}}}},"CancelRetrieval":{"input":{"type":"structure","required":["GatewayARN","TapeARN"],"members":{"GatewayARN":{},"TapeARN":{}}},"output":{"type":"structure","members":{"TapeARN":{}}}},"CreateCachediSCSIVolume":{"input":{"type":"structure","required":["GatewayARN","VolumeSizeInBytes","TargetName","NetworkInterfaceId","ClientToken"],"members":{"GatewayARN":{},"VolumeSizeInBytes":{"type":"long"},"SnapshotId":{},"TargetName":{},"SourceVolumeARN":{},"NetworkInterfaceId":{},"ClientToken":{}}},"output":{"type":"structure","members":{"VolumeARN":{},"TargetARN":{}}}},"CreateNFSFileShare":{"input":{"type":"structure","required":["ClientToken","GatewayARN","Role","LocationARN"],"members":{"ClientToken":{},"NFSFileShareDefaults":{"shape":"S15"},"GatewayARN":{},"KMSEncrypted":{"type":"boolean"},"KMSKey":{},"Role":{},"LocationARN":{},"DefaultStorageClass":{},"ClientList":{"shape":"S1d"},"Squash":{},"ReadOnly":{"type":"boolean"}}},"output":{"type":"structure","members":{"FileShareARN":{}}}},"CreateSnapshot":{"input":{"type":"structure","required":["VolumeARN","SnapshotDescription"],"members":{"VolumeARN":{},"SnapshotDescription":{}}},"output":{"type":"structure","members":{"VolumeARN":{},"SnapshotId":{}}}},"CreateSnapshotFromVolumeRecoveryPoint":{"input":{"type":"structure","required":["VolumeARN","SnapshotDescription"],"members":{"VolumeARN":{},"SnapshotDescription":{}}},"output":{"type":"structure","members":{"SnapshotId":{},"VolumeARN":{},"VolumeRecoveryPointTime":{}}}},"CreateStorediSCSIVolume":{"input":{"type":"structure","required":["GatewayARN","DiskId","PreserveExistingData","TargetName","NetworkInterfaceId"],"members":{"GatewayARN":{},"DiskId":{},"SnapshotId":{},"PreserveExistingData":{"type":"boolean"},"TargetName":{},"NetworkInterfaceId":{}}},"output":{"type":"structure","members":{"VolumeARN":{},"VolumeSizeInBytes":{"type":"long"},"TargetARN":{}}}},"CreateTapeWithBarcode":{"input":{"type":"structure","required":["GatewayARN","TapeSizeInBytes","TapeBarcode"],"members":{"GatewayARN":{},"TapeSizeInBytes":{"type":"long"},"TapeBarcode":{}}},"output":{"type":"structure","members":{"TapeARN":{}}}},"CreateTapes":{"input":{"type":"structure","required":["GatewayARN","TapeSizeInBytes","ClientToken","NumTapesToCreate","TapeBarcodePrefix"],"members":{"GatewayARN":{},"TapeSizeInBytes":{"type":"long"},"ClientToken":{},"NumTapesToCreate":{"type":"integer"},"TapeBarcodePrefix":{}}},"output":{"type":"structure","members":{"TapeARNs":{"shape":"S1z"}}}},"DeleteBandwidthRateLimit":{"input":{"type":"structure","required":["GatewayARN","BandwidthType"],"members":{"GatewayARN":{},"BandwidthType":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"DeleteChapCredentials":{"input":{"type":"structure","required":["TargetARN","InitiatorName"],"members":{"TargetARN":{},"InitiatorName":{}}},"output":{"type":"structure","members":{"TargetARN":{},"InitiatorName":{}}}},"DeleteFileShare":{"input":{"type":"structure","required":["FileShareARN"],"members":{"FileShareARN":{},"ForceDelete":{"type":"boolean"}}},"output":{"type":"structure","members":{"FileShareARN":{}}}},"DeleteGateway":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"DeleteSnapshotSchedule":{"input":{"type":"structure","required":["VolumeARN"],"members":{"VolumeARN":{}}},"output":{"type":"structure","members":{"VolumeARN":{}}}},"DeleteTape":{"input":{"type":"structure","required":["GatewayARN","TapeARN"],"members":{"GatewayARN":{},"TapeARN":{}}},"output":{"type":"structure","members":{"TapeARN":{}}}},"DeleteTapeArchive":{"input":{"type":"structure","required":["TapeARN"],"members":{"TapeARN":{}}},"output":{"type":"structure","members":{"TapeARN":{}}}},"DeleteVolume":{"input":{"type":"structure","required":["VolumeARN"],"members":{"VolumeARN":{}}},"output":{"type":"structure","members":{"VolumeARN":{}}}},"DescribeBandwidthRateLimit":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"AverageUploadRateLimitInBitsPerSec":{"type":"long"},"AverageDownloadRateLimitInBitsPerSec":{"type":"long"}}}},"DescribeCache":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"DiskIds":{"shape":"Sc"},"CacheAllocatedInBytes":{"type":"long"},"CacheUsedPercentage":{"type":"double"},"CacheDirtyPercentage":{"type":"double"},"CacheHitPercentage":{"type":"double"},"CacheMissPercentage":{"type":"double"}}}},"DescribeCachediSCSIVolumes":{"input":{"type":"structure","required":["VolumeARNs"],"members":{"VolumeARNs":{"shape":"S2q"}}},"output":{"type":"structure","members":{"CachediSCSIVolumes":{"type":"list","member":{"type":"structure","members":{"VolumeARN":{},"VolumeId":{},"VolumeType":{},"VolumeStatus":{},"VolumeSizeInBytes":{"type":"long"},"VolumeProgress":{"type":"double"},"SourceSnapshotId":{},"VolumeiSCSIAttributes":{"shape":"S2y"},"CreatedDate":{"type":"timestamp"}}}}}}},"DescribeChapCredentials":{"input":{"type":"structure","required":["TargetARN"],"members":{"TargetARN":{}}},"output":{"type":"structure","members":{"ChapCredentials":{"type":"list","member":{"type":"structure","members":{"TargetARN":{},"SecretToAuthenticateInitiator":{},"InitiatorName":{},"SecretToAuthenticateTarget":{}}}}}}},"DescribeGatewayInformation":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"GatewayId":{},"GatewayName":{},"GatewayTimezone":{},"GatewayState":{},"GatewayNetworkInterfaces":{"type":"list","member":{"type":"structure","members":{"Ipv4Address":{},"MacAddress":{},"Ipv6Address":{}}}},"GatewayType":{},"NextUpdateAvailabilityDate":{},"LastSoftwareUpdate":{}}}},"DescribeMaintenanceStartTime":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"HourOfDay":{"type":"integer"},"MinuteOfHour":{"type":"integer"},"DayOfWeek":{"type":"integer"},"Timezone":{}}}},"DescribeNFSFileShares":{"input":{"type":"structure","required":["FileShareARNList"],"members":{"FileShareARNList":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"NFSFileShareInfoList":{"type":"list","member":{"type":"structure","members":{"NFSFileShareDefaults":{"shape":"S15"},"FileShareARN":{},"FileShareId":{},"FileShareStatus":{},"GatewayARN":{},"KMSEncrypted":{"type":"boolean"},"KMSKey":{},"Path":{},"Role":{},"LocationARN":{},"DefaultStorageClass":{},"ClientList":{"shape":"S1d"},"Squash":{},"ReadOnly":{"type":"boolean"}}}}}}},"DescribeSnapshotSchedule":{"input":{"type":"structure","required":["VolumeARN"],"members":{"VolumeARN":{}}},"output":{"type":"structure","members":{"VolumeARN":{},"StartAt":{"type":"integer"},"RecurrenceInHours":{"type":"integer"},"Description":{},"Timezone":{}}}},"DescribeStorediSCSIVolumes":{"input":{"type":"structure","required":["VolumeARNs"],"members":{"VolumeARNs":{"shape":"S2q"}}},"output":{"type":"structure","members":{"StorediSCSIVolumes":{"type":"list","member":{"type":"structure","members":{"VolumeARN":{},"VolumeId":{},"VolumeType":{},"VolumeStatus":{},"VolumeSizeInBytes":{"type":"long"},"VolumeProgress":{"type":"double"},"VolumeDiskId":{},"SourceSnapshotId":{},"PreservedExistingData":{"type":"boolean"},"VolumeiSCSIAttributes":{"shape":"S2y"},"CreatedDate":{"type":"timestamp"}}}}}}},"DescribeTapeArchives":{"input":{"type":"structure","members":{"TapeARNs":{"shape":"S1z"},"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"TapeArchives":{"type":"list","member":{"type":"structure","members":{"TapeARN":{},"TapeBarcode":{},"TapeCreatedDate":{"type":"timestamp"},"TapeSizeInBytes":{"type":"long"},"CompletionTime":{"type":"timestamp"},"RetrievedTo":{},"TapeStatus":{},"TapeUsedInBytes":{"type":"long"}}}},"Marker":{}}}},"DescribeTapeRecoveryPoints":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{},"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"GatewayARN":{},"TapeRecoveryPointInfos":{"type":"list","member":{"type":"structure","members":{"TapeARN":{},"TapeRecoveryPointTime":{"type":"timestamp"},"TapeSizeInBytes":{"type":"long"},"TapeStatus":{}}}},"Marker":{}}}},"DescribeTapes":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{},"TapeARNs":{"shape":"S1z"},"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Tapes":{"type":"list","member":{"type":"structure","members":{"TapeARN":{},"TapeBarcode":{},"TapeCreatedDate":{"type":"timestamp"},"TapeSizeInBytes":{"type":"long"},"TapeStatus":{},"VTLDevice":{},"Progress":{"type":"double"},"TapeUsedInBytes":{"type":"long"}}}},"Marker":{}}}},"DescribeUploadBuffer":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"DiskIds":{"shape":"Sc"},"UploadBufferUsedInBytes":{"type":"long"},"UploadBufferAllocatedInBytes":{"type":"long"}}}},"DescribeVTLDevices":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{},"VTLDeviceARNs":{"type":"list","member":{}},"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"GatewayARN":{},"VTLDevices":{"type":"list","member":{"type":"structure","members":{"VTLDeviceARN":{},"VTLDeviceType":{},"VTLDeviceVendor":{},"VTLDeviceProductIdentifier":{},"DeviceiSCSIAttributes":{"type":"structure","members":{"TargetARN":{},"NetworkInterfaceId":{},"NetworkInterfacePort":{"type":"integer"},"ChapEnabled":{"type":"boolean"}}}}}},"Marker":{}}}},"DescribeWorkingStorage":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"DiskIds":{"shape":"Sc"},"WorkingStorageUsedInBytes":{"type":"long"},"WorkingStorageAllocatedInBytes":{"type":"long"}}}},"DisableGateway":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"ListFileShares":{"input":{"type":"structure","members":{"GatewayARN":{},"Limit":{"type":"integer"},"Marker":{}}},"output":{"type":"structure","members":{"Marker":{},"NextMarker":{},"FileShareInfoList":{"type":"list","member":{"type":"structure","members":{"FileShareARN":{},"FileShareId":{},"FileShareStatus":{},"GatewayARN":{}}}}}}},"ListGateways":{"input":{"type":"structure","members":{"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Gateways":{"type":"list","member":{"type":"structure","members":{"GatewayId":{},"GatewayARN":{},"GatewayType":{},"GatewayOperationalState":{},"GatewayName":{}}}},"Marker":{}}}},"ListLocalDisks":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"Disks":{"type":"list","member":{"type":"structure","members":{"DiskId":{},"DiskPath":{},"DiskNode":{},"DiskStatus":{},"DiskSizeInBytes":{"type":"long"},"DiskAllocationType":{},"DiskAllocationResource":{}}}}}}},"ListTagsForResource":{"input":{"type":"structure","required":["ResourceARN"],"members":{"ResourceARN":{},"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"ResourceARN":{},"Marker":{},"Tags":{"shape":"Sh"}}}},"ListTapes":{"input":{"type":"structure","members":{"TapeARNs":{"shape":"S1z"},"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"TapeInfos":{"type":"list","member":{"type":"structure","members":{"TapeARN":{},"TapeBarcode":{},"TapeSizeInBytes":{"type":"long"},"TapeStatus":{},"GatewayARN":{}}}},"Marker":{}}}},"ListVolumeInitiators":{"input":{"type":"structure","required":["VolumeARN"],"members":{"VolumeARN":{}}},"output":{"type":"structure","members":{"Initiators":{"type":"list","member":{}}}}},"ListVolumeRecoveryPoints":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"VolumeRecoveryPointInfos":{"type":"list","member":{"type":"structure","members":{"VolumeARN":{},"VolumeSizeInBytes":{"type":"long"},"VolumeUsageInBytes":{"type":"long"},"VolumeRecoveryPointTime":{}}}}}}},"ListVolumes":{"input":{"type":"structure","members":{"GatewayARN":{},"Marker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"GatewayARN":{},"Marker":{},"VolumeInfos":{"type":"list","member":{"type":"structure","members":{"VolumeARN":{},"VolumeId":{},"GatewayARN":{},"GatewayId":{},"VolumeType":{},"VolumeSizeInBytes":{"type":"long"}}}}}}},"RefreshCache":{"input":{"type":"structure","required":["FileShareARN"],"members":{"FileShareARN":{}}},"output":{"type":"structure","members":{"FileShareARN":{}}}},"RemoveTagsFromResource":{"input":{"type":"structure","required":["ResourceARN","TagKeys"],"members":{"ResourceARN":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"ResourceARN":{}}}},"ResetCache":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"RetrieveTapeArchive":{"input":{"type":"structure","required":["TapeARN","GatewayARN"],"members":{"TapeARN":{},"GatewayARN":{}}},"output":{"type":"structure","members":{"TapeARN":{}}}},"RetrieveTapeRecoveryPoint":{"input":{"type":"structure","required":["TapeARN","GatewayARN"],"members":{"TapeARN":{},"GatewayARN":{}}},"output":{"type":"structure","members":{"TapeARN":{}}}},"SetLocalConsolePassword":{"input":{"type":"structure","required":["GatewayARN","LocalConsolePassword"],"members":{"GatewayARN":{},"LocalConsolePassword":{"type":"string","sensitive":true}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"ShutdownGateway":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"StartGateway":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"UpdateBandwidthRateLimit":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{},"AverageUploadRateLimitInBitsPerSec":{"type":"long"},"AverageDownloadRateLimitInBitsPerSec":{"type":"long"}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"UpdateChapCredentials":{"input":{"type":"structure","required":["TargetARN","SecretToAuthenticateInitiator","InitiatorName"],"members":{"TargetARN":{},"SecretToAuthenticateInitiator":{},"InitiatorName":{},"SecretToAuthenticateTarget":{}}},"output":{"type":"structure","members":{"TargetARN":{},"InitiatorName":{}}}},"UpdateGatewayInformation":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{},"GatewayName":{},"GatewayTimezone":{}}},"output":{"type":"structure","members":{"GatewayARN":{},"GatewayName":{}}}},"UpdateGatewaySoftwareNow":{"input":{"type":"structure","required":["GatewayARN"],"members":{"GatewayARN":{}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"UpdateMaintenanceStartTime":{"input":{"type":"structure","required":["GatewayARN","HourOfDay","MinuteOfHour","DayOfWeek"],"members":{"GatewayARN":{},"HourOfDay":{"type":"integer"},"MinuteOfHour":{"type":"integer"},"DayOfWeek":{"type":"integer"}}},"output":{"type":"structure","members":{"GatewayARN":{}}}},"UpdateNFSFileShare":{"input":{"type":"structure","required":["FileShareARN"],"members":{"FileShareARN":{},"KMSEncrypted":{"type":"boolean"},"KMSKey":{},"NFSFileShareDefaults":{"shape":"S15"},"DefaultStorageClass":{},"ClientList":{"shape":"S1d"},"Squash":{},"ReadOnly":{"type":"boolean"}}},"output":{"type":"structure","members":{"FileShareARN":{}}}},"UpdateSnapshotSchedule":{"input":{"type":"structure","required":["VolumeARN","StartAt","RecurrenceInHours"],"members":{"VolumeARN":{},"StartAt":{"type":"integer"},"RecurrenceInHours":{"type":"integer"},"Description":{}}},"output":{"type":"structure","members":{"VolumeARN":{}}}},"UpdateVTLDeviceType":{"input":{"type":"structure","required":["VTLDeviceARN","DeviceType"],"members":{"VTLDeviceARN":{},"DeviceType":{}}},"output":{"type":"structure","members":{"VTLDeviceARN":{}}}}},"shapes":{"Sc":{"type":"list","member":{}},"Sh":{"type":"list","member":{"type":"structure","required":["Key","Value"],"members":{"Key":{},"Value":{}}}},"S15":{"type":"structure","members":{"FileMode":{},"DirectoryMode":{},"GroupId":{"type":"long"},"OwnerId":{"type":"long"}}},"S1d":{"type":"list","member":{}},"S1z":{"type":"list","member":{}},"S2q":{"type":"list","member":{}},"S2y":{"type":"structure","members":{"TargetARN":{},"NetworkInterfaceId":{},"NetworkInterfacePort":{"type":"integer"},"LunNumber":{"type":"integer"},"ChapEnabled":{"type":"boolean"}}}}}

/***/ }),
/* 352 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeCachediSCSIVolumes":{"result_key":"CachediSCSIVolumes"},"DescribeStorediSCSIVolumes":{"result_key":"StorediSCSIVolumes"},"DescribeTapeArchives":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"TapeArchives"},"DescribeTapeRecoveryPoints":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"TapeRecoveryPointInfos"},"DescribeTapes":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"Tapes"},"DescribeVTLDevices":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"VTLDevices"},"ListGateways":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"Gateways"},"ListLocalDisks":{"result_key":"Disks"},"ListVolumeRecoveryPoints":{"result_key":"VolumeRecoveryPointInfos"},"ListVolumes":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"VolumeInfos"}}}

/***/ }),
/* 353 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-08-10","endpointPrefix":"streams.dynamodb","jsonVersion":"1.0","protocol":"json","serviceFullName":"Amazon DynamoDB Streams","signatureVersion":"v4","signingName":"dynamodb","targetPrefix":"DynamoDBStreams_20120810","uid":"streams-dynamodb-2012-08-10"},"operations":{"DescribeStream":{"input":{"type":"structure","required":["StreamArn"],"members":{"StreamArn":{},"Limit":{"type":"integer"},"ExclusiveStartShardId":{}}},"output":{"type":"structure","members":{"StreamDescription":{"type":"structure","members":{"StreamArn":{},"StreamLabel":{},"StreamStatus":{},"StreamViewType":{},"CreationRequestDateTime":{"type":"timestamp"},"TableName":{},"KeySchema":{"type":"list","member":{"type":"structure","required":["AttributeName","KeyType"],"members":{"AttributeName":{},"KeyType":{}}}},"Shards":{"type":"list","member":{"type":"structure","members":{"ShardId":{},"SequenceNumberRange":{"type":"structure","members":{"StartingSequenceNumber":{},"EndingSequenceNumber":{}}},"ParentShardId":{}}}},"LastEvaluatedShardId":{}}}}}},"GetRecords":{"input":{"type":"structure","required":["ShardIterator"],"members":{"ShardIterator":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"Records":{"type":"list","member":{"type":"structure","members":{"eventID":{},"eventName":{},"eventVersion":{},"eventSource":{},"awsRegion":{},"dynamodb":{"type":"structure","members":{"ApproximateCreationDateTime":{"type":"timestamp"},"Keys":{"shape":"Sr"},"NewImage":{"shape":"Sr"},"OldImage":{"shape":"Sr"},"SequenceNumber":{},"SizeBytes":{"type":"long"},"StreamViewType":{}}},"userIdentity":{"type":"structure","members":{"PrincipalId":{},"Type":{}}}}}},"NextShardIterator":{}}}},"GetShardIterator":{"input":{"type":"structure","required":["StreamArn","ShardId","ShardIteratorType"],"members":{"StreamArn":{},"ShardId":{},"ShardIteratorType":{},"SequenceNumber":{}}},"output":{"type":"structure","members":{"ShardIterator":{}}}},"ListStreams":{"input":{"type":"structure","members":{"TableName":{},"Limit":{"type":"integer"},"ExclusiveStartStreamArn":{}}},"output":{"type":"structure","members":{"Streams":{"type":"list","member":{"type":"structure","members":{"StreamArn":{},"TableName":{},"StreamLabel":{}}}},"LastEvaluatedStreamArn":{}}}}},"shapes":{"Sr":{"type":"map","key":{},"value":{"shape":"St"}},"St":{"type":"structure","members":{"S":{},"N":{},"B":{"type":"blob"},"SS":{"type":"list","member":{}},"NS":{"type":"list","member":{}},"BS":{"type":"list","member":{"type":"blob"}},"M":{"type":"map","key":{},"value":{"shape":"St"}},"L":{"type":"list","member":{"shape":"St"}},"NULL":{"type":"boolean"},"BOOL":{"type":"boolean"}}}}}

/***/ }),
/* 354 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 355 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2011-06-15","endpointPrefix":"sts","globalEndpoint":"sts.amazonaws.com","protocol":"query","serviceAbbreviation":"AWS STS","serviceFullName":"AWS Security Token Service","signatureVersion":"v4","uid":"sts-2011-06-15","xmlNamespace":"https://sts.amazonaws.com/doc/2011-06-15/"},"operations":{"AssumeRole":{"input":{"type":"structure","required":["RoleArn","RoleSessionName"],"members":{"RoleArn":{},"RoleSessionName":{},"Policy":{},"DurationSeconds":{"type":"integer"},"ExternalId":{},"SerialNumber":{},"TokenCode":{}}},"output":{"resultWrapper":"AssumeRoleResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"AssumedRoleUser":{"shape":"Sf"},"PackedPolicySize":{"type":"integer"}}}},"AssumeRoleWithSAML":{"input":{"type":"structure","required":["RoleArn","PrincipalArn","SAMLAssertion"],"members":{"RoleArn":{},"PrincipalArn":{},"SAMLAssertion":{},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithSAMLResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"AssumedRoleUser":{"shape":"Sf"},"PackedPolicySize":{"type":"integer"},"Subject":{},"SubjectType":{},"Issuer":{},"Audience":{},"NameQualifier":{}}}},"AssumeRoleWithWebIdentity":{"input":{"type":"structure","required":["RoleArn","RoleSessionName","WebIdentityToken"],"members":{"RoleArn":{},"RoleSessionName":{},"WebIdentityToken":{},"ProviderId":{},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"AssumeRoleWithWebIdentityResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"SubjectFromWebIdentityToken":{},"AssumedRoleUser":{"shape":"Sf"},"PackedPolicySize":{"type":"integer"},"Provider":{},"Audience":{}}}},"DecodeAuthorizationMessage":{"input":{"type":"structure","required":["EncodedMessage"],"members":{"EncodedMessage":{}}},"output":{"resultWrapper":"DecodeAuthorizationMessageResult","type":"structure","members":{"DecodedMessage":{}}}},"GetCallerIdentity":{"input":{"type":"structure","members":{}},"output":{"resultWrapper":"GetCallerIdentityResult","type":"structure","members":{"UserId":{},"Account":{},"Arn":{}}}},"GetFederationToken":{"input":{"type":"structure","required":["Name"],"members":{"Name":{},"Policy":{},"DurationSeconds":{"type":"integer"}}},"output":{"resultWrapper":"GetFederationTokenResult","type":"structure","members":{"Credentials":{"shape":"Sa"},"FederatedUser":{"type":"structure","required":["FederatedUserId","Arn"],"members":{"FederatedUserId":{},"Arn":{}}},"PackedPolicySize":{"type":"integer"}}}},"GetSessionToken":{"input":{"type":"structure","members":{"DurationSeconds":{"type":"integer"},"SerialNumber":{},"TokenCode":{}}},"output":{"resultWrapper":"GetSessionTokenResult","type":"structure","members":{"Credentials":{"shape":"Sa"}}}}},"shapes":{"Sa":{"type":"structure","required":["AccessKeyId","SecretAccessKey","SessionToken","Expiration"],"members":{"AccessKeyId":{},"SecretAccessKey":{},"SessionToken":{},"Expiration":{"type":"timestamp"}}},"Sf":{"type":"structure","required":["AssumedRoleId","Arn"],"members":{"AssumedRoleId":{},"Arn":{}}}}}

/***/ }),
/* 356 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 357 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"uid":"support-2013-04-15","apiVersion":"2013-04-15","endpointPrefix":"support","jsonVersion":"1.1","protocol":"json","serviceFullName":"AWS Support","signatureVersion":"v4","targetPrefix":"AWSSupport_20130415"},"operations":{"AddAttachmentsToSet":{"input":{"type":"structure","required":["attachments"],"members":{"attachmentSetId":{},"attachments":{"type":"list","member":{"shape":"S4"}}}},"output":{"type":"structure","members":{"attachmentSetId":{},"expiryTime":{}}}},"AddCommunicationToCase":{"input":{"type":"structure","required":["communicationBody"],"members":{"caseId":{},"communicationBody":{},"ccEmailAddresses":{"shape":"Sc"},"attachmentSetId":{}}},"output":{"type":"structure","members":{"result":{"type":"boolean"}}}},"CreateCase":{"input":{"type":"structure","required":["subject","communicationBody"],"members":{"subject":{},"serviceCode":{},"severityCode":{},"categoryCode":{},"communicationBody":{},"ccEmailAddresses":{"shape":"Sc"},"language":{},"issueType":{},"attachmentSetId":{}}},"output":{"type":"structure","members":{"caseId":{}}}},"DescribeAttachment":{"input":{"type":"structure","required":["attachmentId"],"members":{"attachmentId":{}}},"output":{"type":"structure","members":{"attachment":{"shape":"S4"}}}},"DescribeCases":{"input":{"type":"structure","members":{"caseIdList":{"type":"list","member":{}},"displayId":{},"afterTime":{},"beforeTime":{},"includeResolvedCases":{"type":"boolean"},"nextToken":{},"maxResults":{"type":"integer"},"language":{},"includeCommunications":{"type":"boolean"}}},"output":{"type":"structure","members":{"cases":{"type":"list","member":{"type":"structure","members":{"caseId":{},"displayId":{},"subject":{},"status":{},"serviceCode":{},"categoryCode":{},"severityCode":{},"submittedBy":{},"timeCreated":{},"recentCommunications":{"type":"structure","members":{"communications":{"shape":"S17"},"nextToken":{}}},"ccEmailAddresses":{"shape":"Sc"},"language":{}}}},"nextToken":{}}}},"DescribeCommunications":{"input":{"type":"structure","required":["caseId"],"members":{"caseId":{},"beforeTime":{},"afterTime":{},"nextToken":{},"maxResults":{"type":"integer"}}},"output":{"type":"structure","members":{"communications":{"shape":"S17"},"nextToken":{}}}},"DescribeServices":{"input":{"type":"structure","members":{"serviceCodeList":{"type":"list","member":{}},"language":{}}},"output":{"type":"structure","members":{"services":{"type":"list","member":{"type":"structure","members":{"code":{},"name":{},"categories":{"type":"list","member":{"type":"structure","members":{"code":{},"name":{}}}}}}}}}},"DescribeSeverityLevels":{"input":{"type":"structure","members":{"language":{}}},"output":{"type":"structure","members":{"severityLevels":{"type":"list","member":{"type":"structure","members":{"code":{},"name":{}}}}}}},"DescribeTrustedAdvisorCheckRefreshStatuses":{"input":{"type":"structure","required":["checkIds"],"members":{"checkIds":{"shape":"S1t"}}},"output":{"type":"structure","required":["statuses"],"members":{"statuses":{"type":"list","member":{"shape":"S1x"}}}}},"DescribeTrustedAdvisorCheckResult":{"input":{"type":"structure","required":["checkId"],"members":{"checkId":{},"language":{}}},"output":{"type":"structure","members":{"result":{"type":"structure","required":["checkId","timestamp","status","resourcesSummary","categorySpecificSummary","flaggedResources"],"members":{"checkId":{},"timestamp":{},"status":{},"resourcesSummary":{"shape":"S22"},"categorySpecificSummary":{"shape":"S23"},"flaggedResources":{"type":"list","member":{"type":"structure","required":["status","resourceId","metadata"],"members":{"status":{},"region":{},"resourceId":{},"isSuppressed":{"type":"boolean"},"metadata":{"shape":"S1t"}}}}}}}}},"DescribeTrustedAdvisorCheckSummaries":{"input":{"type":"structure","required":["checkIds"],"members":{"checkIds":{"shape":"S1t"}}},"output":{"type":"structure","required":["summaries"],"members":{"summaries":{"type":"list","member":{"type":"structure","required":["checkId","timestamp","status","resourcesSummary","categorySpecificSummary"],"members":{"checkId":{},"timestamp":{},"status":{},"hasFlaggedResources":{"type":"boolean"},"resourcesSummary":{"shape":"S22"},"categorySpecificSummary":{"shape":"S23"}}}}}}},"DescribeTrustedAdvisorChecks":{"input":{"type":"structure","required":["language"],"members":{"language":{}}},"output":{"type":"structure","required":["checks"],"members":{"checks":{"type":"list","member":{"type":"structure","required":["id","name","description","category","metadata"],"members":{"id":{},"name":{},"description":{},"category":{},"metadata":{"shape":"S1t"}}}}}}},"RefreshTrustedAdvisorCheck":{"input":{"type":"structure","required":["checkId"],"members":{"checkId":{}}},"output":{"type":"structure","required":["status"],"members":{"status":{"shape":"S1x"}}}},"ResolveCase":{"input":{"type":"structure","members":{"caseId":{}}},"output":{"type":"structure","members":{"initialCaseStatus":{},"finalCaseStatus":{}}}}},"shapes":{"S4":{"type":"structure","members":{"fileName":{},"data":{"type":"blob"}}},"Sc":{"type":"list","member":{}},"S17":{"type":"list","member":{"type":"structure","members":{"caseId":{},"body":{},"submittedBy":{},"timeCreated":{},"attachmentSet":{"type":"list","member":{"type":"structure","members":{"attachmentId":{},"fileName":{}}}}}}},"S1t":{"type":"list","member":{}},"S1x":{"type":"structure","required":["checkId","status","millisUntilNextRefreshable"],"members":{"checkId":{},"status":{},"millisUntilNextRefreshable":{"type":"long"}}},"S22":{"type":"structure","required":["resourcesProcessed","resourcesFlagged","resourcesIgnored","resourcesSuppressed"],"members":{"resourcesProcessed":{"type":"long"},"resourcesFlagged":{"type":"long"},"resourcesIgnored":{"type":"long"},"resourcesSuppressed":{"type":"long"}}},"S23":{"type":"structure","members":{"costOptimizing":{"type":"structure","required":["estimatedMonthlySavings","estimatedPercentMonthlySavings"],"members":{"estimatedMonthlySavings":{"type":"double"},"estimatedPercentMonthlySavings":{"type":"double"}}}}}}}

/***/ }),
/* 358 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeCases":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"cases"},"DescribeCommunications":{"input_token":"nextToken","output_token":"nextToken","limit_key":"maxResults","result_key":"communications"},"DescribeServices":{"result_key":"services"},"DescribeTrustedAdvisorCheckRefreshStatuses":{"result_key":"statuses"},"DescribeTrustedAdvisorCheckSummaries":{"result_key":"summaries"}}}

/***/ }),
/* 359 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2012-01-25","endpointPrefix":"swf","jsonVersion":"1.0","protocol":"json","serviceAbbreviation":"Amazon SWF","serviceFullName":"Amazon Simple Workflow Service","signatureVersion":"v4","targetPrefix":"SimpleWorkflowService","timestampFormat":"unixTimestamp","uid":"swf-2012-01-25"},"operations":{"CountClosedWorkflowExecutions":{"input":{"type":"structure","required":["domain"],"members":{"domain":{},"startTimeFilter":{"shape":"S3"},"closeTimeFilter":{"shape":"S3"},"executionFilter":{"shape":"S5"},"typeFilter":{"shape":"S7"},"tagFilter":{"shape":"Sa"},"closeStatusFilter":{"shape":"Sc"}}},"output":{"shape":"Se"}},"CountOpenWorkflowExecutions":{"input":{"type":"structure","required":["domain","startTimeFilter"],"members":{"domain":{},"startTimeFilter":{"shape":"S3"},"typeFilter":{"shape":"S7"},"tagFilter":{"shape":"Sa"},"executionFilter":{"shape":"S5"}}},"output":{"shape":"Se"}},"CountPendingActivityTasks":{"input":{"type":"structure","required":["domain","taskList"],"members":{"domain":{},"taskList":{"shape":"Sj"}}},"output":{"shape":"Sk"}},"CountPendingDecisionTasks":{"input":{"type":"structure","required":["domain","taskList"],"members":{"domain":{},"taskList":{"shape":"Sj"}}},"output":{"shape":"Sk"}},"DeprecateActivityType":{"input":{"type":"structure","required":["domain","activityType"],"members":{"domain":{},"activityType":{"shape":"Sn"}}}},"DeprecateDomain":{"input":{"type":"structure","required":["name"],"members":{"name":{}}}},"DeprecateWorkflowType":{"input":{"type":"structure","required":["domain","workflowType"],"members":{"domain":{},"workflowType":{"shape":"Sr"}}}},"DescribeActivityType":{"input":{"type":"structure","required":["domain","activityType"],"members":{"domain":{},"activityType":{"shape":"Sn"}}},"output":{"type":"structure","required":["typeInfo","configuration"],"members":{"typeInfo":{"shape":"Su"},"configuration":{"type":"structure","members":{"defaultTaskStartToCloseTimeout":{},"defaultTaskHeartbeatTimeout":{},"defaultTaskList":{"shape":"Sj"},"defaultTaskPriority":{},"defaultTaskScheduleToStartTimeout":{},"defaultTaskScheduleToCloseTimeout":{}}}}}},"DescribeDomain":{"input":{"type":"structure","required":["name"],"members":{"name":{}}},"output":{"type":"structure","required":["domainInfo","configuration"],"members":{"domainInfo":{"shape":"S12"},"configuration":{"type":"structure","required":["workflowExecutionRetentionPeriodInDays"],"members":{"workflowExecutionRetentionPeriodInDays":{}}}}}},"DescribeWorkflowExecution":{"input":{"type":"structure","required":["domain","execution"],"members":{"domain":{},"execution":{"shape":"S16"}}},"output":{"type":"structure","required":["executionInfo","executionConfiguration","openCounts"],"members":{"executionInfo":{"shape":"S19"},"executionConfiguration":{"type":"structure","required":["taskStartToCloseTimeout","executionStartToCloseTimeout","taskList","childPolicy"],"members":{"taskStartToCloseTimeout":{},"executionStartToCloseTimeout":{},"taskList":{"shape":"Sj"},"taskPriority":{},"childPolicy":{},"lambdaRole":{}}},"openCounts":{"type":"structure","required":["openActivityTasks","openDecisionTasks","openTimers","openChildWorkflowExecutions"],"members":{"openActivityTasks":{"type":"integer"},"openDecisionTasks":{"type":"integer"},"openTimers":{"type":"integer"},"openChildWorkflowExecutions":{"type":"integer"},"openLambdaFunctions":{"type":"integer"}}},"latestActivityTaskTimestamp":{"type":"timestamp"},"latestExecutionContext":{}}}},"DescribeWorkflowType":{"input":{"type":"structure","required":["domain","workflowType"],"members":{"domain":{},"workflowType":{"shape":"Sr"}}},"output":{"type":"structure","required":["typeInfo","configuration"],"members":{"typeInfo":{"shape":"S1m"},"configuration":{"type":"structure","members":{"defaultTaskStartToCloseTimeout":{},"defaultExecutionStartToCloseTimeout":{},"defaultTaskList":{"shape":"Sj"},"defaultTaskPriority":{},"defaultChildPolicy":{},"defaultLambdaRole":{}}}}}},"GetWorkflowExecutionHistory":{"input":{"type":"structure","required":["domain","execution"],"members":{"domain":{},"execution":{"shape":"S16"},"nextPageToken":{},"maximumPageSize":{"type":"integer"},"reverseOrder":{"type":"boolean"}}},"output":{"type":"structure","required":["events"],"members":{"events":{"shape":"S1t"},"nextPageToken":{}}}},"ListActivityTypes":{"input":{"type":"structure","required":["domain","registrationStatus"],"members":{"domain":{},"name":{},"registrationStatus":{},"nextPageToken":{},"maximumPageSize":{"type":"integer"},"reverseOrder":{"type":"boolean"}}},"output":{"type":"structure","required":["typeInfos"],"members":{"typeInfos":{"type":"list","member":{"shape":"Su"}},"nextPageToken":{}}}},"ListClosedWorkflowExecutions":{"input":{"type":"structure","required":["domain"],"members":{"domain":{},"startTimeFilter":{"shape":"S3"},"closeTimeFilter":{"shape":"S3"},"executionFilter":{"shape":"S5"},"closeStatusFilter":{"shape":"Sc"},"typeFilter":{"shape":"S7"},"tagFilter":{"shape":"Sa"},"nextPageToken":{},"maximumPageSize":{"type":"integer"},"reverseOrder":{"type":"boolean"}}},"output":{"shape":"S4g"}},"ListDomains":{"input":{"type":"structure","required":["registrationStatus"],"members":{"nextPageToken":{},"registrationStatus":{},"maximumPageSize":{"type":"integer"},"reverseOrder":{"type":"boolean"}}},"output":{"type":"structure","required":["domainInfos"],"members":{"domainInfos":{"type":"list","member":{"shape":"S12"}},"nextPageToken":{}}}},"ListOpenWorkflowExecutions":{"input":{"type":"structure","required":["domain","startTimeFilter"],"members":{"domain":{},"startTimeFilter":{"shape":"S3"},"typeFilter":{"shape":"S7"},"tagFilter":{"shape":"Sa"},"nextPageToken":{},"maximumPageSize":{"type":"integer"},"reverseOrder":{"type":"boolean"},"executionFilter":{"shape":"S5"}}},"output":{"shape":"S4g"}},"ListWorkflowTypes":{"input":{"type":"structure","required":["domain","registrationStatus"],"members":{"domain":{},"name":{},"registrationStatus":{},"nextPageToken":{},"maximumPageSize":{"type":"integer"},"reverseOrder":{"type":"boolean"}}},"output":{"type":"structure","required":["typeInfos"],"members":{"typeInfos":{"type":"list","member":{"shape":"S1m"}},"nextPageToken":{}}}},"PollForActivityTask":{"input":{"type":"structure","required":["domain","taskList"],"members":{"domain":{},"taskList":{"shape":"Sj"},"identity":{}}},"output":{"type":"structure","required":["taskToken","activityId","startedEventId","workflowExecution","activityType"],"members":{"taskToken":{},"activityId":{},"startedEventId":{"type":"long"},"workflowExecution":{"shape":"S16"},"activityType":{"shape":"Sn"},"input":{}}}},"PollForDecisionTask":{"input":{"type":"structure","required":["domain","taskList"],"members":{"domain":{},"taskList":{"shape":"Sj"},"identity":{},"nextPageToken":{},"maximumPageSize":{"type":"integer"},"reverseOrder":{"type":"boolean"}}},"output":{"type":"structure","required":["taskToken","startedEventId","workflowExecution","workflowType","events"],"members":{"taskToken":{},"startedEventId":{"type":"long"},"workflowExecution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"events":{"shape":"S1t"},"nextPageToken":{},"previousStartedEventId":{"type":"long"}}}},"RecordActivityTaskHeartbeat":{"input":{"type":"structure","required":["taskToken"],"members":{"taskToken":{},"details":{}}},"output":{"type":"structure","required":["cancelRequested"],"members":{"cancelRequested":{"type":"boolean"}}}},"RegisterActivityType":{"input":{"type":"structure","required":["domain","name","version"],"members":{"domain":{},"name":{},"version":{},"description":{},"defaultTaskStartToCloseTimeout":{},"defaultTaskHeartbeatTimeout":{},"defaultTaskList":{"shape":"Sj"},"defaultTaskPriority":{},"defaultTaskScheduleToStartTimeout":{},"defaultTaskScheduleToCloseTimeout":{}}}},"RegisterDomain":{"input":{"type":"structure","required":["name","workflowExecutionRetentionPeriodInDays"],"members":{"name":{},"description":{},"workflowExecutionRetentionPeriodInDays":{}}}},"RegisterWorkflowType":{"input":{"type":"structure","required":["domain","name","version"],"members":{"domain":{},"name":{},"version":{},"description":{},"defaultTaskStartToCloseTimeout":{},"defaultExecutionStartToCloseTimeout":{},"defaultTaskList":{"shape":"Sj"},"defaultTaskPriority":{},"defaultChildPolicy":{},"defaultLambdaRole":{}}}},"RequestCancelWorkflowExecution":{"input":{"type":"structure","required":["domain","workflowId"],"members":{"domain":{},"workflowId":{},"runId":{}}}},"RespondActivityTaskCanceled":{"input":{"type":"structure","required":["taskToken"],"members":{"taskToken":{},"details":{}}}},"RespondActivityTaskCompleted":{"input":{"type":"structure","required":["taskToken"],"members":{"taskToken":{},"result":{}}}},"RespondActivityTaskFailed":{"input":{"type":"structure","required":["taskToken"],"members":{"taskToken":{},"reason":{},"details":{}}}},"RespondDecisionTaskCompleted":{"input":{"type":"structure","required":["taskToken"],"members":{"taskToken":{},"decisions":{"type":"list","member":{"type":"structure","required":["decisionType"],"members":{"decisionType":{},"scheduleActivityTaskDecisionAttributes":{"type":"structure","required":["activityType","activityId"],"members":{"activityType":{"shape":"Sn"},"activityId":{},"control":{},"input":{},"scheduleToCloseTimeout":{},"taskList":{"shape":"Sj"},"taskPriority":{},"scheduleToStartTimeout":{},"startToCloseTimeout":{},"heartbeatTimeout":{}}},"requestCancelActivityTaskDecisionAttributes":{"type":"structure","required":["activityId"],"members":{"activityId":{}}},"completeWorkflowExecutionDecisionAttributes":{"type":"structure","members":{"result":{}}},"failWorkflowExecutionDecisionAttributes":{"type":"structure","members":{"reason":{},"details":{}}},"cancelWorkflowExecutionDecisionAttributes":{"type":"structure","members":{"details":{}}},"continueAsNewWorkflowExecutionDecisionAttributes":{"type":"structure","members":{"input":{},"executionStartToCloseTimeout":{},"taskList":{"shape":"Sj"},"taskPriority":{},"taskStartToCloseTimeout":{},"childPolicy":{},"tagList":{"shape":"S1b"},"workflowTypeVersion":{},"lambdaRole":{}}},"recordMarkerDecisionAttributes":{"type":"structure","required":["markerName"],"members":{"markerName":{},"details":{}}},"startTimerDecisionAttributes":{"type":"structure","required":["timerId","startToFireTimeout"],"members":{"timerId":{},"control":{},"startToFireTimeout":{}}},"cancelTimerDecisionAttributes":{"type":"structure","required":["timerId"],"members":{"timerId":{}}},"signalExternalWorkflowExecutionDecisionAttributes":{"type":"structure","required":["workflowId","signalName"],"members":{"workflowId":{},"runId":{},"signalName":{},"input":{},"control":{}}},"requestCancelExternalWorkflowExecutionDecisionAttributes":{"type":"structure","required":["workflowId"],"members":{"workflowId":{},"runId":{},"control":{}}},"startChildWorkflowExecutionDecisionAttributes":{"type":"structure","required":["workflowType","workflowId"],"members":{"workflowType":{"shape":"Sr"},"workflowId":{},"control":{},"input":{},"executionStartToCloseTimeout":{},"taskList":{"shape":"Sj"},"taskPriority":{},"taskStartToCloseTimeout":{},"childPolicy":{},"tagList":{"shape":"S1b"},"lambdaRole":{}}},"scheduleLambdaFunctionDecisionAttributes":{"type":"structure","required":["id","name"],"members":{"id":{},"name":{},"control":{},"input":{},"startToCloseTimeout":{}}}}}},"executionContext":{}}}},"SignalWorkflowExecution":{"input":{"type":"structure","required":["domain","workflowId","signalName"],"members":{"domain":{},"workflowId":{},"runId":{},"signalName":{},"input":{}}}},"StartWorkflowExecution":{"input":{"type":"structure","required":["domain","workflowId","workflowType"],"members":{"domain":{},"workflowId":{},"workflowType":{"shape":"Sr"},"taskList":{"shape":"Sj"},"taskPriority":{},"input":{},"executionStartToCloseTimeout":{},"tagList":{"shape":"S1b"},"taskStartToCloseTimeout":{},"childPolicy":{},"lambdaRole":{}}},"output":{"type":"structure","members":{"runId":{}}}},"TerminateWorkflowExecution":{"input":{"type":"structure","required":["domain","workflowId"],"members":{"domain":{},"workflowId":{},"runId":{},"reason":{},"details":{},"childPolicy":{}}}}},"shapes":{"S3":{"type":"structure","required":["oldestDate"],"members":{"oldestDate":{"type":"timestamp"},"latestDate":{"type":"timestamp"}}},"S5":{"type":"structure","required":["workflowId"],"members":{"workflowId":{}}},"S7":{"type":"structure","required":["name"],"members":{"name":{},"version":{}}},"Sa":{"type":"structure","required":["tag"],"members":{"tag":{}}},"Sc":{"type":"structure","required":["status"],"members":{"status":{}}},"Se":{"type":"structure","required":["count"],"members":{"count":{"type":"integer"},"truncated":{"type":"boolean"}}},"Sj":{"type":"structure","required":["name"],"members":{"name":{}}},"Sk":{"type":"structure","required":["count"],"members":{"count":{"type":"integer"},"truncated":{"type":"boolean"}}},"Sn":{"type":"structure","required":["name","version"],"members":{"name":{},"version":{}}},"Sr":{"type":"structure","required":["name","version"],"members":{"name":{},"version":{}}},"Su":{"type":"structure","required":["activityType","status","creationDate"],"members":{"activityType":{"shape":"Sn"},"status":{},"description":{},"creationDate":{"type":"timestamp"},"deprecationDate":{"type":"timestamp"}}},"S12":{"type":"structure","required":["name","status"],"members":{"name":{},"status":{},"description":{}}},"S16":{"type":"structure","required":["workflowId","runId"],"members":{"workflowId":{},"runId":{}}},"S19":{"type":"structure","required":["execution","workflowType","startTimestamp","executionStatus"],"members":{"execution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"startTimestamp":{"type":"timestamp"},"closeTimestamp":{"type":"timestamp"},"executionStatus":{},"closeStatus":{},"parent":{"shape":"S16"},"tagList":{"shape":"S1b"},"cancelRequested":{"type":"boolean"}}},"S1b":{"type":"list","member":{}},"S1m":{"type":"structure","required":["workflowType","status","creationDate"],"members":{"workflowType":{"shape":"Sr"},"status":{},"description":{},"creationDate":{"type":"timestamp"},"deprecationDate":{"type":"timestamp"}}},"S1t":{"type":"list","member":{"type":"structure","required":["eventTimestamp","eventType","eventId"],"members":{"eventTimestamp":{"type":"timestamp"},"eventType":{},"eventId":{"type":"long"},"workflowExecutionStartedEventAttributes":{"type":"structure","required":["childPolicy","taskList","workflowType"],"members":{"input":{},"executionStartToCloseTimeout":{},"taskStartToCloseTimeout":{},"childPolicy":{},"taskList":{"shape":"Sj"},"taskPriority":{},"workflowType":{"shape":"Sr"},"tagList":{"shape":"S1b"},"continuedExecutionRunId":{},"parentWorkflowExecution":{"shape":"S16"},"parentInitiatedEventId":{"type":"long"},"lambdaRole":{}}},"workflowExecutionCompletedEventAttributes":{"type":"structure","required":["decisionTaskCompletedEventId"],"members":{"result":{},"decisionTaskCompletedEventId":{"type":"long"}}},"completeWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["cause","decisionTaskCompletedEventId"],"members":{"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"workflowExecutionFailedEventAttributes":{"type":"structure","required":["decisionTaskCompletedEventId"],"members":{"reason":{},"details":{},"decisionTaskCompletedEventId":{"type":"long"}}},"failWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["cause","decisionTaskCompletedEventId"],"members":{"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"workflowExecutionTimedOutEventAttributes":{"type":"structure","required":["timeoutType","childPolicy"],"members":{"timeoutType":{},"childPolicy":{}}},"workflowExecutionCanceledEventAttributes":{"type":"structure","required":["decisionTaskCompletedEventId"],"members":{"details":{},"decisionTaskCompletedEventId":{"type":"long"}}},"cancelWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["cause","decisionTaskCompletedEventId"],"members":{"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"workflowExecutionContinuedAsNewEventAttributes":{"type":"structure","required":["decisionTaskCompletedEventId","newExecutionRunId","taskList","childPolicy","workflowType"],"members":{"input":{},"decisionTaskCompletedEventId":{"type":"long"},"newExecutionRunId":{},"executionStartToCloseTimeout":{},"taskList":{"shape":"Sj"},"taskPriority":{},"taskStartToCloseTimeout":{},"childPolicy":{},"tagList":{"shape":"S1b"},"workflowType":{"shape":"Sr"},"lambdaRole":{}}},"continueAsNewWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["cause","decisionTaskCompletedEventId"],"members":{"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"workflowExecutionTerminatedEventAttributes":{"type":"structure","required":["childPolicy"],"members":{"reason":{},"details":{},"childPolicy":{},"cause":{}}},"workflowExecutionCancelRequestedEventAttributes":{"type":"structure","members":{"externalWorkflowExecution":{"shape":"S16"},"externalInitiatedEventId":{"type":"long"},"cause":{}}},"decisionTaskScheduledEventAttributes":{"type":"structure","required":["taskList"],"members":{"taskList":{"shape":"Sj"},"taskPriority":{},"startToCloseTimeout":{}}},"decisionTaskStartedEventAttributes":{"type":"structure","required":["scheduledEventId"],"members":{"identity":{},"scheduledEventId":{"type":"long"}}},"decisionTaskCompletedEventAttributes":{"type":"structure","required":["scheduledEventId","startedEventId"],"members":{"executionContext":{},"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"decisionTaskTimedOutEventAttributes":{"type":"structure","required":["timeoutType","scheduledEventId","startedEventId"],"members":{"timeoutType":{},"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"activityTaskScheduledEventAttributes":{"type":"structure","required":["activityType","activityId","taskList","decisionTaskCompletedEventId"],"members":{"activityType":{"shape":"Sn"},"activityId":{},"input":{},"control":{},"scheduleToStartTimeout":{},"scheduleToCloseTimeout":{},"startToCloseTimeout":{},"taskList":{"shape":"Sj"},"taskPriority":{},"decisionTaskCompletedEventId":{"type":"long"},"heartbeatTimeout":{}}},"activityTaskStartedEventAttributes":{"type":"structure","required":["scheduledEventId"],"members":{"identity":{},"scheduledEventId":{"type":"long"}}},"activityTaskCompletedEventAttributes":{"type":"structure","required":["scheduledEventId","startedEventId"],"members":{"result":{},"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"activityTaskFailedEventAttributes":{"type":"structure","required":["scheduledEventId","startedEventId"],"members":{"reason":{},"details":{},"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"activityTaskTimedOutEventAttributes":{"type":"structure","required":["timeoutType","scheduledEventId","startedEventId"],"members":{"timeoutType":{},"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"},"details":{}}},"activityTaskCanceledEventAttributes":{"type":"structure","required":["scheduledEventId","startedEventId"],"members":{"details":{},"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"},"latestCancelRequestedEventId":{"type":"long"}}},"activityTaskCancelRequestedEventAttributes":{"type":"structure","required":["decisionTaskCompletedEventId","activityId"],"members":{"decisionTaskCompletedEventId":{"type":"long"},"activityId":{}}},"workflowExecutionSignaledEventAttributes":{"type":"structure","required":["signalName"],"members":{"signalName":{},"input":{},"externalWorkflowExecution":{"shape":"S16"},"externalInitiatedEventId":{"type":"long"}}},"markerRecordedEventAttributes":{"type":"structure","required":["markerName","decisionTaskCompletedEventId"],"members":{"markerName":{},"details":{},"decisionTaskCompletedEventId":{"type":"long"}}},"recordMarkerFailedEventAttributes":{"type":"structure","required":["markerName","cause","decisionTaskCompletedEventId"],"members":{"markerName":{},"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"timerStartedEventAttributes":{"type":"structure","required":["timerId","startToFireTimeout","decisionTaskCompletedEventId"],"members":{"timerId":{},"control":{},"startToFireTimeout":{},"decisionTaskCompletedEventId":{"type":"long"}}},"timerFiredEventAttributes":{"type":"structure","required":["timerId","startedEventId"],"members":{"timerId":{},"startedEventId":{"type":"long"}}},"timerCanceledEventAttributes":{"type":"structure","required":["timerId","startedEventId","decisionTaskCompletedEventId"],"members":{"timerId":{},"startedEventId":{"type":"long"},"decisionTaskCompletedEventId":{"type":"long"}}},"startChildWorkflowExecutionInitiatedEventAttributes":{"type":"structure","required":["workflowId","workflowType","taskList","decisionTaskCompletedEventId","childPolicy"],"members":{"workflowId":{},"workflowType":{"shape":"Sr"},"control":{},"input":{},"executionStartToCloseTimeout":{},"taskList":{"shape":"Sj"},"taskPriority":{},"decisionTaskCompletedEventId":{"type":"long"},"childPolicy":{},"taskStartToCloseTimeout":{},"tagList":{"shape":"S1b"},"lambdaRole":{}}},"childWorkflowExecutionStartedEventAttributes":{"type":"structure","required":["workflowExecution","workflowType","initiatedEventId"],"members":{"workflowExecution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"initiatedEventId":{"type":"long"}}},"childWorkflowExecutionCompletedEventAttributes":{"type":"structure","required":["workflowExecution","workflowType","initiatedEventId","startedEventId"],"members":{"workflowExecution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"result":{},"initiatedEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"childWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["workflowExecution","workflowType","initiatedEventId","startedEventId"],"members":{"workflowExecution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"reason":{},"details":{},"initiatedEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"childWorkflowExecutionTimedOutEventAttributes":{"type":"structure","required":["workflowExecution","workflowType","timeoutType","initiatedEventId","startedEventId"],"members":{"workflowExecution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"timeoutType":{},"initiatedEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"childWorkflowExecutionCanceledEventAttributes":{"type":"structure","required":["workflowExecution","workflowType","initiatedEventId","startedEventId"],"members":{"workflowExecution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"details":{},"initiatedEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"childWorkflowExecutionTerminatedEventAttributes":{"type":"structure","required":["workflowExecution","workflowType","initiatedEventId","startedEventId"],"members":{"workflowExecution":{"shape":"S16"},"workflowType":{"shape":"Sr"},"initiatedEventId":{"type":"long"},"startedEventId":{"type":"long"}}},"signalExternalWorkflowExecutionInitiatedEventAttributes":{"type":"structure","required":["workflowId","signalName","decisionTaskCompletedEventId"],"members":{"workflowId":{},"runId":{},"signalName":{},"input":{},"decisionTaskCompletedEventId":{"type":"long"},"control":{}}},"externalWorkflowExecutionSignaledEventAttributes":{"type":"structure","required":["workflowExecution","initiatedEventId"],"members":{"workflowExecution":{"shape":"S16"},"initiatedEventId":{"type":"long"}}},"signalExternalWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["workflowId","cause","initiatedEventId","decisionTaskCompletedEventId"],"members":{"workflowId":{},"runId":{},"cause":{},"initiatedEventId":{"type":"long"},"decisionTaskCompletedEventId":{"type":"long"},"control":{}}},"externalWorkflowExecutionCancelRequestedEventAttributes":{"type":"structure","required":["workflowExecution","initiatedEventId"],"members":{"workflowExecution":{"shape":"S16"},"initiatedEventId":{"type":"long"}}},"requestCancelExternalWorkflowExecutionInitiatedEventAttributes":{"type":"structure","required":["workflowId","decisionTaskCompletedEventId"],"members":{"workflowId":{},"runId":{},"decisionTaskCompletedEventId":{"type":"long"},"control":{}}},"requestCancelExternalWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["workflowId","cause","initiatedEventId","decisionTaskCompletedEventId"],"members":{"workflowId":{},"runId":{},"cause":{},"initiatedEventId":{"type":"long"},"decisionTaskCompletedEventId":{"type":"long"},"control":{}}},"scheduleActivityTaskFailedEventAttributes":{"type":"structure","required":["activityType","activityId","cause","decisionTaskCompletedEventId"],"members":{"activityType":{"shape":"Sn"},"activityId":{},"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"requestCancelActivityTaskFailedEventAttributes":{"type":"structure","required":["activityId","cause","decisionTaskCompletedEventId"],"members":{"activityId":{},"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"startTimerFailedEventAttributes":{"type":"structure","required":["timerId","cause","decisionTaskCompletedEventId"],"members":{"timerId":{},"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"cancelTimerFailedEventAttributes":{"type":"structure","required":["timerId","cause","decisionTaskCompletedEventId"],"members":{"timerId":{},"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"startChildWorkflowExecutionFailedEventAttributes":{"type":"structure","required":["workflowType","cause","workflowId","initiatedEventId","decisionTaskCompletedEventId"],"members":{"workflowType":{"shape":"Sr"},"cause":{},"workflowId":{},"initiatedEventId":{"type":"long"},"decisionTaskCompletedEventId":{"type":"long"},"control":{}}},"lambdaFunctionScheduledEventAttributes":{"type":"structure","required":["id","name","decisionTaskCompletedEventId"],"members":{"id":{},"name":{},"control":{},"input":{},"startToCloseTimeout":{},"decisionTaskCompletedEventId":{"type":"long"}}},"lambdaFunctionStartedEventAttributes":{"type":"structure","required":["scheduledEventId"],"members":{"scheduledEventId":{"type":"long"}}},"lambdaFunctionCompletedEventAttributes":{"type":"structure","required":["scheduledEventId","startedEventId"],"members":{"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"},"result":{}}},"lambdaFunctionFailedEventAttributes":{"type":"structure","required":["scheduledEventId","startedEventId"],"members":{"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"},"reason":{},"details":{}}},"lambdaFunctionTimedOutEventAttributes":{"type":"structure","required":["scheduledEventId","startedEventId"],"members":{"scheduledEventId":{"type":"long"},"startedEventId":{"type":"long"},"timeoutType":{}}},"scheduleLambdaFunctionFailedEventAttributes":{"type":"structure","required":["id","name","cause","decisionTaskCompletedEventId"],"members":{"id":{},"name":{},"cause":{},"decisionTaskCompletedEventId":{"type":"long"}}},"startLambdaFunctionFailedEventAttributes":{"type":"structure","members":{"scheduledEventId":{"type":"long"},"cause":{},"message":{}}}}}},"S4g":{"type":"structure","required":["executionInfos"],"members":{"executionInfos":{"type":"list","member":{"shape":"S19"}},"nextPageToken":{}}}}}

/***/ }),
/* 360 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"GetWorkflowExecutionHistory":{"input_token":"nextPageToken","limit_key":"maximumPageSize","output_token":"nextPageToken","result_key":"events"},"ListActivityTypes":{"input_token":"nextPageToken","limit_key":"maximumPageSize","output_token":"nextPageToken","result_key":"typeInfos"},"ListClosedWorkflowExecutions":{"input_token":"nextPageToken","limit_key":"maximumPageSize","output_token":"nextPageToken","result_key":"executionInfos"},"ListDomains":{"input_token":"nextPageToken","limit_key":"maximumPageSize","output_token":"nextPageToken","result_key":"domainInfos"},"ListOpenWorkflowExecutions":{"input_token":"nextPageToken","limit_key":"maximumPageSize","output_token":"nextPageToken","result_key":"executionInfos"},"ListWorkflowTypes":{"input_token":"nextPageToken","limit_key":"maximumPageSize","output_token":"nextPageToken","result_key":"typeInfos"},"PollForDecisionTask":{"input_token":"nextPageToken","limit_key":"maximumPageSize","output_token":"nextPageToken","result_key":"events"}}}

/***/ }),
/* 361 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-08-24","endpointPrefix":"waf","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"WAF","serviceFullName":"AWS WAF","signatureVersion":"v4","targetPrefix":"AWSWAF_20150824","uid":"waf-2015-08-24"},"operations":{"CreateByteMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ByteMatchSet":{"shape":"S5"},"ChangeToken":{}}}},"CreateGeoMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"GeoMatchSet":{"shape":"Sh"},"ChangeToken":{}}}},"CreateIPSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"IPSet":{"shape":"So"},"ChangeToken":{}}}},"CreateRateBasedRule":{"input":{"type":"structure","required":["Name","MetricName","RateKey","RateLimit","ChangeToken"],"members":{"Name":{},"MetricName":{},"RateKey":{},"RateLimit":{"type":"long"},"ChangeToken":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"Sy"},"ChangeToken":{}}}},"CreateRegexMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"RegexMatchSet":{"shape":"S15"},"ChangeToken":{}}}},"CreateRegexPatternSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"RegexPatternSet":{"shape":"S1a"},"ChangeToken":{}}}},"CreateRule":{"input":{"type":"structure","required":["Name","MetricName","ChangeToken"],"members":{"Name":{},"MetricName":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"S1f"},"ChangeToken":{}}}},"CreateSizeConstraintSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"SizeConstraintSet":{"shape":"S1i"},"ChangeToken":{}}}},"CreateSqlInjectionMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"SqlInjectionMatchSet":{"shape":"S1p"},"ChangeToken":{}}}},"CreateWebACL":{"input":{"type":"structure","required":["Name","MetricName","DefaultAction","ChangeToken"],"members":{"Name":{},"MetricName":{},"DefaultAction":{"shape":"S1t"},"ChangeToken":{}}},"output":{"type":"structure","members":{"WebACL":{"shape":"S1w"},"ChangeToken":{}}}},"CreateXssMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"XssMatchSet":{"shape":"S23"},"ChangeToken":{}}}},"DeleteByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId","ChangeToken"],"members":{"ByteMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteGeoMatchSet":{"input":{"type":"structure","required":["GeoMatchSetId","ChangeToken"],"members":{"GeoMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteIPSet":{"input":{"type":"structure","required":["IPSetId","ChangeToken"],"members":{"IPSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRateBasedRule":{"input":{"type":"structure","required":["RuleId","ChangeToken"],"members":{"RuleId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRegexMatchSet":{"input":{"type":"structure","required":["RegexMatchSetId","ChangeToken"],"members":{"RegexMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRegexPatternSet":{"input":{"type":"structure","required":["RegexPatternSetId","ChangeToken"],"members":{"RegexPatternSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRule":{"input":{"type":"structure","required":["RuleId","ChangeToken"],"members":{"RuleId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId","ChangeToken"],"members":{"SizeConstraintSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId","ChangeToken"],"members":{"SqlInjectionMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteWebACL":{"input":{"type":"structure","required":["WebACLId","ChangeToken"],"members":{"WebACLId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteXssMatchSet":{"input":{"type":"structure","required":["XssMatchSetId","ChangeToken"],"members":{"XssMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"GetByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId"],"members":{"ByteMatchSetId":{}}},"output":{"type":"structure","members":{"ByteMatchSet":{"shape":"S5"}}}},"GetChangeToken":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"GetChangeTokenStatus":{"input":{"type":"structure","required":["ChangeToken"],"members":{"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeTokenStatus":{}}}},"GetGeoMatchSet":{"input":{"type":"structure","required":["GeoMatchSetId"],"members":{"GeoMatchSetId":{}}},"output":{"type":"structure","members":{"GeoMatchSet":{"shape":"Sh"}}}},"GetIPSet":{"input":{"type":"structure","required":["IPSetId"],"members":{"IPSetId":{}}},"output":{"type":"structure","members":{"IPSet":{"shape":"So"}}}},"GetRateBasedRule":{"input":{"type":"structure","required":["RuleId"],"members":{"RuleId":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"Sy"}}}},"GetRateBasedRuleManagedKeys":{"input":{"type":"structure","required":["RuleId"],"members":{"RuleId":{},"NextMarker":{}}},"output":{"type":"structure","members":{"ManagedKeys":{"type":"list","member":{}},"NextMarker":{}}}},"GetRegexMatchSet":{"input":{"type":"structure","required":["RegexMatchSetId"],"members":{"RegexMatchSetId":{}}},"output":{"type":"structure","members":{"RegexMatchSet":{"shape":"S15"}}}},"GetRegexPatternSet":{"input":{"type":"structure","required":["RegexPatternSetId"],"members":{"RegexPatternSetId":{}}},"output":{"type":"structure","members":{"RegexPatternSet":{"shape":"S1a"}}}},"GetRule":{"input":{"type":"structure","required":["RuleId"],"members":{"RuleId":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"S1f"}}}},"GetSampledRequests":{"input":{"type":"structure","required":["WebAclId","RuleId","TimeWindow","MaxItems"],"members":{"WebAclId":{},"RuleId":{},"TimeWindow":{"shape":"S3h"},"MaxItems":{"type":"long"}}},"output":{"type":"structure","members":{"SampledRequests":{"type":"list","member":{"type":"structure","required":["Request","Weight"],"members":{"Request":{"type":"structure","members":{"ClientIP":{},"Country":{},"URI":{},"Method":{},"HTTPVersion":{},"Headers":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{}}}}}},"Weight":{"type":"long"},"Timestamp":{"type":"timestamp"},"Action":{}}}},"PopulationSize":{"type":"long"},"TimeWindow":{"shape":"S3h"}}}},"GetSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId"],"members":{"SizeConstraintSetId":{}}},"output":{"type":"structure","members":{"SizeConstraintSet":{"shape":"S1i"}}}},"GetSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId"],"members":{"SqlInjectionMatchSetId":{}}},"output":{"type":"structure","members":{"SqlInjectionMatchSet":{"shape":"S1p"}}}},"GetWebACL":{"input":{"type":"structure","required":["WebACLId"],"members":{"WebACLId":{}}},"output":{"type":"structure","members":{"WebACL":{"shape":"S1w"}}}},"GetXssMatchSet":{"input":{"type":"structure","required":["XssMatchSetId"],"members":{"XssMatchSetId":{}}},"output":{"type":"structure","members":{"XssMatchSet":{"shape":"S23"}}}},"ListByteMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"ByteMatchSets":{"type":"list","member":{"type":"structure","required":["ByteMatchSetId","Name"],"members":{"ByteMatchSetId":{},"Name":{}}}}}}},"ListGeoMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"GeoMatchSets":{"type":"list","member":{"type":"structure","required":["GeoMatchSetId","Name"],"members":{"GeoMatchSetId":{},"Name":{}}}}}}},"ListIPSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"IPSets":{"type":"list","member":{"type":"structure","required":["IPSetId","Name"],"members":{"IPSetId":{},"Name":{}}}}}}},"ListRateBasedRules":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Rules":{"shape":"S4n"}}}},"ListRegexMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"RegexMatchSets":{"type":"list","member":{"type":"structure","required":["RegexMatchSetId","Name"],"members":{"RegexMatchSetId":{},"Name":{}}}}}}},"ListRegexPatternSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"RegexPatternSets":{"type":"list","member":{"type":"structure","required":["RegexPatternSetId","Name"],"members":{"RegexPatternSetId":{},"Name":{}}}}}}},"ListRules":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Rules":{"shape":"S4n"}}}},"ListSizeConstraintSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"SizeConstraintSets":{"type":"list","member":{"type":"structure","required":["SizeConstraintSetId","Name"],"members":{"SizeConstraintSetId":{},"Name":{}}}}}}},"ListSqlInjectionMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"SqlInjectionMatchSets":{"type":"list","member":{"type":"structure","required":["SqlInjectionMatchSetId","Name"],"members":{"SqlInjectionMatchSetId":{},"Name":{}}}}}}},"ListWebACLs":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"WebACLs":{"type":"list","member":{"type":"structure","required":["WebACLId","Name"],"members":{"WebACLId":{},"Name":{}}}}}}},"ListXssMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"XssMatchSets":{"type":"list","member":{"type":"structure","required":["XssMatchSetId","Name"],"members":{"XssMatchSetId":{},"Name":{}}}}}}},"UpdateByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId","ChangeToken","Updates"],"members":{"ByteMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","ByteMatchTuple"],"members":{"Action":{},"ByteMatchTuple":{"shape":"S8"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateGeoMatchSet":{"input":{"type":"structure","required":["GeoMatchSetId","ChangeToken","Updates"],"members":{"GeoMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","GeoMatchConstraint"],"members":{"Action":{},"GeoMatchConstraint":{"shape":"Sj"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateIPSet":{"input":{"type":"structure","required":["IPSetId","ChangeToken","Updates"],"members":{"IPSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","IPSetDescriptor"],"members":{"Action":{},"IPSetDescriptor":{"shape":"Sq"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRateBasedRule":{"input":{"type":"structure","required":["RuleId","ChangeToken","Updates","RateLimit"],"members":{"RuleId":{},"ChangeToken":{},"Updates":{"shape":"S5t"},"RateLimit":{"type":"long"}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRegexMatchSet":{"input":{"type":"structure","required":["RegexMatchSetId","Updates","ChangeToken"],"members":{"RegexMatchSetId":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","RegexMatchTuple"],"members":{"Action":{},"RegexMatchTuple":{"shape":"S17"}}}},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRegexPatternSet":{"input":{"type":"structure","required":["RegexPatternSetId","Updates","ChangeToken"],"members":{"RegexPatternSetId":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","RegexPatternString"],"members":{"Action":{},"RegexPatternString":{}}}},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRule":{"input":{"type":"structure","required":["RuleId","ChangeToken","Updates"],"members":{"RuleId":{},"ChangeToken":{},"Updates":{"shape":"S5t"}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId","ChangeToken","Updates"],"members":{"SizeConstraintSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","SizeConstraint"],"members":{"Action":{},"SizeConstraint":{"shape":"S1k"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId","ChangeToken","Updates"],"members":{"SqlInjectionMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","SqlInjectionMatchTuple"],"members":{"Action":{},"SqlInjectionMatchTuple":{"shape":"S1r"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateWebACL":{"input":{"type":"structure","required":["WebACLId","ChangeToken"],"members":{"WebACLId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","ActivatedRule"],"members":{"Action":{},"ActivatedRule":{"shape":"S1y"}}}},"DefaultAction":{"shape":"S1t"}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateXssMatchSet":{"input":{"type":"structure","required":["XssMatchSetId","ChangeToken","Updates"],"members":{"XssMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","XssMatchTuple"],"members":{"Action":{},"XssMatchTuple":{"shape":"S25"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}}},"shapes":{"S5":{"type":"structure","required":["ByteMatchSetId","ByteMatchTuples"],"members":{"ByteMatchSetId":{},"Name":{},"ByteMatchTuples":{"type":"list","member":{"shape":"S8"}}}},"S8":{"type":"structure","required":["FieldToMatch","TargetString","TextTransformation","PositionalConstraint"],"members":{"FieldToMatch":{"shape":"S9"},"TargetString":{"type":"blob"},"TextTransformation":{},"PositionalConstraint":{}}},"S9":{"type":"structure","required":["Type"],"members":{"Type":{},"Data":{}}},"Sh":{"type":"structure","required":["GeoMatchSetId","GeoMatchConstraints"],"members":{"GeoMatchSetId":{},"Name":{},"GeoMatchConstraints":{"type":"list","member":{"shape":"Sj"}}}},"Sj":{"type":"structure","required":["Type","Value"],"members":{"Type":{},"Value":{}}},"So":{"type":"structure","required":["IPSetId","IPSetDescriptors"],"members":{"IPSetId":{},"Name":{},"IPSetDescriptors":{"type":"list","member":{"shape":"Sq"}}}},"Sq":{"type":"structure","required":["Type","Value"],"members":{"Type":{},"Value":{}}},"Sy":{"type":"structure","required":["RuleId","MatchPredicates","RateKey","RateLimit"],"members":{"RuleId":{},"Name":{},"MetricName":{},"MatchPredicates":{"shape":"Sz"},"RateKey":{},"RateLimit":{"type":"long"}}},"Sz":{"type":"list","member":{"shape":"S10"}},"S10":{"type":"structure","required":["Negated","Type","DataId"],"members":{"Negated":{"type":"boolean"},"Type":{},"DataId":{}}},"S15":{"type":"structure","members":{"RegexMatchSetId":{},"Name":{},"RegexMatchTuples":{"type":"list","member":{"shape":"S17"}}}},"S17":{"type":"structure","required":["FieldToMatch","TextTransformation","RegexPatternSetId"],"members":{"FieldToMatch":{"shape":"S9"},"TextTransformation":{},"RegexPatternSetId":{}}},"S1a":{"type":"structure","required":["RegexPatternSetId","RegexPatternStrings"],"members":{"RegexPatternSetId":{},"Name":{},"RegexPatternStrings":{"type":"list","member":{}}}},"S1f":{"type":"structure","required":["RuleId","Predicates"],"members":{"RuleId":{},"Name":{},"MetricName":{},"Predicates":{"shape":"Sz"}}},"S1i":{"type":"structure","required":["SizeConstraintSetId","SizeConstraints"],"members":{"SizeConstraintSetId":{},"Name":{},"SizeConstraints":{"type":"list","member":{"shape":"S1k"}}}},"S1k":{"type":"structure","required":["FieldToMatch","TextTransformation","ComparisonOperator","Size"],"members":{"FieldToMatch":{"shape":"S9"},"TextTransformation":{},"ComparisonOperator":{},"Size":{"type":"long"}}},"S1p":{"type":"structure","required":["SqlInjectionMatchSetId","SqlInjectionMatchTuples"],"members":{"SqlInjectionMatchSetId":{},"Name":{},"SqlInjectionMatchTuples":{"type":"list","member":{"shape":"S1r"}}}},"S1r":{"type":"structure","required":["FieldToMatch","TextTransformation"],"members":{"FieldToMatch":{"shape":"S9"},"TextTransformation":{}}},"S1t":{"type":"structure","required":["Type"],"members":{"Type":{}}},"S1w":{"type":"structure","required":["WebACLId","DefaultAction","Rules"],"members":{"WebACLId":{},"Name":{},"MetricName":{},"DefaultAction":{"shape":"S1t"},"Rules":{"type":"list","member":{"shape":"S1y"}}}},"S1y":{"type":"structure","required":["Priority","RuleId","Action"],"members":{"Priority":{"type":"integer"},"RuleId":{},"Action":{"shape":"S1t"},"Type":{}}},"S23":{"type":"structure","required":["XssMatchSetId","XssMatchTuples"],"members":{"XssMatchSetId":{},"Name":{},"XssMatchTuples":{"type":"list","member":{"shape":"S25"}}}},"S25":{"type":"structure","required":["FieldToMatch","TextTransformation"],"members":{"FieldToMatch":{"shape":"S9"},"TextTransformation":{}}},"S3h":{"type":"structure","required":["StartTime","EndTime"],"members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}},"S4n":{"type":"list","member":{"type":"structure","required":["RuleId","Name"],"members":{"RuleId":{},"Name":{}}}},"S5t":{"type":"list","member":{"type":"structure","required":["Action","Predicate"],"members":{"Action":{},"Predicate":{"shape":"S10"}}}}}}

/***/ }),
/* 362 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 363 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-11-28","endpointPrefix":"waf-regional","jsonVersion":"1.1","protocol":"json","serviceAbbreviation":"WAF Regional","serviceFullName":"AWS WAF Regional","signatureVersion":"v4","targetPrefix":"AWSWAF_Regional_20161128","uid":"waf-regional-2016-11-28"},"operations":{"AssociateWebACL":{"input":{"type":"structure","required":["WebACLId","ResourceArn"],"members":{"WebACLId":{},"ResourceArn":{}}},"output":{"type":"structure","members":{}}},"CreateByteMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ByteMatchSet":{"shape":"S9"},"ChangeToken":{}}}},"CreateGeoMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"GeoMatchSet":{"shape":"Sk"},"ChangeToken":{}}}},"CreateIPSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"IPSet":{"shape":"Sr"},"ChangeToken":{}}}},"CreateRateBasedRule":{"input":{"type":"structure","required":["Name","MetricName","RateKey","RateLimit","ChangeToken"],"members":{"Name":{},"MetricName":{},"RateKey":{},"RateLimit":{"type":"long"},"ChangeToken":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"S11"},"ChangeToken":{}}}},"CreateRegexMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"RegexMatchSet":{"shape":"S18"},"ChangeToken":{}}}},"CreateRegexPatternSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"RegexPatternSet":{"shape":"S1d"},"ChangeToken":{}}}},"CreateRule":{"input":{"type":"structure","required":["Name","MetricName","ChangeToken"],"members":{"Name":{},"MetricName":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"S1i"},"ChangeToken":{}}}},"CreateSizeConstraintSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"SizeConstraintSet":{"shape":"S1l"},"ChangeToken":{}}}},"CreateSqlInjectionMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"SqlInjectionMatchSet":{"shape":"S1s"},"ChangeToken":{}}}},"CreateWebACL":{"input":{"type":"structure","required":["Name","MetricName","DefaultAction","ChangeToken"],"members":{"Name":{},"MetricName":{},"DefaultAction":{"shape":"S1w"},"ChangeToken":{}}},"output":{"type":"structure","members":{"WebACL":{"shape":"S1z"},"ChangeToken":{}}}},"CreateXssMatchSet":{"input":{"type":"structure","required":["Name","ChangeToken"],"members":{"Name":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"XssMatchSet":{"shape":"S26"},"ChangeToken":{}}}},"DeleteByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId","ChangeToken"],"members":{"ByteMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteGeoMatchSet":{"input":{"type":"structure","required":["GeoMatchSetId","ChangeToken"],"members":{"GeoMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteIPSet":{"input":{"type":"structure","required":["IPSetId","ChangeToken"],"members":{"IPSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRateBasedRule":{"input":{"type":"structure","required":["RuleId","ChangeToken"],"members":{"RuleId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRegexMatchSet":{"input":{"type":"structure","required":["RegexMatchSetId","ChangeToken"],"members":{"RegexMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRegexPatternSet":{"input":{"type":"structure","required":["RegexPatternSetId","ChangeToken"],"members":{"RegexPatternSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteRule":{"input":{"type":"structure","required":["RuleId","ChangeToken"],"members":{"RuleId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId","ChangeToken"],"members":{"SizeConstraintSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId","ChangeToken"],"members":{"SqlInjectionMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteWebACL":{"input":{"type":"structure","required":["WebACLId","ChangeToken"],"members":{"WebACLId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DeleteXssMatchSet":{"input":{"type":"structure","required":["XssMatchSetId","ChangeToken"],"members":{"XssMatchSetId":{},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"DisassociateWebACL":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{}}},"GetByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId"],"members":{"ByteMatchSetId":{}}},"output":{"type":"structure","members":{"ByteMatchSet":{"shape":"S9"}}}},"GetChangeToken":{"input":{"type":"structure","members":{}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"GetChangeTokenStatus":{"input":{"type":"structure","required":["ChangeToken"],"members":{"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeTokenStatus":{}}}},"GetGeoMatchSet":{"input":{"type":"structure","required":["GeoMatchSetId"],"members":{"GeoMatchSetId":{}}},"output":{"type":"structure","members":{"GeoMatchSet":{"shape":"Sk"}}}},"GetIPSet":{"input":{"type":"structure","required":["IPSetId"],"members":{"IPSetId":{}}},"output":{"type":"structure","members":{"IPSet":{"shape":"Sr"}}}},"GetRateBasedRule":{"input":{"type":"structure","required":["RuleId"],"members":{"RuleId":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"S11"}}}},"GetRateBasedRuleManagedKeys":{"input":{"type":"structure","required":["RuleId"],"members":{"RuleId":{},"NextMarker":{}}},"output":{"type":"structure","members":{"ManagedKeys":{"type":"list","member":{}},"NextMarker":{}}}},"GetRegexMatchSet":{"input":{"type":"structure","required":["RegexMatchSetId"],"members":{"RegexMatchSetId":{}}},"output":{"type":"structure","members":{"RegexMatchSet":{"shape":"S18"}}}},"GetRegexPatternSet":{"input":{"type":"structure","required":["RegexPatternSetId"],"members":{"RegexPatternSetId":{}}},"output":{"type":"structure","members":{"RegexPatternSet":{"shape":"S1d"}}}},"GetRule":{"input":{"type":"structure","required":["RuleId"],"members":{"RuleId":{}}},"output":{"type":"structure","members":{"Rule":{"shape":"S1i"}}}},"GetSampledRequests":{"input":{"type":"structure","required":["WebAclId","RuleId","TimeWindow","MaxItems"],"members":{"WebAclId":{},"RuleId":{},"TimeWindow":{"shape":"S3m"},"MaxItems":{"type":"long"}}},"output":{"type":"structure","members":{"SampledRequests":{"type":"list","member":{"type":"structure","required":["Request","Weight"],"members":{"Request":{"type":"structure","members":{"ClientIP":{},"Country":{},"URI":{},"Method":{},"HTTPVersion":{},"Headers":{"type":"list","member":{"type":"structure","members":{"Name":{},"Value":{}}}}}},"Weight":{"type":"long"},"Timestamp":{"type":"timestamp"},"Action":{}}}},"PopulationSize":{"type":"long"},"TimeWindow":{"shape":"S3m"}}}},"GetSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId"],"members":{"SizeConstraintSetId":{}}},"output":{"type":"structure","members":{"SizeConstraintSet":{"shape":"S1l"}}}},"GetSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId"],"members":{"SqlInjectionMatchSetId":{}}},"output":{"type":"structure","members":{"SqlInjectionMatchSet":{"shape":"S1s"}}}},"GetWebACL":{"input":{"type":"structure","required":["WebACLId"],"members":{"WebACLId":{}}},"output":{"type":"structure","members":{"WebACL":{"shape":"S1z"}}}},"GetWebACLForResource":{"input":{"type":"structure","required":["ResourceArn"],"members":{"ResourceArn":{}}},"output":{"type":"structure","members":{"WebACLSummary":{"shape":"S4d"}}}},"GetXssMatchSet":{"input":{"type":"structure","required":["XssMatchSetId"],"members":{"XssMatchSetId":{}}},"output":{"type":"structure","members":{"XssMatchSet":{"shape":"S26"}}}},"ListByteMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"ByteMatchSets":{"type":"list","member":{"type":"structure","required":["ByteMatchSetId","Name"],"members":{"ByteMatchSetId":{},"Name":{}}}}}}},"ListGeoMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"GeoMatchSets":{"type":"list","member":{"type":"structure","required":["GeoMatchSetId","Name"],"members":{"GeoMatchSetId":{},"Name":{}}}}}}},"ListIPSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"IPSets":{"type":"list","member":{"type":"structure","required":["IPSetId","Name"],"members":{"IPSetId":{},"Name":{}}}}}}},"ListRateBasedRules":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Rules":{"shape":"S4v"}}}},"ListRegexMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"RegexMatchSets":{"type":"list","member":{"type":"structure","required":["RegexMatchSetId","Name"],"members":{"RegexMatchSetId":{},"Name":{}}}}}}},"ListRegexPatternSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"RegexPatternSets":{"type":"list","member":{"type":"structure","required":["RegexPatternSetId","Name"],"members":{"RegexPatternSetId":{},"Name":{}}}}}}},"ListResourcesForWebACL":{"input":{"type":"structure","required":["WebACLId"],"members":{"WebACLId":{}}},"output":{"type":"structure","members":{"ResourceArns":{"type":"list","member":{}}}}},"ListRules":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"Rules":{"shape":"S4v"}}}},"ListSizeConstraintSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"SizeConstraintSets":{"type":"list","member":{"type":"structure","required":["SizeConstraintSetId","Name"],"members":{"SizeConstraintSetId":{},"Name":{}}}}}}},"ListSqlInjectionMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"SqlInjectionMatchSets":{"type":"list","member":{"type":"structure","required":["SqlInjectionMatchSetId","Name"],"members":{"SqlInjectionMatchSetId":{},"Name":{}}}}}}},"ListWebACLs":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"WebACLs":{"type":"list","member":{"shape":"S4d"}}}}},"ListXssMatchSets":{"input":{"type":"structure","members":{"NextMarker":{},"Limit":{"type":"integer"}}},"output":{"type":"structure","members":{"NextMarker":{},"XssMatchSets":{"type":"list","member":{"type":"structure","required":["XssMatchSetId","Name"],"members":{"XssMatchSetId":{},"Name":{}}}}}}},"UpdateByteMatchSet":{"input":{"type":"structure","required":["ByteMatchSetId","ChangeToken","Updates"],"members":{"ByteMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","ByteMatchTuple"],"members":{"Action":{},"ByteMatchTuple":{"shape":"Sb"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateGeoMatchSet":{"input":{"type":"structure","required":["GeoMatchSetId","ChangeToken","Updates"],"members":{"GeoMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","GeoMatchConstraint"],"members":{"Action":{},"GeoMatchConstraint":{"shape":"Sm"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateIPSet":{"input":{"type":"structure","required":["IPSetId","ChangeToken","Updates"],"members":{"IPSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","IPSetDescriptor"],"members":{"Action":{},"IPSetDescriptor":{"shape":"St"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRateBasedRule":{"input":{"type":"structure","required":["RuleId","ChangeToken","Updates","RateLimit"],"members":{"RuleId":{},"ChangeToken":{},"Updates":{"shape":"S63"},"RateLimit":{"type":"long"}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRegexMatchSet":{"input":{"type":"structure","required":["RegexMatchSetId","Updates","ChangeToken"],"members":{"RegexMatchSetId":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","RegexMatchTuple"],"members":{"Action":{},"RegexMatchTuple":{"shape":"S1a"}}}},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRegexPatternSet":{"input":{"type":"structure","required":["RegexPatternSetId","Updates","ChangeToken"],"members":{"RegexPatternSetId":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","RegexPatternString"],"members":{"Action":{},"RegexPatternString":{}}}},"ChangeToken":{}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateRule":{"input":{"type":"structure","required":["RuleId","ChangeToken","Updates"],"members":{"RuleId":{},"ChangeToken":{},"Updates":{"shape":"S63"}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateSizeConstraintSet":{"input":{"type":"structure","required":["SizeConstraintSetId","ChangeToken","Updates"],"members":{"SizeConstraintSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","SizeConstraint"],"members":{"Action":{},"SizeConstraint":{"shape":"S1n"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateSqlInjectionMatchSet":{"input":{"type":"structure","required":["SqlInjectionMatchSetId","ChangeToken","Updates"],"members":{"SqlInjectionMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","SqlInjectionMatchTuple"],"members":{"Action":{},"SqlInjectionMatchTuple":{"shape":"S1u"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateWebACL":{"input":{"type":"structure","required":["WebACLId","ChangeToken"],"members":{"WebACLId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","ActivatedRule"],"members":{"Action":{},"ActivatedRule":{"shape":"S21"}}}},"DefaultAction":{"shape":"S1w"}}},"output":{"type":"structure","members":{"ChangeToken":{}}}},"UpdateXssMatchSet":{"input":{"type":"structure","required":["XssMatchSetId","ChangeToken","Updates"],"members":{"XssMatchSetId":{},"ChangeToken":{},"Updates":{"type":"list","member":{"type":"structure","required":["Action","XssMatchTuple"],"members":{"Action":{},"XssMatchTuple":{"shape":"S28"}}}}}},"output":{"type":"structure","members":{"ChangeToken":{}}}}},"shapes":{"S9":{"type":"structure","required":["ByteMatchSetId","ByteMatchTuples"],"members":{"ByteMatchSetId":{},"Name":{},"ByteMatchTuples":{"type":"list","member":{"shape":"Sb"}}}},"Sb":{"type":"structure","required":["FieldToMatch","TargetString","TextTransformation","PositionalConstraint"],"members":{"FieldToMatch":{"shape":"Sc"},"TargetString":{"type":"blob"},"TextTransformation":{},"PositionalConstraint":{}}},"Sc":{"type":"structure","required":["Type"],"members":{"Type":{},"Data":{}}},"Sk":{"type":"structure","required":["GeoMatchSetId","GeoMatchConstraints"],"members":{"GeoMatchSetId":{},"Name":{},"GeoMatchConstraints":{"type":"list","member":{"shape":"Sm"}}}},"Sm":{"type":"structure","required":["Type","Value"],"members":{"Type":{},"Value":{}}},"Sr":{"type":"structure","required":["IPSetId","IPSetDescriptors"],"members":{"IPSetId":{},"Name":{},"IPSetDescriptors":{"type":"list","member":{"shape":"St"}}}},"St":{"type":"structure","required":["Type","Value"],"members":{"Type":{},"Value":{}}},"S11":{"type":"structure","required":["RuleId","MatchPredicates","RateKey","RateLimit"],"members":{"RuleId":{},"Name":{},"MetricName":{},"MatchPredicates":{"shape":"S12"},"RateKey":{},"RateLimit":{"type":"long"}}},"S12":{"type":"list","member":{"shape":"S13"}},"S13":{"type":"structure","required":["Negated","Type","DataId"],"members":{"Negated":{"type":"boolean"},"Type":{},"DataId":{}}},"S18":{"type":"structure","members":{"RegexMatchSetId":{},"Name":{},"RegexMatchTuples":{"type":"list","member":{"shape":"S1a"}}}},"S1a":{"type":"structure","required":["FieldToMatch","TextTransformation","RegexPatternSetId"],"members":{"FieldToMatch":{"shape":"Sc"},"TextTransformation":{},"RegexPatternSetId":{}}},"S1d":{"type":"structure","required":["RegexPatternSetId","RegexPatternStrings"],"members":{"RegexPatternSetId":{},"Name":{},"RegexPatternStrings":{"type":"list","member":{}}}},"S1i":{"type":"structure","required":["RuleId","Predicates"],"members":{"RuleId":{},"Name":{},"MetricName":{},"Predicates":{"shape":"S12"}}},"S1l":{"type":"structure","required":["SizeConstraintSetId","SizeConstraints"],"members":{"SizeConstraintSetId":{},"Name":{},"SizeConstraints":{"type":"list","member":{"shape":"S1n"}}}},"S1n":{"type":"structure","required":["FieldToMatch","TextTransformation","ComparisonOperator","Size"],"members":{"FieldToMatch":{"shape":"Sc"},"TextTransformation":{},"ComparisonOperator":{},"Size":{"type":"long"}}},"S1s":{"type":"structure","required":["SqlInjectionMatchSetId","SqlInjectionMatchTuples"],"members":{"SqlInjectionMatchSetId":{},"Name":{},"SqlInjectionMatchTuples":{"type":"list","member":{"shape":"S1u"}}}},"S1u":{"type":"structure","required":["FieldToMatch","TextTransformation"],"members":{"FieldToMatch":{"shape":"Sc"},"TextTransformation":{}}},"S1w":{"type":"structure","required":["Type"],"members":{"Type":{}}},"S1z":{"type":"structure","required":["WebACLId","DefaultAction","Rules"],"members":{"WebACLId":{},"Name":{},"MetricName":{},"DefaultAction":{"shape":"S1w"},"Rules":{"type":"list","member":{"shape":"S21"}}}},"S21":{"type":"structure","required":["Priority","RuleId","Action"],"members":{"Priority":{"type":"integer"},"RuleId":{},"Action":{"shape":"S1w"},"Type":{}}},"S26":{"type":"structure","required":["XssMatchSetId","XssMatchTuples"],"members":{"XssMatchSetId":{},"Name":{},"XssMatchTuples":{"type":"list","member":{"shape":"S28"}}}},"S28":{"type":"structure","required":["FieldToMatch","TextTransformation"],"members":{"FieldToMatch":{"shape":"Sc"},"TextTransformation":{}}},"S3m":{"type":"structure","required":["StartTime","EndTime"],"members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"}}},"S4d":{"type":"structure","required":["WebACLId","Name"],"members":{"WebACLId":{},"Name":{}}},"S4v":{"type":"list","member":{"type":"structure","required":["RuleId","Name"],"members":{"RuleId":{},"Name":{}}}},"S63":{"type":"list","member":{"type":"structure","required":["Action","Predicate"],"members":{"Action":{},"Predicate":{"shape":"S13"}}}}}}

/***/ }),
/* 364 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-05-01","endpointPrefix":"workdocs","jsonVersion":"1.1","protocol":"rest-json","serviceFullName":"Amazon WorkDocs","signatureVersion":"v4","uid":"workdocs-2016-05-01"},"operations":{"AbortDocumentVersionUpload":{"http":{"method":"DELETE","requestUri":"/api/v1/documents/{DocumentId}/versions/{VersionId}","responseCode":204},"input":{"type":"structure","required":["DocumentId","VersionId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"VersionId":{"location":"uri","locationName":"VersionId"}}}},"ActivateUser":{"http":{"requestUri":"/api/v1/users/{UserId}/activation","responseCode":200},"input":{"type":"structure","required":["UserId"],"members":{"UserId":{"location":"uri","locationName":"UserId"},"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"}}},"output":{"type":"structure","members":{"User":{"shape":"S8"}}}},"AddResourcePermissions":{"http":{"requestUri":"/api/v1/resources/{ResourceId}/permissions","responseCode":201},"input":{"type":"structure","required":["ResourceId","Principals"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"ResourceId":{"location":"uri","locationName":"ResourceId"},"Principals":{"type":"list","member":{"type":"structure","required":["Id","Type","Role"],"members":{"Id":{},"Type":{},"Role":{}}}}}},"output":{"type":"structure","members":{"ShareResults":{"type":"list","member":{"type":"structure","members":{"PrincipalId":{},"Role":{},"Status":{},"ShareId":{},"StatusMessage":{"type":"string","sensitive":true}}}}}}},"CreateComment":{"http":{"requestUri":"/api/v1/documents/{DocumentId}/versions/{VersionId}/comment","responseCode":201},"input":{"type":"structure","required":["DocumentId","VersionId","Text"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"VersionId":{"location":"uri","locationName":"VersionId"},"ParentId":{},"ThreadId":{},"Text":{"shape":"Sy"},"Visibility":{},"NotifyCollaborators":{"type":"boolean"}}},"output":{"type":"structure","members":{"Comment":{"shape":"S12"}}}},"CreateCustomMetadata":{"http":{"method":"PUT","requestUri":"/api/v1/resources/{ResourceId}/customMetadata","responseCode":200},"input":{"type":"structure","required":["ResourceId","CustomMetadata"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"ResourceId":{"location":"uri","locationName":"ResourceId"},"VersionId":{"location":"querystring","locationName":"versionid"},"CustomMetadata":{"shape":"S15"}}},"output":{"type":"structure","members":{}}},"CreateFolder":{"http":{"requestUri":"/api/v1/folders","responseCode":201},"input":{"type":"structure","required":["ParentFolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"Name":{},"ParentFolderId":{}}},"output":{"type":"structure","members":{"Metadata":{"shape":"S1c"}}}},"CreateLabels":{"http":{"method":"PUT","requestUri":"/api/v1/resources/{ResourceId}/labels","responseCode":200},"input":{"type":"structure","required":["ResourceId","Labels"],"members":{"ResourceId":{"location":"uri","locationName":"ResourceId"},"Labels":{"shape":"S1f"},"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"}}},"output":{"type":"structure","members":{}}},"CreateNotificationSubscription":{"http":{"requestUri":"/api/v1/organizations/{OrganizationId}/subscriptions","responseCode":200},"input":{"type":"structure","required":["OrganizationId","Endpoint","Protocol","SubscriptionType"],"members":{"OrganizationId":{"location":"uri","locationName":"OrganizationId"},"Endpoint":{},"Protocol":{},"SubscriptionType":{}}},"output":{"type":"structure","members":{"Subscription":{"shape":"S1o"}}}},"CreateUser":{"http":{"requestUri":"/api/v1/users","responseCode":201},"input":{"type":"structure","required":["Username","GivenName","Surname","Password"],"members":{"OrganizationId":{},"Username":{},"EmailAddress":{},"GivenName":{},"Surname":{},"Password":{"type":"string","sensitive":true},"TimeZoneId":{},"StorageRule":{"shape":"Sj"},"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"}}},"output":{"type":"structure","members":{"User":{"shape":"S8"}}}},"DeactivateUser":{"http":{"method":"DELETE","requestUri":"/api/v1/users/{UserId}/activation","responseCode":204},"input":{"type":"structure","required":["UserId"],"members":{"UserId":{"location":"uri","locationName":"UserId"},"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"}}}},"DeleteComment":{"http":{"method":"DELETE","requestUri":"/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}","responseCode":204},"input":{"type":"structure","required":["DocumentId","VersionId","CommentId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"VersionId":{"location":"uri","locationName":"VersionId"},"CommentId":{"location":"uri","locationName":"CommentId"}}}},"DeleteCustomMetadata":{"http":{"method":"DELETE","requestUri":"/api/v1/resources/{ResourceId}/customMetadata","responseCode":200},"input":{"type":"structure","required":["ResourceId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"ResourceId":{"location":"uri","locationName":"ResourceId"},"VersionId":{"location":"querystring","locationName":"versionId"},"Keys":{"location":"querystring","locationName":"keys","type":"list","member":{}},"DeleteAll":{"location":"querystring","locationName":"deleteAll","type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeleteDocument":{"http":{"method":"DELETE","requestUri":"/api/v1/documents/{DocumentId}","responseCode":204},"input":{"type":"structure","required":["DocumentId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"}}}},"DeleteFolder":{"http":{"method":"DELETE","requestUri":"/api/v1/folders/{FolderId}","responseCode":204},"input":{"type":"structure","required":["FolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"FolderId":{"location":"uri","locationName":"FolderId"}}}},"DeleteFolderContents":{"http":{"method":"DELETE","requestUri":"/api/v1/folders/{FolderId}/contents","responseCode":204},"input":{"type":"structure","required":["FolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"FolderId":{"location":"uri","locationName":"FolderId"}}}},"DeleteLabels":{"http":{"method":"DELETE","requestUri":"/api/v1/resources/{ResourceId}/labels","responseCode":200},"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{"location":"uri","locationName":"ResourceId"},"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"Labels":{"shape":"S1f","location":"querystring","locationName":"labels"},"DeleteAll":{"location":"querystring","locationName":"deleteAll","type":"boolean"}}},"output":{"type":"structure","members":{}}},"DeleteNotificationSubscription":{"http":{"method":"DELETE","requestUri":"/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}","responseCode":200},"input":{"type":"structure","required":["SubscriptionId","OrganizationId"],"members":{"SubscriptionId":{"location":"uri","locationName":"SubscriptionId"},"OrganizationId":{"location":"uri","locationName":"OrganizationId"}}}},"DeleteUser":{"http":{"method":"DELETE","requestUri":"/api/v1/users/{UserId}","responseCode":204},"input":{"type":"structure","required":["UserId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"UserId":{"location":"uri","locationName":"UserId"}}}},"DescribeActivities":{"http":{"method":"GET","requestUri":"/api/v1/activities","responseCode":200},"input":{"type":"structure","members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"StartTime":{"location":"querystring","locationName":"startTime","type":"timestamp"},"EndTime":{"location":"querystring","locationName":"endTime","type":"timestamp"},"OrganizationId":{"location":"querystring","locationName":"organizationId"},"UserId":{"location":"querystring","locationName":"userId"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Marker":{"location":"querystring","locationName":"marker"}}},"output":{"type":"structure","members":{"UserActivities":{"type":"list","member":{"type":"structure","members":{"Type":{},"TimeStamp":{"type":"timestamp"},"OrganizationId":{},"Initiator":{"shape":"S2b"},"Participants":{"type":"structure","members":{"Users":{"type":"list","member":{"shape":"S2b"}},"Groups":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{}}}}}},"ResourceMetadata":{"shape":"S2h"},"OriginalParent":{"shape":"S2h"},"CommentMetadata":{"type":"structure","members":{"CommentId":{},"Contributor":{"shape":"S8"},"CreatedTimestamp":{"type":"timestamp"},"CommentStatus":{},"RecipientId":{}}}}}},"Marker":{}}}},"DescribeComments":{"http":{"method":"GET","requestUri":"/api/v1/documents/{DocumentId}/versions/{VersionId}/comments","responseCode":200},"input":{"type":"structure","required":["DocumentId","VersionId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"VersionId":{"location":"uri","locationName":"VersionId"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Marker":{"location":"querystring","locationName":"marker"}}},"output":{"type":"structure","members":{"Comments":{"type":"list","member":{"shape":"S12"}},"Marker":{}}}},"DescribeDocumentVersions":{"http":{"method":"GET","requestUri":"/api/v1/documents/{DocumentId}/versions","responseCode":200},"input":{"type":"structure","required":["DocumentId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"Marker":{"location":"querystring","locationName":"marker"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Include":{"location":"querystring","locationName":"include"},"Fields":{"location":"querystring","locationName":"fields"}}},"output":{"type":"structure","members":{"DocumentVersions":{"type":"list","member":{"shape":"S2s"}},"Marker":{}}}},"DescribeFolderContents":{"http":{"method":"GET","requestUri":"/api/v1/folders/{FolderId}/contents","responseCode":200},"input":{"type":"structure","required":["FolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"FolderId":{"location":"uri","locationName":"FolderId"},"Sort":{"location":"querystring","locationName":"sort"},"Order":{"location":"querystring","locationName":"order"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Marker":{"location":"querystring","locationName":"marker"},"Type":{"location":"querystring","locationName":"type"},"Include":{"location":"querystring","locationName":"include"}}},"output":{"type":"structure","members":{"Folders":{"shape":"S35"},"Documents":{"type":"list","member":{"shape":"S37"}},"Marker":{}}}},"DescribeNotificationSubscriptions":{"http":{"method":"GET","requestUri":"/api/v1/organizations/{OrganizationId}/subscriptions","responseCode":200},"input":{"type":"structure","required":["OrganizationId"],"members":{"OrganizationId":{"location":"uri","locationName":"OrganizationId"},"Marker":{"location":"querystring","locationName":"marker"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"}}},"output":{"type":"structure","members":{"Subscriptions":{"type":"list","member":{"shape":"S1o"}},"Marker":{}}}},"DescribeResourcePermissions":{"http":{"method":"GET","requestUri":"/api/v1/resources/{ResourceId}/permissions","responseCode":200},"input":{"type":"structure","required":["ResourceId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"ResourceId":{"location":"uri","locationName":"ResourceId"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Marker":{"location":"querystring","locationName":"marker"}}},"output":{"type":"structure","members":{"Principals":{"type":"list","member":{"type":"structure","members":{"Id":{},"Type":{},"Roles":{"type":"list","member":{"type":"structure","members":{"Role":{},"Type":{}}}}}}},"Marker":{}}}},"DescribeRootFolders":{"http":{"method":"GET","requestUri":"/api/v1/me/root","responseCode":200},"input":{"type":"structure","required":["AuthenticationToken"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Marker":{"location":"querystring","locationName":"marker"}}},"output":{"type":"structure","members":{"Folders":{"shape":"S35"},"Marker":{}}}},"DescribeUsers":{"http":{"method":"GET","requestUri":"/api/v1/users","responseCode":200},"input":{"type":"structure","members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"OrganizationId":{"location":"querystring","locationName":"organizationId"},"UserIds":{"location":"querystring","locationName":"userIds"},"Query":{"location":"querystring","locationName":"query","type":"string","sensitive":true},"Include":{"location":"querystring","locationName":"include"},"Order":{"location":"querystring","locationName":"order"},"Sort":{"location":"querystring","locationName":"sort"},"Marker":{"location":"querystring","locationName":"marker"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Fields":{"location":"querystring","locationName":"fields"}}},"output":{"type":"structure","members":{"Users":{"type":"list","member":{"shape":"S8"}},"TotalNumberOfUsers":{"type":"long"},"Marker":{}}}},"GetCurrentUser":{"http":{"method":"GET","requestUri":"/api/v1/me","responseCode":200},"input":{"type":"structure","required":["AuthenticationToken"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"}}},"output":{"type":"structure","members":{"User":{"shape":"S8"}}}},"GetDocument":{"http":{"method":"GET","requestUri":"/api/v1/documents/{DocumentId}","responseCode":200},"input":{"type":"structure","required":["DocumentId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"IncludeCustomMetadata":{"location":"querystring","locationName":"includeCustomMetadata","type":"boolean"}}},"output":{"type":"structure","members":{"Metadata":{"shape":"S37"},"CustomMetadata":{"shape":"S15"}}}},"GetDocumentPath":{"http":{"method":"GET","requestUri":"/api/v1/documents/{DocumentId}/path","responseCode":200},"input":{"type":"structure","required":["DocumentId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Fields":{"location":"querystring","locationName":"fields"},"Marker":{"location":"querystring","locationName":"marker"}}},"output":{"type":"structure","members":{"Path":{"shape":"S3x"}}}},"GetDocumentVersion":{"http":{"method":"GET","requestUri":"/api/v1/documents/{DocumentId}/versions/{VersionId}","responseCode":200},"input":{"type":"structure","required":["DocumentId","VersionId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"VersionId":{"location":"uri","locationName":"VersionId"},"Fields":{"location":"querystring","locationName":"fields"},"IncludeCustomMetadata":{"location":"querystring","locationName":"includeCustomMetadata","type":"boolean"}}},"output":{"type":"structure","members":{"Metadata":{"shape":"S2s"},"CustomMetadata":{"shape":"S15"}}}},"GetFolder":{"http":{"method":"GET","requestUri":"/api/v1/folders/{FolderId}","responseCode":200},"input":{"type":"structure","required":["FolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"FolderId":{"location":"uri","locationName":"FolderId"},"IncludeCustomMetadata":{"location":"querystring","locationName":"includeCustomMetadata","type":"boolean"}}},"output":{"type":"structure","members":{"Metadata":{"shape":"S1c"},"CustomMetadata":{"shape":"S15"}}}},"GetFolderPath":{"http":{"method":"GET","requestUri":"/api/v1/folders/{FolderId}/path","responseCode":200},"input":{"type":"structure","required":["FolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"FolderId":{"location":"uri","locationName":"FolderId"},"Limit":{"location":"querystring","locationName":"limit","type":"integer"},"Fields":{"location":"querystring","locationName":"fields"},"Marker":{"location":"querystring","locationName":"marker"}}},"output":{"type":"structure","members":{"Path":{"shape":"S3x"}}}},"InitiateDocumentVersionUpload":{"http":{"requestUri":"/api/v1/documents","responseCode":201},"input":{"type":"structure","required":["ParentFolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"Id":{},"Name":{},"ContentCreatedTimestamp":{"type":"timestamp"},"ContentModifiedTimestamp":{"type":"timestamp"},"ContentType":{},"DocumentSizeInBytes":{"type":"long"},"ParentFolderId":{}}},"output":{"type":"structure","members":{"Metadata":{"shape":"S37"},"UploadMetadata":{"type":"structure","members":{"UploadUrl":{"shape":"S2x"},"SignedHeaders":{"type":"map","key":{},"value":{}}}}}}},"RemoveAllResourcePermissions":{"http":{"method":"DELETE","requestUri":"/api/v1/resources/{ResourceId}/permissions","responseCode":204},"input":{"type":"structure","required":["ResourceId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"ResourceId":{"location":"uri","locationName":"ResourceId"}}}},"RemoveResourcePermission":{"http":{"method":"DELETE","requestUri":"/api/v1/resources/{ResourceId}/permissions/{PrincipalId}","responseCode":204},"input":{"type":"structure","required":["ResourceId","PrincipalId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"ResourceId":{"location":"uri","locationName":"ResourceId"},"PrincipalId":{"location":"uri","locationName":"PrincipalId"},"PrincipalType":{"location":"querystring","locationName":"type"}}}},"UpdateDocument":{"http":{"method":"PATCH","requestUri":"/api/v1/documents/{DocumentId}","responseCode":200},"input":{"type":"structure","required":["DocumentId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"Name":{},"ParentFolderId":{},"ResourceState":{}}}},"UpdateDocumentVersion":{"http":{"method":"PATCH","requestUri":"/api/v1/documents/{DocumentId}/versions/{VersionId}","responseCode":200},"input":{"type":"structure","required":["DocumentId","VersionId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"DocumentId":{"location":"uri","locationName":"DocumentId"},"VersionId":{"location":"uri","locationName":"VersionId"},"VersionStatus":{}}}},"UpdateFolder":{"http":{"method":"PATCH","requestUri":"/api/v1/folders/{FolderId}","responseCode":200},"input":{"type":"structure","required":["FolderId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"FolderId":{"location":"uri","locationName":"FolderId"},"Name":{},"ParentFolderId":{},"ResourceState":{}}}},"UpdateUser":{"http":{"method":"PATCH","requestUri":"/api/v1/users/{UserId}","responseCode":200},"input":{"type":"structure","required":["UserId"],"members":{"AuthenticationToken":{"shape":"S2","location":"header","locationName":"Authentication"},"UserId":{"location":"uri","locationName":"UserId"},"GivenName":{},"Surname":{},"Type":{},"StorageRule":{"shape":"Sj"},"TimeZoneId":{},"Locale":{}}},"output":{"type":"structure","members":{"User":{"shape":"S8"}}}}},"shapes":{"S2":{"type":"string","sensitive":true},"S8":{"type":"structure","members":{"Id":{},"Username":{},"EmailAddress":{},"GivenName":{},"Surname":{},"OrganizationId":{},"RootFolderId":{},"RecycleBinFolderId":{},"Status":{},"Type":{},"CreatedTimestamp":{"type":"timestamp"},"ModifiedTimestamp":{"type":"timestamp"},"TimeZoneId":{},"Locale":{},"Storage":{"type":"structure","members":{"StorageUtilizedInBytes":{"type":"long"},"StorageRule":{"shape":"Sj"}}}}},"Sj":{"type":"structure","members":{"StorageAllocatedInBytes":{"type":"long"},"StorageType":{}}},"Sy":{"type":"string","sensitive":true},"S12":{"type":"structure","required":["CommentId"],"members":{"CommentId":{},"ParentId":{},"ThreadId":{},"Text":{"shape":"Sy"},"Contributor":{"shape":"S8"},"CreatedTimestamp":{"type":"timestamp"},"Status":{},"Visibility":{},"RecipientId":{}}},"S15":{"type":"map","key":{},"value":{}},"S1c":{"type":"structure","members":{"Id":{},"Name":{},"CreatorId":{},"ParentFolderId":{},"CreatedTimestamp":{"type":"timestamp"},"ModifiedTimestamp":{"type":"timestamp"},"ResourceState":{},"Signature":{},"Labels":{"shape":"S1f"},"Size":{"type":"long"},"LatestVersionSize":{"type":"long"}}},"S1f":{"type":"list","member":{}},"S1o":{"type":"structure","members":{"SubscriptionId":{},"EndPoint":{},"Protocol":{}}},"S2b":{"type":"structure","members":{"Id":{},"Username":{},"GivenName":{},"Surname":{},"EmailAddress":{}}},"S2h":{"type":"structure","members":{"Type":{},"Name":{},"OriginalName":{},"Id":{},"VersionId":{},"Owner":{"shape":"S2b"},"ParentId":{}}},"S2s":{"type":"structure","members":{"Id":{},"Name":{},"ContentType":{},"Size":{"type":"long"},"Signature":{},"Status":{},"CreatedTimestamp":{"type":"timestamp"},"ModifiedTimestamp":{"type":"timestamp"},"ContentCreatedTimestamp":{"type":"timestamp"},"ContentModifiedTimestamp":{"type":"timestamp"},"CreatorId":{},"Thumbnail":{"type":"map","key":{},"value":{"shape":"S2x"}},"Source":{"type":"map","key":{},"value":{"shape":"S2x"}}}},"S2x":{"type":"string","sensitive":true},"S35":{"type":"list","member":{"shape":"S1c"}},"S37":{"type":"structure","members":{"Id":{},"CreatorId":{},"ParentFolderId":{},"CreatedTimestamp":{"type":"timestamp"},"ModifiedTimestamp":{"type":"timestamp"},"LatestVersionMetadata":{"shape":"S2s"},"ResourceState":{},"Labels":{"shape":"S1f"}}},"S3x":{"type":"structure","members":{"Components":{"type":"list","member":{"type":"structure","members":{"Id":{},"Name":{}}}}}}}}

/***/ }),
/* 366 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeDocumentVersions":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"DocumentVersions"},"DescribeFolderContents":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":["Folders","Documents"]},"DescribeUsers":{"input_token":"Marker","limit_key":"Limit","output_token":"Marker","result_key":"Users"}}}

/***/ }),
/* 367 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2015-04-08","endpointPrefix":"workspaces","jsonVersion":"1.1","protocol":"json","serviceFullName":"Amazon WorkSpaces","signatureVersion":"v4","targetPrefix":"WorkspacesService","uid":"workspaces-2015-04-08"},"operations":{"CreateTags":{"input":{"type":"structure","required":["ResourceId","Tags"],"members":{"ResourceId":{},"Tags":{"shape":"S3"}}},"output":{"type":"structure","members":{}}},"CreateWorkspaces":{"input":{"type":"structure","required":["Workspaces"],"members":{"Workspaces":{"type":"list","member":{"shape":"Sa"}}}},"output":{"type":"structure","members":{"FailedRequests":{"type":"list","member":{"type":"structure","members":{"WorkspaceRequest":{"shape":"Sa"},"ErrorCode":{},"ErrorMessage":{}}}},"PendingRequests":{"shape":"So"}}}},"DeleteTags":{"input":{"type":"structure","required":["ResourceId","TagKeys"],"members":{"ResourceId":{},"TagKeys":{"type":"list","member":{}}}},"output":{"type":"structure","members":{}}},"DescribeTags":{"input":{"type":"structure","required":["ResourceId"],"members":{"ResourceId":{}}},"output":{"type":"structure","members":{"TagList":{"shape":"S3"}}}},"DescribeWorkspaceBundles":{"input":{"type":"structure","members":{"BundleIds":{"type":"list","member":{}},"Owner":{},"NextToken":{}}},"output":{"type":"structure","members":{"Bundles":{"type":"list","member":{"type":"structure","members":{"BundleId":{},"Name":{},"Owner":{},"Description":{},"UserStorage":{"type":"structure","members":{"Capacity":{}}},"ComputeType":{"type":"structure","members":{"Name":{}}}}}},"NextToken":{}}}},"DescribeWorkspaceDirectories":{"input":{"type":"structure","members":{"DirectoryIds":{"type":"list","member":{}},"NextToken":{}}},"output":{"type":"structure","members":{"Directories":{"type":"list","member":{"type":"structure","members":{"DirectoryId":{},"Alias":{},"DirectoryName":{},"RegistrationCode":{},"SubnetIds":{"type":"list","member":{}},"DnsIpAddresses":{"type":"list","member":{}},"CustomerUserName":{},"IamRoleId":{},"DirectoryType":{},"WorkspaceSecurityGroupId":{},"State":{},"WorkspaceCreationProperties":{"type":"structure","members":{"EnableWorkDocs":{"type":"boolean"},"EnableInternetAccess":{"type":"boolean"},"DefaultOu":{},"CustomSecurityGroupId":{},"UserEnabledAsLocalAdministrator":{"type":"boolean"}}}}}},"NextToken":{}}}},"DescribeWorkspaces":{"input":{"type":"structure","members":{"WorkspaceIds":{"shape":"S1s"},"DirectoryId":{},"UserName":{},"BundleId":{},"Limit":{"type":"integer"},"NextToken":{}}},"output":{"type":"structure","members":{"Workspaces":{"shape":"So"},"NextToken":{}}}},"DescribeWorkspacesConnectionStatus":{"input":{"type":"structure","members":{"WorkspaceIds":{"shape":"S1s"},"NextToken":{}}},"output":{"type":"structure","members":{"WorkspacesConnectionStatus":{"type":"list","member":{"type":"structure","members":{"WorkspaceId":{},"ConnectionState":{},"ConnectionStateCheckTimestamp":{"type":"timestamp"},"LastKnownUserConnectionTimestamp":{"type":"timestamp"}}}},"NextToken":{}}}},"ModifyWorkspaceProperties":{"input":{"type":"structure","required":["WorkspaceId","WorkspaceProperties"],"members":{"WorkspaceId":{},"WorkspaceProperties":{"shape":"Sg"}}},"output":{"type":"structure","members":{}}},"RebootWorkspaces":{"input":{"type":"structure","required":["RebootWorkspaceRequests"],"members":{"RebootWorkspaceRequests":{"type":"list","member":{"type":"structure","required":["WorkspaceId"],"members":{"WorkspaceId":{}}}}}},"output":{"type":"structure","members":{"FailedRequests":{"type":"list","member":{"shape":"S28"}}}}},"RebuildWorkspaces":{"input":{"type":"structure","required":["RebuildWorkspaceRequests"],"members":{"RebuildWorkspaceRequests":{"type":"list","member":{"type":"structure","required":["WorkspaceId"],"members":{"WorkspaceId":{}}}}}},"output":{"type":"structure","members":{"FailedRequests":{"type":"list","member":{"shape":"S28"}}}}},"StartWorkspaces":{"input":{"type":"structure","required":["StartWorkspaceRequests"],"members":{"StartWorkspaceRequests":{"type":"list","member":{"type":"structure","members":{"WorkspaceId":{}}}}}},"output":{"type":"structure","members":{"FailedRequests":{"type":"list","member":{"shape":"S28"}}}}},"StopWorkspaces":{"input":{"type":"structure","required":["StopWorkspaceRequests"],"members":{"StopWorkspaceRequests":{"type":"list","member":{"type":"structure","members":{"WorkspaceId":{}}}}}},"output":{"type":"structure","members":{"FailedRequests":{"type":"list","member":{"shape":"S28"}}}}},"TerminateWorkspaces":{"input":{"type":"structure","required":["TerminateWorkspaceRequests"],"members":{"TerminateWorkspaceRequests":{"type":"list","member":{"type":"structure","required":["WorkspaceId"],"members":{"WorkspaceId":{}}}}}},"output":{"type":"structure","members":{"FailedRequests":{"type":"list","member":{"shape":"S28"}}}}}},"shapes":{"S3":{"type":"list","member":{"type":"structure","required":["Key"],"members":{"Key":{},"Value":{}}}},"Sa":{"type":"structure","required":["DirectoryId","UserName","BundleId"],"members":{"DirectoryId":{},"UserName":{},"BundleId":{},"VolumeEncryptionKey":{},"UserVolumeEncryptionEnabled":{"type":"boolean"},"RootVolumeEncryptionEnabled":{"type":"boolean"},"WorkspaceProperties":{"shape":"Sg"},"Tags":{"shape":"S3"}}},"Sg":{"type":"structure","members":{"RunningMode":{},"RunningModeAutoStopTimeoutInMinutes":{"type":"integer"}}},"So":{"type":"list","member":{"type":"structure","members":{"WorkspaceId":{},"DirectoryId":{},"UserName":{},"IpAddress":{},"State":{},"BundleId":{},"SubnetId":{},"ErrorMessage":{},"ErrorCode":{},"ComputerName":{},"VolumeEncryptionKey":{},"UserVolumeEncryptionEnabled":{"type":"boolean"},"RootVolumeEncryptionEnabled":{"type":"boolean"},"WorkspaceProperties":{"shape":"Sg"}}}},"S1s":{"type":"list","member":{}},"S28":{"type":"structure","members":{"WorkspaceId":{},"ErrorCode":{},"ErrorMessage":{}}}}}

/***/ }),
/* 368 */
/***/ (function(module, exports) {

module.exports = {"pagination":{"DescribeWorkspaceBundles":{"input_token":"NextToken","output_token":"NextToken","result_key":"Bundles"},"DescribeWorkspaceDirectories":{"input_token":"NextToken","output_token":"NextToken","result_key":"Directories"},"DescribeWorkspaces":{"input_token":"NextToken","limit_key":"Limit","output_token":"NextToken","result_key":"Workspaces"}}}

/***/ }),
/* 369 */
/***/ (function(module, exports) {

module.exports = {"version":"2.0","metadata":{"apiVersion":"2016-04-12","endpointPrefix":"xray","protocol":"rest-json","serviceFullName":"AWS X-Ray","signatureVersion":"v4","uid":"xray-2016-04-12"},"operations":{"BatchGetTraces":{"http":{"requestUri":"/Traces"},"input":{"type":"structure","required":["TraceIds"],"members":{"TraceIds":{"shape":"S2"},"NextToken":{}}},"output":{"type":"structure","members":{"Traces":{"type":"list","member":{"type":"structure","members":{"Id":{},"Duration":{"type":"double"},"Segments":{"type":"list","member":{"type":"structure","members":{"Id":{},"Document":{}}}}}}},"UnprocessedTraceIds":{"type":"list","member":{}},"NextToken":{}}}},"GetServiceGraph":{"http":{"requestUri":"/ServiceGraph"},"input":{"type":"structure","required":["StartTime","EndTime"],"members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"NextToken":{}}},"output":{"type":"structure","members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Services":{"shape":"Sh"},"NextToken":{}}}},"GetTraceGraph":{"http":{"requestUri":"/TraceGraph"},"input":{"type":"structure","required":["TraceIds"],"members":{"TraceIds":{"shape":"S2"},"NextToken":{}}},"output":{"type":"structure","members":{"Services":{"shape":"Sh"},"NextToken":{}}}},"GetTraceSummaries":{"http":{"requestUri":"/TraceSummaries"},"input":{"type":"structure","required":["StartTime","EndTime"],"members":{"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Sampling":{"type":"boolean"},"FilterExpression":{},"NextToken":{}}},"output":{"type":"structure","members":{"TraceSummaries":{"type":"list","member":{"type":"structure","members":{"Id":{},"Duration":{"type":"double"},"ResponseTime":{"type":"double"},"HasFault":{"type":"boolean"},"HasError":{"type":"boolean"},"HasThrottle":{"type":"boolean"},"IsPartial":{"type":"boolean"},"Http":{"type":"structure","members":{"HttpURL":{},"HttpStatus":{"type":"integer"},"HttpMethod":{},"UserAgent":{},"ClientIp":{}}},"Annotations":{"type":"map","key":{},"value":{"type":"list","member":{"type":"structure","members":{"AnnotationValue":{"type":"structure","members":{"NumberValue":{"type":"double"},"BooleanValue":{"type":"boolean"},"StringValue":{}}},"ServiceIds":{"shape":"S1d"}}}}},"Users":{"type":"list","member":{"type":"structure","members":{"UserName":{},"ServiceIds":{"shape":"S1d"}}}},"ServiceIds":{"shape":"S1d"}}}},"ApproximateTime":{"type":"timestamp"},"TracesProcessedCount":{"type":"long"},"NextToken":{}}}},"PutTelemetryRecords":{"http":{"requestUri":"/TelemetryRecords"},"input":{"type":"structure","required":["TelemetryRecords"],"members":{"TelemetryRecords":{"type":"list","member":{"type":"structure","members":{"Timestamp":{"type":"timestamp"},"SegmentsReceivedCount":{"type":"integer"},"SegmentsSentCount":{"type":"integer"},"SegmentsSpilloverCount":{"type":"integer"},"SegmentsRejectedCount":{"type":"integer"},"BackendConnectionErrors":{"type":"structure","members":{"TimeoutCount":{"type":"integer"},"ConnectionRefusedCount":{"type":"integer"},"HTTPCode4XXCount":{"type":"integer"},"HTTPCode5XXCount":{"type":"integer"},"UnknownHostCount":{"type":"integer"},"OtherCount":{"type":"integer"}}}}}},"EC2InstanceId":{},"Hostname":{},"ResourceARN":{}}},"output":{"type":"structure","members":{}}},"PutTraceSegments":{"http":{"requestUri":"/TraceSegments"},"input":{"type":"structure","required":["TraceSegmentDocuments"],"members":{"TraceSegmentDocuments":{"type":"list","member":{}}}},"output":{"type":"structure","members":{"UnprocessedTraceSegments":{"type":"list","member":{"type":"structure","members":{"Id":{},"ErrorCode":{},"Message":{}}}}}}}},"shapes":{"S2":{"type":"list","member":{}},"Sh":{"type":"list","member":{"type":"structure","members":{"ReferenceId":{"type":"integer"},"Name":{},"Names":{"shape":"Sk"},"Root":{"type":"boolean"},"AccountId":{},"Type":{},"State":{},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"Edges":{"type":"list","member":{"type":"structure","members":{"ReferenceId":{"type":"integer"},"StartTime":{"type":"timestamp"},"EndTime":{"type":"timestamp"},"SummaryStatistics":{"type":"structure","members":{"OkCount":{"type":"long"},"ErrorStatistics":{"shape":"Sq"},"FaultStatistics":{"shape":"Sr"},"TotalCount":{"type":"long"},"TotalResponseTime":{"type":"double"}}},"ResponseTimeHistogram":{"shape":"Ss"},"Aliases":{"type":"list","member":{"type":"structure","members":{"Name":{},"Names":{"type":"list","member":{}},"Type":{}}}}}}},"SummaryStatistics":{"type":"structure","members":{"OkCount":{"type":"long"},"ErrorStatistics":{"shape":"Sq"},"FaultStatistics":{"shape":"Sr"},"TotalCount":{"type":"long"},"TotalResponseTime":{"type":"double"}}},"DurationHistogram":{"shape":"Ss"},"ResponseTimeHistogram":{"shape":"Ss"}}}},"Sk":{"type":"list","member":{}},"Sq":{"type":"structure","members":{"ThrottleCount":{"type":"long"},"OtherCount":{"type":"long"},"TotalCount":{"type":"long"}}},"Sr":{"type":"structure","members":{"OtherCount":{"type":"long"},"TotalCount":{"type":"long"}}},"Ss":{"type":"list","member":{"type":"structure","members":{"Value":{"type":"double"},"Count":{"type":"integer"}}}},"S1d":{"type":"list","member":{"type":"structure","members":{"Name":{},"Names":{"shape":"Sk"},"AccountId":{},"Type":{}}}}}}

/***/ }),
/* 370 */
/***/ (function(module, exports) {

module.exports = {"pagination":{}}

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['acm'] = {};
AWS.ACM = Service.defineService('acm', ['2015-12-08']);
Object.defineProperty(apiLoader.services['acm'], '2015-12-08', {
  get: function get() {
    var model = __webpack_require__(124);
    model.paginators = __webpack_require__(125).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ACM;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = {
  ACM: __webpack_require__(371),
  APIGateway: __webpack_require__(373),
  ApplicationAutoScaling: __webpack_require__(374),
  AppStream: __webpack_require__(375),
  AutoScaling: __webpack_require__(377),
  Batch: __webpack_require__(378),
  Budgets: __webpack_require__(379),
  CloudDirectory: __webpack_require__(380),
  CloudFormation: __webpack_require__(381),
  CloudFront: __webpack_require__(382),
  CloudHSM: __webpack_require__(383),
  CloudSearch: __webpack_require__(385),
  CloudSearchDomain: __webpack_require__(386),
  CloudTrail: __webpack_require__(387),
  CloudWatch: __webpack_require__(388),
  CloudWatchEvents: __webpack_require__(389),
  CloudWatchLogs: __webpack_require__(390),
  CodeBuild: __webpack_require__(391),
  CodeCommit: __webpack_require__(392),
  CodeDeploy: __webpack_require__(393),
  CodePipeline: __webpack_require__(394),
  CognitoIdentity: __webpack_require__(51),
  CognitoIdentityServiceProvider: __webpack_require__(396),
  CognitoSync: __webpack_require__(397),
  ConfigService: __webpack_require__(398),
  CUR: __webpack_require__(399),
  DataPipeline: __webpack_require__(400),
  DeviceFarm: __webpack_require__(402),
  DirectConnect: __webpack_require__(403),
  DirectoryService: __webpack_require__(404),
  Discovery: __webpack_require__(405),
  DMS: __webpack_require__(406),
  DynamoDB: __webpack_require__(407),
  DynamoDBStreams: __webpack_require__(408),
  EC2: __webpack_require__(409),
  ECR: __webpack_require__(410),
  ECS: __webpack_require__(411),
  EFS: __webpack_require__(412),
  ElastiCache: __webpack_require__(413),
  ElasticBeanstalk: __webpack_require__(414),
  ELB: __webpack_require__(416),
  ELBv2: __webpack_require__(417),
  EMR: __webpack_require__(418),
  ES: __webpack_require__(419),
  ElasticTranscoder: __webpack_require__(415),
  Firehose: __webpack_require__(420),
  GameLift: __webpack_require__(421),
  Glacier: __webpack_require__(422),
  Health: __webpack_require__(425),
  IAM: __webpack_require__(426),
  ImportExport: __webpack_require__(427),
  Inspector: __webpack_require__(428),
  Iot: __webpack_require__(429),
  IotData: __webpack_require__(430),
  Kinesis: __webpack_require__(431),
  KinesisAnalytics: __webpack_require__(432),
  KMS: __webpack_require__(433),
  Lambda: __webpack_require__(434),
  LexRuntime: __webpack_require__(436),
  Lightsail: __webpack_require__(437),
  MachineLearning: __webpack_require__(438),
  MarketplaceCommerceAnalytics: __webpack_require__(439),
  MarketplaceMetering: __webpack_require__(441),
  MTurk: __webpack_require__(445),
  MobileAnalytics: __webpack_require__(444),
  OpsWorks: __webpack_require__(446),
  OpsWorksCM: __webpack_require__(447),
  Organizations: __webpack_require__(448),
  Pinpoint: __webpack_require__(449),
  Polly: __webpack_require__(450),
  RDS: __webpack_require__(452),
  Redshift: __webpack_require__(453),
  Rekognition: __webpack_require__(454),
  ResourceGroupsTaggingAPI: __webpack_require__(455),
  Route53: __webpack_require__(456),
  Route53Domains: __webpack_require__(457),
  S3: __webpack_require__(458),
  ServiceCatalog: __webpack_require__(459),
  SES: __webpack_require__(460),
  Shield: __webpack_require__(461),
  SimpleDB: __webpack_require__(462),
  SMS: __webpack_require__(463),
  Snowball: __webpack_require__(464),
  SNS: __webpack_require__(465),
  SQS: __webpack_require__(466),
  SSM: __webpack_require__(467),
  StorageGateway: __webpack_require__(469),
  StepFunctions: __webpack_require__(468),
  STS: __webpack_require__(11),
  Support: __webpack_require__(470),
  SWF: __webpack_require__(471),
  XRay: __webpack_require__(476),
  WAF: __webpack_require__(472),
  WAFRegional: __webpack_require__(473),
  WorkDocs: __webpack_require__(474),
  WorkSpaces: __webpack_require__(475),
  CodeStar: __webpack_require__(395),
  LexModelBuildingService: __webpack_require__(435),
  MarketplaceEntitlementService: __webpack_require__(440),
  Athena: __webpack_require__(376),
  Greengrass: __webpack_require__(424),
  DAX: __webpack_require__(401),
  MigrationHub: __webpack_require__(442),
  CloudHSMV2: __webpack_require__(384),
  Glue: __webpack_require__(423),
  Mobile: __webpack_require__(443),
  Pricing: __webpack_require__(451)
};

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['apigateway'] = {};
AWS.APIGateway = Service.defineService('apigateway', ['2015-07-09']);
__webpack_require__(508);
Object.defineProperty(apiLoader.services['apigateway'], '2015-07-09', {
  get: function get() {
    var model = __webpack_require__(126);
    model.paginators = __webpack_require__(127).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.APIGateway;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['applicationautoscaling'] = {};
AWS.ApplicationAutoScaling = Service.defineService('applicationautoscaling', ['2016-02-06']);
Object.defineProperty(apiLoader.services['applicationautoscaling'], '2016-02-06', {
  get: function get() {
    var model = __webpack_require__(128);
    model.paginators = __webpack_require__(129).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ApplicationAutoScaling;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['appstream'] = {};
AWS.AppStream = Service.defineService('appstream', ['2016-12-01']);
Object.defineProperty(apiLoader.services['appstream'], '2016-12-01', {
  get: function get() {
    var model = __webpack_require__(130);
    model.paginators = __webpack_require__(131).pagination;
    model.waiters = __webpack_require__(132).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.AppStream;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['athena'] = {};
AWS.Athena = Service.defineService('athena', ['2017-05-18']);
Object.defineProperty(apiLoader.services['athena'], '2017-05-18', {
  get: function get() {
    var model = __webpack_require__(133);
    model.paginators = __webpack_require__(134).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Athena;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['autoscaling'] = {};
AWS.AutoScaling = Service.defineService('autoscaling', ['2011-01-01']);
Object.defineProperty(apiLoader.services['autoscaling'], '2011-01-01', {
  get: function get() {
    var model = __webpack_require__(135);
    model.paginators = __webpack_require__(136).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.AutoScaling;


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['batch'] = {};
AWS.Batch = Service.defineService('batch', ['2016-08-10']);
Object.defineProperty(apiLoader.services['batch'], '2016-08-10', {
  get: function get() {
    var model = __webpack_require__(137);
    model.paginators = __webpack_require__(138).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Batch;


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['budgets'] = {};
AWS.Budgets = Service.defineService('budgets', ['2016-10-20']);
Object.defineProperty(apiLoader.services['budgets'], '2016-10-20', {
  get: function get() {
    var model = __webpack_require__(139);
    model.paginators = __webpack_require__(140).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Budgets;


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['clouddirectory'] = {};
AWS.CloudDirectory = Service.defineService('clouddirectory', ['2016-05-10']);
Object.defineProperty(apiLoader.services['clouddirectory'], '2016-05-10', {
  get: function get() {
    var model = __webpack_require__(141);
    model.paginators = __webpack_require__(142).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudDirectory;


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudformation'] = {};
AWS.CloudFormation = Service.defineService('cloudformation', ['2010-05-15']);
Object.defineProperty(apiLoader.services['cloudformation'], '2010-05-15', {
  get: function get() {
    var model = __webpack_require__(143);
    model.paginators = __webpack_require__(144).pagination;
    model.waiters = __webpack_require__(145).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudFormation;


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudfront'] = {};
AWS.CloudFront = Service.defineService('cloudfront', ['2013-05-12*', '2013-11-11*', '2014-05-31*', '2014-10-21*', '2014-11-06*', '2015-04-17*', '2015-07-27*', '2015-09-17*', '2016-01-13*', '2016-01-28*', '2016-08-01*', '2016-08-20*', '2016-09-07*', '2016-09-29*', '2016-11-25', '2016-11-25*', '2017-03-25']);
__webpack_require__(509);
Object.defineProperty(apiLoader.services['cloudfront'], '2016-11-25', {
  get: function get() {
    var model = __webpack_require__(146);
    model.paginators = __webpack_require__(147).pagination;
    model.waiters = __webpack_require__(148).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['cloudfront'], '2017-03-25', {
  get: function get() {
    var model = __webpack_require__(149);
    model.paginators = __webpack_require__(150).pagination;
    model.waiters = __webpack_require__(151).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudFront;


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudhsm'] = {};
AWS.CloudHSM = Service.defineService('cloudhsm', ['2014-05-30']);
Object.defineProperty(apiLoader.services['cloudhsm'], '2014-05-30', {
  get: function get() {
    var model = __webpack_require__(152);
    model.paginators = __webpack_require__(153).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudHSM;


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudhsmv2'] = {};
AWS.CloudHSMV2 = Service.defineService('cloudhsmv2', ['2017-04-28']);
Object.defineProperty(apiLoader.services['cloudhsmv2'], '2017-04-28', {
  get: function get() {
    var model = __webpack_require__(154);
    model.paginators = __webpack_require__(155).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudHSMV2;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudsearch'] = {};
AWS.CloudSearch = Service.defineService('cloudsearch', ['2011-02-01', '2013-01-01']);
Object.defineProperty(apiLoader.services['cloudsearch'], '2011-02-01', {
  get: function get() {
    var model = __webpack_require__(156);
    model.paginators = __webpack_require__(157).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['cloudsearch'], '2013-01-01', {
  get: function get() {
    var model = __webpack_require__(158);
    model.paginators = __webpack_require__(159).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudSearch;


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudsearchdomain'] = {};
AWS.CloudSearchDomain = Service.defineService('cloudsearchdomain', ['2013-01-01']);
__webpack_require__(510);
Object.defineProperty(apiLoader.services['cloudsearchdomain'], '2013-01-01', {
  get: function get() {
    var model = __webpack_require__(160);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudSearchDomain;


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudtrail'] = {};
AWS.CloudTrail = Service.defineService('cloudtrail', ['2013-11-01']);
Object.defineProperty(apiLoader.services['cloudtrail'], '2013-11-01', {
  get: function get() {
    var model = __webpack_require__(161);
    model.paginators = __webpack_require__(162).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudTrail;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudwatch'] = {};
AWS.CloudWatch = Service.defineService('cloudwatch', ['2010-08-01']);
Object.defineProperty(apiLoader.services['cloudwatch'], '2010-08-01', {
  get: function get() {
    var model = __webpack_require__(288);
    model.paginators = __webpack_require__(289).pagination;
    model.waiters = __webpack_require__(290).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudWatch;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudwatchevents'] = {};
AWS.CloudWatchEvents = Service.defineService('cloudwatchevents', ['2014-02-03*', '2015-10-07']);
Object.defineProperty(apiLoader.services['cloudwatchevents'], '2015-10-07', {
  get: function get() {
    var model = __webpack_require__(237);
    model.paginators = __webpack_require__(238).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudWatchEvents;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cloudwatchlogs'] = {};
AWS.CloudWatchLogs = Service.defineService('cloudwatchlogs', ['2014-03-28']);
Object.defineProperty(apiLoader.services['cloudwatchlogs'], '2014-03-28', {
  get: function get() {
    var model = __webpack_require__(276);
    model.paginators = __webpack_require__(277).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CloudWatchLogs;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['codebuild'] = {};
AWS.CodeBuild = Service.defineService('codebuild', ['2016-10-06']);
Object.defineProperty(apiLoader.services['codebuild'], '2016-10-06', {
  get: function get() {
    var model = __webpack_require__(163);
    model.paginators = __webpack_require__(164).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CodeBuild;


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['codecommit'] = {};
AWS.CodeCommit = Service.defineService('codecommit', ['2015-04-13']);
Object.defineProperty(apiLoader.services['codecommit'], '2015-04-13', {
  get: function get() {
    var model = __webpack_require__(165);
    model.paginators = __webpack_require__(166).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CodeCommit;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['codedeploy'] = {};
AWS.CodeDeploy = Service.defineService('codedeploy', ['2014-10-06']);
Object.defineProperty(apiLoader.services['codedeploy'], '2014-10-06', {
  get: function get() {
    var model = __webpack_require__(167);
    model.paginators = __webpack_require__(168).pagination;
    model.waiters = __webpack_require__(169).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CodeDeploy;


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['codepipeline'] = {};
AWS.CodePipeline = Service.defineService('codepipeline', ['2015-07-09']);
Object.defineProperty(apiLoader.services['codepipeline'], '2015-07-09', {
  get: function get() {
    var model = __webpack_require__(170);
    model.paginators = __webpack_require__(171).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CodePipeline;


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['codestar'] = {};
AWS.CodeStar = Service.defineService('codestar', ['2017-04-19']);
Object.defineProperty(apiLoader.services['codestar'], '2017-04-19', {
  get: function get() {
    var model = __webpack_require__(172);
    model.paginators = __webpack_require__(173).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CodeStar;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cognitoidentityserviceprovider'] = {};
AWS.CognitoIdentityServiceProvider = Service.defineService('cognitoidentityserviceprovider', ['2016-04-18']);
Object.defineProperty(apiLoader.services['cognitoidentityserviceprovider'], '2016-04-18', {
  get: function get() {
    var model = __webpack_require__(176);
    model.paginators = __webpack_require__(177).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CognitoIdentityServiceProvider;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cognitosync'] = {};
AWS.CognitoSync = Service.defineService('cognitosync', ['2014-06-30']);
Object.defineProperty(apiLoader.services['cognitosync'], '2014-06-30', {
  get: function get() {
    var model = __webpack_require__(178);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CognitoSync;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['configservice'] = {};
AWS.ConfigService = Service.defineService('configservice', ['2014-11-12']);
Object.defineProperty(apiLoader.services['configservice'], '2014-11-12', {
  get: function get() {
    var model = __webpack_require__(179);
    model.paginators = __webpack_require__(180).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ConfigService;


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['cur'] = {};
AWS.CUR = Service.defineService('cur', ['2017-01-06']);
Object.defineProperty(apiLoader.services['cur'], '2017-01-06', {
  get: function get() {
    var model = __webpack_require__(181);
    model.paginators = __webpack_require__(182).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.CUR;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['datapipeline'] = {};
AWS.DataPipeline = Service.defineService('datapipeline', ['2012-10-29']);
Object.defineProperty(apiLoader.services['datapipeline'], '2012-10-29', {
  get: function get() {
    var model = __webpack_require__(183);
    model.paginators = __webpack_require__(184).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DataPipeline;


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['dax'] = {};
AWS.DAX = Service.defineService('dax', ['2017-04-19']);
Object.defineProperty(apiLoader.services['dax'], '2017-04-19', {
  get: function get() {
    var model = __webpack_require__(185);
    model.paginators = __webpack_require__(186).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DAX;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['devicefarm'] = {};
AWS.DeviceFarm = Service.defineService('devicefarm', ['2015-06-23']);
Object.defineProperty(apiLoader.services['devicefarm'], '2015-06-23', {
  get: function get() {
    var model = __webpack_require__(187);
    model.paginators = __webpack_require__(188).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DeviceFarm;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['directconnect'] = {};
AWS.DirectConnect = Service.defineService('directconnect', ['2012-10-25']);
Object.defineProperty(apiLoader.services['directconnect'], '2012-10-25', {
  get: function get() {
    var model = __webpack_require__(189);
    model.paginators = __webpack_require__(190).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DirectConnect;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['directoryservice'] = {};
AWS.DirectoryService = Service.defineService('directoryservice', ['2015-04-16']);
Object.defineProperty(apiLoader.services['directoryservice'], '2015-04-16', {
  get: function get() {
    var model = __webpack_require__(195);
    model.paginators = __webpack_require__(196).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DirectoryService;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['discovery'] = {};
AWS.Discovery = Service.defineService('discovery', ['2015-11-01']);
Object.defineProperty(apiLoader.services['discovery'], '2015-11-01', {
  get: function get() {
    var model = __webpack_require__(191);
    model.paginators = __webpack_require__(192).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Discovery;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['dms'] = {};
AWS.DMS = Service.defineService('dms', ['2016-01-01']);
Object.defineProperty(apiLoader.services['dms'], '2016-01-01', {
  get: function get() {
    var model = __webpack_require__(193);
    model.paginators = __webpack_require__(194).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DMS;


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['dynamodb'] = {};
AWS.DynamoDB = Service.defineService('dynamodb', ['2011-12-05', '2012-08-10']);
__webpack_require__(512);
Object.defineProperty(apiLoader.services['dynamodb'], '2011-12-05', {
  get: function get() {
    var model = __webpack_require__(197);
    model.paginators = __webpack_require__(198).pagination;
    model.waiters = __webpack_require__(199).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['dynamodb'], '2012-08-10', {
  get: function get() {
    var model = __webpack_require__(200);
    model.paginators = __webpack_require__(201).pagination;
    model.waiters = __webpack_require__(202).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DynamoDB;


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['dynamodbstreams'] = {};
AWS.DynamoDBStreams = Service.defineService('dynamodbstreams', ['2012-08-10']);
Object.defineProperty(apiLoader.services['dynamodbstreams'], '2012-08-10', {
  get: function get() {
    var model = __webpack_require__(353);
    model.paginators = __webpack_require__(354).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.DynamoDBStreams;


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['ec2'] = {};
AWS.EC2 = Service.defineService('ec2', ['2013-06-15*', '2013-10-15*', '2014-02-01*', '2014-05-01*', '2014-06-15*', '2014-09-01*', '2014-10-01*', '2015-03-01*', '2015-04-15*', '2015-10-01*', '2016-04-01*', '2016-09-15*', '2016-11-15']);
__webpack_require__(513);
Object.defineProperty(apiLoader.services['ec2'], '2016-11-15', {
  get: function get() {
    var model = __webpack_require__(203);
    model.paginators = __webpack_require__(204).pagination;
    model.waiters = __webpack_require__(205).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.EC2;


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['ecr'] = {};
AWS.ECR = Service.defineService('ecr', ['2015-09-21']);
Object.defineProperty(apiLoader.services['ecr'], '2015-09-21', {
  get: function get() {
    var model = __webpack_require__(206);
    model.paginators = __webpack_require__(207).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ECR;


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['ecs'] = {};
AWS.ECS = Service.defineService('ecs', ['2014-11-13']);
Object.defineProperty(apiLoader.services['ecs'], '2014-11-13', {
  get: function get() {
    var model = __webpack_require__(208);
    model.paginators = __webpack_require__(209).pagination;
    model.waiters = __webpack_require__(210).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ECS;


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['efs'] = {};
AWS.EFS = Service.defineService('efs', ['2015-02-01']);
Object.defineProperty(apiLoader.services['efs'], '2015-02-01', {
  get: function get() {
    var model = __webpack_require__(216);
    model.paginators = __webpack_require__(217).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.EFS;


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['elasticache'] = {};
AWS.ElastiCache = Service.defineService('elasticache', ['2012-11-15*', '2014-03-24*', '2014-07-15*', '2014-09-30*', '2015-02-02']);
Object.defineProperty(apiLoader.services['elasticache'], '2015-02-02', {
  get: function get() {
    var model = __webpack_require__(211);
    model.paginators = __webpack_require__(212).pagination;
    model.waiters = __webpack_require__(213).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ElastiCache;


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['elasticbeanstalk'] = {};
AWS.ElasticBeanstalk = Service.defineService('elasticbeanstalk', ['2010-12-01']);
Object.defineProperty(apiLoader.services['elasticbeanstalk'], '2010-12-01', {
  get: function get() {
    var model = __webpack_require__(214);
    model.paginators = __webpack_require__(215).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ElasticBeanstalk;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['elastictranscoder'] = {};
AWS.ElasticTranscoder = Service.defineService('elastictranscoder', ['2012-09-25']);
Object.defineProperty(apiLoader.services['elastictranscoder'], '2012-09-25', {
  get: function get() {
    var model = __webpack_require__(227);
    model.paginators = __webpack_require__(228).pagination;
    model.waiters = __webpack_require__(229).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ElasticTranscoder;


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['elb'] = {};
AWS.ELB = Service.defineService('elb', ['2012-06-01']);
Object.defineProperty(apiLoader.services['elb'], '2012-06-01', {
  get: function get() {
    var model = __webpack_require__(218);
    model.paginators = __webpack_require__(219).pagination;
    model.waiters = __webpack_require__(220).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ELB;


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['elbv2'] = {};
AWS.ELBv2 = Service.defineService('elbv2', ['2015-12-01']);
Object.defineProperty(apiLoader.services['elbv2'], '2015-12-01', {
  get: function get() {
    var model = __webpack_require__(221);
    model.paginators = __webpack_require__(222).pagination;
    model.waiters = __webpack_require__(223).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ELBv2;


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['emr'] = {};
AWS.EMR = Service.defineService('emr', ['2009-03-31']);
Object.defineProperty(apiLoader.services['emr'], '2009-03-31', {
  get: function get() {
    var model = __webpack_require__(224);
    model.paginators = __webpack_require__(225).pagination;
    model.waiters = __webpack_require__(226).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.EMR;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['es'] = {};
AWS.ES = Service.defineService('es', ['2015-01-01']);
Object.defineProperty(apiLoader.services['es'], '2015-01-01', {
  get: function get() {
    var model = __webpack_require__(235);
    model.paginators = __webpack_require__(236).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ES;


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['firehose'] = {};
AWS.Firehose = Service.defineService('firehose', ['2015-08-04']);
Object.defineProperty(apiLoader.services['firehose'], '2015-08-04', {
  get: function get() {
    var model = __webpack_require__(239);
    model.paginators = __webpack_require__(240).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Firehose;


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['gamelift'] = {};
AWS.GameLift = Service.defineService('gamelift', ['2015-10-01']);
Object.defineProperty(apiLoader.services['gamelift'], '2015-10-01', {
  get: function get() {
    var model = __webpack_require__(241);
    model.paginators = __webpack_require__(242).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.GameLift;


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['glacier'] = {};
AWS.Glacier = Service.defineService('glacier', ['2012-06-01']);
__webpack_require__(514);
Object.defineProperty(apiLoader.services['glacier'], '2012-06-01', {
  get: function get() {
    var model = __webpack_require__(243);
    model.paginators = __webpack_require__(244).pagination;
    model.waiters = __webpack_require__(245).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Glacier;


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['glue'] = {};
AWS.Glue = Service.defineService('glue', ['2017-03-31']);
Object.defineProperty(apiLoader.services['glue'], '2017-03-31', {
  get: function get() {
    var model = __webpack_require__(246);
    model.paginators = __webpack_require__(247).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Glue;


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['greengrass'] = {};
AWS.Greengrass = Service.defineService('greengrass', ['2017-06-07']);
Object.defineProperty(apiLoader.services['greengrass'], '2017-06-07', {
  get: function get() {
    var model = __webpack_require__(248);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Greengrass;


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['health'] = {};
AWS.Health = Service.defineService('health', ['2016-08-04']);
Object.defineProperty(apiLoader.services['health'], '2016-08-04', {
  get: function get() {
    var model = __webpack_require__(249);
    model.paginators = __webpack_require__(250).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Health;


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['iam'] = {};
AWS.IAM = Service.defineService('iam', ['2010-05-08']);
Object.defineProperty(apiLoader.services['iam'], '2010-05-08', {
  get: function get() {
    var model = __webpack_require__(251);
    model.paginators = __webpack_require__(252).pagination;
    model.waiters = __webpack_require__(253).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.IAM;


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['importexport'] = {};
AWS.ImportExport = Service.defineService('importexport', ['2010-06-01']);
Object.defineProperty(apiLoader.services['importexport'], '2010-06-01', {
  get: function get() {
    var model = __webpack_require__(254);
    model.paginators = __webpack_require__(255).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ImportExport;


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['inspector'] = {};
AWS.Inspector = Service.defineService('inspector', ['2015-08-18*', '2016-02-16']);
Object.defineProperty(apiLoader.services['inspector'], '2016-02-16', {
  get: function get() {
    var model = __webpack_require__(256);
    model.paginators = __webpack_require__(257).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Inspector;


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['iot'] = {};
AWS.Iot = Service.defineService('iot', ['2015-05-28']);
Object.defineProperty(apiLoader.services['iot'], '2015-05-28', {
  get: function get() {
    var model = __webpack_require__(258);
    model.paginators = __webpack_require__(259).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Iot;


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['iotdata'] = {};
AWS.IotData = Service.defineService('iotdata', ['2015-05-28']);
__webpack_require__(515);
Object.defineProperty(apiLoader.services['iotdata'], '2015-05-28', {
  get: function get() {
    var model = __webpack_require__(260);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.IotData;


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['kinesis'] = {};
AWS.Kinesis = Service.defineService('kinesis', ['2013-12-02']);
Object.defineProperty(apiLoader.services['kinesis'], '2013-12-02', {
  get: function get() {
    var model = __webpack_require__(261);
    model.paginators = __webpack_require__(262).pagination;
    model.waiters = __webpack_require__(263).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Kinesis;


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['kinesisanalytics'] = {};
AWS.KinesisAnalytics = Service.defineService('kinesisanalytics', ['2015-08-14']);
Object.defineProperty(apiLoader.services['kinesisanalytics'], '2015-08-14', {
  get: function get() {
    var model = __webpack_require__(264);
    model.paginators = __webpack_require__(265).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.KinesisAnalytics;


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['kms'] = {};
AWS.KMS = Service.defineService('kms', ['2014-11-01']);
Object.defineProperty(apiLoader.services['kms'], '2014-11-01', {
  get: function get() {
    var model = __webpack_require__(266);
    model.paginators = __webpack_require__(267).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.KMS;


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['lambda'] = {};
AWS.Lambda = Service.defineService('lambda', ['2014-11-11', '2015-03-31']);
__webpack_require__(516);
Object.defineProperty(apiLoader.services['lambda'], '2014-11-11', {
  get: function get() {
    var model = __webpack_require__(268);
    model.paginators = __webpack_require__(269).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['lambda'], '2015-03-31', {
  get: function get() {
    var model = __webpack_require__(270);
    model.paginators = __webpack_require__(271).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Lambda;


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['lexmodelbuildingservice'] = {};
AWS.LexModelBuildingService = Service.defineService('lexmodelbuildingservice', ['2017-04-19']);
Object.defineProperty(apiLoader.services['lexmodelbuildingservice'], '2017-04-19', {
  get: function get() {
    var model = __webpack_require__(272);
    model.paginators = __webpack_require__(273).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.LexModelBuildingService;


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['lexruntime'] = {};
AWS.LexRuntime = Service.defineService('lexruntime', ['2016-11-28']);
Object.defineProperty(apiLoader.services['lexruntime'], '2016-11-28', {
  get: function get() {
    var model = __webpack_require__(329);
    model.paginators = __webpack_require__(330).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.LexRuntime;


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['lightsail'] = {};
AWS.Lightsail = Service.defineService('lightsail', ['2016-11-28']);
Object.defineProperty(apiLoader.services['lightsail'], '2016-11-28', {
  get: function get() {
    var model = __webpack_require__(274);
    model.paginators = __webpack_require__(275).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Lightsail;


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['machinelearning'] = {};
AWS.MachineLearning = Service.defineService('machinelearning', ['2014-12-12']);
__webpack_require__(517);
Object.defineProperty(apiLoader.services['machinelearning'], '2014-12-12', {
  get: function get() {
    var model = __webpack_require__(278);
    model.paginators = __webpack_require__(279).pagination;
    model.waiters = __webpack_require__(280).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.MachineLearning;


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['marketplacecommerceanalytics'] = {};
AWS.MarketplaceCommerceAnalytics = Service.defineService('marketplacecommerceanalytics', ['2015-07-01']);
Object.defineProperty(apiLoader.services['marketplacecommerceanalytics'], '2015-07-01', {
  get: function get() {
    var model = __webpack_require__(281);
    model.paginators = __webpack_require__(282).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.MarketplaceCommerceAnalytics;


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['marketplaceentitlementservice'] = {};
AWS.MarketplaceEntitlementService = Service.defineService('marketplaceentitlementservice', ['2017-01-11']);
Object.defineProperty(apiLoader.services['marketplaceentitlementservice'], '2017-01-11', {
  get: function get() {
    var model = __webpack_require__(233);
    model.paginators = __webpack_require__(234).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.MarketplaceEntitlementService;


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['marketplacemetering'] = {};
AWS.MarketplaceMetering = Service.defineService('marketplacemetering', ['2016-01-14']);
Object.defineProperty(apiLoader.services['marketplacemetering'], '2016-01-14', {
  get: function get() {
    var model = __webpack_require__(284);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.MarketplaceMetering;


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['migrationhub'] = {};
AWS.MigrationHub = Service.defineService('migrationhub', ['2017-05-31']);
Object.defineProperty(apiLoader.services['migrationhub'], '2017-05-31', {
  get: function get() {
    var model = __webpack_require__(122);
    model.paginators = __webpack_require__(123).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.MigrationHub;


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['mobile'] = {};
AWS.Mobile = Service.defineService('mobile', ['2017-07-01']);
Object.defineProperty(apiLoader.services['mobile'], '2017-07-01', {
  get: function get() {
    var model = __webpack_require__(285);
    model.paginators = __webpack_require__(286).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Mobile;


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['mobileanalytics'] = {};
AWS.MobileAnalytics = Service.defineService('mobileanalytics', ['2014-06-05']);
Object.defineProperty(apiLoader.services['mobileanalytics'], '2014-06-05', {
  get: function get() {
    var model = __webpack_require__(287);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.MobileAnalytics;


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['mturk'] = {};
AWS.MTurk = Service.defineService('mturk', ['2017-01-17']);
Object.defineProperty(apiLoader.services['mturk'], '2017-01-17', {
  get: function get() {
    var model = __webpack_require__(291);
    model.paginators = __webpack_require__(292).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.MTurk;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['opsworks'] = {};
AWS.OpsWorks = Service.defineService('opsworks', ['2013-02-18']);
Object.defineProperty(apiLoader.services['opsworks'], '2013-02-18', {
  get: function get() {
    var model = __webpack_require__(293);
    model.paginators = __webpack_require__(294).pagination;
    model.waiters = __webpack_require__(295).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.OpsWorks;


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['opsworkscm'] = {};
AWS.OpsWorksCM = Service.defineService('opsworkscm', ['2016-11-01']);
Object.defineProperty(apiLoader.services['opsworkscm'], '2016-11-01', {
  get: function get() {
    var model = __webpack_require__(296);
    model.paginators = __webpack_require__(297).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.OpsWorksCM;


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['organizations'] = {};
AWS.Organizations = Service.defineService('organizations', ['2016-11-28']);
Object.defineProperty(apiLoader.services['organizations'], '2016-11-28', {
  get: function get() {
    var model = __webpack_require__(298);
    model.paginators = __webpack_require__(299).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Organizations;


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['pinpoint'] = {};
AWS.Pinpoint = Service.defineService('pinpoint', ['2016-12-01']);
Object.defineProperty(apiLoader.services['pinpoint'], '2016-12-01', {
  get: function get() {
    var model = __webpack_require__(300);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Pinpoint;


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['polly'] = {};
AWS.Polly = Service.defineService('polly', ['2016-06-10']);
__webpack_require__(518);
Object.defineProperty(apiLoader.services['polly'], '2016-06-10', {
  get: function get() {
    var model = __webpack_require__(301);
    model.paginators = __webpack_require__(302).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Polly;


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['pricing'] = {};
AWS.Pricing = Service.defineService('pricing', ['2017-10-15']);
Object.defineProperty(apiLoader.services['pricing'], '2017-10-15', {
  get: function get() {
    var model = __webpack_require__(303);
    model.paginators = __webpack_require__(304).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Pricing;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['rds'] = {};
AWS.RDS = Service.defineService('rds', ['2013-01-10', '2013-02-12', '2013-09-09', '2014-09-01', '2014-09-01*', '2014-10-31']);
__webpack_require__(519);
Object.defineProperty(apiLoader.services['rds'], '2013-01-10', {
  get: function get() {
    var model = __webpack_require__(305);
    model.paginators = __webpack_require__(306).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['rds'], '2013-02-12', {
  get: function get() {
    var model = __webpack_require__(307);
    model.paginators = __webpack_require__(308).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['rds'], '2013-09-09', {
  get: function get() {
    var model = __webpack_require__(309);
    model.paginators = __webpack_require__(310).pagination;
    model.waiters = __webpack_require__(311).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['rds'], '2014-09-01', {
  get: function get() {
    var model = __webpack_require__(312);
    model.paginators = __webpack_require__(313).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});
Object.defineProperty(apiLoader.services['rds'], '2014-10-31', {
  get: function get() {
    var model = __webpack_require__(314);
    model.paginators = __webpack_require__(315).pagination;
    model.waiters = __webpack_require__(316).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.RDS;


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['redshift'] = {};
AWS.Redshift = Service.defineService('redshift', ['2012-12-01']);
Object.defineProperty(apiLoader.services['redshift'], '2012-12-01', {
  get: function get() {
    var model = __webpack_require__(317);
    model.paginators = __webpack_require__(318).pagination;
    model.waiters = __webpack_require__(319).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Redshift;


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['rekognition'] = {};
AWS.Rekognition = Service.defineService('rekognition', ['2016-06-27']);
Object.defineProperty(apiLoader.services['rekognition'], '2016-06-27', {
  get: function get() {
    var model = __webpack_require__(320);
    model.paginators = __webpack_require__(321).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Rekognition;


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['resourcegroupstaggingapi'] = {};
AWS.ResourceGroupsTaggingAPI = Service.defineService('resourcegroupstaggingapi', ['2017-01-26']);
Object.defineProperty(apiLoader.services['resourcegroupstaggingapi'], '2017-01-26', {
  get: function get() {
    var model = __webpack_require__(322);
    model.paginators = __webpack_require__(323).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ResourceGroupsTaggingAPI;


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['route53'] = {};
AWS.Route53 = Service.defineService('route53', ['2013-04-01']);
__webpack_require__(520);
Object.defineProperty(apiLoader.services['route53'], '2013-04-01', {
  get: function get() {
    var model = __webpack_require__(324);
    model.paginators = __webpack_require__(325).pagination;
    model.waiters = __webpack_require__(326).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Route53;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['route53domains'] = {};
AWS.Route53Domains = Service.defineService('route53domains', ['2014-05-15']);
Object.defineProperty(apiLoader.services['route53domains'], '2014-05-15', {
  get: function get() {
    var model = __webpack_require__(327);
    model.paginators = __webpack_require__(328).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Route53Domains;


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['s3'] = {};
AWS.S3 = Service.defineService('s3', ['2006-03-01']);
__webpack_require__(521);
Object.defineProperty(apiLoader.services['s3'], '2006-03-01', {
  get: function get() {
    var model = __webpack_require__(331);
    model.paginators = __webpack_require__(332).pagination;
    model.waiters = __webpack_require__(333).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.S3;


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['servicecatalog'] = {};
AWS.ServiceCatalog = Service.defineService('servicecatalog', ['2015-12-10']);
Object.defineProperty(apiLoader.services['servicecatalog'], '2015-12-10', {
  get: function get() {
    var model = __webpack_require__(336);
    model.paginators = __webpack_require__(337).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.ServiceCatalog;


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['ses'] = {};
AWS.SES = Service.defineService('ses', ['2010-12-01']);
Object.defineProperty(apiLoader.services['ses'], '2010-12-01', {
  get: function get() {
    var model = __webpack_require__(230);
    model.paginators = __webpack_require__(231).pagination;
    model.waiters = __webpack_require__(232).waiters;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SES;


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['shield'] = {};
AWS.Shield = Service.defineService('shield', ['2016-06-02']);
Object.defineProperty(apiLoader.services['shield'], '2016-06-02', {
  get: function get() {
    var model = __webpack_require__(338);
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Shield;


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['simpledb'] = {};
AWS.SimpleDB = Service.defineService('simpledb', ['2009-04-15']);
Object.defineProperty(apiLoader.services['simpledb'], '2009-04-15', {
  get: function get() {
    var model = __webpack_require__(334);
    model.paginators = __webpack_require__(335).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SimpleDB;


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['sms'] = {};
AWS.SMS = Service.defineService('sms', ['2016-10-24']);
Object.defineProperty(apiLoader.services['sms'], '2016-10-24', {
  get: function get() {
    var model = __webpack_require__(339);
    model.paginators = __webpack_require__(340).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SMS;


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['snowball'] = {};
AWS.Snowball = Service.defineService('snowball', ['2016-06-30']);
Object.defineProperty(apiLoader.services['snowball'], '2016-06-30', {
  get: function get() {
    var model = __webpack_require__(341);
    model.paginators = __webpack_require__(342).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Snowball;


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['sns'] = {};
AWS.SNS = Service.defineService('sns', ['2010-03-31']);
Object.defineProperty(apiLoader.services['sns'], '2010-03-31', {
  get: function get() {
    var model = __webpack_require__(343);
    model.paginators = __webpack_require__(344).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SNS;


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['sqs'] = {};
AWS.SQS = Service.defineService('sqs', ['2012-11-05']);
__webpack_require__(522);
Object.defineProperty(apiLoader.services['sqs'], '2012-11-05', {
  get: function get() {
    var model = __webpack_require__(345);
    model.paginators = __webpack_require__(346).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SQS;


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['ssm'] = {};
AWS.SSM = Service.defineService('ssm', ['2014-11-06']);
Object.defineProperty(apiLoader.services['ssm'], '2014-11-06', {
  get: function get() {
    var model = __webpack_require__(347);
    model.paginators = __webpack_require__(348).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SSM;


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['stepfunctions'] = {};
AWS.StepFunctions = Service.defineService('stepfunctions', ['2016-11-23']);
Object.defineProperty(apiLoader.services['stepfunctions'], '2016-11-23', {
  get: function get() {
    var model = __webpack_require__(349);
    model.paginators = __webpack_require__(350).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.StepFunctions;


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['storagegateway'] = {};
AWS.StorageGateway = Service.defineService('storagegateway', ['2013-06-30']);
Object.defineProperty(apiLoader.services['storagegateway'], '2013-06-30', {
  get: function get() {
    var model = __webpack_require__(351);
    model.paginators = __webpack_require__(352).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.StorageGateway;


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['support'] = {};
AWS.Support = Service.defineService('support', ['2013-04-15']);
Object.defineProperty(apiLoader.services['support'], '2013-04-15', {
  get: function get() {
    var model = __webpack_require__(357);
    model.paginators = __webpack_require__(358).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.Support;


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['swf'] = {};
AWS.SWF = Service.defineService('swf', ['2012-01-25']);
__webpack_require__(524);
Object.defineProperty(apiLoader.services['swf'], '2012-01-25', {
  get: function get() {
    var model = __webpack_require__(359);
    model.paginators = __webpack_require__(360).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.SWF;


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['waf'] = {};
AWS.WAF = Service.defineService('waf', ['2015-08-24']);
Object.defineProperty(apiLoader.services['waf'], '2015-08-24', {
  get: function get() {
    var model = __webpack_require__(361);
    model.paginators = __webpack_require__(362).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.WAF;


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['wafregional'] = {};
AWS.WAFRegional = Service.defineService('wafregional', ['2016-11-28']);
Object.defineProperty(apiLoader.services['wafregional'], '2016-11-28', {
  get: function get() {
    var model = __webpack_require__(363);
    model.paginators = __webpack_require__(364).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.WAFRegional;


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['workdocs'] = {};
AWS.WorkDocs = Service.defineService('workdocs', ['2016-05-01']);
Object.defineProperty(apiLoader.services['workdocs'], '2016-05-01', {
  get: function get() {
    var model = __webpack_require__(365);
    model.paginators = __webpack_require__(366).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.WorkDocs;


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['workspaces'] = {};
AWS.WorkSpaces = Service.defineService('workspaces', ['2015-04-08']);
Object.defineProperty(apiLoader.services['workspaces'], '2015-04-08', {
  get: function get() {
    var model = __webpack_require__(367);
    model.paginators = __webpack_require__(368).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.WorkSpaces;


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
var AWS = __webpack_require__(0);
var Service = AWS.Service;
var apiLoader = AWS.apiLoader;

apiLoader.services['xray'] = {};
AWS.XRay = Service.defineService('xray', ['2016-04-12']);
Object.defineProperty(apiLoader.services['xray'], '2016-04-12', {
  get: function get() {
    var model = __webpack_require__(369);
    model.paginators = __webpack_require__(370).pagination;
    return model;
  },
  enumerable: true,
  configurable: true
});

module.exports = AWS.XRay;


/***/ }),
/* 477 */
/***/ (function(module, exports) {

function apiLoader(svc, version) {
  if (!apiLoader.services.hasOwnProperty(svc)) {
    throw new Error('InvalidService: Failed to load api for ' + svc);
  }
  return apiLoader.services[svc][version];
}

/**
 * This member of AWS.apiLoader is private, but changing it will necessitate a
 * change to ../scripts/services-table-generator.ts
 */
apiLoader.services = {};
module.exports = apiLoader;


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);

var AWS = __webpack_require__(0);

// Load all service classes
__webpack_require__(372);
module.exports = AWS;


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0),
    url = AWS.util.url,
    crypto = AWS.util.crypto.lib,
    base64Encode = AWS.util.base64.encode,
    inherit = AWS.util.inherit;

var queryEncode = function (string) {
    var replacements = {
        '+': '-',
        '=': '_',
        '/': '~'
    };
    return string.replace(/[\+=\/]/g, function (match) {
        return replacements[match];
    });
};

var signPolicy = function (policy, privateKey) {
    var sign = crypto.createSign('RSA-SHA1');
    sign.write(policy);
    return queryEncode(sign.sign(privateKey, 'base64'))
};

var signWithCannedPolicy = function (url, expires, keyPairId, privateKey) {
    var policy = JSON.stringify({
        Statement: [
            {
                Resource: url,
                Condition: { DateLessThan: { 'AWS:EpochTime': expires } }
            }
        ]
    });

    return {
        Expires: expires,
        'Key-Pair-Id': keyPairId,
        Signature: signPolicy(policy.toString(), privateKey)
    };
};

var signWithCustomPolicy = function (policy, keyPairId, privateKey) {
    policy = policy.replace(/\s/mg, policy);

    return {
        Policy: queryEncode(base64Encode(policy)),
        'Key-Pair-Id': keyPairId,
        Signature: signPolicy(policy, privateKey)
    }
};

var determineScheme = function (url) {
    var parts = url.split('://');
    if (parts.length < 2) {
        throw new Error('Invalid URL.');
    }

    return parts[0].replace('*', '');
};

var getRtmpUrl = function (rtmpUrl) {
    var parsed = url.parse(rtmpUrl);
    return parsed.path.replace(/^\//, '') + (parsed.hash || '');
};

var getResource = function (url) {
    switch (determineScheme(url)) {
        case 'http':
        case 'https':
            return url;
        case 'rtmp':
            return getRtmpUrl(url);
        default:
            throw new Error('Invalid URI scheme. Scheme must be one of'
                + ' http, https, or rtmp');
    }
};

var handleError = function (err, callback) {
    if (!callback || typeof callback !== 'function') {
        throw err;
    }

    callback(err);
};

var handleSuccess = function (result, callback) {
    if (!callback || typeof callback !== 'function') {
        return result;
    }

    callback(null, result);
};

AWS.CloudFront.Signer = inherit({
    /**
     * A signer object can be used to generate signed URLs and cookies for granting
     * access to content on restricted CloudFront distributions.
     *
     * @see http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html
     *
     * @param keyPairId [String]    (Required) The ID of the CloudFront key pair
     *                              being used.
     * @param privateKey [String]   (Required) A private key in RSA format.
     */
    constructor: function Signer(keyPairId, privateKey) {
        if (keyPairId === void 0 || privateKey === void 0) {
            throw new Error('A key pair ID and private key are required');
        }

        this.keyPairId = keyPairId;
        this.privateKey = privateKey;
    },

    /**
     * Create a signed Amazon CloudFront Cookie.
     *
     * @param options [Object]            The options to create a signed cookie.
     * @option options url [String]     The URL to which the signature will grant
     *                                  access. Required unless you pass in a full
     *                                  policy.
     * @option options expires [Number] A Unix UTC timestamp indicating when the
     *                                  signature should expire. Required unless you
     *                                  pass in a full policy.
     * @option options policy [String]  A CloudFront JSON policy. Required unless
     *                                  you pass in a url and an expiry time.
     *
     * @param cb [Function] if a callback is provided, this function will
     *   pass the hash as the second parameter (after the error parameter) to
     *   the callback function.
     *
     * @return [Object] if called synchronously (with no callback), returns the
     *   signed cookie parameters.
     * @return [null] nothing is returned if a callback is provided.
     */
    getSignedCookie: function (options, cb) {
        var signatureHash = 'policy' in options
            ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)
            : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);

        var cookieHash = {};
        for (var key in signatureHash) {
            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
                cookieHash['CloudFront-' + key] = signatureHash[key];
            }
        }

        return handleSuccess(cookieHash, cb);
    },

    /**
     * Create a signed Amazon CloudFront URL.
     *
     * Keep in mind that URLs meant for use in media/flash players may have
     * different requirements for URL formats (e.g. some require that the
     * extension be removed, some require the file name to be prefixed
     * - mp4:<path>, some require you to add "/cfx/st" into your URL).
     *
     * @param options [Object]          The options to create a signed URL.
     * @option options url [String]     The URL to which the signature will grant
     *                                  access. Required.
     * @option options expires [Number] A Unix UTC timestamp indicating when the
     *                                  signature should expire. Required unless you
     *                                  pass in a full policy.
     * @option options policy [String]  A CloudFront JSON policy. Required unless
     *                                  you pass in a url and an expiry time.
     *
     * @param cb [Function] if a callback is provided, this function will
     *   pass the URL as the second parameter (after the error parameter) to
     *   the callback function.
     *
     * @return [String] if called synchronously (with no callback), returns the
     *   signed URL.
     * @return [null] nothing is returned if a callback is provided.
     */
    getSignedUrl: function (options, cb) {
        try {
            var resource = getResource(options.url);
        } catch (err) {
            return handleError(err, cb);
        }

        var parsedUrl = url.parse(options.url, true),
            signatureHash = Object.prototype.hasOwnProperty.call(options, 'policy')
                ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)
                : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);

        parsedUrl.search = null;
        for (var key in signatureHash) {
            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
                parsedUrl.query[key] = signatureHash[key];
            }
        }

        try {
            var signedUrl = determineScheme(options.url) === 'rtmp'
                    ? getRtmpUrl(url.format(parsedUrl))
                    : url.format(parsedUrl);
        } catch (err) {
            return handleError(err, cb);
        }

        return handleSuccess(signedUrl, cb);
    }
});

module.exports = AWS.CloudFront.Signer;


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
__webpack_require__(52);
__webpack_require__(53);
var PromisesDependency;

/**
 * The main configuration class used by all service objects to set
 * the region, credentials, and other options for requests.
 *
 * By default, credentials and region settings are left unconfigured.
 * This should be configured by the application before using any
 * AWS service APIs.
 *
 * In order to set global configuration options, properties should
 * be assigned to the global {AWS.config} object.
 *
 * @see AWS.config
 *
 * @!group General Configuration Options
 *
 * @!attribute credentials
 *   @return [AWS.Credentials] the AWS credentials to sign requests with.
 *
 * @!attribute region
 *   @example Set the global region setting to us-west-2
 *     AWS.config.update({region: 'us-west-2'});
 *   @return [AWS.Credentials] The region to send service requests to.
 *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html
 *     A list of available endpoints for each AWS service
 *
 * @!attribute maxRetries
 *   @return [Integer] the maximum amount of retries to perform for a
 *     service request. By default this value is calculated by the specific
 *     service object that the request is being made to.
 *
 * @!attribute maxRedirects
 *   @return [Integer] the maximum amount of redirects to follow for a
 *     service request. Defaults to 10.
 *
 * @!attribute paramValidation
 *   @return [Boolean|map] whether input parameters should be validated against
 *     the operation description before sending the request. Defaults to true.
 *     Pass a map to enable any of the following specific validation features:
 *
 *     * **min** [Boolean] &mdash; Validates that a value meets the min
 *       constraint. This is enabled by default when paramValidation is set
 *       to `true`.
 *     * **max** [Boolean] &mdash; Validates that a value meets the max
 *       constraint.
 *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
 *       regular expression.
 *     * **enum** [Boolean] &mdash; Validates that a string value matches one
 *       of the allowable enum values.
 *
 * @!attribute computeChecksums
 *   @return [Boolean] whether to compute checksums for payload bodies when
 *     the service accepts it (currently supported in S3 only).
 *
 * @!attribute convertResponseTypes
 *   @return [Boolean] whether types are converted when parsing response data.
 *     Currently only supported for JSON based services. Turning this off may
 *     improve performance on large response payloads. Defaults to `true`.
 *
 * @!attribute correctClockSkew
 *   @return [Boolean] whether to apply a clock skew correction and retry
 *     requests that fail because of an skewed client clock. Defaults to
 *     `false`.
 *
 * @!attribute sslEnabled
 *   @return [Boolean] whether SSL is enabled for requests
 *
 * @!attribute s3ForcePathStyle
 *   @return [Boolean] whether to force path style URLs for S3 objects
 *
 * @!attribute s3BucketEndpoint
 *   @note Setting this configuration option requires an `endpoint` to be
 *     provided explicitly to the service constructor.
 *   @return [Boolean] whether the provided endpoint addresses an individual
 *     bucket (false if it addresses the root API endpoint).
 *
 * @!attribute s3DisableBodySigning
 *   @return [Boolean] whether to disable S3 body signing when using signature version `v4`.
 *     Body signing can only be disabled when using https. Defaults to `true`.
 *
 * @!attribute useAccelerateEndpoint
 *   @note This configuration option is only compatible with S3 while accessing
 *     dns-compatible buckets.
 *   @return [Boolean] Whether to use the Accelerate endpoint with the S3 service.
 *     Defaults to `false`.
 *
 * @!attribute retryDelayOptions
 *   @example Set the base retry delay for all services to 300 ms
 *     AWS.config.update({retryDelayOptions: {base: 300}});
 *     // Delays with maxRetries = 3: 300, 600, 1200
 *   @example Set a custom backoff function to provide delay values on retries
 *     AWS.config.update({retryDelayOptions: {customBackoff: function(retryCount) {
 *       // returns delay in ms
 *     }}});
 *   @return [map] A set of options to configure the retry delay on retryable errors.
 *     Currently supported options are:
 *
 *     * **base** [Integer] &mdash; The base number of milliseconds to use in the
 *       exponential backoff for operation retries. Defaults to 100 ms for all services except
 *       DynamoDB, where it defaults to 50ms.
 *     * **customBackoff ** [function] &mdash; A custom function that accepts a retry count
 *       and returns the amount of time to delay in milliseconds. The `base` option will be
 *       ignored if this option is supplied.
 *
 * @!attribute httpOptions
 *   @return [map] A set of options to pass to the low-level HTTP request.
 *     Currently supported options are:
 *
 *     * **proxy** [String] &mdash; the URL to proxy requests through
 *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
 *       HTTP requests with. Used for connection pooling. Defaults to the global
 *       agent (`http.globalAgent`) for non-SSL connections. Note that for
 *       SSL connections, a special Agent object is used in order to enable
 *       peer certificate verification. This feature is only supported in the
 *       Node.js environment.
 *     * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after
 *       failing to establish a connection with the server after
 *       `connectTimeout` milliseconds. This timeout has no effect once a socket
 *       connection has been established.
 *     * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout
 *       milliseconds of inactivity on the socket. Defaults to two minutes
 *       (120000)
 *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
 *       HTTP requests. Used in the browser environment only. Set to false to
 *       send requests synchronously. Defaults to true (async on).
 *     * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
 *       property of an XMLHttpRequest object. Used in the browser environment
 *       only. Defaults to false.
 * @!attribute logger
 *   @return [#write,#log] an object that responds to .write() (like a stream)
 *     or .log() (like the console object) in order to log information about
 *     requests
 *
 * @!attribute systemClockOffset
 *   @return [Number] an offset value in milliseconds to apply to all signing
 *     times. Use this to compensate for clock skew when your system may be
 *     out of sync with the service time. Note that this configuration option
 *     can only be applied to the global `AWS.config` object and cannot be
 *     overridden in service-specific configuration. Defaults to 0 milliseconds.
 *
 * @!attribute signatureVersion
 *   @return [String] the signature version to sign requests with (overriding
 *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.
 *
 * @!attribute signatureCache
 *   @return [Boolean] whether the signature to sign requests with (overriding
 *     the API configuration) is cached. Only applies to the signature version 'v4'.
 *     Defaults to `true`.
 */
AWS.Config = AWS.util.inherit({
  /**
   * @!endgroup
   */

  /**
   * Creates a new configuration object. This is the object that passes
   * option data along to service requests, including credentials, security,
   * region information, and some service specific settings.
   *
   * @example Creating a new configuration object with credentials and region
   *   var config = new AWS.Config({
   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'
   *   });
   * @option options accessKeyId [String] your AWS access key ID.
   * @option options secretAccessKey [String] your AWS secret access key.
   * @option options sessionToken [AWS.Credentials] the optional AWS
   *   session token to sign requests with.
   * @option options credentials [AWS.Credentials] the AWS credentials
   *   to sign requests with. You can either specify this object, or
   *   specify the accessKeyId and secretAccessKey options directly.
   * @option options credentialProvider [AWS.CredentialProviderChain] the
   *   provider chain used to resolve credentials if no static `credentials`
   *   property is set.
   * @option options region [String] the region to send service requests to.
   *   See {region} for more information.
   * @option options maxRetries [Integer] the maximum amount of retries to
   *   attempt with a request. See {maxRetries} for more information.
   * @option options maxRedirects [Integer] the maximum amount of redirects to
   *   follow with a request. See {maxRedirects} for more information.
   * @option options sslEnabled [Boolean] whether to enable SSL for
   *   requests.
   * @option options paramValidation [Boolean|map] whether input parameters
   *   should be validated against the operation description before sending
   *   the request. Defaults to true. Pass a map to enable any of the
   *   following specific validation features:
   *
   *   * **min** [Boolean] &mdash; Validates that a value meets the min
   *     constraint. This is enabled by default when paramValidation is set
   *     to `true`.
   *   * **max** [Boolean] &mdash; Validates that a value meets the max
   *     constraint.
   *   * **pattern** [Boolean] &mdash; Validates that a string value matches a
   *     regular expression.
   *   * **enum** [Boolean] &mdash; Validates that a string value matches one
   *     of the allowable enum values.
   * @option options computeChecksums [Boolean] whether to compute checksums
   *   for payload bodies when the service accepts it (currently supported
   *   in S3 only)
   * @option options convertResponseTypes [Boolean] whether types are converted
   *     when parsing response data. Currently only supported for JSON based
   *     services. Turning this off may improve performance on large response
   *     payloads. Defaults to `true`.
   * @option options correctClockSkew [Boolean] whether to apply a clock skew
   *     correction and retry requests that fail because of an skewed client
   *     clock. Defaults to `false`.
   * @option options s3ForcePathStyle [Boolean] whether to force path
   *   style URLs for S3 objects.
   * @option options s3BucketEndpoint [Boolean] whether the provided endpoint
   *   addresses an individual bucket (false if it addresses the root API
   *   endpoint). Note that setting this configuration option requires an
   *   `endpoint` to be provided explicitly to the service constructor.
   * @option options s3DisableBodySigning [Boolean] whether S3 body signing
   *   should be disabled when using signature version `v4`. Body signing
   *   can only be disabled when using https. Defaults to `true`.
   *
   * @option options retryDelayOptions [map] A set of options to configure
   *   the retry delay on retryable errors. Currently supported options are:
   *
   *   * **base** [Integer] &mdash; The base number of milliseconds to use in the
   *     exponential backoff for operation retries. Defaults to 100 ms for all
   *     services except DynamoDB, where it defaults to 50ms.
   *   * **customBackoff ** [function] &mdash; A custom function that accepts a retry count
   *     and returns the amount of time to delay in milliseconds. The `base` option will be
   *     ignored if this option is supplied.
   * @option options httpOptions [map] A set of options to pass to the low-level
   *   HTTP request. Currently supported options are:
   *
   *   * **proxy** [String] &mdash; the URL to proxy requests through
   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
   *     HTTP requests with. Used for connection pooling. Defaults to the global
   *     agent (`http.globalAgent`) for non-SSL connections. Note that for
   *     SSL connections, a special Agent object is used in order to enable
   *     peer certificate verification. This feature is only available in the
   *     Node.js environment.
   *   * **connectTimeout** [Integer] &mdash; Sets the socket to timeout after
   *     failing to establish a connection with the server after
   *     `connectTimeout` milliseconds. This timeout has no effect once a socket
   *     connection has been established.
   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout
   *     milliseconds of inactivity on the socket. Defaults to two minutes
   *     (120000).
   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
   *     HTTP requests. Used in the browser environment only. Set to false to
   *     send requests synchronously. Defaults to true (async on).
   *   * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
   *     property of an XMLHttpRequest object. Used in the browser environment
   *     only. Defaults to false.
   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format
   *   (or a date) that represents the latest possible API version that can be
   *   used in all services (unless overridden by `apiVersions`). Specify
   *   'latest' to use the latest possible version.
   * @option options apiVersions [map<String, String|Date>] a map of service
   *   identifiers (the lowercase service class name) with the API version to
   *   use when instantiating a service. Specify 'latest' for each individual
   *   that can use the latest available version.
   * @option options logger [#write,#log] an object that responds to .write()
   *   (like a stream) or .log() (like the console object) in order to log
   *   information about requests
   * @option options systemClockOffset [Number] an offset value in milliseconds
   *   to apply to all signing times. Use this to compensate for clock skew
   *   when your system may be out of sync with the service time. Note that
   *   this configuration option can only be applied to the global `AWS.config`
   *   object and cannot be overridden in service-specific configuration.
   *   Defaults to 0 milliseconds.
   * @option options signatureVersion [String] the signature version to sign
   *   requests with (overriding the API configuration). Possible values are:
   *   'v2', 'v3', 'v4'.
   * @option options signatureCache [Boolean] whether the signature to sign
   *   requests with (overriding the API configuration) is cached. Only applies
   *   to the signature version 'v4'. Defaults to `true`.
   * @option options dynamoDbCrc32 [Boolean] whether to validate the CRC32
   *   checksum of HTTP response bodies returned by DynamoDB. Default: `true`.
   */
  constructor: function Config(options) {
    if (options === undefined) options = {};
    options = this.extractCredentials(options);

    AWS.util.each.call(this, this.keys, function (key, value) {
      this.set(key, options[key], value);
    });
  },

  /**
   * @!group Managing Credentials
   */

  /**
   * Loads credentials from the configuration object. This is used internally
   * by the SDK to ensure that refreshable {Credentials} objects are properly
   * refreshed and loaded when sending a request. If you want to ensure that
   * your credentials are loaded prior to a request, you can use this method
   * directly to provide accurate credential data stored in the object.
   *
   * @note If you configure the SDK with static or environment credentials,
   *   the credential data should already be present in {credentials} attribute.
   *   This method is primarily necessary to load credentials from asynchronous
   *   sources, or sources that can refresh credentials periodically.
   * @example Getting your access key
   *   AWS.config.getCredentials(function(err) {
   *     if (err) console.log(err.stack); // credentials not loaded
   *     else console.log("Access Key:", AWS.config.credentials.accessKeyId);
   *   })
   * @callback callback function(err)
   *   Called when the {credentials} have been properly set on the configuration
   *   object.
   *
   *   @param err [Error] if this is set, credentials were not successfully
   *     loaded and this error provides information why.
   * @see credentials
   * @see Credentials
   */
  getCredentials: function getCredentials(callback) {
    var self = this;

    function finish(err) {
      callback(err, err ? null : self.credentials);
    }

    function credError(msg, err) {
      return new AWS.util.error(err || new Error(), {
        code: 'CredentialsError',
        message: msg,
        name: 'CredentialsError'
      });
    }

    function getAsyncCredentials() {
      self.credentials.get(function(err) {
        if (err) {
          var msg = 'Could not load credentials from ' +
            self.credentials.constructor.name;
          err = credError(msg, err);
        }
        finish(err);
      });
    }

    function getStaticCredentials() {
      var err = null;
      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
        err = credError('Missing credentials');
      }
      finish(err);
    }

    if (self.credentials) {
      if (typeof self.credentials.get === 'function') {
        getAsyncCredentials();
      } else { // static credentials
        getStaticCredentials();
      }
    } else if (self.credentialProvider) {
      self.credentialProvider.resolve(function(err, creds) {
        if (err) {
          err = credError('Could not load credentials from any providers', err);
        }
        self.credentials = creds;
        finish(err);
      });
    } else {
      finish(credError('No credentials to load'));
    }
  },

  /**
   * @!group Loading and Setting Configuration Options
   */

  /**
   * @overload update(options, allowUnknownKeys = false)
   *   Updates the current configuration object with new options.
   *
   *   @example Update maxRetries property of a configuration object
   *     config.update({maxRetries: 10});
   *   @param [Object] options a map of option keys and values.
   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on
   *     the configuration object. Defaults to `false`.
   *   @see constructor
   */
  update: function update(options, allowUnknownKeys) {
    allowUnknownKeys = allowUnknownKeys || false;
    options = this.extractCredentials(options);
    AWS.util.each.call(this, options, function (key, value) {
      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) ||
          AWS.Service.hasService(key)) {
        this.set(key, value);
      }
    });
  },

  /**
   * Loads configuration data from a JSON file into this config object.
   * @note Loading configuration will reset all existing configuration
   *   on the object.
   * @!macro nobrowser
   * @param path [String] the path relative to your process's current
   *    working directory to load configuration from.
   * @return [AWS.Config] the same configuration object
   */
  loadFromPath: function loadFromPath(path) {
    this.clear();

    var options = JSON.parse(AWS.util.readFileSync(path));
    var fileSystemCreds = new AWS.FileSystemCredentials(path);
    var chain = new AWS.CredentialProviderChain();
    chain.providers.unshift(fileSystemCreds);
    chain.resolve(function (err, creds) {
      if (err) throw err;
      else options.credentials = creds;
    });

    this.constructor(options);

    return this;
  },

  /**
   * Clears configuration data on this object
   *
   * @api private
   */
  clear: function clear() {
    /*jshint forin:false */
    AWS.util.each.call(this, this.keys, function (key) {
      delete this[key];
    });

    // reset credential provider
    this.set('credentials', undefined);
    this.set('credentialProvider', undefined);
  },

  /**
   * Sets a property on the configuration object, allowing for a
   * default value
   * @api private
   */
  set: function set(property, value, defaultValue) {
    if (value === undefined) {
      if (defaultValue === undefined) {
        defaultValue = this.keys[property];
      }
      if (typeof defaultValue === 'function') {
        this[property] = defaultValue.call(this);
      } else {
        this[property] = defaultValue;
      }
    } else if (property === 'httpOptions' && this[property]) {
      // deep merge httpOptions
      this[property] = AWS.util.merge(this[property], value);
    } else {
      this[property] = value;
    }
  },

  /**
   * All of the keys with their default values.
   *
   * @constant
   * @api private
   */
  keys: {
    credentials: null,
    credentialProvider: null,
    region: null,
    logger: null,
    apiVersions: {},
    apiVersion: null,
    endpoint: undefined,
    httpOptions: {
      timeout: 120000
    },
    maxRetries: undefined,
    maxRedirects: 10,
    paramValidation: true,
    sslEnabled: true,
    s3ForcePathStyle: false,
    s3BucketEndpoint: false,
    s3DisableBodySigning: true,
    computeChecksums: true,
    convertResponseTypes: true,
    correctClockSkew: false,
    customUserAgent: null,
    dynamoDbCrc32: true,
    systemClockOffset: 0,
    signatureVersion: null,
    signatureCache: true,
    retryDelayOptions: {},
    useAccelerateEndpoint: false
  },

  /**
   * Extracts accessKeyId, secretAccessKey and sessionToken
   * from a configuration hash.
   *
   * @api private
   */
  extractCredentials: function extractCredentials(options) {
    if (options.accessKeyId && options.secretAccessKey) {
      options = AWS.util.copy(options);
      options.credentials = new AWS.Credentials(options);
    }
    return options;
  },

  /**
   * Sets the promise dependency the SDK will use wherever Promises are returned.
   * Passing `null` will force the SDK to use native Promises if they are available.
   * If native Promises are not available, passing `null` will have no effect.
   * @param [Constructor] dep A reference to a Promise constructor
   */
  setPromisesDependency: function setPromisesDependency(dep) {
    PromisesDependency = dep;
    // if null was passed in, we should try to use native promises
    if (dep === null && typeof Promise === 'function') {
      PromisesDependency = Promise;
    }
    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];
    if (AWS.S3 && AWS.S3.ManagedUpload) constructors.push(AWS.S3.ManagedUpload);
    AWS.util.addPromises(constructors, PromisesDependency);
  },

  /**
   * Gets the promise dependency set by `AWS.config.setPromisesDependency`.
   */
  getPromisesDependency: function getPromisesDependency() {
    return PromisesDependency;
  }
});

/**
 * @return [AWS.Config] The global configuration object singleton instance
 * @readonly
 * @see AWS.Config
 */
AWS.config = new AWS.Config();


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var CognitoIdentity = __webpack_require__(51);
var STS = __webpack_require__(11);

/**
 * Represents credentials retrieved from STS Web Identity Federation using
 * the Amazon Cognito Identity service.
 *
 * By default this provider gets credentials using the
 * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation, which
 * requires either an `IdentityId` or an `IdentityPoolId` (Amazon Cognito
 * Identity Pool ID), which is used to call {AWS.CognitoIdentity.getId} to
 * obtain an `IdentityId`. If the identity or identity pool is not configured in
 * the Amazon Cognito Console to use IAM roles with the appropriate permissions,
 * then additionally a `RoleArn` is required containing the ARN of the IAM trust
 * policy for the Amazon Cognito role that the user will log into. If a `RoleArn`
 * is provided, then this provider gets credentials using the
 * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting an
 * Open ID token from {AWS.CognitoIdentity.getOpenIdToken}.
 *
 * In addition, if this credential provider is used to provide authenticated
 * login, the `Logins` map may be set to the tokens provided by the respective
 * identity providers. See {constructor} for an example on creating a credentials
 * object with proper property values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the WebIdentityToken, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.CognitoIdentity.getId},
 *     {AWS.CognitoIdentity.getOpenIdToken}, and
 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
 *     `params.WebIdentityToken` property.
 * @!attribute data
 *   @return [map] the raw data response from the call to
 *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or
 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
 *     access to other properties from the response.
 * @!attribute identityId
 *   @return [String] the Cognito ID returned by the last call to
 *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual
 *     final resolved identity ID from Amazon Cognito.
 */
AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * @api private
   */
  localStorageKey: {
    id: 'aws.cognito.identity-id.',
    providers: 'aws.cognito.identity-providers.'
  },

  /**
   * Creates a new credentials object.
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({
   *
   *     // either IdentityPoolId or IdentityId is required
   *     // See the IdentityPoolId param for AWS.CognitoIdentity.getID (linked below)
   *     // See the IdentityId param for AWS.CognitoIdentity.getCredentialsForIdentity
   *     // or AWS.CognitoIdentity.getOpenIdToken (linked below)
   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',
   *     IdentityId: 'us-east-1:128d0a74-c82f-4553-916d-90053e4a8b0f'
   *
   *     // optional, only necessary when the identity pool is not configured
   *     // to use IAM roles in the Amazon Cognito Console
   *     // See the RoleArn param for AWS.STS.assumeRoleWithWebIdentity (linked below)
   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',
   *
   *     // optional tokens, used for authenticated login
   *     // See the Logins param for AWS.CognitoIdentity.getID (linked below)
   *     Logins: {
   *       'graph.facebook.com': 'FBTOKEN',
   *       'www.amazon.com': 'AMAZONTOKEN',
   *       'accounts.google.com': 'GOOGLETOKEN',
   *       'api.twitter.com': 'TWITTERTOKEN',
   *       'www.digits.com': 'DIGITSTOKEN'
   *     },
   *
   *     // optional name, defaults to web-identity
   *     // See the RoleSessionName param for AWS.STS.assumeRoleWithWebIdentity (linked below)
   *     RoleSessionName: 'web',
   *
   *     // optional, only necessary when application runs in a browser
   *     // and multiple users are signed in at once, used for caching
   *     LoginId: 'example@gmail.com'
   *
   *   }, {
   *      // optionally provide configuration to apply to the underlying service clients
   *      // if configuration is not provided, then configuration will be pulled from AWS.config
   *
   *      // region should match the region your identity pool is located in
   *      region: 'us-east-1',
   *
   *      // specify timeout options
   *      httpOptions: {
   *        timeout: 100
   *      }
   *   });
   * @see AWS.CognitoIdentity.getId
   * @see AWS.CognitoIdentity.getCredentialsForIdentity
   * @see AWS.STS.assumeRoleWithWebIdentity
   * @see AWS.CognitoIdentity.getOpenIdToken
   * @see AWS.Config
   * @note If a region is not provided in the global AWS.config, or
   *   specified in the `clientConfig` to the CognitoIdentityCredentials
   *   constructor, you may encounter a 'Missing credentials in config' error
   *   when calling making a service call.
   */
  constructor: function CognitoIdentityCredentials(params, clientConfig) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.data = null;
    this._identityId = null;
    this._clientConfig = AWS.util.copy(clientConfig || {});
    this.loadCachedId();
    var self = this;
    Object.defineProperty(this, 'identityId', {
      get: function() {
        self.loadCachedId();
        return self._identityId || self.params.IdentityId;
      },
      set: function(identityId) {
        self._identityId = identityId;
      }
    });
  },

  /**
   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},
   * or {AWS.STS.assumeRoleWithWebIdentity}.
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see AWS.Credentials.get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    self.data = null;
    self._identityId = null;
    self.getId(function(err) {
      if (!err) {
        if (!self.params.RoleArn) {
          self.getCredentialsForIdentity(callback);
        } else {
          self.getCredentialsFromSTS(callback);
        }
      } else {
        self.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },

  /**
   * Clears the cached Cognito ID associated with the currently configured
   * identity pool ID. Use this to manually invalidate your cache if
   * the identity pool ID was deleted.
   */
  clearCachedId: function clearCache() {
    this._identityId = null;
    delete this.params.IdentityId;

    var poolId = this.params.IdentityPoolId;
    var loginId = this.params.LoginId || '';
    delete this.storage[this.localStorageKey.id + poolId + loginId];
    delete this.storage[this.localStorageKey.providers + poolId + loginId];
  },

  /**
   * @api private
   */
  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {
    var self = this;
    if (err.code == 'NotAuthorizedException') {
      self.clearCachedId();
    }
  },

  /**
   * Retrieves a Cognito ID, loading from cache if it was already retrieved
   * on this device.
   *
   * @callback callback function(err, identityId)
   *   @param err [Error, null] an error object if the call failed or null if
   *     it succeeded.
   *   @param identityId [String, null] if successful, the callback will return
   *     the Cognito ID.
   * @note If not loaded explicitly, the Cognito ID is loaded and stored in
   *   localStorage in the browser environment of a device.
   * @api private
   */
  getId: function getId(callback) {
    var self = this;
    if (typeof self.params.IdentityId === 'string') {
      return callback(null, self.params.IdentityId);
    }

    self.cognito.getId(function(err, data) {
      if (!err && data.IdentityId) {
        self.params.IdentityId = data.IdentityId;
        callback(null, data.IdentityId);
      } else {
        callback(err);
      }
    });
  },


  /**
   * @api private
   */
  loadCredentials: function loadCredentials(data, credentials) {
    if (!data || !credentials) return;
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
  },

  /**
   * @api private
   */
  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
    var self = this;
    self.cognito.getCredentialsForIdentity(function(err, data) {
      if (!err) {
        self.cacheId(data);
        self.data = data;
        self.loadCredentials(self.data, self);
      } else {
        self.clearIdOnNotAuthorized(err);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
    var self = this;
    self.cognito.getOpenIdToken(function(err, data) {
      if (!err) {
        self.cacheId(data);
        self.params.WebIdentityToken = data.Token;
        self.webIdentityCredentials.refresh(function(webErr) {
          if (!webErr) {
            self.data = self.webIdentityCredentials.data;
            self.sts.credentialsFrom(self.data, self);
          }
          callback(webErr);
        });
      } else {
        self.clearIdOnNotAuthorized(err);
        callback(err);
      }
    });
  },

  /**
   * @api private
   */
  loadCachedId: function loadCachedId() {
    var self = this;

    // in the browser we source default IdentityId from localStorage
    if (AWS.util.isBrowser() && !self.params.IdentityId) {
      var id = self.getStorage('id');
      if (id && self.params.Logins) {
        var actualProviders = Object.keys(self.params.Logins);
        var cachedProviders =
          (self.getStorage('providers') || '').split(',');

        // only load ID if at least one provider used this ID before
        var intersect = cachedProviders.filter(function(n) {
          return actualProviders.indexOf(n) !== -1;
        });
        if (intersect.length !== 0) {
          self.params.IdentityId = id;
        }
      } else if (id) {
        self.params.IdentityId = id;
      }
    }
  },

  /**
   * @api private
   */
  createClients: function() {
    var clientConfig = this._clientConfig;
    this.webIdentityCredentials = this.webIdentityCredentials ||
      new AWS.WebIdentityCredentials(this.params, clientConfig);
    if (!this.cognito) {
      var cognitoConfig = AWS.util.merge({}, clientConfig);
      cognitoConfig.params = this.params;
      this.cognito = new CognitoIdentity(cognitoConfig);
    }
    this.sts = this.sts || new STS(clientConfig);
  },

  /**
   * @api private
   */
  cacheId: function cacheId(data) {
    this._identityId = data.IdentityId;
    this.params.IdentityId = this._identityId;

    // cache this IdentityId in browser localStorage if possible
    if (AWS.util.isBrowser()) {
      this.setStorage('id', data.IdentityId);

      if (this.params.Logins) {
        this.setStorage('providers', Object.keys(this.params.Logins).join(','));
      }
    }
  },

  /**
   * @api private
   */
  getStorage: function getStorage(key) {
    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];
  },

  /**
   * @api private
   */
  setStorage: function setStorage(key, val) {
    try {
      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;
    } catch (_) {}
  },

  /**
   * @api private
   */
  storage: (function() {
    try {
      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?
          window.localStorage : {};

      // Test set/remove which would throw an error in Safari's private browsing
      storage['aws.test-storage'] = 'foobar';
      delete storage['aws.test-storage'];

      return storage;
    } catch (_) {
      return {};
    }
  })()
});


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
__webpack_require__(496);

/**
 * Represents credentials received from the metadata service on an EC2 instance.
 *
 * By default, this class will connect to the metadata service using
 * {AWS.MetadataService} and attempt to load any available credentials. If it
 * can connect, and credentials are available, these will be used with zero
 * configuration.
 *
 * This credentials class will by default timeout after 1 second of inactivity
 * and retry 3 times.
 * If your requests to the EC2 metadata service are timing out, you can increase
 * these values by configuring them directly:
 *
 * ```javascript
 * AWS.config.credentials = new AWS.EC2MetadataCredentials({
 *   httpOptions: { timeout: 5000 }, // 5 second timeout
 *   maxRetries: 10, // retry 10 times
 *   retryDelayOptions: { base: 200 } // see AWS.Config for information
 * });
 * ```
 *
 * @see AWS.Config.retryDelayOptions
 *
 * @!macro nobrowser
 */
AWS.EC2MetadataCredentials = AWS.util.inherit(AWS.Credentials, {
  constructor: function EC2MetadataCredentials(options) {
    AWS.Credentials.call(this);

    options = options ? AWS.util.copy(options) : {};
    options = AWS.util.merge(
      {maxRetries: this.defaultMaxRetries}, options);
    if (!options.httpOptions) options.httpOptions = {};
    options.httpOptions = AWS.util.merge(
      {timeout: this.defaultTimeout}, options.httpOptions);

    this.metadataService = new AWS.MetadataService(options);
    this.metadata = {};
  },

  /**
   * @api private
   */
  defaultTimeout: 1000,

  /**
   * @api private
   */
  defaultMaxRetries: 3,

  /**
   * Loads the credentials from the instance metadata service
   *
   * @callback callback function(err)
   *   Called when the instance metadata service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    if (!callback) callback = function(err) { if (err) throw err; };

    self.metadataService.loadCredentials(function (err, creds) {
      if (!err) {
        self.expired = false;
        self.metadata = creds;
        self.accessKeyId = creds.AccessKeyId;
        self.secretAccessKey = creds.SecretAccessKey;
        self.sessionToken = creds.Token;
        self.expireTime = new Date(creds.Expiration);
      }
      callback(err);
    });
  }
});


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0),
  ENV_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI',
  ENV_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI',
  ENV_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN',
  FULL_URI_ALLOWED_PROTOCOLS = ['http:', 'https:'],
  FULL_URI_ALLOWED_HOSTNAMES = ['localhost', '127.0.0.1'],
  RELATIVE_URI_HOST = '169.254.170.2';

/**
 * Represents credentials received from relative URI specified in the ECS container.
 *
 * This class will request refreshable credentials from the relative URI
 * specified by the AWS_CONTAINER_CREDENTIALS_RELATIVE_URI or the
 * AWS_CONTAINER_CREDENTIALS_FULL_URI environment variable. If valid credentials
 * are returned in the response, these will be used with zero configuration.
 *
 * This credentials class will by default timeout after 1 second of inactivity
 * and retry 3 times.
 * If your requests to the relative URI are timing out, you can increase
 * the value by configuring them directly:
 *
 * ```javascript
 * AWS.config.credentials = new AWS.ECSCredentials({
 *   httpOptions: { timeout: 5000 }, // 5 second timeout
 *   maxRetries: 10, // retry 10 times
 *   retryDelayOptions: { base: 200 } // see AWS.Config for information
 * });
 * ```
 *
 * @see AWS.Config.retryDelayOptions
 *
 * @!macro nobrowser
 */
AWS.ECSCredentials = AWS.util.inherit(AWS.Credentials, {
  constructor: function ECSCredentials(options) {
    AWS.Credentials.call(this);
    options = options ? AWS.util.copy(options) : {};
    if (!options.httpOptions) options.httpOptions = {};
    options.httpOptions = AWS.util.merge(
      this.httpOptions, options.httpOptions);
    AWS.util.update(this, options);
  },

  /**
   * @api private
   */
  httpOptions: { timeout: 1000 },

  /**
   * @api private
   */
  maxRetries: 3,

  /**
   * @api private
   */
  isConfiguredForEcsCredentials: function isConfiguredForEcsCredentials() {
    return Boolean(
        process &&
        process.env &&
        (process.env[ENV_RELATIVE_URI] || process.env[ENV_FULL_URI])
    );
  },

  /**
   * @api private
   */
  getECSFullUri: function getECSFullUri() {
    if (process && process.env) {
      var relative = process.env[ENV_RELATIVE_URI],
          full = process.env[ENV_FULL_URI];
      if (relative) {
        return 'http://' + RELATIVE_URI_HOST + relative;
      } else if (full) {
        var parsed = AWS.util.urlParse(full);
        if (FULL_URI_ALLOWED_PROTOCOLS.indexOf(parsed.protocol) < 0) {
          throw AWS.util.error(
            new Error('Unsupported protocol:  AWS.ECSCredentials supports '
              + FULL_URI_ALLOWED_PROTOCOLS.join(',') + ' only; '
              + parsed.protocol + ' requested.'),
            { code: 'ECSCredentialsProviderFailure' }
          );
        }

        if (FULL_URI_ALLOWED_HOSTNAMES.indexOf(parsed.hostname) < 0) {
          throw AWS.util.error(
            new Error('Unsupported hostname: AWS.ECSCredentials supports '
              + FULL_URI_ALLOWED_HOSTNAMES.join(',') + ' only; '
              + parsed.hostname + ' requested.'),
            { code: 'ECSCredentialsProviderFailure' }
          );
        }

        return full;
      }
    }
  },

  /**
   * @api private
   */
  getECSAuthToken: function getECSAuthToken() {
    if (process && process.env && process.env[ENV_FULL_URI]) {
      return process.env[ENV_AUTH_TOKEN];
    }
  },

  /**
   * @api private
   */
  credsFormatIsValid: function credsFormatIsValid(credData) {
    return (!!credData.AccessKeyId && !!credData.SecretAccessKey &&
      !!credData.Token && !!credData.Expiration);
  },

  /**
   * @api private
   */
  request: function request(url, callback) {
    var httpRequest = new AWS.HttpRequest(url);
    httpRequest.method = 'GET';
    httpRequest.headers.Accept = 'application/json';
    var token = this.getECSAuthToken();
    if (token) {
      httpRequest.headers.Authorization = token;
    }
    AWS.util.handleRequestWithRetries(httpRequest, this, callback);
  },

  /**
   * @api private
   */
  refreshQueue: [],

  /**
   * Loads the credentials from the relative URI specified by container
   *
   * @callback callback function(err)
   *   Called when the request to the relative URI responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, `sessionToken`, and `expireTime` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    var refreshQueue = self.refreshQueue;
    if (!callback) callback = function(err) { if (err) throw err; };
    refreshQueue.push({
      provider: self,
      errCallback: callback
    });
    if (refreshQueue.length > 1) { return; }

    function callbacks(err, creds) {
      var call, cb;
      while ((call = refreshQueue.shift()) !== undefined) {
        cb = call.errCallback;
        if (!err) AWS.util.update(call.provider, creds);
        cb(err);
      }
    }

    if (process === undefined) {
      callbacks(AWS.util.error(
        new Error('No process info available'),
        { code: 'ECSCredentialsProviderFailure' }
      ));
      return;
    }
    var fullUri = this.getECSFullUri();
    if (fullUri === undefined) {
      callbacks(AWS.util.error(
        new Error('Variable ' + ENV_RELATIVE_URI + ' or ' + ENV_FULL_URI +
          ' must be set to use AWS.ECSCredentials.'),
        { code: 'ECSCredentialsProviderFailure' }
      ));
      return;
    }

    this.request(fullUri, function(err, data) {
      if (!err) {
        try {
          data = JSON.parse(data);
          if (self.credsFormatIsValid(data)) {
            var creds = {
              expired: false,
              accessKeyId: data.AccessKeyId,
              secretAccessKey: data.SecretAccessKey,
              sessionToken: data.Token,
              expireTime: new Date(data.Expiration)
            };
          } else {
            throw AWS.util.error(
              new Error('Response data is not in valid format'),
              { code: 'ECSCredentialsProviderFailure' }
            );
          }
        } catch (dataError) {
          err = dataError;
        }
      }
      callbacks(err, creds);
    });
  }
});


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * Represents credentials from the environment.
 *
 * By default, this class will look for the matching environment variables
 * prefixed by a given {envPrefix}. The un-prefixed environment variable names
 * for each credential value is listed below:
 *
 * ```javascript
 * accessKeyId: ACCESS_KEY_ID
 * secretAccessKey: SECRET_ACCESS_KEY
 * sessionToken: SESSION_TOKEN
 * ```
 *
 * With the default prefix of 'AWS', the environment variables would be:
 *
 *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
 *
 * @!attribute envPrefix
 *   @readonly
 *   @return [String] the prefix for the environment variable names excluding
 *     the separating underscore ('_').
 */
AWS.EnvironmentCredentials = AWS.util.inherit(AWS.Credentials, {

  /**
   * Creates a new EnvironmentCredentials class with a given variable
   * prefix {envPrefix}. For example, to load credentials using the 'AWS'
   * prefix:
   *
   * ```javascript
   * var creds = new AWS.EnvironmentCredentials('AWS');
   * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var
   * ```
   *
   * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment
   *   variables. Do not include the separating underscore.
   */
  constructor: function EnvironmentCredentials(envPrefix) {
    AWS.Credentials.call(this);
    this.envPrefix = envPrefix;
    this.get(function() {});
  },

  /**
   * Loads credentials from the environment using the prefixed
   * environment variables.
   *
   * @callback callback function(err)
   *   Called after the (prefixed) ACCESS_KEY_ID, SECRET_ACCESS_KEY, and
   *   SESSION_TOKEN environment variables are read. When this callback is
   *   called with no error, it means that the credentials information has
   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
   *   and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    if (!callback) callback = function(err) { if (err) throw err; };

    if (!process || !process.env) {
      callback(AWS.util.error(
        new Error('No process info or environment variables available'),
        { code: 'EnvironmentCredentialsProviderFailure' }
      ));
      return;
    }

    var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];
    var values = [];

    for (var i = 0; i < keys.length; i++) {
      var prefix = '';
      if (this.envPrefix) prefix = this.envPrefix + '_';
      values[i] = process.env[prefix + keys[i]];
      if (!values[i] && keys[i] !== 'SESSION_TOKEN') {
        callback(AWS.util.error(
          new Error('Variable ' + prefix + keys[i] + ' not set.'),
        { code: 'EnvironmentCredentialsProviderFailure' }
        ));
        return;
      }
    }

    this.expired = false;
    AWS.Credentials.apply(this, values);
    callback();
  }

});


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * Represents credentials from a JSON file on disk.
 * If the credentials expire, the SDK can {refresh} the credentials
 * from the file.
 *
 * The format of the file should be similar to the options passed to
 * {AWS.Config}:
 *
 * ```javascript
 * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}
 * ```
 *
 * @example Loading credentials from disk
 *   var creds = new AWS.FileSystemCredentials('./configuration.json');
 *   creds.accessKeyId == 'AKID'
 *
 * @!attribute filename
 *   @readonly
 *   @return [String] the path to the JSON file on disk containing the
 *     credentials.
 * @!macro nobrowser
 */
AWS.FileSystemCredentials = AWS.util.inherit(AWS.Credentials, {

  /**
   * @overload AWS.FileSystemCredentials(filename)
   *   Creates a new FileSystemCredentials object from a filename
   *
   *   @param filename [String] the path on disk to the JSON file to load.
   */
  constructor: function FileSystemCredentials(filename) {
    AWS.Credentials.call(this);
    this.filename = filename;
    this.get(function() {});
  },

  /**
   * Loads the credentials from the {filename} on disk.
   *
   * @callback callback function(err)
   *   Called after the JSON file on disk is read and parsed. When this callback
   *   is called with no error, it means that the credentials information
   *   has been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
   *   and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    if (!callback) callback = function(err) { if (err) throw err; };
    try {
      var creds = JSON.parse(AWS.util.readFileSync(this.filename));
      AWS.Credentials.call(this, creds);
      if (!this.accessKeyId || !this.secretAccessKey) {
        throw AWS.util.error(
          new Error('Credentials not set in ' + this.filename),
        { code: 'FileSystemCredentialsProviderFailure' }
        );
      }
      this.expired = false;
      callback();
    } catch (err) {
      callback(err);
    }
  }

});


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var STS = __webpack_require__(11);

/**
 * Represents credentials retrieved from STS SAML support.
 *
 * By default this provider gets credentials using the
 * {AWS.STS.assumeRoleWithSAML} service operation. This operation
 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
 * application for which credentials will be given, as well as a `PrincipalArn`
 * representing the ARN for the SAML identity provider. In addition, the
 * `SAMLAssertion` must be set to the token provided by the identity
 * provider. See {constructor} for an example on creating a credentials
 * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the SAMLAssertion, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.SAMLAssertion = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the
 *     `params.SAMLAssertion` property.
 */
AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new credentials object.
   * @param (see AWS.STS.assumeRoleWithSAML)
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.SAMLCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',
   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',
   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP
   *   });
   * @see AWS.STS.assumeRoleWithSAML
   */
  constructor: function SAMLCredentials(params) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    if (!callback) callback = function(err) { if (err) throw err; };

    self.service.assumeRoleWithSAML(function (err, data) {
      if (!err) {
        self.service.credentialsFrom(data, self);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  createClients: function() {
    this.service = this.service || new STS({params: this.params});
  }

});


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var path = __webpack_require__(101);
var SharedIniFile = __webpack_require__(65);
var STS = __webpack_require__(11);

/**
 * Represents credentials loaded from shared credentials file
 * (defaulting to ~/.aws/credentials or defined by the
 * `AWS_SHARED_CREDENTIALS_FILE` environment variable).
 *
 * ## Using the shared credentials file
 *
 * This provider is checked by default in the Node.js environment. To use the
 * credentials file provider, simply add your access and secret keys to the
 * ~/.aws/credentials file in the following format:
 *
 *     [default]
 *     aws_access_key_id = AKID...
 *     aws_secret_access_key = YOUR_SECRET_KEY
 *
 * ## Using custom profiles
 *
 * The SDK supports loading credentials for separate profiles. This can be done
 * in two ways:
 *
 * 1. Set the `AWS_PROFILE` environment variable in your process prior to
 *    loading the SDK.
 * 2. Directly load the AWS.SharedIniFileCredentials provider:
 *
 * ```javascript
 * var creds = new AWS.SharedIniFileCredentials({profile: 'myprofile'});
 * AWS.config.credentials = creds;
 * ```
 *
 * @!macro nobrowser
 */
AWS.SharedIniFileCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new SharedIniFileCredentials object.
   *
   * @param options [map] a set of options
   * @option options profile [String] (AWS_PROFILE env var or 'default')
   *   the name of the profile to load.
   * @option options filename [String] ('~/.aws/credentials' or defined by
   *   AWS_SHARED_CREDENTIALS_FILE process env var)
   *   the filename to use when loading credentials.
   * @option options disableAssumeRole [Boolean] (false) True to disable
   *   support for profiles that assume an IAM role. If true, and an assume
   *   role profile is selected, an error is raised.
   */
  constructor: function SharedIniFileCredentials(options) {
    AWS.Credentials.call(this);

    options = options || {};

    this.filename = options.filename;
    this.profile = options.profile || process.env.AWS_PROFILE || AWS.util.defaultProfile;
    this.disableAssumeRole = Boolean(options.disableAssumeRole);
    this.get(function() {});
  },

  /**
   * Loads the credentials from the shared credentials file
   *
   * @callback callback function(err)
   *   Called after the shared INI file on disk is read and parsed. When this
   *   callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    if (!callback) callback = function(err) { if (err) throw err; };
    try {
      var profiles = {};
      var i, availableProfiles;
      if (process.env[AWS.util.configOptInEnv]) {
        var config = new SharedIniFile({
          isConfig: true,
          filename: process.env[AWS.util.sharedConfigFileEnv]
        });
        for (i = 0, availableProfiles = config.getProfiles(); i < availableProfiles.length; i++) {
          profiles[availableProfiles[i]] = config.getProfile(availableProfiles[i]);
        }
      }
      var creds = new SharedIniFile({
        filename: this.filename ||
          (process.env[AWS.util.configOptInEnv] && process.env[AWS.util.sharedCredentialsFileEnv])
      });
      for (i = 0, availableProfiles = creds.getProfiles(); i < availableProfiles.length; i++) {
        profiles[availableProfiles[i]] = creds.getProfile(availableProfiles[i]);
      }
      var profile = profiles[this.profile] || {};

      if (Object.keys(profile).length === 0) {
        throw AWS.util.error(
          new Error('Profile ' + this.profile + ' not found'),
          { code: 'SharedIniFileCredentialsProviderFailure' }
        );
      }

      if (profile['role_arn']) {
        this.loadRoleProfile(profiles, profile, callback);
        return;
      }

      this.accessKeyId = profile['aws_access_key_id'];
      this.secretAccessKey = profile['aws_secret_access_key'];
      this.sessionToken = profile['aws_session_token'];

      if (!this.accessKeyId || !this.secretAccessKey) {
        throw AWS.util.error(
          new Error('Credentials not set for profile ' + this.profile),
          { code: 'SharedIniFileCredentialsProviderFailure' }
        );
      }
      this.expired = false;
      callback();
    } catch (err) {
      callback(err);
    }
  },

  /**
   * @api private
   */
  loadRoleProfile: function loadRoleProfile(creds, roleProfile, callback) {
    if (this.disableAssumeRole) {
      throw AWS.util.error(
        new Error('Role assumption profiles are disabled. ' +
                  'Failed to load profile ' + this.profile +
                  ' from ' + creds.filename),
        { code: 'SharedIniFileCredentialsProviderFailure' }
      );
    }

    var self = this;
    var roleArn = roleProfile['role_arn'];
    var roleSessionName = roleProfile['role_session_name'];
    var externalId = roleProfile['external_id'];
    var sourceProfileName = roleProfile['source_profile'];

    if (!sourceProfileName) {
      throw AWS.util.error(
        new Error('source_profile is not set using profile ' + this.profile),
        { code: 'SharedIniFileCredentialsProviderFailure' }
      );
    }

    var sourceProfile = creds[sourceProfileName];

    if (typeof sourceProfile !== 'object') {
      throw AWS.util.error(
        new Error('source_profile ' + sourceProfileName + ' using profile '
          + this.profile + ' does not exist'),
        { code: 'SharedIniFileCredentialsProviderFailure' }
      );
    }

    this.roleArn = roleArn;

    var sourceCredentials = {
      accessKeyId: sourceProfile['aws_access_key_id'],
      secretAccessKey: sourceProfile['aws_secret_access_key'],
      sessionToken: sourceProfile['aws_session_token']
    };

    if (!sourceCredentials.accessKeyId || !sourceCredentials.secretAccessKey) {
      throw AWS.util.error(
        new Error('Credentials not set in source_profile ' +
                  sourceProfileName + ' using profile ' + this.profile),
        { code: 'SharedIniFileCredentialsProviderFailure' }
      );
    }

    var sts = new STS({
      credentials: new AWS.Credentials(sourceCredentials)
    });

    var roleParams = {
      RoleArn: roleArn,
      RoleSessionName: roleSessionName || 'aws-sdk-js-' + Date.now()
    };

    if (externalId) {
      roleParams.ExternalId = externalId;
    }

    sts.assumeRole(roleParams, function (err, data) {
      if (err) {
        callback(err);
        return;
      }

      self.accessKeyId = data.Credentials.AccessKeyId;
      self.secretAccessKey = data.Credentials.SecretAccessKey;
      self.sessionToken = data.Credentials.SessionToken;
      self.expireTime = data.Credentials.Expiration;
      callback();
    });
  }
});


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var STS = __webpack_require__(11);

/**
 * Represents temporary credentials retrieved from {AWS.STS}. Without any
 * extra parameters, credentials will be fetched from the
 * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the
 * {AWS.STS.assumeRole} operation will be used to fetch credentials for the
 * role instead.
 *
 * To setup temporary credentials, configure a set of master credentials
 * using the standard credentials providers (environment, EC2 instance metadata,
 * or from the filesystem), then set the global credentials to a new
 * temporary credentials object:
 *
 * ```javascript
 * // Note that environment credentials are loaded by default,
 * // the following line is shown for clarity:
 * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');
 *
 * // Now set temporary credentials seeded from the master credentials
 * AWS.config.credentials = new AWS.TemporaryCredentials();
 *
 * // subsequent requests will now use temporary credentials from AWS STS.
 * new AWS.S3().listBucket(function(err, data) { ... });
 * ```
 *
 * @!attribute masterCredentials
 *   @return [AWS.Credentials] the master (non-temporary) credentials used to
 *     get and refresh temporary credentials from AWS STS.
 * @note (see constructor)
 */
AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new temporary credentials object.
   *
   * @note In order to create temporary credentials, you first need to have
   *   "master" credentials configured in {AWS.Config.credentials}. These
   *   master credentials are necessary to retrieve the temporary credentials,
   *   as well as refresh the credentials when they expire.
   * @param params [map] a map of options that are passed to the
   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.
   *   If a `RoleArn` parameter is passed in, credentials will be based on the
   *   IAM role.
   * @param masterCredentials [AWS.Credentials] the master (non-temporary) credentials
   *  used to get and refresh temporary credentials from AWS STS.
   * @example Creating a new credentials object for generic temporary credentials
   *   AWS.config.credentials = new AWS.TemporaryCredentials();
   * @example Creating a new credentials object for an IAM role
   *   AWS.config.credentials = new AWS.TemporaryCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',
   *   });
   * @see AWS.STS.assumeRole
   * @see AWS.STS.getSessionToken
   */
  constructor: function TemporaryCredentials(params, masterCredentials) {
    AWS.Credentials.call(this);
    this.loadMasterCredentials(masterCredentials);
    this.expired = true;

    this.params = params || {};
    if (this.params.RoleArn) {
      this.params.RoleSessionName =
        this.params.RoleSessionName || 'temporary-credentials';
    }
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRole} or
   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed
   * to the credentials {constructor}.
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    if (!callback) callback = function(err) { if (err) throw err; };

    self.masterCredentials.get(function() {
      self.service.config.credentials = self.masterCredentials;
      var operation = self.params.RoleArn ?
        self.service.assumeRole : self.service.getSessionToken;
      operation.call(self.service, function (err, data) {
        if (!err) {
          self.service.credentialsFrom(data, self);
        }
        callback(err);
      });
    });
  },

  /**
   * @api private
   */
  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {
    this.masterCredentials = masterCredentials || AWS.config.credentials;
    while (this.masterCredentials.masterCredentials) {
      this.masterCredentials = this.masterCredentials.masterCredentials;
    }

    if (typeof this.masterCredentials.get !== 'function') {
      this.masterCredentials = new AWS.Credentials(this.masterCredentials);
    }
  },

  /**
   * @api private
   */
  createClients: function() {
    this.service = this.service || new STS({params: this.params});
  }

});


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var STS = __webpack_require__(11);

/**
 * Represents credentials retrieved from STS Web Identity Federation support.
 *
 * By default this provider gets credentials using the
 * {AWS.STS.assumeRoleWithWebIdentity} service operation. This operation
 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
 * application for which credentials will be given. In addition, the
 * `WebIdentityToken` must be set to the token provided by the identity
 * provider. See {constructor} for an example on creating a credentials
 * object with proper `RoleArn` and `WebIdentityToken` values.
 *
 * ## Refreshing Credentials from Identity Service
 *
 * In addition to AWS credentials expiring after a given amount of time, the
 * login token from the identity provider will also expire. Once this token
 * expires, it will not be usable to refresh AWS credentials, and another
 * token will be needed. The SDK does not manage refreshing of the token value,
 * but this can be done through a "refresh token" supported by most identity
 * providers. Consult the documentation for the identity provider for refreshing
 * tokens. Once the refreshed token is acquired, you should make sure to update
 * this new token in the credentials object's {params} property. The following
 * code will update the WebIdentityToken, assuming you have retrieved an updated
 * token from the identity provider:
 *
 * ```javascript
 * AWS.config.credentials.params.WebIdentityToken = updatedToken;
 * ```
 *
 * Future calls to `credentials.refresh()` will now use the new token.
 *
 * @!attribute params
 *   @return [map] the map of params passed to
 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
 *     `params.WebIdentityToken` property.
 * @!attribute data
 *   @return [map] the raw data response from the call to
 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
 *     access to other properties from the response.
 */
AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
  /**
   * Creates a new credentials object.
   * @param (see AWS.STS.assumeRoleWithWebIdentity)
   * @example Creating a new credentials object
   *   AWS.config.credentials = new AWS.WebIdentityCredentials({
   *     RoleArn: 'arn:aws:iam::1234567890:role/WebIdentity',
   *     WebIdentityToken: 'ABCDEFGHIJKLMNOP', // token from identity service
   *     RoleSessionName: 'web' // optional name, defaults to web-identity
   *   }, {
   *     // optionally provide configuration to apply to the underlying AWS.STS service client
   *     // if configuration is not provided, then configuration will be pulled from AWS.config
   *
   *     // specify timeout options
   *     httpOptions: {
   *       timeout: 100
   *     }
   *   });
   * @see AWS.STS.assumeRoleWithWebIdentity
   * @see AWS.Config
   */
  constructor: function WebIdentityCredentials(params, clientConfig) {
    AWS.Credentials.call(this);
    this.expired = true;
    this.params = params;
    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';
    this.data = null;
    this._clientConfig = AWS.util.copy(clientConfig || {});
  },

  /**
   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}
   *
   * @callback callback function(err)
   *   Called when the STS service responds (or fails). When
   *   this callback is called with no error, it means that the credentials
   *   information has been loaded into the object (as the `accessKeyId`,
   *   `secretAccessKey`, and `sessionToken` properties).
   *   @param err [Error] if an error occurred, this value will be filled
   * @see get
   */
  refresh: function refresh(callback) {
    var self = this;
    self.createClients();
    if (!callback) callback = function(err) { if (err) throw err; };

    self.service.assumeRoleWithWebIdentity(function (err, data) {
      self.data = null;
      if (!err) {
        self.data = data;
        self.service.credentialsFrom(data, self);
      }
      callback(err);
    });
  },

  /**
   * @api private
   */
  createClients: function() {
    if (!this.service) {
      var stsConfig = AWS.util.merge({}, this._clientConfig);
      stsConfig.params = this.params;
      this.service = new STS(stsConfig);
    }
  }

});


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var util = AWS.util;
var typeOf = __webpack_require__(55).typeOf;
var DynamoDBSet = __webpack_require__(54);
var NumberValue = __webpack_require__(492);

AWS.DynamoDB.Converter = {
  /**
   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type
   *
   * @param data [any] The data to convert to a DynamoDB AttributeValue
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   * @return [map] An object in the Amazon DynamoDB AttributeValue format
   *
   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to
   *    convert entire records (rather than individual attributes)
   */
  input: function convertInput(data, options) {
    options = options || {};
    var type = typeOf(data);
    if (type === 'Object') {
      return formatMap(data, options);
    } else if (type === 'Array') {
      return formatList(data, options);
    } else if (type === 'Set') {
      return formatSet(data, options);
    } else if (type === 'String') {
      if (data.length === 0 && options.convertEmptyValues) {
        return convertInput(null);
      }
      return { S: data };
    } else if (type === 'Number' || type === 'NumberValue') {
      return { N: data.toString() };
    } else if (type === 'Binary') {
      if (data.length === 0 && options.convertEmptyValues) {
        return convertInput(null);
      }
      return { B: data };
    } else if (type === 'Boolean') {
      return { BOOL: data };
    } else if (type === 'null') {
      return { NULL: true };
    } else if (type !== 'undefined' && type !== 'Function') {
      // this value has a custom constructor
      return formatMap(data, options);
    }
  },

  /**
   * Convert a JavaScript object into a DynamoDB record.
   *
   * @param data [any] The data to convert to a DynamoDB record
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   *
   * @return [map] An object in the DynamoDB record format.
   *
   * @example Convert a JavaScript object into a DynamoDB record
   *  var marshalled = AWS.DynamoDB.Converter.marshall({
   *    string: 'foo',
   *    list: ['fizz', 'buzz', 'pop'],
   *    map: {
   *      nestedMap: {
   *        key: 'value',
   *      }
   *    },
   *    number: 123,
   *    nullValue: null,
   *    boolValue: true,
   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])
   *  });
   */
  marshall: function marshallItem(data, options) {
    return AWS.DynamoDB.Converter.input(data, options).M;
  },

  /**
   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.
   *
   * @param data [map] An object in the Amazon DynamoDB AttributeValue format
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   *
   * @return [Object|Array|String|Number|Boolean|null]
   *
   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to
   *    convert entire records (rather than individual attributes)
   */
  output: function convertOutput(data, options) {
    options = options || {};
    var list, map, i;
    for (var type in data) {
      var values = data[type];
      if (type === 'M') {
        map = {};
        for (var key in values) {
          map[key] = convertOutput(values[key], options);
        }
        return map;
      } else if (type === 'L') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(convertOutput(values[i], options));
        }
        return list;
      } else if (type === 'SS') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(values[i] + '');
        }
        return new DynamoDBSet(list);
      } else if (type === 'NS') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(convertNumber(values[i], options.wrapNumbers));
        }
        return new DynamoDBSet(list);
      } else if (type === 'BS') {
        list = [];
        for (i = 0; i < values.length; i++) {
          list.push(new util.Buffer(values[i]));
        }
        return new DynamoDBSet(list);
      } else if (type === 'S') {
        return values + '';
      } else if (type === 'N') {
        return convertNumber(values, options.wrapNumbers);
      } else if (type === 'B') {
        return new util.Buffer(values);
      } else if (type === 'BOOL') {
        return (values === 'true' || values === 'TRUE' || values === true);
      } else if (type === 'NULL') {
        return null;
      }
    }
  },

  /**
   * Convert a DynamoDB record into a JavaScript object.
   *
   * @param data [any] The DynamoDB record
   * @param options [map]
   * @option options convertEmptyValues [Boolean] Whether to automatically
   *                                              convert empty strings, blobs,
   *                                              and sets to `null`
   * @option options wrapNumbers [Boolean]  Whether to return numbers as a
   *                                        NumberValue object instead of
   *                                        converting them to native JavaScript
   *                                        numbers. This allows for the safe
   *                                        round-trip transport of numbers of
   *                                        arbitrary size.
   *
   * @return [map] An object whose properties have been converted from
   *    DynamoDB's AttributeValue format into their corresponding native
   *    JavaScript types.
   *
   * @example Convert a record received from a DynamoDB stream
   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({
   *    string: {S: 'foo'},
   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},
   *    map: {
   *      M: {
   *        nestedMap: {
   *          M: {
   *            key: {S: 'value'}
   *          }
   *        }
   *      }
   *    },
   *    number: {N: '123'},
   *    nullValue: {NULL: true},
   *    boolValue: {BOOL: true}
   *  });
   */
  unmarshall: function unmarshall(data, options) {
    return AWS.DynamoDB.Converter.output({M: data}, options);
  }
};

/**
 * @api private
 * @param data [Array]
 * @param options [map]
 */
function formatList(data, options) {
  var list = {L: []};
  for (var i = 0; i < data.length; i++) {
    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));
  }
  return list;
}

/**
 * @api private
 * @param value [String]
 * @param wrapNumbers [Boolean]
 */
function convertNumber(value, wrapNumbers) {
  return wrapNumbers ? new NumberValue(value) : Number(value);
}

/**
 * @api private
 * @param data [map]
 * @param options [map]
 */
function formatMap(data, options) {
  var map = {M: {}};
  for (var key in data) {
    var formatted = AWS.DynamoDB.Converter.input(data[key], options);
    if (formatted !== void 0) {
      map['M'][key] = formatted;
    }
  }
  return map;
}

/**
 * @api private
 */
function formatSet(data, options) {
  options = options || {};
  var values = data.values;
  if (options.convertEmptyValues) {
    values = filterEmptySetValues(data);
    if (values.length === 0) {
      return AWS.DynamoDB.Converter.input(null);
    }
  }

  var map = {};
  switch (data.type) {
    case 'String': map['SS'] = values; break;
    case 'Binary': map['BS'] = values; break;
    case 'Number': map['NS'] = values.map(function (value) {
      return value.toString();
    });
  }
  return map;
}

/**
 * @api private
 */
function filterEmptySetValues(set) {
    var nonEmptyValues = [];
    var potentiallyEmptyTypes = {
        String: true,
        Binary: true,
        Number: false
    };
    if (potentiallyEmptyTypes[set.type]) {
        for (var i = 0; i < set.values.length; i++) {
            if (set.values[i].length === 0) {
                continue;
            }
            nonEmptyValues.push(set.values[i]);
        }

        return nonEmptyValues;
    }

    return set.values;
}

module.exports = AWS.DynamoDB.Converter;


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var Translator = __webpack_require__(493);
var DynamoDBSet = __webpack_require__(54);

/**
 * The document client simplifies working with items in Amazon DynamoDB
 * by abstracting away the notion of attribute values. This abstraction
 * annotates native JavaScript types supplied as input parameters, as well
 * as converts annotated response data to native JavaScript types.
 *
 * ## Marshalling Input and Unmarshalling Response Data
 *
 * The document client affords developers the use of native JavaScript types
 * instead of `AttributeValue`s to simplify the JavaScript development
 * experience with Amazon DynamoDB. JavaScript objects passed in as parameters
 * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.
 * Responses from DynamoDB are unmarshalled into plain JavaScript objects
 * by the `DocumentClient`. The `DocumentClient`, does not accept
 * `AttributeValue`s in favor of native JavaScript types.
 *
 * |                             JavaScript Type                            | DynamoDB AttributeValue |
 * |:----------------------------------------------------------------------:|-------------------------|
 * | String                                                                 | S                       |
 * | Number                                                                 | N                       |
 * | Boolean                                                                | BOOL                    |
 * | null                                                                   | NULL                    |
 * | Array                                                                  | L                       |
 * | Object                                                                 | M                       |
 * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |
 *
 * ## Support for Sets
 *
 * The `DocumentClient` offers a convenient way to create sets from
 * JavaScript Arrays. The type of set is inferred from the first element
 * in the array. DynamoDB supports string, number, and binary sets. To
 * learn more about supported types see the
 * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)
 * For more information see {AWS.DynamoDB.DocumentClient.createSet}
 *
 */
AWS.DynamoDB.DocumentClient = AWS.util.inherit({

  /**
   * @api private
   */
  operations: {
    batchGetItem: 'batchGet',
    batchWriteItem: 'batchWrite',
    putItem: 'put',
    getItem: 'get',
    deleteItem: 'delete',
    updateItem: 'update',
    scan: 'scan',
    query: 'query'
  },

  /**
   * Creates a DynamoDB document client with a set of configuration options.
   *
   * @option options params [map] An optional map of parameters to bind to every
   *   request sent by this service object.
   * @option options service [AWS.DynamoDB] An optional pre-configured instance
   *  of the AWS.DynamoDB service object to use for requests. The object may
   *  bound parameters used by the document client.
   * @option options convertEmptyValues [Boolean] set to true if you would like
   *  the document client to convert empty values (0-length strings, binary
   *  buffers, and sets) to be converted to NULL types when persisting to
   *  DynamoDB.
   * @see AWS.DynamoDB.constructor
   *
   */
  constructor: function DocumentClient(options) {
    var self = this;
    self.options = options || {};
    self.configure(self.options);
  },

  /**
   * @api private
   */
  configure: function configure(options) {
    var self = this;
    self.service = options.service;
    self.bindServiceObject(options);
    self.attrValue = options.attrValue =
      self.service.api.operations.putItem.input.members.Item.value.shape;
  },

  /**
   * @api private
   */
  bindServiceObject: function bindServiceObject(options) {
    var self = this;
    options = options || {};

    if (!self.service) {
      self.service = new AWS.DynamoDB(options);
    } else {
      var config = AWS.util.copy(self.service.config);
      self.service = new self.service.constructor.__super__(config);
      self.service.config.params =
        AWS.util.merge(self.service.config.params || {}, options.params);
    }
  },

  /**
   * Returns the attributes of one or more items from one or more tables
   * by delegating to `AWS.DynamoDB.batchGetItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.batchGetItem
   * @example Get items from multiple tables
   *  var params = {
   *    RequestItems: {
   *      'Table-1': {
   *        Keys: [
   *          {
   *             HashKey: 'haskey',
   *             NumberRangeKey: 1
   *          }
   *        ]
   *      },
   *      'Table-2': {
   *        Keys: [
   *          { foo: 'bar' },
   *        ]
   *      }
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.batchGet(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  batchGet: function(params, callback) {
    var self = this;
    var request = self.service.batchGetItem(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * Puts or deletes multiple items in one or more tables by delegating
   * to `AWS.DynamoDB.batchWriteItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.batchWriteItem
   * @example Write to and delete from a table
   *  var params = {
   *    RequestItems: {
   *      'Table-1': [
   *        {
   *          DeleteRequest: {
   *            Key: { HashKey: 'someKey' }
   *          }
   *        },
   *        {
   *          PutRequest: {
   *            Item: {
   *              HashKey: 'anotherKey',
   *              NumAttribute: 1,
   *              BoolAttribute: true,
   *              ListAttribute: [1, 'two', false],
   *              MapAttribute: { foo: 'bar' }
   *            }
   *          }
   *        }
   *      ]
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.batchWrite(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  batchWrite: function(params, callback) {
    var self = this;
    var request = self.service.batchWriteItem(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * Deletes a single item in a table by primary key by delegating to
   * `AWS.DynamoDB.deleteItem()`
   *
   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.deleteItem
   * @example Delete an item from a table
   *  var params = {
   *    TableName : 'Table',
   *    Key: {
   *      HashKey: 'hashkey',
   *      NumberRangeKey: 1
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.delete(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  delete: function(params, callback) {
    var self = this;
    var request = self.service.deleteItem(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * Returns a set of attributes for the item with the given primary key
   * by delegating to `AWS.DynamoDB.getItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.getItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.getItem
   * @example Get an item from a table
   *  var params = {
   *    TableName : 'Table',
   *    Key: {
   *      HashKey: 'hashkey'
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.get(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  get: function(params, callback) {
    var self = this;
    var request = self.service.getItem(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * Creates a new item, or replaces an old item with a new item by
   * delegating to `AWS.DynamoDB.putItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.putItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.putItem
   * @example Create a new item in a table
   *  var params = {
   *    TableName : 'Table',
   *    Item: {
   *       HashKey: 'haskey',
   *       NumAttribute: 1,
   *       BoolAttribute: true,
   *       ListAttribute: [1, 'two', false],
   *       MapAttribute: { foo: 'bar'},
   *       NullAttribute: null
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.put(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  put: function put(params, callback) {
    var self = this;
    var request = self.service.putItem(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * Edits an existing item's attributes, or adds a new item to the table if
   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.
   *
   * Supply the same parameters as {AWS.DynamoDB.updateItem} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.updateItem
   * @example Update an item with expressions
   *  var params = {
   *    TableName: 'Table',
   *    Key: { HashKey : 'hashkey' },
   *    UpdateExpression: 'set #a = :x + :y',
   *    ConditionExpression: '#a < :MAX',
   *    ExpressionAttributeNames: {'#a' : 'Sum'},
   *    ExpressionAttributeValues: {
   *      ':x' : 20,
   *      ':y' : 45,
   *      ':MAX' : 100,
   *    }
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.update(params, function(err, data) {
   *     if (err) console.log(err);
   *     else console.log(data);
   *  });
   *
   */
  update: function(params, callback) {
    var self = this;
    var request = self.service.updateItem(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * Returns one or more items and item attributes by accessing every item
   * in a table or a secondary index.
   *
   * Supply the same parameters as {AWS.DynamoDB.scan} with
   * `AttributeValue`s substituted by native JavaScript types.
   *
   * @see AWS.DynamoDB.scan
   * @example Scan the table with a filter expression
   *  var params = {
   *    TableName : 'Table',
   *    FilterExpression : 'Year = :this_year',
   *    ExpressionAttributeValues : {':this_year' : 2015}
   *  };
   *
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  documentClient.scan(params, function(err, data) {
   *     if (err) console.log(err);
   *     else console.log(data);
   *  });
   *
   */
  scan: function(params, callback) {
    var self = this;
    var request = self.service.scan(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

   /**
    * Directly access items from a table by primary key or a secondary index.
    *
    * Supply the same parameters as {AWS.DynamoDB.query} with
    * `AttributeValue`s substituted by native JavaScript types.
    *
    * @see AWS.DynamoDB.query
    * @example Query an index
    *  var params = {
    *    TableName: 'Table',
    *    IndexName: 'Index',
    *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',
    *    ExpressionAttributeValues: {
    *      ':hkey': 'key',
    *      ':rkey': 2015
    *    }
    *  };
    *
    *  var documentClient = new AWS.DynamoDB.DocumentClient();
    *
    *  documentClient.query(params, function(err, data) {
    *     if (err) console.log(err);
    *     else console.log(data);
    *  });
    *
    */
  query: function(params, callback) {
    var self = this;
    var request = self.service.query(params);
    self.setupRequest(request);
    self.setupResponse(request);
    if (typeof callback === 'function') {
      request.send(callback);
    }
    return request;
  },

  /**
   * Creates a set of elements inferring the type of set from
   * the type of the first element. Amazon DynamoDB currently supports
   * the number sets, string sets, and binary sets. For more information
   * about DynamoDB data types see the documentation on the
   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).
   *
   * @param list [Array] Collection to represent your DynamoDB Set
   * @param options [map]
   *  * **validate** [Boolean] set to true if you want to validate the type
   *    of each element in the set. Defaults to `false`.
   * @example Creating a number set
   *  var documentClient = new AWS.DynamoDB.DocumentClient();
   *
   *  var params = {
   *    Item: {
   *      hashkey: 'hashkey'
   *      numbers: documentClient.createSet([1, 2, 3]);
   *    }
   *  };
   *
   *  documentClient.put(params, function(err, data) {
   *    if (err) console.log(err);
   *    else console.log(data);
   *  });
   *
   */
  createSet: function(list, options) {
    options = options || {};
    return new DynamoDBSet(list, options);
  },

  /**
   * @api private
   */
  getTranslator: function() {
    return new Translator(this.options);
  },

  /**
   * @api private
   */
  setupRequest: function setupRequest(request) {
    var self = this;
    var translator = self.getTranslator();
    var operation = request.operation;
    var inputShape = request.service.api.operations[operation].input;
    request._events.validate.unshift(function(req) {
      req.rawParams = AWS.util.copy(req.params);
      req.params = translator.translateInput(req.rawParams, inputShape);
    });
  },

  /**
   * @api private
   */
  setupResponse: function setupResponse(request) {
    var self = this;
    var translator = self.getTranslator();
    var outputShape = self.service.api.operations[request.operation].output;
    request.on('extractData', function(response) {
      response.data = translator.translateOutput(response.data, outputShape);
    });

    var response = request.response;
    response.nextPage = function(cb) {
      var resp = this;
      var req = resp.request;
      var config;
      var service = req.service;
      var operation = req.operation;
      try {
        config = service.paginationConfig(operation, true);
      } catch (e) { resp.error = e; }

      if (!resp.hasNextPage()) {
        if (cb) cb(resp.error, null);
        else if (resp.error) throw resp.error;
        return null;
      }

      var params = AWS.util.copy(req.rawParams);
      if (!resp.nextPageTokens) {
        return cb ? cb(null, null) : null;
      } else {
        var inputTokens = config.inputToken;
        if (typeof inputTokens === 'string') inputTokens = [inputTokens];
        for (var i = 0; i < inputTokens.length; i++) {
          params[inputTokens[i]] = resp.nextPageTokens[i];
        }
        return self[operation](params, cb);
      }
    };
  }

});

module.exports = AWS.DynamoDB.DocumentClient;


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(0).util;

/**
 * An object recognizable as a numeric value that stores the underlying number
 * as a string.
 *
 * Intended to be a deserialization target for the DynamoDB Document Client when
 * the `wrapNumbers` flag is set. This allows for numeric values that lose
 * precision when converted to JavaScript's `number` type.
 */
var DynamoDBNumberValue = util.inherit({
  constructor: function NumberValue(value) {
    this.value = value.toString();
  },

  /**
   * Render the underlying value as a number when converting to JSON.
   */
  toJSON: function () {
    return this.toNumber();
  },

  /**
   * Convert the underlying value to a JavaScript number.
   */
  toNumber: function () {
    return Number(this.value);
  },

  /**
   * Return a string representing the unaltered value provided to the
   * constructor.
   */
  toString: function () {
    return this.value;
  }
});

module.exports = DynamoDBNumberValue;

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(0).util;
var convert = __webpack_require__(490);

var Translator = function(options) {
  options = options || {};
  this.attrValue = options.attrValue;
  this.convertEmptyValues = Boolean(options.convertEmptyValues);
  this.wrapNumbers = Boolean(options.wrapNumbers);
};

Translator.prototype.translateInput = function(value, shape) {
  this.mode = 'input';
  return this.translate(value, shape);
};

Translator.prototype.translateOutput = function(value, shape) {
  this.mode = 'output';
  return this.translate(value, shape);
};

Translator.prototype.translate = function(value, shape) {
  var self = this;
  if (!shape || value === undefined) return undefined;

  if (shape.shape === self.attrValue) {
    return convert[self.mode](value, {
      convertEmptyValues: self.convertEmptyValues,
      wrapNumbers: self.wrapNumbers,
    });
  }
  switch (shape.type) {
    case 'structure': return self.translateStructure(value, shape);
    case 'map': return self.translateMap(value, shape);
    case 'list': return self.translateList(value, shape);
    default: return self.translateScalar(value, shape);
  }
};

Translator.prototype.translateStructure = function(structure, shape) {
  var self = this;
  if (structure == null) return undefined;

  var struct = {};
  util.each(structure, function(name, value) {
    var memberShape = shape.members[name];
    if (memberShape) {
      var result = self.translate(value, memberShape);
      if (result !== undefined) struct[name] = result;
    }
  });
  return struct;
};

Translator.prototype.translateList = function(list, shape) {
  var self = this;
  if (list == null) return undefined;

  var out = [];
  util.arrayEach(list, function(value) {
    var result = self.translate(value, shape.member);
    if (result === undefined) out.push(null);
    else out.push(result);
  });
  return out;
};

Translator.prototype.translateMap = function(map, shape) {
  var self = this;
  if (map == null) return undefined;

  var out = {};
  util.each(map, function(key, value) {
    var result = self.translate(value, shape.value);
    if (result === undefined) out[key] = null;
    else out[key] = result;
  });
  return out;
};

Translator.prototype.translateScalar = function(value, shape) {
  return shape.toType(value);
};

module.exports = Translator;


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var SequentialExecutor = __webpack_require__(64);
/**
 * The namespace used to register global event listeners for request building
 * and sending.
 */
AWS.EventListeners = {
  /**
   * @!attribute VALIDATE_CREDENTIALS
   *   A request listener that validates whether the request is being
   *   sent with credentials.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating credentials
   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_REGION
   *   A request listener that validates whether the region is set
   *   for a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating region configuration
   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_PARAMETERS
   *   A request listener that validates input parameters in a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating parameters
   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;
   *     request.removeListener('validate', listener);
   *   @example Disable parameter validation globally
   *     AWS.EventListeners.Core.removeListener('validate',
   *       AWS.EventListeners.Core.VALIDATE_REGION);
   *   @readonly
   *   @return [Function]
   * @!attribute SEND
   *   A request listener that initiates the HTTP connection for a
   *   request being sent. Handles the {AWS.Request~send 'send' Request event}
   *   @example Replacing the HTTP handler
   *     var listener = AWS.EventListeners.Core.SEND;
   *     request.removeListener('send', listener);
   *     request.on('send', function(response) {
   *       customHandler.send(response);
   *     });
   *   @return [Function]
   *   @readonly
   * @!attribute HTTP_DATA
   *   A request listener that reads data from the HTTP connection in order
   *   to build the response data.
   *   Handles the {AWS.Request~httpData 'httpData' Request event}.
   *   Remove this handler if you are overriding the 'httpData' event and
   *   do not want extra data processing and buffering overhead.
   *   @example Disabling default data processing
   *     var listener = AWS.EventListeners.Core.HTTP_DATA;
   *     request.removeListener('httpData', listener);
   *   @return [Function]
   *   @readonly
   */
  Core: {} /* doc hack */
};

/**
 * @api private
 */
function getOperationAuthtype(req) {
  if (!req.service.api.operations) {
    return '';
  }
  var operation = req.service.api.operations[req.operation];
  return operation ? operation.authtype : '';
}

AWS.EventListeners = {
  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
    addAsync('VALIDATE_CREDENTIALS', 'validate',
        function VALIDATE_CREDENTIALS(req, done) {
      if (!req.service.api.signatureVersion) return done(); // none
      req.service.config.getCredentials(function(err) {
        if (err) {
          req.response.error = AWS.util.error(err,
            {code: 'CredentialsError', message: 'Missing credentials in config'});
        }
        done();
      });
    });

    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {
      if (!req.service.config.region && !req.service.isGlobalEndpoint) {
        req.response.error = AWS.util.error(new Error(),
          {code: 'ConfigError', message: 'Missing region in config'});
      }
    });

    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {
      if (!req.service.api.operations) {
        return;
      }
      var operation = req.service.api.operations[req.operation];
      if (!operation) {
        return;
      }
      var idempotentMembers = operation.idempotentMembers;
      if (!idempotentMembers.length) {
        return;
      }
      // creates a copy of params so user's param object isn't mutated
      var params = AWS.util.copy(req.params);
      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
        if (!params[idempotentMembers[i]]) {
          // add the member
          params[idempotentMembers[i]] = AWS.util.uuid.v4();
        }
      }
      req.params = params;
    });

    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {
      if (!req.service.api.operations) {
        return;
      }
      var rules = req.service.api.operations[req.operation].input;
      var validation = req.service.config.paramValidation;
      new AWS.ParamValidator(validation).validate(rules, req.params);
    });

    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {
      req.haltHandlersOnError();
      if (!req.service.api.operations) {
        return;
      }
      var operation = req.service.api.operations[req.operation];
      var authtype = operation ? operation.authtype : '';
      if (!req.service.api.signatureVersion && !authtype) return done(); // none
      if (req.service.getSignerClass(req) === AWS.Signers.V4) {
        var body = req.httpRequest.body || '';
        if (authtype.indexOf('unsigned-body') >= 0) {
          req.httpRequest.headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';
          return done();
        }
        AWS.util.computeSha256(body, function(err, sha) {
          if (err) {
            done(err);
          }
          else {
            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;
            done();
          }
        });
      } else {
        done();
      }
    });

    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {
      var authtype = getOperationAuthtype(req);
      if (req.httpRequest.headers['Content-Length'] === undefined
          && authtype.indexOf('unsigned-body') === -1) {
        var length = AWS.util.string.byteLength(req.httpRequest.body);
        req.httpRequest.headers['Content-Length'] = length;
      }
    });

    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {
      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;
    });

    add('RESTART', 'restart', function RESTART() {
      var err = this.response.error;
      if (!err || !err.retryable) return;

      this.httpRequest = new AWS.HttpRequest(
        this.service.endpoint,
        this.service.region
      );

      if (this.response.retryCount < this.service.config.maxRetries) {
        this.response.retryCount++;
      } else {
        this.response.error = null;
      }
    });

    addAsync('SIGN', 'sign', function SIGN(req, done) {
      var service = req.service;
      var operations = req.service.api.operations || {};
      var operation = operations[req.operation];
      var authtype = operation ? operation.authtype : '';
      if (!service.api.signatureVersion && !authtype) return done(); // none

      service.config.getCredentials(function (err, credentials) {
        if (err) {
          req.response.error = err;
          return done();
        }

        try {
          var date = service.getSkewCorrectedDate();
          var SignerClass = service.getSignerClass(req);
          var signer = new SignerClass(req.httpRequest,
            service.api.signingName || service.api.endpointPrefix,
            {
              signatureCache: service.config.signatureCache,
              operation: operation
            });
          signer.setServiceClientId(service._clientId);

          // clear old authorization headers
          delete req.httpRequest.headers['Authorization'];
          delete req.httpRequest.headers['Date'];
          delete req.httpRequest.headers['X-Amz-Date'];

          // add new authorization
          signer.addAuthorization(credentials, date);
          req.signedAt = date;
        } catch (e) {
          req.response.error = e;
        }
        done();
      });
    });

    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {
      if (this.service.successfulResponse(resp, this)) {
        resp.data = {};
        resp.error = null;
      } else {
        resp.data = null;
        resp.error = AWS.util.error(new Error(),
          {code: 'UnknownError', message: 'An unknown error occurred.'});
      }
    });

    addAsync('SEND', 'send', function SEND(resp, done) {
      resp.httpResponse._abortCallback = done;
      resp.error = null;
      resp.data = null;

      function callback(httpResp) {
        resp.httpResponse.stream = httpResp;
        var stream = resp.request.httpRequest.stream;

        httpResp.on('headers', function onHeaders(statusCode, headers, statusMessage) {
          resp.request.emit(
            'httpHeaders',
            [statusCode, headers, resp, statusMessage]
          );

          if (!resp.httpResponse.streaming) {
            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check
              httpResp.on('readable', function onReadable() {
                var data = httpResp.read();
                if (data !== null) {
                  resp.request.emit('httpData', [data, resp]);
                }
              });
            } else { // legacy streams API
              httpResp.on('data', function onData(data) {
                resp.request.emit('httpData', [data, resp]);
              });
            }
          }
        });

        httpResp.on('end', function onEnd() {
          if (!stream || !stream.didCallback) {
            resp.request.emit('httpDone');
            done();
          }
        });
      }

      function progress(httpResp) {
        httpResp.on('sendProgress', function onSendProgress(value) {
          resp.request.emit('httpUploadProgress', [value, resp]);
        });

        httpResp.on('receiveProgress', function onReceiveProgress(value) {
          resp.request.emit('httpDownloadProgress', [value, resp]);
        });
      }

      function error(err) {
        if (err.code !== 'RequestAbortedError') {
          var errCode = err.code === 'TimeoutError' ? err.code : 'NetworkingError';
          err = AWS.util.error(err, {
            code: errCode,
            region: resp.request.httpRequest.region,
            hostname: resp.request.httpRequest.endpoint.hostname,
            retryable: true
          });
        }
        resp.error = err;
        resp.request.emit('httpError', [resp.error, resp], function() {
          done();
        });
      }

      function executeSend() {
        var http = AWS.HttpClient.getInstance();
        var httpOptions = resp.request.service.config.httpOptions || {};
        try {
          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,
                                          callback, error);
          progress(stream);
        } catch (err) {
          error(err);
        }
      }
      var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;
      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign
        this.emit('sign', [this], function(err) {
          if (err) done(err);
          else executeSend();
        });
      } else {
        executeSend();
      }
    });

    add('HTTP_HEADERS', 'httpHeaders',
        function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
      resp.httpResponse.statusCode = statusCode;
      resp.httpResponse.statusMessage = statusMessage;
      resp.httpResponse.headers = headers;
      resp.httpResponse.body = new AWS.util.Buffer('');
      resp.httpResponse.buffers = [];
      resp.httpResponse.numBytes = 0;
      var dateHeader = headers.date || headers.Date;
      var service = resp.request.service;
      if (dateHeader) {
        var serverTime = Date.parse(dateHeader);
        if (service.config.correctClockSkew
            && service.isClockSkewed(serverTime)) {
          service.applyClockOffset(serverTime);
        }
      }
    });

    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {
      if (chunk) {
        if (AWS.util.isNode()) {
          resp.httpResponse.numBytes += chunk.length;

          var total = resp.httpResponse.headers['content-length'];
          var progress = { loaded: resp.httpResponse.numBytes, total: total };
          resp.request.emit('httpDownloadProgress', [progress, resp]);
        }

        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));
      }
    });

    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {
      // convert buffers array into single buffer
      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
        resp.httpResponse.body = body;
      }
      delete resp.httpResponse.numBytes;
      delete resp.httpResponse.buffers;
    });

    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {
      if (resp.httpResponse.statusCode) {
        resp.error.statusCode = resp.httpResponse.statusCode;
        if (resp.error.retryable === undefined) {
          resp.error.retryable = this.service.retryableError(resp.error, this);
        }
      }
    });

    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {
      if (!resp.error) return;
      switch (resp.error.code) {
        case 'RequestExpired': // EC2 only
        case 'ExpiredTokenException':
        case 'ExpiredToken':
          resp.error.retryable = true;
          resp.request.service.config.credentials.expired = true;
      }
    });

    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {
      var err = resp.error;
      if (!err) return;
      if (typeof err.code === 'string' && typeof err.message === 'string') {
        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
          resp.error.retryable = true;
        }
      }
    });

    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {
      if (!resp.error) return;
      if (this.service.clockSkewError(resp.error)
          && this.service.config.correctClockSkew) {
        resp.error.retryable = true;
      }
    });

    add('REDIRECT', 'retry', function REDIRECT(resp) {
      if (resp.error && resp.error.statusCode >= 300 &&
          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {
        this.httpRequest.endpoint =
          new AWS.Endpoint(resp.httpResponse.headers['location']);
        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;
        resp.error.redirect = true;
        resp.error.retryable = true;
      }
    });

    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {
      if (resp.error) {
        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.error.retryDelay = 0;
        } else if (resp.retryCount < resp.maxRetries) {
          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;
        }
      }
    });

    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {
      var delay, willRetry = false;

      if (resp.error) {
        delay = resp.error.retryDelay || 0;
        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
          resp.retryCount++;
          willRetry = true;
        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
          resp.redirectCount++;
          willRetry = true;
        }
      }

      if (willRetry) {
        resp.error = null;
        setTimeout(done, delay);
      } else {
        done();
      }
    });
  }),

  CorePost: new SequentialExecutor().addNamedListeners(function(add) {
    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);
    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);

    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {
      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {
        var message = 'Inaccessible host: `' + err.hostname +
          '\'. This service may not be available in the `' + err.region +
          '\' region.';
        this.response.error = AWS.util.error(new Error(message), {
          code: 'UnknownEndpoint',
          region: err.region,
          hostname: err.hostname,
          retryable: true,
          originalError: err
        });
      }
    });
  }),

  Logger: new SequentialExecutor().addNamedListeners(function(add) {
    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {
      var req = resp.request;
      var logger = req.service.config.logger;
      if (!logger) return;
      function filterSensitiveLog(inputShape, shape) {
        if (!shape) {
          return shape;
        }
        switch (inputShape.type) {
          case 'structure':
            var struct = {};
            AWS.util.each(shape, function(subShapeName, subShape) {
              if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
                struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
              } else {
                struct[subShapeName] = subShape;
              }
            })
            return struct
          case 'list':
            var list = [];
            AWS.util.arrayEach(shape, function(subShape, index) {
              list.push(filterSensitiveLog(inputShape.member, subShape));
            })
            return list;
          case 'map':
            var map = {};
            AWS.util.each(shape, function(key, value) {
              map[key] = filterSensitiveLog(inputShape.value, value);
            })
            return map;
          default:
            if (inputShape.isSensitive) {
              return '***SensitiveInformation***'
            } else {
              return shape;
            }
        }
      }

      function buildMessage() {
        var time = resp.request.service.getSkewCorrectedDate().getTime();
        var delta = (time - req.startTime.getTime()) / 1000;
        var ansi = logger.isTTY ? true : false;
        var status = resp.httpResponse.statusCode;
        var censoredParams = req.params;
        if (
          req.service.api.operations &&
              req.service.api.operations[req.operation] &&
              req.service.api.operations[req.operation].input
        ) {
          var inputShape = req.service.api.operations[req.operation].input;
          censoredParams = filterSensitiveLog(inputShape, req.params);
        }
        var params = __webpack_require__(104).inspect(censoredParams, true, null);
        var message = '';
        if (ansi) message += '\x1B[33m';
        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;
        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';
        if (ansi) message += '\x1B[0;1m';
        message += ' ' + AWS.util.string.lowerFirst(req.operation);
        message += '(' + params + ')';
        if (ansi) message += '\x1B[0m';
        return message;
      }

      var line = buildMessage();
      if (typeof logger.log === 'function') {
        logger.log(line);
      } else if (typeof logger.write === 'function') {
        logger.write(line + '\n');
      }
    });
  }),

  Json: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(32);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Rest: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(20);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestJson: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(62);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestXml: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(63);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Query: new SequentialExecutor().addNamedListeners(function(add) {
    var svc = __webpack_require__(61);
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  })
};


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var Stream = AWS.util.stream.Stream;
var TransformStream = AWS.util.stream.Transform;
var ReadableStream = AWS.util.stream.Readable;
__webpack_require__(29);

/**
 * @api private
 */
AWS.NodeHttpClient = AWS.util.inherit({
  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
    var self = this;
    var endpoint = httpRequest.endpoint;
    var pathPrefix = '';
    if (!httpOptions) httpOptions = {};
    if (httpOptions.proxy) {
      pathPrefix = endpoint.protocol + '//' + endpoint.hostname;
      if (endpoint.port !== 80 && endpoint.port !== 443) {
        pathPrefix += ':' + endpoint.port;
      }
      endpoint = new AWS.Endpoint(httpOptions.proxy);
    }

    var useSSL = endpoint.protocol === 'https:';
    var http = useSSL ? __webpack_require__(47) : __webpack_require__(100);
    var options = {
      host: endpoint.hostname,
      port: endpoint.port,
      method: httpRequest.method,
      headers: httpRequest.headers,
      path: pathPrefix + httpRequest.path
    };

    if (useSSL && !httpOptions.agent) {
      options.agent = this.sslAgent();
    }

    AWS.util.update(options, httpOptions);
    delete options.proxy; // proxy isn't an HTTP option
    delete options.timeout; // timeout isn't an HTTP option

    var stream = http.request(options, function (httpResp) {
      if (stream.didCallback) return;

      callback(httpResp);
      httpResp.emit(
        'headers',
        httpResp.statusCode,
        httpResp.headers,
        httpResp.statusMessage
      );
    });
    httpRequest.stream = stream; // attach stream to httpRequest
    stream.didCallback = false;

    // connection timeout support
    if (httpOptions.connectTimeout) {
      stream.on('socket', function(socket) {
        if (socket.connecting) {
          var timeoutId = setTimeout(function connectTimeout() {
            if (stream.didCallback) return; stream.didCallback = true;

            stream.abort();
            errCallback(AWS.util.error(
              new Error('Socket timed out without establishing a connection'),
              {code: 'TimeoutError'}
            ));
          }, httpOptions.connectTimeout);
          socket.on('connect', (function(tId) {
            return function () {
              clearTimeout(tId);
            };
          })(timeoutId));
        }
      });
    }

    // timeout support
    stream.setTimeout(httpOptions.timeout || 0, function() {
      if (stream.didCallback) return; stream.didCallback = true;

      var msg = 'Connection timed out after ' + httpOptions.timeout + 'ms';
      errCallback(AWS.util.error(new Error(msg), {code: 'TimeoutError'}));
      stream.abort();
    });

    stream.on('error', function() {
      if (stream.didCallback) return; stream.didCallback = true;
      errCallback.apply(stream, arguments);
    });

    var expect = httpRequest.headers.Expect || httpRequest.headers.expect;
    if (expect === '100-continue') {
      stream.on('continue', function() {
        self.writeBody(stream, httpRequest);
      });
    } else {
      this.writeBody(stream, httpRequest);
    }

    return stream;
  },

  writeBody: function writeBody(stream, httpRequest) {
    var body = httpRequest.body;
    var totalBytes = parseInt(httpRequest.headers['Content-Length'], 10);

    if (body instanceof Stream) {
      // For progress support of streaming content -
      // pipe the data through a transform stream to emit 'sendProgress' events
      var progressStream = this.progressStream(stream, totalBytes);
      if (progressStream) {
        body.pipe(progressStream).pipe(stream);
      } else {
        body.pipe(stream);
      }
    } else if (body) {
      // The provided body is a buffer/string and is already fully available in memory -
      // For performance it's best to send it as a whole by calling stream.end(body),
      // Callers expect a 'sendProgress' event which is best emitted once
      // the http request stream has been fully written and all data flushed.
      // The use of totalBytes is important over body.length for strings where
      // length is char length and not byte length.
      stream.once('finish', function() {
        stream.emit('sendProgress', {
          loaded: totalBytes,
          total: totalBytes
        });
      });
      stream.end(body);
    } else {
      // no request body
      stream.end();
    }
  },

  sslAgent: function sslAgent() {
    var https = __webpack_require__(47);

    if (!AWS.NodeHttpClient.sslAgent) {
      AWS.NodeHttpClient.sslAgent = new https.Agent({rejectUnauthorized: true});
      AWS.NodeHttpClient.sslAgent.setMaxListeners(0);

      // delegate maxSockets to globalAgent, set a default limit of 50 if current value is Infinity.
      // Users can bypass this default by supplying their own Agent as part of SDK configuration.
      Object.defineProperty(AWS.NodeHttpClient.sslAgent, 'maxSockets', {
        enumerable: true,
        get: function() {
          var defaultMaxSockets = 50;
          var globalAgent = https.globalAgent;
          if (globalAgent && globalAgent.maxSockets !== Infinity && typeof globalAgent.maxSockets === 'number') {
            return globalAgent.maxSockets;
          }
          return defaultMaxSockets;
        }
      });
    }
    return AWS.NodeHttpClient.sslAgent;
  },

  progressStream: function progressStream(stream, totalBytes) {
    if (typeof TransformStream === 'undefined') {
      // for node 0.8 there is no streaming progress
      return;
    }
    var loadedBytes = 0;
    var reporter = new TransformStream();
    reporter._transform = function(chunk, encoding, callback) {
      if (chunk) {
        loadedBytes += chunk.length;
        stream.emit('sendProgress', {
          loaded: loadedBytes,
          total: totalBytes
        });
      }
      callback(null, chunk);
    };
    return reporter;
  },

  emitter: null
});

/**
 * @!ignore
 */

/**
 * @api private
 */
AWS.HttpClient.prototype = AWS.NodeHttpClient.prototype;

/**
 * @api private
 */
AWS.HttpClient.streamsApiVersion = ReadableStream ? 2 : 1;


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
__webpack_require__(29);
var inherit = AWS.util.inherit;

/**
 * Represents a metadata service available on EC2 instances. Using the
 * {request} method, you can receieve metadata about any available resource
 * on the metadata service.
 *
 * @!attribute [r] httpOptions
 *   @return [map] a map of options to pass to the underlying HTTP request:
 *
 *     * **timeout** (Number) &mdash; a timeout value in milliseconds to wait
 *       before aborting the connection. Set to 0 for no timeout.
 *
 * @!macro nobrowser
 */
AWS.MetadataService = inherit({
  /**
   * @return [String] the hostname of the instance metadata service
   */
  host: '169.254.169.254',

  /**
   * @!ignore
   */

  /**
   * Default HTTP options. By default, the metadata service is set to not
   * timeout on long requests. This means that on non-EC2 machines, this
   * request will never return. If you are calling this operation from an
   * environment that may not always run on EC2, set a `timeout` value so
   * the SDK will abort the request after a given number of milliseconds.
   */
  httpOptions: { timeout: 0 },

  /**
   * Creates a new MetadataService object with a given set of options.
   *
   * @option options host [String] the hostname of the instance metadata
   *   service
   * @option options httpOptions [map] a map of options to pass to the
   *   underlying HTTP request:
   *
   *   * **timeout** (Number) &mdash; a timeout value in milliseconds to wait
   *     before aborting the connection. Set to 0 for no timeout.
   * @option options maxRetries [Integer] the maximum number of retries to
   *   perform for timeout errors
   * @option options retryDelayOptions [map] A set of options to configure the
   *   retry delay on retryable errors. See AWS.Config for details.
   */
  constructor: function MetadataService(options) {
    AWS.util.update(this, options);
  },

  /**
   * Sends a request to the instance metadata service for a given resource.
   *
   * @param path [String] the path of the resource to get
   * @callback callback function(err, data)
   *   Called when a response is available from the service.
   *   @param err [Error, null] if an error occurred, this value will be set
   *   @param data [String, null] if the request was successful, the body of
   *     the response
   */
  request: function request(path, callback) {
    path = path || '/';
    var httpRequest = new AWS.HttpRequest('http://' + this.host + path);
    httpRequest.method = 'GET';
    AWS.util.handleRequestWithRetries(httpRequest, this, callback);
  },

  /**
  * @api private
  */
  loadCredentialsCallbacks: [],

  /**
   * Loads a set of credentials stored in the instance metadata service
   *
   * @api private
   * @callback callback function(err, credentials)
   *   Called when credentials are loaded from the resource
   *   @param err [Error] if an error occurred, this value will be set
   *   @param credentials [Object] the raw JSON object containing all
   *     metadata from the credentials resource
   */
  loadCredentials: function loadCredentials(callback) {
    var self = this;
    var basePath = '/latest/meta-data/iam/security-credentials/';
    self.loadCredentialsCallbacks.push(callback);
    if (self.loadCredentialsCallbacks.length > 1) { return; }

    function callbacks(err, creds) {
      var cb;
      while ((cb = self.loadCredentialsCallbacks.shift()) !== undefined) {
        cb(err, creds);
      }
    }

    self.request(basePath, function (err, roleName) {
      if (err) callbacks(err);
      else {
        roleName = roleName.split('\n')[0]; // grab first (and only) role
        self.request(basePath + roleName, function (credErr, credData) {
          if (credErr) callbacks(credErr);
          else {
            try {
              var credentials = JSON.parse(credData);
              callbacks(null, credentials);
            } catch (parseError) {
              callbacks(parseError);
            }
          }
        });
      }
    });
  }
});

module.exports = AWS.MetadataService;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 */
AWS.ParamValidator = AWS.util.inherit({
  /**
   * Create a new validator object.
   *
   * @param validation [Boolean|map] whether input parameters should be
   *     validated against the operation description before sending the
   *     request. Pass a map to enable any of the following specific
   *     validation features:
   *
   *     * **min** [Boolean] &mdash; Validates that a value meets the min
   *       constraint. This is enabled by default when paramValidation is set
   *       to `true`.
   *     * **max** [Boolean] &mdash; Validates that a value meets the max
   *       constraint.
   *     * **pattern** [Boolean] &mdash; Validates that a string value matches a
   *       regular expression.
   *     * **enum** [Boolean] &mdash; Validates that a string value matches one
   *       of the allowable enum values.
   */
  constructor: function ParamValidator(validation) {
    if (validation === true || validation === undefined) {
      validation = {'min': true};
    }
    this.validation = validation;
  },

  validate: function validate(shape, params, context) {
    this.errors = [];
    this.validateMember(shape, params || {}, context || 'params');

    if (this.errors.length > 1) {
      var msg = this.errors.join('\n* ');
      msg = 'There were ' + this.errors.length +
        ' validation errors:\n* ' + msg;
      throw AWS.util.error(new Error(msg),
        {code: 'MultipleValidationErrors', errors: this.errors});
    } else if (this.errors.length === 1) {
      throw this.errors[0];
    } else {
      return true;
    }
  },

  fail: function fail(code, message) {
    this.errors.push(AWS.util.error(new Error(message), {code: code}));
  },

  validateStructure: function validateStructure(shape, params, context) {
    this.validateType(params, context, ['object'], 'structure');

    var paramName;
    for (var i = 0; shape.required && i < shape.required.length; i++) {
      paramName = shape.required[i];
      var value = params[paramName];
      if (value === undefined || value === null) {
        this.fail('MissingRequiredParameter',
          'Missing required key \'' + paramName + '\' in ' + context);
      }
    }

    // validate hash members
    for (paramName in params) {
      if (!Object.prototype.hasOwnProperty.call(params, paramName)) continue;

      var paramValue = params[paramName],
          memberShape = shape.members[paramName];

      if (memberShape !== undefined) {
        var memberContext = [context, paramName].join('.');
        this.validateMember(memberShape, paramValue, memberContext);
      } else {
        this.fail('UnexpectedParameter',
          'Unexpected key \'' + paramName + '\' found in ' + context);
      }
    }

    return true;
  },

  validateMember: function validateMember(shape, param, context) {
    switch (shape.type) {
      case 'structure':
        return this.validateStructure(shape, param, context);
      case 'list':
        return this.validateList(shape, param, context);
      case 'map':
        return this.validateMap(shape, param, context);
      default:
        return this.validateScalar(shape, param, context);
    }
  },

  validateList: function validateList(shape, params, context) {
    if (this.validateType(params, context, [Array])) {
      this.validateRange(shape, params.length, context, 'list member count');
      // validate array members
      for (var i = 0; i < params.length; i++) {
        this.validateMember(shape.member, params[i], context + '[' + i + ']');
      }
    }
  },

  validateMap: function validateMap(shape, params, context) {
    if (this.validateType(params, context, ['object'], 'map')) {
      // Build up a count of map members to validate range traits.
      var mapCount = 0;
      for (var param in params) {
        if (!Object.prototype.hasOwnProperty.call(params, param)) continue;
        // Validate any map key trait constraints
        this.validateMember(shape.key, param,
                            context + '[key=\'' + param + '\']')
        this.validateMember(shape.value, params[param],
                            context + '[\'' + param + '\']');
        mapCount++;
      }
      this.validateRange(shape, mapCount, context, 'map member count');
    }
  },

  validateScalar: function validateScalar(shape, value, context) {
    switch (shape.type) {
      case null:
      case undefined:
      case 'string':
        return this.validateString(shape, value, context);
      case 'base64':
      case 'binary':
        return this.validatePayload(value, context);
      case 'integer':
      case 'float':
        return this.validateNumber(shape, value, context);
      case 'boolean':
        return this.validateType(value, context, ['boolean']);
      case 'timestamp':
        return this.validateType(value, context, [Date,
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, 'number'],
          'Date object, ISO-8601 string, or a UNIX timestamp');
      default:
        return this.fail('UnkownType', 'Unhandled type ' +
                         shape.type + ' for ' + context);
    }
  },

  validateString: function validateString(shape, value, context) {
    var validTypes = ['string'];
    if (shape.isJsonValue) {
      validTypes = validTypes.concat(['number', 'object', 'boolean']);
    }
    if (value !== null && this.validateType(value, context, validTypes)) {
      this.validateEnum(shape, value, context);
      this.validateRange(shape, value.length, context, 'string length');
      this.validatePattern(shape, value, context);
    }
  },

  validatePattern: function validatePattern(shape, value, context) {
    if (this.validation['pattern'] && shape['pattern'] !== undefined) {
      if (!(new RegExp(shape['pattern'])).test(value)) {
        this.fail('PatternMatchError', 'Provided value "' + value + '" '
          + 'does not match regex pattern /' + shape['pattern'] + '/ for '
          + context);
      }
    }
  },

  validateRange: function validateRange(shape, value, context, descriptor) {
    if (this.validation['min']) {
      if (shape['min'] !== undefined && value < shape['min']) {
        this.fail('MinRangeError', 'Expected ' + descriptor + ' >= '
          + shape['min'] + ', but found ' + value + ' for ' + context);
      }
    }
    if (this.validation['max']) {
      if (shape['max'] !== undefined && value > shape['max']) {
        this.fail('MaxRangeError', 'Expected ' + descriptor + ' <= '
          + shape['max'] + ', but found ' + value + ' for ' + context);
      }
    }
  },

  validateEnum: function validateRange(shape, value, context) {
    if (this.validation['enum'] && shape['enum'] !== undefined) {
      // Fail if the string value is not present in the enum list
      if (shape['enum'].indexOf(value) === -1) {
        this.fail('EnumError', 'Found string value of ' + value + ', but '
          + 'expected ' + shape['enum'].join('|') + ' for ' + context);
      }
    }
  },

  validateType: function validateType(value, context, acceptedTypes, type) {
    // We will not log an error for null or undefined, but we will return
    // false so that callers know that the expected type was not strictly met.
    if (value === null || value === undefined) return false;

    var foundInvalidType = false;
    for (var i = 0; i < acceptedTypes.length; i++) {
      if (typeof acceptedTypes[i] === 'string') {
        if (typeof value === acceptedTypes[i]) return true;
      } else if (acceptedTypes[i] instanceof RegExp) {
        if ((value || '').toString().match(acceptedTypes[i])) return true;
      } else {
        if (value instanceof acceptedTypes[i]) return true;
        if (AWS.util.isType(value, acceptedTypes[i])) return true;
        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);
      }
      foundInvalidType = true;
    }

    var acceptedType = type;
    if (!acceptedType) {
      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');
    }

    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';
    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +
              vowel + ' ' + acceptedType);
    return false;
  },

  validateNumber: function validateNumber(shape, value, context) {
    if (value === null || value === undefined) return;
    if (typeof value === 'string') {
      var castedValue = parseFloat(value);
      if (castedValue.toString() === value) value = castedValue;
    }
    if (this.validateType(value, context, ['number'])) {
      this.validateRange(shape, value, context, 'numeric value');
    }
  },

  validatePayload: function validatePayload(value, context) {
    if (value === null || value === undefined) return;
    if (typeof value === 'string') return;
    if (value && typeof value.byteLength === 'number') return; // typed arrays
    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js
      var Stream = AWS.util.stream.Stream;
      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;
    }

    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];
    if (value) {
      for (var i = 0; i < types.length; i++) {
        if (AWS.util.isType(value, types[i])) return;
        if (AWS.util.typeName(value.constructor) === types[i]) return;
      }
    }

    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +
      'string, Buffer, Stream, Blob, or typed array object');
  }
});


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var rest = AWS.Protocol.Rest;

/**
 * A presigner object can be used to generate presigned urls for the Polly service.
 */
AWS.Polly.Presigner = AWS.util.inherit({
    /**
     * Creates a presigner object with a set of configuration options.
     *
     * @option options params [map] An optional map of parameters to bind to every
     *   request sent by this service object.
     * @option options service [AWS.Polly] An optional pre-configured instance
     *  of the AWS.Polly service object to use for requests. The object may
     *  bound parameters used by the presigner.
     * @see AWS.Polly.constructor
     */
    constructor: function Signer(options) {
        options = options || {};
        this.options = options;
        this.service = options.service;
        this.bindServiceObject(options);
        this._operations = {};
    },

    /**
     * @api private
     */
    bindServiceObject: function bindServiceObject(options) {
        options = options || {};
        if (!this.service) {
            this.service = new AWS.Polly(options);
        } else {
            var config = AWS.util.copy(this.service.config);
            this.service = new this.service.constructor.__super__(config);
            this.service.config.params = AWS.util.merge(this.service.config.params || {}, options.params);
        }
    },

    /**
     * @api private
     */
    modifyInputMembers: function modifyInputMembers(input) {
        // make copies of the input so we don't overwrite the api
        // need to be careful to copy anything we access/modify
        var modifiedInput = AWS.util.copy(input);
        modifiedInput.members = AWS.util.copy(input.members);
        AWS.util.each(input.members, function(name, member) {
            modifiedInput.members[name] = AWS.util.copy(member);
            // update location and locationName
            if (!member.location || member.location === 'body') {
                modifiedInput.members[name].location = 'querystring';
                modifiedInput.members[name].locationName = name;
            }
        });
        return modifiedInput;
    },

    /**
     * @api private
     */
    convertPostToGet: function convertPostToGet(req) {
        // convert method
        req.httpRequest.method = 'GET';

        var operation = req.service.api.operations[req.operation];
        // get cached operation input first
        var input = this._operations[req.operation];
        if (!input) {
            // modify the original input
            this._operations[req.operation] = input = this.modifyInputMembers(operation.input);
        }

        var uri = rest.generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);

        req.httpRequest.path = uri;
        req.httpRequest.body = '';

        // don't need these headers on a GET request
        delete req.httpRequest.headers['Content-Length'];
        delete req.httpRequest.headers['Content-Type'];
    },

    /**
     * @overload getSynthesizeSpeechUrl(params = {}, [expires = 3600], [callback])
     *   Generate a presigned url for {AWS.Polly.synthesizeSpeech}.
     *   @note You must ensure that you have static or previously resolved
     *     credentials if you call this method synchronously (with no callback),
     *     otherwise it may not properly sign the request. If you cannot guarantee
     *     this (you are using an asynchronous credential provider, i.e., EC2
     *     IAM roles), you should always call this method with an asynchronous
     *     callback.
     *   @param params [map] parameters to pass to the operation. See the {AWS.Polly.synthesizeSpeech}
     *     operation for the expected operation parameters.
     *   @param expires [Integer] (3600) the number of seconds to expire the pre-signed URL operation in.
     *     Defaults to 1 hour.
     *   @return [string] if called synchronously (with no callback), returns the signed URL.
     *   @return [null] nothing is returned if a callback is provided.
     *   @callback callback function (err, url)
     *     If a callback is supplied, it is called when a signed URL has been generated.
     *     @param err [Error] the error object returned from the presigner.
     *     @param url [String] the signed URL.
     *   @see AWS.Polly.synthesizeSpeech
     */
    getSynthesizeSpeechUrl: function getSynthesizeSpeechUrl(params, expires, callback) {
        var self = this;
        var request = this.service.makeRequest('synthesizeSpeech', params);
        // remove existing build listeners
        request.removeAllListeners('build');
        request.on('build', function(req) {
            self.convertPostToGet(req);
        });
        return request.presign(expires, callback);
    }
});


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);

function QueryParamSerializer() {
}

QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
  serializeStructure('', params, shape, fn);
};

function ucfirst(shape) {
  if (shape.isQueryName || shape.api.protocol !== 'ec2') {
    return shape.name;
  } else {
    return shape.name[0].toUpperCase() + shape.name.substr(1);
  }
}

function serializeStructure(prefix, struct, rules, fn) {
  util.each(rules.members, function(name, member) {
    var value = struct[name];
    if (value === null || value === undefined) return;

    var memberName = ucfirst(member);
    memberName = prefix ? prefix + '.' + memberName : memberName;
    serializeMember(memberName, value, member, fn);
  });
}

function serializeMap(name, map, rules, fn) {
  var i = 1;
  util.each(map, function (key, value) {
    var prefix = rules.flattened ? '.' : '.entry.';
    var position = prefix + (i++) + '.';
    var keyName = position + (rules.key.name || 'key');
    var valueName = position + (rules.value.name || 'value');
    serializeMember(name + keyName, key, rules.key, fn);
    serializeMember(name + valueName, value, rules.value, fn);
  });
}

function serializeList(name, list, rules, fn) {
  var memberRules = rules.member || {};

  if (list.length === 0) {
    fn.call(this, name, null);
    return;
  }

  util.arrayEach(list, function (v, n) {
    var suffix = '.' + (n + 1);
    if (rules.api.protocol === 'ec2') {
      // Do nothing for EC2
      suffix = suffix + ''; // make linter happy
    } else if (rules.flattened) {
      if (memberRules.name) {
        var parts = name.split('.');
        parts.pop();
        parts.push(ucfirst(memberRules));
        name = parts.join('.');
      }
    } else {
      suffix = '.' + (memberRules.name ? memberRules.name : 'member') + suffix;
    }
    serializeMember(name + suffix, v, memberRules, fn);
  });
}

function serializeMember(name, value, rules, fn) {
  if (value === null || value === undefined) return;
  if (rules.type === 'structure') {
    serializeStructure(name, value, rules, fn);
  } else if (rules.type === 'list') {
    serializeList(name, value, rules, fn);
  } else if (rules.type === 'map') {
    serializeMap(name, value, rules, fn);
  } else {
    fn(name, rules.toWireFormat(value).toString());
  }
}

module.exports = QueryParamSerializer;


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 */
var service = null;

/**
 * @api private
 */
var api = {
    signatureVersion: 'v4',
    signingName: 'rds-db'
};

/**
 * @api private
 */
var requiredAuthTokenOptions = {
    region: 'string',
    hostname: 'string',
    port: 'number',
    username: 'string'
};

/**
 * A signer object can be used to generate an auth token to a database.
 */
AWS.RDS.Signer = AWS.util.inherit({
    /**
     * Creates a signer object can be used to generate an auth token.
     *
     * @option options credentials [AWS.Credentials] the AWS credentials
     *   to sign requests with. Uses the default credential provider chain
     *   if not specified.
     * @option options hostname [String] the hostname of the database to connect to.
     * @option options port [Number] the port number the database is listening on.
     * @option options region [String] the region the database is located in.
     * @option options username [String] the username to login as.
     * @example Passing in options to constructor
     *   var signer = new AWS.RDS.Signer({
     *     credentials: new AWS.SharedIniFileCredentials({profile: 'default'}),
     *     region: 'us-east-1',
     *     hostname: 'db.us-east-1.rds.amazonaws.com',
     *     port: 8000,
     *     username: 'name'
     *   });
     */
    constructor: function Signer(options) {
        this.options = options || {};
    },

    /**
     * @api private
     * Strips the protocol from a url.
     */
    convertUrlToAuthToken: function convertUrlToAuthToken(url) {
        // we are always using https as the protocol
        var protocol = 'https://';
        if (url.indexOf(protocol) === 0) {
            return url.substring(protocol.length);
        }
    },

    /**
     * @overload getAuthToken(options = {}, [callback])
     *   Generate an auth token to a database.
     *   @note You must ensure that you have static or previously resolved
     *     credentials if you call this method synchronously (with no callback),
     *     otherwise it may not properly sign the request. If you cannot guarantee
     *     this (you are using an asynchronous credential provider, i.e., EC2
     *     IAM roles), you should always call this method with an asynchronous
     *     callback.
     *
     *   @param options [map] The fields to use when generating an auth token.
     *     Any options specified here will be merged on top of any options passed
     *     to AWS.RDS.Signer:
     *
     *     * **credentials** (AWS.Credentials) &mdash; the AWS credentials
     *         to sign requests with. Uses the default credential provider chain
     *         if not specified.
     *     * **hostname** (String) &mdash; the hostname of the database to connect to.
     *     * **port** (Number) &mdash; the port number the database is listening on.
     *     * **region** (String) &mdash; the region the database is located in.
     *     * **username** (String) &mdash; the username to login as.
     *   @return [String] if called synchronously (with no callback), returns the
     *     auth token.
     *   @return [null] nothing is returned if a callback is provided.
     *   @callback callback function (err, token)
     *     If a callback is supplied, it is called when an auth token has been generated.
     *     @param err [Error] the error object returned from the signer.
     *     @param token [String] the auth token.
     *
     *   @example Generating an auth token synchronously
     *     var signer = new AWS.RDS.Signer({
     *       // configure options
     *       region: 'us-east-1',
     *       username: 'default',
     *       hostname: 'db.us-east-1.amazonaws.com',
     *       port: 8000
     *     });
     *     var token = signer.getAuthToken({
     *       // these options are merged with those defined when creating the signer, overriding in the case of a duplicate option
     *       // credentials are not specified here or when creating the signer, so default credential provider will be used
     *       username: 'test' // overriding username
     *     });
     *   @example Generating an auth token asynchronously
     *     var signer = new AWS.RDS.Signer({
     *       // configure options
     *       region: 'us-east-1',
     *       username: 'default',
     *       hostname: 'db.us-east-1.amazonaws.com',
     *       port: 8000
     *     });
     *     signer.getAuthToken({
     *       // these options are merged with those defined when creating the signer, overriding in the case of a duplicate option
     *       // credentials are not specified here or when creating the signer, so default credential provider will be used
     *       username: 'test' // overriding username
     *     }, function(err, token) {
     *       if (err) {
     *         // handle error
     *       } else {
     *         // use token
     *       }
     *     });
     *
     */
    getAuthToken: function getAuthToken(options, callback) {
        if (typeof options === 'function' && callback === undefined) {
            callback = options;
            options = {};
        }
        var self = this;
        var hasCallback = typeof callback === 'function';
        // merge options with existing options
        options = AWS.util.merge(this.options, options);
        // validate options
        var optionsValidation = this.validateAuthTokenOptions(options);
        if (optionsValidation !== true) {
            if (hasCallback) {
                return callback(optionsValidation, null);
            }
            throw optionsValidation;
        }

        // 15 minutes
        var expires = 900;
        // create service to generate a request from
        var serviceOptions = {
            region: options.region,
            endpoint: new AWS.Endpoint(options.hostname + ':' + options.port),
            paramValidation: false,
            signatureVersion: 'v4'
        };
        if (options.credentials) {
            serviceOptions.credentials = options.credentials;
        }
        service = new AWS.Service(serviceOptions);
        // ensure the SDK is using sigv4 signing (config is not enough)
        service.api = api;

        var request = service.makeRequest();
        // add listeners to request to properly build auth token
        this.modifyRequestForAuthToken(request, options);

        if (hasCallback) {
            request.presign(expires, function(err, url) {
                if (url) {
                    url = self.convertUrlToAuthToken(url);
                }
                callback(err, url);
            });
        } else {
            var url = request.presign(expires);
            return this.convertUrlToAuthToken(url);
        }
    },

    /**
     * @api private
     * Modifies a request to allow the presigner to generate an auth token.
     */
    modifyRequestForAuthToken: function modifyRequestForAuthToken(request, options) {
        request.on('build', request.buildAsGet);
        var httpRequest = request.httpRequest;
        httpRequest.body = AWS.util.queryParamsToString({
            Action: 'connect',
            DBUser: options.username
        });
    },

    /**
     * @api private
     * Validates that the options passed in contain all the keys with values of the correct type that
     *   are needed to generate an auth token.
     */
    validateAuthTokenOptions: function validateAuthTokenOptions(options) {
        // iterate over all keys in options
        var message = '';
        options = options || {};
        for (var key in requiredAuthTokenOptions) {
            if (!Object.prototype.hasOwnProperty.call(requiredAuthTokenOptions, key)) {
                continue;
            }
            if (typeof options[key] !== requiredAuthTokenOptions[key]) {
                message += 'option \'' + key + '\' should have been type \'' + requiredAuthTokenOptions[key] + '\', was \'' + typeof options[key] + '\'.\n';
            }
        }
        if (message.length) {
            return AWS.util.error(new Error(), {
                code: 'InvalidParameter',
                message: message
            });
        }
        return true;
    }
});

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var regionConfig = __webpack_require__(502);

function generateRegionPrefix(region) {
  if (!region) return null;

  var parts = region.split('-');
  if (parts.length < 3) return null;
  return parts.slice(0, parts.length - 2).join('-') + '-*';
}

function derivedKeys(service) {
  var region = service.config.region;
  var regionPrefix = generateRegionPrefix(region);
  var endpointPrefix = service.api.endpointPrefix;

  return [
    [region, endpointPrefix],
    [regionPrefix, endpointPrefix],
    [region, '*'],
    [regionPrefix, '*'],
    ['*', endpointPrefix],
    ['*', '*']
  ].map(function(item) {
    return item[0] && item[1] ? item.join('/') : null;
  });
}

function applyConfig(service, config) {
  util.each(config, function(key, value) {
    if (key === 'globalEndpoint') return;
    if (service.config[key] === undefined || service.config[key] === null) {
      service.config[key] = value;
    }
  });
}

function configureEndpoint(service) {
  var keys = derivedKeys(service);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!key) continue;

    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {
      var config = regionConfig.rules[key];
      if (typeof config === 'string') {
        config = regionConfig.patterns[config];
      }

      // set dualstack endpoint
      if (service.config.useDualstack && util.isDualstackAvailable(service)) {
        config = util.copy(config);
        config.endpoint = '{service}.dualstack.{region}.amazonaws.com';
      }

      // set global endpoint
      service.isGlobalEndpoint = !!config.globalEndpoint;

      // signature version
      if (!config.signatureVersion) config.signatureVersion = 'v4';

      // merge config
      applyConfig(service, config);
      return;
    }
  }
}

module.exports = configureEndpoint;


/***/ }),
/* 502 */
/***/ (function(module, exports) {

module.exports = {"rules":{"*/*":{"endpoint":"{service}.{region}.amazonaws.com"},"cn-*/*":{"endpoint":"{service}.{region}.amazonaws.com.cn"},"*/budgets":"globalSSL","*/cloudfront":"globalSSL","*/iam":"globalSSL","*/sts":"globalSSL","*/importexport":{"endpoint":"{service}.amazonaws.com","signatureVersion":"v2","globalEndpoint":true},"*/route53":{"endpoint":"https://{service}.amazonaws.com","signatureVersion":"v3https","globalEndpoint":true},"*/waf":"globalSSL","us-gov-*/iam":"globalGovCloud","us-gov-*/sts":{"endpoint":"{service}.{region}.amazonaws.com"},"us-gov-west-1/s3":"s3dash","us-west-1/s3":"s3dash","us-west-2/s3":"s3dash","eu-west-1/s3":"s3dash","ap-southeast-1/s3":"s3dash","ap-southeast-2/s3":"s3dash","ap-northeast-1/s3":"s3dash","sa-east-1/s3":"s3dash","us-east-1/s3":{"endpoint":"{service}.amazonaws.com","signatureVersion":"s3"},"us-east-1/sdb":{"endpoint":"{service}.amazonaws.com","signatureVersion":"v2"},"*/sdb":{"endpoint":"{service}.{region}.amazonaws.com","signatureVersion":"v2"}},"patterns":{"globalSSL":{"endpoint":"https://{service}.amazonaws.com","globalEndpoint":true},"globalGovCloud":{"endpoint":"{service}.us-gov.amazonaws.com"},"s3dash":{"endpoint":"{service}-{region}.amazonaws.com","signatureVersion":"s3"}}}

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var AcceptorStateMachine = __webpack_require__(531);
var inherit = AWS.util.inherit;
var domain = AWS.util.domain;
var jmespath = __webpack_require__(34);

/**
 * @api private
 */
var hardErrorStates = {success: 1, error: 1, complete: 1};

function isTerminalState(machine) {
  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
}

var fsm = new AcceptorStateMachine();
fsm.setupStates = function() {
  var transition = function(_, done) {
    var self = this;
    self._haltHandlersOnError = false;

    self.emit(self._asm.currentState, function(err) {
      if (err) {
        if (isTerminalState(self)) {
          if (domain && self.domain instanceof domain.Domain) {
            err.domainEmitter = self;
            err.domain = self.domain;
            err.domainThrown = false;
            self.domain.emit('error', err);
          } else {
            throw err;
          }
        } else {
          self.response.error = err;
          done(err);
        }
      } else {
        done(self.response.error);
      }
    });

  };

  this.addState('validate', 'build', 'error', transition);
  this.addState('build', 'afterBuild', 'restart', transition);
  this.addState('afterBuild', 'sign', 'restart', transition);
  this.addState('sign', 'send', 'retry', transition);
  this.addState('retry', 'afterRetry', 'afterRetry', transition);
  this.addState('afterRetry', 'sign', 'error', transition);
  this.addState('send', 'validateResponse', 'retry', transition);
  this.addState('validateResponse', 'extractData', 'extractError', transition);
  this.addState('extractError', 'extractData', 'retry', transition);
  this.addState('extractData', 'success', 'retry', transition);
  this.addState('restart', 'build', 'error', transition);
  this.addState('success', 'complete', 'complete', transition);
  this.addState('error', 'complete', 'complete', transition);
  this.addState('complete', null, null, transition);
};
fsm.setupStates();

/**
 * ## Asynchronous Requests
 *
 * All requests made through the SDK are asynchronous and use a
 * callback interface. Each service method that kicks off a request
 * returns an `AWS.Request` object that you can use to register
 * callbacks.
 *
 * For example, the following service method returns the request
 * object as "request", which can be used to register callbacks:
 *
 * ```javascript
 * // request is an AWS.Request object
 * var request = ec2.describeInstances();
 *
 * // register callbacks on request to retrieve response data
 * request.on('success', function(response) {
 *   console.log(response.data);
 * });
 * ```
 *
 * When a request is ready to be sent, the {send} method should
 * be called:
 *
 * ```javascript
 * request.send();
 * ```
 *
 * Since registered callbacks may or may not be idempotent, requests should only
 * be sent once. To perform the same operation multiple times, you will need to
 * create multiple request objects, each with its own registered callbacks.
 *
 * ## Removing Default Listeners for Events
 *
 * Request objects are built with default listeners for the various events,
 * depending on the service type. In some cases, you may want to remove
 * some built-in listeners to customize behaviour. Doing this requires
 * access to the built-in listener functions, which are exposed through
 * the {AWS.EventListeners.Core} namespace. For instance, you may
 * want to customize the HTTP handler used when sending a request. In this
 * case, you can remove the built-in listener associated with the 'send'
 * event, the {AWS.EventListeners.Core.SEND} listener and add your own.
 *
 * ## Multiple Callbacks and Chaining
 *
 * You can register multiple callbacks on any request object. The
 * callbacks can be registered for different events, or all for the
 * same event. In addition, you can chain callback registration, for
 * example:
 *
 * ```javascript
 * request.
 *   on('success', function(response) {
 *     console.log("Success!");
 *   }).
 *   on('error', function(response) {
 *     console.log("Error!");
 *   }).
 *   on('complete', function(response) {
 *     console.log("Always!");
 *   }).
 *   send();
 * ```
 *
 * The above example will print either "Success! Always!", or "Error! Always!",
 * depending on whether the request succeeded or not.
 *
 * @!attribute httpRequest
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpRequest] the raw HTTP request object
 *     containing request headers and body information
 *     sent by the service.
 *
 * @!attribute startTime
 *   @readonly
 *   @!group Operation Properties
 *   @return [Date] the time that the request started
 *
 * @!group Request Building Events
 *
 * @!event validate(request)
 *   Triggered when a request is being validated. Listeners
 *   should throw an error if the request should not be sent.
 *   @param request [Request] the request object being sent
 *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS
 *   @see AWS.EventListeners.Core.VALIDATE_REGION
 *   @example Ensuring that a certain parameter is set before sending a request
 *     var req = s3.putObject(params);
 *     req.on('validate', function() {
 *       if (!req.params.Body.match(/^Hello\s/)) {
 *         throw new Error('Body must start with "Hello "');
 *       }
 *     });
 *     req.send(function(err, data) { ... });
 *
 * @!event build(request)
 *   Triggered when the request payload is being built. Listeners
 *   should fill the necessary information to send the request
 *   over HTTP.
 *   @param (see AWS.Request~validate)
 *   @example Add a custom HTTP header to a request
 *     var req = s3.putObject(params);
 *     req.on('build', function() {
 *       req.httpRequest.headers['Custom-Header'] = 'value';
 *     });
 *     req.send(function(err, data) { ... });
 *
 * @!event sign(request)
 *   Triggered when the request is being signed. Listeners should
 *   add the correct authentication headers and/or adjust the body,
 *   depending on the authentication mechanism being used.
 *   @param (see AWS.Request~validate)
 *
 * @!group Request Sending Events
 *
 * @!event send(response)
 *   Triggered when the request is ready to be sent. Listeners
 *   should call the underlying transport layer to initiate
 *   the sending of the request.
 *   @param response [Response] the response object
 *   @context [Request] the request object that was sent
 *   @see AWS.EventListeners.Core.SEND
 *
 * @!event retry(response)
 *   Triggered when a request failed and might need to be retried or redirected.
 *   If the response is retryable, the listener should set the
 *   `response.error.retryable` property to `true`, and optionally set
 *   `response.error.retryDelay` to the millisecond delay for the next attempt.
 *   In the case of a redirect, `response.error.redirect` should be set to
 *   `true` with `retryDelay` set to an optional delay on the next request.
 *
 *   If a listener decides that a request should not be retried,
 *   it should set both `retryable` and `redirect` to false.
 *
 *   Note that a retryable error will be retried at most
 *   {AWS.Config.maxRetries} times (based on the service object's config).
 *   Similarly, a request that is redirected will only redirect at most
 *   {AWS.Config.maxRedirects} times.
 *
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @example Adding a custom retry for a 404 response
 *     request.on('retry', function(response) {
 *       // this resource is not yet available, wait 10 seconds to get it again
 *       if (response.httpResponse.statusCode === 404 && response.error) {
 *         response.error.retryable = true;   // retry this error
 *         response.error.retryDelay = 10000; // wait 10 seconds
 *       }
 *     });
 *
 * @!group Data Parsing Events
 *
 * @!event extractError(response)
 *   Triggered on all non-2xx requests so that listeners can extract
 *   error details from the response body. Listeners to this event
 *   should set the `response.error` property.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event extractData(response)
 *   Triggered in successful requests to allow listeners to
 *   de-serialize the response body into `response.data`.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group Completion Events
 *
 * @!event success(response)
 *   Triggered when the request completed successfully.
 *   `response.data` will contain the response data and
 *   `response.error` will be null.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event error(error, response)
 *   Triggered when an error occurs at any point during the
 *   request. `response.error` will contain details about the error
 *   that occurred. `response.data` will be null.
 *   @param error [Error] the error object containing details about
 *     the error that occurred.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event complete(response)
 *   Triggered whenever a request cycle completes. `response.error`
 *   should be checked, since the request may have failed.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group HTTP Events
 *
 * @!event httpHeaders(statusCode, headers, response, statusMessage)
 *   Triggered when headers are sent by the remote server
 *   @param statusCode [Integer] the HTTP response code
 *   @param headers [map<String,String>] the response headers
 *   @param (see AWS.Request~send)
 *   @param statusMessage [String] A status message corresponding to the HTTP
 *                                 response code
 *   @context (see AWS.Request~send)
 *
 * @!event httpData(chunk, response)
 *   Triggered when data is sent by the remote server
 *   @param chunk [Buffer] the buffer data containing the next data chunk
 *     from the server
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @see AWS.EventListeners.Core.HTTP_DATA
 *
 * @!event httpUploadProgress(progress, response)
 *   Triggered when the HTTP request has uploaded more data
 *   @param progress [map] An object containing the `loaded` and `total` bytes
 *     of the request.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @note This event will not be emitted in Node.js 0.8.x.
 *
 * @!event httpDownloadProgress(progress, response)
 *   Triggered when the HTTP request has downloaded more data
 *   @param progress [map] An object containing the `loaded` and `total` bytes
 *     of the request.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @note This event will not be emitted in Node.js 0.8.x.
 *
 * @!event httpError(error, response)
 *   Triggered when the HTTP request failed
 *   @param error [Error] the error object that was thrown
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event httpDone(response)
 *   Triggered when the server is finished sending data
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @see AWS.Response
 */
AWS.Request = inherit({

  /**
   * Creates a request for an operation on a given service with
   * a set of input parameters.
   *
   * @param service [AWS.Service] the service to perform the operation on
   * @param operation [String] the operation to perform on the service
   * @param params [Object] parameters to send to the operation.
   *   See the operation's documentation for the format of the
   *   parameters.
   */
  constructor: function Request(service, operation, params) {
    var endpoint = service.endpoint;
    var region = service.config.region;
    var customUserAgent = service.config.customUserAgent;

    // global endpoints sign as us-east-1
    if (service.isGlobalEndpoint) region = 'us-east-1';

    this.domain = domain && domain.active;
    this.service = service;
    this.operation = operation;
    this.params = params || {};
    this.httpRequest = new AWS.HttpRequest(endpoint, region);
    this.httpRequest.appendToUserAgent(customUserAgent);
    this.startTime = service.getSkewCorrectedDate();

    this.response = new AWS.Response(this);
    this._asm = new AcceptorStateMachine(fsm.states, 'validate');
    this._haltHandlersOnError = false;

    AWS.SequentialExecutor.call(this);
    this.emit = this.emitEvent;
  },

  /**
   * @!group Sending a Request
   */

  /**
   * @overload send(callback = null)
   *   Sends the request object.
   *
   *   @callback callback function(err, data)
   *     If a callback is supplied, it is called when a response is returned
   *     from the service.
   *     @context [AWS.Request] the request object being sent.
   *     @param err [Error] the error object returned from the request.
   *       Set to `null` if the request is successful.
   *     @param data [Object] the de-serialized data returned from
   *       the request. Set to `null` if a request error occurs.
   *   @example Sending a request with a callback
   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     request.send(function(err, data) { console.log(err, data); });
   *   @example Sending a request with no callback (using event handlers)
   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     request.on('complete', function(response) { ... }); // register a callback
   *     request.send();
   */
  send: function send(callback) {
    if (callback) {
      // append to user agent
      this.httpRequest.appendToUserAgent('callback');
      this.on('complete', function (resp) {
        callback.call(resp, resp.error, resp.data);
      });
    }
    this.runTo();

    return this.response;
  },

  /**
   * @!method  promise()
   *   Sends the request and returns a 'thenable' promise.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function(data)
   *     Called if the promise is fulfilled.
   *     @param data [Object] the de-serialized data returned from the request.
   *   @callback rejectedCallback function(error)
   *     Called if the promise is rejected.
   *     @param error [Error] the error object returned from the request.
   *   @return [Promise] A promise that represents the state of the request.
   *   @example Sending a request using promises.
   *     var request = s3.putObject({Bucket: 'bucket', Key: 'key'});
   *     var result = request.promise();
   *     result.then(function(data) { ... }, function(error) { ... });
   */

  /**
   * @api private
   */
  build: function build(callback) {
    return this.runTo('send', callback);
  },

  /**
   * @api private
   */
  runTo: function runTo(state, done) {
    this._asm.runTo(state, done, this);
    return this;
  },

  /**
   * Aborts a request, emitting the error and complete events.
   *
   * @!macro nobrowser
   * @example Aborting a request after sending
   *   var params = {
   *     Bucket: 'bucket', Key: 'key',
   *     Body: new Buffer(1024 * 1024 * 5) // 5MB payload
   *   };
   *   var request = s3.putObject(params);
   *   request.send(function (err, data) {
   *     if (err) console.log("Error:", err.code, err.message);
   *     else console.log(data);
   *   });
   *
   *   // abort request in 1 second
   *   setTimeout(request.abort.bind(request), 1000);
   *
   *   // prints "Error: RequestAbortedError Request aborted by user"
   * @return [AWS.Request] the same request object, for chaining.
   * @since v1.4.0
   */
  abort: function abort() {
    this.removeAllListeners('validateResponse');
    this.removeAllListeners('extractError');
    this.on('validateResponse', function addAbortedError(resp) {
      resp.error = AWS.util.error(new Error('Request aborted by user'), {
         code: 'RequestAbortedError', retryable: false
      });
    });

    if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) { // abort HTTP stream
      this.httpRequest.stream.abort();
      if (this.httpRequest._abortCallback) {
         this.httpRequest._abortCallback();
      } else {
        this.removeAllListeners('send'); // haven't sent yet, so let's not
      }
    }

    return this;
  },

  /**
   * Iterates over each page of results given a pageable request, calling
   * the provided callback with each page of data. After all pages have been
   * retrieved, the callback is called with `null` data.
   *
   * @note This operation can generate multiple requests to a service.
   * @example Iterating over multiple pages of objects in an S3 bucket
   *   var pages = 1;
   *   s3.listObjects().eachPage(function(err, data) {
   *     if (err) return;
   *     console.log("Page", pages++);
   *     console.log(data);
   *   });
   * @example Iterating over multiple pages with an asynchronous callback
   *   s3.listObjects(params).eachPage(function(err, data, done) {
   *     doSomethingAsyncAndOrExpensive(function() {
   *       // The next page of results isn't fetched until done is called
   *       done();
   *     });
   *   });
   * @callback callback function(err, data, [doneCallback])
   *   Called with each page of resulting data from the request. If the
   *   optional `doneCallback` is provided in the function, it must be called
   *   when the callback is complete.
   *
   *   @param err [Error] an error object, if an error occurred.
   *   @param data [Object] a single page of response data. If there is no
   *     more data, this object will be `null`.
   *   @param doneCallback [Function] an optional done callback. If this
   *     argument is defined in the function declaration, it should be called
   *     when the next page is ready to be retrieved. This is useful for
   *     controlling serial pagination across asynchronous operations.
   *   @return [Boolean] if the callback returns `false`, pagination will
   *     stop.
   *
   * @see AWS.Request.eachItem
   * @see AWS.Response.nextPage
   * @since v1.4.0
   */
  eachPage: function eachPage(callback) {
    // Make all callbacks async-ish
    callback = AWS.util.fn.makeAsync(callback, 3);

    function wrappedCallback(response) {
      callback.call(response, response.error, response.data, function (result) {
        if (result === false) return;

        if (response.hasNextPage()) {
          response.nextPage().on('complete', wrappedCallback).send();
        } else {
          callback.call(response, null, null, AWS.util.fn.noop);
        }
      });
    }

    this.on('complete', wrappedCallback).send();
  },

  /**
   * Enumerates over individual items of a request, paging the responses if
   * necessary.
   *
   * @api experimental
   * @since v1.4.0
   */
  eachItem: function eachItem(callback) {
    var self = this;
    function wrappedCallback(err, data) {
      if (err) return callback(err, null);
      if (data === null) return callback(null, null);

      var config = self.service.paginationConfig(self.operation);
      var resultKey = config.resultKey;
      if (Array.isArray(resultKey)) resultKey = resultKey[0];
      var items = jmespath.search(data, resultKey);
      var continueIteration = true;
      AWS.util.arrayEach(items, function(item) {
        continueIteration = callback(null, item);
        if (continueIteration === false) {
          return AWS.util.abort;
        }
      });
      return continueIteration;
    }

    this.eachPage(wrappedCallback);
  },

  /**
   * @return [Boolean] whether the operation can return multiple pages of
   *   response data.
   * @see AWS.Response.eachPage
   * @since v1.4.0
   */
  isPageable: function isPageable() {
    return this.service.paginationConfig(this.operation) ? true : false;
  },

  /**
   * Sends the request and converts the request object into a readable stream
   * that can be read from or piped into a writable stream.
   *
   * @note The data read from a readable stream contains only
   *   the raw HTTP body contents.
   * @example Manually reading from a stream
   *   request.createReadStream().on('data', function(data) {
   *     console.log("Got data:", data.toString());
   *   });
   * @example Piping a request body into a file
   *   var out = fs.createWriteStream('/path/to/outfile.jpg');
   *   s3.service.getObject(params).createReadStream().pipe(out);
   * @return [Stream] the readable stream object that can be piped
   *   or read from (by registering 'data' event listeners).
   * @!macro nobrowser
   */
  createReadStream: function createReadStream() {
    var streams = AWS.util.stream;
    var req = this;
    var stream = null;

    if (AWS.HttpClient.streamsApiVersion === 2) {
      stream = new streams.PassThrough();
      process.nextTick(function() { req.send(); });
    } else {
      stream = new streams.Stream();
      stream.readable = true;

      stream.sent = false;
      stream.on('newListener', function(event) {
        if (!stream.sent && event === 'data') {
          stream.sent = true;
          process.nextTick(function() { req.send(); });
        }
      });
    }

    this.on('error', function(err) {
      stream.emit('error', err);
    });

    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {
      if (statusCode < 300) {
        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);
        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);
        req.on('httpError', function streamHttpError(error) {
          resp.error = error;
          resp.error.retryable = false;
        });

        var shouldCheckContentLength = false;
        var expectedLen;
        if (req.httpRequest.method !== 'HEAD') {
          expectedLen = parseInt(headers['content-length'], 10);
        }
        if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {
          shouldCheckContentLength = true;
          var receivedLen = 0;
        }

        var checkContentLengthAndEmit = function checkContentLengthAndEmit() {
          if (shouldCheckContentLength && receivedLen !== expectedLen) {
            stream.emit('error', AWS.util.error(
              new Error('Stream content length mismatch. Received ' +
                receivedLen + ' of ' + expectedLen + ' bytes.'),
              { code: 'StreamContentLengthMismatch' }
            ));
          } else if (AWS.HttpClient.streamsApiVersion === 2) {
            stream.end();
          } else {
            stream.emit('end');
          }
        };

        var httpStream = resp.httpResponse.createUnbufferedStream();

        if (AWS.HttpClient.streamsApiVersion === 2) {
          if (shouldCheckContentLength) {
            var lengthAccumulator = new streams.PassThrough();
            lengthAccumulator._write = function(chunk) {
              if (chunk && chunk.length) {
                receivedLen += chunk.length;
              }
              return streams.PassThrough.prototype._write.apply(this, arguments);
            };

            lengthAccumulator.on('end', checkContentLengthAndEmit);
            stream.on('error', function(err) {
              shouldCheckContentLength = false;
              httpStream.unpipe(lengthAccumulator);
              lengthAccumulator.emit('end');
              lengthAccumulator.end();
            });
            httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });
          } else {
            httpStream.pipe(stream);
          }
        } else {

          if (shouldCheckContentLength) {
            httpStream.on('data', function(arg) {
              if (arg && arg.length) {
                receivedLen += arg.length;
              }
            });
          }

          httpStream.on('data', function(arg) {
            stream.emit('data', arg);
          });
          httpStream.on('end', checkContentLengthAndEmit);
        }

        httpStream.on('error', function(err) {
          shouldCheckContentLength = false;
          stream.emit('error', err);
        });
      }
    });

    return stream;
  },

  /**
   * @param [Array,Response] args This should be the response object,
   *   or an array of args to send to the event.
   * @api private
   */
  emitEvent: function emit(eventName, args, done) {
    if (typeof args === 'function') { done = args; args = null; }
    if (!done) done = function() { };
    if (!args) args = this.eventParameters(eventName, this.response);

    var origEmit = AWS.SequentialExecutor.prototype.emit;
    origEmit.call(this, eventName, args, function (err) {
      if (err) this.response.error = err;
      done.call(this, err);
    });
  },

  /**
   * @api private
   */
  eventParameters: function eventParameters(eventName) {
    switch (eventName) {
      case 'restart':
      case 'validate':
      case 'sign':
      case 'build':
      case 'afterValidate':
      case 'afterBuild':
        return [this];
      case 'error':
        return [this.response.error, this.response];
      default:
        return [this.response];
    }
  },

  /**
   * @api private
   */
  presign: function presign(expires, callback) {
    if (!callback && typeof expires === 'function') {
      callback = expires;
      expires = null;
    }
    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);
  },

  /**
   * @api private
   */
  isPresigned: function isPresigned() {
    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, 'presigned-expires');
  },

  /**
   * @api private
   */
  toUnauthenticated: function toUnauthenticated() {
    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
    this.removeListener('sign', AWS.EventListeners.Core.SIGN);
    return this;
  },

  /**
   * @api private
   */
  toGet: function toGet() {
    if (this.service.api.protocol === 'query' ||
        this.service.api.protocol === 'ec2') {
      this.removeListener('build', this.buildAsGet);
      this.addListener('build', this.buildAsGet);
    }
    return this;
  },

  /**
   * @api private
   */
  buildAsGet: function buildAsGet(request) {
    request.httpRequest.method = 'GET';
    request.httpRequest.path = request.service.endpoint.path +
                               '?' + request.httpRequest.body;
    request.httpRequest.body = '';

    // don't need these headers on a GET request
    delete request.httpRequest.headers['Content-Length'];
    delete request.httpRequest.headers['Content-Type'];
  },

  /**
   * @api private
   */
  haltHandlersOnError: function haltHandlersOnError() {
    this._haltHandlersOnError = true;
  }
});

/**
 * @api private
 */
AWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.promise = function promise() {
    var self = this;
    // append to user agent
    this.httpRequest.appendToUserAgent('promise');
    return new PromiseDependency(function(resolve, reject) {
      self.on('complete', function(resp) {
        if (resp.error) {
          reject(resp.error);
        } else {
          // define $response property so that it is not enumberable
          // this prevents circular reference errors when stringifying the JSON object
          resolve(Object.defineProperty(
            resp.data || {},
            '$response',
            {value: resp}
          ));
        }
      });
      self.runTo();
    });
  };
};

/**
 * @api private
 */
AWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.promise;
};

AWS.util.addPromises(AWS.Request);

AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;
var jmespath = __webpack_require__(34);

/**
 * @api private
 */
function CHECK_ACCEPTORS(resp) {
  var waiter = resp.request._waiter;
  var acceptors = waiter.config.acceptors;
  var acceptorMatched = false;
  var state = 'retry';

  acceptors.forEach(function(acceptor) {
    if (!acceptorMatched) {
      var matcher = waiter.matchers[acceptor.matcher];
      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
        acceptorMatched = true;
        state = acceptor.state;
      }
    }
  });

  if (!acceptorMatched && resp.error) state = 'failure';

  if (state === 'success') {
    waiter.setSuccess(resp);
  } else {
    waiter.setError(resp, state === 'retry');
  }
}

/**
 * @api private
 */
AWS.ResourceWaiter = inherit({
  /**
   * Waits for a given state on a service object
   * @param service [Service] the service object to wait on
   * @param state [String] the state (defined in waiter configuration) to wait
   *   for.
   * @example Create a waiter for running EC2 instances
   *   var ec2 = new AWS.EC2;
   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');
   */
  constructor: function constructor(service, state) {
    this.service = service;
    this.state = state;
    this.loadWaiterConfig(this.state);
  },

  service: null,

  state: null,

  config: null,

  matchers: {
    path: function(resp, expected, argument) {
      try {
        var result = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }

      return jmespath.strictDeepEqual(result,expected);
    },

    pathAll: function(resp, expected, argument) {
      try {
        var results = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }

      if (!Array.isArray(results)) results = [results];
      var numResults = results.length;
      if (!numResults) return false;
      for (var ind = 0 ; ind < numResults; ind++) {
        if (!jmespath.strictDeepEqual(results[ind], expected)) {
          return false;
        }
      }
      return true;
    },

    pathAny: function(resp, expected, argument) {
      try {
        var results = jmespath.search(resp.data, argument);
      } catch (err) {
        return false;
      }

      if (!Array.isArray(results)) results = [results];
      var numResults = results.length;
      for (var ind = 0 ; ind < numResults; ind++) {
        if (jmespath.strictDeepEqual(results[ind], expected)) {
          return true;
        }
      }
      return false;
    },

    status: function(resp, expected) {
      var statusCode = resp.httpResponse.statusCode;
      return (typeof statusCode === 'number') && (statusCode === expected);
    },

    error: function(resp, expected) {
      if (typeof expected === 'string' && resp.error) {
        return expected === resp.error.code;
      }
      // if expected is not string, can be boolean indicating presence of error
      return expected === !!resp.error;
    }
  },

  listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {
    add('RETRY_CHECK', 'retry', function(resp) {
      var waiter = resp.request._waiter;
      if (resp.error && resp.error.code === 'ResourceNotReady') {
        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;
      }
    });

    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);

    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);
  }),

  /**
   * @return [AWS.Request]
   */
  wait: function wait(params, callback) {
    if (typeof params === 'function') {
      callback = params; params = undefined;
    }

    if (params && params.$waiter) {
      params = AWS.util.copy(params);
      if (typeof params.$waiter.delay === 'number') {
        this.config.delay = params.$waiter.delay;
      }
      if (typeof params.$waiter.maxAttempts === 'number') {
        this.config.maxAttempts = params.$waiter.maxAttempts;
      }
      delete params.$waiter;
    }

    var request = this.service.makeRequest(this.config.operation, params);
    request._waiter = this;
    request.response.maxRetries = this.config.maxAttempts;
    request.addListeners(this.listeners);

    if (callback) request.send(callback);
    return request;
  },

  setSuccess: function setSuccess(resp) {
    resp.error = null;
    resp.data = resp.data || {};
    resp.request.removeAllListeners('extractData');
  },

  setError: function setError(resp, retryable) {
    resp.data = null;
    resp.error = AWS.util.error(resp.error || new Error(), {
      code: 'ResourceNotReady',
      message: 'Resource is not in the state ' + this.state,
      retryable: retryable
    });
  },

  /**
   * Loads waiter configuration from API configuration
   *
   * @api private
   */
  loadWaiterConfig: function loadWaiterConfig(state) {
    if (!this.service.api.waiters[state]) {
      throw new AWS.util.error(new Error(), {
        code: 'StateNotFoundError',
        message: 'State ' + state + ' not found.'
      });
    }

    this.config = AWS.util.copy(this.service.api.waiters[state]);
  }
});


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;
var jmespath = __webpack_require__(34);

/**
 * This class encapsulates the response information
 * from a service request operation sent through {AWS.Request}.
 * The response object has two main properties for getting information
 * back from a request:
 *
 * ## The `data` property
 *
 * The `response.data` property contains the serialized object data
 * retrieved from the service request. For instance, for an
 * Amazon DynamoDB `listTables` method call, the response data might
 * look like:
 *
 * ```
 * > resp.data
 * { TableNames:
 *    [ 'table1', 'table2', ... ] }
 * ```
 *
 * The `data` property can be null if an error occurs (see below).
 *
 * ## The `error` property
 *
 * In the event of a service error (or transfer error), the
 * `response.error` property will be filled with the given
 * error data in the form:
 *
 * ```
 * { code: 'SHORT_UNIQUE_ERROR_CODE',
 *   message: 'Some human readable error message' }
 * ```
 *
 * In the case of an error, the `data` property will be `null`.
 * Note that if you handle events that can be in a failure state,
 * you should always check whether `response.error` is set
 * before attempting to access the `response.data` property.
 *
 * @!attribute data
 *   @readonly
 *   @!group Data Properties
 *   @note Inside of a {AWS.Request~httpData} event, this
 *     property contains a single raw packet instead of the
 *     full de-serialized service response.
 *   @return [Object] the de-serialized response data
 *     from the service.
 *
 * @!attribute error
 *   An structure containing information about a service
 *   or networking error.
 *   @readonly
 *   @!group Data Properties
 *   @note This attribute is only filled if a service or
 *     networking error occurs.
 *   @return [Error]
 *     * code [String] a unique short code representing the
 *       error that was emitted.
 *     * message [String] a longer human readable error message
 *     * retryable [Boolean] whether the error message is
 *       retryable.
 *     * statusCode [Numeric] in the case of a request that reached the service,
 *       this value contains the response status code.
 *     * time [Date] the date time object when the error occurred.
 *     * hostname [String] set when a networking error occurs to easily
 *       identify the endpoint of the request.
 *     * region [String] set when a networking error occurs to easily
 *       identify the region of the request.
 *
 * @!attribute requestId
 *   @readonly
 *   @!group Data Properties
 *   @return [String] the unique request ID associated with the response.
 *     Log this value when debugging requests for AWS support.
 *
 * @!attribute retryCount
 *   @readonly
 *   @!group Operation Properties
 *   @return [Integer] the number of retries that were
 *     attempted before the request was completed.
 *
 * @!attribute redirectCount
 *   @readonly
 *   @!group Operation Properties
 *   @return [Integer] the number of redirects that were
 *     followed before the request was completed.
 *
 * @!attribute httpResponse
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpResponse] the raw HTTP response object
 *     containing the response headers and body information
 *     from the server.
 *
 * @see AWS.Request
 */
AWS.Response = inherit({

  /**
   * @api private
   */
  constructor: function Response(request) {
    this.request = request;
    this.data = null;
    this.error = null;
    this.retryCount = 0;
    this.redirectCount = 0;
    this.httpResponse = new AWS.HttpResponse();
    if (request) {
      this.maxRetries = request.service.numRetries();
      this.maxRedirects = request.service.config.maxRedirects;
    }
  },

  /**
   * Creates a new request for the next page of response data, calling the
   * callback with the page data if a callback is provided.
   *
   * @callback callback function(err, data)
   *   Called when a page of data is returned from the next request.
   *
   *   @param err [Error] an error object, if an error occurred in the request
   *   @param data [Object] the next page of data, or null, if there are no
   *     more pages left.
   * @return [AWS.Request] the request object for the next page of data
   * @return [null] if no callback is provided and there are no pages left
   *   to retrieve.
   * @since v1.4.0
   */
  nextPage: function nextPage(callback) {
    var config;
    var service = this.request.service;
    var operation = this.request.operation;
    try {
      config = service.paginationConfig(operation, true);
    } catch (e) { this.error = e; }

    if (!this.hasNextPage()) {
      if (callback) callback(this.error, null);
      else if (this.error) throw this.error;
      return null;
    }

    var params = AWS.util.copy(this.request.params);
    if (!this.nextPageTokens) {
      return callback ? callback(null, null) : null;
    } else {
      var inputTokens = config.inputToken;
      if (typeof inputTokens === 'string') inputTokens = [inputTokens];
      for (var i = 0; i < inputTokens.length; i++) {
        params[inputTokens[i]] = this.nextPageTokens[i];
      }
      return service.makeRequest(this.request.operation, params, callback);
    }
  },

  /**
   * @return [Boolean] whether more pages of data can be returned by further
   *   requests
   * @since v1.4.0
   */
  hasNextPage: function hasNextPage() {
    this.cacheNextPageTokens();
    if (this.nextPageTokens) return true;
    if (this.nextPageTokens === undefined) return undefined;
    else return false;
  },

  /**
   * @api private
   */
  cacheNextPageTokens: function cacheNextPageTokens() {
    if (Object.prototype.hasOwnProperty.call(this, 'nextPageTokens')) return this.nextPageTokens;
    this.nextPageTokens = undefined;

    var config = this.request.service.paginationConfig(this.request.operation);
    if (!config) return this.nextPageTokens;

    this.nextPageTokens = null;
    if (config.moreResults) {
      if (!jmespath.search(this.data, config.moreResults)) {
        return this.nextPageTokens;
      }
    }

    var exprs = config.outputToken;
    if (typeof exprs === 'string') exprs = [exprs];
    AWS.util.arrayEach.call(this, exprs, function (expr) {
      var output = jmespath.search(this.data, expr);
      if (output) {
        this.nextPageTokens = this.nextPageTokens || [];
        this.nextPageTokens.push(output);
      }
    });

    return this.nextPageTokens;
  }

});


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var byteLength = AWS.util.string.byteLength;
var Buffer = AWS.util.Buffer;

/**
 * The managed uploader allows for easy and efficient uploading of buffers,
 * blobs, or streams, using a configurable amount of concurrency to perform
 * multipart uploads where possible. This abstraction also enables uploading
 * streams of unknown size due to the use of multipart uploads.
 *
 * To construct a managed upload object, see the {constructor} function.
 *
 * ## Tracking upload progress
 *
 * The managed upload object can also track progress by attaching an
 * 'httpUploadProgress' listener to the upload manager. This event is similar
 * to {AWS.Request~httpUploadProgress} but groups all concurrent upload progress
 * into a single event. See {AWS.S3.ManagedUpload~httpUploadProgress} for more
 * information.
 *
 * ## Handling Multipart Cleanup
 *
 * By default, this class will automatically clean up any multipart uploads
 * when an individual part upload fails. This behavior can be disabled in order
 * to manually handle failures by setting the `leavePartsOnError` configuration
 * option to `true` when initializing the upload object.
 *
 * @!event httpUploadProgress(progress)
 *   Triggered when the uploader has uploaded more data.
 *   @note The `total` property may not be set if the stream being uploaded has
 *     not yet finished chunking. In this case the `total` will be undefined
 *     until the total stream size is known.
 *   @note This event will not be emitted in Node.js 0.8.x.
 *   @param progress [map] An object containing the `loaded` and `total` bytes
 *     of the request and the `key` of the S3 object. Note that `total` may be undefined until the payload
 *     size is known.
 *   @context (see AWS.Request~send)
 */
AWS.S3.ManagedUpload = AWS.util.inherit({
  /**
   * Creates a managed upload object with a set of configuration options.
   *
   * @note A "Body" parameter is required to be set prior to calling {send}.
   * @option options params [map] a map of parameters to pass to the upload
   *   requests. The "Body" parameter is required to be specified either on
   *   the service or in the params option.
   * @note ContentMD5 should not be provided when using the managed upload object.
   *   Instead, setting "computeChecksums" to true will enable automatic ContentMD5 generation
   *   by the managed upload object.
   * @option options queueSize [Number] (4) the size of the concurrent queue
   *   manager to upload parts in parallel. Set to 1 for synchronous uploading
   *   of parts. Note that the uploader will buffer at most queueSize * partSize
   *   bytes into memory at any given time.
   * @option options partSize [Number] (5mb) the size in bytes for each
   *   individual part to be uploaded. Adjust the part size to ensure the number
   *   of parts does not exceed {maxTotalParts}. See {minPartSize} for the
   *   minimum allowed part size.
   * @option options leavePartsOnError [Boolean] (false) whether to abort the
   *   multipart upload if an error occurs. Set to true if you want to handle
   *   failures manually.
   * @option options service [AWS.S3] an optional S3 service object to use for
   *   requests. This object might have bound parameters used by the uploader.
   * @option options tags [Array<map>] The tags to apply to the uploaded object.
   *   Each tag should have a `Key` and `Value` keys.
   * @example Creating a default uploader for a stream object
   *   var upload = new AWS.S3.ManagedUpload({
   *     params: {Bucket: 'bucket', Key: 'key', Body: stream}
   *   });
   * @example Creating an uploader with concurrency of 1 and partSize of 10mb
   *   var upload = new AWS.S3.ManagedUpload({
   *     partSize: 10 * 1024 * 1024, queueSize: 1,
   *     params: {Bucket: 'bucket', Key: 'key', Body: stream}
   *   });
   * @example Creating an uploader with tags
   *   var upload = new AWS.S3.ManagedUpload({
   *     params: {Bucket: 'bucket', Key: 'key', Body: stream},
   *     tags: [{Key: 'tag1', Value: 'value1'}, {Key: 'tag2', Value: 'value2'}]
   *   });
   * @see send
   */
  constructor: function ManagedUpload(options) {
    var self = this;
    AWS.SequentialExecutor.call(self);
    self.body = null;
    self.sliceFn = null;
    self.callback = null;
    self.parts = {};
    self.completeInfo = [];
    self.fillQueue = function() {
      self.callback(new Error('Unsupported body payload ' + typeof self.body));
    };

    self.configure(options);
  },

  /**
   * @api private
   */
  configure: function configure(options) {
    options = options || {};
    this.partSize = this.minPartSize;

    if (options.queueSize) this.queueSize = options.queueSize;
    if (options.partSize) this.partSize = options.partSize;
    if (options.leavePartsOnError) this.leavePartsOnError = true;
    if (options.tags) {
      if (!Array.isArray(options.tags)) {
        throw new Error('Tags must be specified as an array; ' +
          typeof options.tags + ' provided.');
      }
      this.tags = options.tags;
    }

    if (this.partSize < this.minPartSize) {
      throw new Error('partSize must be greater than ' +
                      this.minPartSize);
    }

    this.service = options.service;
    this.bindServiceObject(options.params);
    this.validateBody();
    this.adjustTotalBytes();
  },

  /**
   * @api private
   */
  leavePartsOnError: false,

  /**
   * @api private
   */
  queueSize: 4,

  /**
   * @api private
   */
  partSize: null,

  /**
   * @readonly
   * @return [Number] the minimum number of bytes for an individual part
   *   upload.
   */
  minPartSize: 1024 * 1024 * 5,

  /**
   * @readonly
   * @return [Number] the maximum allowed number of parts in a multipart upload.
   */
  maxTotalParts: 10000,

  /**
   * Initiates the managed upload for the payload.
   *
   * @callback callback function(err, data)
   *   @param err [Error] an error or null if no error occurred.
   *   @param data [map] The response data from the successful upload:
   *     * `Location` (String) the URL of the uploaded object
   *     * `ETag` (String) the ETag of the uploaded object
   *     * `Bucket` (String) the bucket to which the object was uploaded
   *     * `Key` (String) the key to which the object was uploaded
   * @example Sending a managed upload object
   *   var params = {Bucket: 'bucket', Key: 'key', Body: stream};
   *   var upload = new AWS.S3.ManagedUpload({params: params});
   *   upload.send(function(err, data) {
   *     console.log(err, data);
   *   });
   */
  send: function(callback) {
    var self = this;
    self.failed = false;
    self.callback = callback || function(err) { if (err) throw err; };

    var runFill = true;
    if (self.sliceFn) {
      self.fillQueue = self.fillBuffer;
    } else if (AWS.util.isNode()) {
      var Stream = AWS.util.stream.Stream;
      if (self.body instanceof Stream) {
        runFill = false;
        self.fillQueue = self.fillStream;
        self.partBuffers = [];
        self.body.
          on('error', function(err) { self.cleanup(err); }).
          on('readable', function() { self.fillQueue(); }).
          on('end', function() {
            self.isDoneChunking = true;
            self.numParts = self.totalPartNumbers;
            self.fillQueue.call(self);

            if (self.isDoneChunking && self.totalPartNumbers >= 1 && self.doneParts === self.numParts) {
              self.finishMultiPart();
            }
          });
      }
    }

    if (runFill) self.fillQueue.call(self);
  },

  /**
   * @!method  promise()
   *   Returns a 'thenable' promise.
   *
   *   Two callbacks can be provided to the `then` method on the returned promise.
   *   The first callback will be called if the promise is fulfilled, and the second
   *   callback will be called if the promise is rejected.
   *   @callback fulfilledCallback function(data)
   *     Called if the promise is fulfilled.
   *     @param data [map] The response data from the successful upload:
   *       `Location` (String) the URL of the uploaded object
   *       `ETag` (String) the ETag of the uploaded object
   *       `Bucket` (String) the bucket to which the object was uploaded
   *       `Key` (String) the key to which the object was uploaded
   *   @callback rejectedCallback function(err)
   *     Called if the promise is rejected.
   *     @param err [Error] an error or null if no error occurred.
   *   @return [Promise] A promise that represents the state of the upload request.
   *   @example Sending an upload request using promises.
   *     var upload = s3.upload({Bucket: 'bucket', Key: 'key', Body: stream});
   *     var promise = upload.promise();
   *     promise.then(function(data) { ... }, function(err) { ... });
   */

  /**
   * Aborts a managed upload, including all concurrent upload requests.
   * @note By default, calling this function will cleanup a multipart upload
   *   if one was created. To leave the multipart upload around after aborting
   *   a request, configure `leavePartsOnError` to `true` in the {constructor}.
   * @note Calling {abort} in the browser environment will not abort any requests
   *   that are already in flight. If a multipart upload was created, any parts
   *   not yet uploaded will not be sent, and the multipart upload will be cleaned up.
   * @example Aborting an upload
   *   var params = {
   *     Bucket: 'bucket', Key: 'key',
   *     Body: new Buffer(1024 * 1024 * 25) // 25MB payload
   *   };
   *   var upload = s3.upload(params);
   *   upload.send(function (err, data) {
   *     if (err) console.log("Error:", err.code, err.message);
   *     else console.log(data);
   *   });
   *
   *   // abort request in 1 second
   *   setTimeout(upload.abort.bind(upload), 1000);
   */
  abort: function() {
    this.cleanup(AWS.util.error(new Error('Request aborted by user'), {
      code: 'RequestAbortedError', retryable: false
    }));
  },

  /**
   * @api private
   */
  validateBody: function validateBody() {
    var self = this;
    self.body = self.service.config.params.Body;
    if (typeof self.body === 'string') {
      self.body = new AWS.util.Buffer(self.body);
    } else if (!self.body) {
      throw new Error('params.Body is required');
    }
    self.sliceFn = AWS.util.arraySliceFn(self.body);
  },

  /**
   * @api private
   */
  bindServiceObject: function bindServiceObject(params) {
    params = params || {};
    var self = this;
    // bind parameters to new service object
    if (!self.service) {
      self.service = new AWS.S3({params: params});
    } else {
      var service = self.service;
      var config = AWS.util.copy(service.config);
      config.signatureVersion = service.getSignatureVersion();
      self.service = new service.constructor.__super__(config);
      self.service.config.params =
        AWS.util.merge(self.service.config.params || {}, params);
    }
  },

  /**
   * @api private
   */
  adjustTotalBytes: function adjustTotalBytes() {
    var self = this;
    try { // try to get totalBytes
      self.totalBytes = byteLength(self.body);
    } catch (e) { }

    // try to adjust partSize if we know payload length
    if (self.totalBytes) {
      var newPartSize = Math.ceil(self.totalBytes / self.maxTotalParts);
      if (newPartSize > self.partSize) self.partSize = newPartSize;
    } else {
      self.totalBytes = undefined;
    }
  },

  /**
   * @api private
   */
  isDoneChunking: false,

  /**
   * @api private
   */
  partPos: 0,

  /**
   * @api private
   */
  totalChunkedBytes: 0,

  /**
   * @api private
   */
  totalUploadedBytes: 0,

  /**
   * @api private
   */
  totalBytes: undefined,

  /**
   * @api private
   */
  numParts: 0,

  /**
   * @api private
   */
  totalPartNumbers: 0,

  /**
   * @api private
   */
  activeParts: 0,

  /**
   * @api private
   */
  doneParts: 0,

  /**
   * @api private
   */
  parts: null,

  /**
   * @api private
   */
  completeInfo: null,

  /**
   * @api private
   */
  failed: false,

  /**
   * @api private
   */
  multipartReq: null,

  /**
   * @api private
   */
  partBuffers: null,

  /**
   * @api private
   */
  partBufferLength: 0,

  /**
   * @api private
   */
  fillBuffer: function fillBuffer() {
    var self = this;
    var bodyLen = byteLength(self.body);

    if (bodyLen === 0) {
      self.isDoneChunking = true;
      self.numParts = 1;
      self.nextChunk(self.body);
      return;
    }

    while (self.activeParts < self.queueSize && self.partPos < bodyLen) {
      var endPos = Math.min(self.partPos + self.partSize, bodyLen);
      var buf = self.sliceFn.call(self.body, self.partPos, endPos);
      self.partPos += self.partSize;

      if (byteLength(buf) < self.partSize || self.partPos === bodyLen) {
        self.isDoneChunking = true;
        self.numParts = self.totalPartNumbers + 1;
      }
      self.nextChunk(buf);
    }
  },

  /**
   * @api private
   */
  fillStream: function fillStream() {
    var self = this;
    if (self.activeParts >= self.queueSize) return;

    var buf = self.body.read(self.partSize - self.partBufferLength) ||
              self.body.read();
    if (buf) {
      self.partBuffers.push(buf);
      self.partBufferLength += buf.length;
      self.totalChunkedBytes += buf.length;
    }

    if (self.partBufferLength >= self.partSize) {
      // if we have single buffer we avoid copyfull concat
      var pbuf = self.partBuffers.length === 1 ?
        self.partBuffers[0] : Buffer.concat(self.partBuffers);
      self.partBuffers = [];
      self.partBufferLength = 0;

      // if we have more than partSize, push the rest back on the queue
      if (pbuf.length > self.partSize) {
        var rest = pbuf.slice(self.partSize);
        self.partBuffers.push(rest);
        self.partBufferLength += rest.length;
        pbuf = pbuf.slice(0, self.partSize);
      }

      self.nextChunk(pbuf);
    }

    if (self.isDoneChunking && !self.isDoneSending) {
      // if we have single buffer we avoid copyfull concat
      pbuf = self.partBuffers.length === 1 ?
          self.partBuffers[0] : Buffer.concat(self.partBuffers);
      self.partBuffers = [];
      self.partBufferLength = 0;
      self.totalBytes = self.totalChunkedBytes;
      self.isDoneSending = true;

      if (self.numParts === 0 || pbuf.length > 0) {
        self.numParts++;
        self.nextChunk(pbuf);
      }
    }

    self.body.read(0);
  },

  /**
   * @api private
   */
  nextChunk: function nextChunk(chunk) {
    var self = this;
    if (self.failed) return null;

    var partNumber = ++self.totalPartNumbers;
    if (self.isDoneChunking && partNumber === 1) {
      var params = {Body: chunk};
      if (this.tags) {
        params.Tagging = this.getTaggingHeader();
      }
      var req = self.service.putObject(params);
      req._managedUpload = self;
      req.on('httpUploadProgress', self.progress).send(self.finishSinglePart);
      return null;
    } else if (self.service.config.params.ContentMD5) {
      var err = AWS.util.error(new Error('The Content-MD5 you specified is invalid for multi-part uploads.'), {
        code: 'InvalidDigest', retryable: false
      });

      self.cleanup(err);
      return null;
    }

    if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) {
      return null; // Already uploaded this part.
    }

    self.activeParts++;
    if (!self.service.config.params.UploadId) {

      if (!self.multipartReq) { // create multipart
        self.multipartReq = self.service.createMultipartUpload();
        self.multipartReq.on('success', function(resp) {
          self.service.config.params.UploadId = resp.data.UploadId;
          self.multipartReq = null;
        });
        self.queueChunks(chunk, partNumber);
        self.multipartReq.on('error', function(err) {
          self.cleanup(err);
        });
        self.multipartReq.send();
      } else {
        self.queueChunks(chunk, partNumber);
      }
    } else { // multipart is created, just send
      self.uploadPart(chunk, partNumber);
    }
  },

  /**
   * @api private
   */
  getTaggingHeader: function getTaggingHeader() {
    var kvPairStrings = [];
    for (var i = 0; i < this.tags.length; i++) {
      kvPairStrings.push(AWS.util.uriEscape(this.tags[i].Key) + '=' +
        AWS.util.uriEscape(this.tags[i].Value));
    }

    return kvPairStrings.join('&');
  },

  /**
   * @api private
   */
  uploadPart: function uploadPart(chunk, partNumber) {
    var self = this;

    var partParams = {
      Body: chunk,
      ContentLength: AWS.util.string.byteLength(chunk),
      PartNumber: partNumber
    };

    var partInfo = {ETag: null, PartNumber: partNumber};
    self.completeInfo[partNumber] = partInfo;

    var req = self.service.uploadPart(partParams);
    self.parts[partNumber] = req;
    req._lastUploadedBytes = 0;
    req._managedUpload = self;
    req.on('httpUploadProgress', self.progress);
    req.send(function(err, data) {
      delete self.parts[partParams.PartNumber];
      self.activeParts--;

      if (!err && (!data || !data.ETag)) {
        var message = 'No access to ETag property on response.';
        if (AWS.util.isBrowser()) {
          message += ' Check CORS configuration to expose ETag header.';
        }

        err = AWS.util.error(new Error(message), {
          code: 'ETagMissing', retryable: false
        });
      }
      if (err) return self.cleanup(err);

      partInfo.ETag = data.ETag;
      self.doneParts++;
      if (self.isDoneChunking && self.doneParts === self.numParts) {
        self.finishMultiPart();
      } else {
        self.fillQueue.call(self);
      }
    });
  },

  /**
   * @api private
   */
  queueChunks: function queueChunks(chunk, partNumber) {
    var self = this;
    self.multipartReq.on('success', function() {
      self.uploadPart(chunk, partNumber);
    });
  },

  /**
   * @api private
   */
  cleanup: function cleanup(err) {
    var self = this;
    if (self.failed) return;

    // clean up stream
    if (typeof self.body.removeAllListeners === 'function' &&
        typeof self.body.resume === 'function') {
      self.body.removeAllListeners('readable');
      self.body.removeAllListeners('end');
      self.body.resume();
    }

    // cleanup multipartReq listeners
    if (self.multipartReq) {
      self.multipartReq.removeAllListeners('success');
      self.multipartReq.removeAllListeners('error');
      self.multipartReq.removeAllListeners('complete');
      delete self.multipartReq;
    }

    if (self.service.config.params.UploadId && !self.leavePartsOnError) {
      self.service.abortMultipartUpload().send();
    } else if (self.leavePartsOnError) {
      self.isDoneChunking = false;
    }

    AWS.util.each(self.parts, function(partNumber, part) {
      part.removeAllListeners('complete');
      part.abort();
    });

    self.activeParts = 0;
    self.partPos = 0;
    self.numParts = 0;
    self.totalPartNumbers = 0;
    self.parts = {};
    self.failed = true;
    self.callback(err);
  },

  /**
   * @api private
   */
  finishMultiPart: function finishMultiPart() {
    var self = this;
    var completeParams = { MultipartUpload: { Parts: self.completeInfo.slice(1) } };
    self.service.completeMultipartUpload(completeParams, function(err, data) {
      if (err) {
        return self.cleanup(err);
      }

      if (data && typeof data.Location === 'string') {
        data.Location = data.Location.replace(/%2F/g, '/');
      }

      if (Array.isArray(self.tags)) {
        self.service.putObjectTagging(
          {Tagging: {TagSet: self.tags}},
          function(e, d) {
            if (e) {
              self.callback(e);
            } else {
              self.callback(e, data);
            }
          }
        );
      } else {
        self.callback(err, data);
      }
    });
  },

  /**
   * @api private
   */
  finishSinglePart: function finishSinglePart(err, data) {
    var upload = this.request._managedUpload;
    var httpReq = this.request.httpRequest;
    var endpoint = httpReq.endpoint;
    if (err) return upload.callback(err);
    data.Location =
      [endpoint.protocol, '//', endpoint.host, httpReq.path].join('');
    data.key = this.request.params.Key; // will stay undocumented
    data.Key = this.request.params.Key;
    data.Bucket = this.request.params.Bucket;
    upload.callback(err, data);
  },

  /**
   * @api private
   */
  progress: function progress(info) {
    var upload = this._managedUpload;
    if (this.operation === 'putObject') {
      info.part = 1;
      info.key = this.params.Key;
    } else {
      upload.totalUploadedBytes += info.loaded - this._lastUploadedBytes;
      this._lastUploadedBytes = info.loaded;
      info = {
        loaded: upload.totalUploadedBytes,
        total: upload.totalBytes,
        part: this.params.PartNumber,
        key: this.params.Key
      };
    }
    upload.emit('httpUploadProgress', [info]);
  }
});

AWS.util.mixin(AWS.S3.ManagedUpload, AWS.SequentialExecutor);

/**
 * @api private
 */
AWS.S3.ManagedUpload.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
  this.prototype.promise = AWS.util.promisifyMethod('send', PromiseDependency);
};

/**
 * @api private
 */
AWS.S3.ManagedUpload.deletePromisesFromClass = function deletePromisesFromClass() {
  delete this.prototype.promise;
};

AWS.util.addPromises(AWS.S3.ManagedUpload);

module.exports = AWS.S3.ManagedUpload;


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var Api = __webpack_require__(56);
var regionConfig = __webpack_require__(501);
var inherit = AWS.util.inherit;
var clientCount = 0;

/**
 * The service class representing an AWS service.
 *
 * @abstract
 *
 * @!attribute apiVersions
 *   @return [Array<String>] the list of API versions supported by this service.
 *   @readonly
 */
AWS.Service = inherit({
  /**
   * Create a new service object with a configuration object
   *
   * @param config [map] a map of configuration options
   */
  constructor: function Service(config) {
    if (!this.loadServiceClass) {
      throw AWS.util.error(new Error(),
        'Service must be constructed with `new\' operator');
    }
    var ServiceClass = this.loadServiceClass(config || {});
    if (ServiceClass) {
      var originalConfig = AWS.util.copy(config);
      var svc = new ServiceClass(config);
      Object.defineProperty(svc, '_originalConfig', {
        get: function() { return originalConfig; },
        enumerable: false,
        configurable: true
      });
      svc._clientId = ++clientCount;
      return svc;
    }
    this.initialize(config);
  },

  /**
   * @api private
   */
  initialize: function initialize(config) {
    var svcConfig = AWS.config[this.serviceIdentifier];

    this.config = new AWS.Config(AWS.config);
    if (svcConfig) this.config.update(svcConfig, true);
    if (config) this.config.update(config, true);

    this.validateService();
    if (!this.config.endpoint) regionConfig(this);

    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
    this.setEndpoint(this.config.endpoint);
  },

  /**
   * @api private
   */
  validateService: function validateService() {
  },

  /**
   * @api private
   */
  loadServiceClass: function loadServiceClass(serviceConfig) {
    var config = serviceConfig;
    if (!AWS.util.isEmpty(this.api)) {
      return null;
    } else if (config.apiConfig) {
      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);
    } else if (!this.constructor.services) {
      return null;
    } else {
      config = new AWS.Config(AWS.config);
      config.update(serviceConfig, true);
      var version = config.apiVersions[this.constructor.serviceIdentifier];
      version = version || config.apiVersion;
      return this.getLatestServiceClass(version);
    }
  },

  /**
   * @api private
   */
  getLatestServiceClass: function getLatestServiceClass(version) {
    version = this.getLatestServiceVersion(version);
    if (this.constructor.services[version] === null) {
      AWS.Service.defineServiceApi(this.constructor, version);
    }

    return this.constructor.services[version];
  },

  /**
   * @api private
   */
  getLatestServiceVersion: function getLatestServiceVersion(version) {
    if (!this.constructor.services || this.constructor.services.length === 0) {
      throw new Error('No services defined on ' +
                      this.constructor.serviceIdentifier);
    }

    if (!version) {
      version = 'latest';
    } else if (AWS.util.isType(version, Date)) {
      version = AWS.util.date.iso8601(version).split('T')[0];
    }

    if (Object.hasOwnProperty(this.constructor.services, version)) {
      return version;
    }

    var keys = Object.keys(this.constructor.services).sort();
    var selectedVersion = null;
    for (var i = keys.length - 1; i >= 0; i--) {
      // versions that end in "*" are not available on disk and can be
      // skipped, so do not choose these as selectedVersions
      if (keys[i][keys[i].length - 1] !== '*') {
        selectedVersion = keys[i];
      }
      if (keys[i].substr(0, 10) <= version) {
        return selectedVersion;
      }
    }

    throw new Error('Could not find ' + this.constructor.serviceIdentifier +
                    ' API to satisfy version constraint `' + version + '\'');
  },

  /**
   * @api private
   */
  api: {},

  /**
   * @api private
   */
  defaultRetryCount: 3,

  /**
   * @api private
   */
  customizeRequests: function customizeRequests(callback) {
    if (!callback) {
      this.customRequestHandler = null;
    } else if (typeof callback === 'function') {
      this.customRequestHandler = callback;
    } else {
      throw new Error('Invalid callback type \'' + typeof callback + '\' provided in customizeRequests');
    }
  },

  /**
   * Calls an operation on a service with the given input parameters.
   *
   * @param operation [String] the name of the operation to call on the service.
   * @param params [map] a map of input options for the operation
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  makeRequest: function makeRequest(operation, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = null;
    }

    params = params || {};
    if (this.config.params) { // copy only toplevel bound params
      var rules = this.api.operations[operation];
      if (rules) {
        params = AWS.util.copy(params);
        AWS.util.each(this.config.params, function(key, value) {
          if (rules.input.members[key]) {
            if (params[key] === undefined || params[key] === null) {
              params[key] = value;
            }
          }
        });
      }
    }

    var request = new AWS.Request(this, operation, params);
    this.addAllRequestListeners(request);

    if (callback) request.send(callback);
    return request;
  },

  /**
   * Calls an operation on a service with the given input parameters, without
   * any authentication data. This method is useful for "public" API operations.
   *
   * @param operation [String] the name of the operation to call on the service.
   * @param params [map] a map of input options for the operation
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = {};
    }

    var request = this.makeRequest(operation, params).toUnauthenticated();
    return callback ? request.send(callback) : request;
  },

  /**
   * Waits for a given state
   *
   * @param state [String] the state on the service to wait for
   * @param params [map] a map of parameters to pass with each request
   * @option params $waiter [map] a map of configuration options for the waiter
   * @option params $waiter.delay [Number] The number of seconds to wait between
   *                                       requests
   * @option params $waiter.maxAttempts [Number] The maximum number of requests
   *                                             to send while waiting
   * @callback callback function(err, data)
   *   If a callback is supplied, it is called when a response is returned
   *   from the service.
   *   @param err [Error] the error object returned from the request.
   *     Set to `null` if the request is successful.
   *   @param data [Object] the de-serialized data returned from
   *     the request. Set to `null` if a request error occurs.
   */
  waitFor: function waitFor(state, params, callback) {
    var waiter = new AWS.ResourceWaiter(this, state);
    return waiter.wait(params, callback);
  },

  /**
   * @api private
   */
  addAllRequestListeners: function addAllRequestListeners(request) {
    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),
                AWS.EventListeners.CorePost];
    for (var i = 0; i < list.length; i++) {
      if (list[i]) request.addListeners(list[i]);
    }

    // disable parameter validation
    if (!this.config.paramValidation) {
      request.removeListener('validate',
        AWS.EventListeners.Core.VALIDATE_PARAMETERS);
    }

    if (this.config.logger) { // add logging events
      request.addListeners(AWS.EventListeners.Logger);
    }

    this.setupRequestListeners(request);
    // call prototype's customRequestHandler
    if (typeof this.constructor.prototype.customRequestHandler === 'function') {
      this.constructor.prototype.customRequestHandler(request);
    }
    // call instance's customRequestHandler
    if (Object.prototype.hasOwnProperty.call(this, 'customRequestHandler') && typeof this.customRequestHandler === 'function') {
      this.customRequestHandler(request);
    }
  },

  /**
   * Override this method to setup any custom request listeners for each
   * new request to the service.
   *
   * @abstract
   */
  setupRequestListeners: function setupRequestListeners() {
  },

  /**
   * Gets the signer class for a given request
   * @api private
   */
  getSignerClass: function getSignerClass(request) {
    var version;
    // get operation authtype if present
    var operation = null;
    var authtype = '';
    if (request) {
      var operations = request.service.api.operations || {};
      operation = operations[request.operation] || null;
      authtype = operation ? operation.authtype : '';
    }
    if (this.config.signatureVersion) {
      version = this.config.signatureVersion;
    } else if (authtype === 'v4' || authtype === 'v4-unsigned-body') {
      version = 'v4';
    } else {
      version = this.api.signatureVersion;
    }
    return AWS.Signers.RequestSigner.getVersion(version);
  },

  /**
   * @api private
   */
  serviceInterface: function serviceInterface() {
    switch (this.api.protocol) {
      case 'ec2': return AWS.EventListeners.Query;
      case 'query': return AWS.EventListeners.Query;
      case 'json': return AWS.EventListeners.Json;
      case 'rest-json': return AWS.EventListeners.RestJson;
      case 'rest-xml': return AWS.EventListeners.RestXml;
    }
    if (this.api.protocol) {
      throw new Error('Invalid service `protocol\' ' +
        this.api.protocol + ' in API config');
    }
  },

  /**
   * @api private
   */
  successfulResponse: function successfulResponse(resp) {
    return resp.httpResponse.statusCode < 300;
  },

  /**
   * How many times a failed request should be retried before giving up.
   * the defaultRetryCount can be overriden by service classes.
   *
   * @api private
   */
  numRetries: function numRetries() {
    if (this.config.maxRetries !== undefined) {
      return this.config.maxRetries;
    } else {
      return this.defaultRetryCount;
    }
  },

  /**
   * @api private
   */
  retryDelays: function retryDelays(retryCount) {
    return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions);
  },

  /**
   * @api private
   */
  retryableError: function retryableError(error) {
    if (this.timeoutError(error)) return true;
    if (this.networkingError(error)) return true;
    if (this.expiredCredentialsError(error)) return true;
    if (this.throttledError(error)) return true;
    if (error.statusCode >= 500) return true;
    return false;
  },

  /**
   * @api private
   */
  networkingError: function networkingError(error) {
    return error.code === 'NetworkingError';
  },

  /**
   * @api private
   */
  timeoutError: function timeoutError(error) {
    return error.code === 'TimeoutError';
  },

  /**
   * @api private
   */
  expiredCredentialsError: function expiredCredentialsError(error) {
    // TODO : this only handles *one* of the expired credential codes
    return (error.code === 'ExpiredTokenException');
  },

  /**
   * @api private
   */
  clockSkewError: function clockSkewError(error) {
    switch (error.code) {
      case 'RequestTimeTooSkewed':
      case 'RequestExpired':
      case 'InvalidSignatureException':
      case 'SignatureDoesNotMatch':
      case 'AuthFailure':
      case 'RequestInTheFuture':
        return true;
      default: return false;
    }
  },

  /**
   * @api private
   */
  getSkewCorrectedDate: function getSkewCorrectedDate() {
    return new Date(Date.now() + this.config.systemClockOffset);
  },

  /**
   * @api private
   */
  applyClockOffset: function applyClockOffset(newServerTime) {
    if (newServerTime) {
      this.config.systemClockOffset = newServerTime - Date.now();
    }
  },

  /**
   * @api private
   */
  isClockSkewed: function isClockSkewed(newServerTime) {
    if (newServerTime) {
      return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 30000;
    }
  },

  /**
   * @api private
   */
  throttledError: function throttledError(error) {
    // this logic varies between services
    switch (error.code) {
      case 'ProvisionedThroughputExceededException':
      case 'Throttling':
      case 'ThrottlingException':
      case 'RequestLimitExceeded':
      case 'RequestThrottled':
        return true;
      default:
        return false;
    }
  },

  /**
   * @api private
   */
  endpointFromTemplate: function endpointFromTemplate(endpoint) {
    if (typeof endpoint !== 'string') return endpoint;

    var e = endpoint;
    e = e.replace(/\{service\}/g, this.api.endpointPrefix);
    e = e.replace(/\{region\}/g, this.config.region);
    e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? 'https' : 'http');
    return e;
  },

  /**
   * @api private
   */
  setEndpoint: function setEndpoint(endpoint) {
    this.endpoint = new AWS.Endpoint(endpoint, this.config);
  },

  /**
   * @api private
   */
  paginationConfig: function paginationConfig(operation, throwException) {
    var paginator = this.api.operations[operation].paginator;
    if (!paginator) {
      if (throwException) {
        var e = new Error();
        throw AWS.util.error(e, 'No pagination configuration for ' + operation);
      }
      return null;
    }

    return paginator;
  }
});

AWS.util.update(AWS.Service, {

  /**
   * Adds one method for each operation described in the api configuration
   *
   * @api private
   */
  defineMethods: function defineMethods(svc) {
    AWS.util.each(svc.prototype.api.operations, function iterator(method) {
      if (svc.prototype[method]) return;
      var operation = svc.prototype.api.operations[method];
      if (operation.authtype === 'none') {
        svc.prototype[method] = function (params, callback) {
          return this.makeUnauthenticatedRequest(method, params, callback);
        };
      } else {
        svc.prototype[method] = function (params, callback) {
          return this.makeRequest(method, params, callback);
        };
      }
    });
  },

  /**
   * Defines a new Service class using a service identifier and list of versions
   * including an optional set of features (functions) to apply to the class
   * prototype.
   *
   * @param serviceIdentifier [String] the identifier for the service
   * @param versions [Array<String>] a list of versions that work with this
   *   service
   * @param features [Object] an object to attach to the prototype
   * @return [Class<Service>] the service class defined by this function.
   */
  defineService: function defineService(serviceIdentifier, versions, features) {
    AWS.Service._serviceMap[serviceIdentifier] = true;
    if (!Array.isArray(versions)) {
      features = versions;
      versions = [];
    }

    var svc = inherit(AWS.Service, features || {});

    if (typeof serviceIdentifier === 'string') {
      AWS.Service.addVersions(svc, versions);

      var identifier = svc.serviceIdentifier || serviceIdentifier;
      svc.serviceIdentifier = identifier;
    } else { // defineService called with an API
      svc.prototype.api = serviceIdentifier;
      AWS.Service.defineMethods(svc);
    }

    return svc;
  },

  /**
   * @api private
   */
  addVersions: function addVersions(svc, versions) {
    if (!Array.isArray(versions)) versions = [versions];

    svc.services = svc.services || {};
    for (var i = 0; i < versions.length; i++) {
      if (svc.services[versions[i]] === undefined) {
        svc.services[versions[i]] = null;
      }
    }

    svc.apiVersions = Object.keys(svc.services).sort();
  },

  /**
   * @api private
   */
  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {
    var svc = inherit(superclass, {
      serviceIdentifier: superclass.serviceIdentifier
    });

    function setApi(api) {
      if (api.isApi) {
        svc.prototype.api = api;
      } else {
        svc.prototype.api = new Api(api);
      }
    }

    if (typeof version === 'string') {
      if (apiConfig) {
        setApi(apiConfig);
      } else {
        try {
          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));
        } catch (err) {
          throw AWS.util.error(err, {
            message: 'Could not find API configuration ' +
              superclass.serviceIdentifier + '-' + version
          });
        }
      }
      if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {
        superclass.apiVersions = superclass.apiVersions.concat(version).sort();
      }
      superclass.services[version] = svc;
    } else {
      setApi(version);
    }

    AWS.Service.defineMethods(svc);
    return svc;
  },

  /**
   * @api private
   */
  hasService: function(identifier) {
    return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);
  },

  /**
   * @api private
   */
  _serviceMap: {}
});

module.exports = AWS.Service;


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.APIGateway.prototype, {
/**
 * Sets the Accept header to application/json.
 *
 * @api private
 */
  setAcceptHeader: function setAcceptHeader(req) {
    var httpRequest = req.httpRequest;
    if (!httpRequest.headers.Accept) {
      httpRequest.headers['Accept'] = 'application/json';
    }
  },

  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    request.addListener('build', this.setAcceptHeader);
    if (request.operation === 'getExport') {
      var params = request.params || {};
      if (params.exportType === 'swagger') {
        request.addListener('extractData', AWS.util.convertPayloadToString);
      }
    }
  }
});



/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

// pull in CloudFront signer
__webpack_require__(479);

AWS.util.update(AWS.CloudFront.prototype, {

  setupRequestListeners: function setupRequestListeners(request) {
    request.addListener('extractData', AWS.util.hoistPayloadMember);
  }

});


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * Constructs a service interface object. Each API operation is exposed as a
 * function on service.
 *
 * ### Sending a Request Using CloudSearchDomain
 *
 * ```javascript
 * var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
 * csd.search(params, function (err, data) {
 *   if (err) console.log(err, err.stack); // an error occurred
 *   else     console.log(data);           // successful response
 * });
 * ```
 *
 * ### Locking the API Version
 *
 * In order to ensure that the CloudSearchDomain object uses this specific API,
 * you can construct the object by passing the `apiVersion` option to the
 * constructor:
 *
 * ```javascript
 * var csd = new AWS.CloudSearchDomain({
 *   endpoint: 'my.host.tld',
 *   apiVersion: '2013-01-01'
 * });
 * ```
 *
 * You can also set the API version globally in `AWS.config.apiVersions` using
 * the **cloudsearchdomain** service identifier:
 *
 * ```javascript
 * AWS.config.apiVersions = {
 *   cloudsearchdomain: '2013-01-01',
 *   // other service API versions
 * };
 *
 * var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
 * ```
 *
 * @note You *must* provide an `endpoint` configuration parameter when
 *   constructing this service. See {constructor} for more information.
 *
 * @!method constructor(options = {})
 *   Constructs a service object. This object has one method for each
 *   API operation.
 *
 *   @example Constructing a CloudSearchDomain object
 *     var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
 *   @note You *must* provide an `endpoint` when constructing this service.
 *   @option (see AWS.Config.constructor)
 *
 * @service cloudsearchdomain
 * @version 2013-01-01
 */
AWS.util.update(AWS.CloudSearchDomain.prototype, {
  /**
   * @api private
   */
  validateService: function validateService() {
    if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {
      var msg = 'AWS.CloudSearchDomain requires an explicit ' +
                '`endpoint\' configuration option.';
      throw AWS.util.error(new Error(),
        {name: 'InvalidEndpoint', message: msg});
    }
  },

  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    request.removeListener('validate',
      AWS.EventListeners.Core.VALIDATE_CREDENTIALS
    );
    request.onAsync('validate', this.validateCredentials);
    request.addListener('validate', this.updateRegion);
    if (request.operation === 'search') {
      request.addListener('build', this.convertGetToPost);
    }
  },

  /**
   * @api private
   */
  validateCredentials: function(req, done) {
    if (!req.service.api.signatureVersion) return done(); // none
    req.service.config.getCredentials(function(err) {
      if (err) {
        req.removeListener('sign', AWS.EventListeners.Core.SIGN);
      }
      done();
    });
  },

  /**
   * @api private
   */
  convertGetToPost: function(request) {
    var httpRequest = request.httpRequest
    // convert queries to POST to avoid length restrictions
    var path = httpRequest.path.split('?')
    httpRequest.method = 'POST'
    httpRequest.path = path[0]
    httpRequest.body = path[1]
    httpRequest.headers['Content-Length'] = httpRequest.body.length
    httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded'
  },

  /**
   * @api private
   */
  updateRegion: function updateRegion(request) {
    var endpoint = request.httpRequest.endpoint.hostname;
    var zones = endpoint.split('.');
    request.httpRequest.region = zones[1] || request.httpRequest.region;
  }

});


/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.CognitoIdentity.prototype, {
  getOpenIdToken: function getOpenIdToken(params, callback) {
    return this.makeUnauthenticatedRequest('getOpenIdToken', params, callback);
  },

  getId: function getId(params, callback) {
    return this.makeUnauthenticatedRequest('getId', params, callback);
  },

  getCredentialsForIdentity: function getCredentialsForIdentity(params, callback) {
    return this.makeUnauthenticatedRequest('getCredentialsForIdentity', params, callback);
  }
});


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
__webpack_require__(491);

AWS.util.update(AWS.DynamoDB.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    if (request.service.config.dynamoDbCrc32) {
      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
      request.addListener('extractData', this.checkCrc32);
      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
    }
  },

  /**
   * @api private
   */
  checkCrc32: function checkCrc32(resp) {
    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {
      resp.data = null;
      resp.error = AWS.util.error(new Error(), {
        code: 'CRC32CheckFailed',
        message: 'CRC32 integrity check failed',
        retryable: true
      });
      resp.request.haltHandlersOnError();
      throw (resp.error);
    }
  },

  /**
   * @api private
   */
  crc32IsValid: function crc32IsValid(resp) {
    var crc = resp.httpResponse.headers['x-amz-crc32'];
    if (!crc) return true; // no (valid) CRC32 header
    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);
  },

  /**
   * @api private
   */
  defaultRetryCount: 10,

  /**
   * @api private
   */
  retryDelays: function retryDelays(retryCount) {
    var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);

    if (typeof retryDelayOptions.base !== 'number') {
        retryDelayOptions.base = 50; // default for dynamodb
    }
    var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions);
    return delay;
  }
});


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.EC2.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);
    request.addListener('extractError', this.extractError);

    if (request.operation === 'copySnapshot') {
      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);
    }
  },

  /**
   * @api private
   */
  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {
    if (req.params.PresignedUrl || req._subRequest) {
      return done();
    }

    req.params = AWS.util.copy(req.params);
    req.params.DestinationRegion = req.service.config.region;

    var config = AWS.util.copy(req.service.config);
    delete config.endpoint;
    config.region = req.params.SourceRegion;
    var svc = new req.service.constructor(config);
    var newReq = svc[req.operation](req.params);
    newReq._subRequest = true;
    newReq.presign(function(err, url) {
      if (err) done(err);
      else {
        req.params.PresignedUrl = url;
        done();
      }
    });
  },

  /**
   * @api private
   */
  extractError: function extractError(resp) {
    // EC2 nests the error code and message deeper than other AWS Query services.
    var httpResponse = resp.httpResponse;
    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');
    if (data.Errors) {
      resp.error = AWS.util.error(new Error(), {
        code: data.Errors.Error.Code,
        message: data.Errors.Error.Message
      });
    } else {
      resp.error = AWS.util.error(new Error(), {
        code: httpResponse.statusCode,
        message: null
      });
    }
    resp.error.requestId = data.RequestID || null;
  }
});


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.Glacier.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    if (Array.isArray(request._events.validate)) {
      request._events.validate.unshift(this.validateAccountId);
    } else {
      request.on('validate', this.validateAccountId);
    }
    request.removeListener('afterBuild',
      AWS.EventListeners.Core.COMPUTE_SHA256);
    request.on('build', this.addGlacierApiVersion);
    request.on('build', this.addTreeHashHeaders);
  },

  /**
   * @api private
   */
  validateAccountId: function validateAccountId(request) {
    if (request.params.accountId !== undefined) return;
    request.params = AWS.util.copy(request.params);
    request.params.accountId = '-';
  },

  /**
   * @api private
   */
  addGlacierApiVersion: function addGlacierApiVersion(request) {
    var version = request.service.api.apiVersion;
    request.httpRequest.headers['x-amz-glacier-version'] = version;
  },

  /**
   * @api private
   */
  addTreeHashHeaders: function addTreeHashHeaders(request) {
    if (request.params.body === undefined) return;

    var hashes = request.service.computeChecksums(request.params.body);
    request.httpRequest.headers['X-Amz-Content-Sha256'] = hashes.linearHash;

    if (!request.httpRequest.headers['x-amz-sha256-tree-hash']) {
      request.httpRequest.headers['x-amz-sha256-tree-hash'] = hashes.treeHash;
    }
  },

  /**
   * @!group Computing Checksums
   */

  /**
   * Computes the SHA-256 linear and tree hash checksums for a given
   * block of Buffer data. Pass the tree hash of the computed checksums
   * as the checksum input to the {completeMultipartUpload} when performing
   * a multi-part upload.
   *
   * @example Calculate checksum of 5.5MB data chunk
   *   var glacier = new AWS.Glacier();
   *   var data = new Buffer(5.5 * 1024 * 1024);
   *   data.fill('0'); // fill with zeros
   *   var results = glacier.computeChecksums(data);
   *   // Result: { linearHash: '68aff0c5a9...', treeHash: '154e26c78f...' }
   * @param data [Buffer, String] data to calculate the checksum for
   * @return [map<linearHash:String,treeHash:String>] a map containing
   *   the linearHash and treeHash properties representing hex based digests
   *   of the respective checksums.
   * @see completeMultipartUpload
   */
  computeChecksums: function computeChecksums(data) {
    if (!AWS.util.Buffer.isBuffer(data)) data = new AWS.util.Buffer(data);

    var mb = 1024 * 1024;
    var hashes = [];
    var hash = AWS.util.crypto.createHash('sha256');

    // build leaf nodes in 1mb chunks
    for (var i = 0; i < data.length; i += mb) {
      var chunk = data.slice(i, Math.min(i + mb, data.length));
      hash.update(chunk);
      hashes.push(AWS.util.crypto.sha256(chunk));
    }

    return {
      linearHash: hash.digest('hex'),
      treeHash: this.buildHashTree(hashes)
    };
  },

  /**
   * @api private
   */
  buildHashTree: function buildHashTree(hashes) {
    // merge leaf nodes
    while (hashes.length > 1) {
      var tmpHashes = [];
      for (var i = 0; i < hashes.length; i += 2) {
        if (hashes[i + 1]) {
          var tmpHash = new AWS.util.Buffer(64);
          tmpHash.write(hashes[i], 0, 32, 'binary');
          tmpHash.write(hashes[i + 1], 32, 32, 'binary');
          tmpHashes.push(AWS.util.crypto.sha256(tmpHash));
        } else {
          tmpHashes.push(hashes[i]);
        }
      }
      hashes = tmpHashes;
    }

    return AWS.util.crypto.toHex(hashes[0]);
  }
});


/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

/**
 * @api private
 */
var blobPayloadOutputOps = [
  'deleteThingShadow',
  'getThingShadow',
  'updateThingShadow'
];

/**
 * Constructs a service interface object. Each API operation is exposed as a
 * function on service.
 *
 * ### Sending a Request Using IotData
 *
 * ```javascript
 * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
 * iotdata.getThingShadow(params, function (err, data) {
 *   if (err) console.log(err, err.stack); // an error occurred
 *   else     console.log(data);           // successful response
 * });
 * ```
 *
 * ### Locking the API Version
 *
 * In order to ensure that the IotData object uses this specific API,
 * you can construct the object by passing the `apiVersion` option to the
 * constructor:
 *
 * ```javascript
 * var iotdata = new AWS.IotData({
 *   endpoint: 'my.host.tld',
 *   apiVersion: '2015-05-28'
 * });
 * ```
 *
 * You can also set the API version globally in `AWS.config.apiVersions` using
 * the **iotdata** service identifier:
 *
 * ```javascript
 * AWS.config.apiVersions = {
 *   iotdata: '2015-05-28',
 *   // other service API versions
 * };
 *
 * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
 * ```
 *
 * @note You *must* provide an `endpoint` configuration parameter when
 *   constructing this service. See {constructor} for more information.
 *
 * @!method constructor(options = {})
 *   Constructs a service object. This object has one method for each
 *   API operation.
 *
 *   @example Constructing a IotData object
 *     var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
 *   @note You *must* provide an `endpoint` when constructing this service.
 *   @option (see AWS.Config.constructor)
 *
 * @service iotdata
 * @version 2015-05-28
 */
AWS.util.update(AWS.IotData.prototype, {
    /**
     * @api private
     */
    validateService: function validateService() {
        if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {
            var msg = 'AWS.IotData requires an explicit ' +
                '`endpoint\' configuration option.';
            throw AWS.util.error(new Error(),
                {name: 'InvalidEndpoint', message: msg});
        }
    },

    /**
     * @api private
     */
    setupRequestListeners: function setupRequestListeners(request) {
        request.addListener('validateResponse', this.validateResponseBody);
        if (blobPayloadOutputOps.indexOf(request.operation) > -1) {
            request.addListener('extractData', AWS.util.convertPayloadToString);
        }
    },

    /**
     * @api private
     */
    validateResponseBody: function validateResponseBody(resp) {
        var body = resp.httpResponse.body.toString() || '{}';
        var bodyCheck = body.trim();
        if (!bodyCheck || bodyCheck.charAt(0) !== '{') {
            resp.httpResponse.body = '';
        }
    }

});


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.Lambda.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    if (request.operation === 'invoke') {
      request.addListener('extractData', AWS.util.convertPayloadToString);
    }
  }
});



/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.MachineLearning.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    if (request.operation === 'predict') {
      request.addListener('build', this.buildEndpoint);
    }
  },

  /**
   * Updates request endpoint from PredictEndpoint
   * @api private
   */
  buildEndpoint: function buildEndpoint(request) {
    var url = request.params.PredictEndpoint;
    if (url) {
      request.httpRequest.endpoint = new AWS.Endpoint(url);
    }
  }

});


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(498);

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
__webpack_require__(500);
 /**
  * @api private
  */
 var crossRegionOperations = ['copyDBSnapshot', 'createDBInstanceReadReplica', 'createDBCluster', 'copyDBClusterSnapshot'];

 AWS.util.update(AWS.RDS.prototype, {
   /**
    * @api private
    */
   setupRequestListeners: function setupRequestListeners(request) {
     if (crossRegionOperations.indexOf(request.operation) !== -1 &&
         request.params.SourceRegion) {
       request.params = AWS.util.copy(request.params);
       if (request.params.PreSignedUrl ||
           request.params.SourceRegion === this.config.region) {
         delete request.params.SourceRegion;
       } else {
         var doesParamValidation = !!this.config.paramValidation;
         // remove the validate parameters listener so we can re-add it after we build the URL
         if (doesParamValidation) {
           request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
         }
         request.onAsync('validate', this.buildCrossRegionPresignedUrl);
         if (doesParamValidation) {
           request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
         }
       }
     }
   },

   /**
    * @api private
    */
   buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {
     var config = AWS.util.copy(req.service.config);
     config.region = req.params.SourceRegion;
     delete req.params.SourceRegion;
     delete config.endpoint;
     // relevant params for the operation will already be in req.params
     delete config.params;
     config.signatureVersion = 'v4';
     var destinationRegion = req.service.config.region;

     var svc = new req.service.constructor(config);
     var newReq = svc[req.operation](AWS.util.copy(req.params));
     newReq.on('build', function addDestinationRegionParam(request) {
       var httpRequest = request.httpRequest;
       httpRequest.params.DestinationRegion = destinationRegion;
       httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);
     });
     newReq.presign(function(err, url) {
       if (err) done(err);
       else {
         req.params.PreSignedUrl = url;
         done();
       }
     });
   }
 });

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.Route53.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    request.on('build', this.sanitizeUrl);
  },

  /**
   * @api private
   */
  sanitizeUrl: function sanitizeUrl(request) {
    var path = request.httpRequest.path;
    request.httpRequest.path = path.replace(/\/%2F\w+%2F/, '/');
  },

  /**
   * @return [Boolean] whether the error can be retried
   * @api private
   */
  retryableError: function retryableError(error) {
    if (error.code === 'PriorRequestNotComplete' &&
        error.statusCode === 400) {
      return true;
    } else {
      var _super = AWS.Service.prototype.retryableError;
      return _super.call(this, error);
    }
  }
});


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var v4Credentials = __webpack_require__(67);

// Pull in managed upload extension
__webpack_require__(506);

/**
 * @api private
 */
var operationsWith200StatusCodeError = {
  'completeMultipartUpload': true,
  'copyObject': true,
  'uploadPartCopy': true
};

/**
 * @api private
 */
 var regionRedirectErrorCodes = [
  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints
  'BadRequest', // head operations on virtual-hosted global bucket endpoints
  'PermanentRedirect', // non-head operations on path-style or regional endpoints
  301 // head operations on path-style or regional endpoints
 ];

AWS.util.update(AWS.S3.prototype, {
  /**
   * @api private
   */
  getSignatureVersion: function getSignatureVersion(request) {
    var defaultApiVersion = this.api.signatureVersion;
    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;
    var regionDefinedVersion = this.config.signatureVersion;
    var isPresigned = request ? request.isPresigned() : false;
    /*
      1) User defined version specified:
        a) always return user defined version
      2) No user defined version specified:
        a) default to lowest version the region supports
        b) If using presigned urls, default to lowest version the region supports
    */
    if (userDefinedVersion) {
      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;
      return userDefinedVersion;
    }
    if (isPresigned !== true) {
      defaultApiVersion = 'v4';
    } else if (regionDefinedVersion) {
      defaultApiVersion = regionDefinedVersion;
    }
    return defaultApiVersion;
  },

  /**
   * @api private
   */
  getSignerClass: function getSignerClass(request) {
    var signatureVersion = this.getSignatureVersion(request);
    return AWS.Signers.RequestSigner.getVersion(signatureVersion);
  },

  /**
   * @api private
   */
  validateService: function validateService() {
    var msg;
    var messages = [];

    // default to us-east-1 when no region is provided
    if (!this.config.region) this.config.region = 'us-east-1';

    if (!this.config.endpoint && this.config.s3BucketEndpoint) {
      messages.push('An endpoint must be provided when configuring ' +
                    '`s3BucketEndpoint` to true.');
    }
    if (messages.length === 1) {
      msg = messages[0];
    } else if (messages.length > 1) {
      msg = 'Multiple configuration errors:\n' + messages.join('\n');
    }
    if (msg) {
      throw AWS.util.error(new Error(),
        {name: 'InvalidEndpoint', message: msg});
    }
  },

  /**
   * @api private
   */
  shouldDisableBodySigning: function shouldDisableBodySigning(request) {
    var signerClass = this.getSignerClass();
    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4
        && request.httpRequest.endpoint.protocol === 'https:') {
      return true;
    }
    return false;
  },

  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    request.addListener('validate', this.validateScheme);
    request.addListener('validate', this.validateBucketEndpoint);
    request.addListener('validate', this.correctBucketRegionFromCache);
    request.addListener('validate', this.validateBucketName);
    request.addListener('build', this.addContentType);
    request.addListener('build', this.populateURI);
    request.addListener('build', this.computeContentMd5);
    request.addListener('build', this.computeSseCustomerKeyMd5);
    request.addListener('afterBuild', this.addExpect100Continue);
    request.removeListener('validate',
      AWS.EventListeners.Core.VALIDATE_REGION);
    request.addListener('extractError', this.extractError);
    request.onAsync('extractError', this.requestBucketRegion);
    request.addListener('extractData', this.extractData);
    request.addListener('extractData', AWS.util.hoistPayloadMember);
    request.addListener('beforePresign', this.prepareSignedUrl);
    if (AWS.util.isBrowser()) {
      request.onAsync('retry', this.reqRegionForNetworkingError);
    }
    if (this.shouldDisableBodySigning(request))  {
      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);
      request.addListener('afterBuild', this.disableBodySigning);
    }
  },

  /**
   * @api private
   */
  validateScheme: function(req) {
    var params = req.params,
        scheme = req.httpRequest.endpoint.protocol,
        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;
    if (sensitive && scheme !== 'https:') {
      var msg = 'Cannot send SSE keys over HTTP. Set \'sslEnabled\'' +
        'to \'true\' in your configuration';
      throw AWS.util.error(new Error(),
        { code: 'ConfigError', message: msg });
    }
  },

  /**
   * @api private
   */
  validateBucketEndpoint: function(req) {
    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {
      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';
      throw AWS.util.error(new Error(),
        { code: 'ConfigError', message: msg });
    }
  },

  /**
   * @api private
   */
  validateBucketName: function validateBucketName(req) {
    var service = req.service;
    var signatureVersion = service.getSignatureVersion(req);
    // Only validate buckets when using sigv4
    if (signatureVersion !== 'v4') {
      return;
    }
    var bucket = req.params && req.params.Bucket;
    var key = req.params && req.params.Key;
    var slashIndex = bucket && bucket.indexOf('/');
    if (bucket && slashIndex >= 0) {
      if (typeof key === 'string') {
        req.params = AWS.util.copy(req.params);
        // Need to include trailing slash to match sigv2 behavior
        var prefix = bucket.substr(slashIndex + 1) || '';
        req.params.Key = prefix + '/' + key;
        req.params.Bucket = bucket.substr(0, slashIndex);
      } else {
        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;
        throw AWS.util.error(new Error(),
          { code: 'InvalidBucket', message: msg });
      }
    }
  },

  /**
   * @api private
   */
  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {
    var invalidOperations = [
      'createBucket',
      'deleteBucket',
      'listBuckets'
    ];
    return invalidOperations.indexOf(operation) === -1;
  },


  /**
   * S3 prefers dns-compatible bucket names to be moved from the uri path
   * to the hostname as a sub-domain.  This is not possible, even for dns-compat
   * buckets when using SSL and the bucket name contains a dot ('.').  The
   * ssl wildcard certificate is only 1-level deep.
   *
   * @api private
   */
  populateURI: function populateURI(req) {
    var httpRequest = req.httpRequest;
    var b = req.params.Bucket;
    var service = req.service;
    var endpoint = httpRequest.endpoint;
    if (b) {
      if (!service.pathStyleBucketName(b)) {
        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {
          if (service.config.useDualstack) {
            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';
          } else {
            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';
          }
        } else if (!service.config.s3BucketEndpoint) {
          endpoint.hostname =
            b + '.' + endpoint.hostname;
        }

        var port = endpoint.port;
        if (port !== 80 && port !== 443) {
          endpoint.host = endpoint.hostname + ':' +
            endpoint.port;
        } else {
          endpoint.host = endpoint.hostname;
        }

        httpRequest.virtualHostedBucket = b; // needed for signing the request
        service.removeVirtualHostedBucketFromPath(req);
      }
    }
  },

  /**
   * Takes the bucket name out of the path if bucket is virtual-hosted
   *
   * @api private
   */
  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {
    var httpRequest = req.httpRequest;
    var bucket = httpRequest.virtualHostedBucket;
    if (bucket && httpRequest.path) {
      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');
      if (httpRequest.path[0] !== '/') {
        httpRequest.path = '/' + httpRequest.path;
      }
    }
  },

  /**
   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB
   * @api private
   */
  addExpect100Continue: function addExpect100Continue(req) {
    var len = req.httpRequest.headers['Content-Length'];
    if (AWS.util.isNode() && len >= 1024 * 1024) {
      req.httpRequest.headers['Expect'] = '100-continue';
    }
  },

  /**
   * Adds a default content type if none is supplied.
   *
   * @api private
   */
  addContentType: function addContentType(req) {
    var httpRequest = req.httpRequest;
    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {
      // Content-Type is not set in GET/HEAD requests
      delete httpRequest.headers['Content-Type'];
      return;
    }

    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type
      httpRequest.headers['Content-Type'] = 'application/octet-stream';
    }

    var contentType = httpRequest.headers['Content-Type'];
    if (AWS.util.isBrowser()) {
      if (typeof httpRequest.body === 'string' && !contentType.match(/;\s*charset=/)) {
        var charset = '; charset=UTF-8';
        httpRequest.headers['Content-Type'] += charset;
      } else {
        var replaceFn = function(_, prefix, charsetName) {
          return prefix + charsetName.toUpperCase();
        };

        httpRequest.headers['Content-Type'] =
          contentType.replace(/(;\s*charset=)(.+)$/, replaceFn);
      }
    }
  },

  /**
   * @api private
   */
  computableChecksumOperations: {
    putBucketCors: true,
    putBucketLifecycle: true,
    putBucketLifecycleConfiguration: true,
    putBucketTagging: true,
    deleteObjects: true,
    putBucketReplication: true
  },

  /**
   * Checks whether checksums should be computed for the request.
   * If the request requires checksums to be computed, this will always
   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}
   * is set.
   *
   * @param req [AWS.Request] the request to check against
   * @return [Boolean] whether to compute checksums for a request.
   * @api private
   */
  willComputeChecksums: function willComputeChecksums(req) {
    if (this.computableChecksumOperations[req.operation]) return true;
    if (!this.config.computeChecksums) return false;

    // TODO: compute checksums for Stream objects
    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&
        typeof req.httpRequest.body !== 'string') {
      return false;
    }

    var rules = req.service.api.operations[req.operation].input.members;

    // Sha256 signing disabled, and not a presigned url
    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {
      if (rules.ContentMD5 && !req.params.ContentMD5) {
        return true;
      }
    }

    // V4 signer uses SHA256 signatures so only compute MD5 if it is required
    if (req.service.getSignerClass(req) === AWS.Signers.V4) {
      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;
    }

    if (rules.ContentMD5 && !req.params.ContentMD5) return true;
  },

  /**
   * A listener that computes the Content-MD5 and sets it in the header.
   * @see AWS.S3.willComputeChecksums
   * @api private
   */
  computeContentMd5: function computeContentMd5(req) {
    if (req.service.willComputeChecksums(req)) {
      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');
      req.httpRequest.headers['Content-MD5'] = md5;
    }
  },

  /**
   * @api private
   */
  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {
    var keys = {
      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',
      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'
    };
    AWS.util.each(keys, function(key, header) {
      if (req.params[key]) {
        var value = AWS.util.crypto.md5(req.params[key], 'base64');
        req.httpRequest.headers[header] = value;
      }
    });
  },

  /**
   * Returns true if the bucket name should be left in the URI path for
   * a request to S3.  This function takes into account the current
   * endpoint protocol (e.g. http or https).
   *
   * @api private
   */
  pathStyleBucketName: function pathStyleBucketName(bucketName) {
    // user can force path style requests via the configuration
    if (this.config.s3ForcePathStyle) return true;
    if (this.config.s3BucketEndpoint) return false;

    if (this.dnsCompatibleBucketName(bucketName)) {
      return (this.config.sslEnabled && bucketName.match(/\./)) ? true : false;
    } else {
      return true; // not dns compatible names must always use path style
    }
  },

  /**
   * Returns true if the bucket name is DNS compatible.  Buckets created
   * outside of the classic region MUST be DNS compatible.
   *
   * @api private
   */
  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {
    var b = bucketName;
    var domain = new RegExp(/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/);
    var ipAddress = new RegExp(/(\d+\.){3}\d+/);
    var dots = new RegExp(/\.\./);
    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;
  },

  /**
   * @return [Boolean] whether response contains an error
   * @api private
   */
  successfulResponse: function successfulResponse(resp) {
    var req = resp.request;
    var httpResponse = resp.httpResponse;
    if (operationsWith200StatusCodeError[req.operation] &&
        httpResponse.body.toString().match('<Error>')) {
      return false;
    } else {
      return httpResponse.statusCode < 300;
    }
  },

  /**
   * @return [Boolean] whether the error can be retried
   * @api private
   */
  retryableError: function retryableError(error, request) {
    if (operationsWith200StatusCodeError[request.operation] &&
        error.statusCode === 200) {
      return true;
    } else if (request._requestRegionForBucket &&
        request.service.bucketRegionCache[request._requestRegionForBucket]) {
      return false;
    } else if (error && error.code === 'RequestTimeout') {
      return true;
    } else if (error &&
        regionRedirectErrorCodes.indexOf(error.code) != -1 &&
        error.region && error.region != request.httpRequest.region) {
      request.httpRequest.region = error.region;
      if (error.statusCode === 301) {
        request.service.updateReqBucketRegion(request);
      }
      return true;
    } else {
      var _super = AWS.Service.prototype.retryableError;
      return _super.call(this, error, request);
    }
  },

  /**
   * Updates httpRequest with region. If region is not provided, then
   * the httpRequest will be updated based on httpRequest.region
   *
   * @api private
   */
  updateReqBucketRegion: function updateReqBucketRegion(request, region) {
    var httpRequest = request.httpRequest;
    if (typeof region === 'string' && region.length) {
      httpRequest.region = region;
    }
    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\.amazonaws\.com$/)) {
      return;
    }
    var service = request.service;
    var s3Config = service.config;
    var s3BucketEndpoint = s3Config.s3BucketEndpoint;
    if (s3BucketEndpoint) {
      delete s3Config.s3BucketEndpoint;
    }
    var newConfig = AWS.util.copy(s3Config);
    delete newConfig.endpoint;
    newConfig.region = httpRequest.region;

    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;
    service.populateURI(request);
    s3Config.s3BucketEndpoint = s3BucketEndpoint;
    httpRequest.headers.Host = httpRequest.endpoint.host;

    if (request._asm.currentState === 'validate') {
      request.removeListener('build', service.populateURI);
      request.addListener('build', service.removeVirtualHostedBucketFromPath);
    }
  },

  /**
   * Provides a specialized parser for getBucketLocation -- all other
   * operations are parsed by the super class.
   *
   * @api private
   */
  extractData: function extractData(resp) {
    var req = resp.request;
    if (req.operation === 'getBucketLocation') {
      var match = resp.httpResponse.body.toString().match(/>(.+)<\/Location/);
      delete resp.data['_'];
      if (match) {
        resp.data.LocationConstraint = match[1];
      } else {
        resp.data.LocationConstraint = '';
      }
    }
    var bucket = req.params.Bucket || null;
    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {
      req.service.clearBucketRegionCache(bucket);
    } else {
      var headers = resp.httpResponse.headers || {};
      var region = headers['x-amz-bucket-region'] || null;
      if (!region && req.operation === 'createBucket' && !resp.error) {
        var createBucketConfiguration = req.params.CreateBucketConfiguration;
        if (!createBucketConfiguration) {
          region = 'us-east-1';
        } else if (createBucketConfiguration.LocationConstraint === 'EU') {
          region = 'eu-west-1';
        } else {
          region = createBucketConfiguration.LocationConstraint;
        }
      }
      if (region) {
          if (bucket && region !== req.service.bucketRegionCache[bucket]) {
            req.service.bucketRegionCache[bucket] = region;
          }
      }
    }
    req.service.extractRequestIds(resp);
  },

  /**
   * Extracts an error object from the http response.
   *
   * @api private
   */
  extractError: function extractError(resp) {
    var codes = {
      304: 'NotModified',
      403: 'Forbidden',
      400: 'BadRequest',
      404: 'NotFound'
    };

    var req = resp.request;
    var code = resp.httpResponse.statusCode;
    var body = resp.httpResponse.body || '';

    var headers = resp.httpResponse.headers || {};
    var region = headers['x-amz-bucket-region'] || null;
    var bucket = req.params.Bucket || null;
    var bucketRegionCache = req.service.bucketRegionCache;
    if (region && bucket && region !== bucketRegionCache[bucket]) {
      bucketRegionCache[bucket] = region;
    }

    var cachedRegion;
    if (codes[code] && body.length === 0) {
      if (bucket && !region) {
        cachedRegion = bucketRegionCache[bucket] || null;
        if (cachedRegion !== req.httpRequest.region) {
          region = cachedRegion;
        }
      }
      resp.error = AWS.util.error(new Error(), {
        code: codes[code],
        message: null,
        region: region
      });
    } else {
      var data = new AWS.XML.Parser().parse(body.toString());

      if (data.Region && !region) {
        region = data.Region;
        if (bucket && region !== bucketRegionCache[bucket]) {
          bucketRegionCache[bucket] = region;
        }
      } else if (bucket && !region && !data.Region) {
        cachedRegion = bucketRegionCache[bucket] || null;
        if (cachedRegion !== req.httpRequest.region) {
          region = cachedRegion;
        }
      }

      resp.error = AWS.util.error(new Error(), {
        code: data.Code || code,
        message: data.Message || null,
        region: region
      });
    }
    req.service.extractRequestIds(resp);
  },

  /**
   * If region was not obtained synchronously, then send async request
   * to get bucket region for errors resulting from wrong region.
   *
   * @api private
   */
  requestBucketRegion: function requestBucketRegion(resp, done) {
    var error = resp.error;
    var req = resp.request;
    var bucket = req.params.Bucket || null;

    if (!error || !bucket || error.region || req.operation === 'listObjects' ||
        (AWS.util.isNode() && req.operation === 'headBucket') ||
        (error.statusCode === 400 && req.operation !== 'headObject') ||
        regionRedirectErrorCodes.indexOf(error.code) === -1) {
      return done();
    }
    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';
    var reqParams = {Bucket: bucket};
    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;
    var regionReq = req.service[reqOperation](reqParams);
    regionReq._requestRegionForBucket = bucket;
    regionReq.send(function() {
      var region = req.service.bucketRegionCache[bucket] || null;
      error.region = region;
      done();
    });
  },

   /**
   * For browser only. If NetworkingError received, will attempt to obtain
   * the bucket region.
   *
   * @api private
   */
   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {
    if (!AWS.util.isBrowser()) {
      return done();
    }
    var error = resp.error;
    var request = resp.request;
    var bucket = request.params.Bucket;
    if (!error || error.code !== 'NetworkingError' || !bucket ||
        request.httpRequest.region === 'us-east-1') {
      return done();
    }
    var service = request.service;
    var bucketRegionCache = service.bucketRegionCache;
    var cachedRegion = bucketRegionCache[bucket] || null;

    if (cachedRegion && cachedRegion !== request.httpRequest.region) {
      service.updateReqBucketRegion(request, cachedRegion);
      done();
    } else if (!service.dnsCompatibleBucketName(bucket)) {
      service.updateReqBucketRegion(request, 'us-east-1');
      if (bucketRegionCache[bucket] !== 'us-east-1') {
        bucketRegionCache[bucket] = 'us-east-1';
      }
      done();
    } else if (request.httpRequest.virtualHostedBucket) {
      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});
      service.updateReqBucketRegion(getRegionReq, 'us-east-1');
      getRegionReq._requestRegionForBucket = bucket;

      getRegionReq.send(function() {
        var region = service.bucketRegionCache[bucket] || null;
        if (region && region !== request.httpRequest.region) {
          service.updateReqBucketRegion(request, region);
        }
        done();
      });
    } else {
      // DNS-compatible path-style
      // (s3ForcePathStyle or bucket name with dot over https)
      // Cannot obtain region information for this case
      done();
    }
   },

  /**
   * Cache for bucket region.
   *
   * @api private
   */
   bucketRegionCache: {},

  /**
   * Clears bucket region cache.
   *
   * @api private
   */
   clearBucketRegionCache: function(buckets) {
    var bucketRegionCache = this.bucketRegionCache;
    if (!buckets) {
      buckets = Object.keys(bucketRegionCache);
    } else if (typeof buckets === 'string') {
      buckets = [buckets];
    }
    for (var i = 0; i < buckets.length; i++) {
      delete bucketRegionCache[buckets[i]];
    }
    return bucketRegionCache;
   },

   /**
    * Corrects request region if bucket's cached region is different
    *
    * @api private
    */
  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {
    var bucket = req.params.Bucket || null;
    if (bucket) {
      var service = req.service;
      var requestRegion = req.httpRequest.region;
      var cachedRegion = service.bucketRegionCache[bucket];
      if (cachedRegion && cachedRegion !== requestRegion) {
        service.updateReqBucketRegion(req, cachedRegion);
      }
    }
  },

  /**
   * Extracts S3 specific request ids from the http response.
   *
   * @api private
   */
  extractRequestIds: function extractRequestIds(resp) {
    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;
    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;
    resp.extendedRequestId = extendedRequestId;
    resp.cfId = cfId;

    if (resp.error) {
      resp.error.requestId = resp.requestId || null;
      resp.error.extendedRequestId = extendedRequestId;
      resp.error.cfId = cfId;
    }
  },

  /**
   * Get a pre-signed URL for a given operation name.
   *
   * @note You must ensure that you have static or previously resolved
   *   credentials if you call this method synchronously (with no callback),
   *   otherwise it may not properly sign the request. If you cannot guarantee
   *   this (you are using an asynchronous credential provider, i.e., EC2
   *   IAM roles), you should always call this method with an asynchronous
   *   callback.
   * @note Not all operation parameters are supported when using pre-signed
   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,
   *   `ContentLength`, or `Tagging` must be provided as headers when sending a
   *   request. If you are using pre-signed URLs to upload from a browser and
   *   need to use these fields, see {createPresignedPost}.
   * @param operation [String] the name of the operation to call
   * @param params [map] parameters to pass to the operation. See the given
   *   operation for the expected operation parameters. In addition, you can
   *   also pass the "Expires" parameter to inform S3 how long the URL should
   *   work for.
   * @option params Expires [Integer] (900) the number of seconds to expire
   *   the pre-signed URL operation in. Defaults to 15 minutes.
   * @param callback [Function] if a callback is provided, this function will
   *   pass the URL as the second parameter (after the error parameter) to
   *   the callback function.
   * @return [String] if called synchronously (with no callback), returns the
   *   signed URL.
   * @return [null] nothing is returned if a callback is provided.
   * @example Pre-signing a getObject operation (synchronously)
   *   var params = {Bucket: 'bucket', Key: 'key'};
   *   var url = s3.getSignedUrl('getObject', params);
   *   console.log('The URL is', url);
   * @example Pre-signing a putObject (asynchronously)
   *   var params = {Bucket: 'bucket', Key: 'key'};
   *   s3.getSignedUrl('putObject', params, function (err, url) {
   *     console.log('The URL is', url);
   *   });
   * @example Pre-signing a putObject operation with a specific payload
   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};
   *   var url = s3.getSignedUrl('putObject', params);
   *   console.log('The URL is', url);
   * @example Passing in a 1-minute expiry time for a pre-signed URL
   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};
   *   var url = s3.getSignedUrl('getObject', params);
   *   console.log('The URL is', url); // expires in 60 seconds
   */
  getSignedUrl: function getSignedUrl(operation, params, callback) {
    params = AWS.util.copy(params || {});
    var expires = params.Expires || 900;
    delete params.Expires; // we can't validate this
    var request = this.makeRequest(operation, params);

    if (callback) {
      AWS.util.defer(function() {
        request.presign(expires, callback);
      });
    } else {
      return request.presign(expires, callback);
    }
  },


  /**
   * Get a pre-signed POST policy to support uploading to S3 directly from an
   * HTML form.
   *
   * @param params [map]
   * @option params Bucket [String]     The bucket to which the post should be
   *                                    uploaded
   * @option params Expires [Integer]   (3600) The number of seconds for which
   *                                    the presigned policy should be valid.
   * @option params Conditions [Array]  An array of conditions that must be met
   *                                    for the presigned policy to allow the
   *                                    upload. This can include required tags,
   *                                    the accepted range for content lengths,
   *                                    etc.
   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html
   * @option params Fields [map]        Fields to include in the form. All
   *                                    values passed in as fields will be
   *                                    signed as exact match conditions.
   * @param callback [Function]
   *
   * @note All fields passed in when creating presigned post data will be signed
   *   as exact match conditions. Any fields that will be interpolated by S3
   *   must be added to the fields hash after signing, and an appropriate
   *   condition for such fields must be explicitly added to the Conditions
   *   array passed to this function before signing.
   *
   * @example Presiging post data with a known key
   *   var params = {
   *     Bucket: 'bucket',
   *     Fields: {
   *       key: 'key'
   *     }
   *   };
   *   s3.createPresignedPost(params, function(err, data) {
   *     if (err) {
   *       console.error('Presigning post data encountered an error', err);
   *     } else {
   *       console.log('The post data is', data);
   *     }
   *   });
   *
   * @example Presigning post data with an interpolated key
   *   var params = {
   *     Bucket: 'bucket',
   *     Conditions: [
   *       ['starts-with', '$key', 'path/to/uploads/']
   *     ]
   *   };
   *   s3.createPresignedPost(params, function(err, data) {
   *     if (err) {
   *       console.error('Presigning post data encountered an error', err);
   *     } else {
   *       data.Fields.key = 'path/to/uploads/${filename}';
   *       console.log('The post data is', data);
   *     }
   *   });
   *
   * @note You must ensure that you have static or previously resolved
   *   credentials if you call this method synchronously (with no callback),
   *   otherwise it may not properly sign the request. If you cannot guarantee
   *   this (you are using an asynchronous credential provider, i.e., EC2
   *   IAM roles), you should always call this method with an asynchronous
   *   callback.
   *
   * @return [map]  If called synchronously (with no callback), returns a hash
   *                with the url to set as the form action and a hash of fields
   *                to include in the form.
   * @return [null] Nothing is returned if a callback is provided.
   *
   * @callback callback function (err, data)
   *  @param err [Error] the error object returned from the policy signer
   *  @param data [map] The data necessary to construct an HTML form
   *  @param data.url [String] The URL to use as the action of the form
   *  @param data.fields [map] A hash of fields that must be included in the
   *                           form for the upload to succeed. This hash will
   *                           include the signed POST policy, your access key
   *                           ID and security token (if present), etc. These
   *                           may be safely included as input elements of type
   *                           'hidden.'
   */
  createPresignedPost: function createPresignedPost(params, callback) {
    if (typeof params === 'function' && callback === undefined) {
      callback = params;
      params = null;
    }

    params = AWS.util.copy(params || {});
    var boundParams = this.config.params || {};
    var bucket = params.Bucket || boundParams.Bucket,
      self = this,
      config = this.config,
      endpoint = AWS.util.copy(this.endpoint);
    if (!config.s3BucketEndpoint) {
      endpoint.pathname = '/' + bucket;
    }

    function finalizePost() {
      return {
        url: AWS.util.urlFormat(endpoint),
        fields: self.preparePostFields(
          config.credentials,
          config.region,
          bucket,
          params.Fields,
          params.Conditions,
          params.Expires
        )
      };
    }

    if (callback) {
      config.getCredentials(function (err) {
        if (err) {
          callback(err);
        }

        callback(null, finalizePost());
      });
    } else {
      return finalizePost();
    }
  },

  /**
   * @api private
   */
  preparePostFields: function preparePostFields(
    credentials,
    region,
    bucket,
    fields,
    conditions,
    expiresInSeconds
  ) {
    var now = this.getSkewCorrectedDate();
    if (!credentials || !region || !bucket) {
      throw new Error('Unable to create a POST object policy without a bucket,'
        + ' region, and credentials');
    }
    fields = AWS.util.copy(fields || {});
    conditions = (conditions || []).slice(0);
    expiresInSeconds = expiresInSeconds || 3600;

    var signingDate = AWS.util.date.iso8601(now).replace(/[:\-]|\.\d{3}/g, '');
    var shortDate = signingDate.substr(0, 8);
    var scope = v4Credentials.createScope(shortDate, region, 's3');
    var credential = credentials.accessKeyId + '/' + scope;

    fields['bucket'] = bucket;
    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';
    fields['X-Amz-Credential'] = credential;
    fields['X-Amz-Date'] = signingDate;
    if (credentials.sessionToken) {
      fields['X-Amz-Security-Token'] = credentials.sessionToken;
    }
    for (var field in fields) {
      if (fields.hasOwnProperty(field)) {
        var condition = {};
        condition[field] = fields[field];
        conditions.push(condition);
      }
    }

    fields.Policy = this.preparePostPolicy(
      new Date(now.valueOf() + expiresInSeconds * 1000),
      conditions
    );
    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(
      v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true),
      fields.Policy,
      'hex'
    );

    return fields;
  },

  /**
   * @api private
   */
  preparePostPolicy: function preparePostPolicy(expiration, conditions) {
    return AWS.util.base64.encode(JSON.stringify({
      expiration: AWS.util.date.iso8601(expiration),
      conditions: conditions
    }));
  },

  /**
   * @api private
   */
  prepareSignedUrl: function prepareSignedUrl(request) {
    request.addListener('validate', request.service.noPresignedContentLength);
    request.removeListener('build', request.service.addContentType);
    if (!request.params.Body) {
      // no Content-MD5/SHA-256 if body is not provided
      request.removeListener('build', request.service.computeContentMd5);
    } else {
      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);
    }
  },

  /**
   * @api private
   * @param request
   */
  disableBodySigning: function disableBodySigning(request) {
    var headers = request.httpRequest.headers;
    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined
    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {
      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';
    }
  },

  /**
   * @api private
   */
  noPresignedContentLength: function noPresignedContentLength(request) {
    if (request.params.ContentLength !== undefined) {
      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',
        message: 'ContentLength is not supported in pre-signed URLs.'});
    }
  },

  createBucket: function createBucket(params, callback) {
    // When creating a bucket *outside* the classic region, the location
    // constraint must be set for the bucket and it must match the endpoint.
    // This chunk of code will set the location constraint param based
    // on the region (when possible), but it will not override a passed-in
    // location constraint.
    if (typeof params === 'function' || !params) {
      callback = callback || params;
      params = {};
    }
    var hostname = this.endpoint.hostname;
    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {
      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };
    }
    return this.makeRequest('createBucket', params, callback);
  },

  /**
   * @see AWS.S3.ManagedUpload
   * @overload upload(params = {}, [options], [callback])
   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent
   *   concurrent handling of parts if the payload is large enough. You can
   *   configure the concurrent queue size by setting `options`. Note that this
   *   is the only operation for which the SDK can retry requests with stream
   *   bodies.
   *
   *   @param (see AWS.S3.putObject)
   *   @option (see AWS.S3.ManagedUpload.constructor)
   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call
   *     `send()` or track progress.
   *   @example Uploading a stream object
   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};
   *     s3.upload(params, function(err, data) {
   *       console.log(err, data);
   *     });
   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb
   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};
   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};
   *     s3.upload(params, options, function(err, data) {
   *       console.log(err, data);
   *     });
   * @callback callback function(err, data)
   *   @param err [Error] an error or null if no error occurred.
   *   @param data [map] The response data from the successful upload:
   *   @param data.Location [String] the URL of the uploaded object
   *   @param data.ETag [String] the ETag of the uploaded object
   *   @param data.Bucket [String]  the bucket to which the object was uploaded
   *   @param data.Key [String] the key to which the object was uploaded
   */
  upload: function upload(params, options, callback) {
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = null;
    }

    options = options || {};
    options = AWS.util.merge(options || {}, {service: this, params: params});

    var uploader = new AWS.S3.ManagedUpload(options);
    if (typeof callback === 'function') uploader.send(callback);
    return uploader;
  }
});


/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.SQS.prototype, {
  /**
   * @api private
   */
  setupRequestListeners: function setupRequestListeners(request) {
    request.addListener('build', this.buildEndpoint);

    if (request.service.config.computeChecksums) {
      if (request.operation === 'sendMessage') {
        request.addListener('extractData', this.verifySendMessageChecksum);
      } else if (request.operation === 'sendMessageBatch') {
        request.addListener('extractData', this.verifySendMessageBatchChecksum);
      } else if (request.operation === 'receiveMessage') {
        request.addListener('extractData', this.verifyReceiveMessageChecksum);
      }
    }
  },

  /**
   * @api private
   */
  verifySendMessageChecksum: function verifySendMessageChecksum(response) {
    if (!response.data) return;

    var md5 = response.data.MD5OfMessageBody;
    var body = this.params.MessageBody;
    var calculatedMd5 = this.service.calculateChecksum(body);
    if (calculatedMd5 !== md5) {
      var msg = 'Got "' + response.data.MD5OfMessageBody +
        '", expecting "' + calculatedMd5 + '".';
      this.service.throwInvalidChecksumError(response,
        [response.data.MessageId], msg);
    }
  },

  /**
   * @api private
   */
  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {
    if (!response.data) return;

    var service = this.service;
    var entries = {};
    var errors = [];
    var messageIds = [];
    AWS.util.arrayEach(response.data.Successful, function (entry) {
      entries[entry.Id] = entry;
    });
    AWS.util.arrayEach(this.params.Entries, function (entry) {
      if (entries[entry.Id]) {
        var md5 = entries[entry.Id].MD5OfMessageBody;
        var body = entry.MessageBody;
        if (!service.isChecksumValid(md5, body)) {
          errors.push(entry.Id);
          messageIds.push(entries[entry.Id].MessageId);
        }
      }
    });

    if (errors.length > 0) {
      service.throwInvalidChecksumError(response, messageIds,
        'Invalid messages: ' + errors.join(', '));
    }
  },

  /**
   * @api private
   */
  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {
    if (!response.data) return;

    var service = this.service;
    var messageIds = [];
    AWS.util.arrayEach(response.data.Messages, function(message) {
      var md5 = message.MD5OfBody;
      var body = message.Body;
      if (!service.isChecksumValid(md5, body)) {
        messageIds.push(message.MessageId);
      }
    });

    if (messageIds.length > 0) {
      service.throwInvalidChecksumError(response, messageIds,
        'Invalid messages: ' + messageIds.join(', '));
    }
  },

  /**
   * @api private
   */
  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {
    response.error = AWS.util.error(new Error(), {
      retryable: true,
      code: 'InvalidChecksum',
      messageIds: ids,
      message: response.request.operation +
               ' returned an invalid MD5 response. ' + message
    });
  },

  /**
   * @api private
   */
  isChecksumValid: function isChecksumValid(checksum, data) {
    return this.calculateChecksum(data) === checksum;
  },

  /**
   * @api private
   */
  calculateChecksum: function calculateChecksum(data) {
    return AWS.util.crypto.md5(data, 'hex');
  },

  /**
   * @api private
   */
  buildEndpoint: function buildEndpoint(request) {
    var url = request.httpRequest.params.QueueUrl;
    if (url) {
      request.httpRequest.endpoint = new AWS.Endpoint(url);

      // signature version 4 requires the region name to be set,
      // sqs queue urls contain the region name
      var matches = request.httpRequest.endpoint.host.match(/^sqs\.(.+?)\./);
      if (matches) request.httpRequest.region = matches[1];
    }
  }
});


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.update(AWS.STS.prototype, {
  /**
   * @overload credentialsFrom(data, credentials = null)
   *   Creates a credentials object from STS response data containing
   *   credentials information. Useful for quickly setting AWS credentials.
   *
   *   @note This is a low-level utility function. If you want to load temporary
   *     credentials into your process for subsequent requests to AWS resources,
   *     you should use {AWS.TemporaryCredentials} instead.
   *   @param data [map] data retrieved from a call to {getFederatedToken},
   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.
   *   @param credentials [AWS.Credentials] an optional credentials object to
   *     fill instead of creating a new object. Useful when modifying an
   *     existing credentials object from a refresh call.
   *   @return [AWS.TemporaryCredentials] the set of temporary credentials
   *     loaded from a raw STS operation response.
   *   @example Using credentialsFrom to load global AWS credentials
   *     var sts = new AWS.STS();
   *     sts.getSessionToken(function (err, data) {
   *       if (err) console.log("Error getting credentials");
   *       else {
   *         AWS.config.credentials = sts.credentialsFrom(data);
   *       }
   *     });
   *   @see AWS.TemporaryCredentials
   */
  credentialsFrom: function credentialsFrom(data, credentials) {
    if (!data) return null;
    if (!credentials) credentials = new AWS.TemporaryCredentials();
    credentials.expired = false;
    credentials.accessKeyId = data.Credentials.AccessKeyId;
    credentials.secretAccessKey = data.Credentials.SecretAccessKey;
    credentials.sessionToken = data.Credentials.SessionToken;
    credentials.expireTime = data.Credentials.Expiration;
    return credentials;
  },

  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);
  },

  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);
  }
});


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

AWS.util.hideProperties(AWS, ['SimpleWorkflow']);

/**
 * @constant
 * @readonly
 * Backwards compatibility for access to the {AWS.SWF} service class.
 */
AWS.SimpleWorkflow = AWS.SWF;


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
var expiresHeader = 'presigned-expires';

/**
 * @api private
 */
function signedUrlBuilder(request) {
  var expires = request.httpRequest.headers[expiresHeader];
  var signerClass = request.service.getSignerClass(request);

  delete request.httpRequest.headers['User-Agent'];
  delete request.httpRequest.headers['X-Amz-User-Agent'];

  if (signerClass === AWS.Signers.V4) {
    if (expires > 604800) { // one week expiry is invalid
      var message = 'Presigning does not support expiry time greater ' +
                    'than a week with SigV4 signing.';
      throw AWS.util.error(new Error(), {
        code: 'InvalidExpiryTime', message: message, retryable: false
      });
    }
    request.httpRequest.headers[expiresHeader] = expires;
  } else if (signerClass === AWS.Signers.S3) {
    var now = request.service ? request.service.getSkewCorrectedDate() : AWS.util.date.getDate();
    request.httpRequest.headers[expiresHeader] = parseInt(
      AWS.util.date.unixTimestamp(now) + expires, 10).toString();
  } else {
    throw AWS.util.error(new Error(), {
      message: 'Presigning only supports S3 or SigV4 signing.',
      code: 'UnsupportedSigner', retryable: false
    });
  }
}

/**
 * @api private
 */
function signedUrlSigner(request) {
  var endpoint = request.httpRequest.endpoint;
  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);
  var queryParams = {};

  if (parsedUrl.search) {
    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));
  }

  AWS.util.each(request.httpRequest.headers, function (key, value) {
    if (key === expiresHeader) key = 'Expires';
    if (key.indexOf('x-amz-meta-') === 0) {
      // Delete existing, potentially not normalized key
      delete queryParams[key];
      key = key.toLowerCase();
    }
    queryParams[key] = value;
  });
  delete request.httpRequest.headers[expiresHeader];

  var auth = queryParams['Authorization'].split(' ');
  if (auth[0] === 'AWS') {
    auth = auth[1].split(':');
    queryParams['AWSAccessKeyId'] = auth[0];
    queryParams['Signature'] = auth[1];
  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing
    auth.shift();
    var rest = auth.join(' ');
    var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
    queryParams['X-Amz-Signature'] = signature;
    delete queryParams['Expires'];
  }
  delete queryParams['Authorization'];
  delete queryParams['Host'];

  // build URL
  endpoint.pathname = parsedUrl.pathname;
  endpoint.search = AWS.util.queryParamsToString(queryParams);
}

/**
 * @api private
 */
AWS.Signers.Presign = inherit({
  /**
   * @api private
   */
  sign: function sign(request, expireTime, callback) {
    request.httpRequest.headers[expiresHeader] = expireTime || 3600;
    request.on('build', signedUrlBuilder);
    request.on('sign', signedUrlSigner);
    request.removeListener('afterBuild',
      AWS.EventListeners.Core.SET_CONTENT_LENGTH);
    request.removeListener('afterBuild',
      AWS.EventListeners.Core.COMPUTE_SHA256);

    request.emit('beforePresign', [request]);

    if (callback) {
      request.build(function() {
        if (this.response.error) callback(this.response.error);
        else {
          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));
        }
      });
    } else {
      request.build();
      if (request.response.error) throw request.response.error;
      return AWS.util.urlFormat(request.httpRequest.endpoint);
    }
  }
});

module.exports = AWS.Signers.Presign;


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);

var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.RequestSigner = inherit({
  constructor: function RequestSigner(request) {
    this.request = request;
  },

  setServiceClientId: function setServiceClientId(id) {
    this.serviceClientId = id;
  },

  getServiceClientId: function getServiceClientId() {
    return this.serviceClientId;
  }
});

AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
  switch (version) {
    case 'v2': return AWS.Signers.V2;
    case 'v3': return AWS.Signers.V3;
    case 'v4': return AWS.Signers.V4;
    case 's3': return AWS.Signers.S3;
    case 'v3https': return AWS.Signers.V3Https;
  }
  throw new Error('Unknown signing version ' + version);
};

__webpack_require__(528);
__webpack_require__(66);
__webpack_require__(529);
__webpack_require__(530);
__webpack_require__(527);
__webpack_require__(525);


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
  /**
   * When building the stringToSign, these sub resource params should be
   * part of the canonical resource string with their NON-decoded values
   */
  subResources: {
    'acl': 1,
    'accelerate': 1,
    'analytics': 1,
    'cors': 1,
    'lifecycle': 1,
    'delete': 1,
    'inventory': 1,
    'location': 1,
    'logging': 1,
    'metrics': 1,
    'notification': 1,
    'partNumber': 1,
    'policy': 1,
    'requestPayment': 1,
    'replication': 1,
    'restore': 1,
    'tagging': 1,
    'torrent': 1,
    'uploadId': 1,
    'uploads': 1,
    'versionId': 1,
    'versioning': 1,
    'versions': 1,
    'website': 1
  },

  // when building the stringToSign, these querystring params should be
  // part of the canonical resource string with their NON-encoded values
  responseHeaders: {
    'response-content-type': 1,
    'response-content-language': 1,
    'response-expires': 1,
    'response-cache-control': 1,
    'response-content-disposition': 1,
    'response-content-encoding': 1
  },

  addAuthorization: function addAuthorization(credentials, date) {
    if (!this.request.headers['presigned-expires']) {
      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);
    }

    if (credentials.sessionToken) {
      // presigned URLs require this header to be lowercased
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }

    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;

    this.request.headers['Authorization'] = auth;
  },

  stringToSign: function stringToSign() {
    var r = this.request;

    var parts = [];
    parts.push(r.method);
    parts.push(r.headers['Content-MD5'] || '');
    parts.push(r.headers['Content-Type'] || '');

    // This is the "Date" header, but we use X-Amz-Date.
    // The S3 signing mechanism requires us to pass an empty
    // string for this Date header regardless.
    parts.push(r.headers['presigned-expires'] || '');

    var headers = this.canonicalizedAmzHeaders();
    if (headers) parts.push(headers);
    parts.push(this.canonicalizedResource());

    return parts.join('\n');

  },

  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {

    var amzHeaders = [];

    AWS.util.each(this.request.headers, function (name) {
      if (name.match(/^x-amz-/i))
        amzHeaders.push(name);
    });

    amzHeaders.sort(function (a, b) {
      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
    });

    var parts = [];
    AWS.util.arrayEach.call(this, amzHeaders, function (name) {
      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));
    });

    return parts.join('\n');

  },

  canonicalizedResource: function canonicalizedResource() {

    var r = this.request;

    var parts = r.path.split('?');
    var path = parts[0];
    var querystring = parts[1];

    var resource = '';

    if (r.virtualHostedBucket)
      resource += '/' + r.virtualHostedBucket;

    resource += path;

    if (querystring) {

      // collect a list of sub resources and query params that need to be signed
      var resources = [];

      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {
        var name = param.split('=')[0];
        var value = param.split('=')[1];
        if (this.subResources[name] || this.responseHeaders[name]) {
          var subresource = { name: name };
          if (value !== undefined) {
            if (this.subResources[name]) {
              subresource.value = value;
            } else {
              subresource.value = decodeURIComponent(value);
            }
          }
          resources.push(subresource);
        }
      });

      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });

      if (resources.length) {

        querystring = [];
        AWS.util.arrayEach(resources, function (res) {
          if (res.value === undefined) {
            querystring.push(res.name);
          } else {
            querystring.push(res.name + '=' + res.value);
          }
        });

        resource += '?' + querystring.join('&');
      }

    }

    return resource;

  },

  sign: function sign(secret, string) {
    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');
  }
});

module.exports = AWS.Signers.S3;


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    if (!date) date = AWS.util.date.getDate();

    var r = this.request;

    r.params.Timestamp = AWS.util.date.iso8601(date);
    r.params.SignatureVersion = '2';
    r.params.SignatureMethod = 'HmacSHA256';
    r.params.AWSAccessKeyId = credentials.accessKeyId;

    if (credentials.sessionToken) {
      r.params.SecurityToken = credentials.sessionToken;
    }

    delete r.params.Signature; // delete old Signature for re-signing
    r.params.Signature = this.signature(credentials);

    r.body = AWS.util.queryParamsToString(r.params);
    r.headers['Content-Length'] = r.body.length;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push(this.request.endpoint.host.toLowerCase());
    parts.push(this.request.pathname());
    parts.push(AWS.util.queryParamsToString(this.request.params));
    return parts.join('\n');
  }

});

module.exports = AWS.Signers.V2;


/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var inherit = AWS.util.inherit;

__webpack_require__(66);

/**
 * @api private
 */
AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
  authorization: function authorization(credentials) {
    return 'AWS3-HTTPS ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'Signature=' + this.signature(credentials);
  },

  stringToSign: function stringToSign() {
    return this.request.headers['X-Amz-Date'];
  }
});

module.exports = AWS.Signers.V3Https;


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var v4Credentials = __webpack_require__(67);
var inherit = AWS.util.inherit;

/**
 * @api private
 */
var expiresHeader = 'presigned-expires';

/**
 * @api private
 */
AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
  constructor: function V4(request, serviceName, options) {
    AWS.Signers.RequestSigner.call(this, request);
    this.serviceName = serviceName;
    options = options || {};
    this.signatureCache = typeof options.signatureCache === 'boolean' ? options.signatureCache : true;
    this.operation = options.operation;
  },

  algorithm: 'AWS4-HMAC-SHA256',

  addAuthorization: function addAuthorization(credentials, date) {
    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');

    if (this.isPresigned()) {
      this.updateForPresigned(credentials, datetime);
    } else {
      this.addHeaders(credentials, datetime);
    }

    this.request.headers['Authorization'] =
      this.authorization(credentials, datetime);
  },

  addHeaders: function addHeaders(credentials, datetime) {
    this.request.headers['X-Amz-Date'] = datetime;
    if (credentials.sessionToken) {
      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
    }
  },

  updateForPresigned: function updateForPresigned(credentials, datetime) {
    var credString = this.credentialString(datetime);
    var qs = {
      'X-Amz-Date': datetime,
      'X-Amz-Algorithm': this.algorithm,
      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,
      'X-Amz-Expires': this.request.headers[expiresHeader],
      'X-Amz-SignedHeaders': this.signedHeaders()
    };

    if (credentials.sessionToken) {
      qs['X-Amz-Security-Token'] = credentials.sessionToken;
    }

    if (this.request.headers['Content-Type']) {
      qs['Content-Type'] = this.request.headers['Content-Type'];
    }
    if (this.request.headers['Content-MD5']) {
      qs['Content-MD5'] = this.request.headers['Content-MD5'];
    }
    if (this.request.headers['Cache-Control']) {
      qs['Cache-Control'] = this.request.headers['Cache-Control'];
    }

    // need to pull in any other X-Amz-* headers
    AWS.util.each.call(this, this.request.headers, function(key, value) {
      if (key === expiresHeader) return;
      if (this.isSignableHeader(key)) {
        var lowerKey = key.toLowerCase();
        // Metadata should be normalized
        if (lowerKey.indexOf('x-amz-meta-') === 0) {
          qs[lowerKey] = value;
        } else if (lowerKey.indexOf('x-amz-') === 0) {
          qs[key] = value;
        }
      }
    });

    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';
    this.request.path += sep + AWS.util.queryParamsToString(qs);
  },

  authorization: function authorization(credentials, datetime) {
    var parts = [];
    var credString = this.credentialString(datetime);
    parts.push(this.algorithm + ' Credential=' +
      credentials.accessKeyId + '/' + credString);
    parts.push('SignedHeaders=' + this.signedHeaders());
    parts.push('Signature=' + this.signature(credentials, datetime));
    return parts.join(', ');
  },

  signature: function signature(credentials, datetime) {
    var signingKey = v4Credentials.getSigningKey(
      credentials,
      datetime.substr(0, 8),
      this.request.region,
      this.serviceName,
      this.signatureCache
    );
    return AWS.util.crypto.hmac(signingKey, this.stringToSign(datetime), 'hex');
  },

  stringToSign: function stringToSign(datetime) {
    var parts = [];
    parts.push('AWS4-HMAC-SHA256');
    parts.push(datetime);
    parts.push(this.credentialString(datetime));
    parts.push(this.hexEncodedHash(this.canonicalString()));
    return parts.join('\n');
  },

  canonicalString: function canonicalString() {
    var parts = [], pathname = this.request.pathname();
    if (this.serviceName !== 's3') pathname = AWS.util.uriEscapePath(pathname);

    parts.push(this.request.method);
    parts.push(pathname);
    parts.push(this.request.search());
    parts.push(this.canonicalHeaders() + '\n');
    parts.push(this.signedHeaders());
    parts.push(this.hexEncodedBodyHash());
    return parts.join('\n');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = [];
    AWS.util.each.call(this, this.request.headers, function (key, item) {
      headers.push([key, item]);
    });
    headers.sort(function (a, b) {
      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
    });
    var parts = [];
    AWS.util.arrayEach.call(this, headers, function (item) {
      var key = item[0].toLowerCase();
      if (this.isSignableHeader(key)) {
        var value = item[1];
        if (typeof value === 'undefined' || value === null || typeof value.toString !== 'function') {
          throw AWS.util.error(new Error('Header ' + key + ' contains invalid value'), {
            code: 'InvalidHeader'
          });
        }
        parts.push(key + ':' +
          this.canonicalHeaderValues(value.toString()));
      }
    });
    return parts.join('\n');
  },

  canonicalHeaderValues: function canonicalHeaderValues(values) {
    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
  },

  signedHeaders: function signedHeaders() {
    var keys = [];
    AWS.util.each.call(this, this.request.headers, function (key) {
      key = key.toLowerCase();
      if (this.isSignableHeader(key)) keys.push(key);
    });
    return keys.sort().join(';');
  },

  credentialString: function credentialString(datetime) {
    return v4Credentials.createScope(
      datetime.substr(0, 8),
      this.request.region,
      this.serviceName
    );
  },

  hexEncodedHash: function hash(string) {
    return AWS.util.crypto.sha256(string, 'hex');
  },

  hexEncodedBodyHash: function hexEncodedBodyHash() {
    var request = this.request;
    if (this.isPresigned() && this.serviceName === 's3' && !request.body) {
      return 'UNSIGNED-PAYLOAD';
    } else if (request.headers['X-Amz-Content-Sha256']) {
      return request.headers['X-Amz-Content-Sha256'];
    } else {
      return this.hexEncodedHash(this.request.body || '');
    }
  },

  unsignableHeaders: [
    'authorization',
    'content-type',
    'content-length',
    'user-agent',
    expiresHeader,
    'expect',
    'x-amzn-trace-id'
  ],

  isSignableHeader: function isSignableHeader(key) {
    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;
    return this.unsignableHeaders.indexOf(key) < 0;
  },

  isPresigned: function isPresigned() {
    return this.request.headers[expiresHeader] ? true : false;
  }

});

module.exports = AWS.Signers.V4;


/***/ }),
/* 531 */
/***/ (function(module, exports) {

function AcceptorStateMachine(states, state) {
  this.currentState = state || null;
  this.states = states || {};
}

AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
  if (typeof finalState === 'function') {
    inputError = bindObject; bindObject = done;
    done = finalState; finalState = null;
  }

  var self = this;
  var state = self.states[self.currentState];
  state.fn.call(bindObject || self, inputError, function(err) {
    if (err) {
      if (state.fail) self.currentState = state.fail;
      else return done ? done.call(bindObject, err) : null;
    } else {
      if (state.accept) self.currentState = state.accept;
      else return done ? done.call(bindObject) : null;
    }
    if (self.currentState === finalState) {
      return done ? done.call(bindObject, err) : null;
    }

    self.runTo(finalState, done, bindObject, err);
  });
};

AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {
  if (typeof acceptState === 'function') {
    fn = acceptState; acceptState = null; failState = null;
  } else if (typeof failState === 'function') {
    fn = failState; failState = null;
  }

  if (!this.currentState) this.currentState = name;
  this.states[name] = { accept: acceptState, fail: failState, fn: fn };
  return this;
};

module.exports = AcceptorStateMachine;


/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

var util = __webpack_require__(2);
var builder = __webpack_require__(96);

function XmlBuilder() { }

XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
  var xml = builder.create(rootElement);
  applyNamespaces(xml, shape);
  serialize(xml, params, shape);
  return xml.children.length > 0 || noEmpty ? xml.root().toString() : '';
};

function serialize(xml, value, shape) {
  switch (shape.type) {
    case 'structure': return serializeStructure(xml, value, shape);
    case 'map': return serializeMap(xml, value, shape);
    case 'list': return serializeList(xml, value, shape);
    default: return serializeScalar(xml, value, shape);
  }
}

function serializeStructure(xml, params, shape) {
  util.arrayEach(shape.memberNames, function(memberName) {
    var memberShape = shape.members[memberName];
    if (memberShape.location !== 'body') return;

    var value = params[memberName];
    var name = memberShape.name;
    if (value !== undefined && value !== null) {
      if (memberShape.isXmlAttribute) {
        xml.att(name, value);
      } else if (memberShape.flattened) {
        serialize(xml, value, memberShape);
      } else {
        var element = xml.ele(name);
        applyNamespaces(element, memberShape);
        serialize(element, value, memberShape);
      }
    }
  });
}

function serializeMap(xml, map, shape) {
  var xmlKey = shape.key.name || 'key';
  var xmlValue = shape.value.name || 'value';

  util.each(map, function(key, value) {
    var entry = xml.ele(shape.flattened ? shape.name : 'entry');
    serialize(entry.ele(xmlKey), key, shape.key);
    serialize(entry.ele(xmlValue), value, shape.value);
  });
}

function serializeList(xml, list, shape) {
  if (shape.flattened) {
    util.arrayEach(list, function(value) {
      var name = shape.member.name || shape.name;
      var element = xml.ele(name);
      serialize(element, value, shape.member);
    });
  } else {
    util.arrayEach(list, function(value) {
      var name = shape.member.name || 'member';
      var element = xml.ele(name);
      serialize(element, value, shape.member);
    });
  }
}

function serializeScalar(xml, value, shape) {
  xml.txt(shape.toWireFormat(value));
}

function applyNamespaces(xml, shape) {
  var uri, prefix = 'xmlns';
  if (shape.xmlNamespaceUri) {
    uri = shape.xmlNamespaceUri;
    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;
  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {
    uri = shape.api.xmlNamespaceUri;
  }

  if (uri) xml.att(prefix, uri);
}

module.exports = XmlBuilder;


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

var AWS = __webpack_require__(0);
var util = AWS.util;
var Shape = AWS.Model.Shape;

var xml2js = __webpack_require__(656);

/**
 * @api private
 */
var options = {  // options passed to xml2js parser
  explicitCharkey: false, // undocumented
  trim: false,            // trim the leading/trailing whitespace from text nodes
  normalize: false,       // trim interior whitespace inside text nodes
  explicitRoot: false,    // return the root node in the resulting object?
  emptyTag: null,         // the default value for empty nodes
  explicitArray: true,    // always put child nodes in an array
  ignoreAttrs: false,     // ignore attributes, only create text nodes
  mergeAttrs: false,      // merge attributes and child elements
  validator: null         // a callable validator
};

function NodeXmlParser() { }

NodeXmlParser.prototype.parse = function(xml, shape) {
  shape = shape || {};

  var result = null;
  var error = null;

  var parser = new xml2js.Parser(options);
  parser.parseString(xml, function (e, r) {
    error = e;
    result = r;
  });

  if (result) {
    var data = parseXml(result, shape);
    if (result.ResponseMetadata) {
      data.ResponseMetadata = parseXml(result.ResponseMetadata[0], {});
    }
    return data;
  } else if (error) {
    throw util.error(error, {code: 'XMLParserError', retryable: true});
  } else { // empty xml document
    return parseXml({}, shape);
  }
};

function parseXml(xml, shape) {
  switch (shape.type) {
    case 'structure': return parseStructure(xml, shape);
    case 'map': return parseMap(xml, shape);
    case 'list': return parseList(xml, shape);
    case undefined: case null: return parseUnknown(xml);
    default: return parseScalar(xml, shape);
  }
}

function parseStructure(xml, shape) {
  var data = {};
  if (xml === null) return data;

  util.each(shape.members, function(memberName, memberShape) {
    var xmlName = memberShape.name;
    if (Object.prototype.hasOwnProperty.call(xml, xmlName) && Array.isArray(xml[xmlName])) {
      var xmlChild = xml[xmlName];
      if (!memberShape.flattened) xmlChild = xmlChild[0];

      data[memberName] = parseXml(xmlChild, memberShape);
    } else if (memberShape.isXmlAttribute &&
               xml.$ && Object.prototype.hasOwnProperty.call(xml.$, xmlName)) {
      data[memberName] = parseScalar(xml.$[xmlName], memberShape);
    } else if (memberShape.type === 'list') {
      data[memberName] = memberShape.defaultValue;
    }
  });

  return data;
}

function parseMap(xml, shape) {
  var data = {};
  if (xml === null) return data;

  var xmlKey = shape.key.name || 'key';
  var xmlValue = shape.value.name || 'value';
  var iterable = shape.flattened ? xml : xml.entry;

  if (Array.isArray(iterable)) {
    util.arrayEach(iterable, function(child) {
      data[child[xmlKey][0]] = parseXml(child[xmlValue][0], shape.value);
    });
  }

  return data;
}

function parseList(xml, shape) {
  var data = [];
  var name = shape.member.name || 'member';
  if (shape.flattened) {
    util.arrayEach(xml, function(xmlChild) {
      data.push(parseXml(xmlChild, shape.member));
    });
  } else if (xml && Array.isArray(xml[name])) {
    util.arrayEach(xml[name], function(child) {
      data.push(parseXml(child, shape.member));
    });
  }

  return data;
}

function parseScalar(text, shape) {
  if (text && text.$ && text.$.encoding === 'base64') {
    shape = new Shape.create({type: text.$.encoding});
  }
  if (text && text._) text = text._;

  if (typeof shape.toType === 'function') {
    return shape.toType(text);
  } else {
    return text;
  }
}

function parseUnknown(xml) {
  if (xml === undefined || xml === null) return '';
  if (typeof xml === 'string') return xml;

  // parse a list
  if (Array.isArray(xml)) {
    var arr = [];
    for (i = 0; i < xml.length; i++) {
      arr.push(parseXml(xml[i], {}));
    }
    return arr;
  }

  // empty object
  var keys = Object.keys(xml), i;
  if (keys.length === 0 || keys === ['$']) {
    return {};
  }

  // object, parse as structure
  var data = {};
  for (i = 0; i < keys.length; i++) {
    var key = keys[i], value = xml[key];
    if (key === '$') continue;
    if (value.length > 1) { // this member is a list
      data[key] = parseList(value, {member: {}});
    } else { // this member is a single item
      data[key] = parseXml(value[0], {});
    }
  }
  return data;
}

module.exports = NodeXmlParser;


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;

Object.defineProperty(exports, "__esModule", {
   value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* compromise v11.1.0
   github.com/nlp-compromise/compromise
   MIT
*/

!function (t) {
   if ("object" == ( false ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = t();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {
      var e;e = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, e.nlp = t();
   }
}(function () {
   var t;return function t(e, r, n) {
      function i(a, s) {
         var u, l, c;if (!r[a]) {
            if (!e[a]) {
               if (u = "function" == typeof require && require, !s && u) return require(a, !0);if (o) return o(a, !0);throw l = Error("Cannot find module '" + a + "'"), l.code = "MODULE_NOT_FOUND", l;
            }c = r[a] = { exports: {} }, e[a][0].call(c.exports, function (t) {
               var r = e[a][1][t];return i(r ? r : t);
            }, c, c.exports, t, e, r, n);
         }return r[a].exports;
      }var a,
          o = "function" == typeof require && require;for (a = 0; a < n.length; a++) {
         i(n[a]);
      }return i;
   }({ 1: [function (e, r, n) {
         (function (i) {
            !function (e) {
               if ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && void 0 !== r) r.exports = e();else if ("function" == typeof t && t.amd) t([], e);else {
                  var a;a = "undefined" != typeof window ? window : void 0 !== i ? i : "undefined" != typeof self ? self : this, a.unpack = e();
               }
            }(function () {
               return function t(r, n, i) {
                  function a(s, u) {
                     var l, c, h;if (!n[s]) {
                        if (!r[s]) {
                           if (l = "function" == typeof e && e, !u && l) return l(s, !0);if (o) return o(s, !0);throw c = Error("Cannot find module '" + s + "'"), c.code = "MODULE_NOT_FOUND", c;
                        }h = n[s] = { exports: {} }, r[s][0].call(h.exports, function (t) {
                           var e = r[s][1][t];return a(e ? e : t);
                        }, h, h.exports, t, r, n, i);
                     }return n[s].exports;
                  }for (var o = "function" == typeof e && e, s = 0; s < i.length; s++) {
                     a(i[s]);
                  }return a;
               }({ 1: [function (t, e, r) {
                     "use strict";
                     var n = 36,
                         i = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                         a = i.split("").reduce(function (t, e, r) {
                        return t[e] = r, t;
                     }, {}),
                         o = function o(t) {
                        var e, r, a, o;if (void 0 !== i[t]) return i[t];for (e = 1, r = n, a = ""; t >= r; t -= r, e++, r *= n) {}for (; e--;) {
                           o = t % n, a = String.fromCharCode((10 > o ? 48 : 55) + o) + a, t = (t - o) / n;
                        }return a;
                     },
                         s = function s(t) {
                        var e, r, i, o, s, u;if (void 0 !== a[t]) return a[t];for (e = 0, r = 1, i = n, o = 1; r < t.length; e += i, r++, i *= n) {}for (s = t.length - 1; s >= 0; s--, o *= n) {
                           u = t.charCodeAt(s) - 48, u > 10 && (u -= 7), e += u * o;
                        }return e;
                     };e.exports = { toAlphaCode: o, fromAlphaCode: s };
                  }, {}], 2: [function (t, e, r) {
                     "use strict";
                     var n = t("./unpack");e.exports = function (t) {
                        var e = t.split("|").reduce(function (t, e) {
                           var r = e.split("¦");return t[r[0]] = r[1], t;
                        }, {}),
                            r = {};return Object.keys(e).forEach(function (t) {
                           var i,
                               a,
                               o = n(e[t]);for ("true" === t && (t = !0), i = 0; i < o.length; i++) {
                              a = o[i], r.hasOwnProperty(a) === !0 ? Array.isArray(r[a]) === !1 ? r[a] = [r[a], t] : r[a].push(t) : r[a] = t;
                           }
                        }), r;
                     };
                  }, { "./unpack": 4 }], 3: [function (t, e, r) {
                     "use strict";
                     var n = t("../encoding");e.exports = function (t) {
                        var e, r, i;for (e = RegExp("([0-9A-Z]+):([0-9A-Z]+)"), r = 0; r < t.nodes.length; r++) {
                           if (i = e.exec(t.nodes[r]), !i) {
                              t.symCount = r;break;
                           }t.syms[n.fromAlphaCode(i[1])] = n.fromAlphaCode(i[2]);
                        }t.nodes = t.nodes.slice(t.symCount, t.nodes.length);
                     };
                  }, { "../encoding": 1 }], 4: [function (t, e, r) {
                     "use strict";
                     var n = t("./symbols"),
                         i = t("../encoding"),
                         a = function a(t, e, r) {
                        var n = i.fromAlphaCode(e);return n < t.symCount ? t.syms[n] : r + n + 1 - t.symCount;
                     },
                         o = function o(t) {
                        var e = [],
                            r = function r(n, i) {
                           var o,
                               s,
                               u,
                               l,
                               c,
                               h,
                               f = t.nodes[n];for ("!" === f[0] && (e.push(i), f = f.slice(1)), o = f.split(/([A-Z0-9,]+)/g), s = 0; s < o.length; s += 2) {
                              u = o[s], l = o[s + 1], u && (c = i + u, "," !== l && void 0 !== l ? (h = a(t, l, n), r(h, c)) : e.push(c));
                           }
                        };return r(0, ""), e;
                     },
                         s = function s(t) {
                        var e = { nodes: t.split(";"), syms: [], symCount: 0 };return t.match(":") && n(e), o(e);
                     };e.exports = s;
                  }, { "../encoding": 1, "./symbols": 3 }] }, {}, [2])(2);
            }), function (e) {
               if ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && void 0 !== r) r.exports = e();else if ("function" == typeof t && t.amd) t([], e);else {
                  var a;a = "undefined" != typeof window ? window : void 0 !== i ? i : "undefined" != typeof self ? self : this, a.unpack = e();
               }
            }(function () {
               return function t(r, n, i) {
                  function a(s, u) {
                     var l, c, h;if (!n[s]) {
                        if (!r[s]) {
                           if (l = "function" == typeof e && e, !u && l) return l(s, !0);if (o) return o(s, !0);throw c = Error("Cannot find module '" + s + "'"), c.code = "MODULE_NOT_FOUND", c;
                        }h = n[s] = { exports: {} }, r[s][0].call(h.exports, function (t) {
                           var e = r[s][1][t];return a(e ? e : t);
                        }, h, h.exports, t, r, n, i);
                     }return n[s].exports;
                  }for (var o = "function" == typeof e && e, s = 0; s < i.length; s++) {
                     a(i[s]);
                  }return a;
               }({ 1: [function (t, e, r) {
                     "use strict";
                     var n = 36,
                         i = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                         a = i.split("").reduce(function (t, e, r) {
                        return t[e] = r, t;
                     }, {}),
                         o = function o(t) {
                        var e, r, a, o;if (void 0 !== i[t]) return i[t];for (e = 1, r = n, a = ""; t >= r; t -= r, e++, r *= n) {}for (; e--;) {
                           o = t % n, a = String.fromCharCode((10 > o ? 48 : 55) + o) + a, t = (t - o) / n;
                        }return a;
                     },
                         s = function s(t) {
                        var e, r, i, o, s, u;if (void 0 !== a[t]) return a[t];for (e = 0, r = 1, i = n, o = 1; r < t.length; e += i, r++, i *= n) {}for (s = t.length - 1; s >= 0; s--, o *= n) {
                           u = t.charCodeAt(s) - 48, u > 10 && (u -= 7), e += u * o;
                        }return e;
                     };e.exports = { toAlphaCode: o, fromAlphaCode: s };
                  }, {}], 2: [function (t, e, r) {
                     "use strict";
                     var n = t("./unpack");e.exports = function (t) {
                        var e = t.split("|").reduce(function (t, e) {
                           var r = e.split("¦");return t[r[0]] = r[1], t;
                        }, {}),
                            r = {};return Object.keys(e).forEach(function (t) {
                           var i,
                               a,
                               o = n(e[t]);for ("true" === t && (t = !0), i = 0; i < o.length; i++) {
                              a = o[i], r.hasOwnProperty(a) === !0 ? Array.isArray(r[a]) === !1 ? r[a] = [r[a], t] : r[a].push(t) : r[a] = t;
                           }
                        }), r;
                     };
                  }, { "./unpack": 4 }], 3: [function (t, e, r) {
                     "use strict";
                     var n = t("../encoding");e.exports = function (t) {
                        var e, r, i;for (e = RegExp("([0-9A-Z]+):([0-9A-Z]+)"), r = 0; r < t.nodes.length; r++) {
                           if (i = e.exec(t.nodes[r]), !i) {
                              t.symCount = r;break;
                           }t.syms[n.fromAlphaCode(i[1])] = n.fromAlphaCode(i[2]);
                        }t.nodes = t.nodes.slice(t.symCount, t.nodes.length);
                     };
                  }, { "../encoding": 1 }], 4: [function (t, e, r) {
                     "use strict";
                     var n = t("./symbols"),
                         i = t("../encoding"),
                         a = function a(t, e, r) {
                        var n = i.fromAlphaCode(e);return n < t.symCount ? t.syms[n] : r + n + 1 - t.symCount;
                     },
                         o = function o(t) {
                        var e = [],
                            r = function r(n, i) {
                           var o,
                               s,
                               u,
                               l,
                               c,
                               h,
                               f = t.nodes[n];for ("!" === f[0] && (e.push(i), f = f.slice(1)), o = f.split(/([A-Z0-9,]+)/g), s = 0; s < o.length; s += 2) {
                              u = o[s], l = o[s + 1], u && (c = i + u, "," !== l && void 0 !== l ? (h = a(t, l, n), r(h, c)) : e.push(c));
                           }
                        };return r(0, ""), e;
                     },
                         s = function s(t) {
                        var e = { nodes: t.split(";"), syms: [], symCount: 0 };return t.match(":") && n(e), o(e);
                     };e.exports = s;
                  }, { "../encoding": 1, "./symbols": 3 }] }, {}, [2])(2);
            }), function (e) {
               if ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && void 0 !== r) r.exports = e();else if ("function" == typeof t && t.amd) t([], e);else {
                  var a;a = "undefined" != typeof window ? window : void 0 !== i ? i : "undefined" != typeof self ? self : this, a.unpack = e();
               }
            }(function () {
               return function t(r, n, i) {
                  function a(s, u) {
                     var l, c, h;if (!n[s]) {
                        if (!r[s]) {
                           if (l = "function" == typeof e && e, !u && l) return l(s, !0);if (o) return o(s, !0);throw c = Error("Cannot find module '" + s + "'"), c.code = "MODULE_NOT_FOUND", c;
                        }h = n[s] = { exports: {} }, r[s][0].call(h.exports, function (t) {
                           var e = r[s][1][t];return a(e ? e : t);
                        }, h, h.exports, t, r, n, i);
                     }return n[s].exports;
                  }for (var o = "function" == typeof e && e, s = 0; s < i.length; s++) {
                     a(i[s]);
                  }return a;
               }({ 1: [function (t, e, r) {
                     "use strict";
                     var n = 36,
                         i = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                         a = i.split("").reduce(function (t, e, r) {
                        return t[e] = r, t;
                     }, {}),
                         o = function o(t) {
                        var e, r, a, o;if (void 0 !== i[t]) return i[t];for (e = 1, r = n, a = ""; t >= r; t -= r, e++, r *= n) {}for (; e--;) {
                           o = t % n, a = String.fromCharCode((10 > o ? 48 : 55) + o) + a, t = (t - o) / n;
                        }return a;
                     },
                         s = function s(t) {
                        var e, r, i, o, s, u;if (void 0 !== a[t]) return a[t];for (e = 0, r = 1, i = n, o = 1; r < t.length; e += i, r++, i *= n) {}for (s = t.length - 1; s >= 0; s--, o *= n) {
                           u = t.charCodeAt(s) - 48, u > 10 && (u -= 7), e += u * o;
                        }return e;
                     };e.exports = { toAlphaCode: o, fromAlphaCode: s };
                  }, {}], 2: [function (t, e, r) {
                     "use strict";
                     var n = t("./unpack");e.exports = function (t) {
                        var e = t.split("|").reduce(function (t, e) {
                           var r = e.split("¦");return t[r[0]] = r[1], t;
                        }, {}),
                            r = {};return Object.keys(e).forEach(function (t) {
                           var i,
                               a,
                               o = n(e[t]);for ("true" === t && (t = !0), i = 0; i < o.length; i++) {
                              a = o[i], r.hasOwnProperty(a) === !0 ? Array.isArray(r[a]) === !1 ? r[a] = [r[a], t] : r[a].push(t) : r[a] = t;
                           }
                        }), r;
                     };
                  }, { "./unpack": 4 }], 3: [function (t, e, r) {
                     "use strict";
                     var n = t("../encoding");e.exports = function (t) {
                        var e, r, i;for (e = RegExp("([0-9A-Z]+):([0-9A-Z]+)"), r = 0; r < t.nodes.length; r++) {
                           if (i = e.exec(t.nodes[r]), !i) {
                              t.symCount = r;break;
                           }t.syms[n.fromAlphaCode(i[1])] = n.fromAlphaCode(i[2]);
                        }t.nodes = t.nodes.slice(t.symCount, t.nodes.length);
                     };
                  }, { "../encoding": 1 }], 4: [function (t, e, r) {
                     "use strict";
                     var n = t("./symbols"),
                         i = t("../encoding"),
                         a = function a(t, e, r) {
                        var n = i.fromAlphaCode(e);return n < t.symCount ? t.syms[n] : r + n + 1 - t.symCount;
                     },
                         o = function o(t) {
                        var e = [],
                            r = function r(n, i) {
                           var o,
                               s,
                               u,
                               l,
                               c,
                               h,
                               f = t.nodes[n];for ("!" === f[0] && (e.push(i), f = f.slice(1)), o = f.split(/([A-Z0-9,]+)/g), s = 0; s < o.length; s += 2) {
                              u = o[s], l = o[s + 1], u && (c = i + u, "," !== l && void 0 !== l ? (h = a(t, l, n), r(h, c)) : e.push(c));
                           }
                        };return r(0, ""), e;
                     },
                         s = function s(t) {
                        var e = { nodes: t.split(";"), syms: [], symCount: 0 };return t.match(":") && n(e), o(e);
                     };e.exports = s;
                  }, { "../encoding": 1, "./symbols": 3 }] }, {}, [2])(2);
            }), function (e) {
               if ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && void 0 !== r) r.exports = e();else if ("function" == typeof t && t.amd) t([], e);else {
                  var a;a = "undefined" != typeof window ? window : void 0 !== i ? i : "undefined" != typeof self ? self : this, a.unpack = e();
               }
            }(function () {
               return function t(r, n, i) {
                  function a(s, u) {
                     var l, c, h;if (!n[s]) {
                        if (!r[s]) {
                           if (l = "function" == typeof e && e, !u && l) return l(s, !0);if (o) return o(s, !0);throw c = Error("Cannot find module '" + s + "'"), c.code = "MODULE_NOT_FOUND", c;
                        }h = n[s] = { exports: {} }, r[s][0].call(h.exports, function (t) {
                           var e = r[s][1][t];return a(e ? e : t);
                        }, h, h.exports, t, r, n, i);
                     }return n[s].exports;
                  }for (var o = "function" == typeof e && e, s = 0; s < i.length; s++) {
                     a(i[s]);
                  }return a;
               }({ 1: [function (t, e, r) {
                     "use strict";
                     var n = 36,
                         i = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                         a = i.split("").reduce(function (t, e, r) {
                        return t[e] = r, t;
                     }, {}),
                         o = function o(t) {
                        var e, r, a, o;if (void 0 !== i[t]) return i[t];for (e = 1, r = n, a = ""; t >= r; t -= r, e++, r *= n) {}for (; e--;) {
                           o = t % n, a = String.fromCharCode((10 > o ? 48 : 55) + o) + a, t = (t - o) / n;
                        }return a;
                     },
                         s = function s(t) {
                        var e, r, i, o, s, u;if (void 0 !== a[t]) return a[t];for (e = 0, r = 1, i = n, o = 1; r < t.length; e += i, r++, i *= n) {}for (s = t.length - 1; s >= 0; s--, o *= n) {
                           u = t.charCodeAt(s) - 48, u > 10 && (u -= 7), e += u * o;
                        }return e;
                     };e.exports = { toAlphaCode: o, fromAlphaCode: s };
                  }, {}], 2: [function (t, e, r) {
                     "use strict";
                     var n = t("./unpack");e.exports = function (t) {
                        var e = t.split("|").reduce(function (t, e) {
                           var r = e.split("¦");return t[r[0]] = r[1], t;
                        }, {}),
                            r = {};return Object.keys(e).forEach(function (t) {
                           var i,
                               a,
                               o = n(e[t]);for ("true" === t && (t = !0), i = 0; i < o.length; i++) {
                              a = o[i], r.hasOwnProperty(a) === !0 ? Array.isArray(r[a]) === !1 ? r[a] = [r[a], t] : r[a].push(t) : r[a] = t;
                           }
                        }), r;
                     };
                  }, { "./unpack": 4 }], 3: [function (t, e, r) {
                     "use strict";
                     var n = t("../encoding");e.exports = function (t) {
                        var e, r, i;for (e = RegExp("([0-9A-Z]+):([0-9A-Z]+)"), r = 0; r < t.nodes.length; r++) {
                           if (i = e.exec(t.nodes[r]), !i) {
                              t.symCount = r;break;
                           }t.syms[n.fromAlphaCode(i[1])] = n.fromAlphaCode(i[2]);
                        }t.nodes = t.nodes.slice(t.symCount, t.nodes.length);
                     };
                  }, { "../encoding": 1 }], 4: [function (t, e, r) {
                     "use strict";
                     var n = t("./symbols"),
                         i = t("../encoding"),
                         a = function a(t, e, r) {
                        var n = i.fromAlphaCode(e);return n < t.symCount ? t.syms[n] : r + n + 1 - t.symCount;
                     },
                         o = function o(t) {
                        var e = [],
                            r = function r(n, i) {
                           var o,
                               s,
                               u,
                               l,
                               c,
                               h,
                               f = t.nodes[n];for ("!" === f[0] && (e.push(i), f = f.slice(1)), o = f.split(/([A-Z0-9,]+)/g), s = 0; s < o.length; s += 2) {
                              u = o[s], l = o[s + 1], u && (c = i + u, "," !== l && void 0 !== l ? (h = a(t, l, n), r(h, c)) : e.push(c));
                           }
                        };return r(0, ""), e;
                     },
                         s = function s(t) {
                        var e = { nodes: t.split(";"), syms: [], symCount: 0 };return t.match(":") && n(e), o(e);
                     };e.exports = s;
                  }, { "../encoding": 1, "./symbols": 3 }] }, {}, [2])(2);
            }), function (e) {
               if ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && void 0 !== r) r.exports = e();else if ("function" == typeof t && t.amd) t([], e);else {
                  var a;a = "undefined" != typeof window ? window : void 0 !== i ? i : "undefined" != typeof self ? self : this, a.unpack = e();
               }
            }(function () {
               return function t(r, n, i) {
                  function a(s, u) {
                     var l, c, h;if (!n[s]) {
                        if (!r[s]) {
                           if (l = "function" == typeof e && e, !u && l) return l(s, !0);if (o) return o(s, !0);throw c = Error("Cannot find module '" + s + "'"), c.code = "MODULE_NOT_FOUND", c;
                        }h = n[s] = { exports: {} }, r[s][0].call(h.exports, function (t) {
                           var e = r[s][1][t];return a(e ? e : t);
                        }, h, h.exports, t, r, n, i);
                     }return n[s].exports;
                  }for (var o = "function" == typeof e && e, s = 0; s < i.length; s++) {
                     a(i[s]);
                  }return a;
               }({ 1: [function (t, e, r) {
                     "use strict";
                     var n = 36,
                         i = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                         a = i.split("").reduce(function (t, e, r) {
                        return t[e] = r, t;
                     }, {}),
                         o = function o(t) {
                        var e, r, a, o;if (void 0 !== i[t]) return i[t];for (e = 1, r = n, a = ""; t >= r; t -= r, e++, r *= n) {}for (; e--;) {
                           o = t % n, a = String.fromCharCode((10 > o ? 48 : 55) + o) + a, t = (t - o) / n;
                        }return a;
                     },
                         s = function s(t) {
                        var e, r, i, o, s, u;if (void 0 !== a[t]) return a[t];for (e = 0, r = 1, i = n, o = 1; r < t.length; e += i, r++, i *= n) {}for (s = t.length - 1; s >= 0; s--, o *= n) {
                           u = t.charCodeAt(s) - 48, u > 10 && (u -= 7), e += u * o;
                        }return e;
                     };e.exports = { toAlphaCode: o, fromAlphaCode: s };
                  }, {}], 2: [function (t, e, r) {
                     "use strict";
                     var n = t("./unpack");e.exports = function (t) {
                        var e = t.split("|").reduce(function (t, e) {
                           var r = e.split("¦");return t[r[0]] = r[1], t;
                        }, {}),
                            r = {};return Object.keys(e).forEach(function (t) {
                           var i,
                               a,
                               o = n(e[t]);for ("true" === t && (t = !0), i = 0; i < o.length; i++) {
                              a = o[i], r.hasOwnProperty(a) === !0 ? Array.isArray(r[a]) === !1 ? r[a] = [r[a], t] : r[a].push(t) : r[a] = t;
                           }
                        }), r;
                     };
                  }, { "./unpack": 4 }], 3: [function (t, e, r) {
                     "use strict";
                     var n = t("../encoding");e.exports = function (t) {
                        var e, r, i;for (e = RegExp("([0-9A-Z]+):([0-9A-Z]+)"), r = 0; r < t.nodes.length; r++) {
                           if (i = e.exec(t.nodes[r]), !i) {
                              t.symCount = r;break;
                           }t.syms[n.fromAlphaCode(i[1])] = n.fromAlphaCode(i[2]);
                        }t.nodes = t.nodes.slice(t.symCount, t.nodes.length);
                     };
                  }, { "../encoding": 1 }], 4: [function (t, e, r) {
                     "use strict";
                     var n = t("./symbols"),
                         i = t("../encoding"),
                         a = function a(t, e, r) {
                        var n = i.fromAlphaCode(e);return n < t.symCount ? t.syms[n] : r + n + 1 - t.symCount;
                     },
                         o = function o(t) {
                        var e = [],
                            r = function r(n, i) {
                           var o,
                               s,
                               u,
                               l,
                               c,
                               h,
                               f = t.nodes[n];for ("!" === f[0] && (e.push(i), f = f.slice(1)), o = f.split(/([A-Z0-9,]+)/g), s = 0; s < o.length; s += 2) {
                              u = o[s], l = o[s + 1], u && (c = i + u, "," !== l && void 0 !== l ? (h = a(t, l, n), r(h, c)) : e.push(c));
                           }
                        };return r(0, ""), e;
                     },
                         s = function s(t) {
                        var e = { nodes: t.split(";"), syms: [], symCount: 0 };return t.match(":") && n(e), o(e);
                     };e.exports = s;
                  }, { "../encoding": 1, "./symbols": 3 }] }, {}, [2])(2);
            }), function (e) {
               if ("object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && void 0 !== r) r.exports = e();else if ("function" == typeof t && t.amd) t([], e);else {
                  var a;a = "undefined" != typeof window ? window : void 0 !== i ? i : "undefined" != typeof self ? self : this, a.unpack = e();
               }
            }(function () {
               return function t(r, n, i) {
                  function a(s, u) {
                     var l, c, h;if (!n[s]) {
                        if (!r[s]) {
                           if (l = "function" == typeof e && e, !u && l) return l(s, !0);if (o) return o(s, !0);throw c = Error("Cannot find module '" + s + "'"), c.code = "MODULE_NOT_FOUND", c;
                        }h = n[s] = { exports: {} }, r[s][0].call(h.exports, function (t) {
                           var e = r[s][1][t];return a(e ? e : t);
                        }, h, h.exports, t, r, n, i);
                     }return n[s].exports;
                  }for (var o = "function" == typeof e && e, s = 0; s < i.length; s++) {
                     a(i[s]);
                  }return a;
               }({ 1: [function (t, e, r) {
                     "use strict";
                     var n = 36,
                         i = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                         a = i.split("").reduce(function (t, e, r) {
                        return t[e] = r, t;
                     }, {}),
                         o = function o(t) {
                        var e, r, a, o;if (void 0 !== i[t]) return i[t];for (e = 1, r = n, a = ""; t >= r; t -= r, e++, r *= n) {}for (; e--;) {
                           o = t % n, a = String.fromCharCode((10 > o ? 48 : 55) + o) + a, t = (t - o) / n;
                        }return a;
                     },
                         s = function s(t) {
                        var e, r, i, o, s, u;if (void 0 !== a[t]) return a[t];for (e = 0, r = 1, i = n, o = 1; r < t.length; e += i, r++, i *= n) {}for (s = t.length - 1; s >= 0; s--, o *= n) {
                           u = t.charCodeAt(s) - 48, u > 10 && (u -= 7), e += u * o;
                        }return e;
                     };e.exports = { toAlphaCode: o, fromAlphaCode: s };
                  }, {}], 2: [function (t, e, r) {
                     "use strict";
                     var n = t("./unpack");e.exports = function (t) {
                        var e = t.split("|").reduce(function (t, e) {
                           var r = e.split("¦");return t[r[0]] = r[1], t;
                        }, {}),
                            r = {};return Object.keys(e).forEach(function (t) {
                           var i,
                               a,
                               o = n(e[t]);for ("true" === t && (t = !0), i = 0; i < o.length; i++) {
                              a = o[i], r.hasOwnProperty(a) === !0 ? Array.isArray(r[a]) === !1 ? r[a] = [r[a], t] : r[a].push(t) : r[a] = t;
                           }
                        }), r;
                     };
                  }, { "./unpack": 4 }], 3: [function (t, e, r) {
                     "use strict";
                     var n = t("../encoding");e.exports = function (t) {
                        var e, r, i;for (e = RegExp("([0-9A-Z]+):([0-9A-Z]+)"), r = 0; r < t.nodes.length; r++) {
                           if (i = e.exec(t.nodes[r]), !i) {
                              t.symCount = r;break;
                           }t.syms[n.fromAlphaCode(i[1])] = n.fromAlphaCode(i[2]);
                        }t.nodes = t.nodes.slice(t.symCount, t.nodes.length);
                     };
                  }, { "../encoding": 1 }], 4: [function (t, e, r) {
                     "use strict";
                     var n = t("./symbols"),
                         i = t("../encoding"),
                         a = function a(t, e, r) {
                        var n = i.fromAlphaCode(e);return n < t.symCount ? t.syms[n] : r + n + 1 - t.symCount;
                     },
                         o = function o(t) {
                        var e = [],
                            r = function r(n, i) {
                           var o,
                               s,
                               u,
                               l,
                               c,
                               h,
                               f = t.nodes[n];for ("!" === f[0] && (e.push(i), f = f.slice(1)), o = f.split(/([A-Z0-9,]+)/g), s = 0; s < o.length; s += 2) {
                              u = o[s], l = o[s + 1], u && (c = i + u, "," !== l && void 0 !== l ? (h = a(t, l, n), r(h, c)) : e.push(c));
                           }
                        };return r(0, ""), e;
                     },
                         s = function s(t) {
                        var e = { nodes: t.split(";"), syms: [], symCount: 0 };return t.match(":") && n(e), o(e);
                     };e.exports = s;
                  }, { "../encoding": 1, "./symbols": 3 }] }, {}, [2])(2);
            });
         }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
      }, {}], 2: [function (t, e, r) {
         e.exports = { author: "Spencer Kelly <spencermountain@gmail.com> (http://spencermounta.in)", name: "compromise", description: "natural language processing in the browser", version: "11.1.0", main: "./builds/compromise.js", repository: { type: "git", url: "git://github.com/nlp-compromise/compromise.git" }, scripts: { test: "node ./scripts/test.js", testb: '"node_modules/.bin/tape" "./test/unit/**/*.test.js"', buildTest: "TESTENV=prod node ./scripts/test.js", "test:types": "tsc --project test/types", browserTest: "node ./scripts/browserTest.js", benchmark: "node ./scripts/benchmark.js", build: "node ./scripts/build/index.js", pack: "node ./scripts/pack.js", prepublishOnly: "node ./scripts/prepublish", postpublish: "node ./scripts/postpublish", demo: "node ./scripts/demo.js", watch: "amble ./scratch.js", filesize: "node ./scripts/filesize.js", coverage: "node ./scripts/postpublish/coverage.js", lint: "node ./scripts/prepublish/linter.js" }, files: ["builds/", "docs/"], dependencies: { "efrt-unpack": "2.0.3", "http-server": "^0.10.0" }, devDependencies: { amble: "0.0.5", "babel-preset-es2015": "^6.24.0", babelify: "7.3.0", babili: "0.0.11", browserify: "13.0.1", "browserify-glob": "^0.2.0", chalk: "^1.1.3", "codacy-coverage": "^2.0.3", "compromise-plugin": "0.0.8", derequire: "^2.0.3", eslint: "^3.1.1", gaze: "^1.1.1", nyc: "^8.4.0", shelljs: "^0.7.2", "tap-spec": "^4.1.1", tape: "4.6.0", "uglify-js": "2.7.0" }, license: "MIT" };
      }, {}], 3: [function (t, e, r) {
         "use strict";
         var n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
            return typeof t === "undefined" ? "undefined" : _typeof(t);
         } : function (t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
         },
             i = t("./tags"),
             a = { reset: "[0m", red: "[31m", green: "[32m", yellow: "[33m", blue: "[34m", magenta: "[35m", cyan: "[36m", black: "[30m" };void 0 === e && Object.keys(a).forEach(function (t) {
            a[t] = "";
         }), r.ensureString = function (t) {
            return "string" == typeof t ? t : "number" == typeof t ? "" + t : "";
         }, r.ensureObject = function (t) {
            return "object" !== (void 0 === t ? "undefined" : n(t)) ? {} : null === t || t instanceof Array ? {} : t;
         }, r.titleCase = function (t) {
            return t.charAt(0).toUpperCase() + t.substr(1);
         }, r.copy = function (t) {
            var e = {};return t = r.ensureObject(t), Object.keys(t).forEach(function (r) {
               e[r] = t[r];
            }), e;
         }, r.extend = function (t, e) {
            var n, i;for (t = r.copy(t), n = Object.keys(e), i = 0; i < n.length; i++) {
               t[n[i]] = e[n[i]];
            }return t;
         }, r.green = function (t) {
            return a.green + t + a.reset;
         }, r.red = function (t) {
            return a.red + t + a.reset;
         }, r.blue = function (t) {
            return a.blue + t + a.reset;
         }, r.magenta = function (t) {
            return a.magenta + t + a.reset;
         }, r.cyan = function (t) {
            return a.cyan + t + a.reset;
         }, r.yellow = function (t) {
            return a.yellow + t + a.reset;
         }, r.black = function (t) {
            return a.black + t + a.reset;
         }, r.printTag = function (t) {
            if (i[t]) {
               var e = i[t].color || "blue";return r[e](t);
            }return t;
         }, r.printTerm = function (t) {
            var e,
                n,
                o = Object.keys(t.tags);for (e = 0; e < o.length; e++) {
               if (i[o[e]]) return n = i[o[e]].color || "black", r[n](t.out("text"));
            }return a.reset + t.plaintext + a.reset;
         }, r.leftPad = function (t, e, r) {
            for (r = r || " ", t = "" + t; t.length < e;) {
               t += r;
            }return t;
         }, r.isArray = function (t) {
            return "[object Array]" === Object.prototype.toString.call(t);
         };
      }, { "./tags": 132 }], 4: [function (e, r, n) {
         (function (n) {
            "use strict";
            var i = e("./text/build"),
                a = e("../package.json"),
                o = e("./log"),
                s = e("./world/unpack"),
                u = e("./world"),
                l = u.w,
                c = function c(t, e) {
               e && l.plugin({ words: e });var r = i(t, l);return r.tagger(), r;
            };c.unpack = function (t) {
               return s(t);
            }, c.version = a.version, c.verbose = function (t) {
               o.enable(t);
            }, c.tokenize = function (t) {
               return i(t);
            }, c.plugin = function (t) {
               l.plugin(t);
            }, c.addWords = function (t) {
               l.plugin({ words: t });
            }, c.addTags = function (t) {
               l.plugin({ tags: t });
            }, c.addRegex = function (t) {
               l.plugin({ regex: t });
            }, c.addPatterns = function (t) {
               l.plugin({ patterns: t });
            }, c.addPlurals = function (t) {
               l.plugin({ plurals: t });
            }, c.addConjugations = function (t) {
               l.plugin({ conjugations: t });
            }, c.clone = function () {
               var t = u.reBuild(),
                   e = function e(_e, r) {
                  r && t.plugin({ words: r });var n = i(_e, t);return n.tagger(), n;
               };return e.tokenize = c.tokenize, e.verbose = c.verbose, e.version = c.version, ["Words", "Tags", "Regex", "Patterns", "Plurals", "Conjugations"].forEach(function (r) {
                  e["add" + r] = function (e) {
                     t["add" + r](e);
                  };
               }), e;
            }, "undefined" != typeof self ? self.nlp = c : "undefined" != typeof window ? window.nlp = c : void 0 !== n && (n.nlp = c), "function" == typeof t && t.amd && t(c), void 0 !== r && (r.exports = c);
         }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
      }, { "../package.json": 2, "./log": 6, "./text/build": 184, "./world": 208, "./world/unpack": 216 }], 5: [function (t, e, r) {
         "use strict";
         var n = t("../fns"),
             i = function i(t, e, r) {
            var i = t.normal || "[" + t.silent_term + "]";i = n.leftPad("'" + i + "'", 12), i += "  ->   " + e, i += n.leftPad(r || "", 15), console.log("%c" + i, " color: #a2c99c");
         },
             a = function a(t, e, r) {
            var i = t.normal || "[" + t.silent_term + "]";i = n.leftPad("'" + i + "'", 12), i += "  ~*   " + e, i += "    " + (r || ""), console.log("%c" + i, " color: #b66a6a");
         };e.exports = { tag: i, untag: a };
      }, { "../fns": 3 }], 6: [function (t, e, r) {
         "use strict";
         var n = t("./client"),
             i = t("./server"),
             a = !1;e.exports = { enable: function enable(t) {
               void 0 === t && (t = !0), a = t;
            }, tag: function tag(t, e, r) {
               a !== !0 && "tagger" !== a || ("undefined" != typeof window ? n.tag(t, e, r) : i.tag(t, e, r));
            }, unTag: function unTag(t, e, r) {
               a !== !0 && "tagger" !== a || ("undefined" != typeof window ? n.untag(t, e, r) : i.untag(t, e, r));
            } };
      }, { "./client": 5, "./server": 7 }], 7: [function (t, e, r) {
         "use strict";
         var n = t("../fns"),
             i = function i(t, e, r) {
            var i = t.normal || "[" + t.silent_term + "]";i = n.yellow(i), i = n.leftPad("'" + i + "'", 20), i += "  ->   " + n.printTag(e), i = n.leftPad(i, 54), console.log("       " + i + "(" + n.cyan(r || "") + ")");
         },
             a = function a(t, e, r) {
            var i = "-" + t.normal + "-";i = n.red(i), i = n.leftPad(i, 20), i += "  ~*   " + n.red(e), i = n.leftPad(i, 54), console.log("       " + i + "(" + n.red(r || "") + ")");
         };e.exports = { tag: i, untag: a };
      }, { "../fns": 3 }], 8: [function (t, e, r) {
         "use strict";
         e.exports = { fns: t("./fns"), Terms: t("./terms") };
      }, { "./fns": 3, "./terms": 160 }], 9: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = { data: function data() {
               return this.terms().list.map(function (t) {
                  var e = t.terms[0],
                      r = e.text.toUpperCase().replace(/\./g).split("");return { periods: r.join("."), normal: r.join(""), text: e.text };
               });
            } },
             a = function a(t, e) {
            return t = t.match("#Acronym"), "number" == typeof e && (t = t.get(e)), t;
         };e.exports = n.makeSubset(i, a);
      }, { "../../text": 186 }], 10: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./methods"),
             a = function a(t, e) {
            return !(!t || t.length <= 3) && ("Comparable" === e[t] || "Adjective" !== e[t] && t.indexOf(" ") === -1);
         },
             o = { data: function data() {
               var t = this;return this.list.map(function (e) {
                  var r = e.out("normal"),
                      n = { normal: r, text: t.out("text"), comparative: "more " + r, superlative: "most " + r, adverbForm: null, nounForm: null };return a(r, t.world().words) === !0 && (n.comparative = i.toComparative(r) || n.comparative, n.superlative = i.toSuperlative(r) || n.superlative, n.adverbForm = i.toAdverb(r), n.nounForm = i.toNoun(r)), n;
               });
            } },
             s = function s(t, e) {
            return t = t.match("#Adjective"), "number" == typeof e && (t = t.get(e)), t;
         };e.exports = n.makeSubset(o, s);
      }, { "../../text": 186, "./methods": 11 }], 11: [function (t, e, r) {
         "use strict";
         e.exports = { toNoun: t("./toNoun"), toSuperlative: t("./toSuperlative"), toComparative: t("./toComparative"), toAdverb: t("./toAdverb"), toVerb: t("./toVerb") };
      }, { "./toAdverb": 12, "./toComparative": 13, "./toNoun": 14, "./toSuperlative": 15, "./toVerb": 16 }], 12: [function (t, e, r) {
         "use strict";
         var n = [/airs$/, /ll$/, /ee.$/, /ile$/, /y$/],
             i = t("../../../world/more-data/irregularAdjectives").toAdverb,
             a = [{ reg: /al$/i, repl: "ally" }, { reg: /ly$/i, repl: "ly" }, { reg: /(.{3})y$/i, repl: "$1ily" }, { reg: /que$/i, repl: "quely" }, { reg: /ue$/i, repl: "uly" }, { reg: /ic$/i, repl: "ically" }, { reg: /ble$/i, repl: "bly" }, { reg: /l$/i, repl: "ly" }],
             o = function o(t) {
            var e, r;if (i.hasOwnProperty(t) === !0) return i[t];for (e = 0; e < n.length; e++) {
               if (n[e].test(t) === !0) return null;
            }for (r = 0; r < a.length; r++) {
               if (a[r].reg.test(t) === !0) return t.replace(a[r].reg, a[r].repl);
            }return t + "ly";
         };e.exports = o;
      }, { "../../../world/more-data/irregularAdjectives": 211 }], 13: [function (t, e, r) {
         "use strict";
         var n = [/ght$/, /nge$/, /ough$/, /ain$/, /uel$/, /[au]ll$/, /ow$/, /old$/, /oud$/, /e[ae]p$/],
             i = [/ary$/, /ous$/],
             a = t("../../../world/more-data/irregularAdjectives").toComparative,
             o = [{ reg: /y$/i, repl: "ier" }, { reg: /([aeiou])t$/i, repl: "$1tter" }, { reg: /([aeou])de$/i, repl: "$1der" }, { reg: /nge$/i, repl: "nger" }],
             s = function s(t) {
            var e, r, s;if (a.hasOwnProperty(t)) return a[t];for (e = 0; e < o.length; e++) {
               if (o[e].reg.test(t) === !0) return t.replace(o[e].reg, o[e].repl);
            }for (r = 0; r < i.length; r++) {
               if (i[r].test(t) === !0) return null;
            }for (s = 0; s < n.length; s++) {
               if (n[s].test(t) === !0) return t + "er";
            }return (/e$/.test(t) === !0 ? t + "r" : t + "er"
            );
         };e.exports = s;
      }, { "../../../world/more-data/irregularAdjectives": 211 }], 14: [function (t, e, r) {
         "use strict";
         var n = { clean: "cleanliness", naivety: "naivety", hurt: "hurt" },
             i = [{ reg: /y$/, repl: "iness" }, { reg: /le$/, repl: "ility" }, { reg: /ial$/, repl: "y" }, { reg: /al$/, repl: "ality" }, { reg: /ting$/, repl: "ting" }, { reg: /ring$/, repl: "ring" }, { reg: /bing$/, repl: "bingness" }, { reg: /sing$/, repl: "se" }, { reg: /ing$/, repl: "ment" }, { reg: /ess$/, repl: "essness" }, { reg: /ous$/, repl: "ousness" }],
             a = function a(t) {
            var e, r;if (n.hasOwnProperty(t)) return n[t];if (e = t.charAt(t.length - 1), "w" === e || "s" === e) return null;for (r = 0; r < i.length; r++) {
               if (i[r].reg.test(t) === !0) return t.replace(i[r].reg, i[r].repl);
            }return t + "ness";
         };e.exports = a;
      }, {}], 15: [function (t, e, r) {
         "use strict";
         var n = [/ght$/, /nge$/, /ough$/, /ain$/, /uel$/, /[au]ll$/, /ow$/, /oud$/, /...p$/],
             i = [/ary$/],
             a = t("../../../world/more-data/irregularAdjectives").toSuperlative,
             o = [{ reg: /y$/i, repl: "iest" }, { reg: /([aeiou])t$/i, repl: "$1ttest" }, { reg: /([aeou])de$/i, repl: "$1dest" }, { reg: /nge$/i, repl: "ngest" }, { reg: /([aeiou])te$/i, repl: "$1test" }],
             s = function s(t) {
            var e, r, s;if (a.hasOwnProperty(t)) return a[t];for (e = 0; e < o.length; e++) {
               if (o[e].reg.test(t)) return t.replace(o[e].reg, o[e].repl);
            }for (r = 0; r < i.length; r++) {
               if (i[r].test(t) === !0) return null;
            }for (s = 0; s < n.length; s++) {
               if (n[s].test(t) === !0) return "e" === t.charAt(t.length - 1) ? t + "st" : t + "est";
            }return t + "est";
         };e.exports = s;
      }, { "../../../world/more-data/irregularAdjectives": 211 }], 16: [function (t, e, r) {
         "use strict";
         var n = { red: "redden", sad: "sadden", fat: "fatten" },
             i = function i(t) {
            return n.hasOwnProperty(t) === !0 ? n[t] : /e$/.test(t) === !0 ? t + "n" : t + "en";
         };e.exports = i;
      }, {}], 17: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./toAdjective"),
             a = { data: function data() {
               return this.terms().list.map(function (t) {
                  var e = t.terms[0];return { adjectiveForm: i(e.normal), normal: e.normal, text: e.text };
               });
            } },
             o = function o(t, e) {
            return t = t.splitAfter("#Comma"), t = t.match("#Adverb+"), "number" == typeof e && (t = t.get(e)), t;
         };e.exports = n.makeSubset(a, o);
      }, { "../../text": 186, "./toAdjective": 18 }], 18: [function (t, e, r) {
         "use strict";
         var n = { idly: "idle", sporadically: "sporadic", basically: "basic", grammatically: "grammatical", alphabetically: "alphabetical", economically: "economical", conically: "conical", politically: "political", vertically: "vertical", practically: "practical", theoretically: "theoretical", critically: "critical", fantastically: "fantastic", mystically: "mystical", pornographically: "pornographic", fully: "full", jolly: "jolly", wholly: "whole" },
             i = [{ reg: /bly$/i, repl: "ble" }, { reg: /gically$/i, repl: "gical" }, { reg: /([rsdh])ically$/i, repl: "$1ical" }, { reg: /ically$/i, repl: "ic" }, { reg: /uly$/i, repl: "ue" }, { reg: /ily$/i, repl: "y" }, { reg: /(.{3})ly$/i, repl: "$1" }],
             a = function a(t) {
            if (n.hasOwnProperty(t)) return n[t];for (var e = 0; e < i.length; e++) {
               if (i[e].reg.test(t) === !0) return t.replace(i[e].reg, i[e].repl);
            }return t;
         };e.exports = a;
      }, {}], 19: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            e.whitespace.after = t.whitespace.after, t.whitespace.after = "", e.whitespace.before = "", t.silent_term = t.text, e.silent_term = e.text, e.text = "", t.tag("Contraction", "new-contraction"), e.tag("Contraction", "new-contraction");
         },
             i = { can: "can't", will: "won't" },
             a = function a(t) {
            return t.expanded === !1 || t.match("#Contraction").found ? t : (t.match("(#Noun|#QuestionWord) is").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'s", t.contracted = !0;
            }), t.match("#PronNoun did").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'d", t.contracted = !0;
            }), t.match("#QuestionWord (did|do)").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'d", t.contracted = !0;
            }), t.match("#Noun (could|would)").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'d", t.contracted = !0;
            }), t.match("(they|we|you) are").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'re", t.contracted = !0;
            }), t.match("i am").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'m", t.contracted = !0;
            }), t.match("(#Noun|#QuestionWord) will").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'ll", t.contracted = !0;
            }), t.match("(they|we|you|i) have").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), t.terms[0].text += "'ve", t.contracted = !0;
            }), t.match("(#Copula|#Modal|do|does|have|has|can|will) not").list.forEach(function (t) {
               n(t.terms[0], t.terms[1]), i.hasOwnProperty(t.terms[0].text) === !0 ? t.terms[0].text = i[t.terms[0].text] : t.terms[0].text += "n't", t.contracted = !0;
            }), t);
         };e.exports = a;
      }, {}], 20: [function (t, e, r) {
         "use strict";
         var n = t("../../paths").Terms,
             i = t("./contract"),
             a = t("./expand"),
             o = function o(t, e, r) {
            n.call(this, t, e, r);
         };o.prototype = Object.create(n.prototype), o.prototype.data = function () {
            var t = a(this.clone()),
                e = i(this.clone());return { text: this.out("text"), normal: this.out("normal"), expanded: { normal: t.out("normal"), text: t.out("text") }, contracted: { normal: e.out("normal"), text: e.out("text") }, isContracted: !!this.contracted };
         }, o.prototype.expand = function () {
            return a(this);
         }, o.prototype.contract = function () {
            return i(this);
         }, e.exports = o;
      }, { "../../paths": 8, "./contract": 19, "./expand": 21 }], 21: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t.contracted === !1 ? t : (t.terms.forEach(function (t) {
               t.silent_term && (t.text || (t.whitespace.before = " "), t._text = t.silent_term, t.tags.TitleCase && t.toTitleCase(), t.normalize(), t.silent_term = null, t.unTag("Contraction", "expanded"));
            }), t);
         };e.exports = n;
      }, {}], 22: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = t.not("#Contraction"),
                r = e.match("(#Noun|#QuestionWord) (#Copula|did|do|have|had|could|would|will)");return r.concat(e.match("(they|we|you|i) have")), r.concat(e.match("i am")), r.concat(e.match("(#Copula|#Modal|do|does|have|has|can|will) not")), r.list.forEach(function (t) {
               t.expanded = !0;
            }), r;
         };e.exports = n;
      }, {}], 23: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./contraction"),
             a = t("./findPossible"),
             o = { contract: function contract() {
               return this.list.forEach(function (t) {
                  return t.contract();
               }), this;
            }, expand: function expand() {
               return this.list.forEach(function (t) {
                  return t.expand();
               }), this;
            }, contracted: function contracted() {
               return this.list = this.list.filter(function (t) {
                  return t.contracted;
               }), this;
            }, expanded: function expanded() {
               return this.list = this.list.filter(function (t) {
                  return !t.contracted;
               }), this;
            } },
             s = function s(t, e) {
            var r,
                n = t.match("#Contraction #Contraction #Contraction?");return n.list = n.list.map(function (t) {
               var e = new i(t.terms, t.world, t.refText, t.refTerms);return e.contracted = !0, e;
            }), r = a(t), r.list.forEach(function (t) {
               var e = new i(t.terms, t.world, t.refText, t.refTerms);e.contracted = !1, n.list.push(e);
            }), n.sort("chronological"), "number" == typeof e && (n = n.get(e)), n;
         };e.exports = n.makeSubset(o, s);
      }, { "../../text": 186, "./contraction": 20, "./findPossible": 22 }], 24: [function (t, e, r) {
         "use strict";
         var n = t("../../paths").Terms,
             i = t("./parseDate"),
             a = function a(t, e, r) {
            n.call(this, t, e, r), this.month = this.match("#Month");
         };a.prototype = Object.create(n.prototype), a.prototype.data = function () {
            return { text: this.out("text"), normal: this.out("normal"), date: i(this) };
         }, e.exports = a;
      }, { "../../paths": 8, "./parseDate": 28 }], 25: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./date"),
             a = t("./weekday"),
             o = t("./month"),
             s = { toShortForm: function toShortForm() {
               return this.match("#Month").terms().list.forEach(function (t) {
                  var e = t.terms[0];o.toShortForm(e);
               }), this.match("#WeekDay").terms().list.forEach(function (t) {
                  var e = t.terms[0];a.toShortForm(e);
               }), this;
            }, toLongForm: function toLongForm() {
               return this.match("#Month").terms().list.forEach(function (t) {
                  var e = t.terms[0];o.toLongForm(e);
               }), this.match("#WeekDay").terms().list.forEach(function (t) {
                  var e = t.terms[0];a.toLongForm(e);
               }), this;
            } },
             u = function u(t, e) {
            var r = t.match("#Date+");return "number" == typeof e && (r = r.get(e)), r.list = r.list.map(function (t) {
               return new i(t.terms, t.world, t.refText, t.refTerms);
            }), r;
         };e.exports = n.makeSubset(s, u);
      }, { "../../text": 186, "./date": 24, "./month": 27, "./weekday": 31 }], 26: [function (t, e, r) {
         "use strict";
         r.longMonths = { january: 0, february: 1, march: 2, april: 3, may: 4, june: 5, july: 6, august: 7, september: 8, october: 9, november: 10, december: 11 }, r.shortMonths = { jan: 0, feb: 1, febr: 1, mar: 2, apr: 3, may: 4, jun: 5, jul: 6, aug: 7, sep: 8, sept: 8, oct: 9, nov: 10, dec: 11 };
      }, {}], 27: [function (t, e, r) {
         "use strict";
         var n = t("./data"),
             i = n.shortMonths,
             a = n.longMonths;e.exports = { index: function index(t) {
               if (t.tags.Month) {
                  if (void 0 !== a[t.normal]) return a[t.normal];if (void 0 !== i[t.normal]) return i[t.normal];
               }return null;
            }, toShortForm: function toShortForm(t) {
               if (void 0 !== t.tags.Month && void 0 !== a[t.normal]) {
                  var e = Object.keys(i);t.text = e[a[t.normal]];
               }return t.dirty = !0, t;
            }, toLongForm: function toLongForm(t) {
               if (void 0 !== t.tags.Month && void 0 !== i[t.normal]) {
                  var e = Object.keys(a);t.text = e[i[t.normal]];
               }return t.dirty = !0, t;
            } };
      }, { "./data": 26 }], 28: [function (t, e, r) {
         "use strict";
         var n = t("./parseTime"),
             i = t("./weekday"),
             a = t("./month"),
             o = function o(t) {
            return !!(t && 31 > t && t > 0);
         },
             s = function s(t) {
            return !!(t && t > 1e3 && 3e3 > t);
         },
             u = function u(t) {
            var e,
                r,
                u,
                l,
                c,
                h,
                f = { month: null, date: null, weekday: null, year: null, named: null, time: null },
                m = t.match("(#Holiday|today|tomorrow|yesterday)");return m.found && (f.named = m.out("normal")), m = t.match("#Month"), m.found && (f.month = a.index(m.list[0].terms[0])), m = t.match("#WeekDay"), m.found && (f.weekday = i.index(m.list[0].terms[0])), m = t.match("#Time"), m.found && (f.time = n(t), t.not("#Time")), m = t.match("#Month #Value #Year"), m.found && (e = m.values().numbers(), o(e[0]) && (f.date = e[0]), r = parseInt(t.match("#Year").out("normal"), 10), s(r) && (f.year = r)), m.found || (m = t.match("#Month #Value"), m.found && (u = m.values().numbers(), l = u[0], o(l) && (f.date = l)), m = t.match("#Month #Year"), m.found && (c = parseInt(t.match("#Year").out("normal"), 10), s(c) && (f.year = c))), m = t.match("#Value of #Month"), m.found && (h = m.values().numbers()[0], o(h) && (f.date = h)), f;
         };e.exports = u;
      }, { "./month": 27, "./parseTime": 29, "./weekday": 31 }], 29: [function (t, e, r) {
         "use strict";
         var n = /([12]?[0-9]) ?(am|pm)/i,
             i = /([12]?[0-9]):([0-9][0-9]) ?(am|pm)?/i,
             a = function a(t) {
            return !!(t && t > 0 && 25 > t);
         },
             o = function o(t) {
            return !!(t && t > 0 && 60 > t);
         },
             s = function s(t) {
            var e,
                r = { logic: null, hour: null, minute: null, second: null, timezone: null },
                s = t.match("(by|before|for|during|at|until|after) #Time").firstTerm();return s.found && (r.logic = s.out("normal")), e = t.match("#Time"), e.terms().list.forEach(function (t) {
               var e = t.terms[0],
                   s = e.text.match(n);null !== s && (r.hour = parseInt(s[1], 10), "pm" === s[2] && (r.hour += 12), a(r.hour) === !1 && (r.hour = null)), s = e.text.match(i), null !== s && (r.hour = parseInt(s[1], 10), r.minute = parseInt(s[2], 10), o(r.minute) || (r.minute = null), "pm" === s[3] && (r.hour += 12), a(r.hour) === !1 && (r.hour = null));
            }), r;
         };e.exports = s;
      }, {}], 30: [function (t, e, r) {
         "use strict";
         r.longDays = { sunday: 0, monday: 1, tuesday: 2, wednesday: 3, thursday: 4, friday: 5, saturday: 6 }, r.shortDays = { sun: 0, mon: 1, tues: 2, wed: 3, weds: 3, thurs: 4, fri: 5, sat: 6 };
      }, {}], 31: [function (t, e, r) {
         "use strict";
         var n = t("./data"),
             i = n.shortDays,
             a = n.longDays;e.exports = { index: function index(t) {
               if (t.tags.WeekDay) {
                  if (void 0 !== a[t.normal]) return a[t.normal];if (void 0 !== i[t.normal]) return i[t.normal];
               }return null;
            }, toShortForm: function toShortForm(t) {
               if (t.tags.WeekDay && void 0 !== a[t.normal]) {
                  var e = Object.keys(i);t.text = e[a[t.normal]];
               }return t;
            }, toLongForm: function toLongForm(t) {
               if (t.tags.WeekDay && void 0 !== i[t.normal]) {
                  var e = Object.keys(a);t.text = e[i[t.normal]];
               }return t;
            } };
      }, { "./data": 30 }], 32: [function (t, e, r) {
         "use strict";
         var n = t("./index"),
             i = t("./getGrams"),
             a = function a(t, e, r) {
            n.call(this, t, e, r);
         };a.prototype = Object.create(n.prototype), a.find = function (t, e, r) {
            var n,
                o = { size: [1, 2, 3, 4], edge: "end" };return r && (o.size = [r]), n = i(t, o), t = new a(n), t.sort(), "number" == typeof e && (t = t.get(e)), t;
         }, e.exports = a;
      }, { "./getGrams": 33, "./index": 35 }], 33: [function (t, e, r) {
         "use strict";
         var n = t("./gram"),
             i = function i(t, e) {
            var r,
                i,
                a,
                o = t.terms;if (o.length < e) return [];for (r = [], i = 0; i < o.length - e + 1; i++) {
               a = new n(o.slice(i, i + e)), r.push(a);
            }return r;
         },
             a = function a(t, e) {
            var r,
                i = t.terms;return i.length < e ? [] : r = [new n(i.slice(0, e))];
         },
             o = function o(t, e) {
            var r,
                i = t.terms;return i.length < e ? [] : r = [new n(i.slice(i.length - e, i.length))];
         },
             s = function s(t, e) {
            var r, n;return e = e || {}, e.size = e.size || [1, 2, 3], "number" == typeof e.size && (e.size = [e.size]), r = {}, e.size.forEach(function (n) {
               t.list.forEach(function (t) {
                  var s = [];s = "start" === e.edge ? a(t, n) : "end" === e.edge ? o(t, n) : i(t, n), s.forEach(function (t) {
                     r.hasOwnProperty(t.key) ? r[t.key].inc() : r[t.key] = t;
                  });
               });
            }), n = Object.keys(r).map(function (t) {
               return r[t];
            });
         };e.exports = s;
      }, { "./gram": 34 }], 34: [function (t, e, r) {
         "use strict";
         var n = t("../../paths").Terms,
             i = function i(t, e, r) {
            n.call(this, t, e, r), this.key = this.out("normal"), this.size = t.length, this.count = 1;
         };i.prototype = Object.create(n.prototype), i.prototype.inc = function () {
            this.count += 1;
         }, e.exports = i;
      }, { "../../paths": 8 }], 35: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./getGrams"),
             a = function a(t) {
            return t.list = t.list.sort(function (t, e) {
               return t.count > e.count ? -1 : t.count === e.count && (t.size > e.size || t.key.length > e.key.length) ? -1 : 1;
            }), t;
         },
             o = { data: function data() {
               return this.list.map(function (t) {
                  return { normal: t.out("normal"), count: t.count, size: t.size };
               });
            }, unigrams: function unigrams() {
               return this.list = this.list.filter(function (t) {
                  return 1 === t.size;
               }), this;
            }, bigrams: function bigrams() {
               return this.list = this.list.filter(function (t) {
                  return 2 === t.size;
               }), this;
            }, trigrams: function trigrams() {
               return this.list = this.list.filter(function (t) {
                  return 3 === t.size;
               }), this;
            }, sort: function sort() {
               return a(this);
            } },
             s = function s(t, e) {
            var r,
                o,
                s,
                u,
                l = [];for ("number" == typeof e && (e = { n: e }), e = e || {}, r = e.max || 4, o = 1; r >= o; o++) {
               l.push(o);
            }return e.size && (l = [e.size]), s = { size: l }, u = i(t, s), t = new n(u), t = a(t), void 0 !== e.n && (t = t.get(e.n)), t;
         };e.exports = n.makeSubset(o, s);
      }, { "../../text": 186, "./getGrams": 33 }], 36: [function (t, e, r) {
         "use strict";
         var n = t("./index"),
             i = t("./getGrams"),
             a = function a(t, e, r) {
            n.call(this, t, e, r);
         };a.prototype = Object.create(n.prototype), a.find = function (t, e, r) {
            var n,
                o = { size: [1, 2, 3, 4], edge: "start" };return r && (o.size = [r]), n = i(t, o), t = new a(n), t.sort(), "number" == typeof e && (t = t.get(e)), t;
         }, e.exports = a;
      }, { "./getGrams": 33, "./index": 35 }], 37: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e, r;if (!t.tags.Noun) return !1;if (t.tags.Plural) return !0;for (e = ["Pronoun", "Place", "Value", "Person", "Month", "WeekDay", "RelativeDay", "Holiday"], r = 0; r < e.length; r++) {
               if (t.tags[e[r]]) return !1;
            }return t.tags.Uncountable !== !0;
         };e.exports = n;
      }, {}], 38: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./noun"),
             a = { isPlural: function isPlural() {
               return this.list = this.list.filter(function (t) {
                  return t.isPlural();
               }), this;
            }, hasPlural: function hasPlural() {
               return this.list.map(function (t) {
                  return t.hasPlural();
               });
            }, toPlural: function toPlural() {
               return this.list.forEach(function (t) {
                  return t.toPlural();
               }), this;
            }, toSingular: function toSingular() {
               return this.list.forEach(function (t) {
                  return t.toSingular();
               }), this;
            }, articles: function articles() {
               return this.list.map(function (t) {
                  return { text: t.out("text"), normal: t.out("normal"), article: t.article() };
               });
            } },
             o = "(there|these)",
             s = function s(t, e) {
            return t = t.clauses(), t = t.match("#Noun+ (of|for|by)? the? #Noun+?"), t = t.not("#Pronoun"), t = t.not(o), t = t.not("(#Month|#WeekDay)"), t = t.not("(my|our|their)"), "number" == typeof e && (t = t.get(e)), t.list = t.list.map(function (t) {
               return new i(t.terms, t.world, t.refText, t.refTerms);
            }), t;
         };e.exports = n.makeSubset(a, s);
      }, { "../../text": 186, "./noun": 46 }], 39: [function (t, e, r) {
         "use strict";
         var n = t("./methods/data/indicators"),
             i = /([a-z]*) (of|in|by|for) [a-z]/,
             a = t("./hasPlural"),
             o = { i: !1, he: !1, she: !1, we: !0, they: !0 },
             s = ["Place", "Value", "Person", "Month", "WeekDay", "RelativeDay", "Holiday", "Possessive"],
             u = function u(t) {
            if (a(t) === !1) return !1;for (var e = 0; e < s.length; e++) {
               if (t.tags[s[e]]) return !1;
            }return !0;
         },
             l = function l(t, e) {
            var r, a, s, l;if (t.tags.Plural) return !0;if (t.tags.Singular) return !1;if (r = t.normal, o.hasOwnProperty(r) === !0) return o[r];if (e && e.plurals && e.plurals.hasOwnProperty(r) === !0) return !1;if (u(t) === !1) return null;for (a = r.match(i), null !== a && (r = a[1]), s = 0; s < n.plural_indicators.length; s++) {
               if (n.plural_indicators[s].test(r) === !0) return !0;
            }for (l = 0; l < n.singular_indicators.length; l++) {
               if (n.singular_indicators[l].test(r) === !0) return !1;
            }return (/s$/.test(r) === !0 && /ss$/.test(r) === !1 && r.length > 3
            );
         };e.exports = l;
      }, { "./hasPlural": 37, "./methods/data/indicators": 41 }], 40: [function (t, e, r) {
         "use strict";
         var n = { hour: "an", heir: "an", heirloom: "an", honest: "an", honour: "an", honor: "an", uber: "an" },
             i = { a: !0, e: !0, f: !0, h: !0, i: !0, l: !0, m: !0, n: !0, o: !0, r: !0, s: !0, x: !0 },
             a = [/^onc?e/i, /^u[bcfhjkqrstn][aeiou]/i, /^eul/i],
             o = function o(t) {
            var e,
                r,
                o = t.normal;if (t.tags.Person) return "";if (t.tags.Plural) return "the";if (n.hasOwnProperty(o)) return n[o];if (e = o.substr(0, 1), t.isAcronym() && i.hasOwnProperty(e)) return "an";for (r = 0; r < a.length; r++) {
               if (a[r].test(o)) return "a";
            }return (/^[aeiou]/i.test(o) ? "an" : "a"
            );
         };e.exports = o;
      }, {}], 41: [function (t, e, r) {
         "use strict";
         var n = [/(^v)ies$/i, /ises$/i, /ives$/i, /(antenn|formul|nebul|vertebr|vit)ae$/i, /(octop|vir|radi|nucle|fung|cact|stimul)i$/i, /(buffal|tomat|tornad)oes$/i, /(analy|ba|diagno|parenthe|progno|synop|the)ses$/i, /(vert|ind|cort)ices$/i, /(matr|append)ices$/i, /(x|ch|ss|sh|s|z|o)es$/i, /men$/i, /news$/i, /.tia$/i, /(^f)ves$/i, /(lr)ves$/i, /(^aeiouy|qu)ies$/i, /(m|l)ice$/i, /(cris|ax|test)es$/i, /(alias|status)es$/i, /ics$/i],
             i = [/(ax|test)is$/i, /(octop|vir|radi|nucle|fung|cact|stimul)us$/i, /(octop|vir)i$/i, /(rl)f$/i, /(alias|status)$/i, /(bu)s$/i, /(al|ad|at|er|et|ed|ad)o$/i, /(ti)um$/i, /(ti)a$/i, /sis$/i, /(?:(^f)fe|(lr)f)$/i, /hive$/i, /(^aeiouy|qu)y$/i, /(x|ch|ss|sh|z)$/i, /(matr|vert|ind|cort)(ix|ex)$/i, /(m|l)ouse$/i, /(m|l)ice$/i, /(antenn|formul|nebul|vertebr|vit)a$/i, /.sis$/i, /^(?!talis|.*hu)(.*)man$/i];e.exports = { singular_indicators: i, plural_indicators: n };
      }, {}], 42: [function (t, e, r) {
         "use strict";
         e.exports = [[/(ax|test)is$/i, "$1es"], [/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, "$1i"], [/(octop|vir)i$/i, "$1i"], [/(kn|l|w)ife$/i, "$1ives"], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i, "$1ves"], [/^(dwar|handkerchie|hoo|scar|whar)f$/i, "$1ves"], [/(alias|status)$/i, "$1es"], [/(bu)s$/i, "$1ses"], [/(al|ad|at|er|et|ed|ad)o$/i, "$1oes"], [/([ti])um$/i, "$1a"], [/([ti])a$/i, "$1a"], [/sis$/i, "ses"], [/(hive)$/i, "$1s"], [/([^aeiouy]|qu)y$/i, "$1ies"], [/(x|ch|ss|sh|s|z)$/i, "$1es"], [/(matr|vert|ind|cort)(ix|ex)$/i, "$1ices"], [/([m|l])ouse$/i, "$1ice"], [/([m|l])ice$/i, "$1ice"], [/^(ox)$/i, "$1en"], [/^(oxen)$/i, "$1"], [/(quiz)$/i, "$1zes"], [/(antenn|formul|nebul|vertebr|vit)a$/i, "$1ae"], [/(sis)$/i, "ses"], [/^(?!talis|.*hu)(.*)man$/i, "$1men"], [/(.*)/i, "$1s"]].map(function (t) {
            return { reg: t[0], repl: t[1] };
         });
      }, {}], 43: [function (t, e, r) {
         "use strict";
         e.exports = [[/([^v])ies$/i, "$1y"], [/ises$/i, "isis"], [/(kn|[^o]l|w)ives$/i, "$1ife"], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i, "$1f"], [/^(dwar|handkerchie|hoo|scar|whar)ves$/i, "$1f"], [/(antenn|formul|nebul|vertebr|vit)ae$/i, "$1a"], [/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, "$1us"], [/(buffal|tomat|tornad)(oes)$/i, "$1o"], [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i, "$1sis"], [/(vert|ind|cort)(ices)$/i, "$1ex"], [/(matr|append)(ices)$/i, "$1ix"], [/(x|ch|ss|sh|s|z|o)es$/i, "$1"], [/men$/i, "man"], [/(n)ews$/i, "$1ews"], [/([ti])a$/i, "$1um"], [/([^aeiouy]|qu)ies$/i, "$1y"], [/(s)eries$/i, "$1eries"], [/(m)ovies$/i, "$1ovie"], [/([m|l])ice$/i, "$1ouse"], [/(cris|ax|test)es$/i, "$1is"], [/(alias|status)es$/i, "$1"], [/(ss)$/i, "$1"], [/(ics)$/i, "$1"], [/s$/i, ""]].map(function (t) {
            return { reg: t[0], repl: t[1] };
         });
      }, {}], 44: [function (t, e, r) {
         "use strict";
         var n = t("./data/pluralRules"),
             i = function i(t, e) {
            var r,
                i = e.plurals || {};if (i.hasOwnProperty(t) === !0) return i[t];for (r = 0; r < n.length; r++) {
               if (n[r].reg.test(t) === !0) return t.replace(n[r].reg, n[r].repl);
            }return null;
         };e.exports = i;
      }, { "./data/pluralRules": 42 }], 45: [function (t, e, r) {
         "use strict";
         var n = t("./data/singleRules"),
             i = function t(e, r) {
            var i,
                a,
                o,
                s,
                u,
                l = r.cache.toSingular;if (l.hasOwnProperty(e) === !0) return l[e];if (r && r.plurals) for (i = Object.keys(r.plurals), a = 0; a < i.length; a++) {
               if (r.plurals[i[a]] === e) return i[a];
            }if (/([a-z]*) (of|in|by|for) [a-z]/.test(e) === !0 && (o = (e.match(/^([a-z]*) (of|in|by|for) [a-z]/) || [])[1])) return s = t(o), s + e.replace(o, "");for (u = 0; u < n.length; u++) {
               if (n[u].reg.test(e) === !0) return e.replace(n[u].reg, n[u].repl);
            }return null;
         };e.exports = i;
      }, { "./data/singleRules": 43 }], 46: [function (t, e, r) {
         "use strict";
         var n = t("../../paths").Terms,
             i = t("./hasPlural"),
             a = t("./isPlural"),
             o = t("./makeArticle"),
             s = t("./methods/pluralize"),
             u = t("./methods/singularize"),
             l = { article: function article() {
               return o(this.main);
            }, isPlural: function isPlural() {
               return a(this.main, this.world);
            }, hasPlural: function hasPlural() {
               return i(this.main);
            }, toPlural: function toPlural() {
               var t = this.main;return i(t) && !a(t, this.world) && (t.text = s(t.normal, this.world) || t.text, t.unTag("Singular", "toPlural"), t.tag("Plural", "toPlural")), this;
            }, toSingular: function toSingular() {
               var t = this.main;return a(t, this.world) && (t.text = u(t.normal, this.world) || t.text, t.unTag("Plural", "toSingular"), t.tag("Singular", "toSingular")), this;
            }, data: function data() {
               var t,
                   e,
                   r = this.main,
                   n = r.text;return a(r, this.world) && (n = u(r.normal, this.world) || r.text), t = r.text, i(r) && !a(r, this.world) && (t = s(r.normal, this.world) || r.text), e = "", this.qualifier && (e = this.qualifier.out("normal"), n += " " + e, t += " " + e), { text: this.out("text"), normal: this.out("normal"), article: this.article(), main: r.normal, qualifier: e, singular: n, plural: t };
            } },
             c = function c(t, e, r) {
            n.call(this, t, e, r), this.main = this.match("[#Noun+] (of|by|for)"), this.main.found ? this.main = this.main.list[0].terms[0] : this.main = this.terms[this.terms.length - 1], this.qualifier = this.match(this.main.normal + " [.+]").list[0];
         };c.prototype = Object.create(n.prototype), Object.keys(l).forEach(function (t) {
            c.prototype[t] = l[t];
         }), e.exports = c;
      }, { "../../paths": 8, "./hasPlural": 37, "./isPlural": 39, "./makeArticle": 40, "./methods/pluralize": 44, "./methods/singularize": 45 }], 47: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t ? /.(i|ee|[a|e]y|a)$/.test(t) === !0 ? "Female" : /[ou]$/.test(t) === !0 ? "Male" : /(nn|ll|tt)/.test(t) === !0 ? "Female" : null : null;
         };e.exports = n;
      }, {}], 48: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./person"),
             a = { pronoun: function pronoun() {
               return this.list.map(function (t) {
                  return t.pronoun();
               });
            }, firstNames: function firstNames() {
               return this.match("#FirstName");
            }, lastNames: function lastNames() {
               return this.match("#LastName");
            } },
             o = function o(t, e) {
            var r = t.clauses();return r = r.match("#Person+"), "number" == typeof e && (r = r.get(e)), r.list = r.list.map(function (t) {
               return new i(t.terms, t.world, t.refText, t.refTerms);
            }), r;
         };e.exports = n.makeSubset(a, o);
      }, { "../../text": 186, "./person": 49 }], 49: [function (t, e, r) {
         "use strict";
         var n,
             i = t("../../paths").Terms,
             a = t("./guessGender"),
             o = function o(t, e, r, n) {
            if (i.call(this, t, e, r, n), this.firstName = this.match("#FirstName+"), this.middleName = this.match("#Acronym+"), this.honorifics = this.match("#Honorific"), this.lastName = this.match("#LastName+"), !this.firstName.found && this.length > 1) {
               var a = this.not("(#Acronym|#Honorific)");this.firstName = a.first(), this.lastName = a.last();
            }return this;
         };o.prototype = Object.create(i.prototype), n = { data: function data() {
               return { text: this.out("text"), normal: this.out("normal"), firstName: this.firstName.out("normal"), middleName: this.middleName.out("normal"), lastName: this.lastName.out("normal"), genderGuess: this.guessGender(), pronoun: this.pronoun(), honorifics: this.honorifics.out("array") };
            }, guessGender: function guessGender() {
               if (this.honorifics.match("(mr|mister|sr|sir|jr)").found) return "Male";if (this.honorifics.match("(mrs|miss|ms|misses|mme|mlle)").found) return "Female";if (this.firstName.match("#MaleName").found) return "Male";if (this.firstName.match("#FemaleName").found) return "Female";var t = this.firstName.out("normal");return a(t);
            }, pronoun: function pronoun() {
               var t = this.firstName.out("normal"),
                   e = this.guessGender(t);return "Male" === e ? "he" : "Female" === e ? "she" : "they";
            }, root: function root() {
               var t = this.firstName.out("root"),
                   e = this.lastName.out("root");return t && e ? t + " " + e : e || t || this.out("root");
            } }, Object.keys(n).forEach(function (t) {
            o.prototype[t] = n[t];
         }), e.exports = o;
      }, { "../../paths": 8, "./guessGender": 47 }], 50: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./sentence"),
             a = { toPastTense: function toPastTense() {
               return this.list = this.list.map(function (t) {
                  return t = t.toPastTense(), new i(t.terms, t.world, t.refText, t.refTerms);
               }), this;
            }, toPresentTense: function toPresentTense() {
               return this.list = this.list.map(function (t) {
                  return t = t.toPresentTense(), new i(t.terms, t.world, t.refText, t.refTerms);
               }), this;
            }, toFutureTense: function toFutureTense() {
               return this.list = this.list.map(function (t) {
                  return t = t.toFutureTense(), new i(t.terms, t.world, t.refText, t.refTerms);
               }), this;
            }, toNegative: function toNegative() {
               return this.list = this.list.map(function (t) {
                  return t = t.toNegative(), new i(t.terms, t.world, t.refText, t.refTerms);
               }), this;
            }, toPositive: function toPositive() {
               return this.list = this.list.map(function (t) {
                  return t = t.toPositive(), new i(t.terms, t.world, t.refText, t.refTerms);
               }), this;
            }, isPassive: function isPassive() {
               return this.list = this.list.filter(function (t) {
                  return t.isPassive();
               }), this;
            }, prepend: function prepend(t) {
               return this.list = this.list.map(function (e) {
                  return e.prepend(t);
               }), this;
            }, append: function append(t) {
               return this.list = this.list.map(function (e) {
                  return e.append(t);
               }), this;
            }, toExclamation: function toExclamation() {
               return this.list.forEach(function (t) {
                  t.setPunctuation("!");
               }), this;
            }, toQuestion: function toQuestion() {
               return this.list.forEach(function (t) {
                  t.setPunctuation("?");
               }), this;
            }, toStatement: function toStatement() {
               return this.list.forEach(function (t) {
                  t.setPunctuation(".");
               }), this;
            } },
             o = function o(t, e) {
            return t = t.all(), "number" == typeof e && (t = t.get(e)), t.list = t.list.map(function (t) {
               return new i(t.terms, t.world, t.refText, t.refTerms);
            }), t;
         };e.exports = n.makeSubset(a, o);
      }, { "../../text": 186, "./sentence": 52 }], 51: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e,
                r = t.endPunctuation();return (/\?/.test(r) === !0 || !!t.has("#QuestionWord") || !!t.has("^(do|does|did|is|was) #Noun") || (e = t.match("*").splitAfter("#Comma"), !!e.has("(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$"))
            );
         };e.exports = n;
      }, {}], 52: [function (t, e, r) {
         "use strict";
         var n = t("../../paths").Terms,
             i = t("./toNegative"),
             a = t("./toPositive"),
             o = t("../verbs/verb"),
             s = t("./smartInsert"),
             u = function u(t) {
            var e = t.match("#Condition"),
                r = t.not("#Condition"),
                n = r.match("#VerbPhrase+").first(),
                i = n.out("normal"),
                a = r.match("#Determiner? #Adjective+? #Noun " + i).first().not("#VerbPhrase"),
                s = r.match(i + " #Preposition? #Determiner? #Noun").first().not("#VerbPhrase");return t.conditions = e, t.subject = a, t.verb = n, t.object = s, t.verb.found && (t.verb = new o(t.verb.list[0].terms, t.world, t.refText, t.refTerms)), t;
         },
             l = function l(t) {
            t.found && t.contractions().expand();
         },
             c = function c(t) {
            t.terms = t.terms.filter(function (t) {
               if (t.silent_term) {
                  if ("am" === t.silent_term || "will" === t.silent_term || "did" === t.silent_term) return !1;t.text = t.silent_term, t.silent_term = null, t.unTag("Contraction"), t.tags.TitleCase === !0 && t.toTitleCase();
               }return !0;
            });
         },
             h = function h(t) {
            return !(!t.subject.found || !t.subject.has("(i|we)"));
         },
             f = { toSingular: function toSingular() {
               var t = this.match("#Noun").match("!#Pronoun").firstTerm();return t.things().toSingular(), this;
            }, toPlural: function toPlural() {
               var t = this.match("#Noun").match("!#Pronoun").firstTerm();return t.things().toPlural(), this;
            }, mainVerb: function mainVerb() {
               return u(this), this.verb.found ? this.verb : null;
            }, toPastTense: function toPastTense() {
               var t,
                   e,
                   r,
                   n,
                   i = this.mainVerb();return i ? (t = i.out("root"), i.toPastTense(), e = this.match("#Contraction " + t), l(e), r = i.out("root"), n = this.parentTerms.replace(t, r)) : this;
            }, toPresentTense: function toPresentTense() {
               var t,
                   e,
                   r,
                   n = this.mainVerb();return n ? (t = n.out("normal"), h(this) === !0 ? (this.has("(am|will|did) " + t) && c(this), n.toInfinitive()) : (n.toPresentTense(), e = this.match("#Contraction " + t), l(e)), r = n.out("normal"), this.parentTerms.replace(t, r)) : this;
            }, toFutureTense: function toFutureTense() {
               var t,
                   e,
                   r,
                   n = this.mainVerb();return n ? (t = n.clone(), n.toFutureTense(), e = this.match("#Contraction " + t.out("normal")), l(e), r = n.out("normal"), this.parentTerms.replace(t, r)) : this;
            }, isNegative: function isNegative() {
               return 1 === this.match("#Negative").list.length;
            }, toNegative: function toNegative() {
               return this.isNegative() ? this : i(this);
            }, toPositive: function toPositive() {
               return this.isNegative() ? a(this) : this;
            }, append: function append(t) {
               return s.append(this, t);
            }, prepend: function prepend(t) {
               return s.prepend(this, t);
            }, setPunctuation: function setPunctuation(t) {
               var e = this.terms[this.terms.length - 1];e.setPunctuation(t);
            }, getPunctuation: function getPunctuation() {
               var t = this.terms[this.terms.length - 1];return t.getPunctuation();
            }, isPassive: function isPassive() {
               return this.match("was #Adverb? #PastTense #Adverb? by").found;
            } },
             m = function m(t, e, r, i) {
            n.call(this, t, e, r, i), u(this);
         };m.prototype = Object.create(n.prototype), Object.keys(f).forEach(function (t) {
            m.prototype[t] = f[t];
         }), e.exports = m;
      }, { "../../paths": 8, "../verbs/verb": 91, "./smartInsert": 53, "./toNegative": 54, "./toPositive": 55 }], 53: [function (t, e, r) {
         "use strict";
         var n = /^[A-Z]/,
             i = function i(t, e) {
            var r,
                i = t.terms[0];return t.insertAt(0, e), n.test(i.text) && (i.needsTitleCase() === !1 && i.toLowerCase(), r = t.terms[0], r.toTitleCase()), t;
         },
             a = function a(t, e) {
            var r,
                n = t.terms[t.terms.length - 1],
                i = t.endPunctuation();return i && n.killPunctuation(), t.insertAt(t.terms.length, e), r = t.terms[t.terms.length - 1], i && (r.text += i), n.whitespace.after && (r.whitespace.after = n.whitespace.after, n.whitespace.after = ""), t;
         };e.exports = { append: a, prepend: i };
      }, {}], 54: [function (t, e, r) {
         "use strict";
         var n = { everyone: "no one", everybody: "nobody", someone: "no one", somebody: "nobody", always: "never" },
             i = function i(t) {
            var e,
                r,
                i = t.match("(everyone|everybody|someone|somebody|always)").first();return i.found && n[i.out("normal")] ? (e = i.out("normal"), t = t.match(e).replaceWith(n[e]).list[0], t.parentTerms) : (r = t.mainVerb(), r && r.toNegative(), t);
         };e.exports = i;
      }, {}], 55: [function (t, e, r) {
         "use strict";
         var n = { never: "always", nothing: "everything" },
             i = function i(t) {
            var e,
                r = t.match("(never|nothing)").first();return r.found && (e = r.out("normal"), n[e]) ? (t = t.match(e).replaceWith(n[e], !0).list[0], t.parentTerms) : (t.delete("#Negative"), t);
         };e.exports = i;
      }, {}], 56: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("../../paths").Terms,
             a = { data: function data() {
               return this.list.map(function (t) {
                  var e = t.terms[0];return { spaceBefore: e.whitespace.before, text: e.text, spaceAfter: e.whitespace.after, normal: e.normal, implicit: e.silent_term, bestTag: e.bestTag(), tags: Object.keys(e.tags) };
               });
            } },
             o = function o(t, e) {
            var r = [];return t.list.forEach(function (e) {
               e.terms.forEach(function (n) {
                  r.push(new i([n], e.world, t));
               });
            }), t = new n(r, t.world, t.parent), "number" == typeof e && (t = t.get(e)), t;
         };e.exports = n.makeSubset(a, o);
      }, { "../../paths": 8, "../../text": 186 }], 57: [function (t, e, r) {
         "use strict";
         var n = t("./numOrdinal"),
             i = t("./textOrdinal"),
             a = t("./textCardinal"),
             o = t("./niceNumber"),
             s = { nice: function nice(t) {
               return o(t);
            }, ordinal: function ordinal(t) {
               return n(t);
            }, cardinal: function cardinal(t) {
               return "" + t;
            }, niceOrdinal: function niceOrdinal(t) {
               return t = n(t), t = o(t);
            }, text: function text(t) {
               return a(t).join(" ");
            }, textOrdinal: function textOrdinal(t) {
               return i(t);
            } };e.exports = s;
      }, { "./niceNumber": 58, "./numOrdinal": 59, "./textCardinal": 60, "./textOrdinal": 61 }], 58: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e, r, n, i;if (!t && 0 !== t) return null;for (t = "" + t, e = t.split("."), r = e[0], n = e.length > 1 ? "." + e[1] : "", i = /(\d+)(\d{3})/; i.test(r);) {
               r = r.replace(i, "$1,$2");
            }return r + n;
         };e.exports = n;
      }, {}], 59: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e, r, n, i;return t || 0 === t ? (e = t % 100, e > 10 && 20 > e ? "" + t + "th" : (r = { 0: "th", 1: "st", 2: "nd", 3: "rd" }, n = "" + t, i = n.slice(n.length - 1, n.length), n += r[i] ? r[i] : "th")) : null;
         };e.exports = n;
      }, {}], 60: [function (t, e, r) {
         "use strict";
         var n = [["ninety", 90], ["eighty", 80], ["seventy", 70], ["sixty", 60], ["fifty", 50], ["forty", 40], ["thirty", 30], ["twenty", 20]],
             i = ["", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"],
             a = [[1e9, "million"], [1e8, "hundred million"], [1e6, "million"], [1e5, "hundred thousand"], [1e3, "thousand"], [100, "hundred"], [1, "one"]],
             o = function o(t) {
            var e = t,
                r = [];return a.forEach(function (n) {
               if (t >= n[0]) {
                  var i = Math.floor(e / n[0]);e -= i * n[0], i && r.push({ unit: n[1], count: i });
               }
            }), r;
         },
             s = function s(t) {
            var e,
                r = [];for (e = 0; e < n.length; e++) {
               t < n[e][1] || (t -= n[e][1], r.push(n[e][0]));
            }return i[t] && r.push(i[t]), r;
         },
             u = function u(t) {
            var e,
                r,
                n = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"],
                i = [],
                a = ("" + t).match(/\.([0-9]+)/);if (!a || !a[0]) return i;for (i.push("point"), e = a[0].split(""), r = 0; r < e.length; r++) {
               i.push(n[e[r]]);
            }return i;
         },
             l = function l(t) {
            var e,
                r,
                n,
                i = [];for (0 > t && (i.push("negative"), t = Math.abs(t)), e = o(t), r = 0; r < e.length; r++) {
               n = e[r].unit, "one" === n && (n = "", i.length > 1 && i.push("and")), i = i.concat(s(e[r].count)), i.push(n);
            }return i = i.concat(u(t)), i = i.filter(function (t) {
               return t;
            }), 0 === i.length && (i[0] = ""), i;
         };e.exports = l;
      }, {}], 61: [function (t, e, r) {
         "use strict";
         var n = t("./textCardinal"),
             i = t("../../../world/more-data/numbers").toOrdinal,
             a = function a(t) {
            var e = n(t),
                r = e[e.length - 1];return e[e.length - 1] = i[r] || r, e.join(" ");
         };e.exports = a;
      }, { "../../../world/more-data/numbers": 213, "./textCardinal": 60 }], 62: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./value"),
             a = t("./parse"),
             o = { noDates: function noDates() {
               return this.not("#Date");
            }, noUnits: function noUnits() {
               return this.not("#Unit");
            }, units: function units() {
               return this.match("#Unit+");
            }, numbers: function numbers() {
               return this.list.map(function (t) {
                  return t.number();
               });
            }, toNumber: function toNumber() {
               return this.list = this.list.map(function (t) {
                  return t.toNumber();
               }), this;
            }, toText: function toText() {
               return this.list = this.list.map(function (t) {
                  return t.toText();
               }), this;
            }, toCardinal: function toCardinal() {
               return this.list = this.list.map(function (t) {
                  return t.toCardinal();
               }), this;
            }, toOrdinal: function toOrdinal() {
               return this.list = this.list.map(function (t) {
                  return t.toOrdinal();
               }), this;
            }, toNice: function toNice() {
               return this.list = this.list.map(function (t) {
                  return t.toNice();
               }), this;
            }, isEqual: function isEqual(t) {
               return t = a(t), this.list = this.list.filter(function (e) {
                  return null !== t && e.number() === t;
               }), this;
            }, greaterThan: function greaterThan(t) {
               return t = a(t), this.list = this.list.filter(function (e) {
                  return null !== t && e.number() > t;
               }), this;
            }, lessThan: function lessThan(t) {
               return t = a(t), this.list = this.list.filter(function (e) {
                  return null !== t && e.number() < t;
               }), this;
            }, add: function add(t) {
               return this.list = this.list.map(function (e) {
                  return e.add(t);
               }), this;
            }, subtract: function subtract(t) {
               return this.list = this.list.map(function (e) {
                  return e.subtract(t);
               }), this;
            }, increment: function increment() {
               return this.list = this.list.map(function (t) {
                  return t.add(1);
               }), this;
            }, decrement: function decrement() {
               return this.list = this.list.map(function (t) {
                  return t.subtract(1);
               }), this;
            } },
             s = function s(t, e) {
            var r,
                n,
                a = "twenty|thirty|fourty|fifty|sixty|seventy|eighty|ninety",
                o = "eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen";return t = t.match("#Value+ #Unit?"), t.has("#Value #Value #Value") && !t.has("#Multiple") && t.has("(" + a + ") #Cardinal #Cardinal") && t.splitAfter("(" + a + ") #Cardinal"), t.has("#Value #Value") && (t.has("#NumericValue #NumericValue") && t.splitOn("#Year"), t.has("(" + a + ") (" + o + ")") && t.splitAfter("(" + a + ")"), r = t.match("#Cardinal #Cardinal"), r.found && !t.has("(point|decimal)") && (r.has("#Cardinal (#Multiple|point|decimal)") || r.has("(" + a + ") #Cardinal") || r.has("#Multiple #Value") || t.splitAfter(r.terms(0).out("normal"))), t.match("#Ordinal #Ordinal").match("#TextValue").found && !t.has("#Multiple") && (t.has("(" + a + ") #Ordinal") || t.splitAfter("#Ordinal")), t.has("#Ordinal #Cardinal") && t.splitBefore("#Cardinal+"), t.has("#TextValue #NumericValue") && !t.has("(" + a + "|#Multiple)") && t.splitBefore("#NumericValue+")), t.has("#NumberRange") && t.splitAfter("#NumberRange"), t.splitAfter("#Comma"), "number" == typeof e && (t = t.get(e)), n = t.world(), t.list = t.list.map(function (t) {
               return new i(t.terms, n, t.refText, t.refTerms);
            }), t;
         };e.exports = n.makeSubset(o, s);
      }, { "../../text": 186, "./parse": 63, "./value": 71 }], 63: [function (t, e, r) {
         "use strict";
         var n = t("./parseText"),
             i = /^-?(\$|€|¥|£)?\.?[0-9]+[0-9,\.]*(st|nd|rd|th|rth|%)?$/,
             a = function a(t) {
            if (i.test(t) === !0) {
               t = t.replace(/,/g, ""), t = t.replace(/^[\$|€|¥|£]/g, ""), t = t.replace(/%$/, ""), t = t.replace(/(st|nd|rd|th|rth)$/g, "");var e = parseFloat(t);if (e || 0 === e) return e;
            }return n(t);
         },
             o = function o(t) {
            if (null === t || void 0 === t || "number" == typeof t) return t;if ("string" == typeof t) return a(t);if (1 === t.terms.length && t.terms[0].tags.TextValue !== !0) {
               var e = t.terms[0].normal;return a(e);
            }return n(t.out("normal"));
         };e.exports = o;
      }, { "./parseText": 66 }], 64: [function (t, e, r) {
         "use strict";
         var n = t("../../../world/more-data/numbers"),
             i = t("../paths").fns,
             a = i.extend(n.ordinal.ones, n.cardinal.ones),
             o = i.extend(n.ordinal.teens, n.cardinal.teens),
             s = i.extend(n.ordinal.tens, n.cardinal.tens),
             u = i.extend(n.ordinal.multiples, n.cardinal.multiples);e.exports = { ones: a, teens: o, tens: s, multiples: u };
      }, { "../../../world/more-data/numbers": 213, "../paths": 70 }], 65: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e,
                r = [{ reg: /^(minus|negative)[\s\-]/i, mult: -1 }, { reg: /^(a\s)?half[\s\-](of\s)?/i, mult: .5 }];for (e = 0; e < r.length; e++) {
               if (r[e].reg.test(t) === !0) return { amount: r[e].mult, str: t.replace(r[e].reg, "") };
            }return { amount: 1, str: t };
         };e.exports = n;
      }, {}], 66: [function (t, e, r) {
         "use strict";
         var n = t("./findModifiers"),
             i = t("./data"),
             a = t("./validate"),
             o = t("./parseDecimals"),
             s = t("./parseNumeric"),
             u = /^([0-9,\. ]+)\/([0-9,\. ]+)$/,
             l = { "a couple": 2, "a dozen": 12, "two dozen": 24, zero: 0 },
             c = function c(t) {
            return Object.keys(t).reduce(function (e, r) {
               return e += t[r];
            }, 0);
         },
             h = function h(t) {
            var e, r, h, f, m, d, p, g, v, y, b, D, w;if (l.hasOwnProperty(t) === !0) return l[t];if ("a" === t || "an" === t) return 1;for (e = n(t), t = e.str, r = null, h = {}, f = 0, m = !1, d = t.split(/[ -]/), p = 0; p < d.length; p++) {
               if (g = d[p], g = s(g), g && "and" !== g) if ("-" !== g && "negative" !== g) {
                  if ("-" === g.charAt(0) && (m = !0, g = g.substr(1)), "point" === g) return f += c(h), f += o(d.slice(p + 1, d.length)), f *= e.amount;if (v = g.match(u)) y = parseFloat(v[1].replace(/[, ]/g, "")), b = parseFloat(v[2].replace(/[, ]/g, "")), b && (f += y / b || 0);else {
                     if (a(g, h) === !1) return null;if (/^[0-9\.]+$/.test(g)) h.ones = parseFloat(g);else if (i.ones[g]) h.ones = i.ones[g];else if (i.teens[g]) h.teens = i.teens[g];else if (i.tens[g]) h.tens = i.tens[g];else if (i.multiples[g]) {
                        if (D = i.multiples[g], D === r) return null;100 === D && void 0 !== d[p + 1] && (w = d[p + 1], i.multiples[w] && (D *= i.multiples[w], p += 1)), null === r || r > D ? (f += (c(h) || 1) * D, r = D, h = {}) : (f += c(h), r = D, f = (f || 1) * D, h = {});
                     }
                  }
               } else m = !0;
            }return f += c(h), f *= e.amount, f *= m ? -1 : 1, 0 === f ? null : f;
         };e.exports = h;
      }, { "./data": 64, "./findModifiers": 65, "./parseDecimals": 67, "./parseNumeric": 68, "./validate": 69 }], 67: [function (t, e, r) {
         "use strict";
         var n = t("./data"),
             i = function i(t) {
            var e,
                r,
                i = "0.";for (e = 0; e < t.length; e++) {
               if (r = t[e], void 0 !== n.ones[r]) i += n.ones[r];else if (void 0 !== n.teens[r]) i += n.teens[r];else if (void 0 !== n.tens[r]) i += n.tens[r];else {
                  if (/^[0-9]$/.test(r) !== !0) return 0;i += r;
               }
            }return parseFloat(i);
         };e.exports = i;
      }, { "./data": 64 }], 68: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t = t.replace(/1st$/, "1"), t = t.replace(/2nd$/, "2"), t = t.replace(/3rd$/, "3"), t = t.replace(/([4567890])r?th$/, "$1"), t = t.replace(/^[$€¥£¢]/, ""), t = t.replace(/[%$€¥£¢]$/, ""), t = t.replace(/,/g, ""), t = t.replace(/([0-9])([a-z]{1,2})$/, "$1");
         };e.exports = n;
      }, {}], 69: [function (t, e, r) {
         "use strict";
         var n = t("./data"),
             i = function i(t, e) {
            if (n.ones[t]) {
               if (e.ones || e.teens) return !1;
            } else if (n.teens[t]) {
               if (e.ones || e.teens || e.tens) return !1;
            } else if (n.tens[t] && (e.ones || e.teens || e.tens)) return !1;return !0;
         };e.exports = i;
      }, { "./data": 64 }], 70: [function (t, e, r) {
         "use strict";
         e.exports = t("../../paths");
      }, { "../../paths": 8 }], 71: [function (t, e, r) {
         "use strict";
         var n,
             i = t("../../paths"),
             a = i.Terms,
             o = t("./parse"),
             s = t("./format"),
             u = function u(t) {
            return t.val = t.match("#Value+"), t.val = t.val.list[0], t.unit = t.match("#Unit+"), t.unit.found && (t.unit = t.unit.list[0]), t;
         },
             l = function l(t, e) {
            return !(!t.has("#Percent") && !e.has("#Percent")) || "percent" === e.out("normal") || null !== t.out("normal").match(/%$/);
         },
             c = function c(t, e) {
            var r = t.val.out();return r = t.has("#Ordinal") ? t.has("#TextValue") ? s.textOrdinal(e) : s.ordinal(e) : t.has("#TextValue") ? s.text(e) : t.has("#NiceNumber") ? s.nice(e) : s.cardinal(e), t.unit.found && (r += t.unit.out("text")), t = t.replaceWith(r, !0), u(t);
         },
             h = function h(t, e, r, n) {
            a.call(this, t, e, r, n), u(this);
         };h.prototype = Object.create(a.prototype), n = { data: function data() {
               var t = o(this.val);return { number: t, nice: s.nice(t), ordinal: s.ordinal(t), niceOrdinal: s.niceOrdinal(t), text: s.text(t), textOrdinal: s.textOrdinal(t), unit: this.unit.out("normal") };
            }, number: function number() {
               return o(this.val);
            }, toNumber: function toNumber() {
               var t,
                   e = o(this.val);return null !== e && (t = "", this.val.has("#Ordinal") ? t = s.ordinal(e) : (t = e + "", l(this.val, this.unit) && (t += "%", this.unit.delete())), this.unit.found && (t += this.unit.out("text")), this.replaceWith(t, !0).tag("NumericValue"), this.unit.found && this.match(this.unit.out("normal")).tag("Unit")), this;
            }, toText: function toText() {
               var t,
                   e = o(this.val);return null !== e && (t = "", this.val.has("#Ordinal") ? t = s.textOrdinal(e) : (t = s.text(e), l(this.val, this.unit) && (t += " percent")), this.unit.found && (t += this.unit.out("text")), this.replaceWith(t, !0).tag("TextValue"), this.unit.found && this.match(this.unit.out("normal")).tag("Unit")), this;
            }, toCardinal: function toCardinal() {
               var t,
                   e = o(this.val);return null !== e && (t = "", t = this.val.has("#TextValue") ? s.text(e) : e, this.unit.found && (t += this.unit.out("text")), this.replaceWith(t, !0).tag("Cardinal"), this.unit.found && this.match(this.unit.out("normal")).tag("Unit")), this;
            }, toOrdinal: function toOrdinal() {
               var t,
                   e = o(this.val);return null !== e && (t = "", t = this.val.has("#TextValue") ? s.textOrdinal(e) : s.ordinal(e), this.unit.found && (t += this.unit.out("text")), this.replaceWith(t, !0).tag("Ordinal"), this.unit.found && this.match(this.unit.out("normal")).tag("Unit")), this;
            }, toNice: function toNice() {
               var t,
                   e = o(this.val);return null !== e && (t = "", t = this.val.has("#Ordinal") ? s.niceOrdinal(e) : s.nice(e), this.unit.found && (t += this.unit.out("text")), this.replaceWith(t, !0).tag("NumericValue"), this.unit.found && this.match(this.unit.out("normal")).tag("Unit")), this;
            }, add: function add(t) {
               if (!t) return this;var e = o(this.val) || 0;return e += t, c(this, e);
            }, subtract: function subtract(t) {
               if (!t) return this;var e = o(this.val) || 0;return e -= t, c(this, e);
            }, increment: function increment() {
               return this.add(1);
            }, decrement: function decrement() {
               return this.subtract(1);
            } }, Object.keys(n).forEach(function (t) {
            h.prototype[t] = n[t];
         }), e.exports = h;
      }, { "../../paths": 8, "./format": 57, "./parse": 63 }], 72: [function (t, e, r) {
         "use strict";
         var n = t("../../text"),
             i = t("./verb"),
             a = { conjugation: function conjugation(t) {
               return this.list.map(function (e) {
                  return e.conjugation(t);
               });
            }, conjugate: function conjugate(t) {
               return this.list.map(function (e) {
                  return e.conjugate(t);
               });
            }, isPlural: function isPlural() {
               return this.list = this.list.filter(function (t) {
                  return t.isPlural();
               }), this;
            }, isSingular: function isSingular() {
               return this.list = this.list.filter(function (t) {
                  return !t.isPlural();
               }), this;
            }, isNegative: function isNegative() {
               return this.list = this.list.filter(function (t) {
                  return t.isNegative();
               }), this;
            }, isPositive: function isPositive() {
               return this.list = this.list.filter(function (t) {
                  return !t.isNegative();
               }), this;
            }, toNegative: function toNegative() {
               return this.list = this.list.map(function (t) {
                  return t.toNegative();
               }), this;
            }, toPositive: function toPositive() {
               return this.list.forEach(function (t) {
                  t.toPositive();
               }), this;
            }, toPastTense: function toPastTense() {
               return this.list.forEach(function (t) {
                  t.toPastTense();
               }), this;
            }, toPresentTense: function toPresentTense() {
               return this.list.forEach(function (t) {
                  t.toPresentTense();
               }), this;
            }, toFutureTense: function toFutureTense() {
               return this.list.forEach(function (t) {
                  t.toFutureTense();
               }), this;
            }, toInfinitive: function toInfinitive() {
               return this.list.forEach(function (t) {
                  t.toInfinitive();
               }), this;
            }, asAdjective: function asAdjective() {
               return this.list.map(function (t) {
                  return t.asAdjective();
               });
            } },
             o = function o(t, e) {
            return t = t.match("(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+"), t = t.splitAfter("#Comma"), t = t.if("#Verb"), "number" == typeof e && (t = t.get(e)), t.list = t.list.map(function (t) {
               return new i(t.terms, t.world, t.refText, t.refTerms);
            }), new n(t.list, this.world, this.parent);
         };e.exports = n.makeSubset(a, o);
      }, { "../../text": 186, "./verb": 91 }], 73: [function (t, e, r) {
         "use strict";
         var n = t("./methods/predict"),
             i = t("./methods/isPlural"),
             a = function a(t) {
            return t.match("#Gerund").found;
         },
             o = function o(t) {
            var e = t.match("#Negative").list;return 2 !== e.length && 1 === e.length;
         },
             s = function s(t) {
            return !!t.match("is being #PastTense").found || !!t.match("(had|has) been #PastTense").found || !!t.match("will have been #PastTense").found;
         },
             u = function u(t) {
            return !!t.match("^(had|have) #PastTense");
         },
             l = function l(t) {
            var e = t.match("#Modal");return e.found ? e.out("normal") : null;
         },
             c = function c(t) {
            var e, r;if (t.auxiliary.found) {
               if (t.match("will have #PastTense").found) return "Past";if (t.auxiliary.match("will").found) return "Future";if (t.auxiliary.match("was").found) return "Past";
            }return t.verb ? (e = { PastTense: "Past", FutureTense: "Future", FuturePerfect: "Future" }, r = n(t.verb), e[r] || "Present") : "Present";
         },
             h = function h(t) {
            var e = o(t),
                r = { negative: e, continuous: a(t), passive: s(t), perfect: u(t), plural: i(t), modal: l(t), tense: c(t) };return r;
         };e.exports = h;
      }, { "./methods/isPlural": 83, "./methods/predict": 84 }], 74: [function (t, e, r) {
         "use strict";
         var n = t("./irregulars"),
             i = t("./suffixes"),
             a = t("./toActor"),
             o = t("./generic"),
             s = t("../predict"),
             u = t("../toInfinitive"),
             l = t("./toBe"),
             c = function c(t, e) {
            var r, c, h, f, m;return "is" === t.normal || "was" === t.normal || "will" === t.normal ? l() : (t.tags.Contraction && (t.text = t.silent_term), r = { PastTense: null, PresentTense: null, Infinitive: null, Gerund: null, Actor: null }, c = s(t), c && (r[c] = t.normal), "Infinitive" !== c && (r.Infinitive = u(t, e) || ""), h = n(r.Infinitive, e) || {}, Object.keys(h).forEach(function (t) {
               h[t] && !r[t] && (r[t] = h[t]);
            }), f = r.Infinitive || t.normal, m = i(f), Object.keys(m).forEach(function (t) {
               m[t] && !r[t] && (r[t] = m[t]);
            }), r.Actor || (r.Actor = a(f)), Object.keys(r).forEach(function (t) {
               !r[t] && o[t] && (r[t] = o[t](r));
            }), r);
         };e.exports = c;
      }, { "../predict": 84, "../toInfinitive": 87, "./generic": 77, "./irregulars": 79, "./suffixes": 80, "./toActor": 81, "./toBe": 82 }], 75: [function (t, e, r) {
         "use strict";
         e.exports = [{ reg: /(eave)$/i, repl: { pr: "$1s", pa: "$1d", gr: "eaving", ar: "$1r" } }, { reg: /(ink)$/i, repl: { pr: "$1s", pa: "unk", gr: "$1ing", ar: "$1er" } }, { reg: /(end)$/i, repl: { pr: "$1s", pa: "ent", gr: "$1ing", ar: "$1er" } }, { reg: /(ide)$/i, repl: { pr: "$1s", pa: "ode", gr: "iding", ar: "ider" } }, { reg: /(ake)$/i, repl: { pr: "$1s", pa: "ook", gr: "aking", ar: "$1r" } }, { reg: /(eed)$/i, repl: { pr: "$1s", pa: "$1ed", gr: "$1ing", ar: "$1er" } }, { reg: /(e)(ep)$/i, repl: { pr: "$1$2s", pa: "$1pt", gr: "$1$2ing", ar: "$1$2er" } }, { reg: /(a[tg]|i[zn]|ur|nc|gl|is)e$/i, repl: { pr: "$1es", pa: "$1ed", gr: "$1ing", prt: "$1en" } }, { reg: /([i|f|rr])y$/i, repl: { pr: "$1ies", pa: "$1ied", gr: "$1ying" } }, { reg: /([td]er)$/i, repl: { pr: "$1s", pa: "$1ed", gr: "$1ing" } }, { reg: /([bd]l)e$/i, repl: { pr: "$1es", pa: "$1ed", gr: "$1ing" } }, { reg: /(ish|tch|ess)$/i, repl: { pr: "$1es", pa: "$1ed", gr: "$1ing" } }, { reg: /(ion|end|e[nc]t)$/i, repl: { pr: "$1s", pa: "$1ed", gr: "$1ing" } }, { reg: /(om)e$/i, repl: { pr: "$1es", pa: "ame", gr: "$1ing" } }, { reg: /([aeiu])([pt])$/i, repl: { pr: "$1$2s", pa: "$1$2", gr: "$1$2$2ing" } }, { reg: /(er)$/i, repl: { pr: "$1s", pa: "$1ed", gr: "$1ing" } }, { reg: /(en)$/i, repl: { pr: "$1s", pa: "$1ed", gr: "$1ing" } }, { reg: /(ed)$/i, repl: { pr: "$1s", pa: "$1ded", ar: "$1der", gr: "$1ding" } }, { reg: /(..)(ow)$/i, repl: { pr: "$1$2s", pa: "$1ew", gr: "$1$2ing", prt: "$1$2n" } }, { reg: /(..)([cs]h)$/i, repl: { pr: "$1$2es", pa: "$1$2ed", gr: "$1$2ing" } }, { reg: /([^aeiou][ou])(g|d)$/i, repl: { pr: "$1$2s", pa: "$1$2$2ed", gr: "$1$2$2ing" } }, { reg: /([^aeiou][aeiou])(b|t|p|m)$/i, repl: { pr: "$1$2s", pa: "$1$2$2ed", gr: "$1$2$2ing" } }, { reg: /([aeiou]zz)$/i, repl: { pr: "$1es", pa: "$1ed", gr: "$1ing" } }];
      }, {}], 76: [function (t, e, r) {
         "use strict";
         var n = t("./irregulars"),
             i = t("./suffixes"),
             a = t("./generic"),
             o = ["Gerund", "PastTense", "PresentTense"],
             s = function s(t, e) {
            var r,
                s,
                u,
                l = { Infinitive: t };for (e && e.conjugations && (r = n(l.Infinitive, e), null !== r && Object.keys(r).forEach(function (t) {
               r[t] && !l[t] && (l[t] = r[t]);
            })), s = i(t), Object.keys(s).forEach(function (t) {
               s[t] && !l[t] && (l[t] = s[t]);
            }), u = 0; u < o.length; u++) {
               void 0 === l[o[u]] && (l[o[u]] = a[o[u]](l));
            }return l;
         };e.exports = s;
      }, { "./generic": 77, "./irregulars": 79, "./suffixes": 80 }], 77: [function (t, e, r) {
         "use strict";
         var n = /[bcdfghjklmnpqrstvwxz]y$/,
             i = { Gerund: function Gerund(t) {
               var e = t.Infinitive;return "e" === e.charAt(e.length - 1) ? e.replace(/e$/, "ing") : e + "ing";
            }, PresentTense: function PresentTense(t) {
               var e = t.Infinitive;return "s" === e.charAt(e.length - 1) ? e + "es" : n.test(e) === !0 ? e.slice(0, -1) + "ies" : e + "s";
            }, PastTense: function PastTense(t) {
               var e = t.Infinitive;return "e" === e.charAt(e.length - 1) ? e + "d" : "ed" === e.substr(-2) ? e : n.test(e) === !0 ? e.slice(0, -1) + "ied" : e + "ed";
            } };e.exports = i;
      }, {}], 78: [function (t, e, r) {
         "use strict";
         var n = t("./conjugate"),
             i = t("./toBe"),
             a = function a(t, e) {
            var r,
                a,
                o = t.negative.found,
                s = t.isPlural();return t.verb.tags.Copula || "be" === t.verb.normal && t.auxiliary.match("will").found ? i(s, o) : (r = n(t.verb, t.world, e), t.particle.found && Object.keys(r).forEach(function (e) {
               r[e] = r[e] + t.particle.out();
            }), o && (r.PastTense = "did not " + r.Infinitive, r.PresentTense = "does not " + r.Infinitive), r.FutureTense || (o ? r.FutureTense = "will not " + r.Infinitive : r.FutureTense = "will " + r.Infinitive), t.adverbs.found && (a = t.first().match("#Adverb").found, Object.keys(r).forEach(function (e) {
               a ? r[e] = t.adverbs.out() + " " + r[e] : r[e] = r[e] + t.adverbs.out();
            })), r);
         };e.exports = a;
      }, { "./conjugate": 74, "./toBe": 82 }], 79: [function (t, e, r) {
         "use strict";
         var n = t("../../../../fns"),
             i = ["Participle", "Gerund", "PastTense", "PresentTense", "FuturePerfect", "PerfectTense", "Actor"],
             a = function a(t, e) {
            var r,
                a,
                o,
                s,
                u,
                l = e.conjugations,
                c = Object.keys(l);if (e && e.conjugations && e.conjugations.hasOwnProperty(t) === !0) return e.conjugations[t];if (l.hasOwnProperty(t) === !0) return r = n.copy(l[t]), r.Infinitive = t, r;for (a = 0; a < c.length; a++) {
               for (o = 0; o < i.length; o++) {
                  if (s = l[c[a]], s[i[o]] === t) return u = n.copy(s), u.Infinitive = c[a], u;
               }
            }return {};
         };e.exports = a;
      }, { "../../../../fns": 3 }], 80: [function (t, e, r) {
         "use strict";
         var n = t("./data/rules"),
             i = { pr: "PresentTense", pa: "PastTense", gr: "Gerund", prt: "Participle", ar: "Actor" },
             a = Object.keys(i),
             o = function o(t) {
            var e,
                r,
                o,
                s,
                u = {};for (e = 0; e < n.length; e++) {
               if (n[e].reg.test(t) === !0) {
                  for (r = n[e].repl, o = 0; o < a.length; o++) {
                     r.hasOwnProperty(a[o]) === !0 && (s = i[a[o]], u[s] = t.replace(n[e].reg, r[a[o]]));
                  }return u;
               }
            }return u;
         };e.exports = o;
      }, { "./data/rules": 75 }], 81: [function (t, e, r) {
         "use strict";
         var n = { tie: "tier", dream: "dreamer", sail: "sailer", run: "runner", rub: "rubber", begin: "beginner", win: "winner", claim: "claimant", deal: "dealer", spin: "spinner" },
             i = { aid: 1, fail: 1, appear: 1, happen: 1, seem: 1, try: 1, say: 1, marry: 1, be: 1, forbid: 1, understand: 1, bet: 1 },
             a = [{ reg: /e$/i, repl: "er" }, { reg: /([aeiou])([mlgp])$/i, repl: "$1$2$2er" }, { reg: /([rlf])y$/i, repl: "$1ier" }, { reg: /^(.?.[aeiou])t$/i, repl: "$1tter" }],
             o = function o(t) {
            if (i[t]) return null;if (n.hasOwnProperty(t)) return n[t];for (var e = 0; e < a.length; e++) {
               if (a[e].reg.test(t) === !0) return t.replace(a[e].reg, a[e].repl);
            }return t + "er";
         };e.exports = o;
      }, {}], 82: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r = { PastTense: "was", PresentTense: "is", FutureTense: "will be", Infinitive: "is", Gerund: "being", Actor: "", PerfectTense: "been", Pluperfect: "been" };return t && (r.PastTense = "were", r.PresentTense = "are", r.Infinitive = "are"), e && (r.PastTense += " not", r.PresentTense += " not", r.FutureTense = "will not be", r.Infinitive += " not", r.PerfectTense = "not " + r.PerfectTense, r.Pluperfect = "not " + r.Pluperfect), r;
         };e.exports = n;
      }, {}], 83: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            if (t.match("(are|were|does)").found) return !0;if (t.match("(is|am|do|was)").found) return !1;var e = t.getNoun();if (e && e.found) {
               if (e.match("#Plural").found) return !0;if (e.match("#Singular").found) return !1;
            }return null;
         };e.exports = n;
      }, {}], 84: [function (t, e, r) {
         "use strict";
         var n = t("./suffix_rules"),
             i = { Infinitive: !0, Gerund: !0, PastTense: !0, PresentTense: !0, FutureTense: !0, PerfectTense: !0, Pluperfect: !0, FuturePerfect: !0, Participle: !0 },
             a = function a(t) {
            var e,
                r,
                a,
                o,
                s = Object.keys(i);for (e = 0; e < s.length; e++) {
               if (t.tags[s[e]]) return s[e];
            }for (r = Object.keys(n), a = 0; a < r.length; a++) {
               if (o = t.normal.substr(-r[a].length), o === r[a] && t.normal.length > r[a].length) return n[r[a]];
            }return null;
         };e.exports = a;
      }, { "./suffix_rules": 85 }], 85: [function (t, e, r) {
         "use strict";
         var n,
             i,
             a,
             o = { Gerund: ["ing"], Actor: ["erer"], Infinitive: ["ate", "ize", "tion", "rify", "then", "ress", "ify", "age", "nce", "ect", "ise", "ine", "ish", "ace", "ash", "ure", "tch", "end", "ack", "and", "ute", "ade", "ock", "ite", "ase", "ose", "use", "ive", "int", "nge", "lay", "est", "ain", "ant", "ent", "eed", "er", "le", "own", "unk", "ung", "en"], PastTense: ["ed", "lt", "nt", "pt", "ew", "ld"], PresentTense: ["rks", "cks", "nks", "ngs", "mps", "tes", "zes", "ers", "les", "acks", "ends", "ands", "ocks", "lays", "eads", "lls", "els", "ils", "ows", "nds", "ays", "ams", "ars", "ops", "ffs", "als", "urs", "lds", "ews", "ips", "es", "ts", "ns", "s"] },
             s = {},
             u = Object.keys(o),
             l = u.length;for (n = 0; l > n; n++) {
            for (i = o[u[n]].length, a = 0; i > a; a++) {
               s[o[u[n]][a]] = u[n];
            }
         }e.exports = s;
      }, {}], 86: [function (t, e, r) {
         "use strict";
         var n = [[/y$/, "i"], [/([aeiou][n])$/, "$1n"]],
             i = { collect: !0, exhaust: !0, convert: !0, digest: !0, discern: !0, dismiss: !0, reverse: !0, access: !0, collapse: !0, express: !0 },
             a = { eat: "edible", hear: "audible", see: "visible", defend: "defensible", write: "legible", move: "movable", divide: "divisible", perceive: "perceptible" },
             o = function o(t) {
            var e, r;if (a.hasOwnProperty(t)) return a[t];for (e = 0; e < n.length; e++) {
               n[e][0].test(t) === !0 && (t = t.replace(n[e][0], n[e][1]));
            }return r = t + "able", i[t] && (r = t + "ible"), r;
         };e.exports = o;
      }, {}], 87: [function (t, e, r) {
         "use strict";
         var n = t("./rules"),
             i = t("../predict"),
             a = function a(t, e) {
            var r,
                a,
                o,
                s = e.cache.toInfinitive;if (t.tags.Infinitive) return t.normal;if (s.hasOwnProperty(t.normal) === !0) return s[t.normal];if (r = i(t), n[r]) for (a = 0; a < n[r].length; a++) {
               if (o = n[r][a], t.normal.match(o.reg)) return t.normal.replace(o.reg, o.to);
            }return t.normal;
         };e.exports = a;
      }, { "../predict": 84, "./rules": 88 }], 88: [function (t, e, r) {
         "use strict";
         var n = { Participle: [{ reg: /own$/i, to: "ow" }, { reg: /(.)un([g|k])$/i, to: "$1in$2" }], Actor: [{ reg: /(er)er$/i, to: "$1" }], PresentTense: [{ reg: /(..)(ies)$/i, to: "$1y" }, { reg: /(tch|sh)es$/i, to: "$1" }, { reg: /(ss|zz)es$/i, to: "$1" }, { reg: /([tzlshicgrvdnkmu])es$/i, to: "$1e" }, { reg: /(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i, to: "$1" }, { reg: /(ow)s$/i, to: "$1" }, { reg: /(op)s$/i, to: "$1" }, { reg: /([eirs])ts$/i, to: "$1t" }, { reg: /(ll)s$/i, to: "$1" }, { reg: /(el)s$/i, to: "$1" }, { reg: /(ip)es$/i, to: "$1e" }, { reg: /ss$/i, to: "ss" }, { reg: /s$/i, to: "" }], Gerund: [{ reg: /pping$/i, to: "p" }, { reg: /lling$/i, to: "ll" }, { reg: /tting$/i, to: "t" }, { reg: /dding$/i, to: "d" }, { reg: /ssing$/i, to: "ss" }, { reg: /(..)gging$/i, to: "$1g" }, { reg: /([^aeiou])ying$/i, to: "$1y" }, { reg: /([^ae]i.)ing$/i, to: "$1e" }, { reg: /(ea.)ing$/i, to: "$1" }, { reg: /(u[rtcb]|[bdtpkg]l|n[cg]|a[gdkvtc]|[ua]s|[dr]g|yz|o[rlsp]|cre)ing$/i, to: "$1e" }, { reg: /(ch|sh)ing$/i, to: "$1" }, { reg: /(..)ing$/i, to: "$1" }], PastTense: [{ reg: /(ued)$/i, to: "ue" }, { reg: /a([^aeiouy])ed$/i, to: "a$1e" }, { reg: /([aeiou]zz)ed$/i, to: "$1" }, { reg: /(e|i)lled$/i, to: "$1ll" }, { reg: /(.)(sh|ch)ed$/i, to: "$1$2" }, { reg: /(tl|gl)ed$/i, to: "$1e" }, { reg: /(um?pt?)ed$/i, to: "$1" }, { reg: /(ss)ed$/i, to: "$1" }, { reg: /pped$/i, to: "p" }, { reg: /tted$/i, to: "t" }, { reg: /(..)gged$/i, to: "$1g" }, { reg: /(..)lked$/i, to: "$1lk" }, { reg: /([^aeiouy][aeiou])ked$/i, to: "$1ke" }, { reg: /(.[aeiou])led$/i, to: "$1l" }, { reg: /(..)(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i, to: "$1$2" }, { reg: /(.ut)ed$/i, to: "$1e" }, { reg: /(us)ed$/i, to: "$1e" }, { reg: /(..[^aeiouy])ed$/i, to: "$1e" }, { reg: /(..)ied$/i, to: "$1y" }, { reg: /(.o)ed$/i, to: "$1o" }, { reg: /(..i)ed$/i, to: "$1" }, { reg: /(.a[^aeiou])ed$/i, to: "$1" }, { reg: /([rl])ew$/i, to: "$1ow" }, { reg: /([pl])t$/i, to: "$1t" }] };e.exports = n;
      }, {}], 89: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t.match("#Contraction+").list.forEach(function (t) {
               t.has("#Verb") && t.terms.forEach(function (t) {
                  t.silent_term && (t.text || (t.whitespace.before = " "), t._text = t.silent_term, t.tags.TitleCase && t.toTitleCase(), t.normalize(), t.silent_term = null, t.unTag("Contraction", "expanded"));
               });
            }), t;
         };e.exports = n;
      }, {}], 90: [function (t, e, r) {
         "use strict";
         var n = t("./methods/toInfinitive"),
             i = function i(t) {
            return t = t.match("(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+"), t = t.splitAfter("#Comma"), t.list[0];
         },
             a = function a(t) {
            var e,
                r,
                a,
                o,
                s,
                u,
                l,
                c,
                h,
                f,
                m,
                d,
                p,
                g,
                v,
                y,
                b,
                D,
                w,
                x,
                E,
                A,
                k = t.match("#Auxiliary").first();return k.found ? (e = k.list[0].index(), r = t.parentTerms.insertAt(e + 1, "not", "Verb"), r.match("not").tag("Negative", "tag-not"), i(r)) : (a = t.match("(#Copula|will|has|had|do)").first(), a.found ? (o = a.list[0].index(), s = t.parentTerms.insertAt(o + 1, "not", "Verb"), s.match("not").tag("Negative", "tag-not"), i(s)) : (u = t.isPlural(), l = t.match("#PastTense").last(), l.found ? (c = l.list[0], h = c.index(), c.terms[0].text = n(c.terms[0], t.world), f = t.parentTerms.insertAt(h, "did not", "Verb"), f.match("not").tag("Negative", "tag-not"), i(f)) : (m = t.match("#PresentTense").first(), m.found ? (d = m.list[0], p = d.index(), d.terms[0].text = n(d.terms[0], t.world), g = t.getNoun(), v = null, v = g.match("(i|we|they|you)").found ? t.parentTerms.insertAt(p, "do not", "Verb") : t.parentTerms.insertAt(p, "does not", "Verb"), v.match("not").tag("Negative", "tag-not"), i(v)) : (y = t.match("#Gerund").last(), y.found ? (b = y.list[0].index(), D = t.parentTerms.insertAt(b, "not", "Verb"), D.match("not").tag("Negative", "tag-not"), i(D)) : (w = t.match("#Verb").last(), w.found ? (x = w.list[0], E = x.index(), x.terms[0].text = n(x.terms[0], t.world), A = t, A = u ? t.parentTerms.insertAt(E - 1, "do not", "Verb") : t.parentTerms.insertAt(E - 1, "does not", "Verb"), A.match("not").tag("Negative", "tag-not"), i(A)) : t)))));
         };e.exports = a;
      }, { "./methods/toInfinitive": 87 }], 91: [function (t, e, r) {
         "use strict";
         var n = t("../../paths").Terms,
             i = t("./methods/conjugate"),
             a = t("./methods/toAdjective"),
             o = t("./interpret"),
             s = t("./toNegative"),
             u = t("./methods/isPlural"),
             l = t("./methods/verbContraction"),
             c = function c(t) {
            var e,
                r,
                n = t;return t.negative = t.match("#Negative"), t.adverbs = t.match("#Adverb"), e = t.clone().not("(#Adverb|#Negative)"), t.verb = e.match("#Verb").not("#Particle").last(), t.particle = e.match("#Particle").last(), t.verb.found ? (r = t.verb.out("normal"), t.auxiliary = n.not(r).not("(#Adverb|#Negative)"), t.verb = t.verb.list[0].terms[0]) : t.verb = n.terms[0], t;
         },
             h = { parse: function parse() {
               return c(this);
            }, data: function data(t) {
               return { text: this.out("text"), normal: this.out("normal"), parts: { negative: this.negative.out("normal"), auxiliary: this.auxiliary.out("normal"), verb: this.verb.out("normal"), particle: this.particle.out("normal"), adverbs: this.adverbs.out("normal") }, interpret: o(this, t), conjugations: this.conjugate() };
            }, getNoun: function getNoun() {
               if (!this.refTerms) return null;var t = "#Adjective? #Noun+ " + this.out("normal");return this.refTerms.match(t).match("#Noun+");
            }, conjugation: function conjugation() {
               return o(this, !1).tense;
            }, conjugate: function conjugate(t) {
               return i(this, t);
            }, isPlural: function isPlural() {
               return u(this);
            }, isNegative: function isNegative() {
               return 1 === this.match("#Negative").list.length;
            }, isPerfect: function isPerfect() {
               return this.auxiliary.match("(have|had)").found;
            }, toNegative: function toNegative() {
               return this.isNegative() ? this : s(this);
            }, toPositive: function toPositive() {
               return this.match("#Negative").delete();
            }, toPastTense: function toPastTense() {
               var t, e;return this.has("#Contraction") && (this.list = l(this.parentTerms).list), t = this.conjugate(), e = this.replaceWith(t.PastTense, !1), e.verb.tag("#PastTense"), e;
            }, toPresentTense: function toPresentTense() {
               var t, e;return this.has("#Contraction") && l(this.parentTerms), t = this.conjugate(), e = this.replaceWith(t.PresentTense, !1), e.verb.tag("#PresentTense"), e;
            }, toFutureTense: function toFutureTense() {
               var t, e;return this.has("#Contraction") && l(this.parentTerms), t = this.conjugate(), e = this.replaceWith(t.FutureTense, !1), e.verb.tag("#FutureTense"), e;
            }, toInfinitive: function toInfinitive() {
               var t, e;return this.has("#Contraction") && l(this.parentTerms), t = this.conjugate(), e = this.replaceWith(t.Infinitive, !1), e.verb.tag("#Infinitive"), e;
            }, asAdjective: function asAdjective() {
               return a(this.verb.out("normal"));
            } },
             f = function f(t, e, r, i) {
            return n.call(this, t, e, r, i), c(this);
         };f.prototype = Object.create(n.prototype), Object.keys(h).forEach(function (t) {
            f.prototype[t] = h[t];
         }), e.exports = f;
      }, { "../../paths": 8, "./interpret": 73, "./methods/conjugate": 78, "./methods/isPlural": 83, "./methods/toAdjective": 86, "./methods/verbContraction": 89, "./toNegative": 90 }], 92: [function (t, e, r) {
         "use strict";
         var n = t("./fix"),
             i = { wanna: ["want", "to"], gonna: ["going", "to"], im: ["i", "am"], alot: ["a", "lot"], dont: ["do", "not"], dun: ["do", "not"], ive: ["i", "have"], "won't": ["will", "not"], wont: ["will", "not"], "can't": ["can", "not"], cant: ["can", "not"], cannot: ["can", "not"], "shan't": ["should", "not"], imma: ["I", "will"], "where'd": ["where", "did"], whered: ["where", "did"], "when'd": ["when", "did"], whend: ["when", "did"], "how'd": ["how", "did"], howd: ["how", "did"], "what'd": ["what", "did"], whatd: ["what", "did"], "let's": ["let", "us"], dunno: ["do", "not", "know"], brb: ["be", "right", "back"], gtg: ["got", "to", "go"], irl: ["in", "real", "life"], tbh: ["to", "be", "honest"], imo: ["in", "my", "opinion"], til: ["today", "i", "learned"], rn: ["right", "now"], "@": ["at"] },
             a = function a(t) {
            var e, r, a;for (e = 0; e < t.terms.length; e++) {
               r = t.terms[e], i[r.normal] && (a = i[r.normal], t = n(t, a, e), e += a.length - 1);
            }return t;
         };e.exports = a;
      }, { "./fix": 96 }], 93: [function (t, e, r) {
         "use strict";
         var n = t("./fix"),
             i = t("./split"),
             a = { "that's": !0, "there's": !0 },
             o = { we: !0, they: !0, you: !0 },
             s = function s(t, e) {
            var r = t.terms[e],
                n = t.terms[e + 1];return !(r.tags.Pronoun || r.tags.QuestionWord || a[r.normal] || n && (n.tags.VerbPhrase || !n.tags.Noun && !(n.tags.Adjective && t.terms[e + 2] && t.terms[e + 2].tags.Noun) && (n.tags.Adjective || n.tags.Adverb || n.tags.Verb, 1)));
         },
             u = function u(t, e) {
            var r,
                n = ["is", "not"];return t.terms[e - 1] && (r = t.terms[e - 1], r.tags.Adverb && t.terms[e - 2] && (r = t.terms[e - 2]), (r.tags.Plural || o[r.normal] === !0) && (n[0] = "are")), n;
         },
             l = function l(t) {
            var e, r, a, o, l;for (e = 0; e < t.terms.length; e++) {
               if (!t.terms[e].silent_term) if ("ain't" !== t.terms[e].normal && "aint" !== t.terms[e].normal) {
                  if (a = i(t.terms[e]), a && "s" === a.end) {
                     if (s(t, e)) {
                        t.terms[e].tag("#Possessive", "hard-contraction");continue;
                     }o = [a.start, "is"], t.terms[e + 1] && (l = t.terms[e].normal, t.match(l + " (#Negative|#Adverb|#Auxiliary)+? #Gerund").found ? o = [a.start, "is"] : t.match(l + " (#Negative|#Adverb|#Auxiliary)+? #Verb").found && (o = [a.start, "has"])), t = n(t, o, e), e += 1;
                  }
               } else r = u(t, e), t = n(t, r, e), e += 1;
            }return t;
         };e.exports = l;
      }, { "./fix": 96, "./split": 98 }], 94: [function (t, e, r) {
         "use strict";
         var n = t("./fix"),
             i = t("./split"),
             a = { ll: "will", ve: "have", re: "are", m: "am", "n't": "not" },
             o = function o(t) {
            var e, r, o, s;for (e = 0; e < t.terms.length; e++) {
               t.terms[e].silent_term || (r = i(t.terms[e]), r && (r.start = r.start.toLowerCase(), a[r.end] && (o = [r.start, a[r.end]], t = n(t, o, e), e += 1), "d" === r.end && (s = [r.start, "would"], t.terms[e + 1] && t.terms[e + 1].tags.PastTense && (s[1] = "had"), t.terms[e + 2] && t.terms[e + 2].tags.PastTense && t.terms[e + 1].tags.Adverb && (s[1] = "had"), t = n(t, s, e), e += 1)));
            }return t;
         };e.exports = o;
      }, { "./fix": 96, "./split": 98 }], 95: [function (t, e, r) {
         "use strict";
         var n = t("./fix"),
             i = t("../../term"),
             a = function a(t) {
            var e = /(-|–|—)/;return e.test(t.whitespace.before) || e.test(t.whitespace.after);
         },
             o = function o(t) {
            var e, r, o, s;for (e = 0; e < t.terms.length; e++) {
               if (r = t.terms[e], !r.silent_term && !r.tags.TextValue) {
                  if (r.tags.Value && e > 0 && (a(r) || a(t.terms[e - 1])) && t.terms[e - 1].tags.Value) return o = new i("", t.world), o.silent_term = "to", t.insertAt(e, o), t.terms[e - 1].tag("NumberRange", "number-number1"), t.terms[e].tag("NumberRange", "number-number2"), t.terms[e].whitespace.before = "", t.terms[e].whitespace.after = "", t.terms[e + 1].tag("NumberRange", "number-number3"), t;r.tags.NumberRange && (s = r.text.split(/(-)/), s[1] = "to", t = n(t, s, e), t.terms[e].tag(["NumberRange", "NumericValue"], "numRange-1"), t.terms[e + 1].tag(["NumberRange", "Preposition"], "numRange-silent"), t.terms[e + 2].tag(["NumberRange", "NumericValue"], "numRange-3"), e += 2);
               }
            }return t;
         };e.exports = o;
      }, { "../../term": 138, "./fix": 96 }], 96: [function (t, e, r) {
         "use strict";
         var n = t("../../term"),
             i = { not: "Negative", will: "Verb", would: "Modal", have: "Verb", are: "Copula", is: "Copula", am: "Verb" },
             a = function a(t) {
            i[t.silent_term] && t.tag(i[t.silent_term]);
         },
             o = function o(t, e, r) {
            var i,
                o,
                s = t.terms[r];return s.silent_term = e[0], s.tag("Contraction", "tagger-contraction"), e[1] && (i = new n("", t.world), i.silent_term = e[1], i.tag("Contraction", "tagger-contraction"), t.insertAt(r + 1, i), i.whitespace.before = "", i.whitespace.after = "", a(i)), e[2] && (o = new n("", t.world), o.silent_term = e[2], t.insertAt(r + 2, o), o.tag("Contraction", "tagger-contraction"), a(o)), t;
         };e.exports = o;
      }, { "../../term": 138 }], 97: [function (t, e, r) {
         "use strict";
         var n = t("./01-irregulars"),
             i = t("./02-isWasHas"),
             a = t("./03-easyOnes"),
             o = t("./04-numberRange"),
             s = function s(t) {
            return t = n(t), t = i(t), t = a(t), t = o(t);
         };e.exports = s;
      }, { "./01-irregulars": 92, "./02-isWasHas": 93, "./03-easyOnes": 94, "./04-numberRange": 95 }], 98: [function (t, e, r) {
         "use strict";
         var n = /^([a-z]+)'([a-z][a-z]?)$/i,
             i = /[a-z]s'$/i,
             a = { re: 1, ve: 1, ll: 1, t: 1, s: 1, d: 1, m: 1 },
             o = function o(t) {
            var e = t.normal.match(n);return e && e[1] && 1 === a[e[2]] ? ("t" === e[2] && e[1].match(/[a-z]n$/) && (e[1] = e[1].replace(/n$/, ""), e[2] = "n't"), t.tags.TitleCase === !0 && (e[1] = e[1].replace(/^[a-z]/, function (t) {
               return t.toUpperCase();
            })), { start: e[1], end: e[2] }) : i.test(t.text) === !0 ? { start: t.normal.replace(/s'?$/, ""), end: "" } : null;
         };e.exports = o;
      }, {}], 99: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e, r, n;return t.has("so") && (t.match("so #Adjective").match("so").tag("Adverb", "so-adv"), t.match("so #Noun").match("so").tag("Conjunction", "so-conj"), t.match("do so").match("so").tag("Noun", "so-noun")), t.has("all") && (t.match("[all] #Determiner? #Noun").tag("Adjective", "all-noun"), t.match("[all] #Verb").tag("Adverb", "all-verb")), t.has("(that|which)") && (t.match("#Verb #Adverb? #Noun (that|which)").lastTerm().tag("Preposition", "that-prep"), t.match("that #Noun #Verb").firstTerm().tag("Determiner", "that-determiner")), t.has("#Determiner") && (t.match("(the|this) #Verb #Preposition .").term(1).tag("Noun", "correction-determiner1"), t.match("(the|those|these) (#Infinitive|#PresentTense|#PastTense)").term(1).tag("Noun", "correction-determiner2"), t.match("(a|an) #Gerund").term(1).tag("Adjective", "correction-a|an"), t.match("(a|an) #Adjective (#Infinitive|#PresentTense)").term(2).tag("Noun", "correction-a|an2"), t.match("(some #Verb #Plural").term(1).tag("Noun", "correction-determiner6"), t.match("#Determiner #Adjective$").term(1).tag("Noun", "the-adj-1"), t.match("#Determiner #Adjective (#Copula|#PastTense|#Auxiliary)").term(1).tag("Noun", "the-adj-2"), t.match("(the|this|those|these) #Adjective #Verb").term(2).tag("Noun", "the-adj-verb"), t.match("(the|this|those|these) #Adverb #Adjective #Verb").term(3).tag("Noun", "correction-determiner4"), t.match("(the|this|a|an) #Infinitive #Adverb? #Verb").term(1).tag("Noun", "correction-determiner5"), t.match("#Determiner #Verb of").term(1).tag("Noun", "the-verb-of"), t.match("#Determiner #Noun of #Verb").term(3).tag("Noun", "noun-of-noun"), t.match("#Determiner #Adverb? [close]").tag("Adjective", "a-close"), t.match("#Verb (a|an) [#Value]").tag("Singular", "a-value")), t.has("like") && (t.match("just like").term(1).tag("Preposition", "like-preposition"), t.match("#Noun like #Noun").term(1).tag("Preposition", "noun-like"), t.match("#Verb like").term(1).tag("Adverb", "verb-like"), t.match("#Adverb like").term(1).tag("Adverb", "adverb-like")), t.has("#Value") && (t.match("half a? #Value").tag("Value", "half-a-value"), t.match("#Value and a (half|quarter)").tag("Value", "value-and-a-half"), t.match("#Value+ #Currency").tag("Money", "value-currency").lastTerm().tag("Unit", "money-unit"), t.match("#Money and #Money #Currency?").tag("Money", "money-and-money"), t.match("1 #Value #PhoneNumber").tag("PhoneNumber", "1-800-Value"), t.match("#NumericValue #PhoneNumber").tag("PhoneNumber", "(800) PhoneNumber"), t.match("#TextValue+").match("#Cardinal+ #Ordinal").tag("Ordinal", "two-hundredth")), t.has("#Noun") && (t.match("more #Noun").tag("Noun", "more-noun"), t.match("second #Noun").term(0).unTag("Unit").tag("Ordinal", "second-noun"), t.match("#Noun #Adverb #Noun").term(2).tag("Verb", "correction"), t.match("#Noun #Particle").term(1).tag("Preposition", "repair-noPhrasal"), t.match("#Noun (&|n) #Noun").tag("Organization", "Noun-&-Noun"), t.match("#Noun #Actor").tag("Actor", "thing-doer"), t.match("#Possessive #FirstName").term(1).unTag("Person", "possessive-name"), t.match("(this|that) #Plural").term(1).tag("PresentTense", "this-verbs"), t.match("#Determiner [(western|eastern|northern|southern|central)] #Noun").tag("Noun", "western-line"), t.match("(#Determiner|#Value) [(linear|binary|mobile|lexical|technical|computer|scientific|formal)] #Noun").tag("Noun", "technical-noun"), t.has("#Organization") && (t.match("#Organization of the? #TitleCase").tag("Organization", "org-of-place"), t.match("#Organization #Country").tag("Organization", "org-country"), t.match("(world|global|international|national|#Demonym) #Organization").tag("Organization", "global-org"))), t.has("#Verb") && (t.match("still #Verb").term(0).tag("Adverb", "still-verb"), t.match("u #Verb").term(0).tag("Pronoun", "u-pronoun-1"), t.match("is no #Verb").term(2).tag("Noun", "is-no-verb"), t.match("#Verb than").term(0).tag("Noun", "correction"), t.match("#Possessive #Verb").term(1).tag("Noun", "correction-possessive"), t.match("#Copula #Adjective to #Verb").match("#Adjective to").tag("Verb", "correction"), t.has("(who|what|where|why|how|when)") && (t.match("^how").term(0).tag("QuestionWord", "how-question").tag("QuestionWord", "how-question"), t.match("how (#Determiner|#Copula|#Modal|#PastTense)").term(0).tag("QuestionWord", "how-is"), t.match("^which").term(0).tag("QuestionWord", "which-question").tag("QuestionWord", "which-question"), t.match("which . (#Noun)+ #Pronoun").term(0).tag("QuestionWord", "which-question2"), t.match("which").term(0).tag("QuestionWord", "which-question3"), e = t.match("#QuestionWord #Noun #Copula #Adverb? (#Verb|#Adjective)").firstTerm(), e.unTag("QuestionWord").tag("Conjunction", "how-he-is-x"), e = t.match("#QuestionWord #Noun #Adverb? #Infinitive not? #Gerund").firstTerm(), e.unTag("QuestionWord").tag("Conjunction", "when i go fishing")), t.match("#Copula #Infinitive #Noun").term(1).tag("Noun", "is-pres-noun"), t.match("#Infinitive #Copula").term(0).tag("Noun", "infinitive-copula"), r = "(#Adverb|not)+?", t.has(r) && (t.match("(has|had) " + r + " #PastTense").not("#Verb$").tag("Auxiliary", "had-walked"), t.match("#Copula " + r + " #Gerund").not("#Verb$").tag("Auxiliary", "copula-walking"), t.match("(be|been) " + r + " #Gerund").not("#Verb$").tag("Auxiliary", "be-walking"), t.match("(#Modal|did) " + r + " #Verb").not("#Verb$").tag("Auxiliary", "modal-verb"), t.match("#Modal " + r + " have " + r + " had " + r + " #Verb").not("#Verb$").tag("Auxiliary", "would-have"), t.match("(#Modal) " + r + " be " + r + " #Verb").not("#Verb$").tag("Auxiliary", "would-be"), t.match("(#Modal|had|has) " + r + " been " + r + " #Verb").not("#Verb$").tag("Auxiliary", "would-be")), t.match("#PhrasalVerb #PhrasalVerb").lastTerm().tag("Particle", "phrasal-particle"), t.match("#Gerund #Adverb? not? #Copula").firstTerm().tag("Activity", "gerund-copula"), t.match("#Gerund #Modal").firstTerm().tag("Activity", "gerund-modal")), t.has("#Adjective") && (t.match("still #Adjective").match("still").tag("Adverb", "still-advb"), t.match("#Adjective #PresentTense").term(1).tag("Noun", "adj-presentTense"), t.match("will #Adjective").term(1).tag("Verb", "will-adj"), t.match("#PresentTense (hard|quick|long|bright|slow)").lastTerm().tag("Adverb", "lazy-ly")), t.has("#TitleCase") && (t.match("#TitleCase (ltd|co|inc|dept|assn|bros)").tag("Organization", "org-abbrv"), t.match("#TitleCase+ (district|region|province|county|prefecture|municipality|territory|burough|reservation)").tag("Region", "foo-district"), t.match("(district|region|province|municipality|territory|burough|state) of #TitleCase").tag("Region", "district-of-Foo")), t.has("#Hyphenated") && (t.match("#Hyphenated #Hyphenated").match("#Noun #Verb").tag("Noun", "hyphen-verb"), n = t.match("#Hyphenated+"), n.has("#Expression") && n.tag("Expression", "ooh-wee")), t.match("(west|north|south|east|western|northern|southern|eastern)+ #Place").tag("Region", "west-norfolk"), t.match("(foot|feet)").tag("Noun", "foot-noun"), t.match("#Value (foot|feet)").term(1).tag("Unit", "foot-unit"), t.match("#Conjunction u").term(1).tag("Pronoun", "u-pronoun-2"), t.match("(a|an) (#Duration|hundred|thousand|million|billion|trillion)").ifNo("#Plural").term(0).tag("Value", "a-is-one"), t.match("holy (shit|fuck|hell)").tag("Expression", "swears-expression"), t.match("#Determiner (shit|damn|hell)").term(1).tag("Noun", "swears-noun"), t.match("(shit|damn|fuck) (#Determiner|#Possessive|them)").term(0).tag("Verb", "swears-verb"), t.match("#Copula fucked up?").not("#Copula").tag("Adjective", "swears-adjective"), t.match("#Holiday (day|eve)").tag("Holiday", "holiday-day"), t.match("(standard|daylight|summer|eastern|pacific|central|mountain) standard? time").tag("Time", "timezone"), t.match("#Demonym #Currency").tag("Currency", "demonym-currency"), t.match("about to #Adverb? #Verb").match("about to").tag(["Auxiliary", "Verb"], "about-to"), t.match("#Honorific #Person").tag("Person", "honorific-person"), t.match("#Person (jr|sr|md)").tag("Person", "person-honorific"), t.match("(right|rights) of .").tag("Noun", "right-of"), t;
         };e.exports = n;
      }, {}], 100: [function (t, e, r) {
         "use strict";
         var n = { punctuation_step: t("./steps/01-punctuation_step"), lexicon_step: t("./steps/02-lexicon_step"), lexicon_multi: t("./steps/03-lexicon_multi"), capital_step: t("./steps/04-capital_step"), web_step: t("./steps/05-web_step"), suffix_step: t("./steps/06-suffix_step"), neighbour_step: t("./steps/07-neighbour_step"), noun_fallback: t("./steps/08-noun_fallback"), date_step: t("./steps/09-date_step"), auxiliary_step: t("./steps/10-auxiliary_step"), negation_step: t("./steps/11-negation_step"), comma_step: t("./steps/13-comma_step"), possessive_step: t("./steps/14-possessive_step"), value_step: t("./steps/15-value_step"), acronym_step: t("./steps/16-acronym_step"), emoji_step: t("./steps/17-emoji_step"), person_step: t("./steps/18-person_step"), quotation_step: t("./steps/19-quotation_step"), organization_step: t("./steps/20-organization_step"), plural_step: t("./steps/21-plural_step"), posthoc: t("./steps/22-posthoc"), contraction: t("./contraction") },
             i = t("./corrections"),
             a = t("./phrase"),
             o = function o(t) {
            return t = n.punctuation_step(t), t = n.emoji_step(t), t = n.lexicon_step(t), t = n.lexicon_multi(t), t = n.web_step(t), t = n.suffix_step(t), t = n.neighbour_step(t), t = n.capital_step(t), t = n.noun_fallback(t), t = n.contraction(t), t = n.date_step(t), t = n.auxiliary_step(t), t = n.negation_step(t), t = n.comma_step(t), t = n.possessive_step(t), t = n.acronym_step(t), t = n.person_step(t), t = n.quotation_step(t), t = n.organization_step(t), t = n.plural_step(t), t = n.value_step(t), t = i(t), t = a(t), t = n.posthoc(t);
         };e.exports = o;
      }, { "./contraction": 97, "./corrections": 99, "./phrase": 103, "./steps/01-punctuation_step": 104, "./steps/02-lexicon_step": 105, "./steps/03-lexicon_multi": 106, "./steps/04-capital_step": 107, "./steps/05-web_step": 108,
         "./steps/06-suffix_step": 109, "./steps/07-neighbour_step": 110, "./steps/08-noun_fallback": 111, "./steps/09-date_step": 112, "./steps/10-auxiliary_step": 113, "./steps/11-negation_step": 114, "./steps/13-comma_step": 115, "./steps/14-possessive_step": 116, "./steps/15-value_step": 117, "./steps/16-acronym_step": 118, "./steps/17-emoji_step": 119, "./steps/18-person_step": 120, "./steps/19-quotation_step": 121, "./steps/20-organization_step": 122, "./steps/21-plural_step": 123, "./steps/22-posthoc": 124 }], 101: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = t.match("#Condition .{1,7} #ClauseEnd");return e.found && e.match("#Comma$") && e.tag("Condition"), e = t.match("#Condition .{1,13} #ClauseEnd #Pronoun"), e.found && e.match("#Comma$") && e.not("#Pronoun$").tag("Condition", "end-pronoun"), e = t.match("#Condition .{1,7} then"), e.found && e.not("then$").tag("Condition", "cond-then"), e = t.match("as long as .{1,7} (then|#ClauseEnd)"), e.found && e.not("then$").tag("Condition", "as-long-then"), e = t.match("#Comma #Condition .{1,7} .$"), e.found && e.not("^#Comma").tag("Condition", "comma-7-end"), e = t.match("#Condition .{1,4}$"), e.found && e.tag("Condition", "cond-4-end"), t;
         };e.exports = n;
      }, {}], 102: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t.has("(#Verb|#Auxiliary)") && (t.match("#Verb").tag("VerbPhrase", "verbphrase-verb"), t.match("#Adverb #Verb").tag("VerbPhrase", "adverb-verb"), t.match("#Verb #Adverb").tag("VerbPhrase", "verb-adverb"), t.match("#Verb #Negative").tag("VerbPhrase", "verb-not"), t.match("never #Verb").tag("VerbPhrase", "not-verb"), t.match("#Auxiliary+").tag("VerbPhrase", "2"), t.match("#Copula").tag("VerbPhrase", "#3"), t.match("#Adverb #Auxiliary").tag("VerbPhrase", "#4")), t;
         };e.exports = n;
      }, {}], 103: [function (t, e, r) {
         "use strict";
         var n = t("./00-conditionPass"),
             i = t("./01-verbPhrase"),
             a = function a(t) {
            return t = n(t), t = i(t);
         };e.exports = a;
      }, { "./00-conditionPass": 101, "./01-verbPhrase": 102 }], 104: [function (t, e, r) {
         "use strict";
         var n = /^[A-Z][a-z']/,
             i = /^[IVXCM]+$/,
             a = function a(t) {
            return t.text.length > 1 && i.test(t.text) === !0 && t.canBe("RomanNumeral");
         },
             o = { a: !0, i: !0, u: !0, r: !0, c: !0, k: !0 },
             s = function s(t) {
            var e = t.world.regex || [];return t.terms.forEach(function (r, i) {
               var s,
                   u,
                   l = r.text;for (n.test(l) === !0 && r.tag("TitleCase", "punct-rule"), "-" === r.whitespace.after && t.terms[i + 1] && "" === t.terms[i + 1].whitespace.before && (r.tag("Hyphenated", "has-hyphen"), t.terms[i + 1].tag("Hyphenated", "has-hyphen")), l = l.replace(/[,\.\?]$/, ""), s = 0; s < e.length; s++) {
                  if (u = e[s], u.reg.test(l) === !0) return void (r.canBe(u.tag) && r.tag(u.tag, 'punctuation-rule- "' + u.reg + '"'));
               }1 === l.length && t.terms[i + 1] && /[A-Z]/.test(l) && !o[l.toLowerCase()] && r.tag("Acronym", "one-letter-acronym"), a(r) && r.tag("RomanNumeral", "is-roman-numeral");
            }), t;
         };e.exports = s;
      }, {}], 105: [function (t, e, r) {
         "use strict";
         var n = t("../contraction/split"),
             i = function i(t) {
            var e,
                r,
                i,
                a,
                o = t.world.words || {};for (e = 0; e < t.terms.length; e++) {
               r = t.terms[e], o.hasOwnProperty(r.normal) !== !0 ? r.silent_term && o.hasOwnProperty(r.silent_term) === !0 ? r.tag(o[r.silent_term], "silent_term-lexicon") : r.root && r.normal !== r.root && o.hasOwnProperty(r.root) === !0 ? r.tag(o[r.root], "lexicon") : (i = n(r), i && i.start && (a = i.start.toLowerCase(), o.hasOwnProperty(a) === !0) && r.tag(o[a], "contraction-lexicon")) : r.tag(o[r.normal], "lexicon");
            }return t;
         };e.exports = i;
      }, { "../contraction/split": 98 }], 106: [function (t, e, r) {
         "use strict";
         var n = 4,
             i = function i(t, e, r) {
            var i,
                a,
                o = r.words,
                s = t.terms[e].root,
                u = t.terms.slice(e + 1, e + n).map(function (t) {
               return t.root;
            }),
                l = n;for (u.length < l && (l = u.length), i = l; i > 0; i -= 1) {
               if (a = s + " " + u.slice(0, i).join(" "), o.hasOwnProperty(a) === !0) return t.slice(e, e + i + 1).tag(o[a], "multi-lexicon-" + a), i;
            }return 0;
         },
             a = function a(t) {
            var e,
                r,
                n,
                a = t.world.cache.firstWords || {};for (e = 0; e < t.terms.length; e++) {
               r = t.terms[e], a.hasOwnProperty(r.root) !== !0 || (n = i(t, e, t.world), e += n);
            }return t;
         };e.exports = a;
      }, {}], 107: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e, r, n;for (e = 1; e < t.terms.length; e++) {
               r = t.terms[e], r.tags.TitleCase && r.isWord() && (r.tag("Noun", "capital-step"), r.tag("TitleCase", "capital-step"));
            }return n = t.terms[0], n && n.tags.TitleCase && (n.tags.Person || n.tags.Organization || n.tags.Place) && n.tag("TitleCase", "first-term-capital"), t;
         };e.exports = n;
      }, {}], 108: [function (t, e, r) {
         "use strict";
         var n = /^\w+@\w+\.[a-z]{2,3}$/,
             i = /^#[a-z0-9_]{2,}$/,
             a = /^@\w{2,}$/,
             o = /^(https?:\/\/|www\.)\w+\.[a-z]{2,3}/,
             s = /^[\w\.\/]+\.(com|net|gov|org|ly|edu|info|biz|ru|jp|de|in|uk|br)/,
             u = function u(t) {
            var e, r, u;for (e = 0; e < t.length; e++) {
               r = t.get(e), u = r.text.trim().toLowerCase(), n.test(u) === !0 && r.tag("Email", "web_pass"), i.test(u) === !0 && r.tag("HashTag", "web_pass"), a.test(u) === !0 && r.tag("AtMention", "web_pass"), o.test(u) !== !0 && s.test(u) !== !0 || r.tag("Url", "web_pass");
            }return t;
         };e.exports = u;
      }, {}], 109: [function (t, e, r) {
         "use strict";
         var n = t("./rules/regex_list"),
             i = t("./rules/suffix_lookup"),
             a = [[/^(lol)+[sz]$/, "Expression"], [/^ma?cd[aeiou]/, "LastName"], [/^[\-\+]?[0-9][0-9,]*(\.[0-9]+)?$/, "Cardinal"], [/^(un|de|re)\\-[a-z]../, "Verb"], [/^[\-\+]?[0-9]+(\.[0-9]+)?$/, "NumericValue"], [/^https?\:?\/\/[a-z0-9]/, "Url"], [/^www\.[a-z0-9]/, "Url"], [/^(over|under)[a-z]{2,}/, "Adjective"], [/^[0-9]{1,4}\.[0-9]{1,2}\.[0-9]{1,4}$/, "Date"], [/^[0-9]+([a-z]{1,2})$/, "Value"], [/^([0-9]+[,\.]?)+(st|nd|rd|r?th)$/, ["NumericValue", "Ordinal"]], [/[a-z]*\\-[a-z]*\\-/, "Adjective"]],
             o = function o(t) {
            var e,
                r,
                n = t.normal.length,
                a = 7;for (n > a || (a = n - 1), e = a; e > 1; e -= 1) {
               if (r = t.normal.substr(n - e, n), void 0 !== i[e][r]) return i[e][r];
            }return null;
         },
             s = function s(t) {
            var e,
                r,
                i = t.normal.charAt(t.normal.length - 1);if (void 0 === n[i]) return null;for (e = n[i], r = 0; r < e.length; r++) {
               if (e[r][0].test(t.normal) === !0) return e[r][1];
            }return null;
         },
             u = function u(t) {
            var e, r, n, i;for (e = 0; e < t.terms.length; e++) {
               if (r = t.terms[e], n = o(r), null === n || r.canBe(n) !== !0) {
                  if (n = s(r), null === n || r.canBe(n) !== !0) for (i = 0; i < a.length; i++) {
                     a[i][0].test(r.normal) !== !0 || (n = a[i][1], r.canBe(n) !== !0) || r.tag(n, "misc-regex-" + a[i][0]);
                  } else r.tag(n, "regex-list");
               } else r.tag(n, "suffix-lookup");
            }return t;
         };e.exports = u;
      }, { "./rules/regex_list": 128, "./rules/suffix_lookup": 129 }], 110: [function (t, e, r) {
         "use strict";
         var n = t("./rules/neighbours"),
             i = n.afterThisWord,
             a = n.beforeThisWord,
             o = n.beforeThisPos,
             s = n.afterThisPos,
             u = function u(t) {
            return t.terms.forEach(function (e, r) {
               var n,
                   u,
                   l,
                   c,
                   h,
                   f = Object.keys(e.tags);if (0 === f.length) {
                  if (n = t.terms[r - 1], u = t.terms[r + 1], n && i.hasOwnProperty(n.normal)) return void e.tag(i[n.normal], 'neighbour-after-"' + n.normal + '"');if (u && a.hasOwnProperty(u.normal)) return void e.tag(a[u.normal], 'neighbour-before-"' + u.normal + '"');if (l = [], n) for (l = Object.keys(n.tags), c = 0; c < l.length; c++) {
                     if (s[l[c]]) return void e.tag(s[l[c]], "neighbour-after-[" + l[c] + "]");
                  }if (u) for (l = Object.keys(u.tags), h = 0; h < l.length; h++) {
                     if (o[l[h]]) return void e.tag(o[l[h]], "neighbour-before-[" + l[h] + "]");
                  }
               }
            }), t;
         };e.exports = u;
      }, { "./rules/neighbours": 127 }], 111: [function (t, e, r) {
         "use strict";
         var n = { TitleCase: !0, UpperCase: !0, CamelCase: !0, Hyphenated: !0 },
             i = function i(t) {
            if (t.tags.Noun || t.tags.Verb || t.tags.Adjective) return !1;var e = Object.keys(t.tags);return 0 === e.length || 0 === e.filter(function (t) {
               return !n[t];
            }).length;
         },
             a = function a(t) {
            var e, r;for (e = 0; e < t.terms.length; e++) {
               if (r = t.terms[e], !r.tags.Noun && !r.tags.Verb && i(r)) {
                  if (r.isWord() === !1) continue;r.tag("Noun", "noun-fallback");
               }
            }return t;
         };e.exports = a;
      }, {}], 112: [function (t, e, r) {
         "use strict";
         var n = "(in|by|before|during|on|until|after|of|within|all)",
             i = "(last|next|this|previous|current|upcoming|coming)",
             a = "(start|end|middle|starting|ending|midpoint|beginning)",
             o = "(spring|summer|winter|fall|autumn)",
             s = function s(t, e) {
            t.list.forEach(function (t) {
               var r = parseInt(t.terms[0].normal, 10);r && r > 1e3 && 3e3 > r && t.terms[0].tag("Year", e);
            });
         },
             u = function u(t, e) {
            t.list.forEach(function (t) {
               var r = parseInt(t.terms[0].normal, 10);r && r > 1990 && 2030 > r && t.terms[0].tag("Year", e);
            });
         },
             l = function l(t) {
            var e,
                r,
                l,
                c,
                h = "(january|april|may|june|summer|autumn|jan|sep)";return t.has(h) && (t.match("#Infinitive #Determiner? #Adjective? #Noun? (to|for) " + h).lastTerm().tag("Person", "ambig-person"), t.match("#Infinitive " + h).lastTerm().tag("Person", "infinitive-person"), t.match(h + " #PresentTense (to|for)").firstTerm().tag("Person", "ambig-active"), t.match(h + " #Modal").firstTerm().tag("Person", "ambig-modal"), t.match("#Modal " + h).lastTerm().tag("Person", "modal-ambig"), t.match("(that|with|for) " + h).term(1).tag("Person", "that-month"), t.match("#Copula " + h).term(1).tag("Person", "is-may"), t.match(h + " #Copula").term(0).tag("Person", "may-is"), t.match(h + " the? #Value").term(0).tag("Month", "person-value"), t.match("#Date " + h).term(1).tag("Month", "correction-may"), t.match(h + " the? #Value").firstTerm().tag("Month", "may-5th"), t.match("#Value of " + h).lastTerm().tag("Month", "5th-of-may"), t.match(n + " " + h).ifNo("#Holiday").term(1).tag("Month", "preps-month"), t.match("(next|this|last) " + h).term(1).tag("Month", "correction-may")), e = "(may|march)", t.has(e) && (t.match("#Adverb " + e).lastTerm().tag("Infinitive", "ambig-verb"), t.match(e + " #Adverb").lastTerm().tag("Infinitive", "ambig-verb"), t.match(n + " " + e).lastTerm().tag("Month", "in-month"), t.match("(next|this|last) " + e).lastTerm().tag("Month", "this-month"), t.match(e + " the? #Value").firstTerm().tag("Month", "march-5th"), t.match("#Value of? " + e).lastTerm().tag("Month", "5th-of-march"), t.has("march") && (t.match("march (up|down|back|to|toward)").term(0).tag("Infinitive", "march-to"), t.match("#Modal march").term(1).tag("Infinitive", "must-march"))), t.has("sun") && (t.match("sun #Date").firstTerm().tag("WeekDay", "sun-feb"), t.match("sun the #Ordinal").tag("Date").firstTerm().tag("WeekDay", "sun-the-5th"), t.match("#Determiner sun").lastTerm().tag("Singular", "the-sun")), t.has("sat") && (t.match("sat #Date").firstTerm().tag("WeekDay", "sat-feb"), t.match(n + " sat").lastTerm().tag("WeekDay", "sat")), t.has("#Month") && (t.match("#Month #DateRange+").tag("Date", "correction-numberRange"), t.match("#Value of #Month").tag("Date", "value-of-month"), t.match("#Cardinal #Month").tag("Date", "cardinal-month"), t.match("#Month #Value to #Value").tag("Date", "value-to-value"), t.match("#Month the #Value").tag("Date", "month-the-value")), t.match("in the (night|evening|morning|afternoon|day|daytime)").tag("Time", "in-the-night"), t.match("(#Value|#Time) (am|pm)").tag("Time", "value-ampm"), t.has("#Value") && (t.match("for #Value #Duration").tag("Date", "for-x-duration"), t.match("#Value #Abbreviation").tag("Value", "value-abbr"), t.match("a #Value").if("(hundred|thousand|million|billion|trillion)").tag("Value", "a-value"), t.match("(minus|negative) #Value").tag("Value", "minus-value"), t.match("#Value grand").tag("Value", "value-grand"), t.match("(half|quarter) #Ordinal").tag("Value", "half-ordinal"), t.match("(hundred|thousand|million|billion|trillion) and #Value").tag("Value", "magnitude-and-value"), t.match("#Value (point|decimal) #Value").tag("Value", "value-point-value"), t.match(n + "? #Value #Duration").tag("Date", "value-duration"), t.match("(#WeekDay|#Month) #Value").ifNo("#Money").tag("Date", "date-value"), t.match("#Value (#WeekDay|#Month)").ifNo("#Money").tag("Date", "value-date"), r = t.match("#TextValue #TextValue"), r.found && r.has("#Date") && r.tag("#Date", "textvalue-date"), t.match("#Value #Duration #Conjunction").tag("Date", "val-duration-conjunction"), t.match("#Value #Duration old").unTag("Date", "val-years-old")), t.has("#Time") && (t.match("#Cardinal #Time").tag("Time", "value-time"), t.match("(by|before|after|at|@|about) #Time").tag("Time", "preposition-time"), t.match("#Time (eastern|pacific|central|mountain)").term(1).tag("Time", "timezone"), t.match("#Time (est|pst|gmt)").term(1).tag("Time", "timezone abbr")), t.has(o) && (t.match(n + "? " + i + " " + o).tag("Date", "thisNext-season"), t.match("the? " + a + " of " + o).tag("Date", "section-season")), t.has("#Date") && (t.match("#Date the? #Ordinal").tag("Date", "correction-date"), t.match(i + " #Date").tag("Date", "thisNext-date"), t.match("due? (by|before|after|until) #Date").tag("Date", "by-date"), t.match("#Date (by|before|after|at|@|about) #Cardinal").not("^#Date").tag("Time", "date-before-Cardinal"), t.match("#Date (am|pm)").term(1).unTag("Verb").unTag("Copula").tag("Time", "date-am"), t.match("(last|next|this|previous|current|upcoming|coming|the) #Date").tag("Date", "next-feb"), t.match("#Date #Preposition #Date").tag("Date", "date-prep-date"), t.match("the? " + a + " of #Date").tag("Date", "section-of-date"), t.match("#Ordinal #Duration in #Date").tag("Date", "duration-in-date"), t.match("(early|late) (at|in)? the? #Date").tag("Time", "early-evening")), t.has("#Cardinal") && (l = t.match("#Date #Value #Cardinal").lastTerm(), l.found && s(l, "date-value-year"), l = t.match("#Date+ #Cardinal").lastTerm(), l.found && s(l, "date-year"), l = t.match("#Month #Value #Cardinal").lastTerm(), l.found && s(l, "month-value-year"), l = t.match("#Month #Value to #Value #Cardinal").lastTerm(), l.found && s(l, "month-range-year"), l = t.match("(in|of|by|during|before|starting|ending|for|year) #Cardinal").lastTerm(), l.found && s(l, "in-year"), l = t.match("#Cardinal !#Plural").firstTerm(), l.found && u(l, "year-unsafe")), t.has("#Date") && (c = t.match("#Date+").splitOn("Clause"), c.has("(#Year|#Time)") === !1 && c.match("#Value (#Month|#Weekday) #Value").lastTerm().unTag("Date")), t;
         };e.exports = l;
      }, {}], 113: [function (t, e, r) {
         "use strict";
         var n = { do: !0, "don't": !0, does: !0, "doesn't": !0, will: !0, wont: !0, "won't": !0, have: !0, "haven't": !0, had: !0, "hadn't": !0, not: !0 },
             i = function i(t) {
            var e, r, i;for (e = 0; e < t.terms.length; e++) {
               r = t.terms[e], (n[r.normal] || n[r.silent_term]) && (i = t.terms[e + 1], i && (i.tags.Verb || i.tags.Adverb || i.tags.Negative)) && r.tag("Auxiliary", "corrections-Auxiliary");
            }return t;
         };e.exports = i;
      }, {}], 114: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e, r, n;for (e = 0; e < t.length; e++) {
               if (r = t.get(e), "not" === r.normal || "not" === r.silent_term) for (n = e + 1; n < t.length; n++) {
                  if (t.get(n).tags.Verb) {
                     r.tag("VerbPhrase", "negate-verb");break;
                  }if (t.get(n).tags.Adjective) {
                     r.tag("AdjectivePhrase", "negate-adj");break;
                  }
               }
            }return t;
         };e.exports = n;
      }, {}], 115: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r = t.terms[e],
                n = t.terms[e + 1];return !(!n || !r.tags.Place || r.tags.Country || !n.tags.Country);
         },
             i = function i(t) {
            return t.tags.Adjective ? "Adjective" : t.tags.Noun ? "Noun" : t.tags.Verb ? "Verb" : null;
         },
             a = function a(t, e) {
            var r,
                n = e,
                a = i(t.terms[e]),
                o = 0,
                s = 0,
                u = !1;for (e += 1; e < t.terms.length; e++) {
               if (r = t.terms[e], s > 0 && r.tags.Conjunction) u = !0;else {
                  if (r.tags[a]) {
                     if (r.tags.Comma) {
                        s += 1, o = 0;continue;
                     }if (s > 0 && u) return void t.slice(n, e).tag("List");
                  }if (o += 1, o > 5) return;
               }
            }
         },
             o = function o(t) {
            var e, r, i, o, s;for (e = 0; e < t.terms.length; e++) {
               r = t.terms[e], i = r.endPunctuation(), "," !== i ? ";" !== i && ":" !== i ? r.whitespace.after.match(/^\.\./) ? r.tag("ClauseEnd", "clause-elipses") : t.terms[e + 1] && t.terms[e + 1].whitespace.before.match(/ - /) && r.tag("ClauseEnd", "hypen-clause") : r.tag("ClauseEnd", "clause-punt") : r.tag("Comma", "comma-step");
            }for (o = 0; o < t.terms.length; o++) {
               if (s = t.terms[o], s.tags.Comma) {
                  if (s.tags.List) continue;if (n(t, o)) continue;a(t, o), s.tags.ClauseEnd = !0;
               }
            }return t;
         };e.exports = o;
      }, {}], 116: [function (t, e, r) {
         "use strict";
         var n = /[a-z]s'$/,
             i = /[a-z]'s$/,
             a = { "it's": !0, "that's": !0 },
             o = function o(t, e) {
            var r,
                o = t.get(e);return a[o.normal] !== !0 && (n.test(o.normal) === !0 || i.test(o.normal) !== !1 && o.tags.Pronoun !== !0 && (r = t.get(e + 1), void 0 === r || r.tags.Noun === !0 || !!(r.tags.Adjective && t.get(e + 2) && t.get(e + 2).tags.Noun) || (r.tags.Adjective || r.tags.Verb || r.tags.Adverb, !1)));
         },
             s = function s(t) {
            var e, r;for (e = 0; e < t.length; e++) {
               o(t, e) && (r = t.get(e), r.tags.Noun || r.tag("Noun", "possessive_pass"), r.tag("Possessive", "possessive_pass"));
            }return t;
         };e.exports = s;
      }, {}], 117: [function (t, e, r) {
         "use strict";
         var n = /^[0-9]([0-9]+,)*?(\.[0-9])$/,
             i = /^[a-z]/,
             a = function a(t) {
            var e, r;for (e = 0; e < t.terms.length; e++) {
               r = t.terms[e], r.tag.Value === !0 && (void 0 === r.tags.Ordinal && void 0 === r.tags.Cardinal && (n.test(r.normal) === !0 ? r.tag("Cardinal", "cardinal-regex") : r.tag("Ordinal", "not-cardinal")), void 0 === r.tags.TextValue && void 0 === r.tags.NumericValue && (i.test(r.normal) === !0 ? r.tag("TextValue", "TextValue-regex") : r.tag("NumericValue", "NumericValue-regex")));
            }return t.match("#Cardinal #Plural").lastTerm().tag("Unit", "cardinal-plural"), t.match("#Ordinal #Singular").lastTerm().tag("Unit", "ordinal-singular"), t;
         };e.exports = a;
      }, {}], 118: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t.terms.forEach(function (t) {
               t.isAcronym() && t.tag("Acronym", "acronym-step");
            }), t;
         };e.exports = n;
      }, {}], 119: [function (t, e, r) {
         "use strict";
         var n = t("./rules/emoji_regex"),
             i = t("./rules/emoticon_list"),
             a = function a(t) {
            return ":" === t.text.charAt(0) && null !== t.text.match(/:.?$/) && !t.text.match(" ") && t.text.length <= 35;
         },
             o = function o(t) {
            var e = t.text.replace(/^[:;]/, ":");return i.hasOwnProperty(e) === !0;
         },
             s = function s(t) {
            var e, r;for (e = 0; e < t.terms.length; e++) {
               r = t.terms[e], a(r) && r.tag("Emoji", "comma-emoji"), r.text.match(n) && r.tag("Emoji", "unicode-emoji"), o(r) && r.tag("Emoji", "emoticon-emoji");
            }return t;
         };e.exports = s;
      }, { "./rules/emoji_regex": 125, "./rules/emoticon_list": 126 }], 120: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            if (t.match("(mr|mrs|ms) (#TitleCase|#Possessive)+").tag("#Person").lastTerm(), t.has("#FirstName")) {
               var e = t.match("#FirstName #Noun").ifNo("^#Possessive").ifNo("#ClauseEnd .");e.lastTerm().canBe("#LastName").tag("#LastName", "firstname-noun"), t.match("#FirstName de #Noun").canBe("#Person").tag("#Person", "firstname-de-noun"), t.match("#FirstName (bin|al) #Noun").canBe("#Person").tag("#Person", "firstname-al-noun"), t.match("#FirstName #Acronym #TitleCase").tag("Person", "firstname-acronym-titlecase"), t.match("#FirstName #FirstName #TitleCase").tag("Person", "firstname-firstname-titlecase"), t.match("#Honorific #FirstName? #TitleCase").tag("Person", "Honorific-TitleCase"), t.match("#FirstName #TitleCase #TitleCase?").match("#Noun+").tag("Person", "firstname-titlecase"), t.match("#FirstName the #Adjective").tag("Person", "correction-determiner5"), t.match("#FirstName (green|white|brown|hall|young|king|hill|cook|gray|price)").tag("#Person", "firstname-maybe"), t.match("#FirstName #Acronym #Noun").ifNo("#Date").tag("#Person", "n-acro-noun").lastTerm().tag("#LastName", "n-acro-noun"), t.match("#FirstName (#Singular|#Possessive)").ifNo("#Date").tag("#Person", "first-possessive").lastTerm().tag("#LastName", "first-possessive");
            }return t.has("#LastName") && (t.match("#Noun #LastName").firstTerm().canBe("#FirstName").tag("#FirstName", "noun-lastname"), t.match("(will|may|april|june|said|rob|wade|ray|rusty|drew|miles|jack|chuck|randy|jan|pat|cliff|bill) #LastName").firstTerm().tag("#FirstName", "maybe-lastname"), t.match("#TitleCase #Acronym? #LastName").ifNo("#Date").tag("#Person", "title-acro-noun").lastTerm().tag("#LastName", "title-acro-noun"), t.match("#Copula (#Noun|#PresentTense) #LastName").term(1).tag("#FirstName", "copula-noun-lastname")), t.has("#TitleCase") && (t.match("#Acronym #TitleCase").canBe("#Person").tag("#Person", "acronym-titlecase"), t.match("#TitleCase (van|al|bin) #TitleCase").canBe("#Person").tag("Person", "correction-titlecase-van-titlecase"), t.match("#TitleCase (de|du) la? #TitleCase").canBe("#Person").tag("Person", "correction-titlecase-van-titlecase"), t.match("#Person #TitleCase").match("#TitleCase #Noun").canBe("#Person").tag("Person", "correction-person-titlecase"), t.match("(lady|queen|sister) #TitleCase").ifNo("#Date").tag("#FemaleName", "lady-titlecase"), t.match("(king|pope|father) #TitleCase").ifNo("#Date").tag("#MaleName", "correction-poe")), t.match("#Noun van der? #Noun").canBe("#Person").tag("#Person", "von der noun"), t.match("(king|queen|prince|saint|lady) of? #Noun").canBe("#Person").tag("#Person", "king-of-noun"), t.match("#Honorific #Acronym").tag("Person", "Honorific-TitleCase"), t.match("#Person #Person the? #RomanNumeral").tag("Person", "correction-roman-numeral"), t.match("#Honorific #Person").tag("Person", "Honorific-Person"), t.match("^#Honorific$").unTag("Person", "single-honorific"), t;
         };e.exports = n;
      }, {}], 121: [function (t, e, r) {
         "use strict";
         var n = /^["'\u201B\u201C\u2033\u201F\u2018]/,
             i = /.["'\u201D\u2036\u2019]([;:,.])?$/,
             a = function a(t) {
            var e, r, a;for (e = 0; e < t.terms.length; e++) {
               if (r = t.terms[e], n.test(r.text) === !0) for (a = 0; a < t.terms.length && t.terms[e + a] && 28 >= a; a++) {
                  if (i.test(t.terms[e + a].text) === !0) {
                     t.slice(e, e + a + 1).tag("Quotation", "quotation_step"), e += a;break;
                  }
               }
            }return t;
         };e.exports = a;
      }, {}], 122: [function (t, e, r) {
         "use strict";
         var n = t("../../world/more-data/orgWords"),
             i = function i(t) {
            return !(!t.tags.Noun || t.tags.Pronoun || t.tags.Comma || t.tags.Possessive || t.tags.Place || !(t.tags.TitleCase || t.tags.Organization || t.tags.Acronym));
         },
             a = function a(t) {
            var e, r, a, o;for (e = 0; e < t.terms.length; e++) {
               if (r = t.terms[e], n.hasOwnProperty(r.normal) === !0) {
                  if (a = t.terms[e - 1], a && i(a)) {
                     a.tag("Organization", "org-word-1"), r.tag("Organization", "org-word-2");continue;
                  }if (o = t.terms[e + 1], o && "of" === o.normal && t.terms[e + 2] && i(t.terms[e + 2])) {
                     r.tag("Organization", "org-of-word-1"), o.tag("Organization", "org-of-word-2"), t.terms[e + 2].tag("Organization", "org-of-word-3");continue;
                  }
               }
            }return t.has("#Acronym") && (t.match("the #Acronym").not("(iou|fomo|yolo|diy|dui|nimby)").lastTerm().tag("Organization", "the-acronym"), t.match("#Acronym").match("#Possessive").tag("Organization", "possessive-acronym")), t;
         };e.exports = a;
      }, { "../../world/more-data/orgWords": 214 }], 123: [function (t, e, r) {
         "use strict";
         var n = t("../../subset/nouns/isPlural"),
             i = function i(t) {
            var e, r, i;for (e = 0; e < t.terms.length; e++) {
               if (r = t.terms[e], r.tags.Noun) {
                  if (r.tags.Singular || r.tags.Plural) continue;i = n(r), n(r) === !0 ? r.tag("Plural", "pluralStep") : i === !1 && r.tag("Singular", "pluralStep");
               }
            }return t;
         };e.exports = i;
      }, { "../../subset/nouns/isPlural": 39 }], 124: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = t.world.patterns;return Object.keys(e).forEach(function (r) {
               t.match(r).tag(e[r], "post-hoc: " + r);
            }), t;
         };e.exports = n;
      }, {}], 125: [function (t, e, r) {
         "use strict";
         e.exports = /(?:0\u20E3\n1\u20E3|2\u20E3|3\u20E3|4\u20E3|5\u20E3|6\u20E3|7\u20E3|8\u20E3|9\u20E3|#\u20E3|\*\u20E3|\uD83C(?:\uDDE6\uD83C(?:\uDDE8|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDEE|\uDDF1|\uDDF2|\uDDF4|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFC|\uDDFD|\uDDFF)|\uDDE7\uD83C(?:\uDDE6|\uDDE7|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDEE|\uDDEF|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFB|\uDDFC|\uDDFE|\uDDFF)|\uDDE8\uD83C(?:\uDDE6|\uDDE8|\uDDE9|\uDDEB|\uDDEC|\uDDED|\uDDEE|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF5|\uDDF7|\uDDFA|\uDDFB|\uDDFC|\uDDFD|\uDDFE|\uDDFF)|\uDDE9\uD83C(?:\uDDEA|\uDDEC|\uDDEF|\uDDF0|\uDDF2|\uDDF4|\uDDFF)|\uDDEA\uD83C(?:\uDDE6|\uDDE8|\uDDEA|\uDDEC|\uDDED|\uDDF7|\uDDF8|\uDDF9|\uDDFA)|\uDDEB\uD83C(?:\uDDEE|\uDDEF|\uDDF0|\uDDF2|\uDDF4|\uDDF7)|\uDDEC\uD83C(?:\uDDE6|\uDDE7|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDEE|\uDDF1|\uDDF2|\uDDF3|\uDDF5|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFC|\uDDFE)|\uDDED\uD83C(?:\uDDF0|\uDDF2|\uDDF3|\uDDF7|\uDDF9|\uDDFA)|\uDDEE\uD83C(?:\uDDE8|\uDDE9|\uDDEA|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF6|\uDDF7|\uDDF8|\uDDF9)|\uDDEF\uD83C(?:\uDDEA|\uDDF2|\uDDF4|\uDDF5)|\uDDF0\uD83C(?:\uDDEA|\uDDEC|\uDDED|\uDDEE|\uDDF2|\uDDF3|\uDDF5|\uDDF7|\uDDFC|\uDDFE|\uDDFF)|\uDDF1\uD83C(?:\uDDE6|\uDDE7|\uDDE8|\uDDEE|\uDDF0|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFB|\uDDFE)|\uDDF2\uD83C(?:\uDDE6|\uDDE8|\uDDE9|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF5|\uDDF6|\uDDF7|\uDDF8|\uDDF9|\uDDFA|\uDDFB|\uDDFC|\uDDFD|\uDDFE|\uDDFF)|\uDDF3\uD83C(?:\uDDE6|\uDDE8|\uDDEA|\uDDEB|\uDDEC|\uDDEE|\uDDF1|\uDDF4|\uDDF5|\uDDF7|\uDDFA|\uDDFF)|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C(?:\uDDE6|\uDDEA|\uDDEB|\uDDEC|\uDDED|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF7|\uDDF8|\uDDF9|\uDDFC|\uDDFE)|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C(?:\uDDEA|\uDDF4|\uDDF8|\uDDFA|\uDDFC)|\uDDF8\uD83C(?:\uDDE6|\uDDE7|\uDDE8|\uDDE9|\uDDEA|\uDDEC|\uDDED|\uDDEE|\uDDEF|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF7|\uDDF8|\uDDF9|\uDDFB|\uDDFD|\uDDFE|\uDDFF)|\uDDF9\uD83C(?:\uDDE6|\uDDE8|\uDDE9|\uDDEB|\uDDEC|\uDDED|\uDDEF|\uDDF0|\uDDF1|\uDDF2|\uDDF3|\uDDF4|\uDDF7|\uDDF9|\uDDFB|\uDDFC|\uDDFF)|\uDDFA\uD83C(?:\uDDE6|\uDDEC|\uDDF2|\uDDF8|\uDDFE|\uDDFF)|\uDDFB\uD83C(?:\uDDE6|\uDDE8|\uDDEA|\uDDEC|\uDDEE|\uDDF3|\uDDFA)|\uDDFC\uD83C(?:\uDDEB|\uDDF8)|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C(?:\uDDEA|\uDDF9)|\uDDFF\uD83C(?:\uDDE6|\uDDF2|\uDDFC)))|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2694\u2696\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD79\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED0\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3]|\uD83E[\uDD10-\uDD18\uDD80-\uDD84\uDDC0]/g;
      }, {}], 126: [function (t, e, r) {
         "use strict";
         e.exports = { ":(": !0, ":)": !0, ":P": !0, ":p": !0, ":O": !0, ":3": !0, ":|": !0, ":/": !0, ":\\": !0, ":$": !0, ":*": !0, ":@": !0, ":-(": !0, ":-)": !0, ":-P": !0, ":-p": !0, ":-O": !0, ":-3": !0, ":-|": !0, ":-/": !0, ":-\\": !0, ":-$": !0, ":-*": !0, ":-@": !0, ":^(": !0, ":^)": !0, ":^P": !0, ":^p": !0, ":^O": !0, ":^3": !0, ":^|": !0, ":^/": !0, ":^\\": !0, ":^$": !0, ":^*": !0, ":^@": !0, "):": !0, "(:": !0, "$:": !0, "*:": !0, ")-:": !0, "(-:": !0, "$-:": !0, "*-:": !0, ")^:": !0, "(^:": !0, "$^:": !0, "*^:": !0, "<3": !0, "</3": !0, "<\\3": !0 };
      }, {}], 127: [function (t, e, r) {
         "use strict";
         var n = { i: "Verb", first: "Noun", it: "Verb", there: "Verb", not: "Verb", because: "Noun", if: "Noun", but: "Noun", who: "Verb", this: "Noun", his: "Noun", when: "Noun", you: "Verb", very: "Adjective", old: "Noun", never: "Verb", before: "Noun" },
             i = { there: "Verb", me: "Verb", man: "Adjective", only: "Verb", him: "Verb", were: "Noun", what: "Verb", took: "Noun", himself: "Verb", went: "Noun", who: "Noun", jr: "Person" },
             a = { Adjective: "Noun", Possessive: "Noun", Determiner: "Noun", Adverb: "Verb", Pronoun: "Verb", Value: "Noun", Ordinal: "Noun", Modal: "Verb", Superlative: "Noun", Demonym: "Noun", Organization: "Verb", Honorific: "Person" },
             o = { Copula: "Noun", PastTense: "Noun", Conjunction: "Noun", Modal: "Noun", PluperfectTense: "Noun", PerfectTense: "Verb" };e.exports = { beforeThisWord: i, afterThisWord: n, beforeThisPos: o, afterThisPos: a };
      }, {}], 128: [function (t, e, r) {
         "use strict";
         var n = "Adjective",
             i = "Infinitive",
             a = "PresentTense",
             o = "Singular",
             s = "PastTense",
             u = "Adverb",
             l = "Expression",
             c = "Actor",
             h = "Verb",
             f = "Noun",
             m = "LastName";e.exports = { a: [[/.[aeiou]na$/, f], [/.[oau][wvl]ska$/, m], [/.[^aeiou]ica$/, o], [/^([hyj]a)+$/, l]], c: [[/.[^aeiou]ic$/, n]], d: [[/.[ia]sed$/, n], [/.[gt]led$/, n], [/.[aeiou][td]ed$/, s], [/.[^aeiou]led$/, s], [/[^aeiou]ard$/, o], [/[aeiou][^aeiou]id$/, n], [/[aeiou]c?ked$/, s], [/.[vrl]id$/, n]], e: [[/.[lnr]ize$/, i], [/.[^aeiou]ise$/, i], [/.[aeiou]te$/, i], [/.[^aeiou][ai]ble$/, n], [/.[^aeiou]eable$/, n], [/.[^aeiou]ive$/, n]], h: [[/.[^aeiouf]ish$/, n], [/.v[iy]ch$/, m], [/^ug?h+$/, l], [/^uh[ -]?oh$/, l]], i: [[/.[oau][wvl]ski$/, m]], k: [[/^(k)+$/, l]], l: [[/.[nrtumcd]al$/, n], [/.[gl]ial$/, n], [/.[^aeiou]eal$/, n], [/.[^aeiou][ei]al$/, n], [/.[^aeiou]ful$/, n]], m: [[/.[^aeiou]ium$/, o], [/[^aeiou]ism$/, o], [/.[^aeiou]ium$/, o], [/^mmm+$/, l], [/^[hu]m+$/, l], [/^[0-9]+ ?(am|pm)$/, "Date"]], n: [[/.[lsrnpb]ian$/, n], [/[^aeiou]ician$/, c]], o: [[/^no+$/, l], [/^(yo)+$/, l], [/^woo+[pt]?$/, l]], r: [[/.[ilk]er$/, "Comparative"], [/[aeiou][pns]er$/, o], [/[^i]fer$/, i], [/.[^aeiou][ao]pher$/, c]], t: [[/.[di]est$/, "Superlative"], [/.[icldtgrv]ent$/, n], [/[aeiou].*ist$/, n], [/^[a-z]et$/, h]], s: [[/.[rln]ates$/, a], [/.[^z]ens$/, h], [/.[lstrn]us$/, o], [/[aeiou][^aeiou]is$/, o], [/[a-z]\'s$/, f], [/^yes+$/, l]], v: [[/.[^aeiou][ai][kln]ov$/, m]], y: [[/.[cts]hy$/, n], [/.[st]ty$/, n], [/.[gk]y$/, n], [/.[tnl]ary$/, n], [/.[oe]ry$/, o], [/[rdntkbhs]ly$/, u], [/...lly$/, u], [/[bszmp]{2}y$/, n], [/.(gg|bb|zz)ly$/, n], [/.[aeiou]my$/, n], [/.[^aeiou]ity$/, o], [/[ea]{2}zy$/, n], [/.[^aeiou]ity$/, o]] };
      }, {}], 129: [function (t, e, r) {
         "use strict";
         var n = "Adjective",
             i = "Infinitive",
             a = "PresentTense",
             o = "Singular",
             s = "PastTense",
             u = "Adverb",
             l = "Plural",
             c = "Actor",
             h = "Verb",
             f = "Noun",
             m = "LastName",
             d = "Modal";e.exports = [null, null, { ea: o, ia: f, ic: n, ly: u, "'n": h, "'t": h }, { que: n, lar: n, ike: n, ffy: n, nny: n, rmy: n, azy: n, oid: n, mum: n, ean: n, ous: n, end: h, sis: o, rol: o, ize: i, ify: i, zes: a, nes: a, ing: "Gerund", " so": u, "'ll": d, "'re": "Copula" }, { teen: "Value", tors: f, ends: h, oses: a, fies: a, ects: a, nded: s, cede: i, tage: i, gate: i, vice: o, tion: o, ette: o, some: n, llen: n, ried: n, gone: n, made: n, fore: u, less: u, ices: l, ions: l, ints: l, aped: s, lked: s, ould: d, tive: c, sson: m, czyk: m, chuk: m, enko: m, akis: m, nsen: m }, { fully: u, where: u, wards: u, urned: s, tized: s, eased: s, ances: l, tures: l, ports: l, ettes: l, ities: l, rough: n, bound: n, tieth: "Ordinal", ishes: a, tches: a, nssen: m, marek: m }, { keeper: c, logist: c, auskas: m, teenth: "Value" }, { sdottir: m, opoulos: m }];
      }, {}], 130: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = Object.keys(t);e.forEach(function (r) {
               t[r].downward = [];for (var n = 0; n < e.length; n++) {
                  t[e[n]].isA && t[e[n]].isA === r && t[r].downward.push(e[n]);
               }
            });
         };e.exports = n;
      }, {}], 131: [function (t, e, r) {
         "use strict";
         e.exports = [["Noun", "Verb", "Adjective", "Adverb", "Determiner", "Conjunction", "Preposition", "QuestionWord", "Expression", "Url", "PhoneNumber", "Email", "Emoji"], ["Person", "Organization", "Value", "Place", "Actor", "Demonym", "Pronoun"], ["Plural", "Singular"], ["MaleName", "FemaleName"], ["FirstName", "LastName", "Honorific"], ["Comparative", "Superlative"], ["Value", "Verb", "Adjective"], ["Ordinal", "Cardinal"], ["TextValue", "NumericValue"], ["NiceNumber", "TextValue"], ["Ordinal", "Currency"], ["PastTense", "PresentTense", "FutureTense"], ["Pluperfect", "Copula", "Modal", "Participle", "Infinitive", "Gerund", "FuturePerfect", "PerfectTense"], ["Auxiliary", "Noun", "Value"], ["Month", "WeekDay", "Year", "Duration", "Holiday"], ["Particle", "Conjunction", "Adverb", "Preposition"], ["Date", "Verb", "Adjective", "Person"], ["Date", "Money", "RomanNumeral", "Fraction"], ["Value", "Determiner"], ["Url", "Value", "HashTag", "PhoneNumber", "Emoji"], ["RomanNumeral", "Fraction", "NiceNumber"], ["RomanNumeral", "Money"], ["UpperCase", "TitleCase", "CamelCase"], ["VerbPhrase", "Noun", "Adjective", "Value"], ["QuestionWord", "VerbPhrase"]];
      }, {}], 132: [function (t, e, r) {
         "use strict";
         var n = t("./conflicts"),
             i = t("./tags/nouns"),
             a = t("./tags/verbs"),
             o = t("./tags/values"),
             s = t("./tags/dates"),
             u = t("./tags/misc"),
             l = t("./addDownward"),
             c = { Noun: "blue", Date: "red", Value: "red", Verb: "green", Auxiliary: "green", Negative: "green", VerbPhrase: "green", Preposition: "cyan", Condition: "cyan", Conjunction: "cyan", Determiner: "cyan", Adjective: "magenta", Adverb: "cyan" },
             h = function h(t, e) {
            Object.keys(t).forEach(function (r) {
               e[r] = t[r];
            });
         },
             f = function f(t) {
            Object.keys(t).forEach(function (e) {
               var r, i;for (t[e].notA = {}, r = 0; r < n.length; r++) {
                  i = n[r], i.indexOf(e) !== -1 && (i = i.filter(function (t) {
                     return t !== e;
                  }), i.forEach(function (r) {
                     t[e].notA[r] = !0;
                  }));
               }t[e].notA = Object.keys(t[e].notA);
            });
         },
             m = function m(t) {
            Object.keys(t).forEach(function (e) {
               return c[e] ? void (t[e].color = c[e]) : t[e].isA && c[t[e].isA] ? void (t[e].color = c[t[e].isA]) : void (t[e].isA && t[t[e].isA].color && (t[e].color = t[t[e].isA].color));
            });
         },
             d = function d() {
            var t = {};return h(i, t), h(a, t), h(o, t), h(s, t), h(u, t), l(t), f(t), m(t), t;
         };e.exports = d();
      }, { "./addDownward": 130, "./conflicts": 131, "./tags/dates": 133, "./tags/misc": 134, "./tags/nouns": 135, "./tags/values": 136, "./tags/verbs": 137 }], 133: [function (t, e, r) {
         "use strict";
         e.exports = { Date: {}, Month: { isA: "Date", also: "Singular" }, WeekDay: { isA: "Date", also: "Noun" }, RelativeDay: { isA: "Date" }, Year: { isA: "Date" }, Duration: { isA: "Date", also: "Noun" }, Time: { isA: "Date", also: "Noun" }, Holiday: { isA: "Date", also: "Noun" } };
      }, {}], 134: [function (t, e, r) {
         "use strict";
         e.exports = { Adjective: {}, Comparable: { isA: "Adjective" }, Comparative: { isA: "Adjective" }, Superlative: { isA: "Adjective" }, NumberRange: { isA: "Contraction" }, Adverb: {}, Currency: {}, Determiner: {}, Conjunction: {}, Preposition: {}, QuestionWord: {}, Expression: {}, Url: {}, PhoneNumber: {}, HashTag: {}, AtMention: { is: "Noun" }, Emoji: {}, Email: {}, Condition: {}, VerbPhrase: {}, Auxiliary: {}, Negative: {}, Contraction: {}, TitleCase: {}, CamelCase: {}, UpperCase: {}, Hyphenated: {}, Acronym: {}, ClauseEnd: {}, Quotation: {} };
      }, {}], 135: [function (t, e, r) {
         "use strict";
         e.exports = { Noun: {}, Singular: { isA: "Noun" }, Person: { isA: "Singular" }, FirstName: { isA: "Person" }, MaleName: { isA: "FirstName" }, FemaleName: { isA: "FirstName" }, LastName: { isA: "Person" }, Honorific: { isA: "Noun" }, Place: { isA: "Singular" }, Country: { isA: "Place"
            }, City: { isA: "Place" }, Region: { isA: "Place" }, Address: { isA: "Place" }, Organization: { isA: "Singular" }, SportsTeam: { isA: "Organization" }, Company: { isA: "Organization" }, School: { isA: "Organization" }, Plural: { isA: "Noun" }, Uncountable: { isA: "Noun" }, Pronoun: { isA: "Noun" }, Actor: { isA: "Noun" }, Activity: { isA: "Noun" }, Unit: { isA: "Noun" }, Demonym: { isA: "Noun" }, Possessive: { isA: "Noun" } };
      }, {}], 136: [function (t, e, r) {
         "use strict";
         e.exports = { Value: {}, Ordinal: { isA: "Value" }, Cardinal: { isA: "Value" }, Multiple: { isA: "Value" }, RomanNumeral: { isA: "Cardinal" }, Fraction: { isA: "Value" }, TextValue: { isA: "Value" }, NumericValue: { isA: "Value" }, NiceNumber: { isA: "Value" }, Money: {}, Percent: { isA: "Value" } };
      }, {}], 137: [function (t, e, r) {
         "use strict";
         e.exports = { Verb: { isA: "VerbPhrase" }, PresentTense: { isA: "Verb" }, Infinitive: { isA: "PresentTense" }, Gerund: { isA: "PresentTense" }, PastTense: { isA: "Verb" }, PerfectTense: { isA: "Verb" }, FuturePerfect: { isA: "Verb" }, Pluperfect: { isA: "Verb" }, Copula: { isA: "Verb" }, Modal: { isA: "Verb" }, Participle: { isA: "Verb" }, Particle: { isA: "Verb" }, PhrasalVerb: { isA: "Verb" } };
      }, {}], 138: [function (t, e, r) {
         "use strict";
         var n = t("./paths").fns,
             i = t("./whitespace"),
             a = t("./makeUID"),
             o = t("./methods/normalize/normalize").addNormal,
             s = t("./methods/normalize/root"),
             u = function u(t, e) {
            this.tags = {}, this._text = n.ensureString(t), this.world = e;var r = i(this._text);this.whitespace = r.whitespace, this._text = r.text, this.parent = null, this.silent_term = "", this.lumped = !1, o(this), s(this), this.dirty = !1, this.uid = a(this.normal), Object.defineProperty(this, "text", { get: function get() {
                  return this._text;
               }, set: function set(t) {
                  t = t || "", this._text = t.trim(), this.dirty = !0, this._text !== t && (this.whitespace = i(t)), this.normalize();
               } }), Object.defineProperty(this, "isA", { get: function get() {
                  return "Term";
               } });
         };u.prototype.normalize = function () {
            return o(this), s(this), this;
         }, u.prototype.index = function () {
            var t = this.parentTerms;return t ? t.terms.indexOf(this) : null;
         }, u.prototype.clone = function () {
            var t = new u(this._text, this.world);return t.tags = n.copy(this.tags), t.whitespace = n.copy(this.whitespace), t.silent_term = this.silent_term, t;
         }, t("./methods/misc")(u), t("./methods/out")(u), t("./methods/tag")(u), t("./methods/case")(u), t("./methods/punctuation")(u), e.exports = u;
      }, { "./makeUID": 139, "./methods/case": 141, "./methods/misc": 142, "./methods/normalize/normalize": 144, "./methods/normalize/root": 145, "./methods/out": 148, "./methods/punctuation": 151, "./methods/tag": 153, "./paths": 156, "./whitespace": 157 }], 139: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e,
                r = "";for (e = 0; 5 > e; e++) {
               r += parseInt(9 * Math.random(), 10);
            }return t + "-" + r;
         };e.exports = n;
      }, {}], 140: [function (t, e, r) {
         "use strict";
         var n = { Auxiliary: 1, Possessive: 1, TitleCase: 1, ClauseEnd: 1, Comma: 1, CamelCase: 1, UpperCase: 1, Hyphenated: 1 },
             i = function i(t) {
            var e = t.world.tags,
                r = Object.keys(t.tags);return r = r.sort(), r = r.sort(function (t, r) {
               return !n[r] && e[t] && e[r] ? e[t].downward.length > e[r].downward.length ? -1 : 1 : -1;
            }), r[0];
         };e.exports = i;
      }, {}], 141: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = { toUpperCase: function toUpperCase() {
                  return this.text = this.text.toUpperCase(), this.tag("#UpperCase", "toUpperCase"), this;
               }, toLowerCase: function toLowerCase() {
                  return this.text = this.text.toLowerCase(), this.unTag("#TitleCase"), this.unTag("#UpperCase"), this;
               }, toTitleCase: function toTitleCase() {
                  return this.text = this.text.replace(/^( +)?[a-z]/, function (t) {
                     return t.toUpperCase();
                  }), this.tag("#TitleCase", "toTitleCase"), this;
               }, needsTitleCase: function needsTitleCase() {
                  var t,
                      e,
                      r,
                      n = ["Person", "Place", "Organization", "Acronym", "UpperCase", "Currency", "RomanNumeral", "Month", "WeekDay", "Holiday", "Demonym"];for (t = 0; t < n.length; t++) {
                     if (this.tags[n[t]]) return !0;
                  }for (e = ["i", "god", "allah"], r = 0; r < e.length; r++) {
                     if (this.normal === e[r]) return !0;
                  }return !1;
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = n;
      }, {}], 142: [function (t, e, r) {
         "use strict";
         var n = t("./normalize/isAcronym"),
             i = t("./bestTag"),
             a = /[aeiouy]/i,
             o = /[a-z]/,
             s = /[0-9]/,
             u = function u(t) {
            var e = { bestTag: function bestTag() {
                  return i(this);
               }, isAcronym: function isAcronym() {
                  return n(this._text);
               }, isWord: function isWord() {
                  var t = this;if (t.silent_term) return !0;if (/[a-z|A-Z|0-9]/.test(t.text) === !1) return !1;if (t.normal.length > 1 && o.test(t.normal) === !0 && a.test(t.normal) === !1) return !1;if (s.test(t.normal) === !0) {
                     if (/[a-z][0-9][a-z]/.test(t.normal) === !0) return !1;if (/^([$-])*?([0-9,\.])*?([s\$%])*?$/.test(t.normal) === !1) return !1;
                  }return !0;
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = u;
      }, { "./bestTag": 140, "./normalize/isAcronym": 143 }], 143: [function (t, e, r) {
         "use strict";
         var n = /([A-Z]\.)+[A-Z]?$/,
             i = /^[A-Z]\.$/,
             a = /[A-Z]{3}('s)?$/,
             o = function o(t) {
            return n.test(t) === !0 || i.test(t) === !0 || a.test(t) === !0;
         };e.exports = o;
      }, {}], 144: [function (t, e, r) {
         "use strict";
         var n = t("./unicode"),
             i = t("./isAcronym");r.normalize = function (t) {
            t = t || "", t = t.toLowerCase(), t = t.trim();var e = t;return t = n(t), t = t.replace(/^[#@]/, ""), t = t.replace(/[,;.!?]+$/, ""), t = t.replace(/[\u2018\u2019\u201A\u201B\u2032\u2035]+/g, "'"), t = t.replace(/[\u201C\u201D\u201E\u201F\u2033\u2036"]+/g, ""), t = t.replace(/\u2026/g, "..."), t = t.replace(/\u2013/g, "-"), /[a-z][^aeiou]in['’]$/.test(t) === !0 && (t = t.replace(/in['’]$/, "ing")), /^[:;]/.test(t) === !1 && (t = t.replace(/\.{3,}$/g, ""), t = t.replace(/['",\.!:;\?\)]$/g, ""), t = t.replace(/^['"\(]/g, "")), t = t.trim(), "" === t && (t = e), t;
         }, r.addNormal = function (t) {
            var e = t._text || "";e = r.normalize(e), i(t._text) && (e = e.replace(/\./g, "")), e = e.replace(/([0-9]),([0-9])/g, "$1$2"), t.normal = e;
         };
      }, { "./isAcronym": 143, "./unicode": 146 }], 145: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = t.normal || t.silent_term || "";e = e.replace(/'s\b/, ""), e = e.replace(/'$/, ""), t.root = e;
         };e.exports = n;
      }, {}], 146: [function (t, e, r) {
         "use strict";
         var n,
             i = { "!": "¡", "?": "¿Ɂ", "-": "—–", a: "ªÀÁÂÃÄÅàáâãäåĀāĂăĄąǍǎǞǟǠǡǺǻȀȁȂȃȦȧȺΆΑΔΛάαλАДадѦѧӐӑӒӓƛɅæ", b: "ßþƀƁƂƃƄƅɃΒβϐϦБВЪЬбвъьѢѣҌҍҔҕƥƾ", c: "¢©ÇçĆćĈĉĊċČčƆƇƈȻȼͻͼͽϲϹϽϾϿЄСсєҀҁҪҫ", d: "ÐĎďĐđƉƊȡƋƌǷ", e: "ÈÉÊËèéêëĒēĔĕĖėĘęĚěƎƏƐǝȄȅȆȇȨȩɆɇΈΕΞΣέεξϱϵ϶ЀЁЕЭеѐёҼҽҾҿӖӗӘәӚӛӬӭ", f: "ƑƒϜϝӺӻҒғӶӷſ", g: "ĜĝĞğĠġĢģƓǤǥǦǧǴǵ", h: "ĤĥĦħƕǶȞȟΉΗЂЊЋНнђћҢңҤҥҺһӉӊ", I: "ÌÍÎÏ", i: "ìíîïĨĩĪīĬĭĮįİıƖƗȈȉȊȋΊΐΪίιϊІЇії", j: "ĴĵǰȷɈɉϳЈј", k: "ĶķĸƘƙǨǩΚκЌЖКжкќҚқҜҝҞҟҠҡ", l: "ĹĺĻļĽľĿŀŁłƚƪǀǏǐȴȽΙӀӏ", m: "ΜϺϻМмӍӎ", n: "ÑñŃńŅņŇňŉŊŋƝƞǸǹȠȵΝΠήηϞЍИЙЛПийлпѝҊҋӅӆӢӣӤӥπ", o: "ÒÓÔÕÖØðòóôõöøŌōŎŏŐőƟƠơǑǒǪǫǬǭǾǿȌȍȎȏȪȫȬȭȮȯȰȱΌΘΟθοσόϕϘϙϬϭϴОФоѲѳӦӧӨөӪӫ¤ƍΏ", p: "ƤƿΡρϷϸϼРрҎҏÞ", q: "Ɋɋ", r: "ŔŕŖŗŘřƦȐȑȒȓɌɍЃГЯгяѓҐґ", s: "ŚśŜŝŞşŠšƧƨȘșȿςϚϛϟϨϩЅѕ", t: "ŢţŤťŦŧƫƬƭƮȚțȶȾΓΤτϮϯТт҂Ҭҭ", u: "µÙÚÛÜùúûüŨũŪūŬŭŮůŰűŲųƯưƱƲǓǔǕǖǗǘǙǚǛǜȔȕȖȗɄΰμυϋύϑЏЦЧцџҴҵҶҷӋӌӇӈ", v: "νѴѵѶѷ", w: "ŴŵƜωώϖϢϣШЩшщѡѿ", x: "×ΧχϗϰХхҲҳӼӽӾӿ", y: "ÝýÿŶŷŸƳƴȲȳɎɏΎΥΫγψϒϓϔЎУучўѰѱҮүҰұӮӯӰӱӲӳ", z: "ŹźŻżŽžƩƵƶȤȥɀΖζ" },
             a = {};Object.keys(i).forEach(function (t) {
            i[t].split("").forEach(function (e) {
               a[e] = t;
            });
         }), n = function n(t) {
            var e = t.split("");return e.forEach(function (t, r) {
               a[t] && (e[r] = a[t]);
            }), e.join("");
         }, e.exports = n;
      }, {}], 147: [function (t, e, r) {
         "use strict";
         var n = t("../../paths"),
             i = n.fns,
             a = n.tags,
             o = function o(t) {
            var e,
                r,
                n = "silver",
                o = Object.keys(t.tags);for (e = 0; e < o.length; e++) {
               if (a[o[e]] && a[o[e]].color) {
                  n = a[o[e]].color;break;
               }
            }r = i.leftPad(t.text, 12), r += " " + o, console.log("%c " + r, "color: " + n);
         };e.exports = o;
      }, { "../../paths": 156 }], 148: [function (t, e, r) {
         "use strict";
         var n = t("./renderHtml"),
             i = t("./client"),
             a = t("./server"),
             o = { text: function text(t) {
               return t.whitespace.before + t._text + t.whitespace.after;
            }, normal: function normal(t) {
               return t.normal;
            }, root: function root(t) {
               return t.root || t.normal;
            }, html: function html(t) {
               return n(t);
            }, tags: function tags(t) {
               return { text: t.text, normal: t.normal, tags: Object.keys(t.tags) };
            }, debug: function debug(t) {
               void 0 !== e && this.module !== e ? a(t) : i(t);
            } },
             s = function s(t) {
            return t.prototype.out = function (t) {
               return o[t] || (t = "text"), o[t](this);
            }, t;
         };e.exports = s;
      }, { "./client": 147, "./renderHtml": 149, "./server": 150 }], 149: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = { "<": "&lt;", ">": "&gt;", "&": "&amp;", '"': "&quot;", "'": "&#39;", " ": "&nbsp;" };return t.replace(/[<>&"' ]/g, function (t) {
               return e[t];
            });
         },
             i = function i(t) {
            var e = "(?:[^\"'>]|\"[^\"]*\"|'[^']*')*",
                r = RegExp("<(?:!--(?:(?:-*[^->])*--+|-?)|script\\b" + e + ">[\\s\\S]*?</script\\s*|style\\b" + e + ">[\\s\\S]*?</style\\s*|/?[a-z]" + e + ")>", "gi"),
                n = void 0;do {
               n = t, t = t.replace(r, "");
            } while (t !== n);return t.replace(/</g, "&lt;");
         },
             a = function a(t) {
            var e,
                r,
                a = Object.keys(t.tags).filter(function (t) {
               return "Term" !== t;
            });return a = a.map(function (t) {
               return "nl-" + t;
            }), a = a.join(" "), e = i(t.text), e = n(e), r = '<span class="' + a + '">' + e + "</span>", n(t.whitespace.before) + r + n(t.whitespace.after);
         };e.exports = a;
      }, {}], 150: [function (t, e, r) {
         "use strict";
         var n = t("../../paths").fns,
             i = function i(t) {
            var e,
                r = Object.keys(t.tags).map(function (t) {
               return n.printTag(t);
            }).join(", "),
                i = t.text;i = "'" + n.yellow(i || "-") + "'", e = "", t.silent_term && (e = "[" + t.silent_term + "]"), i = n.leftPad(i, 20), i += n.leftPad(e, 8), console.log("   " + i + "        - " + r);
         };e.exports = i;
      }, { "../../paths": 156 }], 151: [function (t, e, r) {
         "use strict";
         var n = /([a-z ])([,:;.!?]+)$/i,
             i = function i(t) {
            var e = { endPunctuation: function endPunctuation() {
                  var t = this.text.match(n);return t ? t[2] : null;
               }, setPunctuation: function setPunctuation(t) {
                  return this.killPunctuation(), this.text += t, this;
               }, hasComma: function hasComma() {
                  return "," === this.endPunctuation();
               }, killPunctuation: function killPunctuation() {
                  return this.text = this._text.replace(n, "$1"), this;
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = i;
      }, {}], 152: [function (t, e, r) {
         "use strict";
         var n = function t(e, r) {
            var n,
                i,
                a = e.world.tags;if (void 0 === a[r]) return !0;for (n = a[r].notA || [], i = 0; i < n.length; i++) {
               if (e.tags[n[i]] === !0) return !1;
            }return void 0 === a[r].isA || t(e, a[r].isA);
         };e.exports = n;
      }, {}], 153: [function (t, e, r) {
         "use strict";
         var n = t("./setTag"),
             i = t("./unTag"),
             a = t("./canBe"),
             o = { ".": !0 },
             s = function s(t) {
            var e = { tag: function tag(t, e) {
                  o[t] !== !0 && n(this, t, e);
               }, unTag: function unTag(t, e) {
                  o[t] !== !0 && i(this, t, e);
               }, canBe: function canBe(t) {
                  if (t = t || "", "string" == typeof t) {
                     if (o[t] === !0) return !0;t = t.replace(/^#/, "");
                  }return a(this, t);
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = s;
      }, { "./canBe": 152, "./setTag": 154, "./unTag": 155 }], 154: [function (t, e, r) {
         "use strict";
         var n = t("../../paths"),
             i = n.log,
             a = n.fns,
             o = t("./unTag"),
             s = function t(e, r, n) {
            var a,
                s,
                u,
                l = e.world.tags;if (r = r.replace(/^#/, ""), e.tags[r] !== !0 && (e.tags[r] = !0, i.tag(e, r, n), l[r])) {
               for (a = l[r].notA || [], s = 0; s < a.length; s++) {
                  e.tags[a[s]] === !0 && o(e, a[s], n);
               }l[r].isA && (u = l[r].isA, e.tags[u] !== !0 && t(e, u, " --> " + r));
            }
         },
             u = function u(t, e, r) {
            if (t && e) {
               var n = t.world.tags;if (a.isArray(e)) return void e.forEach(function (e) {
                  return s(t, e, r);
               });s(t, e, r), n[e] && void 0 !== n[e].also && s(t, n[e].also, r);
            }
         };e.exports = u;
      }, { "../../paths": 156, "./unTag": 155 }], 155: [function (t, e, r) {
         "use strict";
         var n = t("../../paths"),
             i = n.log,
             a = function t(e, r, n) {
            var a,
                o,
                s = e.world.tags;if (e.tags[r] && (i.unTag(e, r, n), delete e.tags[r], s[r])) for (a = s[r].downward, o = 0; o < a.length; o++) {
               t(e, a[o], " - -   - ");
            }
         },
             o = function o(t, e, r) {
            if (t && e) return "*" === e ? void (t.tags = {}) : void a(t, e, r);
         };e.exports = o;
      }, { "../../paths": 156 }], 156: [function (t, e, r) {
         "use strict";
         e.exports = { fns: t("../fns"), log: t("../log") };
      }, { "../fns": 3, "../log": 6 }], 157: [function (t, e, r) {
         "use strict";
         var n = /^(\s|-+|\.\.+)+/,
             i = /^( *)-(\$|€|¥|£)?([0-9])/,
             a = /(\s+|-+|\.\.+)$/,
             o = function o(t) {
            var e = { before: "", after: "" },
                r = t.match(i);return null !== r ? (e.before = r[1], t = t.replace(/^ */, "")) : (r = t.match(n), null !== r && (e.before = t.match(n)[0], t = t.replace(n, ""))), r = t.match(a), null !== r && (t = t.replace(a, ""), e.after = r[0]), { whitespace: e, text: t };
         };e.exports = o;
      }, {}], 158: [function (t, e, r) {
         "use strict";
         var n = t("../term"),
             i = /\S/,
             a = /^[!?.]+$/,
             o = { ".": !0, "-": !0, "–": !0, "—": !0, "--": !0, "...": !0 },
             s = function s(t) {
            var e,
                r = /^([a-z]+)(-|–|—)([a-z0-9].*)/i;return r.test(t) === !0 || (e = /^([0-9]+)(–|—)([0-9].*)/i, !!e.test(t));
         },
             u = function u(t, e) {
            var r,
                u,
                l,
                c,
                h,
                f,
                m,
                d = [],
                p = [];for (t = t || "", "number" == typeof t && (t = "" + t), r = t.split(/(\S+)/), u = 0; u < r.length; u++) {
               if (l = r[u], s(l) === !0) for (c = l.split(/[-–—]/), h = 0; h < c.length; h++) {
                  h === c.length - 1 ? p.push(c[h]) : p.push(c[h] + "-");
               } else p.push(l);
            }for (f = "", m = 0; m < p.length; m++) {
               i.test(p[m]) === !0 && o.hasOwnProperty(p[m]) === !1 && a.test(p[m]) === !1 ? (d.push(f + p[m]), f = "") : f += p[m];
            }return f && d.length > 0 && (d[d.length - 1] += f), d.map(function (t) {
               return new n(t, e);
            });
         };e.exports = u;
      }, { "../term": 138 }], 159: [function (t, e, r) {
         "use strict";
         e.exports = { parent: { get: function get() {
                  return this.refText || this;
               }, set: function set(t) {
                  return this.refText = t, this;
               } }, parentTerms: { get: function get() {
                  return this.refTerms || this;
               }, set: function set(t) {
                  return this.refTerms = t, this;
               } }, dirty: { get: function get() {
                  for (var t = 0; t < this.terms.length; t++) {
                     if (this.terms[t].dirty === !0) return !0;
                  }return !1;
               }, set: function set(t) {
                  this.terms.forEach(function (e) {
                     e.dirty = t;
                  });
               } }, refTerms: { get: function get() {
                  return this._refTerms || this;
               }, set: function set(t) {
                  return this._refTerms = t, this;
               } }, found: { get: function get() {
                  return this.terms.length > 0;
               } }, length: { get: function get() {
                  return this.terms.length;
               } }, isA: { get: function get() {
                  return "Terms";
               } }, whitespace: { get: function get() {
                  var t = this;return { before: function before(e) {
                        return t.firstTerm().whitespace.before = e, t;
                     }, after: function after(e) {
                        return t.lastTerm().whitespace.after = e, t;
                     } };
               } } };
      }, {}], 160: [function (t, e, r) {
         "use strict";
         var n = t("./build"),
             i = t("./getters"),
             a = t("../world"),
             o = function o(t, e, r, n) {
            var o,
                s,
                u = this;for (this.terms = t, this.world = e || a, this.refText = r, this._refTerms = n, this.get = function (t) {
               return u.terms[t];
            }, o = Object.keys(i), s = 0; s < o.length; s++) {
               Object.defineProperty(this, o[s], i[o[s]]);
            }
         };o.fromString = function (t, e) {
            var r = n(t, e),
                i = new o(r, e, null);return i.terms.forEach(function (t) {
               t.parentTerms = i;
            }), i;
         }, t("./match")(o), t("./methods/tag")(o), t("./methods/loops")(o), t("./match/not")(o), t("./methods/delete")(o), t("./methods/insert")(o), t("./methods/misc")(o), t("./methods/out")(o), t("./methods/replace")(o), t("./methods/split")(o), t("./methods/transform")(o), t("./methods/lump")(o), e.exports = o;
      }, { "../world": 208, "./build": 158, "./getters": 159, "./match": 161, "./match/not": 170, "./methods/delete": 171, "./methods/insert": 172, "./methods/loops": 173, "./methods/lump": 175, "./methods/misc": 176, "./methods/out": 177, "./methods/replace": 178, "./methods/split": 179, "./methods/tag": 180, "./methods/transform": 181 }], 161: [function (t, e, r) {
         "use strict";
         var n = t("./lib/syntax"),
             i = t("./lib/startHere"),
             a = t("../../text"),
             o = t("./lib"),
             s = function s(t) {
            var e = { match: function match(e, r) {
                  var n,
                      i = this;return 0 === this.terms.length ? new a([], this.world, this.parent) : e ? (n = o(this, e, r), n = n.map(function (e) {
                     return new t(e, i.world, i.refText, i.refTerms);
                  }), new a(n, this.world, this.parent)) : new a([], this.world, this.parent);
               }, matchOne: function matchOne(t) {
                  var e, r, a;if (0 === this.terms.length) return null;for (e = n(t), r = 0; r < this.terms.length && !(e[0] && e[0].starting && r > 0); r++) {
                     if (a = i(this, r, e)) return a;
                  }return null;
               }, has: function has(t) {
                  return null !== this.matchOne(t);
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = s;
      }, { "../../text": 186, "./lib": 164, "./lib/startHere": 168, "./lib/syntax": 169 }], 162: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = [];return t.forEach(function (t) {
               var r, n;if (void 0 === t.find(function (t) {
                  return t.captureGroup === !0;
               })) return void e.push(t);for (r = [], n = 0; n < t.length; n += 1) {
                  t[n].captureGroup ? r.push(t[n]) : r.length > 0 && (e.push(r), r = []);
               }r.length > 0 && e.push(r);
            }), e;
         };e.exports = n;
      }, {}], 163: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r, n, i, a, o;for (r = 0; r < e.length; r++) {
               if (n = e[r], i = !1, n.optional !== !0 && n.negative !== !0 && void 0 === n.minMax) {
                  if (void 0 !== n.normal) {
                     for (a = 0; a < t.terms.length; a++) {
                        if (t.terms[a].normal === n.normal || t.terms[a].silent_term === n.normal) {
                           i = !0;break;
                        }if (t.terms[a].lumped === !0) return !1;
                     }if (i === !1) return !0;
                  }if (void 0 !== n.tag) {
                     for (o = 0; o < t.terms.length; o++) {
                        if (t.terms[o].tags[n.tag] === !0) {
                           i = !0;break;
                        }
                     }if (i === !1) return !0;
                  }
               }
            }return !1;
         };e.exports = n;
      }, {}], 164: [function (t, e, r) {
         "use strict";
         var n = t("./syntax"),
             i = t("./startHere"),
             a = t("./fastPass"),
             o = t("./captureGroup"),
             s = function s(t) {
            var e = t.terms.map(function (t) {
               return { id: t.uid };
            });return e;
         },
             u = function u(t, e, r) {
            var u, l, c, h;if ("string" == typeof e ? e = n(e) : e && "Text" === e.isA ? e = s(e.list[0]) : e && "Terms" === e.isA && (e = s(e)), !e || 0 === e.length) return [];if (a(t, e, r) === !0) return [];for (u = [], l = 0; l < t.terms.length && !(l > 0 && e[0] && e[0].starting); l += 1) {
               c = i(t, l, e, r), c && c.length > 0 && (u.push(c), h = c.length - 1, l += h);
            }return u = o(u);
         };e.exports = u;
      }, { "./captureGroup": 162, "./fastPass": 163, "./startHere": 168, "./syntax": 169 }], 165: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r, n;if (!t || !e) return !1;if (e.anyOne === !0) return !0;if (void 0 !== e.tag) return t.tags[e.tag];if (void 0 !== e.id) return e.id === t.uid;if (void 0 !== e.normal) return e.normal === t.normal || e.normal === t.silent_term;if (e.suffix === !0 && void 0 !== e.partial) return r = t.normal.length, t.normal.substr(r - e.partial.length, r) === e.partial;if (e.prefix === !0 && void 0 !== e.partial) return t.normal.substr(0, e.partial.length) === e.partial;if (e.infix === !0 && void 0 !== e.partial) return t.normal.indexOf(e.partial) !== -1;if (void 0 !== e.regex) return e.regex.test(t.normal) || e.regex.test(t.text);if (void 0 !== e.oneOf) {
               for (n = 0; n < e.oneOf.tagArr.length; n++) {
                  if (t.tags.hasOwnProperty(e.oneOf.tagArr[n]) === !0) return !0;
               }return e.oneOf.terms.hasOwnProperty(t.normal) || e.oneOf.terms.hasOwnProperty(t.silent_term);
            }return !1;
         },
             i = function i(t, e, r) {
            if (!t || !e) return !1;var i = n(t, e, r);return e.capture ? t.captureGroup = !0 : t.captureGroup = void 0, e.negative && (i = !i), i;
         };e.exports = i;
      }, {}], 166: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r = e.normal.substr(0, t.length);return r === t;
         },
             i = function i(t, e, r, _i) {
            var a = e[r].normal;if (void 0 !== a && n(a, t)) for (r += 1; r < e.length; r++) {
               if (a += " " + e[r].normal, a === t.normal) return r;if (n(a, t) === !1) return null;
            }return null;
         };e.exports = i;
      }, {}], 167: [function (t, e, r) {
         arguments[4][70][0].apply(r, arguments);
      }, { "../../paths": 183, dup: 70 }], 168: [function (t, e, r) {
         "use strict";
         var n = t("./lumpMatch"),
             i = t("./isMatch"),
             a = function a(t, e, r) {
            for (; e < t.length; e++) {
               if (i(t.terms[e], r)) return e;
            }return null;
         },
             o = function o(t, e, r, n) {
            for (; e < t.length; e++) {
               var a = t.terms[e];if (n && i(a, n)) return e;if (!i(a, r)) return e;
            }return e;
         },
             s = function s(t, e, r, _s) {
            var u,
                l,
                c,
                h,
                f,
                m,
                d,
                p,
                g,
                v,
                y,
                b,
                D,
                w,
                x = e;for (u = 0; u < r.length; u++) {
               if (l = t.terms[x], c = r[u], h = r[u + 1], !l) {
                  if (c.optional === !0) continue;return null;
               }if (c.starting === !0 && x > 0) return null;if (c.ending === !0 && x !== t.length - 1 && !c.minMax) return null;if (r[u].astrix !== !0) {
                  if (void 0 === r[u].minMax) {
                     if (c.optional !== !0) {
                        if (i(l, c, _s)) x += 1, c.consecutive === !0 && (D = r[u + 1], x = o(t, x, c, D));else if (!l.silent_term || l.normal) {
                           if (w = n(l, r, u, _s), null === w) {
                              if (c.optional !== !0) return null;
                           } else u = w, x += 1;
                        } else {
                           if (0 === u) return null;x += 1, u -= 1;
                        }
                     } else b = r[u + 1], x = o(t, x, c, b);
                  } else for (m = r[u].minMax.min || 0, d = r[u].minMax.max, p = r[u + 1], g = 0; d > g; g++) {
                     if (v = t.terms[x + g], !v) return null;if (i(v, c) === !1) return null;if (g >= m - 1) {
                        if (!p) {
                           x += 1;break;
                        }if (g >= m && i(v, p)) break;if (y = t.terms[x + g + 1], y && i(y, p)) {
                           x += g + 2, u += 1;break;
                        }if (g === d - 1) return null;
                     }
                  }
               } else {
                  if (!h) return t.terms.slice(e, t.length);if (f = a(t, x, r[u + 1]), !f) return null;x = f + 1, u += 1;
               }
            }return t.terms.slice(e, x);
         };e.exports = s;
      }, { "./isMatch": 165, "./lumpMatch": 166 }], 169: [function (t, e, r) {
         "use strict";
         var n = t("./paths").fns,
             i = /\{[0-9,]+\}$/,
             a = function a(t) {
            return t.substr(1, t.length);
         },
             o = function o(t) {
            return t.substring(0, t.length - 1);
         },
             s = function s(t) {
            var e, r, s;return t = t || "", t = t.trim(), e = {}, 1 === t.length && "." !== t && "*" !== t ? (e.normal = t, e) : ("!" === t.charAt(0) && (t = a(t), e.negative = !0), "^" === t.charAt(0) && (t = a(t), e.starting = !0), "$" === t.charAt(t.length - 1) && (t = o(t), e.ending = !0), "?" === t.charAt(t.length - 1) && (t = o(t), e.optional = !0), "+" === t.charAt(t.length - 1) && (t = o(t), e.consecutive = !0), "_" === t.charAt(t.length - 1) ? (t = o(t), e.prefix = !0, "_" === t.charAt(0) && (t = a(t), e.prefix = void 0, e.infix = !0), e.partial = t, t = "") : "_" === t.charAt(0) && (t = a(t), e.suffix = !0, e.partial = t, t = ""), "}" === t.charAt(t.length - 1) && i.test(t) === !0 && (r = t.match(/\{([0-9]+)?,? ?([0-9]+)\}/), e.minMax = { min: parseInt(r[1], 10) || 0, max: parseInt(r[2], 10) }, t = t.replace(i, "")), "#" === t.charAt(0) && (t = a(t), e.tag = n.titleCase(t), t = ""), "/" === t.charAt(0) && "/" === t.charAt(t.length - 1) && (t = o(t), t = a(t), e.regex = RegExp(t, "i"), t = ""), "(" === t.charAt(0) && ")" === t.charAt(t.length - 1) && (t = o(t), t = a(t), s = t.split(/\|/g), e.oneOf = { terms: {}, tagArr: [] }, s.forEach(function (t) {
               if ("#" === t.charAt(0)) {
                  var r = t.substr(1, t.length);r = n.titleCase(r), e.oneOf.tagArr.push(r);
               } else e.oneOf.terms[t] = !0;
            }), t = ""), "." === t && (e.anyOne = !0, t = ""), "*" === t && (e.astrix = !0, t = ""), "" !== t && (t = t.replace(/\\([\\#\*\.\[\]\(\)\+\?\^])/g, ""), e.normal = t.toLowerCase()), e);
         },
             u = function u(t) {
            var e, r;return t = t || "", e = t.split(/ +/), r = !1, e = e.map(function (t) {
               var e = !1;return "[" === t.charAt(0) && (t = a(t), r = !0), "]" === t.charAt(t.length - 1) && (t = o(t), r = !1, e = !0), t = s(t), r !== !0 && e !== !0 || (t.capture = !0), t;
            });
         };e.exports = u;
      }, { "./paths": 167 }], 170: [function (t, e, r) {
         "use strict";
         var n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
            return typeof t === "undefined" ? "undefined" : _typeof(t);
         } : function (t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
         },
             i = t("./lib/syntax"),
             a = t("./lib/startHere"),
             o = t("../../text"),
             s = function s(t) {
            var e = { notObj: function notObj(e, r) {
                  var n = [],
                      i = [];return e.terms.forEach(function (t) {
                     r.hasOwnProperty(t.normal) ? (i.length && n.push(i), i = []) : i.push(t);
                  }), i.length && n.push(i), n = n.map(function (r) {
                     return new t(r, e.world, e.refText, e.refTerms);
                  }), new o(n, e.world, e.parent);
               }, notString: function notString(e, r, n) {
                  var s,
                      u,
                      l = [],
                      c = i(r),
                      h = [];for (s = 0; s < e.terms.length; s++) {
                     u = a(e, s, c, n), u && u.length > 0 ? (h.length > 0 && (l.push(h), h = []), s += u.length - 1) : h.push(e.terms[s]);
                  }return h.length > 0 && l.push(h), l = l.map(function (r) {
                     return new t(r, e.world, e.refText, e.refTerms);
                  }), new o(l, e.world, e.parent);
               } };return e.notArray = function (t, r) {
               var n = r.reduce(function (t, e) {
                  return t[e] = !0, t;
               }, {});return e.notObj(t, n);
            }, t.prototype.not = function (t, r) {
               if ("object" === (void 0 === t ? "undefined" : n(t))) {
                  var i = Object.prototype.toString.call(t);if ("[object Array]" === i) return e.notArray(this, t, r);if ("[object Object]" === i) return e.notObj(this, t, r);
               }return "string" == typeof t ? e.notString(this, t, r) : this;
            }, t;
         };e.exports = s;
      }, { "../../text": 186, "./lib/startHere": 168, "./lib/syntax": 169 }], 171: [function (t, e, r) {
         "use strict";
         var n = t("../mutate"),
             i = function i(t) {
            return t.prototype.delete = function (t) {
               var e, r;return this.found ? t ? (e = this.match(t), e.found ? r = n.deleteThese(this, e) : this.parentTerms) : (this.parentTerms = n.deleteThese(this.parentTerms, this), this) : this;
            }, t;
         };e.exports = i;
      }, { "../mutate": 182 }], 172: [function (t, e, r) {
         "use strict";
         var n = t("../mutate"),
             i = function i(t, e) {
            return t.terms.length && t.terms[e] ? (t.terms[e].whitespace.before = " ", t) : t;
         },
             a = function a(t) {
            var e = function e(_e2, r) {
               if ("Terms" === _e2.isA) return _e2;if ("Term" === _e2.isA) return new t([_e2], r);var n = t.fromString(_e2, r);return n.tagger(), n;
            },
                r = { insertBefore: function insertBefore(t, r) {
                  var a,
                      o = this.terms.length,
                      s = e(t, this.world);return r && s.tag(r), a = this.index(), i(this.parentTerms, a), a > 0 && i(s, 0), this.parentTerms.terms = n.insertAt(this.parentTerms.terms, a, s), this.terms.length === o && (this.terms = s.terms.concat(this.terms)), this;
               }, insertAfter: function insertAfter(t, r) {
                  var a,
                      o = this.terms.length,
                      s = e(t, this.world);return r && s.tag(r), a = this.terms[this.terms.length - 1].index(), i(s, 0), this.parentTerms.terms = n.insertAt(this.parentTerms.terms, a + 1, s), this.terms.length === o && (this.terms = this.terms.concat(s.terms)), this;
               }, insertAt: function insertAt(t, r, a) {
                  var o, s;return 0 > t && (t = 0), o = this.terms.length, s = e(r, this.world), a && s.tag(a), t > 0 && i(s, 0), this.parentTerms.terms = n.insertAt(this.parentTerms.terms, t, s), this.terms.length === o && Array.prototype.splice.apply(this.terms, [t, 0].concat(s.terms)), 0 === t && (this.terms[0].whitespace.before = "", s.terms[s.terms.length - 1].whitespace.after = " "), this;
               } };return Object.keys(r).forEach(function (e) {
               t.prototype[e] = r[e];
            }), t;
         };e.exports = a;
      }, { "../mutate": 182 }], 173: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = [["toUpperCase", "UpperCase"], ["toLowerCase"], ["toTitleCase", "TitleCase"]];return e.forEach(function (e) {
               var r = e[0],
                   n = e[1],
                   i = function i() {
                  var t = arguments;return this.terms.forEach(function (e) {
                     e[r].apply(e, t);
                  }), n && this.tag(n, r), this;
               };t.prototype[r] = i;
            }), t;
         };e.exports = n;
      }, {}], 174: [function (t, e, r) {
         "use strict";
         var n = t("../../../term"),
             i = function i(t, e) {
            var r = t.whitespace.before + t.text + t.whitespace.after;return r += e.whitespace.before + e.text + e.whitespace.after;
         },
             a = function a(t, e) {
            var r,
                a = t.terms[e],
                o = t.terms[e + 1];o && (r = i(a, o), t.terms[e] = new n(r, a.context), t.terms[e].normal = a.normal + " " + o.normal, t.terms[e].lumped = !0, t.terms[e].parentTerms = t.terms[e + 1].parentTerms, t.terms[e + 1] = null, t.terms = t.terms.filter(function (t) {
               return null !== t;
            }));
         };e.exports = a;
      }, { "../../../term": 138 }], 175: [function (t, e, r) {
         "use strict";
         var n = t("./combine"),
             i = t("../../mutate"),
             a = function a(t, e) {
            var r,
                i,
                a = t.terms.length;for (r = 0; a > r; r++) {
               n(t, 0);
            }return i = t.terms[0], i.tags = e, i;
         },
             o = function o(t) {
            return t.prototype.lump = function () {
               var t,
                   e,
                   r = this.index(),
                   n = {};return this.terms.forEach(function (t) {
                  Object.keys(t.tags).forEach(function (t) {
                     return n[t] = !0;
                  });
               }), this.parentTerms === this ? (t = a(this, n), this.terms = [t], this) : (this.parentTerms = i.deleteThese(this.parentTerms, this), e = a(this, n), this.parentTerms.terms = i.insertAt(this.parentTerms.terms, r, e), this);
            }, t;
         };e.exports = o;
      }, { "../../mutate": 182, "./combine": 174 }], 176: [function (t, e, r) {
         "use strict";
         var n = t("../../tagger"),
             i = function i(t) {
            var e = { tagger: function tagger() {
                  return n(this), this;
               }, firstTerm: function firstTerm() {
                  return this.terms[0];
               }, lastTerm: function lastTerm() {
                  return this.terms[this.terms.length - 1];
               }, all: function all() {
                  return this.parent;
               }, data: function data() {
                  return { text: this.out("text"), normal: this.out("normal") };
               }, term: function term(t) {
                  return this.terms[t];
               }, first: function first() {
                  var e = this.terms[0];return new t([e], this.world, this.refText, this.refTerms);
               }, last: function last() {
                  var e = this.terms[this.terms.length - 1];return new t([e], this.world, this.refText, this.refTerms);
               }, slice: function slice(e, r) {
                  var n = this.terms.slice(e, r);return new t(n, this.world, this.refText, this.refTerms);
               }, endPunctuation: function endPunctuation() {
                  return this.last().terms[0].endPunctuation();
               }, index: function index() {
                  var t,
                      e = this.parentTerms,
                      r = this.terms[0];if (!e || !r) return null;for (t = 0; t < e.terms.length; t++) {
                     if (r === e.terms[t]) return t;
                  }return null;
               }, termIndex: function termIndex() {
                  var t,
                      e,
                      r,
                      n,
                      i = this.terms[0],
                      a = this.refText || this;if (!a || !i) return null;for (t = 0, e = 0; e < a.list.length; e++) {
                     for (r = a.list[e], n = 0; n < r.terms.length; n++) {
                        if (r.terms[n] === i) return t;t += 1;
                     }
                  }return t;
               }, chars: function chars() {
                  return this.terms.reduce(function (t, e) {
                     return t += e.whitespace.before.length, t += e.text.length, t += e.whitespace.after.length;
                  }, 0);
               }, wordCount: function wordCount() {
                  return this.terms.length;
               }, toCamelCase: function toCamelCase() {
                  return this.toTitleCase(), this.terms.forEach(function (t, e) {
                     0 !== e && (t.whitespace.before = ""), t.whitespace.after = "";
                  }), this.tag("#CamelCase", "toCamelCase"), this;
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = i;
      }, { "../../tagger": 100 }], 177: [function (t, e, r) {
         "use strict";
         var n,
             i = t("../paths").fns,
             a = { text: function text(t) {
               return t.terms.reduce(function (t, e) {
                  return t += e.out("text");
               }, "");
            }, match: function match(t) {
               var e,
                   r = "",
                   n = t.terms.length;for (e = 0; n > e; e++) {
                  e > 0 && (r += t.terms[e].whitespace.before), r += t.terms[e].text.replace(/[,.?!]$/, ""), n - 1 > e && (r += t.terms[e].whitespace.after);
               }return r;
            }, normal: function normal(t) {
               var e = t.terms.filter(function (t) {
                  return t.text;
               });return e = e.map(function (t) {
                  return t.normal;
               }), e.join(" ");
            }, grid: function grid(t) {
               var e = "  ";return e += t.terms.reduce(function (t, e) {
                  return t += i.leftPad(e.text, 11);
               }, ""), e + "\n\n";
            }, color: function color(t) {
               return t.terms.reduce(function (t, e) {
                  return t += i.printTerm(e);
               }, "");
            }, csv: function csv(t) {
               return t.terms.map(function (t) {
                  return t.normal.replace(/,/g, "");
               }).join(",");
            }, newlines: function newlines(t) {
               return t.terms.reduce(function (t, e) {
                  return t += e.out("text").replace(/\n/g, " ");
               }, "").replace(/^\s/, "");
            }, root: function root(t) {
               return t.terms.map(function (t) {
                  return t.silent_term || t.root;
               }).join(" ").toLowerCase();
            }, html: function html(t) {
               return t.terms.map(function (t) {
                  return t.render.html();
               }).join(" ");
            }, debug: function debug(t) {
               t.terms.forEach(function (t) {
                  t.out("debug");
               });
            } };a.plaintext = a.text, a.normalize = a.normal, a.normalized = a.normal, a.colors = a.color, a.tags = a.terms, n = function n(t) {
            return t.prototype.out = function (t) {
               return a[t] ? a[t](this) : a.text(this);
            }, t.prototype.debug = function () {
               return a.debug(this);
            }, t;
         }, e.exports = n;
      }, { "../paths": 183 }], 178: [function (t, e, r) {
         "use strict";
         var n = t("../mutate"),
             i = function i(t) {
            var e = { replace: function replace(t, e, r) {
                  return void 0 === e ? this.replaceWith(t, r) : (this.match(t).replaceWith(e, r), this);
               }, replaceWith: function replaceWith(e, r) {
                  var i,
                      a = t.fromString(e, this.world);return a.tagger(), r && this.terms.forEach(function (t, e) {
                     var r = Object.keys(t.tags);void 0 !== a.terms[e] && r.forEach(function (t) {
                        return a.terms[e].tag(t, "from-memory");
                     });
                  }), i = this.index(), this.parentTerms = n.deleteThese(this.parentTerms, this), this.parentTerms.terms = n.insertAt(this.parentTerms.terms, i, a), this.terms = a.terms, this;
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = i;
      }, { "../mutate": 182 }], 179: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r,
                n = e.terms[0],
                i = e.terms.length;for (r = 0; r < t.length; r++) {
               if (t[r] === n) return { before: t.slice(0, r), match: t.slice(r, r + i), after: t.slice(r + i, t.length) };
            }return { after: t };
         },
             i = function i(t) {
            var e = { splitAfter: function splitAfter(e, r) {
                  var i = this,
                      a = this.match(e, r),
                      o = this.terms,
                      s = [];return a.list.forEach(function (t) {
                     var e = n(o, t);e.before && e.match && s.push(e.before.concat(e.match)), o = e.after;
                  }), o.length && s.push(o), s = s.map(function (e) {
                     var r = i.refText;return new t(e, i.world, r, i.refTerms);
                  });
               }, splitOn: function splitOn(e, r) {
                  var i = this,
                      a = this.match(e, r),
                      o = this.terms,
                      s = [];return a.list.forEach(function (t) {
                     var e = n(o, t);e.before && s.push(e.before), e.match && s.push(e.match), o = e.after;
                  }), o.length && s.push(o), s = s.filter(function (t) {
                     return t && t.length;
                  }), s = s.map(function (e) {
                     return new t(e, e.world, e.refText, i.refTerms);
                  });
               }, splitBefore: function splitBefore(e, r) {
                  var i,
                      a,
                      o = this,
                      s = this.match(e, r),
                      u = this.terms,
                      l = [];for (s.list.forEach(function (t) {
                     var e = n(u, t);e.before && l.push(e.before), e.match && l.push(e.match), u = e.after;
                  }), u.length && l.push(u), i = 0; i < l.length; i++) {
                     for (a = 0; a < s.length; a++) {
                        s.list[a].terms[0] === l[i][0] && l[i + 1] && (l[i] = l[i].concat(l[i + 1]), l[i + 1] = []);
                     }
                  }return l = l.filter(function (t) {
                     return t && t.length;
                  }), l = l.map(function (e) {
                     return new t(e, e.world, e.refText, o.refTerms);
                  });
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = i, r = i;
      }, {}], 180: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = { tag: function tag(t, e) {
                  var r = [];return "string" == typeof t && (r = t.split(" ")), r.length > 1 ? (this.terms.forEach(function (t, n) {
                     t.tag(r[n], e);
                  }), this) : (this.terms.forEach(function (r) {
                     r.tag(t, e);
                  }), this);
               }, unTag: function unTag(t, e) {
                  var r = [];return "string" == typeof t && (r = t.split(" ")), r.length > 1 ? (this.terms.forEach(function (t, n) {
                     t.unTag(r[n], e);
                  }), this) : (this.terms.forEach(function (r) {
                     r.unTag(t, e);
                  }), this);
               }, canBe: function canBe(e) {
                  var r = this.terms.filter(function (t) {
                     return t.canBe(e);
                  });return new t(r, this.world, this.refText, this.refTerms);
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = n;
      }, {}], 181: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = { clone: function clone() {
                  var e = this.terms.map(function (t) {
                     return t.clone();
                  });return new t(e, this.world, this.refText, null);
               }, hyphenate: function hyphenate() {
                  var t = this;return this.terms.forEach(function (e, r) {
                     r !== t.terms.length - 1 && (e.whitespace.after = "-"), 0 !== r && (e.whitespace.before = "");
                  }), this;
               }, dehyphenate: function dehyphenate() {
                  return this.terms.forEach(function (t) {
                     "-" === t.whitespace.after && (t.whitespace.after = " ");
                  }), this;
               }, trim: function trim() {
                  return this.length > 0 ? (this.terms[0].whitespace.before = "", this.terms[this.terms.length - 1].whitespace.after = "", this) : this;
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = n;
      }, {}], 182: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = [];return "Terms" === t.isA ? e = t.terms : "Text" === t.isA ? e = t.flatten().list[0].terms : "Term" === t.isA && (e = [t]), e;
         };r.deleteThese = function (t, e) {
            var r = n(e);return t.terms = t.terms.filter(function (t) {
               for (var e = 0; e < r.length; e++) {
                  if (t === r[e]) return !1;
               }return !0;
            }), t;
         }, r.insertAt = function (t, e, r) {
            r.dirty = !0;var i = n(r);return e > 0 && i[0] && !i[0].whitespace.before && (i[0].whitespace.before = " "), Array.prototype.splice.apply(t, [e, 0].concat(i)), t;
         };
      }, {}], 183: [function (t, e, r) {
         "use strict";
         e.exports = { fns: t("../fns"), Term: t("../term") };
      }, { "../fns": 3, "../term": 138 }], 184: [function (t, e, r) {
         "use strict";
         var n = t("./index"),
             i = t("./tokenize"),
             a = t("./paths"),
             o = a.Terms,
             s = a.fns,
             u = function u(t, e) {
            var r,
                a,
                u = [];return s.isArray(t) ? u = t : (t = s.ensureString(t), u = i(t)), r = u.map(function (t) {
               return o.fromString(t, e);
            }), a = new n(r, e), a.list.forEach(function (t) {
               t.refText = a;
            }), a;
         };e.exports = u;
      }, { "./index": 186, "./paths": 198, "./tokenize": 200 }], 185: [function (t, e, r) {
         "use strict";
         e.exports = { found: function found() {
               return this.list.length > 0;
            }, parent: function parent() {
               return this.original || this;
            }, length: function length() {
               return this.list.length;
            }, isA: function isA() {
               return "Text";
            }, whitespace: function whitespace() {
               var t = this;return { before: function before(e) {
                     return t.list.forEach(function (t) {
                        t.whitespace.before(e);
                     }), t;
                  }, after: function after(e) {
                     return t.list.forEach(function (t) {
                        t.whitespace.after(e);
                     }), t;
                  } };
            } };
      }, {}], 186: [function (t, e, r) {
         "use strict";
         function n(t, e, r) {
            var n, i;for (this.list = t || [], "function" == typeof e && (e = e()), this.world = function () {
               return e;
            }, this.original = r, n = Object.keys(a), i = 0; i < n.length; i++) {
               Object.defineProperty(this, n[i], { get: a[n[i]] });
            }
         }var i,
             a = t("./getters");e.exports = n, n.addMethods = function (t, e) {
            var r,
                n = Object.keys(e);for (r = 0; r < n.length; r++) {
               t.prototype[n[r]] = e[n[r]];
            }
         }, n.makeSubset = function (t, e) {
            var r = function r(t, e, _r) {
               n.call(this, t, e, _r);
            };return r.prototype = Object.create(n.prototype), n.addMethods(r, t), r.find = e, r;
         }, t("./methods/misc")(n), t("./methods/loops")(n), t("./methods/match")(n), t("./methods/out")(n), t("./methods/sort")(n), t("./methods/split")(n), t("./methods/normalize")(n), t("./subsets")(n), i = { acronyms: t("../subset/acronyms"), adjectives: t("../subset/adjectives"), adverbs: t("../subset/adverbs"), contractions: t("../subset/contractions"), dates: t("../subset/dates"), nouns: t("../subset/nouns"), people: t("../subset/people"), sentences: t("../subset/sentences"), terms: t("../subset/terms"), values: t("../subset/values"), verbs: t("../subset/verbs"), ngrams: t("../subset/ngrams"), startGrams: t("../subset/ngrams/startGrams"), endGrams: t("../subset/ngrams/endGrams") }, Object.keys(i).forEach(function (t) {
            n.prototype[t] = function (e, r) {
               var n = i[t],
                   a = n.find(this, e, r);return new i[t](a.list, this.world, this.parent);
            };
         }), n.prototype.words = n.prototype.terms;
      }, { "../subset/acronyms": 9, "../subset/adjectives": 10, "../subset/adverbs": 17, "../subset/contractions": 23, "../subset/dates": 25, "../subset/ngrams": 35, "../subset/ngrams/endGrams": 32, "../subset/ngrams/startGrams": 36, "../subset/nouns": 38, "../subset/people": 48, "../subset/sentences": 50, "../subset/terms": 56, "../subset/values": 62, "../subset/verbs": 72, "./getters": 185, "./methods/loops": 187, "./methods/match": 188, "./methods/misc": 189, "./methods/normalize": 190, "./methods/out": 191, "./methods/sort": 195, "./methods/split": 197, "./subsets": 199 }], 187: [function (t, e, r) {
         "use strict";
         var n = ["toTitleCase", "toUpperCase", "toLowerCase", "toCamelCase", "hyphenate", "dehyphenate", "trim", "insertBefore", "insertAfter", "insertAt", "replace", "replaceWith", "delete", "lump", "tagger", "unTag"],
             i = function i(t) {
            n.forEach(function (e) {
               t.prototype[e] = function () {
                  for (var t = 0; t < this.list.length; t++) {
                     this.list[t][e].apply(this.list[t], arguments);
                  }return this;
               };
            }), t.prototype.tag = function () {
               if (0 === this.list.length) return this;for (var t = 0; t < this.list.length; t++) {
                  this.list[t].tag.apply(this.list[t], arguments);
               }return this;
            };
         };e.exports = i;
      }, {}], 188: [function (t, e, r) {
         "use strict";
         var n = t("../../../terms/match/lib/syntax"),
             i = t("../../../terms"),
             a = function a(t) {
            var e = function e(_e3, r, i) {
               var a,
                   o = [];return r = n(r), _e3.list.forEach(function (t) {
                  var e = t.match(r, i);e.list.forEach(function (t) {
                     o.push(t);
                  });
               }), a = _e3.parent || _e3, new t(o, _e3.world(), a);
            },
                r = function r(e, _r2) {
               var n = [];return e.list.forEach(function (t) {
                  t.terms.forEach(function (t) {
                     _r2.hasOwnProperty(t.normal) === !0 && n.push(t);
                  });
               }), n = n.map(function (t) {
                  return new i([t], e.world(), e, t.parentTerms);
               }), new t(n, e.world(), e.parent);
            },
                a = function a(t, e) {
               var n = e.reduce(function (t, e) {
                  return t[e] = !0, t;
               }, {});return r(t, n);
            },
                o = { match: function match(n, i) {
                  var o, s;return 0 === this.list.length || void 0 === n || null === n ? (o = this.parent || this, new t([], this.world(), o)) : "string" == typeof n || "number" == typeof n ? e(this, n, i) : (s = Object.prototype.toString.call(n), "[object Array]" === s ? a(this, n) : "[object Object]" === s ? r(this, n) : this);
               }, not: function not(e, r) {
                  var n,
                      i = [];return this.list.forEach(function (t) {
                     var n = t.not(e, r);i = i.concat(n.list);
                  }), n = this.parent || this, new t(i, this.world(), n);
               }, if: function _if(e) {
                  var r,
                      n,
                      i = [];for (r = 0; r < this.list.length; r++) {
                     this.list[r].has(e) === !0 && i.push(this.list[r]);
                  }return n = this.parent || this, new t(i, this.world(), n);
               }, ifNo: function ifNo(e) {
                  var r,
                      n,
                      i = [];for (r = 0; r < this.list.length; r++) {
                     this.list[r].has(e) === !1 && i.push(this.list[r]);
                  }return n = this.parent || this, new t(i, this.world(), n);
               }, has: function has(t) {
                  for (var e = 0; e < this.list.length; e++) {
                     if (this.list[e].has(t) === !0) return !0;
                  }return !1;
               }, before: function before(e) {
                  var r,
                      n,
                      i,
                      a,
                      o,
                      s = [];for (r = 0; r < this.list.length; r++) {
                     n = this.list[r].matchOne(e), n && (i = n[0].index(), a = this.list[r].slice(0, i), a.length > 0 && s.push(a));
                  }return o = this.parent || this, new t(s, this.world(), o);
               }, after: function after(e) {
                  var r,
                      n,
                      i,
                      a,
                      o,
                      s,
                      u = [];for (r = 0; r < this.list.length; r++) {
                     n = this.list[r].matchOne(e), n && (i = n[n.length - 1], a = i.index(), o = this.list[r].slice(a + 1, this.list[r].length), o.length > 0 && u.push(o));
                  }return s = this.parent || this, new t(u, this.world(), s);
               } };return o.and = o.match, t.addMethods(t, o), t;
         };e.exports = a;
      }, { "../../../terms": 160, "../../../terms/match/lib/syntax": 169 }], 189: [function (t, e, r) {
         "use strict";
         var n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
            return typeof t === "undefined" ? "undefined" : _typeof(t);
         } : function (t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
         },
             i = t("../../terms"),
             a = function a(t) {
            var e = { all: function all() {
                  return this.parent;
               }, index: function index() {
                  return this.list.map(function (t) {
                     return t.index();
                  });
               }, wordCount: function wordCount() {
                  return this.terms().length;
               }, data: function data() {
                  return this.list.map(function (t) {
                     return t.data();
                  });
               }, map: function map(e) {
                  var r = this;return this.list.map(function (n, i) {
                     var a = new t([n], r.world);return e(a, i);
                  });
               }, forEach: function forEach(e) {
                  var r = this;return this.list.forEach(function (n, i) {
                     var a = new t([n], r.world);e(a, i);
                  }), this;
               }, filter: function filter(e) {
                  var r = this,
                      n = this.list.filter(function (n, i) {
                     var a = new t([n], r.world);return e(a, i);
                  });return new t(n, this.world);
               }, reduce: function reduce(e, r) {
                  var n = this;return this.list.reduce(function (r, i) {
                     var a = new t([i], n.world);return e(r, a);
                  }, r);
               }, find: function find(e) {
                  var r, n, i;for (r = 0; r < this.list.length; r++) {
                     if (n = this.list[r], i = new t([n], this.world), e(i)) return i;
                  }
               }, clone: function clone() {
                  var e = this.list.map(function (t) {
                     return t.clone();
                  });return new t(e, this.world);
               }, term: function term(e) {
                  var r = this,
                      n = this.list.map(function (t) {
                     var n = [],
                         a = t.terms[e];return a && (n = [a]), new i(n, r.world, r.refText, r.refTerms);
                  });return new t(n, this.world, this.parent);
               }, firstTerm: function firstTerm() {
                  return this.match("^.");
               }, lastTerm: function lastTerm() {
                  return this.match(".$");
               }, slice: function slice(t, e) {
                  return this.list = this.list.slice(t, e), this;
               }, get: function get(e) {
                  if (!e && 0 !== e || !this.list[e]) return new t([], this.world, this.parent);var r = this.list[e];return new t([r], this.world, this.parent);
               }, first: function first(e) {
                  return e || 0 === e ? new t(this.list.slice(0, e), this.world, this.parent) : this.get(0);
               }, last: function last(e) {
                  var r, n;return e || 0 === e ? (r = this.list.length, n = r - e, new t(this.list.slice(n, r), this.world, this.parent)) : this.get(this.list.length - 1);
               }, concat: function concat() {
                  var t, e;for (t = 0; t < arguments.length; t++) {
                     e = arguments[t], "object" === (void 0 === e ? "undefined" : n(e)) && ("Text" === e.isA && e.list && (this.list = this.list.concat(e.list)), "Terms" === e.isA && this.list.push(e));
                  }return this;
               }, flatten: function flatten() {
                  var e,
                      r = [];return this.list.forEach(function (t) {
                     r = r.concat(t.terms);
                  }), r.length ? (e = new i(r, this.world, this, null), new t([e], this.world, this.parent)) : new t(null, this.world, this.parent);
               }, canBe: function canBe(t) {
                  return this.list.forEach(function (e) {
                     e.terms = e.terms.filter(function (e) {
                        return e.canBe(t);
                     });
                  }), this;
               }, random: function random(e) {
                  var r, n, i;return e = e || 1, r = Math.floor(Math.random() * this.list.length), n = this.list.slice(r, r + e), n.length < e && (i = e - n.length, i > r && (i = r), n = n.concat(this.list.slice(0, i))), new t(n, this.world, this.parent);
               } };t.addMethods(t, e);
         };e.exports = a;
      }, { "../../terms": 160 }], 190: [function (t, e, r) {
         "use strict";
         var n = { whitespace: !0, case: !0, numbers: !0, punctuation: !0, unicode: !0, contractions: !0 },
             i = { whitespace: function whitespace(t) {
               return t.terms().list.forEach(function (t, e) {
                  var r = t.terms[0];e > 0 ? r.whitespace.before = " " : 0 === e && (r.whitespace.before = ""), r.whitespace.after = "";
               }), t;
            }, case: function _case(t) {
               return t.list.forEach(function (t) {
                  t.terms.forEach(function (e, r) {
                     0 === r || e.tags.Person || e.tags.Place || e.tags.Organization || t.toLowerCase();
                  });
               }), t;
            }, numbers: function numbers(t) {
               return t.values().toNumber();
            }, punctuation: function punctuation(t) {
               return t.list.forEach(function (t) {
                  var e, r, n;for (t.terms[0]._text = t.terms[0]._text.replace(/^¿/, ""), e = 0; e < t.terms.length - 1; e++) {
                     r = t.terms[e], r._text = r._text.replace(/[:;,]$/, "");
                  }n = t.terms[t.terms.length - 1], n._text = n._text.replace(/\.+$/, "."), n._text = n._text.replace(/!+$/, "!"), n._text = n._text.replace(/\?+!?$/, "?");
               }), t;
            }, contractions: function contractions(t) {
               return t.contractions().expand();
            } },
             a = function a(t) {
            t.prototype.normalize = function (t) {
               var e = this;return t = t || n, Object.keys(t).forEach(function (t) {
                  void 0 !== i[t] && i[t](e);
               }), this;
            };
         };e.exports = a;
      }, {}], 191: [function (t, e, r) {
         "use strict";
         var n,
             i = t("./topk"),
             a = t("./offset"),
             o = t("./indexes"),
             s = { text: function text(t) {
               return t.list.reduce(function (t, e) {
                  return t += e.out("text");
               }, "");
            }, match: function match(t) {
               return t.list.reduce(function (t, e) {
                  return t += e.out("match");
               }, "");
            }, normal: function normal(t) {
               return t.list.map(function (t) {
                  var e,
                      r = t.out("normal"),
                      n = t.last();return n && (e = t.endPunctuation(), "." !== e && "!" !== e && "?" !== e || (r += e)), r;
               }).join(" ");
            }, root: function root(t) {
               return t.list.map(function (t) {
                  return t.out("root");
               }).join(" ");
            }, offsets: function offsets(t) {
               return a(t);
            }, index: function index(t) {
               return o(t);
            }, grid: function grid(t) {
               return t.list.reduce(function (t, e) {
                  return t += e.out("grid");
               }, "");
            }, color: function color(t) {
               return t.list.reduce(function (t, e) {
                  return t += e.out("color");
               }, "");
            }, array: function array(t) {
               return t.list.map(function (t) {
                  return t.out("normal");
               });
            }, csv: function csv(t) {
               return t.list.map(function (t) {
                  return t.out("csv");
               }).join("\n");
            }, newlines: function newlines(t) {
               return t.list.map(function (t) {
                  return t.out("newlines");
               }).join("\n");
            }, json: function json(t) {
               return t.list.reduce(function (t, e) {
                  var r = e.terms.map(function (t) {
                     return { text: t.text, normal: t.normal, tags: t.tag };
                  });return t.push(r), t;
               }, []);
            }, html: function t(e) {
               var t = e.list.reduce(function (t, e) {
                  var r = e.terms.reduce(function (t, e) {
                     return t += "\n    " + e.out("html");
                  }, "");return t += "\n  <span>" + r + "\n  </span>";
               }, "");return "<span> " + t + "\n</span>";
            }, terms: function terms(t) {
               var e = [];return t.list.forEach(function (t) {
                  t.terms.forEach(function (t) {
                     e.push({ text: t.text, normal: t.normal, tags: Object.keys(t.tags) });
                  });
               }), e;
            }, debug: function debug(t) {
               return console.log("===="), t.list.forEach(function (t) {
                  console.log("   --"), t.debug();
               }), t;
            }, topk: function topk(t) {
               return i(t);
            } };s.plaintext = s.text, s.normalized = s.normal, s.colors = s.color, s.tags = s.terms, s.offset = s.offsets, s.idexes = s.index, s.frequency = s.topk, s.freq = s.topk, s.arr = s.array, n = function n(t) {
            return t.prototype.out = function (t) {
               return s[t] ? s[t](this) : s.text(this);
            }, t.prototype.debug = function () {
               return s.debug(this);
            }, t;
         }, e.exports = n;
      }, { "./indexes": 192, "./offset": 193, "./topk": 194 }], 192: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e,
                r,
                n = [],
                i = {};return t.terms().list.forEach(function (t) {
               i[t.terms[0].uid] = !0;
            }), e = 0, r = t.all(), r.list.forEach(function (t, r) {
               t.terms.forEach(function (t, a) {
                  void 0 !== i[t.uid] && n.push({ text: t.text, normal: t.normal, term: e, sentence: r, sentenceTerm: a }), e += 1;
               });
            }), n;
         };e.exports = n;
      }, {}], 193: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r,
                n,
                i,
                a = 0;for (r = 0; r < t.list.length; r++) {
               for (n = 0; n < t.list[r].terms.length; n++) {
                  if (i = t.list[r].terms[n], i.uid === e.uid) return a;a += i.whitespace.before.length + i._text.length + i.whitespace.after.length;
               }
            }return null;
         },
             i = function i(t) {
            var e,
                r,
                n,
                i = t.terms;if (i.length <= 2) return t.out("normal");for (e = i[0].normal, r = 1; r < i.length - 1; r++) {
               n = i[r], e += n.whitespace.before + n.text + n.whitespace.after;
            }return e += " " + i[t.terms.length - 1].normal;
         },
             a = function a(t) {
            var e = t.all();return t.list.map(function (t) {
               var r,
                   a,
                   o,
                   s,
                   u,
                   l,
                   c = [];for (r = 0; r < t.terms.length; r++) {
                  c.push(t.terms[r].normal);
               }return a = i(t), o = t.out("text"), s = n(e, t.terms[0]), u = t.terms[0].whitespace.before, l = s + u.length, { text: o, normal: t.out("normal"), offset: s, length: o.length, wordStart: l, wordEnd: l + a.length };
            });
         };e.exports = a;
      }, {}], 194: [function (t, e, r) {
         "use strict";
         var n = function n(t, e) {
            var r,
                n = {};return t.list.forEach(function (t) {
               var e = t.out("root");n[e] = n[e] || 0, n[e] += 1;
            }), r = [], Object.keys(n).forEach(function (t) {
               r.push({ normal: t, count: n[t] });
            }), r.forEach(function (e) {
               e.percent = parseFloat((e.count / t.list.length * 100).toFixed(2));
            }), r = r.sort(function (t, e) {
               return t.count > e.count ? -1 : 1;
            }), e && (r = r.splice(0, e)), r;
         };e.exports = n;
      }, {}], 195: [function (t, e, r) {
         "use strict";
         var n = t("./methods"),
             i = function i(t) {
            var e = { sort: function sort(e) {
                  return e = e || "alphabetical", e = e.toLowerCase(), e && "alpha" !== e && "alphabetical" !== e ? "chron" === e || "chronological" === e ? n.chron(this, t) : "length" === e ? n.lengthFn(this, t) : "freq" === e || "frequency" === e ? n.freq(this, t) : "wordcount" === e ? n.wordCount(this, t) : this : n.alpha(this, t);
               }, reverse: function reverse() {
                  return this.list = this.list.reverse(), this;
               }, unique: function unique() {
                  var t = {};return this.list = this.list.filter(function (e) {
                     var r = e.out("root");return !t.hasOwnProperty(r) && (t[r] = !0, !0);
                  }), this;
               } };return t.addMethods(t, e), t;
         };e.exports = i;
      }, { "./methods": 196 }], 196: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t = t.sort(function (t, e) {
               return t.index > e.index ? 1 : t.index === e.index ? 0 : -1;
            }), t.map(function (t) {
               return t.ts;
            });
         };r.alpha = function (t) {
            return t.list.sort(function (t, e) {
               if (t === e) return 0;if (t.terms[0] && e.terms[0]) {
                  if (t.terms[0].root > e.terms[0].root) return 1;if (t.terms[0].root < e.terms[0].root) return -1;
               }return t.out("root") > e.out("root") ? 1 : -1;
            }), t;
         }, r.chron = function (t) {
            var e = t.list.map(function (t) {
               return { ts: t, index: t.termIndex() };
            });return t.list = n(e), t;
         }, r.lengthFn = function (t) {
            var e = t.list.map(function (t) {
               return { ts: t, index: t.chars() };
            });return t.list = n(e).reverse(), t;
         }, r.wordCount = function (t) {
            var e = t.list.map(function (t) {
               return { ts: t, index: t.length };
            });return t.list = n(e), t;
         }, r.freq = function (t) {
            var e,
                r = {};return t.list.forEach(function (t) {
               var e = t.out("root");r[e] = r[e] || 0, r[e] += 1;
            }), e = t.list.map(function (t) {
               var e = r[t.out("root")] || 0;return { ts: t, index: e * -1 };
            }), t.list = n(e), t;
         };
      }, {}], 197: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = { splitAfter: function splitAfter(t, e) {
                  var r = [];return this.list.forEach(function (n) {
                     n.splitAfter(t, e).forEach(function (t) {
                        r.push(t);
                     });
                  }), this.list = r, this;
               }, splitBefore: function splitBefore(t, e) {
                  var r = [];return this.list.forEach(function (n) {
                     n.splitBefore(t, e).forEach(function (t) {
                        r.push(t);
                     });
                  }), this.list = r, this;
               }, splitOn: function splitOn(t, e) {
                  var r = [];return this.list.forEach(function (n) {
                     n.splitOn(t, e).forEach(function (t) {
                        r.push(t);
                     });
                  }), this.list = r, this;
               } };return t.addMethods(t, e), t;
         };e.exports = n;
      }, {}], 198: [function (t, e, r) {
         "use strict";
         e.exports = t("../paths");
      }, { "../paths": 8 }], 199: [function (t, e, r) {
         "use strict";
         var n = t("../subset/sentences/isQuestion"),
             i = function i(t) {
            var e = { clauses: function clauses(t) {
                  var e = this.splitAfter("#ClauseEnd");return "number" == typeof t && (e = e.get(t)), e;
               }, hashTags: function hashTags(t) {
                  var e = this.match("#HashTag").terms();return "number" == typeof t && (e = e.get(t)), e;
               }, organizations: function organizations(t) {
                  var e = this.splitAfter("#Comma");return e = e.match("#Organization+"), "number" == typeof t && (e = e.get(t)), e;
               }, phoneNumbers: function phoneNumbers(t) {
                  var e = this.splitAfter("#Comma");return e = e.match("#PhoneNumber+"), "number" == typeof t && (e = e.get(t)), e;
               }, places: function places(t) {
                  var e = this.splitAfter("#Comma");return e = e.match("#Place+"), "number" == typeof t && (e = e.get(t)), e;
               }, quotations: function quotations(t) {
                  var e = this.match("#Quotation+");return "number" == typeof t && (e = e.get(t)), e;
               }, topics: function topics(t) {
                  var e = this.clauses(),
                      r = e.people();return r.concat(e.places()), r.concat(e.organizations()), r.sort("chronological"), "number" == typeof t && (r = r.get(t)), r;
               }, urls: function urls(t) {
                  var e = this.match("#Url");return "number" == typeof t && (e = e.get(t)), e;
               }, questions: function questions(e) {
                  var r,
                      i = this.all();return "number" == typeof e && (i = i.get(e)), r = i.list.filter(function (t) {
                     return n(t);
                  }), new t(r, this.world, this.parent);
               }, statements: function statements(e) {
                  var r,
                      i = this.all();return "number" == typeof e && (i = i.get(e)), r = i.list.filter(function (t) {
                     return n(t) === !1;
                  }), new t(r, this.world, this.parent);
               } };return Object.keys(e).forEach(function (r) {
               t.prototype[r] = e[r];
            }), t;
         };e.exports = i;
      }, { "../subset/sentences/isQuestion": 51 }], 200: [function (t, e, r) {
         "use strict";
         var n = Object.keys(t("../world/more-data/abbreviations")),
             i = RegExp("\\b(" + n.join("|") + ")[.!?] ?$", "i"),
             a = RegExp("[ |.][A-Z].?( *)?$", "i"),
             o = RegExp("\\.\\.+( +)?$"),
             s = function s(t) {
            var e,
                r,
                n,
                i = [],
                a = t.split(/(\n+)/);for (e = 0; e < a.length; e++) {
               for (r = a[e].split(/(\S.+?[.!?])(?=\s+|$)/g), n = 0; n < r.length; n++) {
                  i.push(r[n]);
               }
            }return i;
         },
             u = function u(t) {
            var e, r, n, u, l, c, h;if (t = t || "", t = "" + t, e = [], r = [], !t || "string" != typeof t || /\S/.test(t) === !1) return e;for (n = s(t), u = 0; u < n.length; u++) {
               if (l = n[u], void 0 !== l && "" !== l) {
                  if (/\S/.test(l) === !1) {
                     if (r[r.length - 1]) {
                        r[r.length - 1] += l;continue;
                     }if (n[u + 1]) {
                        n[u + 1] = l + n[u + 1];continue;
                     }
                  }r.push(l);
               }
            }for (c = 0; c < r.length; c++) {
               h = r[c], void 0 !== r[c + 1] && (i.test(h) || a.test(h) || o.test(h)) ? r[c + 1] = h + (r[c + 1] || "") : h && h.length > 0 && (e.push(h), r[c] = "");
            }return 0 === e.length ? [t] : e;
         };e.exports = u;
      }, { "../world/more-data/abbreviations": 209 }], 201: [function (t, e, r) {
         "use strict";
         e.exports = '{"words":"Adjective¦0:75;1:7K;2:7Q;3:7J;4:7C;5:5Y;6:5B;7:49;8:4A;9:7H;A:61;B:70;C:5W;D:6Z;a6Ib63c5Pd55e4Sf48g3Zh3Oi33j31k30l2Pm2En25o1Pp19quack,r0Zs0Ft08uPvMwEyear6;arp0eIholeHiGoE;man6oEu6B;d6Dzy;despr74s5E;!sa8;eFlEste24;co1Gl o4K;!k6;aFiEola4B;b7Sce versa,ol53;ca2gabo62nilla;ltVnIpFrb58su4tterE;!moD; f32b1MpFsEti1F;ca8et,ide dLtairs;er,i3L;aObeco6Qconvin25deLeKfair,ivers4knJprecedXrHsFwE;iel1Yritt5Y;i1TuE;pervis0specti3;eEu6;cognKgul6Gl6G;own;ndi3v5Sxpect0;cid0rE;!grou5NsE;iz0tood;b8ppeaKssu6FuthorE;iz0;i22ra;aIeGhough4NoFrE;i1oubl0;geth5p,rpB;en5PlEm4Yrr2Sst0;li3;boo,lEn;ent0;aWcVeThSiQmug,nobbi3DoOpNqueami3DtIuEymb63;bGi gener53pErprisi3;erEre0J;! dup5b,i27;du0seq4S;anda6TeHi0NrEy37;aightEip0; fEfE;or5A;adfaDreotyp0;aCec2Eir1HlendBot on; call0le,mb5phist1VrEu0Vvi40;dBry;gnifica2nE;ceCg8;am2Oe5ocki3ut;cEda1em6lfi2Xni1Upa68re7;o1Er3U;at57ient26reec57;cr0me,ns serif;aLeHiFoE;buDtt4TuRy4;ghtEv4;!-27fA;ar,bel,condi1du62fres51lGpublic3UsEta2C;is46oE;lu1na2;e1Cuc44;bBciE;al,st;aOeMicayu7lacBopuliDrFuE;bl59mp0;eIiFoE;!b08fu5Hmi31p5;mFor,sEva1;ti7;a4Ve;ci5DmE;a0Gi5J;ac20rEti1;fe9ma2Uplexi3v33;rEst;allelGtE;-tiEi4;me;!ed;bPffNkMld fashion0nLpKrg1Gth5utJvE;al,erE;!aGniFt,wE;eiErouE;ght;ll;do0Uer,g2Msi46;en,posi1; boa5Gg2Kli7;!ay; gua5EbEli7;eat;eGsE;cEer0Gole1;e7uC;d2Sse;ak0eLiKoEua4P;nIrFtE;ab8;thE;!eE;rn;chala2descri50stop;ght6;arby,cessa3Xighbor6xt;aMeKiHoEultip8;bi8derFlEnth6ot,st;dy;a1n;nEx0;iaEor;tuC;di4FnaEre;ci3;cEgenta,in,j02keshift,le,mmoth,ny,sculi7;abCho;aNeIiFoEu13;uti12vi3;mFteraE;l,te;it0;ftHgEth4;al,eFitiE;ma1;nda3D;!-0B;nguBst,tt5;ap1Sind6no09;agg0uE;niNstifi0veni8;de4gno4Clleg4mRnGpso 1VrE;a1releE;va2; MaLbr0corKdIfluenSiSnHsGtE;a9en3MoxE;ic37;a7i2S;a1er,oce2;iFoE;or;re9;deq3Kppr2Z;fEsitu,vitro;ro2;mIpE;arGerfe9oErop5;li1rtE;a2ed;ti4;eEi0R;d2Rn36;aJelIiGoEumdr3C;neDok0rrEs08ur6;if2T;ghfalut1OspE;an2R;liZpfA;lHnGrE;d06roE;wi3;dy,gi3;f,low0;ainfAener2Kiga23lLoKraHuE;aFilEng ho;ty;rd0;cFtE;efAis;efA;ne,od;ea2Dob4;aUeOiMlLoGrE;a1TeEoz1K;e2Dq11tfA;oGrE; keeps,eEm5tuna1;g04ign;liE;sh;ag2Zue2;nEx0;al,i1;dImFrE;ti8;a8ini7;ne;le; up;bl0i2l24r Eux,vori1;oEreac1E;ff;aNfficie2lMmiLnJre9there4veIxE;a9cess,peGtraFuE;be2Ll0G;!va1D;ct0rt;n,ryday; Ecouragi3tiC;rou1sui1;ne2;abo22dOe17i1;g5sE;t,ygE;oi3;aUeMiGoErea15ue;mina2ne,ubE;le,tfA;dact1Bfficu1OsFvE;er1K;creGeas0gruntl0honeDordFtE;a2ress0;er6;et; KadpJfIgene1PliGrang0spe1PtFvoE;ut;ail0ermin0;be1Mca1ghE;tfA;ia2;an;facto;i6magEngeroYs0I;ed,i3;ly;ertaQhief,ivil,oGrE;aEowd0u0H;mp0v02z0;loMmKnFoi3rrEve0P;e9u1I;cre1grHsGtE;emEra0F;po0D;ta2;ue2;mer08pleE;te,x;ni4ss4;in;aPeKizarClIoFrE;and new,isk,okP;gFna fiWttom,urgeoE;is;us;ank,iI;re;autifAhiGlov0nFst,tt5yoG;er;eUt;nd;ul;ckFnkru0WrrE;en;!wards; priori,b0Mc0Jd09fraBg04h03lYma05ntiquXpTrNsLttracti06utheKvHwE;aFkE;wa0T;ke,re;ant garFerE;age;de;ntU;leep,tonisE;hi3;ab,bitHroGtiE;fiE;ci4;ga2;raE;ry;pEt;are2etiOrE;oprE;ia1;at0;arHcohFeEiLl,oof;rt;olE;ic;mi3;ead;ainDgressiFoniE;zi3;ve;st;id; LeJuIvE;aFerE;se;nc0;ed;lt;pt,qE;ua1;hoc,infinitE;um;cuFtu4u1;al;ra1;erOlNoLruKsFuE;nda2;e2oFtra9;ct;lu1rbi3;ng;te;pt;aEve;rd;aze,e;ra2;nt|Superlative¦earlier|PresentTense¦sounds|Value¦a few|Noun¦aLbIcHdEengineKfCgardenKhBinstructRjournalNlawyKmAn9o8p5r3s1t0;echnEherapM;ailPcientLoldiIu0;pervMrgeon;e0oofG;ceptionIsearE;hotographElumbEoli1r0sychologH;actitionDogrammD;cem8t7;fficBpeH;o doubt,urse;echanic,inist9us4;airdress8ere,ousekeep8;arm7ire0;fight6m2;eputy,iet0;ici0;an;arpent2lerk;ricklay1ut0;ch0;er;ccoun6d2ge7r0ssis6ttenda7;chitect,t0;ist;minist1v0;is1;rat0;or;ta0;nt|Copula¦a1is,w0;as,ere;m,re|Date¦daylight2eom,standard2to0yesterd1;d0morrow;ay; time|Condition¦if,unless|Preposition¦\'o,-,aKbHcGdFexcept,from,inEmidPnotwithstandiQoCpRqua,sBt6u3vi2w0;/o,hereMith0;!in,oQ;a,s-a-vis;n1p0;!on;like,til;h1ill,o0;!wards;an,r0;ough0u;!oH;ans,ince,o that;\',f0n1ut;!f;!to;espite,own,u3;hez,irca;ar1e0y;low,sides,tween;ri6;\',bo7cross,ft6lo5m3propos,round,s1t0;!op;! long 0;as;id0ong0;!st;ng;er;ut|PastTense¦be2came,d1had,mea0sa1taken,we0;nt;id;en,gan|Gerund¦accord0be0develop0go0result0stain0;ing|Negative¦n0;ever,o0;!n,t|QuestionWord¦how3wh0;at,e1ich,o0y;!m,se;n,re; come,\'s|Singular¦aWbScOdKeIfHgGhCjelXkitty,lBm9n8o7p5r4s2t0us dollQ;alWh0ic,ragedy;ere,iT;ky,tu0uper bowl,ystV;dFff;alSoom;a0roblSurpo8;rt,tC;cean,thers;othiMumbE;eetiLo0;del,nopoM;iLunch;ead start,o0;lJme1u0;se;! run;laci6od,rand slam,ulG;amiFly,olFriend,undiD;conomy,gg,ner3v0xampB;ent;eath,inn2o0;cument5g0iBlBor;gy;er;an2eili6hocolate,i0ottage,redit card;ty,vil w0;ar;ary;anki2el4o0reakfast;dy,tt0;le;ng;d homin1l0noma0;ly;em|Infinitive¦0:6R;1:75;2:72;3:58;4:6X;5:73;6:66;7:6E;8:71;9:6W;A:6P;B:6Z;C:6K;D:61;a6Hb60c53d4Be3Wf3Jg3Ch35i2Tj2Rk2Nl2Em25n22o1Yp1Jques3Kr0Vs02tTuPvMwFyE;awn,ield;aHe1Yhist7iGoEre68;nd0rE;k,ry;n,pe,sh,th0;lk,nFrEsh,tCve;n,ra7C;d0t;aFiEo8;ew,s9;l6Iry;nEpli42r2se;dEi8lo5X;erEo;go,mi59;aLeKhIie,oHrFuEwi4;ne,rn;aEeat,i5Su4y;de,in,nsf0p,v5G;r31uC;ank,rE;eat2Pi5;nd,st;ke,lk,rg5Gs8;a05c02eYhVi4Ckip,lUmTneSo4YpPtIuEwitC;bm9ck,ff0gge4ppFrEspe6;ge,pri1rou4Vvi5;ly,oE;rt,se;aJeIoHrFuE;dy,mb7;aDeEi5;ngth2Ess,tC;p,re;m,p;in,ke,r0Sy;iFla55oil,rinE;g,k7;n,t;ak,e36;a51e1Vi7o52;am,e1Kip;aFiv0oE;ck,ut;re,ve;arCeGle6nFr5tE;!t7;d,se;k,m;aFo3rE;atCew;le,re;il,ve;aZeGisk,oFuE;b,in,le,n,sh;am,ll;aVcUduAfTgSje6lPmOnt,pMquLsItHvEwa5M;eEiew,o4L;al,l,rE;se,t;aDi3u3T;eFi4o3XtE;!o3ri6;mb7nt,r5;e4i3;air,lEo3Trese5P;aAy;aDemb0i3Qo5;aFeEi5y;a1nt;te,x;a57r44;act1Ule6u1;a0Yei5k5Jogni28yc7;ch,li27s5I;i1nE;ge,k;aRerQiPlNoLrGuE;b1Xll,mp,rEsh,t;cha1s4L;ai1eHi5AoE;cFduAgreBhib9mi1te4vE;e,i2Q;eBlaim;di6pa3ss,ve56;i55p,rtr3YsEur;e,t;a3MuE;g,n2;ck,le;fo2Ym9si4;ck,i4Zrt4Hss,u1y;bGccur,ff0pera8utweFverEwe;co42lap,ta3Lu1whelm;igh;ser5taD;eFotE;e,iA;ed,gle6;aJeIiGoFuE;ltip3Ard0;nit11ve;nErr10;d,g7us;asu3lt,n0Nr2ssa2;intaDke d3Vna2rFtE;ch,t0;k34ry;aKeJiGoEu1B;aEck,ok,ve;d,n;ft,ke,m9nFstEve;!en;e,k;a2Bc0Et;b0Nck,uE;gh,nC;eGiFnoE;ck,w;ck,ll,ss;ep;am,oDuE;d2mp;gno3mNnEss3D;cLdica8flu0JhKsHterGvE;eEol5;nt,st;a6fe3;i4tE;aEru6;ll;ab9ib9;lu1Cr1A;agi1YpE;o1Wro5;aIeGi3oFuE;nt,rry;ld fa4n01pe,st;aElp;d,t;nd7ppErm,te;en;aJet,loBoIrGuE;arEeBi11;ant35d;aEip,ow,umb7;b,sp;es,ve1E;in,th0ze;aOeaNiLlJoGracFuncE;ti3E;tu3;cus,lFrE;ce,eca4m,s2W;d,l1Y;a1UoE;at,od,w;gu3lEni1Sx;e,l;r,tu3;il,ll,vE;or;a0Zcho,d9le6mPnMstKvalua8xE;a07cIerHi4pEte12;a11eElaDo12reB;ct,riE;enA;ci1t;el,han2;abEima8;li1F;ab7couVdFga2hanAj01riCsu3t0vE;isi2Sy;!u3;body,er2pE;hasiEow0;ze;a04eSiKoJrFuE;mp;aGeFiEop;ft;am,ss;g,in;!d2ubt;e,ff0p,re6sFvE;e,iVorA;aHcEli10miBpl15tingui0Z;oEuB;uEv0;ra2;gr1VppE;ear,ro5;al,cLem,fJliv0ma09ny,pIsFterE;mi0A;cribe,er5iFtrE;oy;gn,re;a05e04i6os9;eEi05y;at,ct;iGlFrE;ea1;a3i01;de;ma2nAre,te;a07e06h03i8l00oHrEut;aFeEoBu0Fy;a8d9;ck,ve;llVmPnFok,py,uEv0;gh,nt;ceMdu6fKsItGvE;eEinA;rt,y;aDin0UrE;a4ibu8ol;iEtitu8;d0st;iEoEro1G;rm;rn;biIe,foHmaGpE;a3laD;re;nd;rt;ne;ap1e6;aFiEo1;ng,p;im,w;aFeE;at,ck,w;llen2n2r2;a1nt0;ll,ncFrEt0u1;e,ry;el;aSeOloNoLrIuE;dgGlFrE;n,y;ly;et;aFuE;sh;ke;a4mb,o4rrEth0unA;ow;ck;ar,coQgDlFnef9trE;ay;ie5ong;in;nEse;!g;band0Hc09d04ffo03gr02id,lZmu1nWppRrOsIttEvoid,wa9;acGeFra6;ct;m0Dnd;h,k;k,sE;eGiFocia8uE;me;gn,st;mb7rt;le;chFgEri5;ue;!i5;eaHlGroE;aCve;ch;aud,y;l,r;nounAsw0tE;icipa8;ce;lFt0;er;e2ow;ee;rd;dGju4m9oP;it;st;!reB;ss;cHhie5knowled2tiva8;te;ge;ve;eGouFu1;se;nt;pt;on|Honorific¦ayatullah,c8d7excellency,general,king,l5mayDp2queen,r1s0;ecretary,ultA;abbi,everend;astAr0;eside2ince0ofess9;!ss;ady,ieutena0ord;nt;oct5utchess;aptain,hance3o0;mmander,ngress0unci2;m0wom0;an;ll0;or|SportsTeam¦0:1M;1:1T;2:1U;a1Rb1Dc0Zd0Qfc dallas,g0Nhouston 0Mindiana0Ljacksonville jagua0k0Il0Fm02newVoRpKqueens parkJrIsAt5utah jazz,vancouver whitecaps,w3yY;ashington 3est ham0Xh16;natio21redski1wizar12;ampa bay 6e5o3;ronto 3ttenham hotspur;blu1Hrapto0;nnessee tita1xasD;buccanee0ra1G;a7eattle 5heffield0Qporting kansas13t3;. louis 3oke12;c1Srams;mari02s3;eah1IounI;cramento Sn 3;antonio spu0diego 3francisco gi0Bjose earthquak2;char0EpaB;eal salt lake,o04; ran0C;a8h5ittsburgh 4ortland t3;imbe0rail blaze0;pirat2steele0;il3oenix su1;adelphia 3li2;eagl2philNunE;dr2;akland 4klahoma city thunder,r3;i10lando magic;athle0Trai3;de0; 3castle05;england 6orleans 5york 3;city fc,giUje0Lkn02me0Lred bul19y3;anke2;pelica1sain0J;patrio0Irevolut3;ion;aBe9i3ontreal impact;ami 7lwaukee b6nnesota 3;t4u0Rvi3;kings;imberwolv2wi1;re0Cuc0W;dolphi1heat,marli1;mphis grizz3ts;li2;nchester 5r3vN;i3li1;ne0;c00u0H;a4eicesterYos angeles 3;clippe0dodFlaA; galaxy,ke0;ansas city 3nH;chiefs,ro3;ya0M; pace0polis colX;astr0Edynamo,rockeWtexa1;i4olden state warrio0reen bay pac3;ke0;anT;.c.Aallas 7e3i0Cod5;nver 5troit 3;lio1pisto1ti3;ge0;bronc06nuggeO;cowboUmav3;er3;ic06; uX;arCelNh8incinnati 6leveland 5ol3;orado r3umbus crew sc;api5ocki2;brow1cavalie0india1;benga03re3;ds;arlotte horCicago 3;b4cubs,fire,wh3;iteE;ea0ulY;di3olina panthe0;ff3naW; c3;ity;altimore ElAoston 7r3uffalo bilT;av2e5ooklyn 3;ne3;ts;we0;cel4red3; sox;tics;ackburn rove0u3;e ja3;ys;rs;ori3rave1;ol2;rizona Ast8tlanta 3;brav2falco1h4u3;nited;aw9;ns;es;on villa,r3;os;c5di3;amondbac3;ks;ardi3;na3;ls|Uncountable¦0:1C;a1Hb1Bc12e0Wf0Qg0Mh0Gi0Dj0Cknowled1Gl07mYnXoWpRrOsCt8vi7w1;a5ea0Ai4o1;o2rld1;! seI;d,l;ldlife,ne;rmth,t0;neg0Xol08;e3hund0ime,oothpaste,r1una;affRou1;ble,sers,t;a,nnis;aAcene07e9h8il7now,o6p3te2u1;g0Rnshi0L;am,el;ace2e1;ciOed;!c12;ap,cc0ft0B;k,v0;eep,opp0O;riJ;d07fe0Wl1nd;m0Qt;ain,e1i0W;c1laxa0Csearch;ogni0Brea0B;a4e2hys0Elast9o1ress00;rk,w0;a1pp0trol;ce,nR;p0tiK;il,xygen;ews,oi0C;a7ea5i4o3u1;mps,s1;ic;nHo08;lk,st;sl1t;es;chine1il,themat00; learn02ry;aught0e3i2u1;ck,g07;ghtnZqu0CteratI;a1isH;th0;ewel7usti08;ce,mp1nformaOtself;ati1ortan06;en05;a4isto3o1;ck1mework,n1spitali01;ey;ry;ir,lib1ppi9;ut;o2r1um,ymnastJ;a7ound;l1ssip;d,f;i5lour,o2ruit,urnit1;ure;od,rgive1wl;ne1;ss;c6sh;conom9duca5lectriciMn3quip4th9very1;body,o1thB;ne;joy1tertain1;ment;tiC;a8elcius,h4iv3loth6o1urrency;al,ffee,ld w1nfusiAttA;ar;ics;aos,e1;e2w1;ing;se;ke,sh;a3eef,is2lood,read,utt0;er;on;g1ss;ga1;ge;c4dvi3irc2mnes1rt;ty;raft;ce;id|Unit¦0:17;a12b10c0Md0Le0Jf0Fg0Bh08in07joule0k01lZmOnNoMpIqHsqCt7volts,w6y4z3°2µ1;g,s;c,f,n;b,e2;a0Lb,d0Rears old,o1;tt0F;att0b;able4b3e2on1sp;!ne0;a2r0B;!l,sp;spo03; ft,uare 1;c0Gd0Ff3i0Dkilo0Hm1ya0C;e0Kil1;e0li0F;eet0o0B;t,uart0;a3e2i1ou0Nt;c0Knt0;rcent,t00;!scals;hms,uVz;an0GewtR;/s,b,e7g,i3l,m2p1²,³;h,s;!²;!/h,cro3l1;e1li05;! DsC²;g05s0A;gPter1;! 2s1;! 1;per second;b,iZm,u1x;men0x0;b,elvin0g,ilo2m1nQ;!/h,ph,²;byYgWmeter1;! 2s1;! 1;per hour;²,³;e1g,z;ct1rtz0;aWogP;al2b,ig9ra1;in0m0;!l1;on0;a3emtOl1tG; oz,uid ou1;nce0;hrenheit0rad0;b,x1;abyH;eciCg,l,mA;arat0eAg,l,m9oulomb0u1;bic 1p0;c5d4fo3i2meAya1;rd0;nch0;ot0;eci2;enti1;me4;!²,³;lsius0nti1;g2li1me1;ter0;ram0;bl,y1;te0;c4tt1;os1;eco1;nd0;re0;!s|Pronoun¦\'em,elle,h4i3me,ourselves,she5th1us,we,you0;!rself;e0ou;m,y;!l,t;e0im;!\'s|Organization¦0:42;1:40;a38b2Pc29d21e1Yf1Ug1Mh1Hi1Ej1Ak18l14m0Tn0Go0Dp07qu06rZsStFuBv8w3y2;amaha,m0Youtu2Rw0Y;a4e2orld trade organizati1;lls fargo,st2;fie23inghou18;l2rner br3B;-m13gree30l street journ25m13;an halOeriz1isa,o2;dafo2Gl2;kswagMvo;bs,n3ps,s2;a tod2Qps;es33i2;lev2Wted natio2T; mobi2Jaco beQd bNeBgi fridaAh4im horto2Smz,o2witt2V;shiba,y2;ota,s r Z;e 2in lizzy;b4carpen31daily ma2Vguess w3holli0rolling st1Ns2w3;mashing pumpki2Nuprem0;ho;ea2lack eyed pe3Dyrds;ch bo2tl0;ys;l3s2;co,la m14;efoni09us;a7e5ieme2Fo3pice gir6ta2ubaru;rbucks,to2L;ny,undgard2;en;a2Px pisto2;ls;few24insbu25msu1W;.e.m.,adiohead,b7e4oyal 2yan2V;b2dutch she5;ank;/max,aders dige1Ed 2vl1;bu2c1Thot chili peppe2Ilobst27;ll;c,s;ant2Tizno2D;an6bs,e4fiz23hilip morrCi3r2;emier25octer & gamb1Qudenti14;nk floyd,zza hut;psi26tro2uge0A;br2Ochina,n2O; 3ason1Wda2E;ld navy,pec,range juli3xf2;am;us;aBbAe6fl,h5i4o2sa,wa;kia,tre dame,vart2;is;ke,ntendo,ss0L;l,s;stl4tflix,w2; 2sweek;kids on the block,york0A;e,é;a,c;nd1Rs3t2;ional aca2Co,we0P;a,cZd0N;aBcdonaldAe6i4lb,o2tv,yspace;b1Knsanto,ody blu0t2;ley crue,or0N;crosoft,t2;as,subisP;dica4rcedes3talli2;ca;!-benz;id,re;\'s,s;c\'s milk,tt11z1V;\'ore08a4e2g,ittle caesa1H;novo,x2;is,mark; pres6-z-boy;atv,fc,kk,m2od1H;art;iffy lu0Jo4pmorgan2sa;! cha2;se;hnson & johns1y d1O;bm,hop,n2tv;g,te2;l,rpol; & m,asbro,ewlett-packaSi4o2sbc,yundai;me dep2n1G;ot;tac2zbollah;hi;eneral 7hq,l6o3reen d0Gu2;cci,ns n ros0;ldman sachs,o2;dye2g09;ar;axo smith kliYencore;electr0Gm2;oto0S;a4bi,da,edex,i2leetwood mac,oFrito-l08;at,nancial2restoU; tim0;cebook,nnie mae;b04sa,u,xxon2; m2m2;ob0E;aiml09e6isney,o4u2;nkin donuts,po0Uran dur2;an;j,w j2;on0;a,f leppa3ll,peche mode,r spiegYstiny\'s chi2;ld;rd;aFbc,hCiAnn,o4r2;aigsli6eedence clearwater reviv2;al;ca c6l5m2o09st04;ca3p2;aq;st;dplMgate;ola;a,sco2tigroup;! systems;ev3i2;ck fil-a,na daily;r1y;dbury,pital o2rl\'s jr;ne;aGbc,eCfAl6mw,ni,o2p;ei4mbardiKston 2;glo2pizza;be;ng;ack & deckGo3ue c2;roX;ckbuster video,omingda2;le; g2g2;oodriN;cht4e ge0n & jer3rkshire hathaw2;ay;ryH;el;nana republ4s2xt6y6;f,kin robbi2;ns;ic;bXcSdidRerosmith,ig,lLmFnheuser-busEol,ppleAr7s4t&t,v3y2;er;is,on;hland2sociated G; o2;il;by5g3m2;co;os; compu3bee2;\'s;te2;rs;ch;c,d,erican4t2;!r2;ak; ex2;pre2;ss; 5catel3t2;air;!-luce2;nt;jazeera,qae2;da;as;/dc,a4er,t2;ivisi1;on;demy of scienc0;es;ba,c|Demonym¦0:16;1:13;a0Wb0Nc0Cd0Ae09f07g04h02iYjVkTlPmLnIomHpDqatari,rBs7t5u4v3wel0Rz2;am0Fimbabwe0;enezuel0ietnam0H;g9krai1;aiwThai,rinida0Iu2;ni0Qrkmen;a4cot0Ke3ingapoOlovak,oma0Tpa05udRw2y0X;edi0Kiss;negal0Br08;mo0uU;o6us0Lw2;and0;a3eru0Hhilipp0Po2;li0Ertugu06;kist3lesti1na2raguay0;ma1;ani;amiZi2orweP;caragu0geri2;an,en;a3ex0Mo2;ngo0Erocc0;cedo1la2;gasy,y08;a4eb9i2;b2thua1;e0Dy0;o,t02;azakh,eny0o2uwaiti;re0;a2orda1;ma0Bp2;anN;celandic,nd4r2sraeli,ta02vo06;a2iT;ni0qi;i0oneV;aiDin2ondur0unN;di;amDe2hanai0reek,uatemal0;or2rm0;gi0;i2ren7;lipino,n4;cuadoVgyp6ngliJsto1thiopi0urope0;a2ominXut4;niH;a9h6o4roa3ub0ze2;ch;ti0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el8o6r3ul2;gaG;aziBi2;ti2;sh;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;gent2me1;ine;ba1ge2;ri0;ni0;gh0r2;ic0;an|Region¦a21b1Tc1Jd1Ees1Df1Ag13h10i0Xj0Vk0Tl0Qm0FnZoXpSqPrMsDtAut9v5w2y0zacatec23;o05u0;cat19kZ;a0est vir4isconsin,yomi15;rwick1Rshington0;! dc;er2i0;cto1Jr0;gin1S;acruz,mont;ah,tar pradesh;a1e0laxca1Dusca9;nnessee,x1R;bas0Jmaulip1QsmI;a5i3o1taf0Nu0ylh13;ffUrrZs0Y;me10no1Auth 0;cRdQ;ber1Ic0naloa;hu0Sily;n1skatchew0Rxo0;ny; luis potosi,ta catari1I;a0hode6;j0ngp01;asth0Mshahi;inghai,u0;e0intana roo;bec,ensVreta0D;ara3e1rince edward0; isT;i,nnsylv0rnambu01;an14;!na;axa0Ndisha,h0klaho1Bntar0reg3x03;io;ayarit,eAo2u0;evo le0nav0L;on;r0tt0Rva scot0X;f5mandy,th0; 0ampton0Q;c2d1yo0;rk0O;ako0Y;aroli0V;olk;bras0Xva01w0; 1foundland0;! and labrador;brunswick,hamp0Hjers0mexiIyork state;ey;a5i1o0;nta0Nrelos;ch2dlanAn1ss0;issippi,ouri;as geraFneso0M;igQoacQ;dhya,harasht04ine,ni2r0ssachusetts;anhao,y0;land;p0toba;ur;anca04e0incoln04ouis7;e0iH;ds;a0entucky,hul0A;ns08rnata0Dshmir;alis0iangxi;co;daho,llino1nd0owa;ia05;is;a1ert0idalEunA;fordT;mpSwaii;ansu,eorgWlou5u0;a1erre0izhou,jarat;ro;deloupe,n0;ajuato,gdo0;ng;cesterL;lori1uji0;an;da;sex;e3o1uran0;go;rs0;et;lawaDrbyC;a7ea6hi5o0umbrG;ahui3l2nnectic1rsi0ventry;ca;ut;iLorado;la;apDhuahua;ra;l7m0;bridge2peche;a4r3uck0;ingham0;shi0;re;emen,itish columb2;h1ja cal0sque,var1;iforn0;ia;guascalientes,l3r0;izo1kans0;as;na;a1ber0;ta;ba1s0;ka;ma|Possessive¦anyAh5its,m3noCo1sometBthe0yo1;ir1mselves;ur0;!s;i8y0;!se4;er1i0;mse2s;!s0;!e0;lf;o1t0;hing;ne|Currency¦$,aud,bRcPdKeurJfIgbp,hkd,inr,jpy,kGlEp8r7s3usd,x2y1z0¢,£,¥,ден,лв,руб,฿,₡,₨,€,₭,﷼;lotyRł;en,uanQ;af,of;h0t5;e0il5;k0q0;elL;iel,oubleKp,upeeK;e2ound st0;er0;lingH;n0soG;ceFn0;ies,y;e0i7;i,mpi6;n,r0wanzaByatB;!onaAw;ori7ranc9t;!o8;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;ad,e0ny;nt1;aht,itcoin0;!s|Country¦0:38;1:2L;a2Wb2Dc21d1Xe1Rf1Lg1Bh19i13j11k0Zl0Um0Gn05om3CpZqat1JrXsKtCu6v4wal3yemTz2;a24imbabwe;es,lis and futu2X;a2enezue31ietnam;nuatu,tican city;.5gTkraiZnited 3ruXs2zbeE;a,sr;arab emirat0Kkingdom,states2;! of am2X;k.,s.2; 27a.;a7haBimor-les0Bo6rinidad4u2;nis0rk2valu;ey,me2Xs and caic1T; and 2-2;toba1J;go,kel0Ynga;iw2Vji2nz2R;ki2T;aCcotl1eBi8lov7o5pa2Bri lanka,u4w2yr0;az2ed9itzerl1;il1;d2Qriname;lomon1Vmal0uth 2;afr2IkLsud2O;ak0en0;erra leoEn2;gapo1Wt maart2;en;negKrb0ychellY;int 2moa,n marino,udi arab0;hele24luc0mart1Z;epublic of ir0Com2Cuss0w2;an25;a3eHhilippinTitcairn1Ko2uerto riM;l1rtugE;ki2Bl3nama,pua new0Tra2;gu6;au,esti2;ne;aAe8i6or2;folk1Gth3w2;ay; k2ern mariana1B;or0M;caragua,ger2ue;!ia;p2ther18w zeal1;al;mib0u2;ru;a6exi5icro09o2yanm04;ldova,n2roc4zamb9;a3gol0t2;enegro,serrat;co;c9dagascZl6r4urit3yot2;te;an0i14;shall0Vtin2;ique;a3div2i,ta;es;wi,ys0;ao,ed00;a5e4i2uxembourg;b2echtenste10thu1E;er0ya;ban0Gsotho;os,tv0;azakh1De2iriba02osovo,uwait,yrgyz1D;eling0Jnya;a2erF;ma15p1B;c6nd5r3s2taly,vory coast;le of m19rael;a2el1;n,q;ia,oI;el1;aiSon2ungary;dur0Mg kong;aAermany,ha0Pibralt9re7u2;a5ern4inea2ya0O;!-biss2;au;sey;m,tema0P;e2na0M;ce,nl1;ar;bTmb0;a6i5r2;ance,ench 2;guia0Dpoly2;nes0;ji,nl1;lklandTroeT;ast tim6cu5gypt,l salv5ngl1quatorial3ritr4st2thiop0;on0; guin2;ea;ad2;or;enmark,jibou4ominica3r con2;go;!n B;ti;aAentral african 9h7o4roat0u3yprQzech2; 8ia;ba,racao;c3lo2morPngo-brazzaville,okFsta r03te d\'ivoiK;mb0;osD;i2ristmasF;le,na;republic;m2naTpe verde,yman9;bod0ero2;on;aFeChut00o8r4u2;lgar0r2;kina faso,ma,undi;azil,itish 2unei;virgin2; is2;lands;liv0nai4snia and herzegoviGtswaGuvet2; isl1;and;re;l2n7rmuF;ar2gium,ize;us;h3ngladesh,rbad2;os;am3ra2;in;as;fghaFlCmAn5r3ustr2zerbaijH;al0ia;genti2men0uba;na;dorra,g4t2;arct6igua and barbu2;da;o2uil2;la;er2;ica;b2ger0;an0;ia;ni2;st2;an|MaleName¦0:A3;1:9D;2:9L;3:9U;4:8X;5:7P;6:9R;7:95;8:8E;9:7A;a8Zb8Dc7Kd6Qe62f5Ng59h4Qi4Gj3Kk3Cl2Xm20n1Ro1Mp1Equ1Dr0Ss0DtXusm0vUwKxavi2yCzA;aAor0;cha4Vh1A;ass3i,oCuA;sDuA;ma,to;nDsCusA;oAsB;uf;ef;at0g;aHeGiBoA;lfgang,odrow;lAn12;bCfr9ClA;a89iA;am,e,s;e6Qur;i,nde7Ssl8;de,lArr6y7;la5t2;an5ern1iA;cAha0nce2Prg7Lva0;ente,t4B;aOeJhIimHoDrByA;!l2ro7s1;av6GeAoy;nt,v47;bCdd,mAny;!as,mAoharu;a8Xie,y;i9y;!my,othy;eodo0Jia62om9;dDrA;en5rA;an5eAy;ll,n5;!dy;ic7Xreq,ts3F;aLcottKeJhGiFoDpenc2tAur19ylve6Zzym1;anBeAua62;f0ph8Ive4Awa61;!islaw,l8;lom1uA;leyma7ta;dn8m1;aBeA;ld1rm0;hZne,qu0Dun,wn;an,basti0k1Il3Brg3Ath;!y;lBmAntino,q3Sul;!m7Fu4;ik,vatoY;aPeLicJoDuByA;an,ou;b6dAf63ssel5T;ol2Cy;an,bEcky,dDel,geCh0land8Cm0n59ry,sByA;!ce;coe,s;l2Yr;e3Zg2n8o8Eri58;b7Fe86;ar4Tc4Sha6VkA;!ey,y;gBub6x,yAza;ansh,nal4Q;g7AiA;na76s;chDfa4lCmBndApha4ul,y54;al5Eol1Y;i7Won;f,ph;id;ent3int1;aGeDhilCierBol,reA;st1;re;!ip,lip;d7Orcy,tA;ar,eA;!r;bKt3Eul;liv2m7IrCsBtAum76w6;is,to;ama,c74;i,l3JvA;il4D;athanHeGiCoA;aAel,l0ma0r2D;h,m;cCiBkA;h5Lola;lo;hol9k,ol9;al,d,il,ls1;!i4;aSeQiIoDuAyr1;hamBr4XstaA;fa,pha;ed,mE;dibo,e,hamCntBsAussa;es,he;e,y;ad,ed,mA;ad,ed;cEgu4kClBnAtche5A;a5Wik;os,t1;e,olA;aj;ah,hAk8;a4eA;al,l;hAlv3r3M;di,met;ck,hKlJmLnu4rFs1tBuri5xA;!imilian6O;eo,hBi9tA;!eo,hew,ia;eAis;us,w;cCio,k6JlBsha4UtAv3;i1Zy;in,on;!el,oHus;colm,ik;amAdi,moud;adA;ou;aLeIiHl27oDuAy36;c9is,kAth2;aAe;!s;g0nn5FrenCuAwe4I;!iA;e,s;!zo;am,on4;evi,la3Wn5IoAst2vi;!nA;!a4V;mAn5r0Xur3Xwr3X;ar,oA;nt;aFeBhaled,irArist3Zu34y2R;k,ollos;i0UnArmit,v3;!dBnAt;e0Sy;a42ri3S;na4ZrAthem;im,l;aYeQiOoCuA;an,liAst3;an,o,us;aqu3eJhnInFrDsA;eBhA;!ua;!ph;dAge;an,i;!aA;s,thA;an,on;!ath0n49;!l,sAy;ph;an,e,mA;!m45;ffFrCsA;sAus;!e;a49emBmai7oAry;me,ni0F;i5Hy;!eZrA;ey,y;cFd6kEmDrCsBvi2yA;!d6;on,p2;ed,r1D;al,es;e,ob,ub;k,ob;an,brahIchika,gGk2lija,nuFrDsCtAv0;ai,sA;uki;aac,ha0ma4;a,vinA;!g;k,nngu3W;nacAor;io;im;aJeEina3RoCuAyd42;be1PgAmber3FsC;h,o;m2ra5sAwa34;se3;aDctCitCnBrA;be1Km0;ry;or;th;bHlGmza,ns,o,rBsAya36;an,s0;lDo3BrCuAv8;hi33ki,tA;a,o;is1y;an,ey;!im;ib;aKeHilbe3YlenGord1rCuA;illerAstavo;mo;aCegAov2;!g,orA;io,y;dy,h43nt;!n;ne,oBraA;ld,rd3Q;ffr8rge;bri4rA;la1HrAy;eXy;aNeKiIlHorr0BrA;anCedA;!d2GeAri1K;ri1J;cBkA;!ie,l3;esco,isA;!co,zek;oyd;d4lA;ip;liBng,rnA;anW;pe,x;bi0di;arVdQfra3it0lMmFnErBsteb0th0uge7vAym6;an,ereG;gi,iBnAv3w3;est33ie;c01k;rique,zo;aFiCmA;aEeA;tt;lBrA;!h0;!io;nu4;be01d1iCliBm2t1v3woA;od;ot1Bs;!as,j35;!d1Xg29mDuBwA;a1Din;arA;do;o0Fu0F;l,nA;est;aReJieIoCrag0uBwAyl0;ay7ight;a7st3;minDnCugByA;le;!l9;!a1Hn1K;go,icA;!k;go;an,j0lbeGmetriXnErDsCvBwAxt2;ay7ey;en,in;moZ;ek,ri05;is,nA;is;rt;lJmInHrCvA;e,iA;!d;iDne08rAyl;eAin,yl;lAn;!l;n,us;!e,i4ny;i1Gon;e,l9;as;aXeVhOlFoBraig,urtA;!is;dy,l3nrCrA;ey,neliAy;us;ad;aDevelaCiAyF;fAnt;fo05t1;nd;rCuByA;!t1;de;en5;ce;aEeDrisBuA;ck;!tA;i0oph2;st2;d,rlAse;es,ie;cAdric,s0M;il;lDmer1rA;ey,lBroA;ll;!os,t1;eb,v3;arUeOilNlaMobLrBuAyr1;ddy,rt1;aFeCi0uByA;an,ce,on;ce,no;nBtA;!t;d0t;dAnd1;!foBl8y;ey;rd;!by;i7ke;al,lE;nCrAshoi;at,naAt;rd0E;!iBjam3nA;ie,y;to;ry,t;ar0Pb0Hd0Egu0Chme0Bid6jani,lUmSnKputsiJrBsaAu0Cya0ziz;hi;aGchFi4jun,maDnBon,tAy0;hur,u04;av,oA;ld;an,nd03;el;ie;ta;aq;dFgelYtA;hoDoA;i7nA;!iV;ne;ny;reAy;!s,w;ir,mAos;ar;!an,beNeHfEi,lDonCt1vA;aLin;on;so,zo;an,en;onBrA;edI;so;jDksandCssDxA;!and2;er;ar,er;andA;ro;rtA;!o;en;d,t;st3;in;amBoAri0vik;lfo;!a;dCel,rahBuA;!bakr,lfazl;am;allDel,oulaye,ulA;lBrahm0;an;ah,o;ah;av,on|City¦a2Tb23c1Td1Oe1Nf1Lg1Gh18i16jakar2Ek0Xl0Rm0En0Ao08pXquiWrTsJtAu9v6w3y1z0;agreb,uri1W;ang1Qe0okohama;katerin1Frev31;ars1ellingt1Oin0rocl1;nipeg,terth0V;aw;a1i0;en2Glni2Y;lenc2Tncouv0Gr2F;lan bat0Dtrecht;a6bilisi,e5he4i3o2rondheim,u0;nVr0;in,ku;kyo,ronIulouC;anj22l13miso2Ira29; haJssaloni0X;gucigalpa,hr2Nl av0L;i0llinn,mpe2Angi07rtu;chu21n2LpT;a3e2h1kopje,t0ydney;ockholm,uttga11;angh1Eenzh1W;o0KvZ;int peters0Ul3n0ppo1E; 0ti1A;jo0salv2;se;v0z0Q;adU;eykjavik,i1o0;me,sario,t24;ga,o de janei16;to;a8e6h5i4o2r0ueb1Pyongya1M;a0etor23;gue;rt0zn23; elizabe3o;ls1Frae23;iladelph1Ynom pe07oenix;r0tah tik18;th;lerJr0tr0Z;is;dessa,s0ttawa;a1Glo;a2ew 0is;delTtaip0york;ei;goya,nt0Tpl0T;a5e4i3o1u0;mb0Kni0H;nt0scH;evideo,real;l1Ln01skolc;dellín,lbour0R;drid,l5n3r0;ib1se0;ille;or;chest0dalay,i0Y;er;mo;a4i1o0vAy00;ndZs angel0E;ege,ma0nz,sbYverpo1;!ss0;ol; pla0Husan0E;a5hark4i3laipeda,o1rak0uala lump2;ow;be,pavog0sice;ur;ev,ng8;iv;b3mpa0Jndy,ohsiu0Gra0un02;c0j;hi;ncheLstanb0̇zmir;ul;a5e3o0; chi mi1ms,u0;stH;nh;lsin0rakliF;ki;ifa,m0noi,va09;bu0RiltC;dan3en2hent,iza,othen1raz,ua0;dalaj0Fngzhou;bu0O;eToa;sk;es,rankfu0;rt;dmont4indhovU;a1ha01oha,u0;blRrb0Eshanbe;e0kar,masc0FugavpiJ;gu,je0;on;a7ebu,h2o0raioJuriti01;lo0nstanJpenhagNrk;gFmbo;enn3i1ristchur0;ch;ang m1c0ttagoL;ago;ai;i0lgary,pe town,rac4;ro;aHeBirminghWogoAr5u0;char3dap3enos air2r0sZ;g0sa;as;es;est;a2isba1usse0;ls;ne;silPtisla0;va;ta;i3lgrade,r0;g1l0n;in;en;ji0rut;ng;ku,n3r0sel;celo1ranquil0;la;na;g1ja lu0;ka;alo0kok;re;aBb9hmedabad,l7m4n2qa1sh0thens,uckland;dod,gabat;ba;k0twerp;ara;m5s0;terd0;am;exandr0maty;ia;idj0u dhabi;an;lbo1rh0;us;rg|Place¦aLbJcHdGevergladFfEgBhAi9jfk,kul,l7m4new england,ord,p2s1the 0upIyyz;bronx,hamptons;fo,oho,yd;acifLek,h0;l,x;a1co,i0uc;a,dC;libu,nhattJ;a0gw,hr;s,x;ax,cn,ndianFst;arlem,kg,nd;ay village,re0;at 0enwich;britain,lak1;co,ra;es;en,fw,own1xb;dg,gk,hina0lt;town;cn,e0kk,rooklyn;l air,verly hills;ms,ntar1r1tl0;!ant1;ct0;ic0; oce0;an|WeekDay¦fri4mon4s2t1wed0;!nesd4;hurs2ues2;at0un1;!urd1;!d0;ay0;!s|Holiday¦0:1Q;1:1P;a1Fb1Bc12d0Ye0Of0Kg0Hh0Di09june07kwanzaa,l04m00nYoVpRrPsFt9v6w4xm03y2;om 2ule;hasho16kippur;hit2int0Xomens equalit8; 0Ss0T;alentines3e2ictor1E;r1Bteran1;! 0;-0ax 0h6isha bav,rinityMu2; b3rke2;y 0;ish2she2;vat;a0Xe prophets birth0;a6eptember14h4imchat tor0Ut 3u2;kk4mmer T;a8p7s6valentines day ;avu2mini atzeret;ot;int 2mhain;a4p3s2valentine1;tephen1;atrick1;ndrew1;amadan,ememberanc0Yos2;a park1h hashana;a3entecost,reside0Zur2;im,ple heart 0;lm2ssovE; s04;rthodox 2stara;christma1easter2goOhoJn0C;! m07;ational 2ew years09;freedom 0nurse1;a2emorial 0lHoOuharram;bMr2undy thurs0;ch0Hdi gr2tin luther k0B;as;a2itRughnassadh;bour 0g baom2ilat al-qadr;er; 2teenth;soliU;d aJmbolc,n2sra and miraj;augurGd2;ependen2igenous people1;c0Bt1;a3o2;ly satur0;lloween,nukkUrvey mil2;k 0;o3r2;ito de dolores,oundhoW;odW;a4east of 2;our lady of guadalupe,the immaculate concepti2;on;ther1;aster8id 3lectYmancip2piphany;atX;al-3u2;l-f3;ad3f2;itr;ha;! 2;m8s2;un0;ay of the dead,ecemb3i2;a de muertos,eciseis de septiembre,wali;er sol2;stice;anad8h4inco de mayo,o3yber m2;on0;lumbu1mmonwealth 0rpus christi;anuk4inese n3ristmas2;! N;ew year;ah;a 0ian tha2;nksgiving;astillCeltaine,lack4ox2;in2;g 0; fri0;dvent,ll 9pril fools,rmistic8s6u2;stral4tum2;nal2; equinox;ia 0;cens2h wednes0sumption of mary;ion 0;e 0;hallows 6s2;ai2oul1t1;nt1;s 0;day;eve|Month¦aAdec8feb6j2mar,nov8oct1sep0;!t7;!o7;an4u0;l1n0;!e;!y;!r0;uary;!em0;ber;pr1ug0;!ust;!il|FirstName¦aHblair,cFdevEguadalupe,j9k7lashawn,m4r2sh0trinity;ay,e0iloh;a,lby;e0obin;g1ne;ar1el,org0;an;ion,lo;asAe0;ls9nyatta,rry;a1e0;an,ss2;ime,m0n;ie,m0;ie;an,on;as0heyenne;ey,sidy;lexis,ndra,ubr0;ey|Duration¦centur4d2hour3m0seconds,week3year3;i0onth2;llisecond1nute1;ay0ecade0;!s;ies,y|Time¦a6breakfast 5dinner5e3lunch5m2n0oclock,some5;i7o0;on,w;id4or1;od,ve0;ning;time;fternoon,go,ll day,t 0;ni0;ght|LastName¦0:2T;1:39;2:37;3:2C;4:2X;a38b2Zc2Ld2Be28f23g1Yh1Ni1Ij1Ck15l0Xm0Ln0Ho0Ep03rWsLtGvEwBxAy7zh5;a5ou,u;ng,o;a5eun2Roshi1Iun;ma5ng;da,guc1Xmo24sh1ZzaP;iao,u;a6eb0il5o4right,u;li38s2;gn0lk0ng,tanabe;a5ivaldi;ssilj34zqu1;a8h7i2Do6r5sui,urn0;an,ynisH;lst0Nrr2Sth;at1Romps2;kah0Tnaka,ylor;aCchBeAhimizu,i9mi8o7t6u5zabo;ar1lliv27zuC;al21ein0;sa,u4;rn3th;lva,mmo22ngh;mjon3rrano;midt,neid0ulz;ito,n6sa5to;ki;ch1dKtos,z;amAeag1Xi8o6u5;bio,iz,sC;b5dri1KgHj0Sme22osevelt,sZux;erts,ins2;c5ve0E;ci,hards2;ir1os;aDe9h7ic5ow1Z;as5hl0;so;a5illips;m,n1R;ders1Zet7r6t5;e0Nr3;ez,ry;ers;h1Zrk0t5vl3;el,te0J;baAg0Alivei00r5;t5w1N;ega,iz;a5eils2guy1Qix2owak,ym1C;gy,ka5var1I;ji5muV;ma;aDeBiAo7u5;ll0n5rr0Bssolini,ñ5;oz;lina,oJr5zart;al1Le5r0S;au,no;hhail3ll0;rci0s5y0;si;eVmmad3r5tsu07;in5tin1;!o;aBe7i5op1uo;!n5u;coln,dholm;e,fe6n0Or5w0H;oy;bv5v5;re;rs13u;aAennedy,imu9le0Jo7u6wo5;k,n;mar,znets3;bay5vacs;asX;ra;hn,rl8to,ur,zl3;a9en8ha4imen1o5u4;h5n0Xu4;an5ns2;ss2;ki0Cs0R;cks2nsse0B;glesi8ke7noue,shik6to,vano5;u,v;awa;da;as;aBe8it7o6u5;!a4b0gh0Mynh;a4ffmann,rvat;chcock,l0;mingw6nde5rK;rs2;ay;ns0DrrNs6y5;asBes;an3hi5;moG;a7il,o6rub0u5;o,tierr1;m1nzal1;nd5o,rcia;hi;er8is7lor07o6uj5;ita;st0urni0;ch0;nand1;d6insteGsposi5vaK;to;is2wards;aBeAi8omin7u5;bo5rand;is;gu1;az,mitr3;ov;lgado,vi;rw6vi5;es,s;in;aEhAlark9o5;hLl5op0x;em6li5;ns;an;!e;an7e6iu,o5ristensGu4we;i,ng,u4w,y;!n,on5u4;!g;mpb7rt0st5;ro;er;ell;aAe7ha4lanco,oyko,r5yrne;ooks,yant;ng;ck6ethov5nnett;en;er,ham;ch,h6iley,rn5;es;k,ng;dCl8nd5;ers5r9;en,on,s2;on;eks6iy7var1;ez;ej5;ev;ams|FemaleName¦0:81;1:7F;2:7Y;3:7H;4:65;5:7P;6:7T;7:6Z;8:7U;9:7R;A:7D;B:6K;C:6X;a77b6Oc5Td5Ce4Rf4Jg47h3Zi3Uj38k2Sl20m19n13o11p0Tr0EsXtMursuAvHwFyDza5;olan3vD;et7Kon5Y;an3enLhi6OilD;a,la,ma;aGeEiD;ctor1oAvi3B;l4VrD;a,na,oniB;len5Nnes7N;aKeIheHi2onGrD;acCiEuD;dy;c1na,s8;i4Vya;l4Nres0;o3GrD;e1Ni,ri;bit8mDn29ra,s8;a5iDmy;!ka;aSel4HhKiJoHtGuEyD;b7Slv1;e,sDzU;an16i;acCel1G;f1nDph1;d5ia,ja,ya;lv1mon0;aGeDi24;e2iAlErD;i,yl;ia,ly;nErDu2w2;i,on;a,ia,nDon;a,on;b24i3l5Xmant8nd5ra9;aOeKhon3i7oEuD;by,th;bHch4On3sExD;an4V;aEeD;ma2Ut7;!lind;er7yn;bEnD;a,ee;a,eD;cBka9;chDmo2qu3I;a3HelDi3;!e,le;aGeFhylEriD;scil0Nyamva3;is,lis;arl,t5;ige,mFrvati,tricEulD;a,et60in0;a,e,ia;!eA;f4AlD;ga,iv1;aHelGiEorD;a,ma;cDkki,na;ho2No2N;!l;di6Gi36o0Qtas8;aNeKiHoErignayani,uri2ZyrD;a,na,t2J;l4ZnD;a,iD;ca,q3F;ch3QlErD;an3iam;dred,iB;ag1CgEliDredi36;n3s5Q;an,han;bRdel4e,gdale2li59nQrGtil3uFvEx4yD;a,ra;is;de,re6;cLgJiFl3Es8tEyanD;!n;a,ha,i2;aEb2Hja,l2Ena,sDtza;a,ol,sa;!nD;!a,e,n0;arDo,r49ueri53;et49i7;elKia;dakran7on,ueA;el,le;aXeRiNoJuFyD;d1nD;!a,da,e4Vn1D;ciFelEiDpe;sa;a,la;a,l3Tn3;is,la,rDui2P;aEeDna,ra4;n0t7;!in0;lFndDsa;a,sD;ay,ey,i,y;a,i0Fli0F;aGiFla,nEoDslCt1M;la,na;a,o5;gh,la;!h,nD;a,e,n0V;don2Fna,ra,tGurEvern0xD;mi;a,eD;l,n;as8is8oD;nDya;ya;aLeIhadija,iFrD;istDy2E;a,en,in0L;mDrst6;!beD;rlC;is8lEnd5rD;i,ri;ey,i,lCy;nyakumari,rHtEvi7yD;!la;aEe,hDi3Ari2y;ar4er4le6r11;ri2;a,en,iDla;!ma,n;aSeMilJoFuD;anDdi1El1st4;a,i7;!anFcel0UdEhan1Pl3Dni,seDva2y35;fi2ph4;i30y;!a,e,n01;!iElD;!iD;an;anGle2nEri,sD;iBsiB;a,if3KnD;a,if3J;a,e3Bin0nD;a,e3Ain0;cGde,nDsm4vie5;a,eEiD;ce,n0s;!l28t2E;l0DquelD;in0yn;da,mog2Ungrid,rGsDva;abelEiD;do5;!a,e,l0;en0ma;aHeFilD;aDda,laD;ry;ath32i24lenDnriet7;!a,e;nErD;i1Zri1Z;a9na9;aLeJiIlGrEwenD;!dolX;acDetch6;e,ieA;adys,enDor1;a,da,na;na,seG;nevieve,orgi2rD;ald4trude;brielEil,le,yD;le;a,e,le;aJeHlorGrD;ancDe3ie3;es,iD;n0sB;a,en1T;lDrn;ic1;tiOy1N;dVile6k7lOmNrLstItGuFvD;a,elD;yn;gen1la,ni1M;hDta;el;eDh27;lDr;a,e,l0;iDma,nest4;ca,ka,n;ma;a4eHiEl6ma,oiTsa,vD;a,i5;sDzaE;aDe;!beG;anor,nD;!a;iDna;th;aPeIiHoD;lor26miniqFnNrD;a,e6is,othD;ea,y;ue;anVna;anIbHe,lFnDsir1Y;a,iD;se;a,ia,la,orD;es,is;ora9ra;a,na;m1nEphn0rlD;a,en0;a,iD;el07;aXeUhRlNoGrDynth1;isEyD;stal;ti2;lInsGrDur06;a,inEnD;el1;a,e,n0;tanDuelo;ce,za;e6le6;aDeo;ire,rEudD;et0Sia;a,i09;arl0GeEloe,ristD;a,in0;ls0Qryl;cElD;es0Mi1C;el1il0Y;itlin,milLndKrHsGtD;ali2hD;er4le6y;in0;a0Usa0U;a,la,meEolD;!e,in0yn;la,n;aUiU;e,le;arbUeLiJlJoni7rD;anHen3iDooke;dgEtD;tnC;etD;!te;di;anB;ca;atriKcky,lin3rHtEula9verD;ly;h,tD;e,yD;!e;nDt8;adOiD;ce;ce,z;a5ra;biga0Jd0Dgn0Ci07lZmVnIrFshlCudrDva;a,ey,i,y;ey,i,y;lEpi7;ta;en0;a,dMeKgelIiHja,nFtoD;inDn1;etJ;!a,eHiD;ka;ka,ta;a,iD;a,ca,n0;!tD;te;jeArD;ea;la;an3bEel1i2y;ia;er;da;exaIiFma,ta,yD;a,sD;a,sa;cEsD;a,ha,on;e,ia;nd5;ra;c8da,le6mEsha9;!h;ee;en;ha;es;a,elFriD;a2en0;na;e,iD;a,n0;a,e;il|Person¦aQbOcKdHemeril lagasse,faGgDhBjk rowling,kAlebron james,m7oprah winfrNparis hiltIr4s3t2uncle,v0womF;a0irgin maB;lentino rossi,n go3;iger woods,yra banks;addam hussaHcarlett johanssEistOlobodan milosevic,omeone,tepA;ay romano,eese witherspoDo1ush limbau0;gh;d stewart,naldinho;an,essiaen,itt romnFo0ubarek;m0thJ;!my;anye west,iefer sutherland,obe bryaG;alle ber0ulk hog3;ry;entlem1irl,rand0uy;fa1mo1;an;thB;ad1enzel washingt0ick wolf,ude;on;!dy;ar1ous0;in;dinal wols0son palm5;ey;arack obama,oy,ro0;!th2;dolf hitl1shton kutch1u0;nt;er|Verb¦awak9born,cannot,fr8g7h5k3le2m1s0wors9;e8h3;ake sure,sg;ngth6ss6;eep tabs,n0;own;as0e2;!t2;iv1onna;ight0;en|PhrasalVerb¦0:71;1:6P;2:7D;3:73;4:6I;5:7G;6:75;7:6O;8:6B;9:6C;A:5H;B:70;C:6Z;a7Gb62c5Cd59e57f45g3Nh37iron0j33k2Yl2Km2Bn29o27p1Pr1Es09tQuOvacuum 1wGyammerCzD;eroAip EonD;e0k0;by,up;aJeGhFiEorDrit52;d 1k2Q;mp0n49pe0r8s8;eel Bip 7K;aEiD;gh 06rd0;n Br 3C;it 5Jk8lk6rm 0Qsh 73t66v4O;rgeCsD;e 9herA;aRePhNiJoHrFuDype 0N;ckArn D;d2in,o3Fup;ade YiDot0y 32;ckle67p 79;ne66p Ds4C;d2o6Kup;ck FdEe Dgh5Sme0p o0Dre0;aw3ba4d2in,up;e5Jy 1;by,o6U;ink Drow 5U;ba4ov7up;aDe 4Hll4N;m 1r W;ckCke Elk D;ov7u4N;aDba4d2in,o30up;ba4ft7p4Sw3;a0Gc0Fe09h05i02lYmXnWoVpSquare RtJuHwD;earFiD;ngEtch D;aw3ba4o6O; by;ck Dit 1m 1ss0;in,up;aIe0RiHoFrD;aigh1LiD;ke 5Xn2X;p Drm1O;by,in,o6A;n2Yr 1tc3H;c2Xmp0nd Dr6Gve6y 1;ba4d2up;d2o66up;ar2Uell0ill4TlErDurC;ingCuc8;a32it 3T;be4Brt0;ap 4Dow B;ash 4Yoke0;eep EiDow 9;c3Mp 1;in,oD;ff,v7;gn Eng2Yt Dz8;d2o5up;in,o5up;aFoDu4E;ot Dut0w 5W;aw3ba4f36o5Q;c2EdeAk4Rve6;e Hll0nd GtD; Dtl42;d2in,o5upD;!on;aw3ba4d2in,o1Xup;o5to;al4Kout0rap4K;il6v8;at0eKiJoGuD;b 4Dle0n Dstl8;aDba4d2in52o3Ft2Zu3D;c1Ww3;ot EuD;g2Jnd6;a1Wf2Qo5;ng 4Np6;aDel6inAnt0;c4Xd D;o2Su0C;aQePiOlMoKrHsyc29uD;ll Ft D;aDba4d2in,o1Gt33up;p38w3;ap37d2in,o5t31up;attleCess EiGoD;p 1;ah1Gon;iDp 52re3Lur44wer 52;nt0;ay3YuD;gAmp 9;ck 52g0leCn 9p3V;el 46ncilA;c3Oir 2Hn0ss FtEy D;ba4o4Q; d2c1X;aw3ba4o11;pDw3J;e3It B;arrow3Serd0oD;d6te3R;aJeHiGoEuD;ddl8ll36;c16p 1uth6ve D;al3Ad2in,o5up;ss0x 1;asur8lt 9ss D;a19up;ke Dn 9r2Zs1Kx0;do,o3Xup;aOeMiHoDuck0;a16c36g 0AoDse0;k Dse34;aft7ba4d2forw2Ain3Vov7uD;nd7p;e GghtFnEsDv1T;ten 4D;e 1k 1; 1e2Y;ar43d2;av1Ht 2YvelD; o3L;p 1sh DtchCugh6y1U;in3Lo5;eEick6nock D;d2o3H;eDyA;l2Hp D;aw3ba4d2fSin,o05to,up;aFoEuD;ic8mpA;ke2St2W;c31zz 1;aPeKiHoEuD;nker2Ts0U;lDneArse2O;d De 1;ba4d2oZup;de Et D;ba4on,up;aw3o5;aDlp0;d Fr Dt 1;fDof;rom;in,oO;cZm 1nDve it;d Dg 27kerF;d2in,o5;aReLive Jloss1VoFrEunD; f0M;in39ow 23; Dof 0U;aEb17it,oDr35t0Ou12;ff,n,v7;bo5ft7hJw3;aw3ba4d2in,oDup,w3;ff,n,ut;a17ek0t D;aEb11d2oDr2Zup;ff,n,ut,v7;cEhDl1Pr2Xt,w3;ead;ross;d aEnD;g 1;bo5;a08e01iRlNoJrFuD;cDel 1;k 1;eEighten DownCy 1;aw3o2L;eDshe1G; 1z8;lFol D;aDwi19;bo5r2I;d 9;aEeDip0;sh0;g 9ke0mDrD;e 2K;gLlJnHrFsEzzD;le0;h 2H;e Dm 1;aw3ba4up;d0isD;h 1;e Dl 11;aw3fI;ht ba4ure0;eInEsD;s 1;cFd D;fDo1X;or;e B;dQl 1;cHll Drm0t0O;apYbFd2in,oEtD;hrough;ff,ut,v7;a4ehi1S;e E;at0dge0nd Dy8;o1Mup;o09rD;ess 9op D;aw3bNin,o15;aShPlean 9oDross But 0T;me FoEuntD; o1M;k 1l6;aJbIforGin,oFtEuD;nd7;ogeth7;ut,v7;th,wD;ard;a4y;pDr19w3;art;eDipA;ck BeD;r 1;lJncel0rGsFtch EveA; in;o16up;h Bt6;ry EvD;e V;aw3o12;l Dm02;aDba4d2o10up;r0Vw3;a0He08l01oSrHuD;bbleFcklTilZlEndlTrn 05tDy 10zz6;t B;k 9; ov7;anMeaKiDush6;ghHng D;aEba4d2forDin,o5up;th;bo5lDr0Lw3;ong;teD;n 1;k D;d2in,o5up;ch0;arKgJil 9n8oGssFttlEunce Dx B;aw3ba4;e 9; ar0B;k Bt 1;e 1;d2up; d2;d 1;aIeed0oDurt0;cFw D;aw3ba4d2o5up;ck;k D;in,oK;ck0nk0st6; oJaGef 1nd D;d2ov7up;er;up;r0t D;d2in,oDup;ff,ut;ff,nD;to;ck Jil0nFrgEsD;h B;ainCe B;g BkC; on;in,o5; o5;aw3d2o5up;ay;cMdIsk Fuction6; oD;ff;arDo5;ouD;nd;d D;d2oDup;ff,n;own;t D;o5up;ut|Modal¦c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to;ay,ight,ust;an,o0;uld|Comparable¦0:41;1:4I;2:45;3:4B;4:2Y;5:3X;a4Ob44c3Od3De35f2Rg2Fh24i1Vj1Uk1Rl1Im1Cn16o14p0Tqu0Rr0IsRtKuIvFw7y6za12;ell27ou3;aBe9hi1Yi7r6;o3y;ck0Mde,l6n1ry,se;d,y;a6i4Mt;k,ry;n1Tr6sI;m,y;a7e6ulgar;nge5rda2xi3;gue,in,st;g0n6pco3Mse5;like0ti1;aAen9hi8i7ough,r6;anqu2Qen1ue;dy,g3Ume0ny,r09;ck,n,rs2R;d42se;ll,me,rt,s6wd47;te5;aVcarUeThRiQkin0GlMmKoHpGqua1HtAu7w6;eet,ift;b7dd15per0Hr6;e,re2J;sta2Ht4;aAe9iff,r7u6;pXr1;a6ict,o3;ig3Hn0W;a1ep,rn;le,rk;e24i3Hright0;ci2Aft,l7o6re,ur;n,thi3;emn,id;a6el0ooth;ll,rt;e8i6ow,y;ck,g37m6;!y;ek,nd3F;ck,l0mp4;a6iUort,rill,y;dy,ll0Zrp;cu0Tve0Txy;ce,ed,y;d,fe,int0l1Xv16;aBe9i8o6ude;mantic,o1Ksy,u6;gh,nd;ch,pe,tzy;a6d,mo0J;dy,l;gg7ndom,p6re,w;id;ed;ai2i6;ck,et;aFhoEi1SlCoBr8u6;ny,r6;e,p4;egna2ic7o6;fou00ud;ey,k0;li06or,te1D;a6easa2;in,nt;ny;in5le;dd,f6i0ld,ranR;fi11;aAe8i7o6;b4isy,rm16sy;ce,mb4;a6w;r,t;ive,rr02;aAe8ild,o7u6;nda1Ate;ist,o1;a6ek,llY;n,s0ty;d,tuR;aCeBi9o6ucky;f0Vn7o1Eu6ve0w18y0U;d,sy;e0g;g1Uke0tt4v6;e0i3;an,wd;me,r6te;ge;e7i6;nd;en;ol0ui1P;cy,ll,n6;sBt6;e6ima8;llege2r6;es7media6;te;ti3;ecu6ta2;re;aEeBiAo8u6;ge,m6ng1R;b4id;ll6me0t;ow;gh,l0;a6f04sita2;dy,v6;en0y;nd1Hppy,r6te5;d,sh;aGenFhDiClBoofy,r6;a9e8is0o6ue1E;o6ss;vy;at,en,y;nd,y;ad,ib,ooI;a2d1;a6o6;st0;t4uiY;u1y;aIeeb4iDlat,oAr8u6;ll,n6r14;!ny;aHe6iend0;e,sh;a7r6ul;get5mG;my;erce8n6rm,t;an6e;ciC;! ;le;ir,ke,n0Fr,st,t,ulA;aAerie,mp9sse7v6xtre0Q;il;nti6;al;ty;r7s6;tern,y;ly,th0;aFeCi9r7u6;ll,mb;u6y;nk;r7vi6;ne;e,ty;a6ep,nD;d6f,r;!ly;mp,pp03rk;aHhDlAo8r7u6;dd0r0te;isp,uel;ar6ld,mmon,ol,st0ward0zy;se;e6ou1;a6vW;n,r;ar8e6il0;ap,e6;sy;mi3;gey,lm8r6;e5i3;ful;!i3;aNiLlIoEr8u6;r0sy;ly;aAi7o6;ad,wn;ef,g7llia2;nt;ht;sh,ve;ld,r7un6;cy;ed,i3;ng;a7o6ue;nd,o1;ck,nd;g,tt6;er;d,ld,w1;dy;bsu9ng8we6;so6;me;ry;rd|Adverb¦a07by 05d01eYfShQinPjustOkinda,mMnJoEpCquite,r9s5t2up1very,w0Bye0;p,s; to,wards5;h1o0wiO;o,t6ward;en,us;everal,o0uch;!me1rt0; of;hXtimes,w07;a1e0;alS;ndomRthN;ar excellDer0oint blank; Mhaps;f3n0;ce0ly;! 0;ag00moU; courHten;ewJo0; longEt 0;onHwithstanding;aybe,eanwhiAore0;!ovB;! aboS;deed,steT;en0;ce;or2u0;l9rther0;!moH; 0ev3;examp0good,suF;le;n mas1v0;er;se;e0irect1; 1finite0;ly;ju7trop;far,n0;ow; CbroBd nauseam,gAl5ny2part,side,t 0w3;be5l0mo5wor5;arge,ea4;mo1w0;ay;re;l 1mo0one,ready,so,ways;st;b1t0;hat;ut;ain;ad;lot,posteriori|Expression¦a02b01dXeVfuck,gShLlImHnGoDpBshAu7voi04w3y0;a1eLu0;ck,p;!a,hoo,y;h1ow,t0;af,f;e0oa;e,w;gh,h0;! 0h,m;huh,oh;eesh,hh,it;ff,hew,l0sst;ease,z;h1o0w,y;h,o,ps;!h;ah,ope;eh,mm;m1ol0;!s;ao,fao;a4e2i,mm,oly1urr0;ah;! mo6;e,ll0y;!o;ha0i;!ha;ah,ee,o0rr;l0odbye;ly;e0h,t cetera,ww;k,p;\'oh,a0uh;m0ng;mit,n0;!it;ah,oo,ye; 1h0rgh;!em;la|Conjunction¦aDb9cuz,for,how7in caCno6o5p3supposing,th1vers4wh0yet;eth7ile;eref9o0;!uC;l0rovided that;us;r,therwi6; matt1r;!ev0;er;e0ut;cau1f0;ore;se;lthou1nd,s 0;far as,if;gh|Determiner¦aAboth,d8e5few,l3mu7neiCown,plenty,some,th2various,wh0;at0ich0;evB;at,e3is,ose;a,e0;!ast,s;a1i6l0nough,very;!se;ch;e0u;!s;!n0;!o0y;th0;er","conjugations":"t:ake,ook|:can,could,can,_|free:_,,,ing|puk:e,,,ing|ar:ise,ose,,,isen|babys:it,at|:be,was,is,am,been|:is,was,is,being|beat:_,,,ing,en|beg:in,an,,inning,un|ban:_,ned,,ning|bet:_,,,,_|bit:e,_,,ing,ten|ble:ed,d,,,d|bre:ed,d|br:ing,ought,,,ought|broadcast:_,_|buil:d,t,,,t|b:uy,ought,,,ought|cho:ose,se,,osing,sen|cost:_,_|deal:_,t,,,t|d:ie,ied,,ying|d:ig,ug,,igging,ug|dr:aw,ew,,,awn|dr:ink,ank,,,unk|dr:ive,ove,,iving,iven|:eat,ate,,eating,eaten|f:all,ell,,,allen|fe:ed,d,,,d|fe:el,lt|f:ight,ought,,,ought|f:ind,ound|fl:y,ew,,,own|bl:ow,ew,,,own|forb:id,ade|edit:_,,,ing|forg:et,ot,,eting,otten|forg:ive,ave,,iving,iven|fr:eeze,oze,,eezing,ozen|g:et,ot|g:ive,ave,,iving,iven|:go,went,goes,,gone|h:ang,ung,,,ung|ha:ve,d,s,ving,d|hear:_,d,,,d|hid:e,_,,,den|h:old,eld,,,eld|hurt:_,_,,,_|la:y,id,,,id|le:ad,d,,,d|le:ave,ft,,,ft|l:ie,ay,,ying|li:ght,t,,,t|los:e,t,,ing|ma:ke,de,,,de|mean:_,t,,,t|me:et,t,,eting,t|pa:y,id,,,id|read:_,_,,,_|r:ing,ang,,,ung|r:ise,ose,,ising,isen|r:un,an,,unning,un|sa:y,id,ys,,id|s:ee,aw,,,een|s:ell,old,,,old|sh:ine,one,,,one|sho:ot,t,,,t|show:_,ed|s:ing,ang,,,ung|s:ink,ank|s:it,at|slid:e,_,,,_|sp:eak,oke,,,oken|sp:in,un,,inning,un|st:and,ood|st:eal,ole|st:ick,uck|st:ing,ung|:stream,,,,|str:ike,uck,,iking|sw:ear,ore|sw:im,am,,imming|sw:ing,ung|t:each,aught,eaches|t:ear,ore|t:ell,old|th:ink,ought|underst:and,ood|w:ake,oke|w:ear,ore|w:in,on,,inning|withdr:aw,ew|wr:ite,ote,,iting,itten|t:ie,ied,,ying|ski:_,ied|:boil,,,,|miss:_,,_|:act,,,,|compet:e,ed,,ing|:being,were,are,are|impl:y,ied,ies|ic:e,ed,,ing|develop:_,ed,,ing|wait:_,ed,,ing|aim:_,ed,,ing|spil:l,t,,,led|drop:_,ped,,ping|log:_,ged,,ging|rub:_,bed,,bing|smash:_,,es|egg:_,ed|suit:_,ed,,ing|age:_,d,s,ing|shed:_,_,s,ding|br:eak,oke|ca:tch,ught|d:o,id,oes|b:ind,ound|spread:_,_|become:_,,,,_|ben:d,,,,t|br:ake,,,,oken|burn:_,,,,ed|burst:_,,,,_|cl:ing,,,,ung|c:ome,ame,,,ome|cre:ep,,,,pt|cut:_,,,,_|dive:_,,,,d|dream:_,,,,t|fle:e,,,,d|fl:ing,,,,ung|got:_,,,,ten|grow:_,,,,n|hit:_,,,,_|ke:ep,,,,pt|kne:el,,,,lt|know:_,,,,n|leap:_,,,,t|len:d,,,,t|lo:ose,,,,st|prove:_,,,,n|put:_,,,,_|quit:_,,,,_|rid:e,,,,den|s:eek,,,,ought|sen:d,,,,t|set:_,,,,_|sew:_,,,,n|shake:_,,,,n|shave:_,,,,d|shut:_,,,,_|s:eat,,,,at|sla:y,,,,in|sle:ep,,,,pt|sn:eak,,,,uck|spe:ed,,,,d|spen:d,,,,t|sp:it,,,,at|split:_,,,,_|spr:ing,,,,ung|st:ink,unk,,,unk|strew:_,,,,n|sw:are,,,,orn|swe:ep,,,,pt|thrive:_,,,,d|undergo:_,,,,ne|upset:_,,,,_|w:eave,,,,oven|we:ep,,,,pt|w:ind,,,,ound|wr:ing,,,,ung","plurals":"addend|um|a,alga|e,alumna|e,alumn|us|i,appendi|x|ces,avocado|s,bacill|us|i,barracks|,beau|x,cact|us|i,chateau|x,child|ren,château|x,corp|us|ora,criteri|on|a,curricul|um|a,database|s,deer|,echo|es,embargo|es,epoch|s,f|oot|eet,gen|us|era,g|oose|eese,halo|s,hippopotam|us|i,ind|ex|ices,larva|e,lea|f|ves,librett|o|i,loa|f|ves,m|an|en,matri|x|ces,memorand|um|a,modul|us|i,mosquito|es,move|s,op|us|era,ov|um|a,ox|en,pe|rson|ople,phenomen|on|a,quiz|zes,radi|us|i,referend|um|a,rodeo|s,sex|es,shoe|s,sombrero|s,stomach|s,syllab|us|i,tableau|x,thie|f|ves,t|ooth|eeth,tornado|s,tuxedo|s,zero|s","patterns":{"Person":["master of #Noun","captain of the #Noun"]},"regex":{"HashTag":["^#[a-z]+"],"Gerund":["[a-z]+n[\'’]$"],"Possessive":["[a-z]+s\'"],"PhoneNumber":["[0-9]{3}-[0-9]{4}","[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}"],"Time":["[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])","[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)","[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?","[PMCE]ST","utc ?[+-]?[0-9]+?","[a-z0-9]*? o\'?clock"],"Date":["[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}","[0-9]{1,4}/[0-9]{1,2}/[0-9]{1,4}"],"Money":["^[-+]?[$€¥£][0-9]+(.[0-9]{1,2})?$","^[-+]?[$€¥£][0-9]{1,3}(,[0-9]{3})+(.[0-9]{1,2})?$"],"Value":["^[-+]?[$€¥£][0-9]+(.[0-9]{1,2})?$","^[-+]?[$€¥£][0-9]{1,3}(,[0-9]{3})+(.[0-9]{1,2})?$","[0-9]{1,2}-[0-9]{1,2}"],"NumberRange":["[0-9]{1,4}(st|nd|rd|th)?-[0-9]{1,4}(st|nd|rd|th)?","[0-9]{1,2}-[0-9]{1,2}"],"NiceNumber":["^[-+]?[0-9.,]{1,3}(,[0-9.,]{3})+(.[0-9]+)?$"],"NumericValue":["^[-+]?[0-9]+(.[0-9]+)?$","^.?[0-9]+([0-9,.]+)?%$"],"Percent":["^.?[0-9]+([0-9,.]+)?%$"],"Cardinal":["^.?[0-9]+([0-9,.]+)?%$"],"Fraction":["[0-9]{1,4}/[0-9]{1,4}"],"LastName":["ma?c\'.*","o\'[drlkn].*"]}}';
      }, {}], 202: [function (t, e, r) {
         "use strict";
         var n = t("../subset/verbs/methods/conjugate/faster.js"),
             i = function i(t) {
            var e = this;return Object.keys(t).forEach(function (r) {
               e.conjugations[r] = e.conjugations[r] || {}, e.words[r] = e.words[r] || "Infinitive", Object.keys(t[r]).forEach(function (n) {
                  var i = t[r][n];e.conjugations[r][n] = i, e.words[i] = e.words[i] || n, e.cache.toInfinitive[t[r][n]] = r;
               });var i = n(r, e);Object.keys(i).forEach(function (t) {
                  var r = i[t];e.words.hasOwnProperty(r) === !1 && (e.words[r] = t);
               });
            }), t;
         };e.exports = i;
      }, { "../subset/verbs/methods/conjugate/faster.js": 76 }], 203: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = this;return Object.keys(t).forEach(function (r) {
               e.patterns[r] = t[r];
            }), t;
         };e.exports = n;
      }, {}], 204: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = this;return Object.keys(t).forEach(function (r) {
               var n = t[r];e.plurals[r] = n, e.words[n] = e.words[n] || "Plural", e.words[r] = e.words[r] || "Singular", e.cache.toSingular[n] = r;
            }), t;
         };e.exports = n;
      }, {}], 205: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = this;Object.keys(t).forEach(function (r) {
               e.regex.push({ reg: RegExp(r, "i"), tag: t[r] });
            });
         };e.exports = n;
      }, {}], 206: [function (t, e, r) {
         "use strict";
         var n = t("../tags/addDownward"),
             i = function i(t) {
            var e = this;return Object.keys(t).forEach(function (r) {
               var n = t[r];n.notA = n.notA || [], n.downward = n.downward || [], e.tags[r] = n;
            }), n(this.tags), t;
         };e.exports = i;
      }, { "../tags/addDownward": 130 }], 207: [function (t, e, r) {
         "use strict";
         var n = t("../term/methods/normalize/normalize").normalize,
             i = t("../subset/nouns/methods/pluralize"),
             a = t("../subset/verbs/methods/conjugate/faster.js"),
             o = t("../subset/adjectives/methods"),
             s = / /,
             u = function u(t) {
            return t = n(t), t = t.replace(/\s+/, " "), t = t.replace(/[.\?,;\!]/g, "");
         },
             l = function l(t) {
            var e = this;return Object.keys(t).forEach(function (r) {
               var n,
                   l,
                   c,
                   h,
                   f,
                   m,
                   d,
                   p = t[r];return r = u(r), e.words[r] = p, s.test(r) === !0 && (n = r.split(s), e.cache.firstWords[n[0]] = !0), "Singular" === p ? (l = i(r, {}), void (l && l !== r && (e.words[l] = "Plural"))) : "Infinitive" === p ? (c = a(r, e), void Object.keys(c).forEach(function (t) {
                  e.words[c[t]] = t;
               })) : "PhrasalVerb" === p ? (h = r.split(/ /), f = a(h[0], e), void Object.keys(f).forEach(function (t) {
                  var r = f[t] + " " + h[1];e.words[r] = "PhrasalVerb", e.cache.firstWords[f[t]] = !0;
               })) : void ("Comparable" === p && (m = o.toComparative(r), m && r !== m && (e.words[m] = "Comparative"), d = o.toSuperlative(r), d && r !== d && (e.words[d] = "Superlative")));
            }), t;
         };e.exports = l;
      }, { "../subset/adjectives/methods": 11, "../subset/nouns/methods/pluralize": 44, "../subset/verbs/methods/conjugate/faster.js": 76, "../term/methods/normalize/normalize": 144 }], 208: [function (t, e, r) {
         "use strict";
         var n,
             i = t("../fns"),
             a = t("./_data"),
             o = t("./more-data"),
             s = t("../tags"),
             u = t("./unpack"),
             l = t("./addTags"),
             c = t("./addWords"),
             h = t("./addRegex"),
             f = t("./addConjugations"),
             m = t("./addPatterns"),
             d = t("./addPlurals"),
             p = t("./more-data/misc"),
             g = function g(t, e) {
            var r,
                n = Object.keys(e);for (r = 0; r < n.length; r++) {
               t[n[r]] = e[n[r]];
            }return t;
         },
             v = function v() {
            this.words = {}, this.tags = s, this.regex = [], this.patterns = {}, this.conjugations = {}, this.plurals = {}, this.cache = { firstWords: {}, toInfinitive: {}, toSingular: {} };
         };v.prototype.addTags = l, v.prototype.addWords = c, v.prototype.addRegex = h, v.prototype.addConjugations = f, v.prototype.addPlurals = d, v.prototype.addPatterns = m, v.prototype.clone = function () {
            var t = this,
                e = new v();return ["words", "firstWords", "tagset", "regex", "patterns", "conjugations", "plurals"].forEach(function (r) {
               t[r] && (e[r] = i.copy(t[r]));
            }), e;
         }, v.prototype.plugin = function (t) {
            t = u(t), t.tags && this.addTags(t.tags), t.regex && this.addRegex(t.regex), t.patterns && this.addPatterns(t.patterns), t.conjugations && this.addConjugations(t.conjugations), t.plurals && this.addPlurals(t.plurals), t.words && this.addWords(t.words);
         }, n = new v(), n.plugin(a), n.addWords(p), o.forEach(function (t) {
            g(n.words, t);
         }), e.exports = { w: n, reBuild: function reBuild() {
               var t = new v();return t.plugin(a), t.addWords(p), o.forEach(function (e) {
                  g(t.words, e);
               }), t;
            } };
      }, { "../fns": 3, "../tags": 132, "./_data": 201, "./addConjugations": 202, "./addPatterns": 203, "./addPlurals": 204, "./addRegex": 205, "./addTags": 206, "./addWords": 207, "./more-data": 210, "./more-data/misc": 212, "./unpack": 216 }], 209: [function (t, e, r) {
         "use strict";
         var n,
             i,
             a,
             o = { Noun: ["arc", "al", "exp", "fy", "pd", "pl", "plz", "tce", "bl", "ma", "ba", "lit", "ex", "eg", "ie", "ca", "cca", "vs", "etc", "esp", "ft", "bc", "ad", "md", "corp", "col"], Organization: ["dept", "univ", "assn", "bros", "inc", "ltd", "co", "yahoo", "joomla", "jeopardy"], Place: ["rd", "st", "dist", "mt", "ave", "blvd", "cl", "ct", "cres", "hwy", "ariz", "cal", "calif", "colo", "conn", "fla", "fl", "ga", "ida", "ia", "kan", "kans", "minn", "neb", "nebr", "okla", "penna", "penn", "pa", "dak", "tenn", "tex", "ut", "vt", "va", "wis", "wisc", "wy", "wyo", "usafa", "alta", "ont", "que", "sask"], Month: ["jan", "feb", "mar", "apr", "jun", "jul", "aug", "sep", "sept", "oct", "nov", "dec"], Date: ["circa"], Honorific: ["adj", "adm", "adv", "asst", "atty", "bldg", "brig", "capt", "cmdr", "comdr", "cpl", "det", "dr", "esq", "gen", "gov", "hon", "jr", "llb", "lt", "maj", "messrs", "mister", "mlle", "mme", "mr", "mrs", "ms", "mstr", "op", "ord", "phd", "prof", "pvt", "rep", "reps", "res", "rev", "sen", "sens", "sfc", "sgt", "sir", "sr", "supt", "surg"] },
             s = {},
             u = Object.keys(o);for (n = 0; n < u.length; n++) {
            for (i = o[u[n]], a = 0; a < i.length; a++) {
               s[i[a]] = u[n];
            }
         }e.exports = s;
      }, {}], 210: [function (t, e, r) {
         "use strict";
         e.exports = [t("./abbreviations"), t("./irregularAdjectives").lexicon, t("./numbers").lexicon, t("./orgWords")];
      }, { "./abbreviations": 209, "./irregularAdjectives": 211, "./numbers": 213, "./orgWords": 214 }], 211: [function (t, e, r) {
         "use strict";
         var n = { bad: "badly", best: "best", early: "early", fast: "fast", good: "well", hard: "hard", icy: "icily", idle: "idly", late: "late", latter: "latter", little: "little", long: "long", low: "low", male: "manly", public: "publicly", simple: "simply", single: "singly", special: "especially", straight: "straight", vague: "vaguely", well: "well", whole: "wholly", wrong: "wrong" },
             i = { grey: "greyer", gray: "grayer", green: "greener", yellow: "yellower", red: "redder", good: "better", well: "better", bad: "worse", sad: "sadder", big: "bigger" },
             a = { nice: "nicest", late: "latest", hard: "hardest", inner: "innermost", outer: "outermost", far: "furthest", worse: "worst", bad: "worst", good: "best", big: "biggest", large: "largest" },
             o = function o(t, e, r) {
            var n,
                i = Object.keys(e);for (n = 0; n < i.length; n++) {
               t[i[n]] = "Comparable", void 0 === t[e[i[n]]] && (t[e[i[n]]] = r);
            }return t;
         },
             s = o({}, a, "Superlative");s = o(s, i, "Comparative"), s = o(s, n, "Adverb"), e.exports = { lexicon: s, toAdverb: n, toComparative: i, toSuperlative: a };
      }, {}], 212: [function (t, e, r) {
         "use strict";
         e.exports = { "20th century fox": "Organization", "3m": "Organization", "7 eleven": "Organization", "7-eleven": "Organization", g8: "Organization", "motel 6": "Organization", vh1: "Organization" };
      }, {}], 213: [function (t, e, r) {
         "use strict";
         var n = { ones: { zero: 0, one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9 }, teens: { ten: 10, eleven: 11, twelve: 12, thirteen: 13, fourteen: 14, fifteen: 15, sixteen: 16, seventeen: 17, eighteen: 18, nineteen: 19 }, tens: { twenty: 20, thirty: 30, forty: 40, fifty: 50, sixty: 60, seventy: 70, eighty: 80, ninety: 90 }, multiples: { hundred: 100, thousand: 1e3, grand: 1e3, million: 1e6, billion: 1e9, trillion: 1e12, quadrillion: 1e15, quintillion: 1e18, sextillion: 1e21, septillion: 1e24 } },
             i = { ones: { zeroth: 0, first: 1, second: 2, third: 3, fourth: 4, fifth: 5, sixth: 6, seventh: 7, eighth: 8, ninth: 9 }, teens: { tenth: 10, eleventh: 11, twelfth: 12, thirteenth: 13, fourteenth: 14, fifteenth: 15, sixteenth: 16, seventeenth: 17, eighteenth: 18, nineteenth: 19 }, tens: { twentieth: 20, thirtieth: 30, fourtieth: 40, fiftieth: 50, sixtieth: 60, seventieth: 70, eightieth: 80, ninetieth: 90 }, multiples: { hundredth: 100, thousandth: 1e3, millionth: 1e6, billionth: 1e9, trillionth: 1e12, quadrillionth: 1e15, quintillionth: 1e18, sextillionth: 1e21, septillionth: 1e24 } },
             a = { yotta: 1, zetta: 1, exa: 1, peta: 1, tera: 1, giga: 1, mega: 1, kilo: 1, hecto: 1, deka: 1, deci: 1, centi: 1, milli: 1, micro: 1, nano: 1, pico: 1, femto: 1, atto: 1, zepto: 1, yocto: 1, square: 1, cubic: 1, quartic: 1 },
             o = {},
             s = {},
             u = {};Object.keys(i).forEach(function (t) {
            var e,
                r = Object.keys(i[t]),
                a = Object.keys(n[t]);for (e = 0; e < r.length; e++) {
               o[a[e]] = r[e], s[r[e]] = a[e], u[r[e]] = ["Ordinal", "TextValue"], u[a[e]] = ["Cardinal", "TextValue"], "multiples" === t && (u[r[e]].push("Multiple"), u[a[e]].push("Multiple"));
            }
         }), e.exports = { toOrdinal: o, toCardinal: s, cardinal: n, ordinal: i, prefixes: a, lexicon: u };
      }, {}], 214: [function (t, e, r) {
         "use strict";
         var n = ["administration", "agence", "agences", "agencies", "agency", "airlines", "airways", "army", "assoc", "associates", "association", "assurance", "authority", "autorite", "aviation", "bank", "banque", "board", "boys", "brands", "brewery", "brotherhood", "brothers", "building society", "bureau", "cafe", "caisse", "capital", "care", "cathedral", "center", "central bank", "centre", "chemicals", "choir", "chronicle", "church", "circus", "clinic", "clinique", "club", "co", "coalition", "coffee", "collective", "college", "commission", "committee", "communications", "community", "company", "comprehensive", "computers", "confederation", "conference", "conseil", "consulting", "containers", "corporation", "corps", "council", "crew", "daily news", "data", "departement", "department", "department store", "departments", "design", "development", "directorate", "division", "drilling", "education", "eglise", "electric", "electricity", "energy", "ensemble", "enterprise", "enterprises", "entertainment", "estate", "etat", "evening news", "faculty", "federation", "financial", "fm", "foundation", "fund", "gas", "gazette", "girls", "government", "group", "guild", "health authority", "herald", "holdings", "hospital", "hotel", "hotels", "inc", "industries", "institut", "institute", "institute of technology", "institutes", "insurance", "international", "interstate", "investment", "investments", "investors", "journal", "laboratory", "labs", "liberation army", "limited", "local authority", "local health authority", "machines", "magazine", "management", "marine", "marketing", "markets", "media", "memorial", "mercantile exchange", "ministere", "ministry", "military", "mobile", "motor", "motors", "musee", "museum", "news", "news service", "observatory", "office", "oil", "optical", "orchestra", "organization", "partners", "partnership", "people's party", "petrol", "petroleum", "pharmacare", "pharmaceutical", "pharmaceuticals", "pizza", "plc", "police", "polytechnic", "post", "power", "press", "productions", "quartet", "radio", "regional authority", "regional health authority", "reserve", "resources", "restaurant", "restaurants", "savings", "school", "securities", "service", "services", "social club", "societe", "society", "sons", "standard", "state police", "state university", "stock exchange", "subcommittee", "syndicat", "systems", "telecommunications", "telegraph", "television", "times", "tribunal", "tv", "union", "university", "utilities", "workers"];e.exports = n.reduce(function (t, e) {
            return t[e] = "Noun", t;
         }, {});
      }, {}], 215: [function (t, e, r) {
         "use strict";
         var n = [null, "PastTense", "PresentTense", "Gerund", "Participle"],
             i = function i(t) {
            var e = t.split("|");return e.reduce(function (t, e) {
               var r,
                   i,
                   a = e.split(":"),
                   o = a[0],
                   s = a[1].split(","),
                   u = o + s[0];for ("_" === s[0] && (u = o), t[u] = {}, r = 1; r < n.length; r++) {
                  i = a[0] + s[r], "_" === s[r] && (i = a[0]), s[r] && (t[u][n[r]] = i);
               }return t;
            }, {});
         };e.exports = i;
      }, {}], 216: [function (t, e, r) {
         "use strict";
         var n = { words: t("efrt-unpack"), plurals: t("./plurals"), conjugations: t("./conjugations"), keyValue: t("./key-value") },
             i = function i(t) {
            var e = t;return "string" == typeof t && (e = JSON.parse(t)), e.words && "string" == typeof e.words && (e.words = n.words(e.words)), e.patterns && (e.patterns = n.keyValue(e.patterns)), e.regex && (e.regex = n.keyValue(e.regex)), e.plurals && "string" == typeof e.plurals && (e.plurals = n.plurals(e.plurals)), e.conjugations && "string" == typeof e.conjugations && (e.conjugations = n.conjugations(e.conjugations)), e;
         };e.exports = i;
      }, { "./conjugations": 215, "./key-value": 217, "./plurals": 218, "efrt-unpack": 1 }], 217: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            var e = Object.keys(t),
                r = !0;return e[0] && "string" == typeof t[e[0]] && (r = !1), e.reduce(function (e, n) {
               if (r === !0) {
                  var i = t[n];i.forEach(function (t) {
                     e[t] ? ("string" == typeof e[t] && (e[t] = [e[t]]), e[t].push(n)) : e[t] = n;
                  });
               } else e[n] = t[n];return e;
            }, {});
         };e.exports = n;
      }, {}], 218: [function (t, e, r) {
         "use strict";
         var n = function n(t) {
            return t.split(/,/g).reduce(function (t, e) {
               var r = e.split(/\|/g);return 3 === r.length ? t[r[0] + r[1]] = r[0] + r[2] : 2 === r.length ? t[r[0]] = r[0] + r[1] : t[r[0]] = r[0], t;
            }, {});
         };e.exports = n;
      }, {}] }, {}, [4])(4);
});

var nlp = exports.nlp = nlp;

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.load = load;
exports.importantWords = importantWords;
exports.importantTwoAndAll = importantTwoAndAll;

//Returns list of some words in the input, in order of importance (most to least)

// import nlp from 'compromise'
// const nlp = require('compromise')
// import {nlp} from '../node_modules/compromise/builds/compromise.es6.min.js'
// const nlp = require('../node_modules/compromise/builds/compromise.es6.min.js')
// import {nlp} from './compromise.min'
var nlp = __webpack_require__(534);

function load(name) {
  delete __webpack_require__.c[/*require.resolve*/(!(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))];
  return !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
}

var verbs = "gets".split(" ");
var nouns = "you me him her I".split(" ");
var articles = "a an the".split(" ");
var others = "can".split(" ");

function getPOS(word) {
  word = word.toLowerCase();
  if (verbs.indexOf(word) >= 0) {
    return "verb";
  }
  if (nouns.indexOf(word) >= 0) {
    return "noun";
  }
  if (articles.indexOf(word) >= 0) {
    return "article";
  }
  if (others.indexOf(word) >= 0) {
    return "other";
  }

  var r = nlp(word);
  if (r.nouns().out('string') != "") {
    return "noun";
  } else if (r.verbs().out('string') != "") {
    return "verb";
  } else if (r.adjectives().out('string') != "") {
    return "adjective";
  } else if (r.adverbs().out('string') != "") {
    return "adverb";
  }
}

function importantWords(text) {
  var words = nlp.tokenize(text).out("string").split(" ");
  var poss = words.map(function (w) {
    return getPOS(w);
  });
  console.log(poss);
  // return sortByImportance(words, poss);
  var importances = poss.map(function (word, i, arr) {
    return getImportance(words, poss, i);
  });
  return importances;
}

function importantTwoAndAll(text) {
  var importancies = importantWords(text);
  console.log(importancies);
  var biggest = 0;
  var biggIndex = importancies.reduce(function (iMax, x, i, arr) {
    return x > arr[iMax] ? i : iMax;
  }, 0);
  var start = biggIndex == 0 ? 1 : 0;
  var secondIndex = importancies.reduce(function (iMax, x, i, arr) {
    return x > arr[iMax] && i != biggIndex ? i : iMax;
  }, start);

  return [biggIndex, secondIndex, nlp.tokenize(text).out("string").split(" ")];
}

function sortByImportance(words, poss) {
  var importances = poss.map(function (word, i, arr) {
    return getImportance(words, poss, i);
  });
  return sortWithImportance(words, importances);
}

function getImportance(words, poss, i) {
  var prevp = poss[i - 1];
  var wordp = poss[i];
  var nextp = poss[i + 1];

  var prev = words[i - 1];
  var word = words[i];
  var next = words[i + 1];

  var importance = 0;
  if (wordp == "noun") {
    importance += 1;
  }
  if (wordp == "noun" && nextp == "verb") {
    importance += 1;
  }
  if (wordp == "noun" && (prevp == "verb" || prevp == "article")) {
    importance += 0.5;
  }
  if (prevp == "adjective") {
    importance += 1;
  }
  if (nextp == "noun" || nextp == "adverb") {
    importance += 0.5;
  }

  if (i == 0 && (wordp == "noun" && nextp != "noun" || wordp == "verb")) {
    importance += 2;
  }

  if (i == words.length - 1 && wordp == "verb") {
    importance += 2;
  }

  return importance;
}

var zip = function zip(rows) {
  return rows[0].map(function (_, c) {
    return rows.map(function (row) {
      return row[c];
    });
  });
};

function sortWithImportance(valList, importanceList) {
  var list = zip([valList, importanceList]);
  list.sort(function (_ref, _ref2) {
    var _ref4 = _slicedToArray(_ref, 2),
        v = _ref4[0],
        i = _ref4[1];

    var _ref3 = _slicedToArray(_ref2, 2),
        v1 = _ref3[0],
        i1 = _ref3[1];

    return i1 - i;
  });
  return list.map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
        v = _ref6[0],
        i = _ref6[1];

    return v;
  });
}

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mixWords = mixWords;

var _spoon = __webpack_require__(539);

var _ipa = __webpack_require__(33);

var _rhyme = __webpack_require__(538);

function mixWords(word1, word2) {
  var rhymes1 = (0, _rhyme.findRhymes)(word1);
  var rhymes2 = (0, _rhyme.findRhymes)(word2);
  if (rhymes1.length + rhymes2.length > 0 && Math.random() < .5) {
    var _words = [{ type: "TextWord", val: "" }, { type: "TextWord", val: "" }];
    if (rhymes1.length > 0) {
      _words[0].val = rhymes1[Math.floor(Math.random() * rhymes1.length)];
    } else {
      _words[0].val = word1;
    }
    if (rhymes2.length > 0) {
      _words[1].val = rhymes2[Math.floor(Math.random() * rhymes2.length)];
    } else {
      _words[1].val = word2;
    }
    return _words;
  }
  var words = (0, _spoon.spoon)(word1, word2);
  if (words) {
    words[0] = { type: "PhonemeWord", val: (0, _ipa.arpaToIpa)(words[0]) };
    words[1] = { type: "PhonemeWord", val: (0, _ipa.arpaToIpa)(words[1]) };
    return words;
  } else {
    return [{ type: "TextWord", val: word1 }, { type: "TextWord", val: word2 }];
  }
}

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.moreLike = moreLike;

var _importantWords = __webpack_require__(535);

var _mixWords3 = __webpack_require__(536);

function moreLike(input) {
  var innerText;

  var _importantTwoAndAll = (0, _importantWords.importantTwoAndAll)(input),
      _importantTwoAndAll2 = _slicedToArray(_importantTwoAndAll, 3),
      i1 = _importantTwoAndAll2[0],
      i2 = _importantTwoAndAll2[1],
      all = _importantTwoAndAll2[2];

  if (all.length <= 2) {
    innerText = input;
  } else {
    var word1 = all[i1];
    var word2 = all[i2];

    var allAsWords = all.map(function (w) {
      return {
        type: "TextWord",
        val: w };
    });

    allAsWords;

    //do swap and whatever

    var _mixWords = (0, _mixWords3.mixWords)(word1, word2),
        _mixWords2 = _slicedToArray(_mixWords, 2),
        new1 = _mixWords2[0],
        new2 = _mixWords2[1];

    allAsWords[i1] = new1;
    allAsWords[i2] = new2;
    innerText = allAsWords.map(formatWord).join(" ");
  }

  return "more like " + innerText + ".";
}

function formatWord(word) {
  function phonemeText(word) {
    return "<phoneme alphabet=\"ipa\" ph=\"" + word.val + "\">placeholder</phoneme>";
  }
  if (word.type == "PhonemeWord") {
    return phonemeText(word);
  } else {
    return word.val;
  }
}

/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rhymeMap = exports.rhymes = undefined;
exports.getUltima = getUltima;
exports.findRhymes = findRhymes;

var _rhymeDict = __webpack_require__(68);

var _ipa = __webpack_require__(33);

var rhymes = exports.rhymes = (0, _rhymeDict.getRhymes)();
var rhymeMap = exports.rhymeMap = makeRhymeMap(rhymes);

function makeRhymeMap(prons) {
  var rMap = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.keys(prons)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      var ultima = getUltima(prons[key]);
      if (!rMap[ultima]) {
        rMap[ultima] = [key];
      } else {
        rMap[ultima].push(key);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return rMap;
}

function getUltima(pron) {
  var i = pron.length - 1;
  var index = 0;
  var foundLastVowel = false;
  while (i >= 0) {
    if (foundLastVowel) {
      if ((0, _ipa.isVowel)(pron[i])) {
        index = i - 1;
        break;
      }
    } else {
      if ((0, _ipa.isVowel)(pron[i])) {
        foundLastVowel = true;
        index = i - 1;
      }
    }
    i--;
  }
  return pron.slice(index + 1).join("");
}

function findRhymes(word) {
  word = word.toUpperCase();
  if (rhymes[word]) {
    var initialRhymes = rhymeMap[getUltima(rhymes[word])];
    var z = initialRhymes.indexOf(word);
    if (z > -1) {
      initialRhymes = initialRhymes.splice(z, 1);
    }
    return initialRhymes;
  } else {
    return [];
  }
}

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spoon = spoon;

var _rhymeDict = __webpack_require__(68);

var _ipa = __webpack_require__(33);

var rhymes = (0, _rhymeDict.getRhymes)();

function spoon(word1, word2) {
  word1 = word1.toUpperCase();
  word2 = word2.toUpperCase();
  if (rhymes[word1.toUpperCase()] && rhymes[word2.toUpperCase()]) {
    var split1 = sliceStart(rhymes[word1]);
    var split2 = sliceStart(rhymes[word2]);
    var pron1 = split2[0].concat(split1[1]);
    var pron2 = split1[0].concat(split2[1]);
    return [pron1, pron2];
  } else {
    return null;
  }
}

function sliceStart(pron) {
  var i = 0;
  while (i < pron.length) {
    if (_ipa.vowelPhonemes[pron[i].substring(0, 2)]) {
      break;
    }
    i++;
  }
  return [pron.slice(0, i), pron.slice(i, pron.length)];
}

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _sprintf = __webpack_require__(541);

exports.default = {
  name: 'sprintf',
  type: 'postProcessor',

  process: function process(value, key, options) {
    if (!options.sprintf) return value;

    if (Object.prototype.toString.apply(options.sprintf) === '[object Array]') {
      return (0, _sprintf.vsprintf)(value, options.sprintf);
    } else if (_typeof(options.sprintf) === 'object') {
      return (0, _sprintf.sprintf)(value, options.sprintf);
    }

    return value;
  },
  overloadTranslationOptionHandler: function overloadTranslationOptionHandler(args) {
    var values = [];

    for (var i = 1; i < args.length; i++) {
      values.push(args[i]);
    }

    return {
      postProcess: 'sprintf',
      sprintf: values
    };
  }
};

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sprintf = sprintf;
exports.vsprintf = vsprintf;
var re = {
    not_string: /[^s]/,
    number: /[diefg]/,
    json: /[j]/,
    not_json: /[^j]/,
    text: /^[^\x25]+/,
    modulo: /^\x25{2}/,
    placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,
    key: /^([a-z_][a-z_\d]*)/i,
    key_access: /^\.([a-z_][a-z_\d]*)/i,
    index_access: /^\[(\d+)\]/,
    sign: /^[\+\-]/
};

function sprintf() {
    var key = arguments[0],
        cache = sprintf.cache;
    if (!(cache[key] && cache.hasOwnProperty(key))) {
        cache[key] = sprintf.parse(key);
    }
    return sprintf.format.call(null, cache[key], arguments);
}

sprintf.format = function (parse_tree, argv) {
    var cursor = 1,
        tree_length = parse_tree.length,
        node_type = "",
        arg,
        output = [],
        i,
        k,
        match,
        pad,
        pad_character,
        pad_length,
        is_positive = true,
        sign = "";
    for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === "string") {
            output[output.length] = parse_tree[i];
        } else if (node_type === "array") {
            match = parse_tree[i]; // convenience purposes only
            if (match[2]) {
                // keyword argument
                arg = argv[cursor];
                for (k = 0; k < match[2].length; k++) {
                    if (!arg.hasOwnProperty(match[2][k])) {
                        throw new Error(sprintf("[sprintf] property '%s' does not exist", match[2][k]));
                    }
                    arg = arg[match[2][k]];
                }
            } else if (match[1]) {
                // positional argument (explicit)
                arg = argv[match[1]];
            } else {
                // positional argument (implicit)
                arg = argv[cursor++];
            }

            if (get_type(arg) == "function") {
                arg = arg();
            }

            if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && get_type(arg) != "number" && isNaN(arg)) {
                throw new TypeError(sprintf("[sprintf] expecting number but found %s", get_type(arg)));
            }

            if (re.number.test(match[8])) {
                is_positive = arg >= 0;
            }

            switch (match[8]) {
                case "b":
                    arg = arg.toString(2);
                    break;
                case "c":
                    arg = String.fromCharCode(arg);
                    break;
                case "d":
                case "i":
                    arg = parseInt(arg, 10);
                    break;
                case "j":
                    arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0);
                    break;
                case "e":
                    arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential();
                    break;
                case "f":
                    arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);
                    break;
                case "g":
                    arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg);
                    break;
                case "o":
                    arg = arg.toString(8);
                    break;
                case "s":
                    arg = (arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg;
                    break;
                case "u":
                    arg = arg >>> 0;
                    break;
                case "x":
                    arg = arg.toString(16);
                    break;
                case "X":
                    arg = arg.toString(16).toUpperCase();
                    break;
            }
            if (re.json.test(match[8])) {
                output[output.length] = arg;
            } else {
                if (re.number.test(match[8]) && (!is_positive || match[3])) {
                    sign = is_positive ? "+" : "-";
                    arg = arg.toString().replace(re.sign, "");
                } else {
                    sign = "";
                }
                pad_character = match[4] ? match[4] === "0" ? "0" : match[4].charAt(1) : " ";
                pad_length = match[6] - (sign + arg).length;
                pad = match[6] ? pad_length > 0 ? str_repeat(pad_character, pad_length) : "" : "";
                output[output.length] = match[5] ? sign + arg + pad : pad_character === "0" ? sign + pad + arg : pad + sign + arg;
            }
        }
    }
    return output.join("");
};

sprintf.cache = {};

sprintf.parse = function (fmt) {
    var _fmt = fmt,
        match = [],
        parse_tree = [],
        arg_names = 0;
    while (_fmt) {
        if ((match = re.text.exec(_fmt)) !== null) {
            parse_tree[parse_tree.length] = match[0];
        } else if ((match = re.modulo.exec(_fmt)) !== null) {
            parse_tree[parse_tree.length] = "%";
        } else if ((match = re.placeholder.exec(_fmt)) !== null) {
            if (match[2]) {
                arg_names |= 1;
                var field_list = [],
                    replacement_field = match[2],
                    field_match = [];
                if ((field_match = re.key.exec(replacement_field)) !== null) {
                    field_list[field_list.length] = field_match[1];
                    while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                        if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                            field_list[field_list.length] = field_match[1];
                        } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                            field_list[field_list.length] = field_match[1];
                        } else {
                            throw new SyntaxError("[sprintf] failed to parse named argument key");
                        }
                    }
                } else {
                    throw new SyntaxError("[sprintf] failed to parse named argument key");
                }
                match[2] = field_list;
            } else {
                arg_names |= 2;
            }
            if (arg_names === 3) {
                throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
            }
            parse_tree[parse_tree.length] = match;
        } else {
            throw new SyntaxError("[sprintf] unexpected placeholder");
        }
        _fmt = _fmt.substring(match[0].length);
    }
    return parse_tree;
};

function vsprintf(fmt, argv, _argv) {
    _argv = (argv || []).slice(0);
    _argv.splice(0, 0, fmt);
    return sprintf.apply(null, _argv);
}

/**
 * helpers
 */
function get_type(variable) {
    return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
}

function str_repeat(input, multiplier) {
    return Array(multiplier + 1).join(input);
}

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(540).default;


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _utils = __webpack_require__(14);

var utils = _interopRequireWildcard(_utils);

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

var _EventEmitter2 = __webpack_require__(13);

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function remove(arr, what) {
  var found = arr.indexOf(what);

  while (found !== -1) {
    arr.splice(found, 1);
    found = arr.indexOf(what);
  }
}

var Connector = function (_EventEmitter) {
  _inherits(Connector, _EventEmitter);

  function Connector(backend, store, services) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, Connector);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.options = options;
    _this.logger = _logger2.default.create('backendConnector');

    _this.state = {};
    _this.queue = [];

    _this.backend && _this.backend.init && _this.backend.init(services, options.backend, options);
    return _this;
  }

  Connector.prototype.queueLoad = function queueLoad(languages, namespaces, callback) {
    var _this2 = this;

    // find what needs to be loaded
    var toLoad = [],
        pending = [],
        toLoadLanguages = [],
        toLoadNamespaces = [];

    languages.forEach(function (lng) {
      var hasAllNamespaces = true;

      namespaces.forEach(function (ns) {
        var name = lng + '|' + ns;

        if (_this2.store.hasResourceBundle(lng, ns)) {
          _this2.state[name] = 2; // loaded
        } else if (_this2.state[name] < 0) {
          // nothing to do for err
        } else if (_this2.state[name] === 1) {
          if (pending.indexOf(name) < 0) pending.push(name);
        } else {
          _this2.state[name] = 1; // pending

          hasAllNamespaces = false;

          if (pending.indexOf(name) < 0) pending.push(name);
          if (toLoad.indexOf(name) < 0) toLoad.push(name);
          if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
        }
      });

      if (!hasAllNamespaces) toLoadLanguages.push(lng);
    });

    if (toLoad.length || pending.length) {
      this.queue.push({
        pending: pending,
        loaded: {},
        errors: [],
        callback: callback
      });
    }

    return {
      toLoad: toLoad,
      pending: pending,
      toLoadLanguages: toLoadLanguages,
      toLoadNamespaces: toLoadNamespaces
    };
  };

  Connector.prototype.loaded = function loaded(name, err, data) {
    var _this3 = this;

    var _name$split = name.split('|'),
        _name$split2 = _slicedToArray(_name$split, 2),
        lng = _name$split2[0],
        ns = _name$split2[1];

    if (err) this.emit('failedLoading', lng, ns, err);

    if (data) {
      this.store.addResourceBundle(lng, ns, data);
    }

    // set loaded
    this.state[name] = err ? -1 : 2;
    // callback if ready
    this.queue.forEach(function (q) {
      utils.pushPath(q.loaded, [lng], ns);
      remove(q.pending, name);

      if (err) q.errors.push(err);

      if (q.pending.length === 0 && !q.done) {
        q.errors.length ? q.callback(q.errors) : q.callback();
        _this3.emit('loaded', q.loaded);
        q.done = true;
      }
    });

    // remove done load requests
    this.queue = this.queue.filter(function (q) {
      return !q.done;
    });
  };

  Connector.prototype.read = function read(lng, ns, fcName, tried, wait, callback) {
    var _this4 = this;

    if (!tried) tried = 0;
    if (!wait) wait = 250;

    if (!lng.length) return callback(null, {}); // noting to load

    this.backend[fcName](lng, ns, function (err, data) {
      if (err && data /* = retryFlag */ && tried < 5) {
        setTimeout(function () {
          _this4.read.call(_this4, lng, ns, fcName, ++tried, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    });
  };

  Connector.prototype.load = function load(languages, namespaces, callback) {
    var _this5 = this;

    if (!this.backend) {
      this.logger.warn('No backend was added via i18next.use. Will not load resources.');
      return callback && callback();
    }
    var options = _extends({}, this.backend.options, this.options.backend);

    if (typeof languages === 'string') languages = this.services.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === 'string') namespaces = [namespaces];

    var toLoad = this.queueLoad(languages, namespaces, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback(); // nothing to load and no pendings...callback now
      return; // pendings will trigger callback
    }

    // load with multi-load
    if (options.allowMultiLoading && this.backend.readMulti) {
      this.read(toLoad.toLoadLanguages, toLoad.toLoadNamespaces, 'readMulti', null, null, function (err, data) {
        if (err) _this5.logger.warn('loading namespaces ' + toLoad.toLoadNamespaces.join(', ') + ' for languages ' + toLoad.toLoadLanguages.join(', ') + ' via multiloading failed', err);
        if (!err && data) _this5.logger.log('loaded namespaces ' + toLoad.toLoadNamespaces.join(', ') + ' for languages ' + toLoad.toLoadLanguages.join(', ') + ' via multiloading', data);

        toLoad.toLoad.forEach(function (name) {
          var _name$split3 = name.split('|'),
              _name$split4 = _slicedToArray(_name$split3, 2),
              l = _name$split4[0],
              n = _name$split4[1];

          var bundle = utils.getPath(data, [l, n]);
          if (bundle) {
            _this5.loaded(name, err, bundle);
          } else {
            var _err = 'loading namespace ' + n + ' for language ' + l + ' via multiloading failed';
            _this5.loaded(name, _err);
            _this5.logger.error(_err);
          }
        });
      });
    }

    // load one by one
    else {
        (function () {
          var readOne = function readOne(name) {
            var _this6 = this;

            var _name$split5 = name.split('|'),
                _name$split6 = _slicedToArray(_name$split5, 2),
                lng = _name$split6[0],
                ns = _name$split6[1];

            this.read(lng, ns, 'read', null, null, function (err, data) {
              if (err) _this6.logger.warn('loading namespace ' + ns + ' for language ' + lng + ' failed', err);
              if (!err && data) _this6.logger.log('loaded namespace ' + ns + ' for language ' + lng, data);

              _this6.loaded(name, err, data);
            });
          };

          ;

          toLoad.toLoad.forEach(function (name) {
            readOne.call(_this5, name);
          });
        })();
      }
  };

  Connector.prototype.reload = function reload(languages, namespaces) {
    var _this7 = this;

    if (!this.backend) {
      this.logger.warn('No backend was added via i18next.use. Will not load resources.');
    }
    var options = _extends({}, this.backend.options, this.options.backend);

    if (typeof languages === 'string') languages = this.services.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === 'string') namespaces = [namespaces];

    // load with multi-load
    if (options.allowMultiLoading && this.backend.readMulti) {
      this.read(languages, namespaces, 'readMulti', null, null, function (err, data) {
        if (err) _this7.logger.warn('reloading namespaces ' + namespaces.join(', ') + ' for languages ' + languages.join(', ') + ' via multiloading failed', err);
        if (!err && data) _this7.logger.log('reloaded namespaces ' + namespaces.join(', ') + ' for languages ' + languages.join(', ') + ' via multiloading', data);

        languages.forEach(function (l) {
          namespaces.forEach(function (n) {
            var bundle = utils.getPath(data, [l, n]);
            if (bundle) {
              _this7.loaded(l + '|' + n, err, bundle);
            } else {
              var _err2 = 'reloading namespace ' + n + ' for language ' + l + ' via multiloading failed';
              _this7.loaded(l + '|' + n, _err2);
              _this7.logger.error(_err2);
            }
          });
        });
      });
    }

    // load one by one
    else {
        (function () {
          var readOne = function readOne(name) {
            var _this8 = this;

            var _name$split7 = name.split('|'),
                _name$split8 = _slicedToArray(_name$split7, 2),
                lng = _name$split8[0],
                ns = _name$split8[1];

            this.read(lng, ns, 'read', null, null, function (err, data) {
              if (err) _this8.logger.warn('reloading namespace ' + ns + ' for language ' + lng + ' failed', err);
              if (!err && data) _this8.logger.log('reloaded namespace ' + ns + ' for language ' + lng, data);

              _this8.loaded(name, err, data);
            });
          };

          ;

          languages.forEach(function (l) {
            namespaces.forEach(function (n) {
              readOne.call(_this7, l + '|' + n);
            });
          });
        })();
      }
  };

  Connector.prototype.saveMissing = function saveMissing(languages, namespace, key, fallbackValue) {
    if (this.backend && this.backend.create) this.backend.create(languages, namespace, key, fallbackValue);

    // write to store to avoid resending
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  };

  return Connector;
}(_EventEmitter3.default);

exports.default = Connector;

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = __webpack_require__(14);

var utils = _interopRequireWildcard(_utils);

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

var _EventEmitter2 = __webpack_require__(13);

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Connector = function (_EventEmitter) {
  _inherits(Connector, _EventEmitter);

  function Connector(cache, store, services) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, Connector);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this.cache = cache;
    _this.store = store;
    _this.services = services;
    _this.options = options;
    _this.logger = _logger2.default.create('cacheConnector');

    _this.cache && _this.cache.init && _this.cache.init(services, options.cache, options);
    return _this;
  }

  Connector.prototype.load = function load(languages, namespaces, callback) {
    var _this2 = this;

    if (!this.cache) return callback && callback();
    var options = _extends({}, this.cache.options, this.options.cache);

    if (typeof languages === 'string') languages = this.services.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === 'string') namespaces = [namespaces];

    if (options.enabled) {
      this.cache.load(languages, function (err, data) {
        if (err) _this2.logger.error('loading languages ' + languages.join(', ') + ' from cache failed', err);
        if (data) {
          for (var l in data) {
            for (var n in data[l]) {
              if (n === 'i18nStamp') continue;
              var bundle = data[l][n];
              if (bundle) _this2.store.addResourceBundle(l, n, bundle);
            }
          }
        }
        if (callback) callback();
      });
    } else {
      if (callback) callback();
    }
  };

  Connector.prototype.save = function save() {
    if (this.cache && this.options.cache && this.options.cache.enabled) this.cache.save(this.store.data);
  };

  return Connector;
}(_EventEmitter3.default);

exports.default = Connector;

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(14);

var utils = _interopRequireWildcard(_utils);

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Interpolator = function () {
  function Interpolator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Interpolator);

    this.logger = _logger2.default.create('interpolator');

    this.init(options, true);
  }

  Interpolator.prototype.init = function init() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var reset = arguments[1];

    if (reset) {
      this.options = options;
      this.format = options.interpolation && options.interpolation.format || function (value) {
        return value;
      };
    }
    if (!options.interpolation) options.interpolation = { escapeValue: true };

    var iOpts = options.interpolation;

    this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;

    this.prefix = iOpts.prefix ? utils.regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
    this.suffix = iOpts.suffix ? utils.regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
    this.formatSeparator = iOpts.formatSeparator ? utils.regexEscape(iOpts.formatSeparator) : iOpts.formatSeparator || ',';

    this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
    this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';

    this.nestingPrefix = iOpts.nestingPrefix ? utils.regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || utils.regexEscape('$t(');
    this.nestingSuffix = iOpts.nestingSuffix ? utils.regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || utils.regexEscape(')');

    // the regexp
    this.resetRegExp();
  };

  Interpolator.prototype.reset = function reset() {
    if (this.options) this.init(this.options);
  };

  Interpolator.prototype.resetRegExp = function resetRegExp() {
    // the regexp
    var regexpStr = this.prefix + '(.+?)' + this.suffix;
    this.regexp = new RegExp(regexpStr, 'g');

    var regexpUnescapeStr = this.prefix + this.unescapePrefix + '(.+?)' + this.unescapeSuffix + this.suffix;
    this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');

    var nestingRegexpStr = this.nestingPrefix + '(.+?)' + this.nestingSuffix;
    this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
  };

  Interpolator.prototype.interpolate = function interpolate(str, data, lng) {
    var _this = this;

    var match = void 0,
        value = void 0;

    function regexSafe(val) {
      return val.replace(/\$/g, '$$$$');
    }

    var handleFormat = function handleFormat(key) {
      if (key.indexOf(_this.formatSeparator) < 0) return utils.getPath(data, key);

      var p = key.split(_this.formatSeparator);
      var k = p.shift().trim();
      var f = p.join(_this.formatSeparator).trim();

      return _this.format(utils.getPath(data, k), f, lng);
    };

    this.resetRegExp();

    // unescape if has unescapePrefix/Suffix
    while (match = this.regexpUnescape.exec(str)) {
      var _value = handleFormat(match[1].trim());
      str = str.replace(match[0], _value);
      this.regexpUnescape.lastIndex = 0;
    }

    // regular escape on demand
    while (match = this.regexp.exec(str)) {
      value = handleFormat(match[1].trim());
      if (typeof value !== 'string') value = utils.makeString(value);
      if (!value) {
        this.logger.warn('missed to pass in variable ' + match[1] + ' for interpolating ' + str);
        value = '';
      }
      value = this.escapeValue ? regexSafe(utils.escape(value)) : regexSafe(value);
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  };

  Interpolator.prototype.nest = function nest(str, fc) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var match = void 0,
        value = void 0;

    var clonedOptions = JSON.parse(JSON.stringify(options));
    clonedOptions.applyPostProcessor = false; // avoid post processing on nested lookup

    function regexSafe(val) {
      return val.replace(/\$/g, '$$$$');
    }

    // if value is something like "myKey": "lorem $(anotherKey, { "count": {{aValueInOptions}} })"
    function handleHasOptions(key) {
      if (key.indexOf(',') < 0) return key;

      var p = key.split(',');
      key = p.shift();
      var optionsString = p.join(',');
      optionsString = this.interpolate(optionsString, clonedOptions);

      try {
        clonedOptions = JSON.parse(optionsString);
      } catch (e) {
        this.logger.error('failed parsing options string in nesting for key ' + key, e);
      }

      return key;
    }

    // regular escape on demand
    while (match = this.nestingRegexp.exec(str)) {
      value = fc(handleHasOptions.call(this, match[1].trim()), clonedOptions);
      if (typeof value !== 'string') value = utils.makeString(value);
      if (!value) {
        this.logger.warn('missed to pass in variable ' + match[1] + ' for interpolating ' + str);
        value = '';
      }
      value = this.escapeValue ? regexSafe(utils.escape(value)) : regexSafe(value);
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  };

  return Interpolator;
}();

exports.default = Interpolator;

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

var LanguageUtil = function () {
  function LanguageUtil(options) {
    _classCallCheck(this, LanguageUtil);

    this.options = options;

    this.whitelist = this.options.whitelist || false;
    this.logger = _logger2.default.create('languageUtils');
  }

  LanguageUtil.prototype.getLanguagePartFromCode = function getLanguagePartFromCode(code) {
    if (code.indexOf('-') < 0) return code;

    var specialCases = ['NB-NO', 'NN-NO', 'nb-NO', 'nn-NO', 'nb-no', 'nn-no'];
    var p = code.split('-');
    return this.formatLanguageCode(specialCases.indexOf(code) > -1 ? p[1].toLowerCase() : p[0]);
  };

  LanguageUtil.prototype.getScriptPartFromCode = function getScriptPartFromCode(code) {
    if (code.indexOf('-') < 0) return null;

    var p = code.split('-');
    if (p.length === 2) return null;
    p.pop();
    return this.formatLanguageCode(p.join('-'));
  };

  LanguageUtil.prototype.getLanguagePartFromCode = function getLanguagePartFromCode(code) {
    if (code.indexOf('-') < 0) return code;

    var specialCases = ['NB-NO', 'NN-NO', 'nb-NO', 'nn-NO', 'nb-no', 'nn-no'];
    var p = code.split('-');
    return this.formatLanguageCode(specialCases.indexOf(code) > -1 ? p[1].toLowerCase() : p[0]);
  };

  LanguageUtil.prototype.formatLanguageCode = function formatLanguageCode(code) {
    // http://www.iana.org/assignments/language-tags/language-tags.xhtml
    if (typeof code === 'string' && code.indexOf('-') > -1) {
      var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
      var p = code.split('-');

      if (this.options.lowerCaseLng) {
        p = p.map(function (part) {
          return part.toLowerCase();
        });
      } else if (p.length === 2) {
        p[0] = p[0].toLowerCase();
        p[1] = p[1].toUpperCase();

        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
      } else if (p.length === 3) {
        p[0] = p[0].toLowerCase();

        // if lenght 2 guess it's a country
        if (p[1].length === 2) p[1] = p[1].toUpperCase();
        if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();

        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
      }

      return p.join('-');
    } else {
      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
  };

  LanguageUtil.prototype.isWhitelisted = function isWhitelisted(code, exactMatch) {
    if (this.options.load === 'languageOnly' || this.options.nonExplicitWhitelist && !exactMatch) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.whitelist || !this.whitelist.length || this.whitelist.indexOf(code) > -1 ? true : false;
  };

  LanguageUtil.prototype.getFallbackCodes = function getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === 'string') fallbacks = [fallbacks];
    if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;

    // asume we have an object defining fallbacks
    var found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks.default;

    return found || [];
  };

  LanguageUtil.prototype.toResolveHierarchy = function toResolveHierarchy(code, fallbackCode) {
    var _this = this;

    var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);

    var codes = [];
    var addCode = function addCode(code) {
      var exactMatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!code) return;
      if (_this.isWhitelisted(code, exactMatch)) {
        codes.push(code);
      } else {
        _this.logger.warn('rejecting non-whitelisted language code: ' + code);
      }
    };

    if (typeof code === 'string' && code.indexOf('-') > -1) {
      if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code), true);
      if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code), true);
      if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
    } else if (typeof code === 'string') {
      addCode(this.formatLanguageCode(code));
    }

    fallbackCodes.forEach(function (fc) {
      if (codes.indexOf(fc) < 0) addCode(_this.formatLanguageCode(fc));
    });

    return codes;
  };

  return LanguageUtil;
}();

;

exports.default = LanguageUtil;

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// definition http://translate.sourceforge.net/wiki/l10n/pluralforms
/* eslint-disable */
var sets = [{ lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'tg', 'ti', 'tr', 'uz', 'wa'], nr: [1, 2], fc: 1 }, { lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'es_ar', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'he', 'hi', 'hu', 'hy', 'ia', 'it', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt', 'pt_br', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'], nr: [1, 2], fc: 2 }, { lngs: ['ay', 'bo', 'cgg', 'fa', 'id', 'ja', 'jbo', 'ka', 'kk', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'], nr: [1], fc: 3 }, { lngs: ['be', 'bs', 'dz', 'hr', 'ru', 'sr', 'uk'], nr: [1, 2, 5], fc: 4 }, { lngs: ['ar'], nr: [0, 1, 2, 3, 11, 100], fc: 5 }, { lngs: ['cs', 'sk'], nr: [1, 2, 5], fc: 6 }, { lngs: ['csb', 'pl'], nr: [1, 2, 5], fc: 7 }, { lngs: ['cy'], nr: [1, 2, 3, 8], fc: 8 }, { lngs: ['fr'], nr: [1, 2], fc: 9 }, { lngs: ['ga'], nr: [1, 2, 3, 7, 11], fc: 10 }, { lngs: ['gd'], nr: [1, 2, 3, 20], fc: 11 }, { lngs: ['is'], nr: [1, 2], fc: 12 }, { lngs: ['jv'], nr: [0, 1], fc: 13 }, { lngs: ['kw'], nr: [1, 2, 3, 4], fc: 14 }, { lngs: ['lt'], nr: [1, 2, 10], fc: 15 }, { lngs: ['lv'], nr: [1, 2, 0], fc: 16 }, { lngs: ['mk'], nr: [1, 2], fc: 17 }, { lngs: ['mnk'], nr: [0, 1, 2], fc: 18 }, { lngs: ['mt'], nr: [1, 2, 11, 20], fc: 19 }, { lngs: ['or'], nr: [2, 1], fc: 2 }, { lngs: ['ro'], nr: [1, 2, 20], fc: 20 }, { lngs: ['sl'], nr: [5, 1, 2, 3], fc: 21 }];

var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _(n) {
    return Number(n != 1);
  },
  3: function _(n) {
    return 0;
  },
  4: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _(n) {
    return Number(n === 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _(n) {
    return Number(n >= 2);
  },
  10: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _(n) {
    return Number(n !== 0);
  },
  14: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _(n) {
    return Number(n == 1 || n % 10 == 1 ? 0 : 1);
  },
  18: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _(n) {
    return Number(n == 1 ? 0 : n === 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _(n) {
    return Number(n == 1 ? 0 : n === 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  }
};
/* eslint-enable */

function createRules() {
  var l,
      rules = {};
  sets.forEach(function (set) {
    set.lngs.forEach(function (l) {
      return rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}

var PluralResolver = function () {
  function PluralResolver(languageUtils) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, PluralResolver);

    this.languageUtils = languageUtils;
    this.options = options;

    this.logger = _logger2.default.create('pluralResolver');

    this.rules = createRules();
  }

  PluralResolver.prototype.addRule = function addRule(lng, obj) {
    this.rules[lng] = obj;
  };

  PluralResolver.prototype.getRule = function getRule(code) {
    return this.rules[this.languageUtils.getLanguagePartFromCode(code)];
  };

  PluralResolver.prototype.needsPlural = function needsPlural(code) {
    var rule = this.getRule(code);

    return rule && rule.numbers.length <= 1 ? false : true;
  };

  PluralResolver.prototype.getSuffix = function getSuffix(code, count) {
    var _this = this;

    var rule = this.getRule(code);

    if (rule) {
      var _ret = function () {
        if (rule.numbers.length === 1) return {
            v: ''
          }; // only singular

        var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
        var suffix = rule.numbers[idx];

        // special treatment for lngs only having singular and plural
        if (rule.numbers.length === 2 && rule.numbers[0] === 1) {
          if (suffix === 2) {
            suffix = 'plural';
          } else if (suffix === 1) {
            suffix = '';
          }
        }

        var returnSuffix = function returnSuffix() {
          return _this.options.prepend && suffix.toString() ? _this.options.prepend + suffix.toString() : suffix.toString();
        };

        // COMPATIBILITY JSON
        // v1
        if (_this.options.compatibilityJSON === 'v1') {
          if (suffix === 1) return {
              v: ''
            };
          if (typeof suffix === 'number') return {
              v: '_plural_' + suffix.toString()
            };
          return {
            v: returnSuffix()
          };
        }
        // v2
        else if (_this.options.compatibilityJSON === 'v2' || rule.numbers.length === 2 && rule.numbers[0] === 1) {
            return {
              v: returnSuffix()
            };
          }
          // v3 - gettext index
          else if (rule.numbers.length === 2 && rule.numbers[0] === 1) {
              return {
                v: returnSuffix()
              };
            }
        return {
          v: _this.options.prepend && idx.toString() ? _this.options.prepend + idx.toString() : idx.toString()
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else {
      this.logger.warn('no plural rule found for: ' + code);
      return '';
    }
  };

  return PluralResolver;
}();

;

exports.default = PluralResolver;

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _EventEmitter2 = __webpack_require__(13);

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

var _utils = __webpack_require__(14);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ResourceStore = function (_EventEmitter) {
  _inherits(ResourceStore, _EventEmitter);

  function ResourceStore() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { ns: ['translation'], defaultNS: 'translation' };

    _classCallCheck(this, ResourceStore);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this.data = data;
    _this.options = options;
    return _this;
  }

  ResourceStore.prototype.addNamespaces = function addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  };

  ResourceStore.prototype.removeNamespaces = function removeNamespaces(ns) {
    var index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  };

  ResourceStore.prototype.getResource = function getResource(lng, ns, key) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var keySeparator = options.keySeparator || this.options.keySeparator;
    if (keySeparator === undefined) keySeparator = '.';

    var path = [lng, ns];
    if (key && typeof key !== 'string') path = path.concat(key);
    if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
    }

    return utils.getPath(this.data, path);
  };

  ResourceStore.prototype.addResource = function addResource(lng, ns, key, value) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { silent: false };

    var keySeparator = this.options.keySeparator;
    if (keySeparator === undefined) keySeparator = '.';

    var path = [lng, ns];
    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      value = ns;
      ns = path[1];
    }

    this.addNamespaces(ns);

    utils.setPath(this.data, path, value);

    if (!options.silent) this.emit('added', lng, ns, key, value);
  };

  ResourceStore.prototype.addResources = function addResources(lng, ns, resources) {
    for (var m in resources) {
      if (typeof resources[m] === 'string') this.addResource(lng, ns, m, resources[m], { silent: true });
    }
    this.emit('added', lng, ns, resources);
  };

  ResourceStore.prototype.addResourceBundle = function addResourceBundle(lng, ns, resources, deep, overwrite) {
    var path = [lng, ns];
    if (lng.indexOf('.') > -1) {
      path = lng.split('.');
      deep = resources;
      resources = ns;
      ns = path[1];
    }

    this.addNamespaces(ns);

    var pack = utils.getPath(this.data, path) || {};

    if (deep) {
      utils.deepExtend(pack, resources, overwrite);
    } else {
      pack = _extends({}, pack, resources);
    }

    utils.setPath(this.data, path, pack);

    this.emit('added', lng, ns, resources);
  };

  ResourceStore.prototype.removeResourceBundle = function removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);

    this.emit('removed', lng, ns);
  };

  ResourceStore.prototype.hasResourceBundle = function hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== undefined;
  };

  ResourceStore.prototype.getResourceBundle = function getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;

    // TODO: COMPATIBILITY remove extend in v2.1.0
    if (this.options.compatibilityAPI === 'v1') return _extends({}, this.getResource(lng, ns));

    return this.getResource(lng, ns);
  };

  ResourceStore.prototype.toJSON = function toJSON() {
    return this.data;
  };

  return ResourceStore;
}(_EventEmitter3.default);

exports.default = ResourceStore;

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

var _EventEmitter2 = __webpack_require__(13);

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

var _postProcessor = __webpack_require__(70);

var _postProcessor2 = _interopRequireDefault(_postProcessor);

var _v = __webpack_require__(69);

var compat = _interopRequireWildcard(_v);

var _utils = __webpack_require__(14);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Translator = function (_EventEmitter) {
  _inherits(Translator, _EventEmitter);

  function Translator(services) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Translator);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    utils.copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector'], services, _this);

    _this.options = options;
    _this.logger = _logger2.default.create('translator');
    return _this;
  }

  Translator.prototype.changeLanguage = function changeLanguage(lng) {
    if (lng) this.language = lng;
  };

  Translator.prototype.exists = function exists(key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { interpolation: {} };

    if (this.options.compatibilityAPI === 'v1') {
      options = compat.convertTOptions(options);
    }

    return this.resolve(key, options) !== undefined;
  };

  Translator.prototype.extractFromKey = function extractFromKey(key, options) {
    var nsSeparator = options.nsSeparator || this.options.nsSeparator;
    if (nsSeparator === undefined) nsSeparator = ':';

    var namespaces = options.ns || this.options.defaultNS;
    if (nsSeparator && key.indexOf(nsSeparator) > -1) {
      var parts = key.split(nsSeparator);
      namespaces = parts[0];
      key = parts[1];
    }
    if (typeof namespaces === 'string') namespaces = [namespaces];

    return {
      key: key,
      namespaces: namespaces
    };
  };

  Translator.prototype.translate = function translate(keys) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {
      options = this.options.overloadTranslationOptionHandler(arguments);
    } else if (this.options.compatibilityAPI === 'v1') {
      options = compat.convertTOptions(options);
    }

    // non valid keys handling
    if (keys === undefined || keys === null || keys === '') return '';
    if (typeof keys === 'number') keys = String(keys);
    if (typeof keys === 'string') keys = [keys];

    // return key on CIMode
    var lng = options.lng || this.language;
    if (lng && lng.toLowerCase() === 'cimode') return keys[keys.length - 1];

    // separators
    var keySeparator = options.keySeparator || this.options.keySeparator || '.';

    // get namespace(s)

    var _extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
        key = _extractFromKey.key,
        namespaces = _extractFromKey.namespaces;

    var namespace = namespaces[namespaces.length - 1];

    // resolve from store
    var res = this.resolve(keys, options);

    var resType = Object.prototype.toString.apply(res);
    var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
    var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;

    // object
    if (res && typeof res !== 'string' && noObject.indexOf(resType) < 0 && !(joinArrays && resType === '[object Array]')) {
      if (!options.returnObjects && !this.options.returnObjects) {
        this.logger.warn('accessing an object - but returnObjects options is not enabled!');
        return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(key, res, options) : 'key \'' + key + ' (' + this.language + ')\' returned an object instead of string.';
      }

      var copy = resType === '[object Array]' ? [] : {}; // apply child translation on a copy

      for (var m in res) {
        copy[m] = this.translate('' + key + keySeparator + m, _extends({ joinArrays: false, ns: namespaces }, options));
      }
      res = copy;
    }
    // array special treatment
    else if (joinArrays && resType === '[object Array]') {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, key, options);
      }
      // string, empty or null
      else {
          var usedDefault = false,
              usedKey = false;

          // fallback value
          if (!this.isValidLookup(res) && options.defaultValue !== undefined) {
            usedDefault = true;
            res = options.defaultValue;
          }
          if (!this.isValidLookup(res)) {
            usedKey = true;
            res = key;
          }

          // save missing
          if (usedKey || usedDefault) {
            this.logger.log('missingKey', lng, namespace, key, res);

            var lngs = [];
            var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
            if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
              for (var i = 0; i < fallbackLngs.length; i++) {
                lngs.push(fallbackLngs[i]);
              }
            } else if (this.options.saveMissingTo === 'all') {
              lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
            } else {
              //(this.options.saveMissingTo === 'current' || (this.options.saveMissingTo === 'fallback' && this.options.fallbackLng[0] === false) ) {
              lngs.push(options.lng || this.language);
            }

            if (this.options.saveMissing) {
              if (this.options.missingKeyHandler) {
                this.options.missingKeyHandler(lngs, namespace, key, res);
              } else if (this.backendConnector && this.backendConnector.saveMissing) {
                this.backendConnector.saveMissing(lngs, namespace, key, res);
              }
            }

            this.emit('missingKey', lngs, namespace, key, res);
          }

          // extend
          res = this.extendTranslation(res, key, options);

          // append namespace if still key
          if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = namespace + ':' + key;

          // parseMissingKeyHandler
          if (usedKey && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);
        }

    // return
    return res;
  };

  Translator.prototype.extendTranslation = function extendTranslation(res, key, options) {
    var _this2 = this;

    if (options.interpolation) this.interpolator.init(_extends({}, options, { interpolation: _extends({}, this.options.interpolation, options.interpolation) }));

    // interpolate
    var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
    if (this.options.interpolation.defaultVariables) data = _extends({}, this.options.interpolation.defaultVariables, data);
    res = this.interpolator.interpolate(res, data, this.language);

    // nesting
    res = this.interpolator.nest(res, function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _this2.translate.apply(_this2, args);
    }, options);

    if (options.interpolation) this.interpolator.reset();

    // post process
    var postProcess = options.postProcess || this.options.postProcess;
    var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

    if (res !== undefined && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
      res = _postProcessor2.default.handle(postProcessorNames, res, key, options, this);
    }

    return res;
  };

  Translator.prototype.resolve = function resolve(keys) {
    var _this3 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var found = void 0;

    if (typeof keys === 'string') keys = [keys];

    // forEach possible key
    keys.forEach(function (k) {
      if (_this3.isValidLookup(found)) return;

      var _extractFromKey2 = _this3.extractFromKey(k, options),
          key = _extractFromKey2.key,
          namespaces = _extractFromKey2.namespaces;

      if (_this3.options.fallbackNS) namespaces = namespaces.concat(_this3.options.fallbackNS);

      var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
      var needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';

      var codes = options.lngs ? options.lngs : _this3.languageUtils.toResolveHierarchy(options.lng || _this3.language);

      namespaces.forEach(function (ns) {
        if (_this3.isValidLookup(found)) return;

        codes.forEach(function (code) {
          if (_this3.isValidLookup(found)) return;

          var finalKey = key;
          var finalKeys = [finalKey];

          var pluralSuffix = void 0;
          if (needsPluralHandling) pluralSuffix = _this3.pluralResolver.getSuffix(code, options.count);

          // fallback for plural if context not found
          if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);

          // get key for context if needed
          if (needsContextHandling) finalKeys.push(finalKey += '' + _this3.options.contextSeparator + options.context);

          // get key for plural if needed
          if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);

          // iterate over finalKeys starting with most specific pluralkey (-> contextkey only) -> singularkey only
          var possibleKey = void 0;
          while (possibleKey = finalKeys.pop()) {
            if (_this3.isValidLookup(found)) continue;
            found = _this3.getResource(code, ns, possibleKey, options);
          }
        });
      });
    });

    return found;
  };

  Translator.prototype.isValidLookup = function isValidLookup(res) {
    return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
  };

  Translator.prototype.getResource = function getResource(code, ns, key) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    return this.resourceStore.getResource(code, ns, key, options);
  };

  return Translator;
}(_EventEmitter3.default);

exports.default = Translator;

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get = get;
exports.transformOptions = transformOptions;
function get() {
  return {
    debug: false,
    initImmediate: true,

    ns: ['translation'],
    defaultNS: ['translation'],
    fallbackLng: ['dev'],
    fallbackNS: false, // string or array of namespaces

    whitelist: false, // array with whitelisted languages
    nonExplicitWhitelist: false,
    load: 'all', // | currentOnly | languageOnly
    preload: false, // array with preload languages

    keySeparator: '.',
    nsSeparator: ':',
    pluralSeparator: '_',
    contextSeparator: '_',

    saveMissing: false, // enable to send missing values
    saveMissingTo: 'fallback', // 'current' || 'all'
    missingKeyHandler: false, // function(lng, ns, key, fallbackValue) -> override if prefer on handling

    postProcess: false, // string or array of postProcessor names
    returnNull: true, // allows null value as valid translation
    returnEmptyString: true, // allows empty string value as valid translation
    returnObjects: false,
    joinArrays: false, // or string to join array
    returnedObjectHandler: function returnedObjectHandler() {}, // function(key, value, options) triggered if key returns object but returnObjects is set to false
    parseMissingKeyHandler: false, // function(key) parsed a key that was not found in t() before returning
    appendNamespaceToMissingKey: false,
    overloadTranslationOptionHandler: function overloadTranslationOptionHandler(args) {
      return { defaultValue: args[1] };
    },

    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng) {
        return value;
      },
      prefix: '{{',
      suffix: '}}',
      formatSeparator: ',',
      // prefixEscaped: '{{',
      // suffixEscaped: '}}',
      // unescapeSuffix: '',
      unescapePrefix: '-',

      nestingPrefix: '$t(',
      nestingSuffix: ')',
      // nestingPrefixEscaped: '$t(',
      // nestingSuffixEscaped: ')',
      defaultVariables: undefined // object that can have values to interpolate on - extends passed in interpolation data
    }
  };
}

function transformOptions(options) {
  // create namespace object if namespace is passed in as string
  if (typeof options.ns === 'string') options.ns = [options.ns];
  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

  // extend whitelist with cimode
  if (options.whitelist && options.whitelist.indexOf('cimode') < 0) options.whitelist.push('cimode');

  return options;
}

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _logger = __webpack_require__(7);

var _logger2 = _interopRequireDefault(_logger);

var _EventEmitter2 = __webpack_require__(13);

var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);

var _ResourceStore = __webpack_require__(548);

var _ResourceStore2 = _interopRequireDefault(_ResourceStore);

var _Translator = __webpack_require__(549);

var _Translator2 = _interopRequireDefault(_Translator);

var _LanguageUtils = __webpack_require__(546);

var _LanguageUtils2 = _interopRequireDefault(_LanguageUtils);

var _PluralResolver = __webpack_require__(547);

var _PluralResolver2 = _interopRequireDefault(_PluralResolver);

var _Interpolator = __webpack_require__(545);

var _Interpolator2 = _interopRequireDefault(_Interpolator);

var _BackendConnector = __webpack_require__(543);

var _BackendConnector2 = _interopRequireDefault(_BackendConnector);

var _CacheConnector = __webpack_require__(544);

var _CacheConnector2 = _interopRequireDefault(_CacheConnector);

var _defaults2 = __webpack_require__(550);

var _postProcessor = __webpack_require__(70);

var _postProcessor2 = _interopRequireDefault(_postProcessor);

var _v = __webpack_require__(69);

var compat = _interopRequireWildcard(_v);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var I18n = function (_EventEmitter) {
  _inherits(I18n, _EventEmitter);

  function I18n() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments[1];

    _classCallCheck(this, I18n);

    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

    _this.options = (0, _defaults2.transformOptions)(options);
    _this.services = {};
    _this.logger = _logger2.default;
    _this.modules = {};

    if (callback && !_this.isInitialized) _this.init(options, callback);
    return _this;
  }

  I18n.prototype.init = function init(options, callback) {
    var _this2 = this;

    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    if (!options) options = {};

    if (options.compatibilityAPI === 'v1') {
      this.options = _extends({}, (0, _defaults2.get)(), (0, _defaults2.transformOptions)(compat.convertAPIOptions(options)), {});
    } else if (options.compatibilityJSON === 'v1') {
      this.options = _extends({}, (0, _defaults2.get)(), (0, _defaults2.transformOptions)(compat.convertJSONOptions(options)), {});
    } else {
      this.options = _extends({}, (0, _defaults2.get)(), this.options, (0, _defaults2.transformOptions)(options));
    }
    if (!callback) callback = function callback() {};

    function createClassOnDemand(ClassOrObject) {
      if (!ClassOrObject) return;
      if (typeof ClassOrObject === 'function') return new ClassOrObject();
      return ClassOrObject;
    }

    // init services
    if (!this.options.isClone) {
      if (this.modules.logger) {
        _logger2.default.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        _logger2.default.init(null, this.options);
      }

      var lu = new _LanguageUtils2.default(this.options);
      this.store = new _ResourceStore2.default(this.options.resources, this.options);

      var s = this.services;
      s.logger = _logger2.default;
      s.resourceStore = this.store;
      s.resourceStore.on('added removed', function (lng, ns) {
        s.cacheConnector.save();
      });
      s.languageUtils = lu;
      s.pluralResolver = new _PluralResolver2.default(lu, { prepend: this.options.pluralSeparator, compatibilityJSON: this.options.compatibilityJSON });
      s.interpolator = new _Interpolator2.default(this.options);

      s.backendConnector = new _BackendConnector2.default(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      // pipe events from backendConnector
      s.backendConnector.on('*', function (event) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        _this2.emit.apply(_this2, [event].concat(args));
      });

      s.backendConnector.on('loaded', function (loaded) {
        s.cacheConnector.save();
      });

      s.cacheConnector = new _CacheConnector2.default(createClassOnDemand(this.modules.cache), s.resourceStore, s, this.options);
      // pipe events from backendConnector
      s.cacheConnector.on('*', function (event) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        _this2.emit.apply(_this2, [event].concat(args));
      });

      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        s.languageDetector.init(s, this.options.detection, this.options);
      }

      this.translator = new _Translator2.default(this.services, this.options);
      // pipe events from translator
      this.translator.on('*', function (event) {
        for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }

        _this2.emit.apply(_this2, [event].concat(args));
      });
    }

    // append api
    var storeApi = ['getResource', 'addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle', 'hasResourceBundle', 'getResourceBundle'];
    storeApi.forEach(function (fcName) {
      _this2[fcName] = function () {
        return this.store[fcName].apply(this.store, arguments);
      };
    });

    // TODO: COMPATIBILITY remove this
    if (this.options.compatibilityAPI === 'v1') compat.appendBackwardsAPI(this);

    var load = function load() {
      _this2.changeLanguage(_this2.options.lng, function (err, t) {
        _this2.emit('initialized', _this2.options);
        _this2.logger.log('initialized', _this2.options);

        callback(err, t);
      });
    };

    if (this.options.resources || !this.options.initImmediate) {
      load();
    } else {
      setTimeout(load, 0);
    }

    return this;
  };

  I18n.prototype.loadResources = function loadResources(callback) {
    var _this3 = this;

    if (!callback) callback = function callback() {};

    if (!this.options.resources) {
      var _ret = function () {
        if (_this3.language && _this3.language.toLowerCase() === 'cimode') return {
            v: callback()
          }; // avoid loading resources for cimode

        var toLoad = [];

        var append = function append(lng) {
          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
          lngs.forEach(function (l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };

        append(_this3.language);

        if (_this3.options.preload) {
          _this3.options.preload.forEach(function (l) {
            append(l);
          });
        }

        _this3.services.cacheConnector.load(toLoad, _this3.options.ns, function () {
          _this3.services.backendConnector.load(toLoad, _this3.options.ns, callback);
        });
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else {
      callback(null);
    }
  };

  I18n.prototype.reloadResources = function reloadResources(lngs, ns) {
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    this.services.backendConnector.reload(lngs, ns);
  };

  I18n.prototype.use = function use(module) {
    if (module.type === 'backend') {
      this.modules.backend = module;
    }

    if (module.type === 'cache') {
      this.modules.cache = module;
    }

    if (module.type === 'logger' || module.log && module.warn && module.warn) {
      this.modules.logger = module;
    }

    if (module.type === 'languageDetector') {
      this.modules.languageDetector = module;
    }

    if (module.type === 'postProcessor') {
      _postProcessor2.default.addPostProcessor(module);
    }

    return this;
  };

  I18n.prototype.changeLanguage = function changeLanguage(lng, callback) {
    var _this4 = this;

    var done = function done(err) {
      if (lng) {
        _this4.emit('languageChanged', lng);
        _this4.logger.log('languageChanged', lng);
      }

      if (callback) callback(err, function () {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        return _this4.t.apply(_this4, args);
      });
    };

    if (!lng && this.services.languageDetector) lng = this.services.languageDetector.detect();

    if (lng) {
      this.language = lng;
      this.languages = this.services.languageUtils.toResolveHierarchy(lng);

      this.translator.changeLanguage(lng);

      if (this.services.languageDetector) this.services.languageDetector.cacheUserLanguage(lng);
    }

    this.loadResources(function (err) {
      done(err);
    });
  };

  I18n.prototype.getFixedT = function getFixedT(lng, ns) {
    var _this5 = this;

    var fixedT = function fixedT(key, options) {
      options = options || {};
      options.lng = options.lng || fixedT.lng;
      options.ns = options.ns || fixedT.ns;
      return _this5.t(key, options);
    };
    fixedT.lng = lng;
    fixedT.ns = ns;
    return fixedT;
  };

  I18n.prototype.t = function t() {
    return this.translator && this.translator.translate.apply(this.translator, arguments);
  };

  I18n.prototype.exists = function exists() {
    return this.translator && this.translator.exists.apply(this.translator, arguments);
  };

  I18n.prototype.setDefaultNamespace = function setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  };

  I18n.prototype.loadNamespaces = function loadNamespaces(ns, callback) {
    var _this6 = this;

    if (!this.options.ns) return callback && callback();
    if (typeof ns === 'string') ns = [ns];

    ns.forEach(function (n) {
      if (_this6.options.ns.indexOf(n) < 0) _this6.options.ns.push(n);
    });

    this.loadResources(callback);
  };

  I18n.prototype.loadLanguages = function loadLanguages(lngs, callback) {
    if (typeof lngs === 'string') lngs = [lngs];
    var preloaded = this.options.preload || [];

    var newLngs = lngs.filter(function (lng) {
      return preloaded.indexOf(lng) < 0;
    });
    // Exit early if all given languages are already preloaded
    if (!newLngs.length) return callback();

    this.options.preload = preloaded.concat(newLngs);
    this.loadResources(callback);
  };

  I18n.prototype.dir = function dir(lng) {
    if (!lng) lng = this.language;
    if (!lng) return 'rtl';

    var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam'];

    return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
  };

  I18n.prototype.createInstance = function createInstance() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments[1];

    return new I18n(options, callback);
  };

  I18n.prototype.cloneInstance = function cloneInstance() {
    var _this7 = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments[1];

    var clone = new I18n(_extends({}, options, this.options, { isClone: true }), callback);
    var membersToCopy = ['store', 'services', 'language'];
    membersToCopy.forEach(function (m) {
      clone[m] = _this7[m];
    });
    clone.translator = new _Translator2.default(clone.services, clone.options);
    clone.translator.on('*', function (event) {
      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      clone.emit.apply(clone, [event].concat(args));
    });

    return clone;
  };

  return I18n;
}(_EventEmitter3.default);

exports.default = new I18n();

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _i18next = __webpack_require__(551);

var _i18next2 = _interopRequireDefault(_i18next);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _i18next2.default;

/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(552).default;


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(8),
    root = __webpack_require__(6);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(604),
    hashDelete = __webpack_require__(605),
    hashGet = __webpack_require__(606),
    hashHas = __webpack_require__(607),
    hashSet = __webpack_require__(608);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(8),
    root = __webpack_require__(6);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(8),
    root = __webpack_require__(6);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(36),
    setCacheAdd = __webpack_require__(628),
    setCacheHas = __webpack_require__(629);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(6);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(8),
    root = __webpack_require__(6);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),
/* 561 */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),
/* 562 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

module.exports = arrayEvery;


/***/ }),
/* 563 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(588),
    isArguments = __webpack_require__(41),
    isArray = __webpack_require__(4),
    isBuffer = __webpack_require__(42),
    isIndex = __webpack_require__(37),
    isTypedArray = __webpack_require__(45);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),
/* 565 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 566 */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),
/* 567 */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(78),
    keys = __webpack_require__(18);

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(5);

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(573),
    createBaseEach = __webpack_require__(594);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(570);

/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  baseEach(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

module.exports = baseEvery;


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(595);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(572),
    keys = __webpack_require__(18);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(566),
    isArray = __webpack_require__(4);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),
/* 575 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(15),
    isObjectLike = __webpack_require__(17);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(71),
    equalArrays = __webpack_require__(80),
    equalByTag = __webpack_require__(596),
    equalObjects = __webpack_require__(597),
    getTag = __webpack_require__(82),
    isArray = __webpack_require__(4),
    isBuffer = __webpack_require__(42),
    isTypedArray = __webpack_require__(45);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(71),
    baseIsEqual = __webpack_require__(75);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(28),
    isMasked = __webpack_require__(610),
    isObject = __webpack_require__(5),
    toSource = __webpack_require__(86);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(15),
    isLength = __webpack_require__(43),
    isObjectLike = __webpack_require__(17);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__(582),
    baseMatchesProperty = __webpack_require__(583),
    identity = __webpack_require__(40),
    isArray = __webpack_require__(4),
    property = __webpack_require__(646);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(578),
    getMatchData = __webpack_require__(599),
    matchesStrictComparable = __webpack_require__(85);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(75),
    get = __webpack_require__(642),
    hasIn = __webpack_require__(643),
    isKey = __webpack_require__(38),
    isStrictComparable = __webpack_require__(84),
    matchesStrictComparable = __webpack_require__(85),
    toKey = __webpack_require__(26);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),
/* 584 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(74);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(40),
    overRest = __webpack_require__(627),
    setToString = __webpack_require__(631);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(640),
    defineProperty = __webpack_require__(79),
    identity = __webpack_require__(40);

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),
/* 588 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(22),
    arrayMap = __webpack_require__(565),
    isArray = __webpack_require__(4),
    isSymbol = __webpack_require__(44);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),
/* 590 */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),
/* 591 */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(6);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__(586),
    isIterateeCall = __webpack_require__(83);

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(16);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),
/* 595 */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(22),
    Uint8Array = __webpack_require__(559),
    eq = __webpack_require__(27),
    equalArrays = __webpack_require__(80),
    mapToArray = __webpack_require__(621),
    setToArray = __webpack_require__(630);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(598);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(574),
    getSymbols = __webpack_require__(601),
    keys = __webpack_require__(18);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(84),
    keys = __webpack_require__(18);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(22);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(563),
    stubArray = __webpack_require__(647);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),
/* 602 */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(77),
    isArguments = __webpack_require__(41),
    isArray = __webpack_require__(4),
    isIndex = __webpack_require__(37),
    isLength = __webpack_require__(43),
    toKey = __webpack_require__(26);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(25);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),
/* 605 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(25);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(25);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(25);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),
/* 609 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(592);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),
/* 611 */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(23);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(23);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(23);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(23);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(555),
    ListCache = __webpack_require__(21),
    Map = __webpack_require__(35);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(24);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(24);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(24);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(24);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),
/* 621 */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(645);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(626);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(81);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89)(module)))

/***/ }),
/* 625 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 626 */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(561);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),
/* 628 */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),
/* 629 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),
/* 630 */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(587),
    shortOut = __webpack_require__(632);

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),
/* 632 */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(21);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),
/* 634 */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),
/* 635 */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),
/* 636 */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(21),
    Map = __webpack_require__(35),
    MapCache = __webpack_require__(36);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(622);

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(72),
    copyObject = __webpack_require__(78),
    createAssigner = __webpack_require__(593),
    isArrayLike = __webpack_require__(16),
    isPrototype = __webpack_require__(39),
    keys = __webpack_require__(18);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;


/***/ }),
/* 640 */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

var arrayEvery = __webpack_require__(562),
    baseEvery = __webpack_require__(571),
    baseIteratee = __webpack_require__(581),
    isArray = __webpack_require__(4),
    isIterateeCall = __webpack_require__(83);

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, guard) {
  var func = isArray(collection) ? arrayEvery : baseEvery;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = every;


/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(74);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(575),
    hasPath = __webpack_require__(603);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__(76),
    getTag = __webpack_require__(82),
    isArguments = __webpack_require__(41),
    isArray = __webpack_require__(4),
    isArrayLike = __webpack_require__(16),
    isBuffer = __webpack_require__(42),
    isPrototype = __webpack_require__(39),
    isTypedArray = __webpack_require__(45);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(36);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(584),
    basePropertyDeep = __webpack_require__(585),
    isKey = __webpack_require__(38),
    toKey = __webpack_require__(26);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),
/* 647 */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),
/* 648 */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(589);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

;(function (sax) { // wrapper for non-node envs
  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
  sax.SAXParser = SAXParser
  sax.SAXStream = SAXStream
  sax.createStream = createStream

  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
  // since that's the earliest that a buffer overrun could occur.  This way, checks are
  // as rare as required, but as often as necessary to ensure never crossing this bound.
  // Furthermore, buffers are only tested at most once per write(), so passing a very
  // large string into write() might have undesirable effects, but this is manageable by
  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
  // edge case, result in creating at most one complete copy of the string passed in.
  // Set to Infinity to have unlimited buffers.
  sax.MAX_BUFFER_LENGTH = 64 * 1024

  var buffers = [
    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
    'procInstName', 'procInstBody', 'entity', 'attribName',
    'attribValue', 'cdata', 'script'
  ]

  sax.EVENTS = [
    'text',
    'processinginstruction',
    'sgmldeclaration',
    'doctype',
    'comment',
    'opentagstart',
    'attribute',
    'opentag',
    'closetag',
    'opencdata',
    'cdata',
    'closecdata',
    'error',
    'end',
    'ready',
    'script',
    'opennamespace',
    'closenamespace'
  ]

  function SAXParser (strict, opt) {
    if (!(this instanceof SAXParser)) {
      return new SAXParser(strict, opt)
    }

    var parser = this
    clearBuffers(parser)
    parser.q = parser.c = ''
    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
    parser.opt = opt || {}
    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
    parser.tags = []
    parser.closed = parser.closedRoot = parser.sawRoot = false
    parser.tag = parser.error = null
    parser.strict = !!strict
    parser.noscript = !!(strict || parser.opt.noscript)
    parser.state = S.BEGIN
    parser.strictEntities = parser.opt.strictEntities
    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
    parser.attribList = []

    // namespaces form a prototype chain.
    // it always points at the current tag,
    // which protos to its parent tag.
    if (parser.opt.xmlns) {
      parser.ns = Object.create(rootNS)
    }

    // mostly just for error reporting
    parser.trackPosition = parser.opt.position !== false
    if (parser.trackPosition) {
      parser.position = parser.line = parser.column = 0
    }
    emit(parser, 'onready')
  }

  if (!Object.create) {
    Object.create = function (o) {
      function F () {}
      F.prototype = o
      var newf = new F()
      return newf
    }
  }

  if (!Object.keys) {
    Object.keys = function (o) {
      var a = []
      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
      return a
    }
  }

  function checkBufferLength (parser) {
    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    var maxActual = 0
    for (var i = 0, l = buffers.length; i < l; i++) {
      var len = parser[buffers[i]].length
      if (len > maxAllowed) {
        // Text/cdata nodes can get big, and since they're buffered,
        // we can get here under normal conditions.
        // Avoid issues by emitting the text node now,
        // so at least it won't get any bigger.
        switch (buffers[i]) {
          case 'textNode':
            closeText(parser)
            break

          case 'cdata':
            emitNode(parser, 'oncdata', parser.cdata)
            parser.cdata = ''
            break

          case 'script':
            emitNode(parser, 'onscript', parser.script)
            parser.script = ''
            break

          default:
            error(parser, 'Max buffer length exceeded: ' + buffers[i])
        }
      }
      maxActual = Math.max(maxActual, len)
    }
    // schedule the next check for the earliest possible buffer overrun.
    var m = sax.MAX_BUFFER_LENGTH - maxActual
    parser.bufferCheckPosition = m + parser.position
  }

  function clearBuffers (parser) {
    for (var i = 0, l = buffers.length; i < l; i++) {
      parser[buffers[i]] = ''
    }
  }

  function flushBuffers (parser) {
    closeText(parser)
    if (parser.cdata !== '') {
      emitNode(parser, 'oncdata', parser.cdata)
      parser.cdata = ''
    }
    if (parser.script !== '') {
      emitNode(parser, 'onscript', parser.script)
      parser.script = ''
    }
  }

  SAXParser.prototype = {
    end: function () { end(this) },
    write: write,
    resume: function () { this.error = null; return this },
    close: function () { return this.write(null) },
    flush: function () { flushBuffers(this) }
  }

  var Stream
  try {
    Stream = __webpack_require__(102).Stream
  } catch (ex) {
    Stream = function () {}
  }

  var streamWraps = sax.EVENTS.filter(function (ev) {
    return ev !== 'error' && ev !== 'end'
  })

  function createStream (strict, opt) {
    return new SAXStream(strict, opt)
  }

  function SAXStream (strict, opt) {
    if (!(this instanceof SAXStream)) {
      return new SAXStream(strict, opt)
    }

    Stream.apply(this)

    this._parser = new SAXParser(strict, opt)
    this.writable = true
    this.readable = true

    var me = this

    this._parser.onend = function () {
      me.emit('end')
    }

    this._parser.onerror = function (er) {
      me.emit('error', er)

      // if didn't throw, then means error was handled.
      // go ahead and clear error, so we can write again.
      me._parser.error = null
    }

    this._decoder = null

    streamWraps.forEach(function (ev) {
      Object.defineProperty(me, 'on' + ev, {
        get: function () {
          return me._parser['on' + ev]
        },
        set: function (h) {
          if (!h) {
            me.removeAllListeners(ev)
            me._parser['on' + ev] = h
            return h
          }
          me.on(ev, h)
        },
        enumerable: true,
        configurable: false
      })
    })
  }

  SAXStream.prototype = Object.create(Stream.prototype, {
    constructor: {
      value: SAXStream
    }
  })

  SAXStream.prototype.write = function (data) {
    if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
      if (!this._decoder) {
        var SD = __webpack_require__(670).StringDecoder
        this._decoder = new SD('utf8')
      }
      data = this._decoder.write(data)
    }

    this._parser.write(data.toString())
    this.emit('data', data)
    return true
  }

  SAXStream.prototype.end = function (chunk) {
    if (chunk && chunk.length) {
      this.write(chunk)
    }
    this._parser.end()
    return true
  }

  SAXStream.prototype.on = function (ev, handler) {
    var me = this
    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
      me._parser['on' + ev] = function () {
        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
        args.splice(0, 0, ev)
        me.emit.apply(me, args)
      }
    }

    return Stream.prototype.on.call(me, ev, handler)
  }

  // character classes and tokens
  var whitespace = '\r\n\t '

  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  var number = '0124356789'
  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

  // (Letter | "_" | ":")
  var quote = '\'"'
  var attribEnd = whitespace + '>'
  var CDATA = '[CDATA['
  var DOCTYPE = 'DOCTYPE'
  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

  // turn all the string character sets into character class objects.
  whitespace = charClass(whitespace)
  number = charClass(number)
  letter = charClass(letter)

  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
  // This implementation works on strings, a single character at a time
  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
  // without a significant breaking change to either this  parser, or the
  // JavaScript language.  Implementation of an emoji-capable xml parser
  // is left as an exercise for the reader.
  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

  quote = charClass(quote)
  attribEnd = charClass(attribEnd)

  function charClass (str) {
    return str.split('').reduce(function (s, c) {
      s[c] = true
      return s
    }, {})
  }

  function isRegExp (c) {
    return Object.prototype.toString.call(c) === '[object RegExp]'
  }

  function is (charclass, c) {
    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
  }

  function not (charclass, c) {
    return !is(charclass, c)
  }

  var S = 0
  sax.STATE = {
    BEGIN: S++, // leading byte order mark or whitespace
    BEGIN_WHITESPACE: S++, // leading whitespace
    TEXT: S++, // general stuff
    TEXT_ENTITY: S++, // &amp and such.
    OPEN_WAKA: S++, // <
    SGML_DECL: S++, // <!BLARG
    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
    DOCTYPE: S++, // <!DOCTYPE
    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
    COMMENT_STARTING: S++, // <!-
    COMMENT: S++, // <!--
    COMMENT_ENDING: S++, // <!-- blah -
    COMMENT_ENDED: S++, // <!-- blah --
    CDATA: S++, // <![CDATA[ something
    CDATA_ENDING: S++, // ]
    CDATA_ENDING_2: S++, // ]]
    PROC_INST: S++, // <?hi
    PROC_INST_BODY: S++, // <?hi there
    PROC_INST_ENDING: S++, // <?hi "there" ?
    OPEN_TAG: S++, // <strong
    OPEN_TAG_SLASH: S++, // <strong /
    ATTRIB: S++, // <a
    ATTRIB_NAME: S++, // <a foo
    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
    ATTRIB_VALUE: S++, // <a foo=
    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
    CLOSE_TAG: S++, // </a
    CLOSE_TAG_SAW_WHITE: S++, // </a   >
    SCRIPT: S++, // <script> ...
    SCRIPT_ENDING: S++ // <script> ... <
  }

  sax.XML_ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'"
  }

  sax.ENTITIES = {
    'amp': '&',
    'gt': '>',
    'lt': '<',
    'quot': '"',
    'apos': "'",
    'AElig': 198,
    'Aacute': 193,
    'Acirc': 194,
    'Agrave': 192,
    'Aring': 197,
    'Atilde': 195,
    'Auml': 196,
    'Ccedil': 199,
    'ETH': 208,
    'Eacute': 201,
    'Ecirc': 202,
    'Egrave': 200,
    'Euml': 203,
    'Iacute': 205,
    'Icirc': 206,
    'Igrave': 204,
    'Iuml': 207,
    'Ntilde': 209,
    'Oacute': 211,
    'Ocirc': 212,
    'Ograve': 210,
    'Oslash': 216,
    'Otilde': 213,
    'Ouml': 214,
    'THORN': 222,
    'Uacute': 218,
    'Ucirc': 219,
    'Ugrave': 217,
    'Uuml': 220,
    'Yacute': 221,
    'aacute': 225,
    'acirc': 226,
    'aelig': 230,
    'agrave': 224,
    'aring': 229,
    'atilde': 227,
    'auml': 228,
    'ccedil': 231,
    'eacute': 233,
    'ecirc': 234,
    'egrave': 232,
    'eth': 240,
    'euml': 235,
    'iacute': 237,
    'icirc': 238,
    'igrave': 236,
    'iuml': 239,
    'ntilde': 241,
    'oacute': 243,
    'ocirc': 244,
    'ograve': 242,
    'oslash': 248,
    'otilde': 245,
    'ouml': 246,
    'szlig': 223,
    'thorn': 254,
    'uacute': 250,
    'ucirc': 251,
    'ugrave': 249,
    'uuml': 252,
    'yacute': 253,
    'yuml': 255,
    'copy': 169,
    'reg': 174,
    'nbsp': 160,
    'iexcl': 161,
    'cent': 162,
    'pound': 163,
    'curren': 164,
    'yen': 165,
    'brvbar': 166,
    'sect': 167,
    'uml': 168,
    'ordf': 170,
    'laquo': 171,
    'not': 172,
    'shy': 173,
    'macr': 175,
    'deg': 176,
    'plusmn': 177,
    'sup1': 185,
    'sup2': 178,
    'sup3': 179,
    'acute': 180,
    'micro': 181,
    'para': 182,
    'middot': 183,
    'cedil': 184,
    'ordm': 186,
    'raquo': 187,
    'frac14': 188,
    'frac12': 189,
    'frac34': 190,
    'iquest': 191,
    'times': 215,
    'divide': 247,
    'OElig': 338,
    'oelig': 339,
    'Scaron': 352,
    'scaron': 353,
    'Yuml': 376,
    'fnof': 402,
    'circ': 710,
    'tilde': 732,
    'Alpha': 913,
    'Beta': 914,
    'Gamma': 915,
    'Delta': 916,
    'Epsilon': 917,
    'Zeta': 918,
    'Eta': 919,
    'Theta': 920,
    'Iota': 921,
    'Kappa': 922,
    'Lambda': 923,
    'Mu': 924,
    'Nu': 925,
    'Xi': 926,
    'Omicron': 927,
    'Pi': 928,
    'Rho': 929,
    'Sigma': 931,
    'Tau': 932,
    'Upsilon': 933,
    'Phi': 934,
    'Chi': 935,
    'Psi': 936,
    'Omega': 937,
    'alpha': 945,
    'beta': 946,
    'gamma': 947,
    'delta': 948,
    'epsilon': 949,
    'zeta': 950,
    'eta': 951,
    'theta': 952,
    'iota': 953,
    'kappa': 954,
    'lambda': 955,
    'mu': 956,
    'nu': 957,
    'xi': 958,
    'omicron': 959,
    'pi': 960,
    'rho': 961,
    'sigmaf': 962,
    'sigma': 963,
    'tau': 964,
    'upsilon': 965,
    'phi': 966,
    'chi': 967,
    'psi': 968,
    'omega': 969,
    'thetasym': 977,
    'upsih': 978,
    'piv': 982,
    'ensp': 8194,
    'emsp': 8195,
    'thinsp': 8201,
    'zwnj': 8204,
    'zwj': 8205,
    'lrm': 8206,
    'rlm': 8207,
    'ndash': 8211,
    'mdash': 8212,
    'lsquo': 8216,
    'rsquo': 8217,
    'sbquo': 8218,
    'ldquo': 8220,
    'rdquo': 8221,
    'bdquo': 8222,
    'dagger': 8224,
    'Dagger': 8225,
    'bull': 8226,
    'hellip': 8230,
    'permil': 8240,
    'prime': 8242,
    'Prime': 8243,
    'lsaquo': 8249,
    'rsaquo': 8250,
    'oline': 8254,
    'frasl': 8260,
    'euro': 8364,
    'image': 8465,
    'weierp': 8472,
    'real': 8476,
    'trade': 8482,
    'alefsym': 8501,
    'larr': 8592,
    'uarr': 8593,
    'rarr': 8594,
    'darr': 8595,
    'harr': 8596,
    'crarr': 8629,
    'lArr': 8656,
    'uArr': 8657,
    'rArr': 8658,
    'dArr': 8659,
    'hArr': 8660,
    'forall': 8704,
    'part': 8706,
    'exist': 8707,
    'empty': 8709,
    'nabla': 8711,
    'isin': 8712,
    'notin': 8713,
    'ni': 8715,
    'prod': 8719,
    'sum': 8721,
    'minus': 8722,
    'lowast': 8727,
    'radic': 8730,
    'prop': 8733,
    'infin': 8734,
    'ang': 8736,
    'and': 8743,
    'or': 8744,
    'cap': 8745,
    'cup': 8746,
    'int': 8747,
    'there4': 8756,
    'sim': 8764,
    'cong': 8773,
    'asymp': 8776,
    'ne': 8800,
    'equiv': 8801,
    'le': 8804,
    'ge': 8805,
    'sub': 8834,
    'sup': 8835,
    'nsub': 8836,
    'sube': 8838,
    'supe': 8839,
    'oplus': 8853,
    'otimes': 8855,
    'perp': 8869,
    'sdot': 8901,
    'lceil': 8968,
    'rceil': 8969,
    'lfloor': 8970,
    'rfloor': 8971,
    'lang': 9001,
    'rang': 9002,
    'loz': 9674,
    'spades': 9824,
    'clubs': 9827,
    'hearts': 9829,
    'diams': 9830
  }

  Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
  })

  for (var s in sax.STATE) {
    sax.STATE[sax.STATE[s]] = s
  }

  // shorthand
  S = sax.STATE

  function emit (parser, event, data) {
    parser[event] && parser[event](data)
  }

  function emitNode (parser, nodeType, data) {
    if (parser.textNode) closeText(parser)
    emit(parser, nodeType, data)
  }

  function closeText (parser) {
    parser.textNode = textopts(parser.opt, parser.textNode)
    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
    parser.textNode = ''
  }

  function textopts (opt, text) {
    if (opt.trim) text = text.trim()
    if (opt.normalize) text = text.replace(/\s+/g, ' ')
    return text
  }

  function error (parser, er) {
    closeText(parser)
    if (parser.trackPosition) {
      er += '\nLine: ' + parser.line +
        '\nColumn: ' + parser.column +
        '\nChar: ' + parser.c
    }
    er = new Error(er)
    parser.error = er
    emit(parser, 'onerror', er)
    return parser
  }

  function end (parser) {
    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
    if ((parser.state !== S.BEGIN) &&
      (parser.state !== S.BEGIN_WHITESPACE) &&
      (parser.state !== S.TEXT)) {
      error(parser, 'Unexpected end')
    }
    closeText(parser)
    parser.c = ''
    parser.closed = true
    emit(parser, 'onend')
    SAXParser.call(parser, parser.strict, parser.opt)
    return parser
  }

  function strictFail (parser, message) {
    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
      throw new Error('bad call to strictFail')
    }
    if (parser.strict) {
      error(parser, message)
    }
  }

  function newTag (parser) {
    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
    var parent = parser.tags[parser.tags.length - 1] || parser
    var tag = parser.tag = { name: parser.tagName, attributes: {} }

    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
    if (parser.opt.xmlns) {
      tag.ns = parent.ns
    }
    parser.attribList.length = 0
    emitNode(parser, 'onopentagstart', tag)
  }

  function qname (name, attribute) {
    var i = name.indexOf(':')
    var qualName = i < 0 ? [ '', name ] : name.split(':')
    var prefix = qualName[0]
    var local = qualName[1]

    // <x "xmlns"="http://foo">
    if (attribute && name === 'xmlns') {
      prefix = 'xmlns'
      local = ''
    }

    return { prefix: prefix, local: local }
  }

  function attrib (parser) {
    if (!parser.strict) {
      parser.attribName = parser.attribName[parser.looseCase]()
    }

    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
      parser.attribName = parser.attribValue = ''
      return
    }

    if (parser.opt.xmlns) {
      var qn = qname(parser.attribName, true)
      var prefix = qn.prefix
      var local = qn.local

      if (prefix === 'xmlns') {
        // namespace binding attribute. push the binding into scope
        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
          strictFail(parser,
            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue)
        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
          strictFail(parser,
            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
            'Actual: ' + parser.attribValue)
        } else {
          var tag = parser.tag
          var parent = parser.tags[parser.tags.length - 1] || parser
          if (tag.ns === parent.ns) {
            tag.ns = Object.create(parent.ns)
          }
          tag.ns[local] = parser.attribValue
        }
      }

      // defer onattribute events until all attributes have been seen
      // so any new bindings can take effect. preserve attribute order
      // so deferred events can be emitted in document order
      parser.attribList.push([parser.attribName, parser.attribValue])
    } else {
      // in non-xmlns mode, we can emit the event right away
      parser.tag.attributes[parser.attribName] = parser.attribValue
      emitNode(parser, 'onattribute', {
        name: parser.attribName,
        value: parser.attribValue
      })
    }

    parser.attribName = parser.attribValue = ''
  }

  function openTag (parser, selfClosing) {
    if (parser.opt.xmlns) {
      // emit namespace binding events
      var tag = parser.tag

      // add namespace info to tag
      var qn = qname(parser.tagName)
      tag.prefix = qn.prefix
      tag.local = qn.local
      tag.uri = tag.ns[qn.prefix] || ''

      if (tag.prefix && !tag.uri) {
        strictFail(parser, 'Unbound namespace prefix: ' +
          JSON.stringify(parser.tagName))
        tag.uri = qn.prefix
      }

      var parent = parser.tags[parser.tags.length - 1] || parser
      if (tag.ns && parent.ns !== tag.ns) {
        Object.keys(tag.ns).forEach(function (p) {
          emitNode(parser, 'onopennamespace', {
            prefix: p,
            uri: tag.ns[p]
          })
        })
      }

      // handle deferred onattribute events
      // Note: do not apply default ns to attributes:
      //   http://www.w3.org/TR/REC-xml-names/#defaulting
      for (var i = 0, l = parser.attribList.length; i < l; i++) {
        var nv = parser.attribList[i]
        var name = nv[0]
        var value = nv[1]
        var qualName = qname(name, true)
        var prefix = qualName.prefix
        var local = qualName.local
        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
        var a = {
          name: name,
          value: value,
          prefix: prefix,
          local: local,
          uri: uri
        }

        // if there's any attributes with an undefined namespace,
        // then fail on them now.
        if (prefix && prefix !== 'xmlns' && !uri) {
          strictFail(parser, 'Unbound namespace prefix: ' +
            JSON.stringify(prefix))
          a.uri = prefix
        }
        parser.tag.attributes[name] = a
        emitNode(parser, 'onattribute', a)
      }
      parser.attribList.length = 0
    }

    parser.tag.isSelfClosing = !!selfClosing

    // process the tag
    parser.sawRoot = true
    parser.tags.push(parser.tag)
    emitNode(parser, 'onopentag', parser.tag)
    if (!selfClosing) {
      // special case for <script> in non-strict mode.
      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
        parser.state = S.SCRIPT
      } else {
        parser.state = S.TEXT
      }
      parser.tag = null
      parser.tagName = ''
    }
    parser.attribName = parser.attribValue = ''
    parser.attribList.length = 0
  }

  function closeTag (parser) {
    if (!parser.tagName) {
      strictFail(parser, 'Weird empty close tag.')
      parser.textNode += '</>'
      parser.state = S.TEXT
      return
    }

    if (parser.script) {
      if (parser.tagName !== 'script') {
        parser.script += '</' + parser.tagName + '>'
        parser.tagName = ''
        parser.state = S.SCRIPT
        return
      }
      emitNode(parser, 'onscript', parser.script)
      parser.script = ''
    }

    // first make sure that the closing tag actually exists.
    // <a><b></c></b></a> will close everything, otherwise.
    var t = parser.tags.length
    var tagName = parser.tagName
    if (!parser.strict) {
      tagName = tagName[parser.looseCase]()
    }
    var closeTo = tagName
    while (t--) {
      var close = parser.tags[t]
      if (close.name !== closeTo) {
        // fail the first time in strict mode
        strictFail(parser, 'Unexpected close tag')
      } else {
        break
      }
    }

    // didn't find it.  we already failed for strict, so just abort.
    if (t < 0) {
      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
      parser.textNode += '</' + parser.tagName + '>'
      parser.state = S.TEXT
      return
    }
    parser.tagName = tagName
    var s = parser.tags.length
    while (s-- > t) {
      var tag = parser.tag = parser.tags.pop()
      parser.tagName = parser.tag.name
      emitNode(parser, 'onclosetag', parser.tagName)

      var x = {}
      for (var i in tag.ns) {
        x[i] = tag.ns[i]
      }

      var parent = parser.tags[parser.tags.length - 1] || parser
      if (parser.opt.xmlns && tag.ns !== parent.ns) {
        // remove namespace bindings introduced by tag
        Object.keys(tag.ns).forEach(function (p) {
          var n = tag.ns[p]
          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
        })
      }
    }
    if (t === 0) parser.closedRoot = true
    parser.tagName = parser.attribValue = parser.attribName = ''
    parser.attribList.length = 0
    parser.state = S.TEXT
  }

  function parseEntity (parser) {
    var entity = parser.entity
    var entityLC = entity.toLowerCase()
    var num
    var numStr = ''

    if (parser.ENTITIES[entity]) {
      return parser.ENTITIES[entity]
    }
    if (parser.ENTITIES[entityLC]) {
      return parser.ENTITIES[entityLC]
    }
    entity = entityLC
    if (entity.charAt(0) === '#') {
      if (entity.charAt(1) === 'x') {
        entity = entity.slice(2)
        num = parseInt(entity, 16)
        numStr = num.toString(16)
      } else {
        entity = entity.slice(1)
        num = parseInt(entity, 10)
        numStr = num.toString(10)
      }
    }
    entity = entity.replace(/^0+/, '')
    if (numStr.toLowerCase() !== entity) {
      strictFail(parser, 'Invalid character entity')
      return '&' + parser.entity + ';'
    }

    return String.fromCodePoint(num)
  }

  function beginWhiteSpace (parser, c) {
    if (c === '<') {
      parser.state = S.OPEN_WAKA
      parser.startTagPosition = parser.position
    } else if (not(whitespace, c)) {
      // have to process this as a text node.
      // weird, but happens.
      strictFail(parser, 'Non-whitespace before first tag.')
      parser.textNode = c
      parser.state = S.TEXT
    }
  }

  function charAt (chunk, i) {
    var result = ''
    if (i < chunk.length) {
      result = chunk.charAt(i)
    }
    return result
  }

  function write (chunk) {
    var parser = this
    if (this.error) {
      throw this.error
    }
    if (parser.closed) {
      return error(parser,
        'Cannot write after close. Assign an onready handler.')
    }
    if (chunk === null) {
      return end(parser)
    }
    if (typeof chunk === 'object') {
      chunk = chunk.toString()
    }
    var i = 0
    var c = ''
    while (true) {
      c = charAt(chunk, i++)
      parser.c = c
      if (!c) {
        break
      }
      if (parser.trackPosition) {
        parser.position++
        if (c === '\n') {
          parser.line++
          parser.column = 0
        } else {
          parser.column++
        }
      }
      switch (parser.state) {
        case S.BEGIN:
          parser.state = S.BEGIN_WHITESPACE
          if (c === '\uFEFF') {
            continue
          }
          beginWhiteSpace(parser, c)
          continue

        case S.BEGIN_WHITESPACE:
          beginWhiteSpace(parser, c)
          continue

        case S.TEXT:
          if (parser.sawRoot && !parser.closedRoot) {
            var starti = i - 1
            while (c && c !== '<' && c !== '&') {
              c = charAt(chunk, i++)
              if (c && parser.trackPosition) {
                parser.position++
                if (c === '\n') {
                  parser.line++
                  parser.column = 0
                } else {
                  parser.column++
                }
              }
            }
            parser.textNode += chunk.substring(starti, i - 1)
          }
          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
            parser.state = S.OPEN_WAKA
            parser.startTagPosition = parser.position
          } else {
            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
              strictFail(parser, 'Text data outside of root node.')
            }
            if (c === '&') {
              parser.state = S.TEXT_ENTITY
            } else {
              parser.textNode += c
            }
          }
          continue

        case S.SCRIPT:
          // only non-strict
          if (c === '<') {
            parser.state = S.SCRIPT_ENDING
          } else {
            parser.script += c
          }
          continue

        case S.SCRIPT_ENDING:
          if (c === '/') {
            parser.state = S.CLOSE_TAG
          } else {
            parser.script += '<' + c
            parser.state = S.SCRIPT
          }
          continue

        case S.OPEN_WAKA:
          // either a /, ?, !, or text is coming next.
          if (c === '!') {
            parser.state = S.SGML_DECL
            parser.sgmlDecl = ''
          } else if (is(whitespace, c)) {
            // wait for it...
          } else if (is(nameStart, c)) {
            parser.state = S.OPEN_TAG
            parser.tagName = c
          } else if (c === '/') {
            parser.state = S.CLOSE_TAG
            parser.tagName = ''
          } else if (c === '?') {
            parser.state = S.PROC_INST
            parser.procInstName = parser.procInstBody = ''
          } else {
            strictFail(parser, 'Unencoded <')
            // if there was some whitespace, then add that in.
            if (parser.startTagPosition + 1 < parser.position) {
              var pad = parser.position - parser.startTagPosition
              c = new Array(pad).join(' ') + c
            }
            parser.textNode += '<' + c
            parser.state = S.TEXT
          }
          continue

        case S.SGML_DECL:
          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
            emitNode(parser, 'onopencdata')
            parser.state = S.CDATA
            parser.sgmlDecl = ''
            parser.cdata = ''
          } else if (parser.sgmlDecl + c === '--') {
            parser.state = S.COMMENT
            parser.comment = ''
            parser.sgmlDecl = ''
          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
            parser.state = S.DOCTYPE
            if (parser.doctype || parser.sawRoot) {
              strictFail(parser,
                'Inappropriately located doctype declaration')
            }
            parser.doctype = ''
            parser.sgmlDecl = ''
          } else if (c === '>') {
            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
            parser.sgmlDecl = ''
            parser.state = S.TEXT
          } else if (is(quote, c)) {
            parser.state = S.SGML_DECL_QUOTED
            parser.sgmlDecl += c
          } else {
            parser.sgmlDecl += c
          }
          continue

        case S.SGML_DECL_QUOTED:
          if (c === parser.q) {
            parser.state = S.SGML_DECL
            parser.q = ''
          }
          parser.sgmlDecl += c
          continue

        case S.DOCTYPE:
          if (c === '>') {
            parser.state = S.TEXT
            emitNode(parser, 'ondoctype', parser.doctype)
            parser.doctype = true // just remember that we saw it.
          } else {
            parser.doctype += c
            if (c === '[') {
              parser.state = S.DOCTYPE_DTD
            } else if (is(quote, c)) {
              parser.state = S.DOCTYPE_QUOTED
              parser.q = c
            }
          }
          continue

        case S.DOCTYPE_QUOTED:
          parser.doctype += c
          if (c === parser.q) {
            parser.q = ''
            parser.state = S.DOCTYPE
          }
          continue

        case S.DOCTYPE_DTD:
          parser.doctype += c
          if (c === ']') {
            parser.state = S.DOCTYPE
          } else if (is(quote, c)) {
            parser.state = S.DOCTYPE_DTD_QUOTED
            parser.q = c
          }
          continue

        case S.DOCTYPE_DTD_QUOTED:
          parser.doctype += c
          if (c === parser.q) {
            parser.state = S.DOCTYPE_DTD
            parser.q = ''
          }
          continue

        case S.COMMENT:
          if (c === '-') {
            parser.state = S.COMMENT_ENDING
          } else {
            parser.comment += c
          }
          continue

        case S.COMMENT_ENDING:
          if (c === '-') {
            parser.state = S.COMMENT_ENDED
            parser.comment = textopts(parser.opt, parser.comment)
            if (parser.comment) {
              emitNode(parser, 'oncomment', parser.comment)
            }
            parser.comment = ''
          } else {
            parser.comment += '-' + c
            parser.state = S.COMMENT
          }
          continue

        case S.COMMENT_ENDED:
          if (c !== '>') {
            strictFail(parser, 'Malformed comment')
            // allow <!-- blah -- bloo --> in non-strict mode,
            // which is a comment of " blah -- bloo "
            parser.comment += '--' + c
            parser.state = S.COMMENT
          } else {
            parser.state = S.TEXT
          }
          continue

        case S.CDATA:
          if (c === ']') {
            parser.state = S.CDATA_ENDING
          } else {
            parser.cdata += c
          }
          continue

        case S.CDATA_ENDING:
          if (c === ']') {
            parser.state = S.CDATA_ENDING_2
          } else {
            parser.cdata += ']' + c
            parser.state = S.CDATA
          }
          continue

        case S.CDATA_ENDING_2:
          if (c === '>') {
            if (parser.cdata) {
              emitNode(parser, 'oncdata', parser.cdata)
            }
            emitNode(parser, 'onclosecdata')
            parser.cdata = ''
            parser.state = S.TEXT
          } else if (c === ']') {
            parser.cdata += ']'
          } else {
            parser.cdata += ']]' + c
            parser.state = S.CDATA
          }
          continue

        case S.PROC_INST:
          if (c === '?') {
            parser.state = S.PROC_INST_ENDING
          } else if (is(whitespace, c)) {
            parser.state = S.PROC_INST_BODY
          } else {
            parser.procInstName += c
          }
          continue

        case S.PROC_INST_BODY:
          if (!parser.procInstBody && is(whitespace, c)) {
            continue
          } else if (c === '?') {
            parser.state = S.PROC_INST_ENDING
          } else {
            parser.procInstBody += c
          }
          continue

        case S.PROC_INST_ENDING:
          if (c === '>') {
            emitNode(parser, 'onprocessinginstruction', {
              name: parser.procInstName,
              body: parser.procInstBody
            })
            parser.procInstName = parser.procInstBody = ''
            parser.state = S.TEXT
          } else {
            parser.procInstBody += '?' + c
            parser.state = S.PROC_INST_BODY
          }
          continue

        case S.OPEN_TAG:
          if (is(nameBody, c)) {
            parser.tagName += c
          } else {
            newTag(parser)
            if (c === '>') {
              openTag(parser)
            } else if (c === '/') {
              parser.state = S.OPEN_TAG_SLASH
            } else {
              if (not(whitespace, c)) {
                strictFail(parser, 'Invalid character in tag name')
              }
              parser.state = S.ATTRIB
            }
          }
          continue

        case S.OPEN_TAG_SLASH:
          if (c === '>') {
            openTag(parser, true)
            closeTag(parser)
          } else {
            strictFail(parser, 'Forward-slash in opening tag not followed by >')
            parser.state = S.ATTRIB
          }
          continue

        case S.ATTRIB:
          // haven't read the attribute name yet.
          if (is(whitespace, c)) {
            continue
          } else if (c === '>') {
            openTag(parser)
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH
          } else if (is(nameStart, c)) {
            parser.attribName = c
            parser.attribValue = ''
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_NAME:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE
          } else if (c === '>') {
            strictFail(parser, 'Attribute without value')
            parser.attribValue = parser.attribName
            attrib(parser)
            openTag(parser)
          } else if (is(whitespace, c)) {
            parser.state = S.ATTRIB_NAME_SAW_WHITE
          } else if (is(nameBody, c)) {
            parser.attribName += c
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_NAME_SAW_WHITE:
          if (c === '=') {
            parser.state = S.ATTRIB_VALUE
          } else if (is(whitespace, c)) {
            continue
          } else {
            strictFail(parser, 'Attribute without value')
            parser.tag.attributes[parser.attribName] = ''
            parser.attribValue = ''
            emitNode(parser, 'onattribute', {
              name: parser.attribName,
              value: ''
            })
            parser.attribName = ''
            if (c === '>') {
              openTag(parser)
            } else if (is(nameStart, c)) {
              parser.attribName = c
              parser.state = S.ATTRIB_NAME
            } else {
              strictFail(parser, 'Invalid attribute name')
              parser.state = S.ATTRIB
            }
          }
          continue

        case S.ATTRIB_VALUE:
          if (is(whitespace, c)) {
            continue
          } else if (is(quote, c)) {
            parser.q = c
            parser.state = S.ATTRIB_VALUE_QUOTED
          } else {
            strictFail(parser, 'Unquoted attribute value')
            parser.state = S.ATTRIB_VALUE_UNQUOTED
            parser.attribValue = c
          }
          continue

        case S.ATTRIB_VALUE_QUOTED:
          if (c !== parser.q) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_Q
            } else {
              parser.attribValue += c
            }
            continue
          }
          attrib(parser)
          parser.q = ''
          parser.state = S.ATTRIB_VALUE_CLOSED
          continue

        case S.ATTRIB_VALUE_CLOSED:
          if (is(whitespace, c)) {
            parser.state = S.ATTRIB
          } else if (c === '>') {
            openTag(parser)
          } else if (c === '/') {
            parser.state = S.OPEN_TAG_SLASH
          } else if (is(nameStart, c)) {
            strictFail(parser, 'No whitespace between attributes')
            parser.attribName = c
            parser.attribValue = ''
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, 'Invalid attribute name')
          }
          continue

        case S.ATTRIB_VALUE_UNQUOTED:
          if (not(attribEnd, c)) {
            if (c === '&') {
              parser.state = S.ATTRIB_VALUE_ENTITY_U
            } else {
              parser.attribValue += c
            }
            continue
          }
          attrib(parser)
          if (c === '>') {
            openTag(parser)
          } else {
            parser.state = S.ATTRIB
          }
          continue

        case S.CLOSE_TAG:
          if (!parser.tagName) {
            if (is(whitespace, c)) {
              continue
            } else if (not(nameStart, c)) {
              if (parser.script) {
                parser.script += '</' + c
                parser.state = S.SCRIPT
              } else {
                strictFail(parser, 'Invalid tagname in closing tag.')
              }
            } else {
              parser.tagName = c
            }
          } else if (c === '>') {
            closeTag(parser)
          } else if (is(nameBody, c)) {
            parser.tagName += c
          } else if (parser.script) {
            parser.script += '</' + parser.tagName
            parser.tagName = ''
            parser.state = S.SCRIPT
          } else {
            if (not(whitespace, c)) {
              strictFail(parser, 'Invalid tagname in closing tag')
            }
            parser.state = S.CLOSE_TAG_SAW_WHITE
          }
          continue

        case S.CLOSE_TAG_SAW_WHITE:
          if (is(whitespace, c)) {
            continue
          }
          if (c === '>') {
            closeTag(parser)
          } else {
            strictFail(parser, 'Invalid characters in closing tag')
          }
          continue

        case S.TEXT_ENTITY:
        case S.ATTRIB_VALUE_ENTITY_Q:
        case S.ATTRIB_VALUE_ENTITY_U:
          var returnState
          var buffer
          switch (parser.state) {
            case S.TEXT_ENTITY:
              returnState = S.TEXT
              buffer = 'textNode'
              break

            case S.ATTRIB_VALUE_ENTITY_Q:
              returnState = S.ATTRIB_VALUE_QUOTED
              buffer = 'attribValue'
              break

            case S.ATTRIB_VALUE_ENTITY_U:
              returnState = S.ATTRIB_VALUE_UNQUOTED
              buffer = 'attribValue'
              break
          }

          if (c === ';') {
            parser[buffer] += parseEntity(parser)
            parser.entity = ''
            parser.state = returnState
          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
            parser.entity += c
          } else {
            strictFail(parser, 'Invalid character in entity name')
            parser[buffer] += '&' + parser.entity + c
            parser.entity = ''
            parser.state = returnState
          }

          continue

        default:
          throw new Error(parser, 'Unknown state: ' + parser.state)
      }
    } // while

    if (parser.position >= parser.bufferCheckPosition) {
      checkBufferLength(parser)
    }
    return parser
  }

  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
  if (!String.fromCodePoint) {
    (function () {
      var stringFromCharCode = String.fromCharCode
      var floor = Math.floor
      var fromCodePoint = function () {
        var MAX_SIZE = 0x4000
        var codeUnits = []
        var highSurrogate
        var lowSurrogate
        var index = -1
        var length = arguments.length
        if (!length) {
          return ''
        }
        var result = ''
        while (++index < length) {
          var codePoint = Number(arguments[index])
          if (
            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
            codePoint < 0 || // not a valid Unicode code point
            codePoint > 0x10FFFF || // not a valid Unicode code point
            floor(codePoint) !== codePoint // not an integer
          ) {
            throw RangeError('Invalid code point: ' + codePoint)
          }
          if (codePoint <= 0xFFFF) { // BMP code point
            codeUnits.push(codePoint)
          } else { // Astral code point; split in surrogate halves
            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            codePoint -= 0x10000
            highSurrogate = (codePoint >> 10) + 0xD800
            lowSurrogate = (codePoint % 0x400) + 0xDC00
            codeUnits.push(highSurrogate, lowSurrogate)
          }
          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
            result += stringFromCharCode.apply(null, codeUnits)
            codeUnits.length = 0
          }
        }
        return result
      }
      if (Object.defineProperty) {
        Object.defineProperty(String, 'fromCodePoint', {
          value: fromCodePoint,
          configurable: true,
          writable: true
        })
      } else {
        String.fromCodePoint = fromCodePoint
      }
    }())
  }
})( false ? this.sax = {} : exports)


/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(652);
var v4 = __webpack_require__(653);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(88);
var bytesToUuid = __webpack_require__(87);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
  _seedBytes[0] | 0x01,
  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(88);
var bytesToUuid = __webpack_require__(87);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 654 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  exports.stripBOM = function(str) {
    if (str[0] === '\uFEFF') {
      return str.substring(1);
    } else {
      return str;
    }
  };

}).call(this);


/***/ }),
/* 655 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var prefixMatch;

  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

  exports.normalize = function(str) {
    return str.toLowerCase();
  };

  exports.firstCharLowerCase = function(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
  };

  exports.stripPrefix = function(str) {
    return str.replace(prefixMatch, '');
  };

  exports.parseNumbers = function(str) {
    if (!isNaN(str)) {
      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
    }
    return str;
  };

  exports.parseBooleans = function(str) {
    if (/^(?:true|false)$/i.test(str)) {
      str = str.toLowerCase() === 'true';
    }
    return str;
  };

}).call(this);


/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, setImmediate, wrapCDATA,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sax = __webpack_require__(650);

  events = __webpack_require__(99);

  builder = __webpack_require__(96);

  bom = __webpack_require__(654);

  processors = __webpack_require__(655);

  setImmediate = __webpack_require__(671).setImmediate;

  isEmpty = function(thing) {
    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
  };

  processName = function(processors, processedName) {
    var i, len, process;
    for (i = 0, len = processors.length; i < len; i++) {
      process = processors[i];
      processedName = process(processedName);
    }
    return processedName;
  };

  requiresCDATA = function(entry) {
    return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
  };

  wrapCDATA = function(entry) {
    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
  };

  escapeCDATA = function(entry) {
    return entry.replace(']]>', ']]]]><![CDATA[>');
  };

  exports.processors = processors;

  exports.defaults = {
    "0.1": {
      explicitCharkey: false,
      trim: true,
      normalize: true,
      normalizeTags: false,
      attrkey: "@",
      charkey: "#",
      explicitArray: false,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: false,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      childkey: '@@',
      charsAsChildren: false,
      includeWhiteChars: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      emptyTag: ''
    },
    "0.2": {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      normalizeTags: false,
      attrkey: "$",
      charkey: "_",
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: true,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      preserveChildrenOrder: false,
      childkey: '$$',
      charsAsChildren: false,
      includeWhiteChars: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      rootName: 'root',
      xmldec: {
        'version': '1.0',
        'encoding': 'UTF-8',
        'standalone': true
      },
      doctype: null,
      renderOpts: {
        'pretty': true,
        'indent': '  ',
        'newline': '\n'
      },
      headless: false,
      chunkSize: 10000,
      emptyTag: '',
      cdata: false
    }
  };

  exports.ValidationError = (function(superClass) {
    extend(ValidationError, superClass);

    function ValidationError(message) {
      this.message = message;
    }

    return ValidationError;

  })(Error);

  exports.Builder = (function() {
    function Builder(opts) {
      var key, ref, value;
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
    }

    Builder.prototype.buildObject = function(rootObj) {
      var attrkey, charkey, render, rootElement, rootName;
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === exports.defaults['0.2'].rootName)) {
        rootName = Object.keys(rootObj)[0];
        rootObj = rootObj[rootName];
      } else {
        rootName = this.options.rootName;
      }
      render = (function(_this) {
        return function(element, obj) {
          var attr, child, entry, index, key, value;
          if (typeof obj !== 'object') {
            if (_this.options.cdata && requiresCDATA(obj)) {
              element.raw(wrapCDATA(obj));
            } else {
              element.txt(obj);
            }
          } else {
            for (key in obj) {
              if (!hasProp.call(obj, key)) continue;
              child = obj[key];
              if (key === attrkey) {
                if (typeof child === "object") {
                  for (attr in child) {
                    value = child[attr];
                    element = element.att(attr, value);
                  }
                }
              } else if (key === charkey) {
                if (_this.options.cdata && requiresCDATA(child)) {
                  element = element.raw(wrapCDATA(child));
                } else {
                  element = element.txt(child);
                }
              } else if (Array.isArray(child)) {
                for (index in child) {
                  if (!hasProp.call(child, index)) continue;
                  entry = child[index];
                  if (typeof entry === 'string') {
                    if (_this.options.cdata && requiresCDATA(entry)) {
                      element = element.ele(key).raw(wrapCDATA(entry)).up();
                    } else {
                      element = element.ele(key, entry).up();
                    }
                  } else {
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else if (typeof child === "object") {
                element = render(element.ele(key), child).up();
              } else {
                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                  element = element.ele(key).raw(wrapCDATA(child)).up();
                } else {
                  if (child == null) {
                    child = '';
                  }
                  element = element.ele(key, child.toString()).up();
                }
              }
            }
          }
          return element;
        };
      })(this);
      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
        headless: this.options.headless,
        allowSurrogateChars: this.options.allowSurrogateChars
      });
      return render(rootElement, rootObj).end(this.options.renderOpts);
    };

    return Builder;

  })();

  exports.Parser = (function(superClass) {
    extend(Parser, superClass);

    function Parser(opts) {
      this.parseString = bind(this.parseString, this);
      this.reset = bind(this.reset, this);
      this.assignOrPush = bind(this.assignOrPush, this);
      this.processAsync = bind(this.processAsync, this);
      var key, ref, value;
      if (!(this instanceof exports.Parser)) {
        return new exports.Parser(opts);
      }
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
      if (this.options.xmlns) {
        this.options.xmlnskey = this.options.attrkey + "ns";
      }
      if (this.options.normalizeTags) {
        if (!this.options.tagNameProcessors) {
          this.options.tagNameProcessors = [];
        }
        this.options.tagNameProcessors.unshift(processors.normalize);
      }
      this.reset();
    }

    Parser.prototype.processAsync = function() {
      var chunk, err, error1;
      try {
        if (this.remaining.length <= this.options.chunkSize) {
          chunk = this.remaining;
          this.remaining = '';
          this.saxParser = this.saxParser.write(chunk);
          return this.saxParser.close();
        } else {
          chunk = this.remaining.substr(0, this.options.chunkSize);
          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
          this.saxParser = this.saxParser.write(chunk);
          return setImmediate(this.processAsync);
        }
      } catch (error1) {
        err = error1;
        if (!this.saxParser.errThrown) {
          this.saxParser.errThrown = true;
          return this.emit(err);
        }
      }
    };

    Parser.prototype.assignOrPush = function(obj, key, newValue) {
      if (!(key in obj)) {
        if (!this.options.explicitArray) {
          return obj[key] = newValue;
        } else {
          return obj[key] = [newValue];
        }
      } else {
        if (!(obj[key] instanceof Array)) {
          obj[key] = [obj[key]];
        }
        return obj[key].push(newValue);
      }
    };

    Parser.prototype.reset = function() {
      var attrkey, charkey, ontext, stack;
      this.removeAllListeners();
      this.saxParser = sax.parser(this.options.strict, {
        trim: false,
        normalize: false,
        xmlns: this.options.xmlns
      });
      this.saxParser.errThrown = false;
      this.saxParser.onerror = (function(_this) {
        return function(error) {
          _this.saxParser.resume();
          if (!_this.saxParser.errThrown) {
            _this.saxParser.errThrown = true;
            return _this.emit("error", error);
          }
        };
      })(this);
      this.saxParser.onend = (function(_this) {
        return function() {
          if (!_this.saxParser.ended) {
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      this.saxParser.ended = false;
      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
      this.resultObject = null;
      stack = [];
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      this.saxParser.onopentag = (function(_this) {
        return function(node) {
          var key, newValue, obj, processedKey, ref;
          obj = {};
          obj[charkey] = "";
          if (!_this.options.ignoreAttrs) {
            ref = node.attributes;
            for (key in ref) {
              if (!hasProp.call(ref, key)) continue;
              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                obj[attrkey] = {};
              }
              newValue = _this.options.attrValueProcessors ? processName(_this.options.attrValueProcessors, node.attributes[key]) : node.attributes[key];
              processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key) : key;
              if (_this.options.mergeAttrs) {
                _this.assignOrPush(obj, processedKey, newValue);
              } else {
                obj[attrkey][processedKey] = newValue;
              }
            }
          }
          obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name) : node.name;
          if (_this.options.xmlns) {
            obj[_this.options.xmlnskey] = {
              uri: node.uri,
              local: node.local
            };
          }
          return stack.push(obj);
        };
      })(this);
      this.saxParser.onclosetag = (function(_this) {
        return function() {
          var cdata, emptyStr, err, error1, key, node, nodeName, obj, objClone, old, s, xpath;
          obj = stack.pop();
          nodeName = obj["#name"];
          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
            delete obj["#name"];
          }
          if (obj.cdata === true) {
            cdata = obj.cdata;
            delete obj.cdata;
          }
          s = stack[stack.length - 1];
          if (obj[charkey].match(/^\s*$/) && !cdata) {
            emptyStr = obj[charkey];
            delete obj[charkey];
          } else {
            if (_this.options.trim) {
              obj[charkey] = obj[charkey].trim();
            }
            if (_this.options.normalize) {
              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
            }
            obj[charkey] = _this.options.valueProcessors ? processName(_this.options.valueProcessors, obj[charkey]) : obj[charkey];
            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
              obj = obj[charkey];
            }
          }
          if (isEmpty(obj)) {
            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
          }
          if (_this.options.validator != null) {
            xpath = "/" + ((function() {
              var i, len, results;
              results = [];
              for (i = 0, len = stack.length; i < len; i++) {
                node = stack[i];
                results.push(node["#name"]);
              }
              return results;
            })()).concat(nodeName).join("/");
            try {
              obj = _this.options.validator(xpath, s && s[nodeName], obj);
            } catch (error1) {
              err = error1;
              _this.emit("error", err);
            }
          }
          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
            if (!_this.options.preserveChildrenOrder) {
              node = {};
              if (_this.options.attrkey in obj) {
                node[_this.options.attrkey] = obj[_this.options.attrkey];
                delete obj[_this.options.attrkey];
              }
              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                node[_this.options.charkey] = obj[_this.options.charkey];
                delete obj[_this.options.charkey];
              }
              if (Object.getOwnPropertyNames(obj).length > 0) {
                node[_this.options.childkey] = obj;
              }
              obj = node;
            } else if (s) {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              objClone = {};
              for (key in obj) {
                if (!hasProp.call(obj, key)) continue;
                objClone[key] = obj[key];
              }
              s[_this.options.childkey].push(objClone);
              delete obj["#name"];
              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                obj = obj[charkey];
              }
            }
          }
          if (stack.length > 0) {
            return _this.assignOrPush(s, nodeName, obj);
          } else {
            if (_this.options.explicitRoot) {
              old = obj;
              obj = {};
              obj[nodeName] = old;
            }
            _this.resultObject = obj;
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      ontext = (function(_this) {
        return function(text) {
          var charChild, s;
          s = stack[stack.length - 1];
          if (s) {
            s[charkey] += text;
            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              charChild = {
                '#name': '__text__'
              };
              charChild[charkey] = text;
              if (_this.options.normalize) {
                charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
              }
              s[_this.options.childkey].push(charChild);
            }
            return s;
          }
        };
      })(this);
      this.saxParser.ontext = ontext;
      return this.saxParser.oncdata = (function(_this) {
        return function(text) {
          var s;
          s = ontext(text);
          if (s) {
            return s.cdata = true;
          }
        };
      })(this);
    };

    Parser.prototype.parseString = function(str, cb) {
      var err, error1;
      if ((cb != null) && typeof cb === "function") {
        this.on("end", function(result) {
          this.reset();
          return cb(null, result);
        });
        this.on("error", function(err) {
          this.reset();
          return cb(err);
        });
      }
      try {
        str = str.toString();
        if (str.trim() === '') {
          this.emit("end", null);
          return true;
        }
        str = bom.stripBOM(str);
        if (this.options.async) {
          this.remaining = str;
          setImmediate(this.processAsync);
          return this.saxParser;
        }
        return this.saxParser.write(str).close();
      } catch (error1) {
        err = error1;
        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
          this.emit('error', err);
          return this.saxParser.errThrown = true;
        } else if (this.saxParser.ended) {
          throw err;
        }
      }
    };

    return Parser;

  })(events.EventEmitter);

  exports.parseString = function(str, a, b) {
    var cb, options, parser;
    if (b != null) {
      if (typeof b === 'function') {
        cb = b;
      }
      if (typeof a === 'object') {
        options = a;
      }
    } else {
      if (typeof a === 'function') {
        cb = a;
      }
      options = {};
    }
    parser = new exports.Parser(options);
    return parser.parseString(str, cb);
  };

}).call(this);


/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, create;

  create = __webpack_require__(3);

  module.exports = XMLAttribute = (function() {
    function XMLAttribute(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing attribute name of element " + parent.name);
      }
      if (value == null) {
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
      }
      this.name = this.stringify.attName(name);
      this.value = this.stringify.attValue(value);
    }

    XMLAttribute.prototype.clone = function() {
      return create(XMLAttribute.prototype, this);
    };

    XMLAttribute.prototype.toString = function(options, level) {
      return ' ' + this.name + '="' + this.value + '"';
    };

    return XMLAttribute;

  })();

}).call(this);


/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

  XMLStringifier = __webpack_require__(664);

  XMLDeclaration = __webpack_require__(92);

  XMLDocType = __webpack_require__(93);

  XMLElement = __webpack_require__(94);

  module.exports = XMLBuilder = (function() {
    function XMLBuilder(name, options) {
      var root, temp;
      if (name == null) {
        throw new Error("Root element needs a name");
      }
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.stringify = new XMLStringifier(options);
      temp = new XMLElement(this, 'doc');
      root = temp.element(name);
      root.isRoot = true;
      root.documentObject = this;
      this.rootObject = root;
      if (!options.headless) {
        root.declaration(options);
        if ((options.pubID != null) || (options.sysID != null)) {
          root.doctype(options);
        }
      }
    }

    XMLBuilder.prototype.root = function() {
      return this.rootObject;
    };

    XMLBuilder.prototype.end = function(options) {
      return this.toString(options);
    };

    XMLBuilder.prototype.toString = function(options) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      r = '';
      if (this.xmldec != null) {
        r += this.xmldec.toString(options);
      }
      if (this.doctype != null) {
        r += this.doctype.toString(options);
      }
      r += this.rootObject.toString(options);
      if (pretty && r.slice(-newline.length) === newline) {
        r = r.slice(0, -newline.length);
      }
      return r;
    };

    return XMLBuilder;

  })();

}).call(this);


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDAttList, create;

  create = __webpack_require__(3);

  module.exports = XMLDTDAttList = (function() {
    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      this.stringify = parent.stringify;
      if (elementName == null) {
        throw new Error("Missing DTD element name");
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name");
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type");
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default");
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT");
      }
      this.elementName = this.stringify.eleName(elementName);
      this.attributeName = this.stringify.attName(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      this.defaultValueType = defaultValueType;
    }

    XMLDTDAttList.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
      if (this.defaultValueType !== '#DEFAULT') {
        r += ' ' + this.defaultValueType;
      }
      if (this.defaultValue) {
        r += ' "' + this.defaultValue + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDAttList;

  })();

}).call(this);


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDElement, create;

  create = __webpack_require__(3);

  module.exports = XMLDTDElement = (function() {
    function XMLDTDElement(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing DTD element name");
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (Array.isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.eleName(name);
      this.value = this.stringify.dtdElementValue(value);
    }

    XMLDTDElement.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDElement;

  })();

}).call(this);


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDEntity, create, isObject;

  create = __webpack_require__(3);

  isObject = __webpack_require__(5);

  module.exports = XMLDTDEntity = (function() {
    function XMLDTDEntity(parent, pe, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing entity name");
      }
      if (value == null) {
        throw new Error("Missing entity value");
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error("Public and/or system identifiers are required for an external entity");
        }
        if (value.pubID && !value.sysID) {
          throw new Error("System identifier is required for a public external entity");
        }
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData != null) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error("Notation declaration is not allowed in a parameter entity");
        }
      }
    }

    XMLDTDEntity.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ENTITY';
      if (this.pe) {
        r += ' %';
      }
      r += ' ' + this.name;
      if (this.value) {
        r += ' "' + this.value + '"';
      } else {
        if (this.pubID && this.sysID) {
          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
        } else if (this.sysID) {
          r += ' SYSTEM "' + this.sysID + '"';
        }
        if (this.nData) {
          r += ' NDATA ' + this.nData;
        }
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDEntity;

  })();

}).call(this);


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDNotation, create;

  create = __webpack_require__(3);

  module.exports = XMLDTDNotation = (function() {
    function XMLDTDNotation(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing notation name");
      }
      if (!value.pubID && !value.sysID) {
        throw new Error("Public or system identifiers are required for an external entity");
      }
      this.name = this.stringify.eleName(name);
      if (value.pubID != null) {
        this.pubID = this.stringify.dtdPubID(value.pubID);
      }
      if (value.sysID != null) {
        this.sysID = this.stringify.dtdSysID(value.sysID);
      }
    }

    XMLDTDNotation.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!NOTATION ' + this.name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.pubID) {
        r += ' PUBLIC "' + this.pubID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDNotation;

  })();

}).call(this);


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLRaw, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(3);

  XMLNode = __webpack_require__(12);

  module.exports = XMLRaw = (function(superClass) {
    extend(XMLRaw, superClass);

    function XMLRaw(parent, text) {
      XMLRaw.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing raw text");
      }
      this.value = this.stringify.raw(text);
    }

    XMLRaw.prototype.clone = function() {
      return create(XMLRaw.prototype, this);
    };

    XMLRaw.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLRaw;

  })(XMLNode);

}).call(this);


/***/ }),
/* 664 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLStringifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function() {
    function XMLStringifier(options) {
      this.assertLegalChar = bind(this.assertLegalChar, this);
      var key, ref, value;
      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;
      ref = (options != null ? options.stringify : void 0) || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this[key] = value;
      }
    }

    XMLStringifier.prototype.eleName = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.eleText = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(this.elEscape(val));
    };

    XMLStringifier.prototype.cdata = function(val) {
      val = '' + val || '';
      if (val.match(/]]>/)) {
        throw new Error("Invalid CDATA text: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.comment = function(val) {
      val = '' + val || '';
      if (val.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.raw = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attName = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attValue = function(val) {
      val = '' + val || '';
      return this.attEscape(val);
    };

    XMLStringifier.prototype.insTarget = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.insValue = function(val) {
      val = '' + val || '';
      if (val.match(/\?>/)) {
        throw new Error("Invalid processing instruction value: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlVersion = function(val) {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/)) {
        throw new Error("Invalid version number: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlEncoding = function(val) {
      val = '' + val || '';
      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
        throw new Error("Invalid encoding: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlStandalone = function(val) {
      if (val) {
        return "yes";
      } else {
        return "no";
      }
    };

    XMLStringifier.prototype.dtdPubID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdSysID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdElementValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttType = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttDefault = function(val) {
      if (val != null) {
        return '' + val || '';
      } else {
        return val;
      }
    };

    XMLStringifier.prototype.dtdEntityValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdNData = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.assertLegalChar = function(str) {
      var chars, chr;
      if (this.allowSurrogateChars) {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
      } else {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
      }
      chr = str.match(chars);
      if (chr) {
        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
      }
      return str;
    };

    XMLStringifier.prototype.elEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
    };

    XMLStringifier.prototype.attEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
    };

    return XMLStringifier;

  })();

}).call(this);


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLText, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = __webpack_require__(3);

  XMLNode = __webpack_require__(12);

  module.exports = XMLText = (function(superClass) {
    extend(XMLText, superClass);

    function XMLText(parent, text) {
      XMLText.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing element text");
      }
      this.value = this.stringify.eleText(text);
    }

    XMLText.prototype.clone = function() {
      return create(XMLText.prototype, this);
    };

    XMLText.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLText;

  })(XMLNode);

}).call(this);


/***/ }),
/* 666 */
/***/ (function(module, exports) {

module.exports = require("buffer");

/***/ }),
/* 667 */
/***/ (function(module, exports) {

module.exports = require("domain");

/***/ }),
/* 668 */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),
/* 669 */
/***/ (function(module, exports) {

module.exports = require("querystring");

/***/ }),
/* 670 */
/***/ (function(module, exports) {

module.exports = require("string_decoder");

/***/ }),
/* 671 */
/***/ (function(module, exports) {

module.exports = require("timers");

/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(105);


/***/ })
/******/ ]);
});
//# sourceMappingURL=bundle.js.map